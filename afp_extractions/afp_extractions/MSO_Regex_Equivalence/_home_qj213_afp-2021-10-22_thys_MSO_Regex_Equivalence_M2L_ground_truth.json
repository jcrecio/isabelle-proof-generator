{"file_name": "/home/qj213/afp-2021-10-22/thys/MSO_Regex_Equivalence/M2L.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MSO_Regex_Equivalence", "problem_names": ["lemma positions_in_row: \"positions_in_row w i = {p. p < length w \\<and> snd (w ! p) ! i}\"", "lemma positions_in_row_unique: \"\\<exists>!p. p < length w \\<and> snd (w ! p) ! i \\<Longrightarrow>\n  the_elem (positions_in_row w i) = (THE p. p < length w \\<and> snd (w ! p) ! i)\"", "lemma positions_in_row_length: \"\\<exists>!p. p < length w \\<and> snd (w ! p) ! i \\<Longrightarrow>\n  the_elem (positions_in_row w i) < length w\"", "lemma dec_interp_Inl: \"\\<lbrakk>i \\<in> FO; i < n\\<rbrakk> \\<Longrightarrow> \\<exists>p. dec_interp n FO x ! i = Inl p\"", "lemma dec_interp_not_Inr: \"\\<lbrakk>dec_interp n FO x ! i = Inr P; i \\<in> FO; i < n\\<rbrakk> \\<Longrightarrow> False\"", "lemma dec_interp_Inr: \"\\<lbrakk>i \\<notin> FO; i < n\\<rbrakk> \\<Longrightarrow> \\<exists>P. dec_interp n FO x ! i = Inr P\"", "lemma dec_interp_not_Inl: \"\\<lbrakk>dec_interp n FO x ! i = Inl p; i \\<notin> FO; i < n\\<rbrakk> \\<Longrightarrow> False\"", "lemma Inl_dec_interp_length:\nassumes \"\\<forall>i \\<in> FO. \\<exists>!p. p < length w \\<and> snd (w ! p) ! i\"\nshows \"Inl p \\<in> set (dec_interp n FO w) \\<Longrightarrow> p < length w\"", "lemma Inr_dec_interp_length: \"\\<lbrakk>Inr P \\<in> set (dec_interp n FO w); p \\<in> P\\<rbrakk> \\<Longrightarrow> p < length w\"", "lemma the_elem_Collect[simp]:\n  assumes \"\\<exists>!x. P x\"\n  shows \"the_elem (Collect P) = (The P)\"", "lemma enc_atom_dec: \n  \"\\<lbrakk>wf_word n w; \\<forall>i \\<in> FO. i < n \\<longrightarrow> (\\<exists>!p. p < length w \\<and> snd (w ! p) ! i); p < length w\\<rbrakk> \\<Longrightarrow>\n   enc_atom (dec_interp n FO w) p (fst (w ! p)) = w ! p\"", "lemma enc_dec:\n  \"\\<lbrakk>wf_word n w; \\<forall>i \\<in> FO. i < n \\<longrightarrow> (\\<exists>!p. p < length w \\<and> snd (w ! p) ! i)\\<rbrakk> \\<Longrightarrow>\n   enc (dec_word w, dec_interp n FO w) = w\"", "lemma dec_word_enc: \"dec_word (enc (w, I)) = w\"", "lemma enc_unique: \n  assumes \"wf_interp w I\" \"i < length I\"\n  shows \"\\<exists>p. I ! i = Inl p \\<Longrightarrow> \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i\"", "lemma dec_interp_enc_Inl:\n  \"\\<lbrakk>dec_interp n FO (enc (w, I)) ! i = Inl p'; I ! i = Inl p; i \\<in> FO; i < n; length I = n; p < length w; wf_interp w I\\<rbrakk> \\<Longrightarrow>\n  p = p'\"", "lemma dec_interp_enc_Inr:\n  \"\\<lbrakk>dec_interp n FO (enc (w, I)) ! i = Inr P'; I ! i = Inr P; i \\<notin> FO; i < n; length I = n; \\<forall>p \\<in> P. p < length w\\<rbrakk> \\<Longrightarrow>\n  P = P'\"", "lemma length_dec_interp[simp]: \"length (dec_interp n FO x) = n\"", "lemma nth_dec_interp[simp]: \"i < n \\<Longrightarrow> dec_interp n {} x ! i = Inr (positions_in_row x i)\"", "lemma set_\\<sigma>D[simp]: \"(a, bs) \\<in> set (\\<sigma> \\<Sigma> n) \\<Longrightarrow> a \\<in> set \\<Sigma>\"", "lemma lang_ENC:\n assumes \"FO \\<subseteq> {0 ..< n}\" \"SO \\<subseteq> {0 ..< n} - FO\"\n shows \"lang n (ENC n FO) - {[]} = {enc (w, I) | w I . length I = n \\<and> wf_interp w I \\<and>\n   (\\<forall>i \\<in> FO. case I ! i of Inl _ \\<Rightarrow> True | Inr _ \\<Rightarrow> False) \\<and>\n   (\\<forall>i \\<in> SO. case I ! i of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True)}\"\n   (is \"?L = ?R\")", "lemma lang_ENC_formula:\n  assumes \"wf_formula n \\<phi>\"\n  shows \"lang n (ENC n (FOV \\<phi>)) - {[]} = {enc (w, I) | w I . length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}\"", "lemma enc_alt_def:\n \"enc (w, x # I) = map_index (\\<lambda>n (a, bs). (a, (case x of Inl p \\<Rightarrow> n = p | Inr P \\<Rightarrow> n \\<in> P) # bs)) (enc (w, I))\"", "lemma enc_extend_interp: \"enc (w, I) = enc (w', I') \\<Longrightarrow> enc (w, x # I) = enc (w', x # I')\"", "lemma wf_interp_for_formula_FExists: \n  \"\\<lbrakk>wf_formula (length I) (FExists \\<phi>); w \\<noteq> []\\<rbrakk>\\<Longrightarrow>\n    wf_interp_for_formula (w, I) (FExists \\<phi>) \\<longleftrightarrow>\n    (\\<forall>p < length w. wf_interp_for_formula (w, Inl p # I) \\<phi>)\"", "lemma wf_interp_for_formula_any_Inl: \"wf_interp_for_formula (w, Inl p # I) \\<phi> \\<Longrightarrow>\n  \\<forall>p < length w. wf_interp_for_formula (w, Inl p # I) \\<phi>\"", "lemma wf_interp_for_formula_FEXISTS: \n \"\\<lbrakk>wf_formula (length I) (FEXISTS \\<phi>); w \\<noteq> []\\<rbrakk>\\<Longrightarrow>\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>) \\<longleftrightarrow> (\\<forall>P \\<subseteq> {0 .. length w - 1}. wf_interp_for_formula (w, Inr P # I) \\<phi>)\"", "lemma wf_interp_for_formula_any_Inr: \"wf_interp_for_formula (w, Inr P # I) \\<phi> \\<Longrightarrow>\n  \\<forall>P \\<subseteq> {0 .. length w - 1}. wf_interp_for_formula (w, Inr P # I) \\<phi>\"", "lemma enc_word_length: \"enc (w, I) = enc (w', I') \\<Longrightarrow> length w = length w'\"", "lemma enc_length: \n  assumes \"w \\<noteq> []\" \"enc (w, I) = enc (w', I')\"\n  shows \"length I = length I'\"", "lemma wf_interp_for_formula_FOr:\n  \"wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2) =\n     (wf_interp_for_formula (w, I) \\<phi>1 \\<and> wf_interp_for_formula (w, I) \\<phi>2)\"", "lemma wf_interp_for_formula_FAnd:\n  \"wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2) =\n     (wf_interp_for_formula (w, I) \\<phi>1 \\<and> wf_interp_for_formula (w, I) \\<phi>2)\"", "lemma enc_wf_interp: \n assumes \"wf_formula (length I) \\<phi>\" \"wf_interp_for_formula (w, I) \\<phi>\"\n shows \"wf_interp_for_formula (dec_word (enc (w, I)), dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>\"\n (is \"wf_interp_for_formula (_, ?dec) \\<phi>\")", "lemma enc_welldef: \"\\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) \\<phi>;\n  wf_interp_for_formula (w, I) \\<phi>; wf_interp_for_formula (w', I') \\<phi>\\<rbrakk> \\<Longrightarrow>\n  satisfies (w, I) \\<phi> \\<longleftrightarrow> satisfies (w', I') \\<phi>\"", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_FOr:\n  assumes \"wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\"\n  shows \"lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<subseteq>\n    (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter> {enc (w, I) | w I. length I = n \\<and> wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\"\n    (is \"_ \\<subseteq> (?L1 \\<union> ?L2) \\<inter> ?ENC\")", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_FAnd:\n  assumes \"wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\"\n  shows \"lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<subseteq>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<inter> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<inter> {enc (w, I) | w I. length I = n \\<and> wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\"\n    (is \"_ \\<subseteq> ?L1 \\<inter> ?L2 \\<inter> ?ENC\")", "theorem lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of: \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> = lang n (rexp_of n \\<phi>) - {[]}\"\n   (is \"_ \\<Longrightarrow> _ = ?L n \\<phi>\")", "lemma wf_rexp_of: \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of n \\<phi>)\"", "lemma wf_rexp_of_alt: \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of_alt n \\<phi>)\"", "lemma wf_rexp_of': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of' n \\<phi>)\"", "lemma wf_rexp_of_alt': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of_alt' n \\<phi>)\"", "lemma wf_rexp_of'': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of'' n \\<phi>)\"", "lemma ENC_Not: \"ENC n (FOV (FNot \\<phi>)) = ENC n (FOV \\<phi>)\"", "lemma ENC_And:\n  \"wf_formula n (FAnd \\<phi> \\<psi>) \\<Longrightarrow> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]} \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>)) - {[]}\"", "lemma ENC_Or:\n  \"wf_formula n (FOr \\<phi> \\<psi>) \\<Longrightarrow> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]} \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>)) - {[]}\"", "lemma project_enc: \"map \\<pi> (enc (w, x # I)) = enc (w, I)\"", "lemma list_list_eqI:\n  assumes \"\\<forall>(_, x) \\<in> set xs. x \\<noteq> []\" \"\\<forall>(_, y) \\<in> set ys. y \\<noteq> []\"\n    \"map (\\<lambda>(_, x). hd x) xs = map (\\<lambda>(_, x). hd x) ys\" \"map \\<pi> xs = map \\<pi> ys\"\n  shows \"xs = ys\"", "lemma project_enc_extend:\n  assumes \"map \\<pi> x = enc (w, I)\" \"\\<forall>(_, x) \\<in> set x. x \\<noteq> []\"\n  shows \"x = enc (w, Inr (positions_in_row x 0) # I)\"", "lemma ENC_Exists:\n  \"wf_formula n (FExists \\<phi>) \\<Longrightarrow> lang n (ENC n (FOV (FExists \\<phi>))) - {[]} = map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\"", "lemma ENC_EXISTS:\n  \"wf_formula n (FEXISTS \\<phi>) \\<Longrightarrow> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} = map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\"", "lemma map_project_empty: \"map \\<pi> ` A - {[]} = map \\<pi> ` (A - {[]})\"", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of_rexp_of':\n  \"wf_formula n \\<phi> \\<Longrightarrow> lang n (rexp_of n \\<phi>) - {[]} = lang n (rexp_of' n \\<phi>) - {[]}\"", "lemma Int_Diff_both: \"A \\<inter> B - C = (A - C) \\<inter> (B - C)\"", "lemma lang_ENC_split:\n  assumes \"finite X\" \"X = Y1 \\<union> Y2\" \"n = 0 \\<or> (\\<forall>p \\<in> X. p < n)\"\n  shows \"lang n (ENC n X) = lang n (ENC n Y1) \\<inter> lang n (ENC n Y2)\"", "lemma map_project_Int_ENC:\n  assumes \"0 \\<notin> X\" \"X \\<subseteq> {0 ..< n + 1}\" \"Z \\<subseteq> lists ((set o \\<sigma> \\<Sigma>) (n + 1))\"\n  shows \"map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}\"", "lemma map_project_ENC:\n  assumes \"X \\<subseteq> {0 ..< n + 1}\" \"Z \\<subseteq> lists ((set o \\<sigma> \\<Sigma>) (n + 1))\"\n  shows \"map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    (if 0 \\<in> X\n    then map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) - {[]}\n    else map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) - {[]})\"\n    (is \"?L = (if _ then ?R1 else ?R2)\")", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of'_rexp_of'':\n  \"wf_formula n \\<phi> \\<Longrightarrow> lang n (rexp_of' n \\<phi>) - {[]} = lang n (rexp_of'' n \\<phi>) - {[]}\"", "theorem lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of': \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> = lang n (rexp_of' n \\<phi>) - {[]}\"", "theorem lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of'': \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> = lang n (rexp_of'' n \\<phi>) - {[]}\""], "translations": [["", "lemma positions_in_row: \"positions_in_row w i = {p. p < length w \\<and> snd (w ! p) ! i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positions_in_row w i = {p. p < length w \\<and> snd (w ! p) ! i}", "unfolding positions_in_row_def Option.these_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. the `\n    {x \\<in> set (map_index\n                   (\\<lambda>p a_bs. if snd a_bs ! i then Some p else None)\n                   w).\n     x \\<noteq> None} =\n    {p. p < length w \\<and> snd (w ! p) ! i}", "by (auto intro!: image_eqI[of _ the])"], ["", "lemma positions_in_row_unique: \"\\<exists>!p. p < length w \\<and> snd (w ! p) ! i \\<Longrightarrow>\n  the_elem (positions_in_row w i) = (THE p. p < length w \\<and> snd (w ! p) ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length w \\<and> snd (w ! p) ! i \\<Longrightarrow>\n    the_elem (positions_in_row w i) =\n    (THE p. p < length w \\<and> snd (w ! p) ! i)", "by (rule the1I2) (auto simp: the_elem_def positions_in_row)"], ["", "lemma positions_in_row_length: \"\\<exists>!p. p < length w \\<and> snd (w ! p) ! i \\<Longrightarrow>\n  the_elem (positions_in_row w i) < length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length w \\<and> snd (w ! p) ! i \\<Longrightarrow>\n    the_elem (positions_in_row w i) < length w", "unfolding positions_in_row_unique"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length w \\<and> snd (w ! p) ! i \\<Longrightarrow>\n    (THE p. p < length w \\<and> snd (w ! p) ! i) < length w", "by (rule the1I2) auto"], ["", "lemma dec_interp_Inl: \"\\<lbrakk>i \\<in> FO; i < n\\<rbrakk> \\<Longrightarrow> \\<exists>p. dec_interp n FO x ! i = Inl p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. dec_interp n FO x ! i = Inl p", "unfolding dec_interp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         map (\\<lambda>i.\n                                 if i \\<in> FO\n                                 then Inl (the_elem (positions_in_row x i))\n                                 else Inr (positions_in_row x i))\n                          [0..<n] !\n                         i =\n                         Inl p", "using nth_map[of n \"[0..<n]\"]"], ["proof (prove)\nusing this:\n  n < length [0..<n] \\<Longrightarrow> map ?f [0..<n] ! n = ?f ([0..<n] ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         map (\\<lambda>i.\n                                 if i \\<in> FO\n                                 then Inl (the_elem (positions_in_row x i))\n                                 else Inr (positions_in_row x i))\n                          [0..<n] !\n                         i =\n                         Inl p", "by auto"], ["", "lemma dec_interp_not_Inr: \"\\<lbrakk>dec_interp n FO x ! i = Inr P; i \\<in> FO; i < n\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dec_interp n FO x ! i = Inr P; i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding dec_interp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row x i))\n                     else Inr (positions_in_row x i))\n              [0..<n] !\n             i =\n             Inr P;\n     i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "using nth_map[of n \"[0..<n]\"]"], ["proof (prove)\nusing this:\n  n < length [0..<n] \\<Longrightarrow> map ?f [0..<n] ! n = ?f ([0..<n] ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row x i))\n                     else Inr (positions_in_row x i))\n              [0..<n] !\n             i =\n             Inr P;\n     i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "by auto"], ["", "lemma dec_interp_Inr: \"\\<lbrakk>i \\<notin> FO; i < n\\<rbrakk> \\<Longrightarrow> \\<exists>P. dec_interp n FO x ! i = Inr P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>P. dec_interp n FO x ! i = Inr P", "unfolding dec_interp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>P.\n                         map (\\<lambda>i.\n                                 if i \\<in> FO\n                                 then Inl (the_elem (positions_in_row x i))\n                                 else Inr (positions_in_row x i))\n                          [0..<n] !\n                         i =\n                         Inr P", "using nth_map[of n \"[0..<n]\"]"], ["proof (prove)\nusing this:\n  n < length [0..<n] \\<Longrightarrow> map ?f [0..<n] ! n = ?f ([0..<n] ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>P.\n                         map (\\<lambda>i.\n                                 if i \\<in> FO\n                                 then Inl (the_elem (positions_in_row x i))\n                                 else Inr (positions_in_row x i))\n                          [0..<n] !\n                         i =\n                         Inr P", "by auto"], ["", "lemma dec_interp_not_Inl: \"\\<lbrakk>dec_interp n FO x ! i = Inl p; i \\<notin> FO; i < n\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dec_interp n FO x ! i = Inl p; i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding dec_interp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row x i))\n                     else Inr (positions_in_row x i))\n              [0..<n] !\n             i =\n             Inl p;\n     i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "using nth_map[of n \"[0..<n]\"]"], ["proof (prove)\nusing this:\n  n < length [0..<n] \\<Longrightarrow> map ?f [0..<n] ! n = ?f ([0..<n] ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row x i))\n                     else Inr (positions_in_row x i))\n              [0..<n] !\n             i =\n             Inl p;\n     i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "by auto"], ["", "lemma Inl_dec_interp_length:\nassumes \"\\<forall>i \\<in> FO. \\<exists>!p. p < length w \\<and> snd (w ! p) ! i\"\nshows \"Inl p \\<in> set (dec_interp n FO w) \\<Longrightarrow> p < length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inl p \\<in> set (dec_interp n FO w) \\<Longrightarrow> p < length w", "unfolding dec_interp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Inl p\n    \\<in> set (map (\\<lambda>i.\n                       if i \\<in> FO\n                       then Inl (the_elem (positions_in_row w i))\n                       else Inr (positions_in_row w i))\n                [0..<n]) \\<Longrightarrow>\n    p < length w", "by (auto intro: positions_in_row_length[OF bspec[OF assms]])"], ["", "lemma Inr_dec_interp_length: \"\\<lbrakk>Inr P \\<in> set (dec_interp n FO w); p \\<in> P\\<rbrakk> \\<Longrightarrow> p < length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inr P \\<in> set (dec_interp n FO w); p \\<in> P\\<rbrakk>\n    \\<Longrightarrow> p < length w", "unfolding dec_interp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Inr P\n             \\<in> set (map (\\<lambda>i.\n                                if i \\<in> FO\n                                then Inl (the_elem (positions_in_row w i))\n                                else Inr (positions_in_row w i))\n                         [0..<n]);\n     p \\<in> P\\<rbrakk>\n    \\<Longrightarrow> p < length w", "by (auto simp: positions_in_row)"], ["", "lemma the_elem_Collect[simp]:\n  assumes \"\\<exists>!x. P x\"\n  shows \"the_elem (Collect P) = (The P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_elem (Collect P) = The P", "proof (unfold the_elem_def, rule the_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. Collect P = {The P}\n 2. \\<And>x. Collect P = {x} \\<Longrightarrow> x = The P", "from assms"], ["proof (chain)\npicking this:\n  \\<exists>!x. P x", "have \"P (The P)\""], ["proof (prove)\nusing this:\n  \\<exists>!x. P x\n\ngoal (1 subgoal):\n 1. P (The P)", "by (rule theI')"], ["proof (state)\nthis:\n  P (The P)\n\ngoal (2 subgoals):\n 1. Collect P = {The P}\n 2. \\<And>x. Collect P = {x} \\<Longrightarrow> x = The P", "with assms"], ["proof (chain)\npicking this:\n  \\<exists>!x. P x\n  P (The P)", "show \"Collect P = {The P}\""], ["proof (prove)\nusing this:\n  \\<exists>!x. P x\n  P (The P)\n\ngoal (1 subgoal):\n 1. Collect P = {The P}", "by auto"], ["proof (state)\nthis:\n  Collect P = {The P}\n\ngoal (1 subgoal):\n 1. \\<And>x. Collect P = {x} \\<Longrightarrow> x = The P", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. Collect P = {x} \\<Longrightarrow> x = The P", "assume \"Collect P = {x}\""], ["proof (state)\nthis:\n  Collect P = {x}\n\ngoal (1 subgoal):\n 1. \\<And>x. Collect P = {x} \\<Longrightarrow> x = The P", "then"], ["proof (chain)\npicking this:\n  Collect P = {x}", "show \"x = The P\""], ["proof (prove)\nusing this:\n  Collect P = {x}\n\ngoal (1 subgoal):\n 1. x = The P", "by (auto intro: the_equality[symmetric])"], ["proof (state)\nthis:\n  x = The P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enc_atom_dec: \n  \"\\<lbrakk>wf_word n w; \\<forall>i \\<in> FO. i < n \\<longrightarrow> (\\<exists>!p. p < length w \\<and> snd (w ! p) ! i); p < length w\\<rbrakk> \\<Longrightarrow>\n   enc_atom (dec_interp n FO w) p (fst (w ! p)) = w ! p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_word n w;\n     \\<forall>i\\<in>FO.\n        i < n \\<longrightarrow>\n        (\\<exists>!p. p < length w \\<and> snd (w ! p) ! i);\n     p < length w\\<rbrakk>\n    \\<Longrightarrow> enc_atom (dec_interp n FO w) p (fst (w ! p)) = w ! p", "unfolding wf_word dec_interp_def map_filter_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n);\n     \\<forall>i\\<in>FO.\n        i < n \\<longrightarrow>\n        (\\<exists>!p. p < length w \\<and> snd (w ! p) ! i);\n     p < length w\\<rbrakk>\n    \\<Longrightarrow> enc_atom\n                       (map (\\<lambda>i.\n                                if i \\<in> FO\n                                then Inl (the_elem (positions_in_row w i))\n                                else Inr (positions_in_row w i))\n                         [0..<n])\n                       p (fst (w ! p)) =\n                      w ! p", "by (auto 0 4 simp: comp_def \\<sigma>_def set_n_lists positions_in_row dest: nth_mem[of p w]\n    intro!: trans[OF iffD2[OF prod.inject] prod.collapse] nth_equalityI the_equality[symmetric]\n    intro: the1I2[of \"\\<lambda>p. p < length w \\<and> snd (w ! p) ! i\" \"\\<lambda>p. snd (w ! p) ! i\" for i]\n    elim!: contrapos_np[of _ False])"], ["", "lemma enc_dec:\n  \"\\<lbrakk>wf_word n w; \\<forall>i \\<in> FO. i < n \\<longrightarrow> (\\<exists>!p. p < length w \\<and> snd (w ! p) ! i)\\<rbrakk> \\<Longrightarrow>\n   enc (dec_word w, dec_interp n FO w) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_word n w;\n     \\<forall>i\\<in>FO.\n        i < n \\<longrightarrow>\n        (\\<exists>!p. p < length w \\<and> snd (w ! p) ! i)\\<rbrakk>\n    \\<Longrightarrow> enc (dec_word w, dec_interp n FO w) = w", "unfolding enc.simps dec_word_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_word n w;\n     \\<forall>i\\<in>FO.\n        i < n \\<longrightarrow>\n        (\\<exists>!p. p < length w \\<and> snd (w ! p) ! i)\\<rbrakk>\n    \\<Longrightarrow> map_index (enc_atom (dec_interp n FO w)) (map fst w) =\n                      w", "by (intro trans[OF map_index_map map_index_congL] allI impI enc_atom_dec) assumption+"], ["", "lemma dec_word_enc: \"dec_word (enc (w, I)) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dec_word (enc (w, I)) = w", "unfolding dec_word_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (enc (w, I)) = w", "by auto"], ["", "lemma enc_unique: \n  assumes \"wf_interp w I\" \"i < length I\"\n  shows \"\\<exists>p. I ! i = Inl p \\<Longrightarrow> \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. I ! i = Inl p \\<Longrightarrow>\n    \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i", "proof (erule exE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       I ! i = Inl p \\<Longrightarrow>\n       \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       I ! i = Inl p \\<Longrightarrow>\n       \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i", "assume \"I ! i = Inl p\""], ["proof (state)\nthis:\n  I ! i = Inl p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       I ! i = Inl p \\<Longrightarrow>\n       \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i", "with assms"], ["proof (chain)\npicking this:\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  i < length I\n  I ! i = Inl p", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  i < length I\n  I ! i = Inl p\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i", "by (auto simp: map_index all_set_conv_all_nth intro!: exI[of _ p])"], ["proof (state)\nthis:\n  \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dec_interp_enc_Inl:\n  \"\\<lbrakk>dec_interp n FO (enc (w, I)) ! i = Inl p'; I ! i = Inl p; i \\<in> FO; i < n; length I = n; p < length w; wf_interp w I\\<rbrakk> \\<Longrightarrow>\n  p = p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dec_interp n FO (enc (w, I)) ! i = Inl p'; I ! i = Inl p;\n     i \\<in> FO; i < n; length I = n; p < length w;\n     0 < length w \\<and>\n     (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n     (\\<forall>x\\<in>set I.\n         case x of Inl p \\<Rightarrow> p < length w\n         | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\\<rbrakk>\n    \\<Longrightarrow> p = p'", "unfolding dec_interp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row (enc (w, I)) i))\n                     else Inr (positions_in_row (enc (w, I)) i))\n              [0..<n] !\n             i =\n             Inl p';\n     I ! i = Inl p; i \\<in> FO; i < n; length I = n; p < length w;\n     0 < length w \\<and>\n     (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n     (\\<forall>x\\<in>set I.\n         case x of Inl p \\<Rightarrow> p < length w\n         | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\\<rbrakk>\n    \\<Longrightarrow> p = p'", "using nth_map[of _ \"[0..<n]\"] positions_in_row_unique[OF enc_unique]"], ["proof (prove)\nusing this:\n  ?n < length [0..<n] \\<Longrightarrow>\n  map ?f [0..<n] ! ?n = ?f ([0..<n] ! ?n)\n  \\<lbrakk>0 < length ?w2 \\<and>\n           (\\<forall>a\\<in>set ?w2. a \\<in> set \\<Sigma>) \\<and>\n           (\\<forall>x\\<in>set ?I3.\n               case x of Inl p \\<Rightarrow> p < length ?w2\n               | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length ?w2);\n   ?i < length ?I3; \\<exists>p. ?I3 ! ?i = Inl p\\<rbrakk>\n  \\<Longrightarrow> the_elem (positions_in_row (enc (?w2, ?I3)) ?i) =\n                    (THE p.\n                        p < length (enc (?w2, ?I3)) \\<and>\n                        snd (enc (?w2, ?I3) ! p) ! ?i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row (enc (w, I)) i))\n                     else Inr (positions_in_row (enc (w, I)) i))\n              [0..<n] !\n             i =\n             Inl p';\n     I ! i = Inl p; i \\<in> FO; i < n; length I = n; p < length w;\n     0 < length w \\<and>\n     (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n     (\\<forall>x\\<in>set I.\n         case x of Inl p \\<Rightarrow> p < length w\n         | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\\<rbrakk>\n    \\<Longrightarrow> p = p'", "by (auto intro: sym[OF the_equality])"], ["", "lemma dec_interp_enc_Inr:\n  \"\\<lbrakk>dec_interp n FO (enc (w, I)) ! i = Inr P'; I ! i = Inr P; i \\<notin> FO; i < n; length I = n; \\<forall>p \\<in> P. p < length w\\<rbrakk> \\<Longrightarrow>\n  P = P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dec_interp n FO (enc (w, I)) ! i = Inr P'; I ! i = Inr P;\n     i \\<notin> FO; i < n; length I = n;\n     \\<forall>p\\<in>P. p < length w\\<rbrakk>\n    \\<Longrightarrow> P = P'", "unfolding dec_interp_def positions_in_row"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem\n                                {p. p < length (enc (w, I)) \\<and>\n                                    snd (enc (w, I) ! p) ! i})\n                     else Inr {p. p < length (enc (w, I)) \\<and>\n                                  snd (enc (w, I) ! p) ! i})\n              [0..<n] !\n             i =\n             Inr P';\n     I ! i = Inr P; i \\<notin> FO; i < n; length I = n;\n     \\<forall>p\\<in>P. p < length w\\<rbrakk>\n    \\<Longrightarrow> P = P'", "by auto"], ["", "lemma length_dec_interp[simp]: \"length (dec_interp n FO x) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dec_interp n FO x) = n", "by (auto simp: dec_interp_def)"], ["", "lemma nth_dec_interp[simp]: \"i < n \\<Longrightarrow> dec_interp n {} x ! i = Inr (positions_in_row x i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow>\n    dec_interp n {} x ! i = Inr (positions_in_row x i)", "by (auto simp: dec_interp_def)"], ["", "lemma set_\\<sigma>D[simp]: \"(a, bs) \\<in> set (\\<sigma> \\<Sigma> n) \\<Longrightarrow> a \\<in> set \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, bs) \\<in> set (\\<sigma> \\<Sigma> n) \\<Longrightarrow>\n    a \\<in> set \\<Sigma>", "unfolding \\<sigma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, bs)\n    \\<in> set (concat\n                (map (\\<lambda>bs. map (\\<lambda>a. (a, bs)) \\<Sigma>)\n                  (List.n_lists n [True, False]))) \\<Longrightarrow>\n    a \\<in> set \\<Sigma>", "by auto"], ["", "lemma lang_ENC:\n assumes \"FO \\<subseteq> {0 ..< n}\" \"SO \\<subseteq> {0 ..< n} - FO\"\n shows \"lang n (ENC n FO) - {[]} = {enc (w, I) | w I . length I = n \\<and> wf_interp w I \\<and>\n   (\\<forall>i \\<in> FO. case I ! i of Inl _ \\<Rightarrow> True | Inr _ \\<Rightarrow> False) \\<and>\n   (\\<forall>i \\<in> SO. case I ! i of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True)}\"\n   (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "proof (cases \"FO = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. FO = {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}\n 2. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "case True"], ["proof (state)\nthis:\n  FO = {}\n\ngoal (2 subgoals):\n 1. FO = {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}\n 2. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "with assms"], ["proof (chain)\npicking this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  FO = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  FO = {}\n\ngoal (1 subgoal):\n 1. lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "by (force simp: ENC_def dec_word_def wf_word\n      in_set_conv_nth[of _ \"dec_interp n {} x\" for x] positions_in_row Ball_def\n      intro!: enc_atom_\\<sigma> exI[of _ \"dec_word x :: 'a list\" for x] exI[of _ \"dec_interp n {} x\" for x]\n        enc_dec[of n _ \"{}\", symmetric, unfolded dec_word_def enc.simps map_index_map])"], ["proof (state)\nthis:\n  lang n (ENC n FO) - {[]} =\n  {enc (w, I) |w I.\n   length I = n \\<and>\n   (0 < length w \\<and>\n    (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p < length w\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n   (\\<forall>i\\<in>FO.\n       case I ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False) \\<and>\n   (\\<forall>i\\<in>SO.\n       case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "case False"], ["proof (state)\nthis:\n  FO \\<noteq> {}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "hence nonempty: \"valid_ENC n ` FO \\<noteq> {}\""], ["proof (prove)\nusing this:\n  FO \\<noteq> {}\n\ngoal (1 subgoal):\n 1. valid_ENC n ` FO \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  valid_ENC n ` FO \\<noteq> {}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "have finite: \"finite (valid_ENC n ` FO)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (valid_ENC n ` FO)", "by (intro finite_imageI[OF finite_subset[OF assms(1)]]) auto"], ["proof (state)\nthis:\n  finite (valid_ENC n ` FO)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "from False assms(1)"], ["proof (chain)\npicking this:\n  FO \\<noteq> {}\n  FO \\<subseteq> {0..<n}", "have \"0 < n\""], ["proof (prove)\nusing this:\n  FO \\<noteq> {}\n  FO \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. 0 < n", "by auto"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "with wf_rexp_valid_ENC assms(1)"], ["proof (chain)\npicking this:\n  ?n = 0 \\<or> ?p < ?n \\<Longrightarrow> local.wf ?n (valid_ENC ?n ?p)\n  FO \\<subseteq> {0..<n}\n  0 < n", "have wf_rexp: \"\\<forall>x \\<in> valid_ENC n ` FO. wf n x\""], ["proof (prove)\nusing this:\n  ?n = 0 \\<or> ?p < ?n \\<Longrightarrow> local.wf ?n (valid_ENC ?n ?p)\n  FO \\<subseteq> {0..<n}\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>valid_ENC n ` FO. local.wf n x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>valid_ENC n ` FO. local.wf n x\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "{"], ["proof (state)\nthis:\n  \\<forall>x\\<in>valid_ENC n ` FO. local.wf n x\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "fix r w I"], ["proof (state)\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "assume \"r \\<in> FO\" and *: \"length I = n\" \"wf_interp w I\"\n      \"(\\<forall>i \\<in> FO. case I ! i of Inl _ \\<Rightarrow> True | Inr _ \\<Rightarrow> False)\"\n      \"(\\<forall>i \\<in> SO. case I ! i of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True)\""], ["proof (state)\nthis:\n  r \\<in> FO\n  length I = n\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  \\<forall>i\\<in>FO.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>SO.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "then"], ["proof (chain)\npicking this:\n  r \\<in> FO\n  length I = n\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  \\<forall>i\\<in>FO.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>SO.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True", "obtain p where p: \"I ! r = Inl p\""], ["proof (prove)\nusing this:\n  r \\<in> FO\n  length I = n\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  \\<forall>i\\<in>FO.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>SO.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. (\\<And>p. I ! r = Inl p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"I ! r\") auto"], ["proof (state)\nthis:\n  I ! r = Inl p\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "moreover"], ["proof (state)\nthis:\n  I ! r = Inl p\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "from \\<open>r \\<in> FO\\<close> assms(1) *(1)"], ["proof (chain)\npicking this:\n  r \\<in> FO\n  FO \\<subseteq> {0..<n}\n  length I = n", "have \"r < length I\""], ["proof (prove)\nusing this:\n  r \\<in> FO\n  FO \\<subseteq> {0..<n}\n  length I = n\n\ngoal (1 subgoal):\n 1. r < length I", "by auto"], ["proof (state)\nthis:\n  r < length I\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "ultimately"], ["proof (chain)\npicking this:\n  I ! r = Inl p\n  r < length I", "have \"Inl p \\<in> set I\""], ["proof (prove)\nusing this:\n  I ! r = Inl p\n  r < length I\n\ngoal (1 subgoal):\n 1. Inl p \\<in> set I", "by (auto simp add: in_set_conv_nth)"], ["proof (state)\nthis:\n  Inl p \\<in> set I\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "with *(2)"], ["proof (chain)\npicking this:\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  Inl p \\<in> set I", "have \"p < length w\""], ["proof (prove)\nusing this:\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  Inl p \\<in> set I\n\ngoal (1 subgoal):\n 1. p < length w", "by auto"], ["proof (state)\nthis:\n  p < length w\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "with *(2)"], ["proof (chain)\npicking this:\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  p < length w", "obtain a where a: \"w ! p = a\" \"a \\<in> set \\<Sigma>\""], ["proof (prove)\nusing this:\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  p < length w\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>w ! p = a; a \\<in> set \\<Sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w ! p = a\n  a \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "from \\<open>r < length I\\<close> p *(1) \\<open>a \\<in> set \\<Sigma>\\<close>"], ["proof (chain)\npicking this:\n  r < length I\n  I ! r = Inl p\n  length I = n\n  a \\<in> set \\<Sigma>", "have \"[enc_atom I p a] \\<in> lang n (Atom (Arbitrary_Except r True))\""], ["proof (prove)\nusing this:\n  r < length I\n  I ! r = Inl p\n  length I = n\n  a \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. [enc_atom I p a] \\<in> lang n (Atom (Arbitrary_Except r True))", "by (intro enc_atom_lang_Arbitrary_Except_True) auto"], ["proof (state)\nthis:\n  [enc_atom I p a] \\<in> lang n (Atom (Arbitrary_Except r True))\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "moreover"], ["proof (state)\nthis:\n  [enc_atom I p a] \\<in> lang n (Atom (Arbitrary_Except r True))\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "from \\<open>r < length I\\<close> p *(1) \\<open>a \\<in> set \\<Sigma>\\<close> *(2)  \\<open>p < length w\\<close>"], ["proof (chain)\npicking this:\n  r < length I\n  I ! r = Inl p\n  length I = n\n  a \\<in> set \\<Sigma>\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  p < length w", "have \"take p (enc (w, I)) \\<in> star (lang n (Atom (Arbitrary_Except r False)))\""], ["proof (prove)\nusing this:\n  r < length I\n  I ! r = Inl p\n  length I = n\n  a \\<in> set \\<Sigma>\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  p < length w\n\ngoal (1 subgoal):\n 1. take p (enc (w, I))\n    \\<in> star (lang n (Atom (Arbitrary_Except r False)))", "by (auto simp: in_set_conv_nth simp del: lang.simps\n        intro!: Ball_starI enc_atom_lang_Arbitrary_Except_False) auto"], ["proof (state)\nthis:\n  take p (enc (w, I)) \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "moreover"], ["proof (state)\nthis:\n  take p (enc (w, I)) \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "from \\<open>r < length I\\<close> p *(1) \\<open>a \\<in> set \\<Sigma>\\<close> *(2)  \\<open>p < length w\\<close>"], ["proof (chain)\npicking this:\n  r < length I\n  I ! r = Inl p\n  length I = n\n  a \\<in> set \\<Sigma>\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  p < length w", "have \"drop (Suc p) (enc (w, I)) \\<in> star (lang n (Atom (Arbitrary_Except r False)))\""], ["proof (prove)\nusing this:\n  r < length I\n  I ! r = Inl p\n  length I = n\n  a \\<in> set \\<Sigma>\n  0 < length w \\<and>\n  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>x\\<in>set I.\n      case x of Inl p \\<Rightarrow> p < length w\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\n  p < length w\n\ngoal (1 subgoal):\n 1. drop (Suc p) (enc (w, I))\n    \\<in> star (lang n (Atom (Arbitrary_Except r False)))", "by (auto simp: in_set_conv_nth simp del: lang.simps\n        intro!: Ball_starI enc_atom_lang_Arbitrary_Except_False) auto"], ["proof (state)\nthis:\n  drop (Suc p) (enc (w, I))\n  \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "ultimately"], ["proof (chain)\npicking this:\n  [enc_atom I p a] \\<in> lang n (Atom (Arbitrary_Except r True))\n  take p (enc (w, I)) \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  drop (Suc p) (enc (w, I))\n  \\<in> star (lang n (Atom (Arbitrary_Except r False)))", "have \"take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I)) \\<in>\n      lang n (valid_ENC n r)\""], ["proof (prove)\nusing this:\n  [enc_atom I p a] \\<in> lang n (Atom (Arbitrary_Except r True))\n  take p (enc (w, I)) \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  drop (Suc p) (enc (w, I))\n  \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (1 subgoal):\n 1. take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n    \\<in> lang n (valid_ENC n r)", "using \\<open>0 < n\\<close>"], ["proof (prove)\nusing this:\n  [enc_atom I p a] \\<in> lang n (Atom (Arbitrary_Except r True))\n  take p (enc (w, I)) \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  drop (Suc p) (enc (w, I))\n  \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  0 < n\n\ngoal (1 subgoal):\n 1. take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n    \\<in> lang n (valid_ENC n r)", "unfolding valid_ENC_def"], ["proof (prove)\nusing this:\n  [enc_atom I p a] \\<in> lang n (Atom (Arbitrary_Except r True))\n  take p (enc (w, I)) \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  drop (Suc p) (enc (w, I))\n  \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  0 < n\n\ngoal (1 subgoal):\n 1. take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n    \\<in> lang n\n           (if n = 0 then Full\n            else TIMES\n                  [Star (Atom (Arbitrary_Except r False)),\n                   Atom (Arbitrary_Except r True),\n                   Star (Atom (Arbitrary_Except r False))])", "by (auto simp del: append.simps)"], ["proof (state)\nthis:\n  take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n  \\<in> lang n (valid_ENC n r)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "with \\<open>p < length w\\<close> a"], ["proof (chain)\npicking this:\n  p < length w\n  w ! p = a\n  a \\<in> set \\<Sigma>\n  take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n  \\<in> lang n (valid_ENC n r)", "have \"enc (w, I) \\<in> lang n (valid_ENC n r)\""], ["proof (prove)\nusing this:\n  p < length w\n  w ! p = a\n  a \\<in> set \\<Sigma>\n  take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n  \\<in> lang n (valid_ENC n r)\n\ngoal (1 subgoal):\n 1. enc (w, I) \\<in> lang n (valid_ENC n r)", "using id_take_nth_drop[of p \"enc (w, I)\"]"], ["proof (prove)\nusing this:\n  p < length w\n  w ! p = a\n  a \\<in> set \\<Sigma>\n  take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n  \\<in> lang n (valid_ENC n r)\n  p < length (enc (w, I)) \\<Longrightarrow>\n  enc (w, I) =\n  take p (enc (w, I)) @ enc (w, I) ! p # drop (Suc p) (enc (w, I))\n\ngoal (1 subgoal):\n 1. enc (w, I) \\<in> lang n (valid_ENC n r)", "by auto"], ["proof (state)\nthis:\n  enc (w, I) \\<in> lang n (valid_ENC n r)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?r2 \\<in> FO; length ?I2 = n;\n   0 < length ?w2 \\<and>\n   (\\<forall>a\\<in>set ?w2. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set ?I2.\n       case x of Inl p \\<Rightarrow> p < length ?w2\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length ?w2);\n   \\<forall>i\\<in>FO.\n      case ?I2 ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False;\n   \\<forall>i\\<in>SO.\n      case ?I2 ! i of Inl x \\<Rightarrow> False\n      | Inr x \\<Rightarrow> True\\<rbrakk>\n  \\<Longrightarrow> enc (?w2, ?I2) \\<in> lang n (valid_ENC n ?r2)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "hence \"?R \\<subseteq> ?L\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?r2 \\<in> FO; length ?I2 = n;\n   0 < length ?w2 \\<and>\n   (\\<forall>a\\<in>set ?w2. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set ?I2.\n       case x of Inl p \\<Rightarrow> p < length ?w2\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length ?w2);\n   \\<forall>i\\<in>FO.\n      case ?I2 ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False;\n   \\<forall>i\\<in>SO.\n      case ?I2 ! i of Inl x \\<Rightarrow> False\n      | Inr x \\<Rightarrow> True\\<rbrakk>\n  \\<Longrightarrow> enc (?w2, ?I2) \\<in> lang n (valid_ENC n ?r2)\n\ngoal (1 subgoal):\n 1. {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}\n    \\<subseteq> lang n (ENC n FO) - {[]}", "using lang_flatten_INTERSECT[OF finite nonempty wf_rexp]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?r2 \\<in> FO; length ?I2 = n;\n   0 < length ?w2 \\<and>\n   (\\<forall>a\\<in>set ?w2. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set ?I2.\n       case x of Inl p \\<Rightarrow> p < length ?w2\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length ?w2);\n   \\<forall>i\\<in>FO.\n      case ?I2 ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False;\n   \\<forall>i\\<in>SO.\n      case ?I2 ! i of Inl x \\<Rightarrow> False\n      | Inr x \\<Rightarrow> True\\<rbrakk>\n  \\<Longrightarrow> enc (?w2, ?I2) \\<in> lang n (valid_ENC n ?r2)\n  (?w \\<in> lang n (INTERSECT (sorted_list_of_set (valid_ENC n ` FO)))) =\n  (\\<forall>r\\<in>valid_ENC n ` FO. ?w \\<in> lang n r)\n\ngoal (1 subgoal):\n 1. {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}\n    \\<subseteq> lang n (ENC n FO) - {[]}", "by (auto simp add: ENC_def)"], ["proof (state)\nthis:\n  {enc (w, I) |w I.\n   length I = n \\<and>\n   (0 < length w \\<and>\n    (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p < length w\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n   (\\<forall>i\\<in>FO.\n       case I ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False) \\<and>\n   (\\<forall>i\\<in>SO.\n       case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)}\n  \\<subseteq> lang n (ENC n FO) - {[]}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "moreover"], ["proof (state)\nthis:\n  {enc (w, I) |w I.\n   length I = n \\<and>\n   (0 < length w \\<and>\n    (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p < length w\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n   (\\<forall>i\\<in>FO.\n       case I ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False) \\<and>\n   (\\<forall>i\\<in>SO.\n       case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)}\n  \\<subseteq> lang n (ENC n FO) - {[]}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "{"], ["proof (state)\nthis:\n  {enc (w, I) |w I.\n   length I = n \\<and>\n   (0 < length w \\<and>\n    (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p < length w\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n   (\\<forall>i\\<in>FO.\n       case I ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False) \\<and>\n   (\\<forall>i\\<in>SO.\n       case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)}\n  \\<subseteq> lang n (ENC n FO) - {[]}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "assume \"x \\<in> (\\<Inter>r \\<in> valid_ENC n ` FO. lang n r)\""], ["proof (state)\nthis:\n  x \\<in> \\<Inter> (lang n ` valid_ENC n ` FO)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "hence r: \"\\<forall>r \\<in> FO. x \\<in> lang n (valid_ENC n r)\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Inter> (lang n ` valid_ENC n ` FO)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>FO. x \\<in> lang n (valid_ENC n r)", "by blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>FO. x \\<in> lang n (valid_ENC n r)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "have \"length (dec_interp n FO x) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (dec_interp n FO x) = n", "unfolding dec_interp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (map (\\<lambda>i.\n              if i \\<in> FO then Inl (the_elem (positions_in_row x i))\n              else Inr (positions_in_row x i))\n       [0..<n]) =\n    n", "by simp"], ["proof (state)\nthis:\n  length (dec_interp n FO x) = n\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "moreover"], ["proof (state)\nthis:\n  length (dec_interp n FO x) = n\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "{"], ["proof (state)\nthis:\n  length (dec_interp n FO x) = n\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "assume \"r \\<in> FO\""], ["proof (state)\nthis:\n  r \\<in> FO\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "with assms"], ["proof (chain)\npicking this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  r \\<in> FO", "have \"r < n\""], ["proof (prove)\nusing this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  r \\<in> FO\n\ngoal (1 subgoal):\n 1. r < n", "by auto"], ["proof (state)\nthis:\n  r < n\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "from \\<open>r \\<in> FO\\<close> r"], ["proof (chain)\npicking this:\n  r \\<in> FO\n  \\<forall>r\\<in>FO. x \\<in> lang n (valid_ENC n r)", "obtain u v w where uvw: \"x = u @ v @ w\"\n        \"u \\<in> star (lang n (Atom (Arbitrary_Except r False)))\"\n        \"v \\<in> lang n (Atom (Arbitrary_Except r True))\"\n        \"w \\<in> star (lang n (Atom (Arbitrary_Except r False)))\""], ["proof (prove)\nusing this:\n  r \\<in> FO\n  \\<forall>r\\<in>FO. x \\<in> lang n (valid_ENC n r)\n\ngoal (1 subgoal):\n 1. (\\<And>u v w.\n        \\<lbrakk>x = u @ v @ w;\n         u \\<in> star (lang n (Atom (Arbitrary_Except r False)));\n         v \\<in> lang n (Atom (Arbitrary_Except r True));\n         w \\<in> star (lang n (Atom (Arbitrary_Except r False)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>0 < n\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> FO\n  \\<forall>r\\<in>FO. x \\<in> lang n (valid_ENC n r)\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<And>u v w.\n        \\<lbrakk>x = u @ v @ w;\n         u \\<in> star (lang n (Atom (Arbitrary_Except r False)));\n         v \\<in> lang n (Atom (Arbitrary_Except r True));\n         w \\<in> star (lang n (Atom (Arbitrary_Except r False)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding valid_ENC_def"], ["proof (prove)\nusing this:\n  r \\<in> FO\n  \\<forall>r\\<in>FO.\n     x \\<in> lang n\n              (if n = 0 then Full\n               else TIMES\n                     [Star (Atom (Arbitrary_Except r False)),\n                      Atom (Arbitrary_Except r True),\n                      Star (Atom (Arbitrary_Except r False))])\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<And>u v w.\n        \\<lbrakk>x = u @ v @ w;\n         u \\<in> star (lang n (Atom (Arbitrary_Except r False)));\n         v \\<in> lang n (Atom (Arbitrary_Except r True));\n         w \\<in> star (lang n (Atom (Arbitrary_Except r False)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp del: lang.simps(4))"], ["proof (state)\nthis:\n  x = u @ v @ w\n  u \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  v \\<in> lang n (Atom (Arbitrary_Except r True))\n  w \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "hence \"length u < length x\" \"\\<And>i. i < length x \\<longrightarrow> snd (x ! i) ! r \\<longleftrightarrow> i = length u\""], ["proof (prove)\nusing this:\n  x = u @ v @ w\n  u \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  v \\<in> lang n (Atom (Arbitrary_Except r True))\n  w \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (1 subgoal):\n 1. length u < length x &&&\n    (\\<And>i.\n        i < length x \\<longrightarrow> snd (x ! i) ! r = (i = length u))", "by (auto simp: nth_append nth_Cons' split: if_split_asm simp del: lang.simps\n            dest!: Arbitrary_ExceptD[OF _ \\<open>r < n\\<close>]\n            dest: star_Arbitrary_ExceptD[OF _ \\<open>r < n\\<close>, of u]\n            elim!: iffD1[OF star_Arbitrary_ExceptD[OF _ \\<open>r < n\\<close>, of w False]]) auto"], ["proof (state)\nthis:\n  length u < length x\n  ?i < length x \\<longrightarrow> snd (x ! ?i) ! r = (?i = length u)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "hence \"\\<exists>!p. p < length x \\<and> snd (x ! p) ! r\""], ["proof (prove)\nusing this:\n  length u < length x\n  ?i < length x \\<longrightarrow> snd (x ! ?i) ! r = (?i = length u)\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length x \\<and> snd (x ! p) ! r", "by auto"], ["proof (state)\nthis:\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! r\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "}"], ["proof (state)\nthis:\n  ?r2 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! ?r2\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "note * = this"], ["proof (state)\nthis:\n  ?r2 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! ?r2\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "have x_wf_word: \"wf_word n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_word n x", "using wf_lang_wf_word[OF wf_rexp_valid_ENC] False r assms(1)"], ["proof (prove)\nusing this:\n  ?n = 0 \\<or> ?p1 < ?n \\<Longrightarrow>\n  \\<forall>w\\<in>lang ?n (valid_ENC ?n ?p1). wf_word ?n w\n  FO \\<noteq> {}\n  \\<forall>r\\<in>FO. x \\<in> lang n (valid_ENC n r)\n  FO \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. wf_word n x", "by auto"], ["proof (state)\nthis:\n  wf_word n x\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "with *"], ["proof (chain)\npicking this:\n  ?r2 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! ?r2\n  wf_word n x", "have \"x = enc (dec_word x, dec_interp n FO x)\""], ["proof (prove)\nusing this:\n  ?r2 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! ?r2\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x = enc (dec_word x, dec_interp n FO x)", "by (intro sym[OF enc_dec]) auto"], ["proof (state)\nthis:\n  x = enc (dec_word x, dec_interp n FO x)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "moreover"], ["proof (state)\nthis:\n  x = enc (dec_word x, dec_interp n FO x)\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "from *"], ["proof (chain)\npicking this:\n  ?r2 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! ?r2", "have \"wf_interp (dec_word x) (dec_interp n FO x)\"\n      \"(\\<forall>i \\<in> FO. case dec_interp n FO x ! i of Inl _ \\<Rightarrow> True | Inr _ \\<Rightarrow> False)\"\n      \"(\\<forall>i \\<in> SO. case dec_interp n FO x ! i of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True)\""], ["proof (prove)\nusing this:\n  ?r2 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! ?r2\n\ngoal (1 subgoal):\n 1. 0 < length (dec_word x) \\<and>\n    (\\<forall>a\\<in>set (dec_word x). a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>xa\\<in>set (dec_interp n FO x).\n        case xa of Inl p \\<Rightarrow> p < length (dec_word x)\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length (dec_word x)) &&&\n    \\<forall>i\\<in>FO.\n       case dec_interp n FO x ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False &&&\n    \\<forall>i\\<in>SO.\n       case dec_interp n FO x ! i of Inl x \\<Rightarrow> False\n       | Inr x \\<Rightarrow> True", "using False x_wf_word[unfolded wf_word, unfolded \\<sigma>_def o_apply set_concat set_map set_n_lists, simplified] assms\n        Inl_dec_interp_length[OF ballI, of FO x _ n] Inr_dec_interp_length[of _ n FO x]\n        dec_interp_Inl[of _ FO n x] dec_interp_Inr[of _ FO n x]"], ["proof (prove)\nusing this:\n  ?r2 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! ?r2\n  FO \\<noteq> {}\n  x \\<in> lists\n           (\\<Union>x\\<in>{ys.\n                           length ys = n \\<and>\n                           set ys \\<subseteq> {True, False}}.\n               (\\<lambda>a. (a, x)) ` set \\<Sigma>)\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  \\<lbrakk>\\<And>i.\n              i \\<in> FO \\<Longrightarrow>\n              \\<exists>!p. p < length x \\<and> snd (x ! p) ! i;\n   Inl ?p \\<in> set (dec_interp n FO x)\\<rbrakk>\n  \\<Longrightarrow> ?p < length x\n  \\<lbrakk>Inr ?P \\<in> set (dec_interp n FO x); ?p \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> ?p < length x\n  \\<lbrakk>?i \\<in> FO; ?i < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p. dec_interp n FO x ! ?i = Inl p\n  \\<lbrakk>?i \\<notin> FO; ?i < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P. dec_interp n FO x ! ?i = Inr P\n\ngoal (1 subgoal):\n 1. 0 < length (dec_word x) \\<and>\n    (\\<forall>a\\<in>set (dec_word x). a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>xa\\<in>set (dec_interp n FO x).\n        case xa of Inl p \\<Rightarrow> p < length (dec_word x)\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length (dec_word x)) &&&\n    \\<forall>i\\<in>FO.\n       case dec_interp n FO x ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False &&&\n    \\<forall>i\\<in>SO.\n       case dec_interp n FO x ! i of Inl x \\<Rightarrow> False\n       | Inr x \\<Rightarrow> True", "by (fastforce simp add: dec_word_def split: sum.split)+"], ["proof (state)\nthis:\n  0 < length (dec_word x) \\<and>\n  (\\<forall>a\\<in>set (dec_word x). a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>xa\\<in>set (dec_interp n FO x).\n      case xa of Inl p \\<Rightarrow> p < length (dec_word x)\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length (dec_word x))\n  \\<forall>i\\<in>FO.\n     case dec_interp n FO x ! i of Inl x \\<Rightarrow> True\n     | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>SO.\n     case dec_interp n FO x ! i of Inl x \\<Rightarrow> False\n     | Inr x \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "ultimately"], ["proof (chain)\npicking this:\n  length (dec_interp n FO x) = n\n  x = enc (dec_word x, dec_interp n FO x)\n  0 < length (dec_word x) \\<and>\n  (\\<forall>a\\<in>set (dec_word x). a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>xa\\<in>set (dec_interp n FO x).\n      case xa of Inl p \\<Rightarrow> p < length (dec_word x)\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length (dec_word x))\n  \\<forall>i\\<in>FO.\n     case dec_interp n FO x ! i of Inl x \\<Rightarrow> True\n     | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>SO.\n     case dec_interp n FO x ! i of Inl x \\<Rightarrow> False\n     | Inr x \\<Rightarrow> True", "have \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  length (dec_interp n FO x) = n\n  x = enc (dec_word x, dec_interp n FO x)\n  0 < length (dec_word x) \\<and>\n  (\\<forall>a\\<in>set (dec_word x). a \\<in> set \\<Sigma>) \\<and>\n  (\\<forall>xa\\<in>set (dec_interp n FO x).\n      case xa of Inl p \\<Rightarrow> p < length (dec_word x)\n      | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length (dec_word x))\n  \\<forall>i\\<in>FO.\n     case dec_interp n FO x ! i of Inl x \\<Rightarrow> True\n     | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>SO.\n     case dec_interp n FO x ! i of Inl x \\<Rightarrow> False\n     | Inr x \\<Rightarrow> True\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             (0 < length w \\<and>\n              (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n              (\\<forall>x\\<in>set I.\n                  case x of Inl p \\<Rightarrow> p < length w\n                  | Inr P \\<Rightarrow>\n                      \\<forall>p\\<in>P. p < length w)) \\<and>\n             (\\<forall>i\\<in>FO.\n                 case I ! i of Inl x \\<Rightarrow> True\n                 | Inr x \\<Rightarrow> False) \\<and>\n             (\\<forall>i\\<in>SO.\n                 case I ! i of Inl x \\<Rightarrow> False\n                 | Inr x \\<Rightarrow> True)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           (0 < length w \\<and>\n            (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n            (\\<forall>x\\<in>set I.\n                case x of Inl p \\<Rightarrow> p < length w\n                | Inr P \\<Rightarrow>\n                    \\<forall>p\\<in>P. p < length w)) \\<and>\n           (\\<forall>i\\<in>FO.\n               case I ! i of Inl x \\<Rightarrow> True\n               | Inr x \\<Rightarrow> False) \\<and>\n           (\\<forall>i\\<in>SO.\n               case I ! i of Inl x \\<Rightarrow> False\n               | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> \\<Inter> (lang n ` valid_ENC n ` FO) \\<Longrightarrow>\n  ?x2\n  \\<in> {enc (w, I) |w I.\n         length I = n \\<and>\n         (0 < length w \\<and>\n          (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n          (\\<forall>x\\<in>set I.\n              case x of Inl p \\<Rightarrow> p < length w\n              | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n         (\\<forall>i\\<in>FO.\n             case I ! i of Inl x \\<Rightarrow> True\n             | Inr x \\<Rightarrow> False) \\<and>\n         (\\<forall>i\\<in>SO.\n             case I ! i of Inl x \\<Rightarrow> False\n             | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "with False lang_flatten_INTERSECT[OF finite nonempty wf_rexp]"], ["proof (chain)\npicking this:\n  FO \\<noteq> {}\n  (?w \\<in> lang n (INTERSECT (sorted_list_of_set (valid_ENC n ` FO)))) =\n  (\\<forall>r\\<in>valid_ENC n ` FO. ?w \\<in> lang n r)\n  ?x2 \\<in> \\<Inter> (lang n ` valid_ENC n ` FO) \\<Longrightarrow>\n  ?x2\n  \\<in> {enc (w, I) |w I.\n         length I = n \\<and>\n         (0 < length w \\<and>\n          (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n          (\\<forall>x\\<in>set I.\n              case x of Inl p \\<Rightarrow> p < length w\n              | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n         (\\<forall>i\\<in>FO.\n             case I ! i of Inl x \\<Rightarrow> True\n             | Inr x \\<Rightarrow> False) \\<and>\n         (\\<forall>i\\<in>SO.\n             case I ! i of Inl x \\<Rightarrow> False\n             | Inr x \\<Rightarrow> True)}", "have \"?L \\<subseteq> ?R\""], ["proof (prove)\nusing this:\n  FO \\<noteq> {}\n  (?w \\<in> lang n (INTERSECT (sorted_list_of_set (valid_ENC n ` FO)))) =\n  (\\<forall>r\\<in>valid_ENC n ` FO. ?w \\<in> lang n r)\n  ?x2 \\<in> \\<Inter> (lang n ` valid_ENC n ` FO) \\<Longrightarrow>\n  ?x2\n  \\<in> {enc (w, I) |w I.\n         length I = n \\<and>\n         (0 < length w \\<and>\n          (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n          (\\<forall>x\\<in>set I.\n              case x of Inl p \\<Rightarrow> p < length w\n              | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n         (\\<forall>i\\<in>FO.\n             case I ! i of Inl x \\<Rightarrow> True\n             | Inr x \\<Rightarrow> False) \\<and>\n         (\\<forall>i\\<in>SO.\n             case I ! i of Inl x \\<Rightarrow> False\n             | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. lang n (ENC n FO) - {[]}\n    \\<subseteq> {enc (w, I) |w I.\n                 length I = n \\<and>\n                 (0 < length w \\<and>\n                  (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n                  (\\<forall>x\\<in>set I.\n                      case x of Inl p \\<Rightarrow> p < length w\n                      | Inr P \\<Rightarrow>\n                          \\<forall>p\\<in>P. p < length w)) \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}", "by (auto simp add: ENC_def)"], ["proof (state)\nthis:\n  lang n (ENC n FO) - {[]}\n  \\<subseteq> {enc (w, I) |w I.\n               length I = n \\<and>\n               (0 < length w \\<and>\n                (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n                (\\<forall>x\\<in>set I.\n                    case x of Inl p \\<Rightarrow> p < length w\n                    | Inr P \\<Rightarrow>\n                        \\<forall>p\\<in>P. p < length w)) \\<and>\n               (\\<forall>i\\<in>FO.\n                   case I ! i of Inl x \\<Rightarrow> True\n                   | Inr x \\<Rightarrow> False) \\<and>\n               (\\<forall>i\\<in>SO.\n                   case I ! i of Inl x \\<Rightarrow> False\n                   | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. FO \\<noteq> {} \\<Longrightarrow>\n    lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "ultimately"], ["proof (chain)\npicking this:\n  {enc (w, I) |w I.\n   length I = n \\<and>\n   (0 < length w \\<and>\n    (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p < length w\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n   (\\<forall>i\\<in>FO.\n       case I ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False) \\<and>\n   (\\<forall>i\\<in>SO.\n       case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)}\n  \\<subseteq> lang n (ENC n FO) - {[]}\n  lang n (ENC n FO) - {[]}\n  \\<subseteq> {enc (w, I) |w I.\n               length I = n \\<and>\n               (0 < length w \\<and>\n                (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n                (\\<forall>x\\<in>set I.\n                    case x of Inl p \\<Rightarrow> p < length w\n                    | Inr P \\<Rightarrow>\n                        \\<forall>p\\<in>P. p < length w)) \\<and>\n               (\\<forall>i\\<in>FO.\n                   case I ! i of Inl x \\<Rightarrow> True\n                   | Inr x \\<Rightarrow> False) \\<and>\n               (\\<forall>i\\<in>SO.\n                   case I ! i of Inl x \\<Rightarrow> False\n                   | Inr x \\<Rightarrow> True)}", "show ?thesis"], ["proof (prove)\nusing this:\n  {enc (w, I) |w I.\n   length I = n \\<and>\n   (0 < length w \\<and>\n    (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p < length w\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n   (\\<forall>i\\<in>FO.\n       case I ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False) \\<and>\n   (\\<forall>i\\<in>SO.\n       case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)}\n  \\<subseteq> lang n (ENC n FO) - {[]}\n  lang n (ENC n FO) - {[]}\n  \\<subseteq> {enc (w, I) |w I.\n               length I = n \\<and>\n               (0 < length w \\<and>\n                (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n                (\\<forall>x\\<in>set I.\n                    case x of Inl p \\<Rightarrow> p < length w\n                    | Inr P \\<Rightarrow>\n                        \\<forall>p\\<in>P. p < length w)) \\<and>\n               (\\<forall>i\\<in>FO.\n                   case I ! i of Inl x \\<Rightarrow> True\n                   | Inr x \\<Rightarrow> False) \\<and>\n               (\\<forall>i\\<in>SO.\n                   case I ! i of Inl x \\<Rightarrow> False\n                   | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. lang n (ENC n FO) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      (\\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p < length w\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n     (\\<forall>i\\<in>FO.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SO.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "by blast"], ["proof (state)\nthis:\n  lang n (ENC n FO) - {[]} =\n  {enc (w, I) |w I.\n   length I = n \\<and>\n   (0 < length w \\<and>\n    (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n    (\\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p < length w\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)) \\<and>\n   (\\<forall>i\\<in>FO.\n       case I ! i of Inl x \\<Rightarrow> True\n       | Inr x \\<Rightarrow> False) \\<and>\n   (\\<forall>i\\<in>SO.\n       case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang_ENC_formula:\n  assumes \"wf_formula n \\<phi>\"\n  shows \"lang n (ENC n (FOV \\<phi>)) - {[]} = {enc (w, I) | w I . length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (ENC n (FOV \\<phi>)) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang n (ENC n (FOV \\<phi>)) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "from assms max_idx_vars"], ["proof (chain)\npicking this:\n  wf_formula n \\<phi>\n  pre_wf_formula ?n ?\\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV ?\\<phi> \\<union> SOV ?\\<phi>. p < ?n", "have *: \"FOV \\<phi> \\<subseteq> {0 ..< n}\" \"SOV \\<phi> \\<subseteq> {0 ..< n} - FOV \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n \\<phi>\n  pre_wf_formula ?n ?\\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV ?\\<phi> \\<union> SOV ?\\<phi>. p < ?n\n\ngoal (1 subgoal):\n 1. FOV \\<phi> \\<subseteq> {0..<n} &&&\n    SOV \\<phi> \\<subseteq> {0..<n} - FOV \\<phi>", "by auto"], ["proof (state)\nthis:\n  FOV \\<phi> \\<subseteq> {0..<n}\n  SOV \\<phi> \\<subseteq> {0..<n} - FOV \\<phi>\n\ngoal (1 subgoal):\n 1. lang n (ENC n (FOV \\<phi>)) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (ENC n (FOV \\<phi>)) - {[]} =\n    {enc (w, I) |w I.\n     length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "unfolding lang_ENC[OF *]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      Ball (set I)\n       (case_sum (\\<lambda>p. p < length w)\n         (\\<lambda>P. \\<forall>p\\<in>P. p < length w))) \\<and>\n     (\\<forall>i\\<in>FOV \\<phi>.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>SOV \\<phi>.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)} =\n    {enc (w, I) |w I.\n     length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "by simp"], ["proof (state)\nthis:\n  lang n (ENC n (FOV \\<phi>)) - {[]} =\n  {enc (w, I) |w I. length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Welldefinedness of enc wrt. Models\\<close>"], ["", "lemma enc_alt_def:\n \"enc (w, x # I) = map_index (\\<lambda>n (a, bs). (a, (case x of Inl p \\<Rightarrow> n = p | Inr P \\<Rightarrow> n \\<in> P) # bs)) (enc (w, I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enc (w, x # I) =\n    map_index\n     (\\<lambda>n (a, bs).\n         (a, (case x of Inl p \\<Rightarrow> n = p\n              | Inr P \\<Rightarrow> n \\<in> P) #\n             bs))\n     (enc (w, I))", "by (auto simp: comp_def)"], ["", "lemma enc_extend_interp: \"enc (w, I) = enc (w', I') \\<Longrightarrow> enc (w, x # I) = enc (w', x # I')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enc (w, I) = enc (w', I') \\<Longrightarrow>\n    enc (w, x # I) = enc (w', x # I')", "unfolding enc_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enc (w, I) = enc (w', I') \\<Longrightarrow>\n    map_index\n     (\\<lambda>n (a, bs).\n         (a, (case x of Inl x \\<Rightarrow> n = x\n              | Inr x \\<Rightarrow> n \\<in> x) #\n             bs))\n     (enc (w, I)) =\n    map_index\n     (\\<lambda>n (a, bs).\n         (a, (case x of Inl x \\<Rightarrow> n = x\n              | Inr x \\<Rightarrow> n \\<in> x) #\n             bs))\n     (enc (w', I'))", "by auto"], ["", "lemma wf_interp_for_formula_FExists: \n  \"\\<lbrakk>wf_formula (length I) (FExists \\<phi>); w \\<noteq> []\\<rbrakk>\\<Longrightarrow>\n    wf_interp_for_formula (w, I) (FExists \\<phi>) \\<longleftrightarrow>\n    (\\<forall>p < length w. wf_interp_for_formula (w, Inl p # I) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_formula (length I) (FExists \\<phi>); w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, I) (FExists \\<phi>) =\n                      (\\<forall>p<length w.\n                          wf_interp_for_formula (w, Inl p # I) \\<phi>)", "by (auto simp: nth_Cons' split: if_split_asm)"], ["", "lemma wf_interp_for_formula_any_Inl: \"wf_interp_for_formula (w, Inl p # I) \\<phi> \\<Longrightarrow>\n  \\<forall>p < length w. wf_interp_for_formula (w, Inl p # I) \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inl p # I) \\<phi> \\<Longrightarrow>\n    \\<forall>p<length w. wf_interp_for_formula (w, Inl p # I) \\<phi>", "by (auto simp: nth_Cons' split: if_split_asm)"], ["", "lemma wf_interp_for_formula_FEXISTS: \n \"\\<lbrakk>wf_formula (length I) (FEXISTS \\<phi>); w \\<noteq> []\\<rbrakk>\\<Longrightarrow>\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>) \\<longleftrightarrow> (\\<forall>P \\<subseteq> {0 .. length w - 1}. wf_interp_for_formula (w, Inr P # I) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_formula (length I) (FEXISTS \\<phi>); w \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, I) (FEXISTS \\<phi>) =\n                      (\\<forall>P\\<subseteq>{0..length w - 1}.\n                          wf_interp_for_formula (w, Inr P # I) \\<phi>)", "by (auto simp: neq_Nil_conv nth_Cons')"], ["", "lemma wf_interp_for_formula_any_Inr: \"wf_interp_for_formula (w, Inr P # I) \\<phi> \\<Longrightarrow>\n  \\<forall>P \\<subseteq> {0 .. length w - 1}. wf_interp_for_formula (w, Inr P # I) \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inr P # I) \\<phi> \\<Longrightarrow>\n    \\<forall>P\\<subseteq>{0..length w - 1}.\n       wf_interp_for_formula (w, Inr P # I) \\<phi>", "by (cases w) (auto simp: nth_Cons' split: if_split_asm)"], ["", "lemma enc_word_length: \"enc (w, I) = enc (w', I') \\<Longrightarrow> length w = length w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enc (w, I) = enc (w', I') \\<Longrightarrow> length w = length w'", "by (auto elim: map_index_eq_imp_length_eq)"], ["", "lemma enc_length: \n  assumes \"w \\<noteq> []\" \"enc (w, I) = enc (w', I')\"\n  shows \"length I = length I'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length I = length I'", "using assms\n  length_map[of \"(\\<lambda>x. case x of Inl p \\<Rightarrow> 0 = p | Inr P \\<Rightarrow> 0 \\<in> P)\" I]\n  length_map[of \"(\\<lambda>x. case x of Inl p \\<Rightarrow> 0 = p | Inr P \\<Rightarrow> 0 \\<in> P)\" I']"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  enc (w, I) = enc (w', I')\n  length (enc_atom_bool I 0) = length I\n  length (enc_atom_bool I' 0) = length I'\n\ngoal (1 subgoal):\n 1. length I = length I'", "by (induct rule: list_induct2[OF enc_word_length[OF assms(2)]]) auto"], ["", "lemma wf_interp_for_formula_FOr:\n  \"wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2) =\n     (wf_interp_for_formula (w, I) \\<phi>1 \\<and> wf_interp_for_formula (w, I) \\<phi>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2) =\n    (wf_interp_for_formula (w, I) \\<phi>1 \\<and>\n     wf_interp_for_formula (w, I) \\<phi>2)", "by auto"], ["", "lemma wf_interp_for_formula_FAnd:\n  \"wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2) =\n     (wf_interp_for_formula (w, I) \\<phi>1 \\<and> wf_interp_for_formula (w, I) \\<phi>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2) =\n    (wf_interp_for_formula (w, I) \\<phi>1 \\<and>\n     wf_interp_for_formula (w, I) \\<phi>2)", "by auto"], ["", "lemma enc_wf_interp: \n assumes \"wf_formula (length I) \\<phi>\" \"wf_interp_for_formula (w, I) \\<phi>\"\n shows \"wf_interp_for_formula (dec_word (enc (w, I)), dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>\"\n (is \"wf_interp_for_formula (_, ?dec) \\<phi>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (enc (w, I)),\n      dec_interp (length I) (FOV \\<phi>) (enc (w, I)))\n     \\<phi>", "unfolding dec_word_enc"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "assume i: \"i \\<in> FOV \\<phi>\""], ["proof (state)\nthis:\n  i \\<in> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "with assms(2)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) \\<phi>\n  i \\<in> FOV \\<phi>", "have \"\\<exists>p. I ! i = Inl p\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  i \\<in> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>p. I ! i = Inl p", "by (cases \"I ! i\") auto"], ["proof (state)\nthis:\n  \\<exists>p. I ! i = Inl p\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "with i assms"], ["proof (chain)\npicking this:\n  i \\<in> FOV \\<phi>\n  wf_formula (length I) \\<phi>\n  wf_interp_for_formula (w, I) \\<phi>\n  \\<exists>p. I ! i = Inl p", "have \"\\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i\""], ["proof (prove)\nusing this:\n  i \\<in> FOV \\<phi>\n  wf_formula (length I) \\<phi>\n  wf_interp_for_formula (w, I) \\<phi>\n  \\<exists>p. I ! i = Inl p\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i", "by (intro enc_unique[of w I i]) (auto intro!: bspec[OF max_idx_vars] split: sum.splits)"], ["proof (state)\nthis:\n  \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! i\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "}"], ["proof (state)\nthis:\n  ?i2 \\<in> FOV \\<phi> \\<Longrightarrow>\n  \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! ?i2\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "note * = this"], ["proof (state)\nthis:\n  ?i2 \\<in> FOV \\<phi> \\<Longrightarrow>\n  \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! ?i2\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "have \"\\<forall>x \\<in> set ?dec. case_sum (\\<lambda>p. p < length w) (\\<lambda>P. \\<forall>p\\<in>P. p < length w) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (dec_interp (length I) (FOV \\<phi>) (enc (w, I))).\n       case x of Inl p \\<Rightarrow> p < length w\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w", "proof (intro ballI, split sum.split, safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x1.\n       Inl x1\n       \\<in> set (dec_interp (length I) (FOV \\<phi>)\n                   (enc (w, I))) \\<Longrightarrow>\n       x1 < length w\n 2. \\<And>x x2 p.\n       \\<lbrakk>Inr x2\n                \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)));\n        p \\<in> x2\\<rbrakk>\n       \\<Longrightarrow> p < length w", "fix p"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x1.\n       Inl x1\n       \\<in> set (dec_interp (length I) (FOV \\<phi>)\n                   (enc (w, I))) \\<Longrightarrow>\n       x1 < length w\n 2. \\<And>x x2 p.\n       \\<lbrakk>Inr x2\n                \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)));\n        p \\<in> x2\\<rbrakk>\n       \\<Longrightarrow> p < length w", "assume \"Inl p \\<in> set ?dec\""], ["proof (state)\nthis:\n  Inl p \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)))\n\ngoal (2 subgoals):\n 1. \\<And>x x1.\n       Inl x1\n       \\<in> set (dec_interp (length I) (FOV \\<phi>)\n                   (enc (w, I))) \\<Longrightarrow>\n       x1 < length w\n 2. \\<And>x x2 p.\n       \\<lbrakk>Inr x2\n                \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)));\n        p \\<in> x2\\<rbrakk>\n       \\<Longrightarrow> p < length w", "thus \"p < length w\""], ["proof (prove)\nusing this:\n  Inl p \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)))\n\ngoal (1 subgoal):\n 1. p < length w", "using Inl_dec_interp_length[OF ballI[OF *]]"], ["proof (prove)\nusing this:\n  Inl p \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)))\n  \\<lbrakk>\\<And>i. i \\<in> ?FO \\<Longrightarrow> i \\<in> FOV \\<phi>;\n   Inl ?p \\<in> set (dec_interp ?n ?FO (enc (w, I)))\\<rbrakk>\n  \\<Longrightarrow> ?p < length (enc (w, I))\n\ngoal (1 subgoal):\n 1. p < length w", "by auto"], ["proof (state)\nthis:\n  p < length w\n\ngoal (1 subgoal):\n 1. \\<And>x x2 p.\n       \\<lbrakk>Inr x2\n                \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)));\n        p \\<in> x2\\<rbrakk>\n       \\<Longrightarrow> p < length w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x x2 p.\n       \\<lbrakk>Inr x2\n                \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)));\n        p \\<in> x2\\<rbrakk>\n       \\<Longrightarrow> p < length w", "fix p P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x x2 p.\n       \\<lbrakk>Inr x2\n                \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)));\n        p \\<in> x2\\<rbrakk>\n       \\<Longrightarrow> p < length w", "assume \"Inr P \\<in> set ?dec\" \"p \\<in> P\""], ["proof (state)\nthis:\n  Inr P \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)))\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>x x2 p.\n       \\<lbrakk>Inr x2\n                \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)));\n        p \\<in> x2\\<rbrakk>\n       \\<Longrightarrow> p < length w", "thus \"p < length w\""], ["proof (prove)\nusing this:\n  Inr P \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)))\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. p < length w", "using Inr_dec_interp_length"], ["proof (prove)\nusing this:\n  Inr P \\<in> set (dec_interp (length I) (FOV \\<phi>) (enc (w, I)))\n  p \\<in> P\n  \\<lbrakk>Inr ?P \\<in> set (dec_interp ?n ?FO ?w); ?p \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> ?p < length ?w\n\ngoal (1 subgoal):\n 1. p < length w", "by fastforce"], ["proof (state)\nthis:\n  p < length w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (dec_interp (length I) (FOV \\<phi>) (enc (w, I))).\n     case x of Inl p \\<Rightarrow> p < length w\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "thus \"wf_interp_for_formula (w, ?dec) \\<phi>\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (dec_interp (length I) (FOV \\<phi>) (enc (w, I))).\n     case x of Inl p \\<Rightarrow> p < length w\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "using assms\n    dec_interp_Inl[of _ \"FOV \\<phi>\" \"length I\" \"enc (w, I)\", OF _ bspec[OF max_idx_vars]]\n    dec_interp_Inr[of _ \"FOV \\<phi>\" \"length I\" \"enc (w, I)\", OF _ bspec[OF max_idx_vars]]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (dec_interp (length I) (FOV \\<phi>) (enc (w, I))).\n     case x of Inl p \\<Rightarrow> p < length w\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w\n  wf_formula (length I) \\<phi>\n  wf_interp_for_formula (w, I) \\<phi>\n  \\<lbrakk>?i \\<in> FOV \\<phi>; pre_wf_formula (length I) ?\\<phi>2;\n   ?i \\<in> FOV ?\\<phi>2 \\<union> SOV ?\\<phi>2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p.\n                       dec_interp (length I) (FOV \\<phi>) (enc (w, I)) !\n                       ?i =\n                       Inl p\n  \\<lbrakk>?i \\<notin> FOV \\<phi>; pre_wf_formula (length I) ?\\<phi>2;\n   ?i \\<in> FOV ?\\<phi>2 \\<union> SOV ?\\<phi>2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P.\n                       dec_interp (length I) (FOV \\<phi>) (enc (w, I)) !\n                       ?i =\n                       Inr P\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I))) \\<phi>", "by (fastforce split: sum.splits)"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, dec_interp (length I) (FOV \\<phi>) (enc (w, I)))\n   \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enc_welldef: \"\\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) \\<phi>;\n  wf_interp_for_formula (w, I) \\<phi>; wf_interp_for_formula (w', I') \\<phi>\\<rbrakk> \\<Longrightarrow>\n  satisfies (w, I) \\<phi> \\<longleftrightarrow> satisfies (w', I') \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) \\<phi>;\n     wf_interp_for_formula (w, I) \\<phi>;\n     wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                      ((w', I') \\<Turnstile> \\<phi>)", "proof (induction \\<phi> arbitrary: I I')"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FQ a m)"], ["proof (state)\nthis:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n  wf_interp_for_formula (w', I') (FQ a m)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "let ?dec = \"\\<lambda>w I. (dec_word (enc (w, I)), dec_interp (length I) (FOV (FQ a m)) (enc (w, I)))\""], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FQ(2,3)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)", "have \"satisfies (w, I) (FQ a m) = satisfies (?dec w I) (FQ a m)\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FQ a m) =\n    ((dec_word (enc (w, I)),\n      dec_interp (length I) (FOV (FQ a m)) (enc (w, I))) \\<Turnstile>\n     FQ a m)", "unfolding dec_word_enc"], ["proof (prove)\nusing this:\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FQ a m) =\n    ((w, dec_interp (length I) (FOV (FQ a m)) (enc (w, I))) \\<Turnstile>\n     FQ a m)", "using dec_interp_enc_Inl[of \"length I\" \"{m}\" w I m]"], ["proof (prove)\nusing this:\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n  \\<lbrakk>dec_interp (length I) {m} (enc (w, I)) ! m = Inl ?p';\n   I ! m = Inl ?p; m \\<in> {m}; m < length I; length I = length I;\n   ?p < length w;\n   0 < length w \\<and>\n   (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set I.\n       case x of Inl p \\<Rightarrow> p < length w\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\\<rbrakk>\n  \\<Longrightarrow> ?p = ?p'\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FQ a m) =\n    ((w, dec_interp (length I) (FOV (FQ a m)) (enc (w, I))) \\<Turnstile>\n     FQ a m)", "by (auto intro: nth_mem dest: dec_interp_not_Inr split: sum.splits) (metis nth_mem)+"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FQ a m)) (enc (w, I))) \\<Turnstile>\n   FQ a m)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "moreover"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FQ a m)) (enc (w, I))) \\<Turnstile>\n   FQ a m)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FQ(3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FQ a m)", "have *: \"w \\<noteq> []\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FQ(2,4)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w', I') (FQ a m)", "have \"satisfies (w', I') (FQ a m) = satisfies (?dec w' I') (FQ a m)\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w', I') (FQ a m)\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FQ a m) =\n    ((dec_word (enc (w', I')),\n      dec_interp (length I') (FOV (FQ a m)) (enc (w', I'))) \\<Turnstile>\n     FQ a m)", "unfolding dec_word_enc enc_length[OF * FQ(1)]"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FQ a m)\n  wf_interp_for_formula (w', I') (FQ a m)\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FQ a m) =\n    ((w', dec_interp (length I') (FOV (FQ a m)) (enc (w', I'))) \\<Turnstile>\n     FQ a m)", "using dec_interp_enc_Inl[of \"length I'\" \"{m}\" w' I' m]"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FQ a m)\n  wf_interp_for_formula (w', I') (FQ a m)\n  \\<lbrakk>dec_interp (length I') {m} (enc (w', I')) ! m = Inl ?p';\n   I' ! m = Inl ?p; m \\<in> {m}; m < length I'; length I' = length I';\n   ?p < length w';\n   0 < length w' \\<and>\n   (\\<forall>a\\<in>set w'. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set I'.\n       case x of Inl p \\<Rightarrow> p < length w'\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w')\\<rbrakk>\n  \\<Longrightarrow> ?p = ?p'\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FQ a m) =\n    ((w', dec_interp (length I') (FOV (FQ a m)) (enc (w', I'))) \\<Turnstile>\n     FQ a m)", "by (auto dest: dec_interp_not_Inr split: sum.splits) (metis nth_mem)+"], ["proof (state)\nthis:\n  ((w', I') \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FQ a m)) (enc (w', I'))) \\<Turnstile>\n   FQ a m)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  ((w, I) \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FQ a m)) (enc (w, I))) \\<Turnstile>\n   FQ a m)\n  ((w', I') \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FQ a m)) (enc (w', I'))) \\<Turnstile>\n   FQ a m)", "show ?case"], ["proof (prove)\nusing this:\n  ((w, I) \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FQ a m)) (enc (w, I))) \\<Turnstile>\n   FQ a m)\n  ((w', I') \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FQ a m)) (enc (w', I'))) \\<Turnstile>\n   FQ a m)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FQ a m) = ((w', I') \\<Turnstile> FQ a m)", "unfolding FQ(1) enc_length[OF * FQ(1)]"], ["proof (prove)\nusing this:\n  ((w, I) \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FQ a m)) (enc (w', I'))) \\<Turnstile>\n   FQ a m)\n  ((w', I') \\<Turnstile> FQ a m) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FQ a m)) (enc (w', I'))) \\<Turnstile>\n   FQ a m)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FQ a m) = ((w', I') \\<Turnstile> FQ a m)", ".."], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FQ a m) = ((w', I') \\<Turnstile> FQ a m)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FLess m n)"], ["proof (state)\nthis:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FLess m n)\n  wf_interp_for_formula (w, I) (FLess m n)\n  wf_interp_for_formula (w', I') (FLess m n)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "let ?dec = \"\\<lambda>w I. (dec_word (enc (w, I)), dec_interp (length I) (FOV (FLess m n)) (enc (w, I)))\""], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FLess(2,3)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FLess m n)\n  wf_interp_for_formula (w, I) (FLess m n)", "have \"satisfies (w, I) (FLess m n) = satisfies (?dec (TYPE ('a)) w I) (FLess m n)\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FLess m n)\n  wf_interp_for_formula (w, I) (FLess m n)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FLess m n) =\n    ((dec_word (enc (w, I)),\n      dec_interp (length I) (FOV (FLess m n)) (enc (w, I))) \\<Turnstile>\n     FLess m n)", "unfolding dec_word_enc"], ["proof (prove)\nusing this:\n  wf_formula (length I) (FLess m n)\n  wf_interp_for_formula (w, I) (FLess m n)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FLess m n) =\n    ((w, dec_interp (length I) (FOV (FLess m n)) (enc (w, I))) \\<Turnstile>\n     FLess m n)", "using dec_interp_enc_Inl[of \"length I\" \"{m, n}\" w I m] dec_interp_enc_Inl[of \"length I\" \"{m, n}\" w I n]"], ["proof (prove)\nusing this:\n  wf_formula (length I) (FLess m n)\n  wf_interp_for_formula (w, I) (FLess m n)\n  \\<lbrakk>dec_interp (length I) {m, n} (enc (w, I)) ! m = Inl ?p';\n   I ! m = Inl ?p; m \\<in> {m, n}; m < length I; length I = length I;\n   ?p < length w;\n   0 < length w \\<and>\n   (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set I.\n       case x of Inl p \\<Rightarrow> p < length w\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\\<rbrakk>\n  \\<Longrightarrow> ?p = ?p'\n  \\<lbrakk>dec_interp (length I) {m, n} (enc (w, I)) ! n = Inl ?p';\n   I ! n = Inl ?p; n \\<in> {m, n}; n < length I; length I = length I;\n   ?p < length w;\n   0 < length w \\<and>\n   (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set I.\n       case x of Inl p \\<Rightarrow> p < length w\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\\<rbrakk>\n  \\<Longrightarrow> ?p = ?p'\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FLess m n) =\n    ((w, dec_interp (length I) (FOV (FLess m n)) (enc (w, I))) \\<Turnstile>\n     FLess m n)", "by (fastforce intro: nth_mem dest: dec_interp_not_Inr split: sum.splits)"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FLess m n)) (enc (w, I))) \\<Turnstile>\n   FLess m n)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "moreover"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FLess m n)) (enc (w, I))) \\<Turnstile>\n   FLess m n)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FLess(3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m n)", "have *: \"w \\<noteq> []\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m n)\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FLess(2,4)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FLess m n)\n  wf_interp_for_formula (w', I') (FLess m n)", "have \"satisfies (w', I') (FLess m n) = satisfies (?dec (TYPE ('a)) w' I') (FLess m n)\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FLess m n)\n  wf_interp_for_formula (w', I') (FLess m n)\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FLess m n) =\n    ((dec_word (enc (w', I')),\n      dec_interp (length I') (FOV (FLess m n)) (enc (w', I'))) \\<Turnstile>\n     FLess m n)", "unfolding dec_word_enc enc_length[OF * FLess(1)]"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FLess m n)\n  wf_interp_for_formula (w', I') (FLess m n)\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FLess m n) =\n    ((w',\n      dec_interp (length I') (FOV (FLess m n)) (enc (w', I'))) \\<Turnstile>\n     FLess m n)", "using dec_interp_enc_Inl[of \"length I'\" \"{m, n}\" w' I' m] dec_interp_enc_Inl[of \"length I'\" \"{m, n}\" w' I' n]"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FLess m n)\n  wf_interp_for_formula (w', I') (FLess m n)\n  \\<lbrakk>dec_interp (length I') {m, n} (enc (w', I')) ! m = Inl ?p';\n   I' ! m = Inl ?p; m \\<in> {m, n}; m < length I'; length I' = length I';\n   ?p < length w';\n   0 < length w' \\<and>\n   (\\<forall>a\\<in>set w'. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set I'.\n       case x of Inl p \\<Rightarrow> p < length w'\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w')\\<rbrakk>\n  \\<Longrightarrow> ?p = ?p'\n  \\<lbrakk>dec_interp (length I') {m, n} (enc (w', I')) ! n = Inl ?p';\n   I' ! n = Inl ?p; n \\<in> {m, n}; n < length I'; length I' = length I';\n   ?p < length w';\n   0 < length w' \\<and>\n   (\\<forall>a\\<in>set w'. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set I'.\n       case x of Inl p \\<Rightarrow> p < length w'\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w')\\<rbrakk>\n  \\<Longrightarrow> ?p = ?p'\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FLess m n) =\n    ((w',\n      dec_interp (length I') (FOV (FLess m n)) (enc (w', I'))) \\<Turnstile>\n     FLess m n)", "by (fastforce intro: nth_mem dest: dec_interp_not_Inr split: sum.splits)"], ["proof (state)\nthis:\n  ((w', I') \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FLess m n)) (enc (w', I'))) \\<Turnstile>\n   FLess m n)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  ((w, I) \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FLess m n)) (enc (w, I))) \\<Turnstile>\n   FLess m n)\n  ((w', I') \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FLess m n)) (enc (w', I'))) \\<Turnstile>\n   FLess m n)", "show ?case"], ["proof (prove)\nusing this:\n  ((w, I) \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FLess m n)) (enc (w, I))) \\<Turnstile>\n   FLess m n)\n  ((w', I') \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FLess m n)) (enc (w', I'))) \\<Turnstile>\n   FLess m n)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FLess m n) = ((w', I') \\<Turnstile> FLess m n)", "unfolding FLess(1) enc_length[OF * FLess(1)]"], ["proof (prove)\nusing this:\n  ((w, I) \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FLess m n)) (enc (w', I'))) \\<Turnstile>\n   FLess m n)\n  ((w', I') \\<Turnstile> FLess m n) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FLess m n)) (enc (w', I'))) \\<Turnstile>\n   FLess m n)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FLess m n) = ((w', I') \\<Turnstile> FLess m n)", ".."], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FLess m n) = ((w', I') \\<Turnstile> FLess m n)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FIn m M)"], ["proof (state)\nthis:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n  wf_interp_for_formula (w', I') (FIn m M)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "let ?dec = \"\\<lambda>w I. (dec_word (enc (w, I)), dec_interp (length I) (FOV (FIn m M)) (enc (w, I)))\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FIn(2,3)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)", "have \"satisfies (w, I) (FIn m M) = satisfies (?dec (TYPE ('a)) w I) (FIn m M)\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FIn m M) =\n    ((dec_word (enc (w, I)),\n      dec_interp (length I) (FOV (FIn m M)) (enc (w, I))) \\<Turnstile>\n     FIn m M)", "unfolding dec_word_enc"], ["proof (prove)\nusing this:\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FIn m M) =\n    ((w, dec_interp (length I) (FOV (FIn m M)) (enc (w, I))) \\<Turnstile>\n     FIn m M)", "using dec_interp_enc_Inl[of \"length I\" \"{m}\" w I m] dec_interp_enc_Inr[of \"length I\" \"{m}\" w I M]"], ["proof (prove)\nusing this:\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n  \\<lbrakk>dec_interp (length I) {m} (enc (w, I)) ! m = Inl ?p';\n   I ! m = Inl ?p; m \\<in> {m}; m < length I; length I = length I;\n   ?p < length w;\n   0 < length w \\<and>\n   (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set I.\n       case x of Inl p \\<Rightarrow> p < length w\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w)\\<rbrakk>\n  \\<Longrightarrow> ?p = ?p'\n  \\<lbrakk>dec_interp (length I) {m} (enc (w, I)) ! M = Inr ?P';\n   I ! M = Inr ?P; M \\<notin> {m}; M < length I; length I = length I;\n   \\<forall>p\\<in>?P. p < length w\\<rbrakk>\n  \\<Longrightarrow> ?P = ?P'\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FIn m M) =\n    ((w, dec_interp (length I) (FOV (FIn m M)) (enc (w, I))) \\<Turnstile>\n     FIn m M)", "by (auto dest: dec_interp_not_Inr dec_interp_not_Inl split: sum.splits) (metis nth_mem)+"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FIn m M)) (enc (w, I))) \\<Turnstile>\n   FIn m M)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "moreover"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FIn m M)) (enc (w, I))) \\<Turnstile>\n   FIn m M)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FIn(3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FIn m M)", "have *: \"w \\<noteq> []\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "from FIn(2,4)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w', I') (FIn m M)", "have \"satisfies (w', I') (FIn m M) = satisfies (?dec (TYPE ('a)) w' I') (FIn m M)\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w', I') (FIn m M)\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FIn m M) =\n    ((dec_word (enc (w', I')),\n      dec_interp (length I') (FOV (FIn m M)) (enc (w', I'))) \\<Turnstile>\n     FIn m M)", "unfolding dec_word_enc enc_length[OF * FIn(1)]"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FIn m M)\n  wf_interp_for_formula (w', I') (FIn m M)\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FIn m M) =\n    ((w',\n      dec_interp (length I') (FOV (FIn m M)) (enc (w', I'))) \\<Turnstile>\n     FIn m M)", "using dec_interp_enc_Inl[of \"length I'\" \"{m}\" w' I' m] dec_interp_enc_Inr[of \"length I'\" \"{m}\" w' I' M]"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FIn m M)\n  wf_interp_for_formula (w', I') (FIn m M)\n  \\<lbrakk>dec_interp (length I') {m} (enc (w', I')) ! m = Inl ?p';\n   I' ! m = Inl ?p; m \\<in> {m}; m < length I'; length I' = length I';\n   ?p < length w';\n   0 < length w' \\<and>\n   (\\<forall>a\\<in>set w'. a \\<in> set \\<Sigma>) \\<and>\n   (\\<forall>x\\<in>set I'.\n       case x of Inl p \\<Rightarrow> p < length w'\n       | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p < length w')\\<rbrakk>\n  \\<Longrightarrow> ?p = ?p'\n  \\<lbrakk>dec_interp (length I') {m} (enc (w', I')) ! M = Inr ?P';\n   I' ! M = Inr ?P; M \\<notin> {m}; M < length I'; length I' = length I';\n   \\<forall>p\\<in>?P. p < length w'\\<rbrakk>\n  \\<Longrightarrow> ?P = ?P'\n\ngoal (1 subgoal):\n 1. ((w', I') \\<Turnstile> FIn m M) =\n    ((w',\n      dec_interp (length I') (FOV (FIn m M)) (enc (w', I'))) \\<Turnstile>\n     FIn m M)", "by (auto dest: dec_interp_not_Inr dec_interp_not_Inl split: sum.splits) (metis nth_mem)+"], ["proof (state)\nthis:\n  ((w', I') \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FIn m M)) (enc (w', I'))) \\<Turnstile>\n   FIn m M)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 I I'.\n       \\<lbrakk>enc (w, I) = enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  ((w, I) \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FIn m M)) (enc (w, I))) \\<Turnstile>\n   FIn m M)\n  ((w', I') \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FIn m M)) (enc (w', I'))) \\<Turnstile>\n   FIn m M)", "show ?case"], ["proof (prove)\nusing this:\n  ((w, I) \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w, I)),\n    dec_interp (length I) (FOV (FIn m M)) (enc (w, I))) \\<Turnstile>\n   FIn m M)\n  ((w', I') \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FIn m M)) (enc (w', I'))) \\<Turnstile>\n   FIn m M)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FIn m M) = ((w', I') \\<Turnstile> FIn m M)", "unfolding FIn(1) enc_length[OF * FIn(1)]"], ["proof (prove)\nusing this:\n  ((w, I) \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FIn m M)) (enc (w', I'))) \\<Turnstile>\n   FIn m M)\n  ((w', I') \\<Turnstile> FIn m M) =\n  ((dec_word (enc (w', I')),\n    dec_interp (length I') (FOV (FIn m M)) (enc (w', I'))) \\<Turnstile>\n   FIn m M)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FIn m M) = ((w', I') \\<Turnstile> FIn m M)", ".."], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FIn m M) = ((w', I') \\<Turnstile> FIn m M)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FOr \\<phi>1 \\<phi>2)"], ["proof (state)\nthis:\n  \\<lbrakk>enc (w, ?I) = enc (w', ?I'); wf_formula (length ?I) \\<phi>1;\n   wf_interp_for_formula (w, ?I) \\<phi>1;\n   wf_interp_for_formula (w', ?I') \\<phi>1\\<rbrakk>\n  \\<Longrightarrow> ((w, ?I) \\<Turnstile> \\<phi>1) =\n                    ((w', ?I') \\<Turnstile> \\<phi>1)\n  \\<lbrakk>enc (w, ?I) = enc (w', ?I'); wf_formula (length ?I) \\<phi>2;\n   wf_interp_for_formula (w, ?I) \\<phi>2;\n   wf_interp_for_formula (w', ?I') \\<phi>2\\<rbrakk>\n  \\<Longrightarrow> ((w, ?I) \\<Turnstile> \\<phi>2) =\n                    ((w', ?I') \\<Turnstile> \\<phi>2)\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 5. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n    ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)", "unfolding satisfies.simps(5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>1 \\<or> (w, I) \\<Turnstile> \\<phi>2) =\n    ((w', I') \\<Turnstile> \\<phi>1 \\<or> (w', I') \\<Turnstile> \\<phi>2)", "proof (intro disj_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)\n 2. \\<not> (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "from FOr(3-6)"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)", "show \"satisfies (w, I) \\<phi>1 = satisfies (w', I') \\<phi>1\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)", "by (intro FOr(1)) auto"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)\n\ngoal (1 subgoal):\n 1. \\<not> (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "from FOr(3-6)"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)", "show \"satisfies (w, I) \\<phi>2 = satisfies (w', I') \\<phi>2\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "by (intro FOr(2)) auto"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n  ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FAnd \\<phi>1 \\<phi>2)"], ["proof (state)\nthis:\n  \\<lbrakk>enc (w, ?I) = enc (w', ?I'); wf_formula (length ?I) \\<phi>1;\n   wf_interp_for_formula (w, ?I) \\<phi>1;\n   wf_interp_for_formula (w', ?I') \\<phi>1\\<rbrakk>\n  \\<Longrightarrow> ((w, ?I) \\<Turnstile> \\<phi>1) =\n                    ((w', ?I') \\<Turnstile> \\<phi>1)\n  \\<lbrakk>enc (w, ?I) = enc (w', ?I'); wf_formula (length ?I) \\<phi>2;\n   wf_interp_for_formula (w, ?I) \\<phi>2;\n   wf_interp_for_formula (w', ?I') \\<phi>2\\<rbrakk>\n  \\<Longrightarrow> ((w, ?I) \\<Turnstile> \\<phi>2) =\n                    ((w', ?I') \\<Turnstile> \\<phi>2)\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>I I'.\n           \\<lbrakk>enc (w, I) = enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        enc (w, I) = enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 4. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n    ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)", "unfolding satisfies.simps(6)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>1 \\<and> (w, I) \\<Turnstile> \\<phi>2) =\n    ((w', I') \\<Turnstile> \\<phi>1 \\<and> (w', I') \\<Turnstile> \\<phi>2)", "proof (intro conj_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)\n 2. (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "from FAnd(3-6)"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)", "show \"satisfies (w, I) \\<phi>1 = satisfies (w', I') \\<phi>1\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)", "by (intro FAnd(1)) auto"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "from FAnd(3-6)"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)", "show \"satisfies (w, I) \\<phi>2 = satisfies (w', I') \\<phi>2\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "by (intro FAnd(2)) auto"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n  ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FExists \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>enc (w, ?I) = enc (w', ?I'); wf_formula (length ?I) \\<phi>;\n   wf_interp_for_formula (w, ?I) \\<phi>;\n   wf_interp_for_formula (w', ?I') \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((w, ?I) \\<Turnstile> \\<phi>) =\n                    ((w', ?I') \\<Turnstile> \\<phi>)\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "hence \"w \\<noteq> []\" \"w' \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<lbrakk>enc (w, ?I) = enc (w', ?I'); wf_formula (length ?I) \\<phi>;\n   wf_interp_for_formula (w, ?I) \\<phi>;\n   wf_interp_for_formula (w', ?I') \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((w, ?I) \\<Turnstile> \\<phi>) =\n                    ((w', ?I') \\<Turnstile> \\<phi>)\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] &&& w' \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  w \\<noteq> []\n  w' \\<noteq> []\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "hence length: \"length w = length w'\" \"length I = length I'\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  w' \\<noteq> []\n\ngoal (1 subgoal):\n 1. length w = length w' &&& length I = length I'", "using enc_word_length[OF FExists.prems(1)] enc_length[OF _ FExists.prems(1)]"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  w' \\<noteq> []\n  length w = length w'\n  w \\<noteq> [] \\<Longrightarrow> length I = length I'\n\ngoal (1 subgoal):\n 1. length w = length w' &&& length I = length I'", "by auto"], ["proof (state)\nthis:\n  length w = length w'\n  length I = length I'\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FExists \\<phi>) =\n    ((w', I') \\<Turnstile> FExists \\<phi>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "assume \"satisfies (w, I) (FExists \\<phi>)\""], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "with FExists.prems(3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  (w, I) \\<Turnstile> FExists \\<phi>", "obtain p where \"p < length w\" \"satisfies (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p < length w; (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: ord_less_eq_trans[OF le_imp_less_Suc Suc_pred])"], ["proof (state)\nthis:\n  p < length w\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "moreover"], ["proof (state)\nthis:\n  p < length w\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "with FExists.prems"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w\n  (w, Inl p # I) \\<Turnstile> \\<phi>", "have \"satisfies (w', Inl p # I') \\<phi>\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', Inl p # I') \\<Turnstile> \\<phi>", "proof (intro iffD1[OF FExists.IH[of \"Inl p # I\" \"Inl p # I'\"]])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inl p # I) = enc (w', Inl p # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, Inl p # I) \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 5. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inl p # I) \\<Turnstile> \\<phi>", "from FExists.prems(2,3) \\<open>p < length w\\<close>"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  p < length w", "show \"wf_interp_for_formula (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  p < length w\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inl p # I) \\<phi>", "by (blast dest: wf_interp_for_formula_FExists[of I, OF _ \\<open>w \\<noteq> []\\<close>])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inl p # I) = enc (w', Inl p # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inl p # I) \\<Turnstile> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inl p # I) = enc (w', Inl p # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inl p # I) \\<Turnstile> \\<phi>", "from FExists.prems(2,4) \\<open>p < length w\\<close>"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w", "show \"wf_interp_for_formula (w', Inl p # I') \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inl p # I') \\<phi>", "unfolding length"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w'\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inl p # I') \\<phi>", "by (blast dest: wf_interp_for_formula_FExists[of I', OF _ \\<open>w' \\<noteq> []\\<close>])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w', Inl p # I') \\<phi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inl p # I) = enc (w', Inl p # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w;\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inl p # I) \\<Turnstile> \\<phi>", "qed (auto elim: enc_extend_interp simp del: enc.simps)"], ["proof (state)\nthis:\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  p < length w\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n  (w', Inl p # I') \\<Turnstile> \\<phi>", "show \"satisfies (w', I') (FExists \\<phi>)\""], ["proof (prove)\nusing this:\n  p < length w\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi>", "using length"], ["proof (prove)\nusing this:\n  p < length w\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n  length w = length w'\n  length I = length I'\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi>", "by (auto intro!: exI[of _ p])"], ["proof (state)\nthis:\n  (w', I') \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "assume \"satisfies (w', I') (FExists \\<phi>)\""], ["proof (state)\nthis:\n  (w', I') \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "with FExists.prems(1,2,4)"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  (w', I') \\<Turnstile> FExists \\<phi>", "obtain p where \"p < length w'\" \"satisfies (w', Inl p # I') \\<phi>\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  (w', I') \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p < length w';\n         (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: ord_less_eq_trans[OF le_imp_less_Suc Suc_pred])"], ["proof (state)\nthis:\n  p < length w'\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "moreover"], ["proof (state)\nthis:\n  p < length w'\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "with FExists.prems"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w'\n  (w', Inl p # I') \\<Turnstile> \\<phi>", "have \"satisfies (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w'\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w, Inl p # I) \\<Turnstile> \\<phi>", "proof (intro iffD2[OF FExists.IH[of \"Inl p # I\" \"Inl p # I'\"]])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inl p # I) = enc (w', Inl p # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, Inl p # I) \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 5. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inl p # I') \\<Turnstile> \\<phi>", "from FExists.prems(2,3) \\<open>p < length w'\\<close>"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  p < length w'", "show \"wf_interp_for_formula (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  p < length w'\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inl p # I) \\<phi>", "unfolding length[symmetric]"], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  p < length w\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inl p # I) \\<phi>", "by (blast dest: wf_interp_for_formula_FExists[of I, OF _ \\<open>w \\<noteq> []\\<close>])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inl p # I) = enc (w', Inl p # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inl p # I') \\<Turnstile> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inl p # I) = enc (w', Inl p # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inl p # I') \\<Turnstile> \\<phi>", "from FExists.prems(2,4) \\<open>p < length w'\\<close>"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w'", "show \"wf_interp_for_formula (w', Inl p # I') \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w'\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inl p # I') \\<phi>", "unfolding length"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  p < length w'\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inl p # I') \\<phi>", "by (blast dest: wf_interp_for_formula_FExists[of I', OF _ \\<open>w' \\<noteq> []\\<close>])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w', Inl p # I') \\<phi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inl p # I) = enc (w', Inl p # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     wf_interp_for_formula (w, I) (FExists \\<phi>);\n     wf_interp_for_formula (w', I') (FExists \\<phi>); p < length w';\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inl p # I') \\<Turnstile> \\<phi>", "qed (auto elim: enc_extend_interp simp del: enc.simps)"], ["proof (state)\nthis:\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  p < length w'\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n  (w, Inl p # I) \\<Turnstile> \\<phi>", "show \"satisfies (w, I) (FExists \\<phi>)\""], ["proof (prove)\nusing this:\n  p < length w'\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> FExists \\<phi>", "using length"], ["proof (prove)\nusing this:\n  p < length w'\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n  length w = length w'\n  length I = length I'\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> FExists \\<phi>", "by (auto intro!: exI[of _ p])"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FExists \\<phi>) =\n  ((w', I') \\<Turnstile> FExists \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FEXISTS \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>enc (w, ?I) = enc (w', ?I'); wf_formula (length ?I) \\<phi>;\n   wf_interp_for_formula (w, ?I) \\<phi>;\n   wf_interp_for_formula (w', ?I') \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((w, ?I) \\<Turnstile> \\<phi>) =\n                    ((w', ?I') \\<Turnstile> \\<phi>)\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "hence \"w \\<noteq> []\" \"w' \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<lbrakk>enc (w, ?I) = enc (w', ?I'); wf_formula (length ?I) \\<phi>;\n   wf_interp_for_formula (w, ?I) \\<phi>;\n   wf_interp_for_formula (w', ?I') \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((w, ?I) \\<Turnstile> \\<phi>) =\n                    ((w', ?I') \\<Turnstile> \\<phi>)\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. w \\<noteq> [] &&& w' \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  w \\<noteq> []\n  w' \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "hence length: \"length w = length w'\" \"length I = length I'\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  w' \\<noteq> []\n\ngoal (1 subgoal):\n 1. length w = length w' &&& length I = length I'", "using enc_word_length[OF FEXISTS.prems(1)] enc_length[OF _ FEXISTS.prems(1)]"], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  w' \\<noteq> []\n  length w = length w'\n  w \\<noteq> [] \\<Longrightarrow> length I = length I'\n\ngoal (1 subgoal):\n 1. length w = length w' &&& length I = length I'", "by auto"], ["proof (state)\nthis:\n  length w = length w'\n  length I = length I'\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n    ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "assume \"satisfies (w, I) (FEXISTS \\<phi>)\""], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "then"], ["proof (chain)\npicking this:\n  (w, I) \\<Turnstile> FEXISTS \\<phi>", "obtain P where P: \"P \\<subseteq> {0 .. length w - 1}\" \"satisfies (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<subseteq> {0..length w - 1};\n         (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P \\<subseteq> {0..length w - 1}\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "moreover"], ["proof (state)\nthis:\n  P \\<subseteq> {0..length w - 1}\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "with FEXISTS.prems"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w - 1}\n  (w, Inr P # I) \\<Turnstile> \\<phi>", "have \"satisfies (w', Inr P # I') \\<phi>\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w - 1}\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', Inr P # I') \\<Turnstile> \\<phi>", "proof (intro iffD1[OF FEXISTS.IH[of \"Inr P # I\" \"Inr P # I'\"]])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inr P # I) = enc (w', Inr P # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, Inr P # I) \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 5. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inr P # I) \\<Turnstile> \\<phi>", "from FEXISTS.prems(2,3) P(1)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w - 1}", "show \"wf_interp_for_formula (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w - 1}\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inr P # I) \\<phi>", "by (blast dest: wf_interp_for_formula_FEXISTS[of I, OF _ \\<open>w \\<noteq> []\\<close>])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inr P # I) = enc (w', Inr P # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inr P # I) \\<Turnstile> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inr P # I) = enc (w', Inr P # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inr P # I) \\<Turnstile> \\<phi>", "from FEXISTS.prems(2,4) P(1)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w - 1}", "show \"wf_interp_for_formula (w', Inr P # I') \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w - 1}\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inr P # I') \\<phi>", "unfolding length"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w' - 1}\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inr P # I') \\<phi>", "by (blast dest: wf_interp_for_formula_FEXISTS[of I', OF _ \\<open>w' \\<noteq> []\\<close>])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w', Inr P # I') \\<phi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inr P # I) = enc (w', Inr P # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w - 1};\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inr P # I) \\<Turnstile> \\<phi>", "qed (auto elim: enc_extend_interp simp del: enc.simps)"], ["proof (state)\nthis:\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  P \\<subseteq> {0..length w - 1}\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n  (w', Inr P # I') \\<Turnstile> \\<phi>", "show \"satisfies (w', I') (FEXISTS \\<phi>)\""], ["proof (prove)\nusing this:\n  P \\<subseteq> {0..length w - 1}\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi>", "using length"], ["proof (prove)\nusing this:\n  P \\<subseteq> {0..length w - 1}\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n  length w = length w'\n  length I = length I'\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi>", "by (auto intro!: exI[of _ P])"], ["proof (state)\nthis:\n  (w', I') \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "assume \"satisfies (w', I') (FEXISTS \\<phi>)\""], ["proof (state)\nthis:\n  (w', I') \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "then"], ["proof (chain)\npicking this:\n  (w', I') \\<Turnstile> FEXISTS \\<phi>", "obtain P where P: \"P \\<subseteq> {0 .. length w' - 1}\" \"satisfies (w', Inr P # I') \\<phi>\""], ["proof (prove)\nusing this:\n  (w', I') \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<subseteq> {0..length w' - 1};\n         (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P \\<subseteq> {0..length w' - 1}\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "moreover"], ["proof (state)\nthis:\n  P \\<subseteq> {0..length w' - 1}\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "with FEXISTS.prems"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w' - 1}\n  (w', Inr P # I') \\<Turnstile> \\<phi>", "have \"satisfies (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w' - 1}\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w, Inr P # I) \\<Turnstile> \\<phi>", "proof (intro iffD2[OF FEXISTS.IH[of \"Inr P # I\" \"Inr P # I'\"]])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inr P # I) = enc (w', Inr P # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, Inr P # I) \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 5. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inr P # I') \\<Turnstile> \\<phi>", "from FEXISTS.prems(2,3) P(1)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w' - 1}", "show \"wf_interp_for_formula (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w' - 1}\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inr P # I) \\<phi>", "unfolding length[symmetric]"], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w - 1}\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inr P # I) \\<phi>", "by (blast dest: wf_interp_for_formula_FEXISTS[of I, OF _ \\<open>w \\<noteq> []\\<close>])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inr P # I) = enc (w', Inr P # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inr P # I') \\<Turnstile> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inr P # I) = enc (w', Inr P # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 4. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inr P # I') \\<Turnstile> \\<phi>", "from FEXISTS.prems(2,4) P(1)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w' - 1}", "show \"wf_interp_for_formula (w', Inr P # I') \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w' - 1}\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inr P # I') \\<phi>", "unfolding length"], ["proof (prove)\nusing this:\n  wf_formula (length I') (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  P \\<subseteq> {0..length w' - 1}\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inr P # I') \\<phi>", "by (blast dest: wf_interp_for_formula_FEXISTS[of I', OF _ \\<open>w' \\<noteq> []\\<close>])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w', Inr P # I') \\<phi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> enc (w, Inr P # I) = enc (w', Inr P # I')\n 2. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>enc (w, I) = enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>);\n     P \\<subseteq> {0..length w' - 1};\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inr P # I') \\<Turnstile> \\<phi>", "qed (auto elim: enc_extend_interp simp del: enc.simps)"], ["proof (state)\nthis:\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  P \\<subseteq> {0..length w' - 1}\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n  (w, Inr P # I) \\<Turnstile> \\<phi>", "show \"satisfies (w, I) (FEXISTS \\<phi>)\""], ["proof (prove)\nusing this:\n  P \\<subseteq> {0..length w' - 1}\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi>", "using length"], ["proof (prove)\nusing this:\n  P \\<subseteq> {0..length w' - 1}\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n  length w = length w'\n  length I = length I'\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi>", "by (auto intro!: exI[of _ P])"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n  ((w', I') \\<Turnstile> FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> I I'.\n       \\<lbrakk>\\<And>I I'.\n                   \\<lbrakk>enc (w, I) = enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        enc (w, I) = enc (w', I'); wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)", "qed auto"], ["", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_FOr:\n  assumes \"wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\"\n  shows \"lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<subseteq>\n    (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter> {enc (w, I) | w I. length I = n \\<and> wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\"\n    (is \"_ \\<subseteq> (?L1 \\<union> ?L2) \\<inter> ?ENC\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n    \\<subseteq> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n                 lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n                lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp_for_formula (w, I)\n                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n                lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp_for_formula (w, I)\n                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n                lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp_for_formula (w, I)\n                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "obtain w I where\n    *: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\" \"length I = n\" \"length w > 0\" and\n     \"satisfies (w, I) \\<phi>\\<^sub>1 \\<or> satisfies (w, I) \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n         length I = n; 0 < length w;\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I)\n            (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<and>\n           (w, I) \\<Turnstile> FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n         length I = n; 0 < length w;\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n                lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp_for_formula (w, I)\n                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "thus \"x \\<in> (?L1 \\<union> ?L2) \\<inter> ?ENC\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n             lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I)\n              (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "proof (elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n 2. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "assume \"satisfies (w, I) \\<phi>\\<^sub>1\""], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n 2. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "with *"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "have \"x \\<in> ?L1\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1", "using assms"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n             (w, I) \\<Turnstile> \\<phi>\\<^sub>1}", "by (fastforce)"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n 2. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "with *"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n             lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I)\n              (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n          {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "assume \"satisfies (w, I) \\<phi>\\<^sub>2\""], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "with *"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "have \"x \\<in>?L2\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) \\<phi>\\<^sub>2 \\<and>\n             (w, I) \\<Turnstile> \\<phi>\\<^sub>2}", "by (fastforce)"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; 0 < length w; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              {enc (w, I) |w I.\n                               length I = n \\<and>\n                               wf_interp_for_formula (w, I)\n                                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "with *"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  0 < length w\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n             lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I)\n              (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n          {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n          {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_FAnd:\n  assumes \"wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\"\n  shows \"lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<subseteq>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<inter> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<inter> {enc (w, I) | w I. length I = n \\<and> wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\"\n    (is \"_ \\<subseteq> ?L1 \\<inter> ?L2 \\<inter> ?ENC\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n    \\<subseteq> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<inter>\n                lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<inter>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "using assms"], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n    \\<subseteq> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<inter>\n                lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<inter>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. {enc (w, I) |w I.\n     length I = n \\<and>\n     wf_interp_for_formula (w, I)\n      (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<and>\n     (w, I) \\<Turnstile> FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2}\n    \\<subseteq> {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n                 (w, I) \\<Turnstile> \\<phi>\\<^sub>1} \\<inter>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I) \\<phi>\\<^sub>2 \\<and>\n                 (w, I) \\<Turnstile> \\<phi>\\<^sub>2} \\<inter>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "by (fastforce)"], ["", "subsection \\<open>From M2L to Regular expressions\\<close>"], ["", "fun rexp_of :: \"nat \\<Rightarrow> 'a formula \\<Rightarrow> ('a atom) rexp\" where\n  \"rexp_of n (FQ a m) = Inter (TIMES [Full, Atom (AQ m a), Full]) (ENC n {m})\"\n| \"rexp_of n (FLess m1 m2) = (if m1 = m2 then Zero else Inter\n    (TIMES [Full, Atom (Arbitrary_Except m1 True), Full, Atom (Arbitrary_Except m2 True), Full])\n    (ENC n {m1, m2}))\"\n| \"rexp_of n (FIn m M) = \n    Inter (TIMES [Full, Atom (Arbitrary_Except2 m M), Full]) (ENC n {m})\"\n| \"rexp_of n (FNot \\<phi>) = Inter (rexp.Not (rexp_of n \\<phi>)) (ENC n (FOV (FNot \\<phi>)))\"\n| \"rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Inter (Plus (rexp_of n \\<phi>\\<^sub>1) (rexp_of n \\<phi>\\<^sub>2)) (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\"\n| \"rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = INTERSECT [rexp_of n \\<phi>\\<^sub>1, rexp_of n \\<phi>\\<^sub>2, ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))]\"\n| \"rexp_of n (FExists \\<phi>) = Pr (rexp_of (n + 1) \\<phi>)\"\n| \"rexp_of n (FEXISTS \\<phi>) = Pr (rexp_of (n + 1) \\<phi>)\""], ["", "fun rexp_of_alt :: \"nat \\<Rightarrow> 'a formula \\<Rightarrow> ('a atom) rexp\" where\n  \"rexp_of_alt n (FQ a m) = TIMES [Full, Atom (AQ m a), Full]\"\n| \"rexp_of_alt n (FLess m1 m2) = (if m1 = m2 then Zero else\n    TIMES [Full, Atom (Arbitrary_Except m1 True), Full, Atom (Arbitrary_Except m2 True), Full])\"\n| \"rexp_of_alt n (FIn m M) = TIMES [Full, Atom (Arbitrary_Except2 m M), Full]\"\n| \"rexp_of_alt n (FNot \\<phi>) = rexp.Not (rexp_of_alt n \\<phi>)\"\n| \"rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Plus (rexp_of_alt n \\<phi>\\<^sub>1) (rexp_of_alt n \\<phi>\\<^sub>2)\"\n| \"rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Inter (rexp_of_alt n \\<phi>\\<^sub>1) (rexp_of_alt n \\<phi>\\<^sub>2)\"\n| \"rexp_of_alt n (FExists \\<phi>) = Pr (Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>)))\"\n| \"rexp_of_alt n (FEXISTS \\<phi>) = Pr (Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>)))\""], ["", "definition \"rexp_of' n \\<phi> = Inter (rexp_of_alt n \\<phi>) (ENC n (FOV \\<phi>))\""], ["", "fun rexp_of_alt' :: \"nat \\<Rightarrow> 'a formula \\<Rightarrow> ('a atom) rexp\" where\n  \"rexp_of_alt' n (FQ a m) = TIMES [Full, Atom (AQ m a), Full]\"\n| \"rexp_of_alt' n (FLess m1 m2) = (if m1 = m2 then Zero else\n    TIMES [Full, Atom (Arbitrary_Except m1 True), Full, Atom (Arbitrary_Except m2 True), Full])\"\n| \"rexp_of_alt' n (FIn m M) = TIMES [Full, Atom (Arbitrary_Except2 m M), Full]\"\n| \"rexp_of_alt' n (FNot \\<phi>) = rexp.Not (rexp_of_alt' n \\<phi>)\"\n| \"rexp_of_alt' n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Plus (rexp_of_alt' n \\<phi>\\<^sub>1) (rexp_of_alt' n \\<phi>\\<^sub>2)\"\n| \"rexp_of_alt' n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Inter (rexp_of_alt' n \\<phi>\\<^sub>1) (rexp_of_alt' n \\<phi>\\<^sub>2)\"\n| \"rexp_of_alt' n (FExists \\<phi>) = Pr (Inter (rexp_of_alt' (n + 1) \\<phi>) (ENC (n + 1) {0}))\"\n| \"rexp_of_alt' n (FEXISTS \\<phi>) = Pr (rexp_of_alt' (n + 1) \\<phi>)\""], ["", "definition \"rexp_of'' n \\<phi> = Inter (rexp_of_alt' n \\<phi>) (ENC n (FOV \\<phi>))\""], ["", "theorem lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of: \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> = lang n (rexp_of n \\<phi>) - {[]}\"\n   (is \"_ \\<Longrightarrow> _ = ?L n \\<phi>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> = lang n (rexp_of n \\<phi>) - {[]}", "proof (induct \\<phi> arbitrary: n)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ x1 x2) =\n       lang n (rexp_of n (FQ x1 x2)) - {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2)) - {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "case (FQ a m)"], ["proof (state)\nthis:\n  wf_formula n (FQ a m)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ x1 x2) =\n       lang n (rexp_of n (FQ x1 x2)) - {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2)) - {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) =\n    lang n (rexp_of n (FQ a m)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "obtain w I where\n      *: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FQ a m)\" \"satisfies (w, I) (FQ a m)\"\n       \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) (FQ a m);\n         (w, I) \\<Turnstile> FQ a m; length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FQ a m) \\<and>\n           (w, I) \\<Turnstile> FQ a m}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) (FQ a m);\n         (w, I) \\<Turnstile> FQ a m; length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  (w, I) \\<Turnstile> FQ a m\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "with FQ(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FQ a m)\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  (w, I) \\<Turnstile> FQ a m\n  length I = n", "obtain p where p: \"p < length w\" \"I ! m = Inl p\" \"w ! p = a\""], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  (w, I) \\<Turnstile> FQ a m\n  length I = n\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p < length w; I ! m = Inl p; w ! p = a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: all_set_conv_all_nth split: sum.splits)"], ["proof (state)\nthis:\n  p < length w\n  I ! m = Inl p\n  w ! p = a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "with *(1)"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  w ! p = a", "have \"x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  w ! p = a\n\ngoal (1 subgoal):\n 1. x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))", "using id_take_nth_drop[of p \"enc (w, I)\"]"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  w ! p = a\n  p < length (enc (w, I)) \\<Longrightarrow>\n  enc (w, I) =\n  take p (enc (w, I)) @ enc (w, I) ! p # drop (Suc p) (enc (w, I))\n\ngoal (1 subgoal):\n 1. x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))", "by auto"], ["proof (state)\nthis:\n  x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from *(4) FQ(1) p(2)"], ["proof (chain)\npicking this:\n  length I = n\n  wf_formula n (FQ a m)\n  I ! m = Inl p", "have \"[enc_atom I p a] \\<in> lang n (Atom (AQ m a))\""], ["proof (prove)\nusing this:\n  length I = n\n  wf_formula n (FQ a m)\n  I ! m = Inl p\n\ngoal (1 subgoal):\n 1. [enc_atom I p a] \\<in> lang n (Atom (AQ m a))", "by (intro enc_atom_lang_AQ) auto"], ["proof (state)\nthis:\n  [enc_atom I p a] \\<in> lang n (Atom (AQ m a))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  [enc_atom I p a] \\<in> lang n (Atom (AQ m a))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from *(2,4)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n", "have \"take p (enc (w, I)) \\<in> lang n (Full)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n\ngoal (1 subgoal):\n 1. take p (enc (w, I)) \\<in> lang n Full", "by (auto intro!: enc_atom_\\<sigma> dest!: in_set_takeD)"], ["proof (state)\nthis:\n  take p (enc (w, I)) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  take p (enc (w, I)) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from *(2,4)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n", "have \"drop (Suc p) (enc (w, I)) \\<in> lang n (Full)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n\ngoal (1 subgoal):\n 1. drop (Suc p) (enc (w, I)) \\<in> lang n Full", "by (auto intro!: enc_atom_\\<sigma> dest!: in_set_dropD)"], ["proof (state)\nthis:\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "ultimately"], ["proof (chain)\npicking this:\n  x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n  [enc_atom I p a] \\<in> lang n (Atom (AQ m a))\n  take p (enc (w, I)) \\<in> lang n Full\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full", "show \"x \\<in> ?L n (FQ a m)\""], ["proof (prove)\nusing this:\n  x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n  [enc_atom I p a] \\<in> lang n (Atom (AQ m a))\n  take p (enc (w, I)) \\<in> lang n Full\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FQ a m)) - {[]}", "using *(1,2,4)"], ["proof (prove)\nusing this:\n  x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n  [enc_atom I p a] \\<in> lang n (Atom (AQ m a))\n  take p (enc (w, I)) \\<in> lang n Full\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FQ a m)) - {[]}", "unfolding rexp_of.simps lang.simps(6,9) rexp_of_list.simps Int_Diff\n        lang_ENC_formula[OF FQ, unfolded FOV.simps]"], ["proof (prove)\nusing this:\n  x = take p (enc (w, I)) @ [enc_atom I p a] @ drop (p + 1) (enc (w, I))\n  [enc_atom I p a] \\<in> lang n (Atom (AQ m a))\n  take p (enc (w, I)) \\<in> lang n Full\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n Full @@ lang n (Atom (AQ m a)) @@ lang n Full \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and> wf_interp_for_formula (w, I) (FQ a m)}", "by (auto elim: ssubst simp del: o_apply append.simps lang.simps)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "assume x: \"x \\<in> ?L n (FQ a m)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "with FQ"], ["proof (chain)\npicking this:\n  wf_formula n (FQ a m)\n  x \\<in> lang n (rexp_of n (FQ a m)) - {[]}", "obtain w I p where m: \"I ! m = Inl p\" \"m < length I\" and\n      wI: \"x = enc (w, I)\" \"length I = n\" \"wf_interp_for_formula (w, I) (FQ a m)\""], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>I p w.\n        \\<lbrakk>I ! m = Inl p; m < length I; x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FQ a m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps lang_ENC_formula[OF FQ, unfolded FOV.simps] Int_Diff"], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x \\<in> lang n (TIMES [Full, Atom (AQ m a), Full]) \\<inter>\n          {enc (w, I) |w I.\n           length I = n \\<and> wf_interp_for_formula (w, I) (FQ a m)}\n\ngoal (1 subgoal):\n 1. (\\<And>I p w.\n        \\<lbrakk>I ! m = Inl p; m < length I; x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FQ a m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (auto split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "hence \"wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FQ a m)\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FQ a m)", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (enc (w, I)), dec_interp n {m} (enc (w, I))) (FQ a m)", "using enc_wf_interp[OF FQ(1)[folded wI(2)]]"], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  wf_interp_for_formula (?w, I) (FQ a m) \\<Longrightarrow>\n  wf_interp_for_formula\n   (dec_word (enc (?w, I)),\n    dec_interp (length I) (FOV (FQ a m)) (enc (?w, I)))\n   (FQ a m)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (enc (w, I)), dec_interp n {m} (enc (w, I))) (FQ a m)", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FQ a m)) - {[]}", "obtain u1 u u2 where \"x = u1 @ u @ u2\" \"u \\<in> lang n (Atom (AQ m a))\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FQ a m)) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2; u \\<in> lang n (Atom (AQ m a))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n) @@\n          {[x] |x.\n           lookup (AQ m a) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          lists ((set \\<circ> \\<sigma> \\<Sigma>) n) \\<inter>\n          lang n (ENC n {m}) -\n          {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> {[x] |x.\n                  lookup (AQ m a) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using concE"], ["proof (prove)\nusing this:\n  x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n) @@\n          {[x] |x.\n           lookup (AQ m a) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          lists ((set \\<circ> \\<sigma> \\<Sigma>) n) \\<inter>\n          lang n (ENC n {m}) -\n          {[]}\n  \\<lbrakk>?w \\<in> ?A @@ ?B;\n   \\<And>u v.\n      \\<lbrakk>u \\<in> ?A; v \\<in> ?B; ?w = u @ v\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> {[x] |x.\n                  lookup (AQ m a) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (AQ m a))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "with FQ(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FQ a m)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (AQ m a))", "obtain v where v: \"x = u1 @ [v] @ u2\" \"snd v ! m\" \"fst v = a\""], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (AQ m a))\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>x = u1 @ [v] @ u2; snd v ! m; fst v = a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using AQ_D[of u n m a]"], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (AQ m a))\n  \\<lbrakk>u \\<in> lang n (Atom (AQ m a)); m < n;\n   a \\<in> set \\<Sigma>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. u = [x] \\<and> fst x = a \\<and> snd x ! m\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>x = u1 @ [v] @ u2; snd v ! m; fst v = a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "hence u: \"length u1 < length x\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. length u1 < length x", "by auto"], ["proof (state)\nthis:\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "{"], ["proof (state)\nthis:\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a", "have \"snd (x ! length u1) ! m\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. snd (x ! length u1) ! m", "by auto"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from m wI"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)", "have \"p < length x\" \"snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. p < length x &&& snd (x ! p) ! m", "by (fastforce intro: nth_mem split: sum.splits)+"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from m wI"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)", "have ex1: \"\\<exists>!p. p < length x \\<and> snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length x \\<and> snd (x ! p) ! m", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! m", "by (intro enc_unique) auto"], ["proof (state)\nthis:\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "ultimately"], ["proof (chain)\npicking this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m", "have \"p = length u1\""], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "using u"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. p = length u1", "by auto"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "}"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "note * = this"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a", "have \"v = enc (w, I) ! length u1\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. v = enc (w, I) ! length u1", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  enc (w, I) = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. v = enc (w, I) ! length u1", "by simp"], ["proof (state)\nthis:\n  v = enc (w, I) ! length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "hence \"a = w ! length u1\""], ["proof (prove)\nusing this:\n  v = enc (w, I) ! length u1\n\ngoal (1 subgoal):\n 1. a = w ! length u1", "using nth_map[OF u, of fst]"], ["proof (prove)\nusing this:\n  v = enc (w, I) ! length u1\n  map fst x ! length u1 = fst (x ! length u1)\n\ngoal (1 subgoal):\n 1. a = w ! length u1", "unfolding wI(1) v(3)[symmetric]"], ["proof (prove)\nusing this:\n  v = enc (w, I) ! length u1\n  map fst (enc (w, I)) ! length u1 = fst (enc (w, I) ! length u1)\n\ngoal (1 subgoal):\n 1. fst v = w ! length u1", "by auto"], ["proof (state)\nthis:\n  a = w ! length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "with * m wI"], ["proof (chain)\npicking this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  a = w ! length u1", "have \"satisfies (dec_word x, dec_interp n {m} x) (FQ a m)\""], ["proof (prove)\nusing this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  a = w ! length u1\n\ngoal (1 subgoal):\n 1. (dec_word x, dec_interp n {m} x) \\<Turnstile> FQ a m", "unfolding dec_word_enc[of w I, folded wI(1)]"], ["proof (prove)\nusing this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  a = w ! length u1\n\ngoal (1 subgoal):\n 1. (w, dec_interp n {m} x) \\<Turnstile> FQ a m", "by (auto simp del: enc.simps dest: dec_interp_not_Inr split: sum.splits)\n         (fastforce dest!: dec_interp_enc_Inl intro: nth_mem split: sum.splits)"], ["proof (state)\nthis:\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FQ a m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FQ a m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "from wI"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)", "have \"wf_word n x\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. wf_word n x", "unfolding wf_word"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n)", "by (auto intro!: enc_atom_\\<sigma>)"], ["proof (state)\nthis:\n  wf_word n x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "ultimately"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FQ a m)\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FQ a m\n  wf_word n x", "show \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FQ a m)\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FQ a m\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FQ a m)\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FQ a m\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FQ a m) \\<and>\n             (w, I) \\<Turnstile> FQ a m}", "using m wI(3)"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FQ a m)\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FQ a m\n  wf_word n x\n  I ! m = Inl p\n  m < length I\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FQ a m) \\<and>\n             (w, I) \\<Turnstile> FQ a m}", "by (auto simp del: enc.simps intro!: exI[of _ \"dec_word x\"] exI[of _ \"dec_interp n {m} x\"]\n        intro: sym[OF enc_dec[OF _ ballI[OF impI[OF enc_unique[of w I, folded wI(1)]]]]])"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FQ a m) =\n  lang n (rexp_of n (FQ a m)) - {[]}\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2)) - {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2)) - {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "case (FLess m m')"], ["proof (state)\nthis:\n  wf_formula n (FLess m m')\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2)) - {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n    lang n (rexp_of n (FLess m m')) - {[]}", "proof (cases \"m = m'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = m' \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n    lang n (rexp_of n (FLess m m')) - {[]}\n 2. m \\<noteq> m' \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n    lang n (rexp_of n (FLess m m')) - {[]}", "case False"], ["proof (state)\nthis:\n  m \\<noteq> m'\n\ngoal (2 subgoals):\n 1. m = m' \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n    lang n (rexp_of n (FLess m m')) - {[]}\n 2. m \\<noteq> m' \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n    lang n (rexp_of n (FLess m m')) - {[]}", "thus ?thesis"], ["proof (prove)\nusing this:\n  m \\<noteq> m'\n\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n    lang n (rexp_of n (FLess m m')) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "obtain w I where\n        *: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FLess m m')\" \"satisfies (w, I) (FLess m m')\"\n         \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) (FLess m m');\n         (w, I) \\<Turnstile> FLess m m'; length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FLess m m') \\<and>\n           (w, I) \\<Turnstile> FLess m m'}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) (FLess m m');\n         (w, I) \\<Turnstile> FLess m m'; length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  (w, I) \\<Turnstile> FLess m m'\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "with FLess(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FLess m m')\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  (w, I) \\<Turnstile> FLess m m'\n  length I = n", "obtain p q where pq: \"p < length w\" \"I ! m = Inl p\" \"q < length w\" \"I ! m' = Inl q\" \"p < q\""], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  (w, I) \\<Turnstile> FLess m m'\n  length I = n\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        \\<lbrakk>p < length w; I ! m = Inl p; q < length w; I ! m' = Inl q;\n         p < q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: all_set_conv_all_nth split: sum.splits)"], ["proof (state)\nthis:\n  p < length w\n  I ! m = Inl p\n  q < length w\n  I ! m' = Inl q\n  p < q\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "with *(1)"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  q < length w\n  I ! m' = Inl q\n  p < q", "have \"x = take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  q < length w\n  I ! m' = Inl q\n  p < q\n\ngoal (1 subgoal):\n 1. x =\n    take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))", "using id_take_nth_drop[of p \"enc (w, I)\"]"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  q < length w\n  I ! m' = Inl q\n  p < q\n  p < length (enc (w, I)) \\<Longrightarrow>\n  enc (w, I) =\n  take p (enc (w, I)) @ enc (w, I) ! p # drop (Suc p) (enc (w, I))\n\ngoal (1 subgoal):\n 1. x =\n    take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))", "by auto"], ["proof (state)\nthis:\n  x =\n  take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "also"], ["proof (state)\nthis:\n  x =\n  take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "have \"drop (p + 1) (enc (w, I)) = take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n        [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\" (is \"_ = ?LHS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (p + 1) (enc (w, I)) =\n    take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n    [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))", "using id_take_nth_drop[of \"q - p - 1\" \"drop (p + 1) (enc (w, I))\"] pq"], ["proof (prove)\nusing this:\n  q - p - 1 < length (drop (p + 1) (enc (w, I))) \\<Longrightarrow>\n  drop (p + 1) (enc (w, I)) =\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  drop (p + 1) (enc (w, I)) ! (q - p - 1) #\n  drop (Suc (q - p - 1)) (drop (p + 1) (enc (w, I)))\n  p < length w\n  I ! m = Inl p\n  q < length w\n  I ! m' = Inl q\n  p < q\n\ngoal (1 subgoal):\n 1. drop (p + 1) (enc (w, I)) =\n    take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n    [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))", "by auto"], ["proof (state)\nthis:\n  drop (p + 1) (enc (w, I)) =\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "finally"], ["proof (chain)\npicking this:\n  x =\n  take p (enc (w, I)) @\n  [enc_atom I p (w ! p)] @\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))", "have \"x = take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ ?LHS\""], ["proof (prove)\nusing this:\n  x =\n  take p (enc (w, I)) @\n  [enc_atom I p (w ! p)] @\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\n\ngoal (1 subgoal):\n 1. x =\n    take p (enc (w, I)) @\n    [enc_atom I p (w ! p)] @\n    take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n    [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))", "."], ["proof (state)\nthis:\n  x =\n  take p (enc (w, I)) @\n  [enc_atom I p (w ! p)] @\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  x =\n  take p (enc (w, I)) @\n  [enc_atom I p (w ! p)] @\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from *(2,4) FLess(1) pq(1,2)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  wf_formula n (FLess m m')\n  p < length w\n  I ! m = Inl p", "have \"[enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except m True))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  wf_formula n (FLess m m')\n  p < length w\n  I ! m = Inl p\n\ngoal (1 subgoal):\n 1. [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except m True))", "by (intro enc_atom_lang_Arbitrary_Except_True) auto"], ["proof (state)\nthis:\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except m True))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except m True))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from *(2,4) FLess(1) pq(3,4)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  wf_formula n (FLess m m')\n  q < length w\n  I ! m' = Inl q", "have \"[enc_atom I q (w ! q)] \\<in> lang n (Atom (Arbitrary_Except m' True))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  wf_formula n (FLess m m')\n  q < length w\n  I ! m' = Inl q\n\ngoal (1 subgoal):\n 1. [enc_atom I q (w ! q)] \\<in> lang n (Atom (Arbitrary_Except m' True))", "by (intro enc_atom_lang_Arbitrary_Except_True) auto"], ["proof (state)\nthis:\n  [enc_atom I q (w ! q)] \\<in> lang n (Atom (Arbitrary_Except m' True))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  [enc_atom I q (w ! q)] \\<in> lang n (Atom (Arbitrary_Except m' True))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from *(2,4)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n", "have \"take p (enc (w, I)) \\<in> lang n (Full)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. take p (enc (w, I)) \\<in> lang n Full", "by (auto intro!: enc_atom_\\<sigma> dest!: in_set_takeD)"], ["proof (state)\nthis:\n  take p (enc (w, I)) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  take p (enc (w, I)) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from *(2,4)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n", "have \"take (q - p - 1) (drop (Suc p) (enc (w, I))) \\<in> lang n (Full)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. take (q - p - 1) (drop (Suc p) (enc (w, I))) \\<in> lang n Full", "by (auto intro!: enc_atom_\\<sigma> dest!: in_set_dropD in_set_takeD)"], ["proof (state)\nthis:\n  take (q - p - 1) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  take (q - p - 1) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from *(2,4)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n", "have \"drop (q - p) (drop (Suc p) (enc (w, I))) \\<in> lang n (Full)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. drop (q - p) (drop (Suc p) (enc (w, I))) \\<in> lang n Full", "by (auto intro!: enc_atom_\\<sigma> dest!: in_set_dropD)"], ["proof (state)\nthis:\n  drop (q - p) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "ultimately"], ["proof (chain)\npicking this:\n  x =\n  take p (enc (w, I)) @\n  [enc_atom I p (w ! p)] @\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except m True))\n  [enc_atom I q (w ! q)] \\<in> lang n (Atom (Arbitrary_Except m' True))\n  take p (enc (w, I)) \\<in> lang n Full\n  take (q - p - 1) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n  drop (q - p) (drop (Suc p) (enc (w, I))) \\<in> lang n Full", "show \"x \\<in> ?L n (FLess m m')\""], ["proof (prove)\nusing this:\n  x =\n  take p (enc (w, I)) @\n  [enc_atom I p (w ! p)] @\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except m True))\n  [enc_atom I q (w ! q)] \\<in> lang n (Atom (Arbitrary_Except m' True))\n  take p (enc (w, I)) \\<in> lang n Full\n  take (q - p - 1) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n  drop (q - p) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FLess m m')) - {[]}", "using *(1,2,4)"], ["proof (prove)\nusing this:\n  x =\n  take p (enc (w, I)) @\n  [enc_atom I p (w ! p)] @\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except m True))\n  [enc_atom I q (w ! q)] \\<in> lang n (Atom (Arbitrary_Except m' True))\n  take p (enc (w, I)) \\<in> lang n Full\n  take (q - p - 1) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n  drop (q - p) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FLess m m')) - {[]}", "unfolding rexp_of.simps lang.simps(6,9) rexp_of_list.simps Int_Diff\n          lang_ENC_formula[OF FLess, unfolded FOV.simps] if_not_P[OF False]"], ["proof (prove)\nusing this:\n  x =\n  take p (enc (w, I)) @\n  [enc_atom I p (w ! p)] @\n  take (q - p - 1) (drop (p + 1) (enc (w, I))) @\n  [enc_atom I q (w ! q)] @ drop (q - p) (drop (p + 1) (enc (w, I)))\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except m True))\n  [enc_atom I q (w ! q)] \\<in> lang n (Atom (Arbitrary_Except m' True))\n  take p (enc (w, I)) \\<in> lang n Full\n  take (q - p - 1) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n  drop (q - p) (drop (Suc p) (enc (w, I))) \\<in> lang n Full\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n Full @@\n            lang n (Atom (Arbitrary_Except m True)) @@\n            lang n Full @@\n            lang n (Atom (Arbitrary_Except m' True)) @@ lang n Full \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and> wf_interp_for_formula (w, I) (FLess m m')}", "by (auto elim: ssubst simp del: o_apply append.simps lang.simps)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "assume x: \"x \\<in> ?L n (FLess m m')\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "with FLess"], ["proof (chain)\npicking this:\n  wf_formula n (FLess m m')\n  x \\<in> lang n (rexp_of n (FLess m m')) - {[]}", "obtain w I where\n        wI: \"x = enc (w, I)\" \"length I = n\" \"wf_interp_for_formula (w, I) (FLess m m')\""], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FLess m m')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps lang_ENC_formula[OF FLess, unfolded FOV.simps] Int_Diff\n          if_not_P[OF False]"], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x \\<in> lang n\n           (TIMES\n             [Full, Atom (Arbitrary_Except m True), Full,\n              Atom (Arbitrary_Except m' True), Full]) \\<inter>\n          {enc (w, I) |w I.\n           length I = n \\<and> wf_interp_for_formula (w, I) (FLess m m')}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FLess m m')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce split: sum.splits)"], ["proof (state)\nthis:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "with FLess"], ["proof (chain)\npicking this:\n  wf_formula n (FLess m m')\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "obtain p p' where m: \"I ! m = Inl p\" \"m < length I\" \"I ! m' = Inl p'\" \"m' < length I\""], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. (\\<And>p p'.\n        \\<lbrakk>I ! m = Inl p; m < length I; I ! m' = Inl p';\n         m' < length I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "with wI"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I", "have \"wf_interp_for_formula (dec_word x, dec_interp n {m, m'} x) (FLess m m')\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (dec_word x, dec_interp n {m, m'} x) (FLess m m')", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (enc (w, I)), dec_interp n {m, m'} (enc (w, I))) (FLess m m')", "using enc_wf_interp[OF FLess(1)[folded wI(2)]]"], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  wf_interp_for_formula (?w, I) (FLess m m') \\<Longrightarrow>\n  wf_interp_for_formula\n   (dec_word (enc (?w, I)),\n    dec_interp (length I) (FOV (FLess m m')) (enc (?w, I)))\n   (FLess m m')\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (enc (w, I)), dec_interp n {m, m'} (enc (w, I))) (FLess m m')", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula (dec_word x, dec_interp n {m, m'} x) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  wf_interp_for_formula (dec_word x, dec_interp n {m, m'} x) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FLess m m')) - {[]}", "obtain u1 u u2 u' u3 where \"x = u1 @ u @ u2 @ u' @ u3\"\n        \"u \\<in> lang n (Atom (Arbitrary_Except m True))\" \n        \"u' \\<in> lang n (Atom (Arbitrary_Except m' True))\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2 u' u3.\n        \\<lbrakk>x = u1 @ u @ u2 @ u' @ u3;\n         u \\<in> lang n (Atom (Arbitrary_Except m True));\n         u' \\<in> lang n (Atom (Arbitrary_Except m' True))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps rexp_of_list.simps if_not_P[OF False]"], ["proof (prove)\nusing this:\n  x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n) @@\n          {[x] |x.\n           lookup (Arbitrary_Except m True) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          lists ((set \\<circ> \\<sigma> \\<Sigma>) n) @@\n          {[x] |x.\n           lookup (Arbitrary_Except m' True) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          lists ((set \\<circ> \\<sigma> \\<Sigma>) n) \\<inter>\n          lang n (ENC n {m, m'}) -\n          {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2 u' u3.\n        \\<lbrakk>x = u1 @ u @ u2 @ u' @ u3;\n         u \\<in> {[x] |x.\n                  lookup (Arbitrary_Except m True) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n};\n         u' \\<in> {[x] |x.\n                   lookup (Arbitrary_Except m' True) x \\<and>\n                   x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using concE"], ["proof (prove)\nusing this:\n  x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n) @@\n          {[x] |x.\n           lookup (Arbitrary_Except m True) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          lists ((set \\<circ> \\<sigma> \\<Sigma>) n) @@\n          {[x] |x.\n           lookup (Arbitrary_Except m' True) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          lists ((set \\<circ> \\<sigma> \\<Sigma>) n) \\<inter>\n          lang n (ENC n {m, m'}) -\n          {[]}\n  \\<lbrakk>?w \\<in> ?A @@ ?B;\n   \\<And>u v.\n      \\<lbrakk>u \\<in> ?A; v \\<in> ?B; ?w = u @ v\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2 u' u3.\n        \\<lbrakk>x = u1 @ u @ u2 @ u' @ u3;\n         u \\<in> {[x] |x.\n                  lookup (Arbitrary_Except m True) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n};\n         u' \\<in> {[x] |x.\n                   lookup (Arbitrary_Except m' True) x \\<and>\n                   x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x = u1 @ u @ u2 @ u' @ u3\n  u \\<in> lang n (Atom (Arbitrary_Except m True))\n  u' \\<in> lang n (Atom (Arbitrary_Except m' True))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "with FLess(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FLess m m')\n  x = u1 @ u @ u2 @ u' @ u3\n  u \\<in> lang n (Atom (Arbitrary_Except m True))\n  u' \\<in> lang n (Atom (Arbitrary_Except m' True))", "obtain v v' where v: \"x = u1 @ [v] @ u2 @ [v'] @ u3\" \"snd v ! m\" \"snd v' ! m'\""], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x = u1 @ u @ u2 @ u' @ u3\n  u \\<in> lang n (Atom (Arbitrary_Except m True))\n  u' \\<in> lang n (Atom (Arbitrary_Except m' True))\n\ngoal (1 subgoal):\n 1. (\\<And>v v'.\n        \\<lbrakk>x = u1 @ [v] @ u2 @ [v'] @ u3; snd v ! m;\n         snd v' ! m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Arbitrary_ExceptD[of u n m True] Arbitrary_ExceptD[of u' n m' True]"], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x = u1 @ u @ u2 @ u' @ u3\n  u \\<in> lang n (Atom (Arbitrary_Except m True))\n  u' \\<in> lang n (Atom (Arbitrary_Except m' True))\n  \\<lbrakk>u \\<in> lang n (Atom (Arbitrary_Except m True)); m < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. u = [x] \\<and> snd x ! m = True\n  \\<lbrakk>u' \\<in> lang n (Atom (Arbitrary_Except m' True));\n   m' < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. u' = [x] \\<and> snd x ! m' = True\n\ngoal (1 subgoal):\n 1. (\\<And>v v'.\n        \\<lbrakk>x = u1 @ [v] @ u2 @ [v'] @ u3; snd v ! m;\n         snd v' ! m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "hence u: \"length u1 < length x\" and u': \"Suc (length u1 + length u2) < length x\" (is \"?u' < _\")"], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n\ngoal (1 subgoal):\n 1. length u1 < length x &&& Suc (length u1 + length u2) < length x", "by auto"], ["proof (state)\nthis:\n  length u1 < length x\n  Suc (length u1 + length u2) < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "{"], ["proof (state)\nthis:\n  length u1 < length x\n  Suc (length u1 + length u2) < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'", "have \"snd (x ! length u1) ! m\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n\ngoal (1 subgoal):\n 1. snd (x ! length u1) ! m", "by auto"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from m wI"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have \"p < length x\" \"snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. p < length x &&& snd (x ! p) ! m", "by (fastforce intro: nth_mem split: sum.splits)+"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from m wI"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have ex1: \"\\<exists>!p. p < length x \\<and> snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length x \\<and> snd (x ! p) ! m", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! m", "by (intro enc_unique) auto"], ["proof (state)\nthis:\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "ultimately"], ["proof (chain)\npicking this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m", "have \"p = length u1\""], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "using u"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. p = length u1", "by auto"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "}"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "{"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'", "have \"snd (x ! ?u') ! m'\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n\ngoal (1 subgoal):\n 1. snd (x ! Suc (length u1 + length u2)) ! m'", "by (auto simp: nth_append)"], ["proof (state)\nthis:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from m wI"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have \"p' < length x\" \"snd (x ! p') ! m'\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. p' < length x &&& snd (x ! p') ! m'", "by (fastforce intro: nth_mem split: sum.splits)+"], ["proof (state)\nthis:\n  p' < length x\n  snd (x ! p') ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  p' < length x\n  snd (x ! p') ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from m wI"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have ex1: \"\\<exists>!p. p < length x \\<and> snd (x ! p) ! m'\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length x \\<and> snd (x ! p) ! m'", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! m'", "by (intro enc_unique) auto"], ["proof (state)\nthis:\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "ultimately"], ["proof (chain)\npicking this:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n  p' < length x\n  snd (x ! p') ! m'\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m'", "have \"p' = ?u'\""], ["proof (prove)\nusing this:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n  p' < length x\n  snd (x ! p') ! m'\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m'\n\ngoal (1 subgoal):\n 1. p' = Suc (length u1 + length u2)", "using u'"], ["proof (prove)\nusing this:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n  p' < length x\n  snd (x ! p') ! m'\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m'\n  Suc (length u1 + length u2) < length x\n\ngoal (1 subgoal):\n 1. p' = Suc (length u1 + length u2)", "by auto"], ["proof (state)\nthis:\n  p' = Suc (length u1 + length u2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "}"], ["proof (state)\nthis:\n  p' = Suc (length u1 + length u2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "note * = this \\<open>p = length u1\\<close>"], ["proof (state)\nthis:\n  p' = Suc (length u1 + length u2)\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "with * m wI"], ["proof (chain)\npicking this:\n  p' = Suc (length u1 + length u2)\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  p' = Suc (length u1 + length u2)\n  p = length u1", "have \"satisfies (dec_word x, dec_interp n {m, m'} x) (FLess m m')\""], ["proof (prove)\nusing this:\n  p' = Suc (length u1 + length u2)\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  p' = Suc (length u1 + length u2)\n  p = length u1\n\ngoal (1 subgoal):\n 1. (dec_word x, dec_interp n {m, m'} x) \\<Turnstile> FLess m m'", "unfolding dec_word_enc[of w I, folded wI(1)]"], ["proof (prove)\nusing this:\n  p' = Suc (length u1 + length u2)\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  p' = Suc (length u1 + length u2)\n  p = length u1\n\ngoal (1 subgoal):\n 1. (w, dec_interp n {m, m'} x) \\<Turnstile> FLess m m'", "by (auto simp del: enc.simps dest: dec_interp_not_Inr split: sum.splits)\n           (fastforce dest!: dec_interp_enc_Inl intro: nth_mem split: sum.splits)"], ["proof (state)\nthis:\n  (dec_word x, dec_interp n {m, m'} x) \\<Turnstile> FLess m m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "moreover"], ["proof (state)\nthis:\n  (dec_word x, dec_interp n {m, m'} x) \\<Turnstile> FLess m m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "from wI"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have \"wf_word n x\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. wf_word n x", "unfolding wf_word"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n)", "by (auto intro!: enc_atom_\\<sigma>)"], ["proof (state)\nthis:\n  wf_word n x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m')) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "ultimately"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m, m'} x) (FLess m m')\n  (dec_word x, dec_interp n {m, m'} x) \\<Turnstile> FLess m m'\n  wf_word n x", "show \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m, m'} x) (FLess m m')\n  (dec_word x, dec_interp n {m, m'} x) \\<Turnstile> FLess m m'\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m, m'} x) (FLess m m')\n  (dec_word x, dec_interp n {m, m'} x) \\<Turnstile> FLess m m'\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FLess m m') \\<and>\n             (w, I) \\<Turnstile> FLess m m'}", "using m wI(3)"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m, m'} x) (FLess m m')\n  (dec_word x, dec_interp n {m, m'} x) \\<Turnstile> FLess m m'\n  wf_word n x\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FLess m m') \\<and>\n             (w, I) \\<Turnstile> FLess m m'}", "by (auto simp del: enc.simps intro!: exI[of _ \"dec_word x\"] exI[of _ \"dec_interp n {m, m'} x\"]\n          intro: sym[OF enc_dec[OF _ ballI[OF impI[OF enc_unique[of w I, folded wI(1)]]]]])"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n  lang n (rexp_of n (FLess m m')) - {[]}\n\ngoal (1 subgoal):\n 1. m = m' \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n    lang n (rexp_of n (FLess m m')) - {[]}", "qed (simp add: lang\\<^sub>M\\<^sub>2\\<^sub>L_def del: o_apply)"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FLess m m') =\n  lang n (rexp_of n (FLess m m')) - {[]}\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "case (FIn m M)"], ["proof (state)\nthis:\n  wf_formula n (FIn m M)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) =\n    lang n (rexp_of n (FIn m M)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "obtain w I where\n      *: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FIn m M)\" \"satisfies (w, I) (FIn m M)\"\n       \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) (FIn m M);\n         (w, I) \\<Turnstile> FIn m M; length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FIn m M) \\<and>\n           (w, I) \\<Turnstile> FIn m M}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) (FIn m M);\n         (w, I) \\<Turnstile> FIn m M; length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  (w, I) \\<Turnstile> FIn m M\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "with FIn(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FIn m M)\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  (w, I) \\<Turnstile> FIn m M\n  length I = n", "obtain p P where p: \"p < length w\" \"I ! m = Inl p\" \"I ! M = Inr P\" \"p \\<in> P\""], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  (w, I) \\<Turnstile> FIn m M\n  length I = n\n\ngoal (1 subgoal):\n 1. (\\<And>p P.\n        \\<lbrakk>p < length w; I ! m = Inl p; I ! M = Inr P;\n         p \\<in> P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: all_set_conv_all_nth split: sum.splits)"], ["proof (state)\nthis:\n  p < length w\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "with *(1)"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P", "have \"x = take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. x =\n    take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))", "using id_take_nth_drop[of p \"enc (w, I)\"]"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  p < length w\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P\n  p < length (enc (w, I)) \\<Longrightarrow>\n  enc (w, I) =\n  take p (enc (w, I)) @ enc (w, I) ! p # drop (Suc p) (enc (w, I))\n\ngoal (1 subgoal):\n 1. x =\n    take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))", "by auto"], ["proof (state)\nthis:\n  x =\n  take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  x =\n  take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from *(2,4) FIn(1) p"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n  wf_formula n (FIn m M)\n  p < length w\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P", "have \"[enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except2 m M))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n  wf_formula n (FIn m M)\n  p < length w\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except2 m M))", "by (intro enc_atom_lang_Arbitrary_Except2) auto"], ["proof (state)\nthis:\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except2 m M))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except2 m M))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from *(2,4)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n", "have \"take p (enc (w, I)) \\<in> lang n (Full)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n\ngoal (1 subgoal):\n 1. take p (enc (w, I)) \\<in> lang n Full", "by (auto intro!: enc_atom_\\<sigma> dest!: in_set_takeD)"], ["proof (state)\nthis:\n  take p (enc (w, I)) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  take p (enc (w, I)) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from *(2,4)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n", "have \"drop (Suc p) (enc (w, I)) \\<in> lang n (Full)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n\ngoal (1 subgoal):\n 1. drop (Suc p) (enc (w, I)) \\<in> lang n Full", "by (auto intro!: enc_atom_\\<sigma> dest!: in_set_dropD)"], ["proof (state)\nthis:\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "ultimately"], ["proof (chain)\npicking this:\n  x =\n  take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  take p (enc (w, I)) \\<in> lang n Full\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full", "show \"x \\<in> ?L n (FIn m M)\""], ["proof (prove)\nusing this:\n  x =\n  take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  take p (enc (w, I)) \\<in> lang n Full\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FIn m M)) - {[]}", "using *(1,2,4)"], ["proof (prove)\nusing this:\n  x =\n  take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  take p (enc (w, I)) \\<in> lang n Full\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FIn m M)) - {[]}", "unfolding rexp_of.simps lang.simps(6,9) rexp_of_list.simps Int_Diff\n        lang_ENC_formula[OF FIn, unfolded FOV.simps]"], ["proof (prove)\nusing this:\n  x =\n  take p (enc (w, I)) @ [enc_atom I p (w ! p)] @ drop (p + 1) (enc (w, I))\n  [enc_atom I p (w ! p)] \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  take p (enc (w, I)) \\<in> lang n Full\n  drop (Suc p) (enc (w, I)) \\<in> lang n Full\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n Full @@\n            lang n (Atom (Arbitrary_Except2 m M)) @@ lang n Full \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and> wf_interp_for_formula (w, I) (FIn m M)}", "by (auto elim: ssubst simp del: o_apply append.simps lang.simps)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "assume x: \"x \\<in> ?L n (FIn m M)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "with FIn"], ["proof (chain)\npicking this:\n  wf_formula n (FIn m M)\n  x \\<in> lang n (rexp_of n (FIn m M)) - {[]}", "obtain w I where  wI: \"x = enc (w, I)\" \"length I = n\" \"wf_interp_for_formula (w, I) (FIn m M)\""], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FIn m M)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps lang_ENC_formula[OF FIn, unfolded FOV.simps] Int_Diff"], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x \\<in> lang n (TIMES [Full, Atom (Arbitrary_Except2 m M), Full]) \\<inter>\n          {enc (w, I) |w I.\n           length I = n \\<and> wf_interp_for_formula (w, I) (FIn m M)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FIn m M)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce split: sum.splits)"], ["proof (state)\nthis:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "with FIn"], ["proof (chain)\npicking this:\n  wf_formula n (FIn m M)\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)", "obtain p P where m: \"I ! m = Inl p\" \"m < length I\" \"I ! M = Inr P\" \"M < length I\""], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. (\\<And>p P.\n        \\<lbrakk>I ! m = Inl p; m < length I; I ! M = Inr P;\n         M < length I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "with wI"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I", "have \"wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FIn m M)\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FIn m M)", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (enc (w, I)), dec_interp n {m} (enc (w, I))) (FIn m M)", "using enc_wf_interp[OF FIn(1)[folded wI(2)]]"], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  wf_interp_for_formula (?w, I) (FIn m M) \\<Longrightarrow>\n  wf_interp_for_formula\n   (dec_word (enc (?w, I)),\n    dec_interp (length I) (FOV (FIn m M)) (enc (?w, I)))\n   (FIn m M)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (enc (w, I)), dec_interp n {m} (enc (w, I))) (FIn m M)", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FIn m M)) - {[]}", "obtain u1 u u2 where \"x = u1 @ u @ u2\"\n      \"u \\<in> lang n (Atom (Arbitrary_Except2 m M))\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FIn m M)) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> lang n (Atom (Arbitrary_Except2 m M))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n) @@\n          {[x] |x.\n           lookup (Arbitrary_Except2 m M) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          lists ((set \\<circ> \\<sigma> \\<Sigma>) n) \\<inter>\n          lang n (ENC n {m}) -\n          {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> {[x] |x.\n                  lookup (Arbitrary_Except2 m M) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using concE"], ["proof (prove)\nusing this:\n  x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n) @@\n          {[x] |x.\n           lookup (Arbitrary_Except2 m M) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          lists ((set \\<circ> \\<sigma> \\<Sigma>) n) \\<inter>\n          lang n (ENC n {m}) -\n          {[]}\n  \\<lbrakk>?w \\<in> ?A @@ ?B;\n   \\<And>u v.\n      \\<lbrakk>u \\<in> ?A; v \\<in> ?B; ?w = u @ v\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> {[x] |x.\n                  lookup (Arbitrary_Except2 m M) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (Arbitrary_Except2 m M))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "with FIn(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FIn m M)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (Arbitrary_Except2 m M))", "obtain v where v: \"x = u1 @ [v] @ u2\" \"snd v ! m\" \"snd v ! M\""], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (Arbitrary_Except2 m M))\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>x = u1 @ [v] @ u2; snd v ! m; snd v ! M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Arbitrary_Except2D[of u n m M]"], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  \\<lbrakk>u \\<in> lang n (Atom (Arbitrary_Except2 m M)); m < n;\n   M < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. u = [x] \\<and> snd x ! m \\<and> snd x ! M\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>x = u1 @ [v] @ u2; snd v ! m; snd v ! M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M", "have u: \"length u1 < length x\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n\ngoal (1 subgoal):\n 1. length u1 < length x", "by auto"], ["proof (state)\nthis:\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "{"], ["proof (state)\nthis:\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M", "have \"snd (x ! length u1) ! m\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n\ngoal (1 subgoal):\n 1. snd (x ! length u1) ! m", "by auto"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from m wI"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)", "have \"p < length x\" \"snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. p < length x &&& snd (x ! p) ! m", "by (fastforce intro: nth_mem split: sum.splits)+"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from m wI"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)", "have ex1: \"\\<exists>!p. p < length x \\<and> snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length x \\<and> snd (x ! p) ! m", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  enc (w, I) = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<exists>!p. p < length (enc (w, I)) \\<and> snd (enc (w, I) ! p) ! m", "by (intro enc_unique) auto"], ["proof (state)\nthis:\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "ultimately"], ["proof (chain)\npicking this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m", "have \"p = length u1\""], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "using u"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. p < length x \\<and> snd (x ! p) ! m\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. p = length u1", "by auto"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "}"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "note * = this"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M", "have \"v = enc (w, I) ! length u1\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n\ngoal (1 subgoal):\n 1. v = enc (w, I) ! length u1", "unfolding wI(1)"], ["proof (prove)\nusing this:\n  enc (w, I) = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n\ngoal (1 subgoal):\n 1. v = enc (w, I) ! length u1", "by simp"], ["proof (state)\nthis:\n  v = enc (w, I) ! length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "with v(3) m(3,4) u wI(1)"], ["proof (chain)\npicking this:\n  snd v ! M\n  I ! M = Inr P\n  M < length I\n  length u1 < length x\n  x = enc (w, I)\n  v = enc (w, I) ! length u1", "have \"length u1 \\<in> P\""], ["proof (prove)\nusing this:\n  snd v ! M\n  I ! M = Inr P\n  M < length I\n  length u1 < length x\n  x = enc (w, I)\n  v = enc (w, I) ! length u1\n\ngoal (1 subgoal):\n 1. length u1 \\<in> P", "by auto"], ["proof (state)\nthis:\n  length u1 \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "with * m wI"], ["proof (chain)\npicking this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  length u1 \\<in> P", "have \"satisfies (dec_word x, dec_interp n {m} x) (FIn m M)\""], ["proof (prove)\nusing this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  length u1 \\<in> P\n\ngoal (1 subgoal):\n 1. (dec_word x, dec_interp n {m} x) \\<Turnstile> FIn m M", "unfolding dec_word_enc[of w I, folded wI(1)]"], ["proof (prove)\nusing this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  length u1 \\<in> P\n\ngoal (1 subgoal):\n 1. (w, dec_interp n {m} x) \\<Turnstile> FIn m M", "by (auto simp del: enc.simps dest: dec_interp_not_Inr dec_interp_not_Inl split: sum.splits)\n         (auto simp del: enc.simps dest!: dec_interp_enc_Inl dec_interp_enc_Inr dest: nth_mem split: sum.splits)"], ["proof (state)\nthis:\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FIn m M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FIn m M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "from wI"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)", "have \"wf_word n x\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. wf_word n x", "unfolding wf_word"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n)", "by (auto intro!: enc_atom_\\<sigma>)"], ["proof (state)\nthis:\n  wf_word n x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "ultimately"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FIn m M)\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FIn m M\n  wf_word n x", "show \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FIn m M)\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FIn m M\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FIn m M)\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FIn m M\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FIn m M) \\<and>\n             (w, I) \\<Turnstile> FIn m M}", "using m wI(3)"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (dec_word x, dec_interp n {m} x) (FIn m M)\n  (dec_word x, dec_interp n {m} x) \\<Turnstile> FIn m M\n  wf_word n x\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FIn m M) \\<and>\n             (w, I) \\<Turnstile> FIn m M}", "by (auto simp del: enc.simps intro!: exI[of _ \"dec_word x\"] exI[of _ \"dec_interp n {m} x\"]\n        intro: sym[OF enc_dec[OF _ ballI[OF impI[OF enc_unique[of w I, folded wI(1)]]]]])"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FIn m M) =\n  lang n (rexp_of n (FIn m M)) - {[]}\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "case (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang\\<^sub>M\\<^sub>2\\<^sub>L ?n \\<phi>\\<^sub>1 =\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>1) - {[]}\n  wf_formula ?n \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang\\<^sub>M\\<^sub>2\\<^sub>L ?n \\<phi>\\<^sub>2 =\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>2) - {[]}\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "from FOr(3)"], ["proof (chain)\npicking this:\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have IH1: \"lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 = lang n (rexp_of n \\<phi>\\<^sub>1) - {[]}\""], ["proof (prove)\nusing this:\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 =\n    lang n (rexp_of n \\<phi>\\<^sub>1) - {[]}", "by (intro FOr(1)) auto"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 =\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]}\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "from FOr(3)"], ["proof (chain)\npicking this:\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have IH2: \"lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 = lang n (rexp_of n \\<phi>\\<^sub>2) - {[]}\""], ["proof (prove)\nusing this:\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 =\n    lang n (rexp_of n \\<phi>\\<^sub>2) - {[]}", "by (intro FOr(2)) auto"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 =\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]}\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) =\n    lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "thus \"x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}", "using lang\\<^sub>M\\<^sub>2\\<^sub>L_FOr[OF FOr(3)]"], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  \\<subseteq> (lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<union>\n               lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2) \\<inter>\n              {enc (w, I) |w I.\n               length I = n \\<and>\n               wf_interp_for_formula (w, I)\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}", "unfolding lang_ENC_formula[OF FOr(3)] rexp_of.simps lang.simps\n        IH1 IH2 Int_Diff"], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  \\<subseteq> (lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} \\<union>\n               (lang n (rexp_of n \\<phi>\\<^sub>2) - {[]})) \\<inter>\n              {enc (w, I) |w I.\n               length I = n \\<and>\n               wf_interp_for_formula (w, I)\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. x \\<in> (lang n (rexp_of n \\<phi>\\<^sub>1) \\<union>\n             lang n (rexp_of n \\<phi>\\<^sub>2)) \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I)\n              (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "assume \"x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}", "obtain w I where or: \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<or> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\" and wI: \"x = enc (w, I)\" \"length I = n\"\n      \"wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<or>\n                 x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2;\n         x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I)\n          (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang_ENC_formula[OF FOr(3)] rexp_of.simps lang.simps IH1 IH2 Int_Diff"], ["proof (prove)\nusing this:\n  x \\<in> (lang n (rexp_of n \\<phi>\\<^sub>1) \\<union>\n           lang n (rexp_of n \\<phi>\\<^sub>2)) \\<inter>\n          {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} \\<or>\n                 x \\<in> lang n (rexp_of n \\<phi>\\<^sub>2) - {[]};\n         x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I)\n          (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<or>\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have \"satisfies (w, I) \\<phi>\\<^sub>1 \\<or> satisfies (w, I) \\<phi>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "proof (intro mp[OF disj_mono[OF impI impI] or])"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n 2. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1\n\ngoal (2 subgoals):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n 2. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "with wI(2,3) FOr(3)"], ["proof (chain)\npicking this:\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1", "show \"satisfies (w, I) \\<phi>\\<^sub>1\""], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def wI(1) wf_interp_for_formula_FOr"], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  enc (w, I)\n  \\<in> {enc (w, I) |w I.\n         length I = n \\<and>\n         wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>1}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "by (auto simp del: enc.simps dest!: iffD2[OF enc_welldef[of _ _ _ _ \\<phi>\\<^sub>1]])"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "with wI(2,3) FOr(3)"], ["proof (chain)\npicking this:\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2", "show \"satisfies (w, I) \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def wI(1) wf_interp_for_formula_FOr"], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  enc (w, I)\n  \\<in> {enc (w, I) |w I.\n         length I = n \\<and>\n         wf_interp_for_formula (w, I) \\<phi>\\<^sub>2 \\<and>\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>2}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "by (auto simp del: enc.simps dest!: iffD2[OF enc_welldef[of _ _ _ _ \\<phi>\\<^sub>2]])"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "with wI"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "show \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n             (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I)\n              (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<and>\n             (w, I) \\<Turnstile> FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2}", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) =\n  lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "case (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang\\<^sub>M\\<^sub>2\\<^sub>L ?n \\<phi>\\<^sub>1 =\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>1) - {[]}\n  wf_formula ?n \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang\\<^sub>M\\<^sub>2\\<^sub>L ?n \\<phi>\\<^sub>2 =\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>2) - {[]}\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "from FAnd(3)"], ["proof (chain)\npicking this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have IH1: \"lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 = lang n (rexp_of n \\<phi>\\<^sub>1) - {[]}\""], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 =\n    lang n (rexp_of n \\<phi>\\<^sub>1) - {[]}", "by (intro FAnd(1)) auto"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 =\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]}\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "from FAnd(3)"], ["proof (chain)\npicking this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have IH2: \"lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 = lang n (rexp_of n \\<phi>\\<^sub>2) - {[]}\""], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 =\n    lang n (rexp_of n \\<phi>\\<^sub>2) - {[]}", "by (intro FAnd(2)) auto"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 =\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]}\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1) - {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2) - {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) =\n    lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "thus \"x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}", "using lang\\<^sub>M\\<^sub>2\\<^sub>L_FAnd[OF FAnd(3)]"], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  \\<subseteq> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<inter>\n              lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<inter>\n              {enc (w, I) |w I.\n               length I = n \\<and>\n               wf_interp_for_formula (w, I)\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}", "unfolding lang_ENC_formula[OF FAnd(3)] rexp_of.simps\n        rexp_of_list.simps lang.simps IH1 IH2 Int_Diff"], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  \\<subseteq> (lang n (rexp_of n \\<phi>\\<^sub>1) - {[]}) \\<inter>\n              (lang n (rexp_of n \\<phi>\\<^sub>2) - {[]}) \\<inter>\n              {enc (w, I) |w I.\n               length I = n \\<and>\n               wf_interp_for_formula (w, I)\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n \\<phi>\\<^sub>1) \\<inter>\n            (lang n (rexp_of n \\<phi>\\<^sub>2) \\<inter>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I)\n               (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)})", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "assume \"x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}", "obtain w I where \"and\": \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<and> x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\" and wI: \"x = enc (w, I)\" \"length I = n\"\n      \"wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                          \\<phi>\\<^sub>1 \\<and>\n                 x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2;\n         x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I)\n          (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang_ENC_formula[OF FAnd(3)] rexp_of.simps rexp_of_list.simps lang.simps IH1 IH2\n        Int_Diff"], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n \\<phi>\\<^sub>1) \\<inter>\n          (lang n (rexp_of n \\<phi>\\<^sub>2) \\<inter>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I)\n             (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)})\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} \\<and>\n                 x \\<in> lang n (rexp_of n \\<phi>\\<^sub>2) - {[]};\n         x = enc (w, I); length I = n;\n         wf_interp_for_formula (w, I)\n          (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<and>\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have \"satisfies (w, I) \\<phi>\\<^sub>1 \\<and> satisfies (w, I) \\<phi>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "proof (intro mp[OF conj_mono[OF impI impI] \"and\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n 2. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1\n\ngoal (2 subgoals):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n 2. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "with wI(2,3) FAnd(3)"], ["proof (chain)\npicking this:\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1", "show \"satisfies (w, I) \\<phi>\\<^sub>1\""], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def wI(1) wf_interp_for_formula_FAnd"], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  enc (w, I)\n  \\<in> {enc (w, I) |w I.\n         length I = n \\<and>\n         wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>1}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "by (auto simp del: enc.simps dest!: iffD2[OF enc_welldef[of _ _ _ _ \\<phi>\\<^sub>1]])"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "with wI(2,3) FAnd(3)"], ["proof (chain)\npicking this:\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2", "show \"satisfies (w, I) \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def wI(1) wf_interp_for_formula_FAnd"], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  enc (w, I)\n  \\<in> {enc (w, I) |w I.\n         length I = n \\<and>\n         wf_interp_for_formula (w, I) \\<phi>\\<^sub>2 \\<and>\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>2}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "by (auto simp del: enc.simps dest!: iffD2[OF enc_welldef[of _ _ _ _ \\<phi>\\<^sub>2]])"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) -\n               {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "with wI"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "show \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n             (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I)\n              (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<and>\n             (w, I) \\<Turnstile> FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2}", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) =\n  lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]}\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "case (FNot \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang\\<^sub>M\\<^sub>2\\<^sub>L ?n \\<phi> =\n  lang ?n (rexp_of ?n \\<phi>) - {[]}\n  wf_formula n (FNot \\<phi>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "hence IH: \"?L n \\<phi> =  lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang\\<^sub>M\\<^sub>2\\<^sub>L ?n \\<phi> =\n  lang ?n (rexp_of ?n \\<phi>) - {[]}\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n \\<phi>) - {[]} = lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>", "by simp"], ["proof (state)\nthis:\n  lang n (rexp_of n \\<phi>) - {[]} = lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n    lang n (rexp_of n (FNot \\<phi>)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "obtain w I where\n      *: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) \\<phi>\" \"length I = n\" \"length w > 0\"\n       and unsat: \"\\<not> (satisfies (w, I) \\<phi>)\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) \\<phi>;\n         length I = n; 0 < length w;\n         \\<not> (w, I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FNot \\<phi>) \\<and>\n           (w, I) \\<Turnstile> FNot \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) \\<phi>;\n         length I = n; 0 < length w;\n         \\<not> (w, I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  0 < length w\n  \\<not> (w, I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "{"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  0 < length w\n  \\<not> (w, I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "assume \"x \\<in> ?L n \\<phi>\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n \\<phi>) - {[]}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "with IH"], ["proof (chain)\npicking this:\n  lang n (rexp_of n \\<phi>) - {[]} = lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n  x \\<in> lang n (rexp_of n \\<phi>) - {[]}", "have \"satisfies (w, I) \\<phi>\""], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>) - {[]} = lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n  x \\<in> lang n (rexp_of n \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>", "using enc_welldef[of _ _ w I \\<phi>, OF _ _ _ *(2)] FNot(2)"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>) - {[]} = lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n  x \\<in> lang n (rexp_of n \\<phi>) - {[]}\n  \\<lbrakk>enc (?w, ?I) = enc (w, I); wf_formula (length ?I) \\<phi>;\n   wf_interp_for_formula (?w, ?I) \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((?w, ?I) \\<Turnstile> \\<phi>) =\n                    ((w, I) \\<Turnstile> \\<phi>)\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>", "unfolding *(1,3) lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>) - {[]} =\n  {enc (w, I) |w I.\n   length I = n \\<and>\n   wf_interp_for_formula (w, I) \\<phi> \\<and> (w, I) \\<Turnstile> \\<phi>}\n  enc (w, I) \\<in> lang n (rexp_of n \\<phi>) - {[]}\n  \\<lbrakk>enc (?w, ?I) = enc (w, I); wf_formula (length ?I) \\<phi>;\n   wf_interp_for_formula (?w, ?I) \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((?w, ?I) \\<Turnstile> \\<phi>) =\n                    ((w, I) \\<Turnstile> \\<phi>)\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>", "by auto"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "}"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n \\<phi>) - {[]} \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "with unsat"], ["proof (chain)\npicking this:\n  \\<not> (w, I) \\<Turnstile> \\<phi>\n  x \\<in> lang n (rexp_of n \\<phi>) - {[]} \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi>", "have \"x \\<notin> ?L n \\<phi>\""], ["proof (prove)\nusing this:\n  \\<not> (w, I) \\<Turnstile> \\<phi>\n  x \\<in> lang n (rexp_of n \\<phi>) - {[]} \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<notin> lang n (rexp_of n \\<phi>) - {[]}", "by blast"], ["proof (state)\nthis:\n  x \\<notin> lang n (rexp_of n \\<phi>) - {[]}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "with *"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  0 < length w\n  x \\<notin> lang n (rexp_of n \\<phi>) - {[]}", "show \"x \\<in> ?L n (FNot \\<phi>)\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  0 < length w\n  x \\<notin> lang n (rexp_of n \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}", "unfolding rexp_of.simps lang.simps"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  0 < length w\n  x \\<notin> lang n (rexp_of n \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n             lang n (rexp_of n \\<phi>)) \\<inter>\n            lang n (ENC n (FOV (FNot \\<phi>))) -\n            {[]}", "using lang_ENC_formula[OF FNot(2)]"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  0 < length w\n  x \\<notin> lang n (rexp_of n \\<phi>) - {[]}\n  lang n (ENC n (FOV (FNot \\<phi>))) - {[]} =\n  {enc (w, I) |w I.\n   length I = n \\<and> wf_interp_for_formula (w, I) (FNot \\<phi>)}\n\ngoal (1 subgoal):\n 1. x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n             lang n (rexp_of n \\<phi>)) \\<inter>\n            lang n (ENC n (FOV (FNot \\<phi>))) -\n            {[]}", "by (auto simp: comp_def intro!: enc_atom_\\<sigma>)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "assume \"x \\<in> ?L n (FNot \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "with IH"], ["proof (chain)\npicking this:\n  lang n (rexp_of n \\<phi>) - {[]} = lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n  x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}", "have \"x \\<in> lang n (ENC n (FOV (FNot \\<phi>))) - {[]}\" and x: \"x \\<notin> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\""], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>) - {[]} = lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n  x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV (FNot \\<phi>))) - {[]} &&&\n    x \\<notin> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>", "by (auto simp del: o_apply)"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV (FNot \\<phi>))) - {[]}\n  x \\<notin> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FNot \\<phi>))) - {[]}\n  x \\<notin> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>", "obtain w I where *: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FNot \\<phi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FNot \\<phi>))) - {[]}\n  x \\<notin> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) (FNot \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang_ENC_formula[OF FNot(2)]"], ["proof (prove)\nusing this:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and> wf_interp_for_formula (w, I) (FNot \\<phi>)}\n  x \\<notin> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I); wf_interp_for_formula (w, I) (FNot \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "{"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "assume \"\\<not> satisfies (w, I) (FNot \\<phi>)\""], ["proof (state)\nthis:\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "with *"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi>", "have \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) \\<phi> \\<and>\n             (w, I) \\<Turnstile> \\<phi>}", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "}"], ["proof (state)\nthis:\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi> \\<Longrightarrow>\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "with x *"], ["proof (chain)\npicking this:\n  x \\<notin> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi> \\<Longrightarrow>\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>", "show \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)\""], ["proof (prove)\nusing this:\n  x \\<notin> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi> \\<Longrightarrow>\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x \\<notin> {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) \\<phi> \\<and>\n              (w, I) \\<Turnstile> \\<phi>}\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi> \\<Longrightarrow>\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) \\<phi> \\<and>\n           (w, I) \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FNot \\<phi>) \\<and>\n             (w, I) \\<Turnstile> FNot \\<phi>}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FNot \\<phi>) =\n  lang n (rexp_of n (FNot \\<phi>)) - {[]}\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "case (FExists \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang\\<^sub>M\\<^sub>2\\<^sub>L ?n \\<phi> =\n  lang ?n (rexp_of ?n \\<phi>) - {[]}\n  wf_formula n (FExists \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n    lang n (rexp_of n (FExists \\<phi>)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "obtain w I p where\n      *: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FExists \\<phi>)\"\n       \"length I = n\" \"length w > 0\" \"p \\<in> {0 .. length w - 1}\" \"satisfies (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>w I p.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FExists \\<phi>); length I = n;\n         0 < length w; p \\<in> {0..length w - 1};\n         (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FExists \\<phi>) \\<and>\n           (w, I) \\<Turnstile> FExists \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I p.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FExists \\<phi>); length I = n;\n         0 < length w; p \\<in> {0..length w - 1};\n         (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  0 < length w\n  p \\<in> {0..length w - 1}\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "with FExists(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  0 < length w\n  p \\<in> {0..length w - 1}\n  (w, Inl p # I) \\<Turnstile> \\<phi>", "have \"enc (w, Inl p # I) \\<in> ?L (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  0 < length w\n  p \\<in> {0..length w - 1}\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. enc (w, Inl p # I) \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}", "by (intro subsetD[OF equalityD1[OF FExists(1)], of \"Suc n\" \"enc (w, Inl p # I)\"])\n       (auto simp: lang\\<^sub>M\\<^sub>2\\<^sub>L_def nth_Cons' ord_less_eq_trans[OF le_imp_less_Suc Suc_pred[OF *(4)]]\n        split: if_split_asm sum.splits intro!: exI[of _ w] exI[of _ \"Inl p # I\"])"], ["proof (state)\nthis:\n  enc (w, Inl p # I) \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "with *(1)"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  enc (w, Inl p # I) \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}", "show \"x \\<in> ?L n (FExists \\<phi>)\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  enc (w, Inl p # I) \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}", "by (auto simp: map_index intro!: image_eqI[of _ \"map \\<pi>\"] simp del: o_apply) (auto simp: \\<pi>_def)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "assume \"x \\<in> ?L n (FExists \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}", "obtain x' where x: \"x = map \\<pi> x'\" and \"x' \\<in> ?L (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x = map \\<pi> x';\n         x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp del: o_apply)"], ["proof (state)\nthis:\n  x = map \\<pi> x'\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "with FExists(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)\n  x = map \\<pi> x'\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}", "have \"x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  x = map \\<pi> x'\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>", "by (intro subsetD[OF equalityD2[OF FExists(1)], of \"Suc n\" x'])\n         (auto split: if_split_asm sum.splits)"], ["proof (state)\nthis:\n  x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>", "obtain w I' where\n      *: \"x' = enc (w, I')\" \"wf_interp_for_formula (w, I') \\<phi>\" \"length I' = Suc n\" \"satisfies (w, I') \\<phi>\""], ["proof (prove)\nusing this:\n  x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>w I'.\n        \\<lbrakk>x' = enc (w, I'); wf_interp_for_formula (w, I') \\<phi>;\n         length I' = Suc n; (w, I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x' \\<in> {enc (w, I) |w I.\n            length I = Suc n \\<and>\n            wf_interp_for_formula (w, I) \\<phi> \\<and>\n            (w, I) \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I'.\n        \\<lbrakk>x' = enc (w, I'); wf_interp_for_formula (w, I') \\<phi>;\n         length I' = Suc n; (w, I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "moreover"], ["proof (state)\nthis:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>", "obtain I\\<^sub>0 I where \"I' = I\\<^sub>0 # I\""], ["proof (prove)\nusing this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>I\\<^sub>0 I.\n        I' = I\\<^sub>0 # I \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I') auto"], ["proof (state)\nthis:\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "moreover"], ["proof (state)\nthis:\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "with FExists(2) *(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)\n  wf_interp_for_formula (w, I') \\<phi>\n  I' = I\\<^sub>0 # I", "obtain p where \"I\\<^sub>0 = Inl p\" \"p < length w\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  wf_interp_for_formula (w, I') \\<phi>\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>I\\<^sub>0 = Inl p; p < length w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: nth_Cons' split: sum.splits if_split_asm)"], ["proof (state)\nthis:\n  I\\<^sub>0 = Inl p\n  p < length w\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inl p\n  p < length w", "have \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FExists \\<phi>)\" \"length I = n\"\n      \"length w > 0\" \"satisfies (w, I) (FExists \\<phi>)\""], ["proof (prove)\nusing this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inl p\n  p < length w\n\ngoal (1 subgoal):\n 1. (x = enc (w, I) &&& wf_interp_for_formula (w, I) (FExists \\<phi>)) &&&\n    length I = n &&& 0 < length w &&& (w, I) \\<Turnstile> FExists \\<phi>", "using FExists(2)"], ["proof (prove)\nusing this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inl p\n  p < length w\n  wf_formula n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. (x = enc (w, I) &&& wf_interp_for_formula (w, I) (FExists \\<phi>)) &&&\n    length I = n &&& 0 < length w &&& (w, I) \\<Turnstile> FExists \\<phi>", "unfolding x"], ["proof (prove)\nusing this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inl p\n  p < length w\n  wf_formula n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. (map \\<pi> x' = enc (w, I) &&&\n     wf_interp_for_formula (w, I) (FExists \\<phi>)) &&&\n    length I = n &&& 0 < length w &&& (w, I) \\<Turnstile> FExists \\<phi>", "by (auto simp: map_tl nth_Cons' split: if_split_asm simp del: o_apply) (auto simp: \\<pi>_def)"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "thus \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FExists \\<phi>) \\<and>\n             (w, I) \\<Turnstile> FExists \\<phi>}", "by (auto intro!: exI[of _ w] exI[of _ I])"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FExists \\<phi>) =\n  lang n (rexp_of n (FExists \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "case (FEXISTS \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang\\<^sub>M\\<^sub>2\\<^sub>L ?n \\<phi> =\n  lang ?n (rexp_of ?n \\<phi>) - {[]}\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n                   lang n (rexp_of n \\<phi>) - {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n    lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "assume \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "obtain w I P where\n      *: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\"\n       \"length I = n\" \"length w > 0\" \"P \\<subseteq> {0 .. length w - 1}\" \"satisfies (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>w I P.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FEXISTS \\<phi>); length I = n;\n         0 < length w; P \\<subseteq> {0..length w - 1};\n         (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x \\<in> {enc (w, I) |w I.\n           length I = n \\<and>\n           wf_interp_for_formula (w, I) (FEXISTS \\<phi>) \\<and>\n           (w, I) \\<Turnstile> FEXISTS \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I P.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FEXISTS \\<phi>); length I = n;\n         0 < length w; P \\<subseteq> {0..length w - 1};\n         (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  0 < length w\n  P \\<subseteq> {0..length w - 1}\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "from *(4,5)"], ["proof (chain)\npicking this:\n  0 < length w\n  P \\<subseteq> {0..length w - 1}", "have \"\\<forall>p \\<in> P. p < length w\""], ["proof (prove)\nusing this:\n  0 < length w\n  P \\<subseteq> {0..length w - 1}\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>P. p < length w", "by (cases w) auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>P. p < length w\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "with *(2-4,6) FEXISTS(2)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  0 < length w\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n  wf_formula n (FEXISTS \\<phi>)\n  \\<forall>p\\<in>P. p < length w", "have \"enc (w, Inr P # I) \\<in> ?L (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  0 < length w\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n  wf_formula n (FEXISTS \\<phi>)\n  \\<forall>p\\<in>P. p < length w\n\ngoal (1 subgoal):\n 1. enc (w, Inr P # I) \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}", "by (intro subsetD[OF equalityD1[OF FEXISTS(1)], of \"Suc n\" \"enc (w, Inr P # I)\"])\n       (auto simp: lang\\<^sub>M\\<^sub>2\\<^sub>L_def nth_Cons' split: if_split_asm sum.splits\n        intro!: exI[of _ w] exI[of _ \"Inr P # I\"])"], ["proof (state)\nthis:\n  enc (w, Inr P # I) \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "with *(1)"], ["proof (chain)\npicking this:\n  x = enc (w, I)\n  enc (w, Inr P # I) \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}", "show \"x \\<in> ?L n (FEXISTS \\<phi>)\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  enc (w, Inr P # I) \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "by (auto simp: map_index intro!: image_eqI[of _ \"map \\<pi>\"] simp del: o_apply) (auto simp: \\<pi>_def)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "assume \"x \\<in> ?L n (FEXISTS \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}", "obtain x' where x: \"x = map \\<pi> x'\" and x': \"length x' > 0\" and \"x' \\<in> ?L (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x = map \\<pi> x'; 0 < length x';\n         x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp del: o_apply)"], ["proof (state)\nthis:\n  x = map \\<pi> x'\n  0 < length x'\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "with FEXISTS(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FEXISTS \\<phi>)\n  x = map \\<pi> x'\n  0 < length x'\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}", "have \"x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  x = map \\<pi> x'\n  0 < length x'\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>) - {[]}\n\ngoal (1 subgoal):\n 1. x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>", "by (intro subsetD[OF equalityD2[OF FEXISTS(1)], of \"Suc n\" x'])\n         (auto split: if_split_asm sum.splits)"], ["proof (state)\nthis:\n  x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>", "obtain w I' where\n      *: \"x' = enc (w, I')\" \"wf_interp_for_formula (w, I') \\<phi>\" \"length I' = Suc n\" \"satisfies (w, I') \\<phi>\""], ["proof (prove)\nusing this:\n  x' \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L (Suc n) \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>w I'.\n        \\<lbrakk>x' = enc (w, I'); wf_interp_for_formula (w, I') \\<phi>;\n         length I' = Suc n; (w, I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x' \\<in> {enc (w, I) |w I.\n            length I = Suc n \\<and>\n            wf_interp_for_formula (w, I) \\<phi> \\<and>\n            (w, I) \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I'.\n        \\<lbrakk>x' = enc (w, I'); wf_interp_for_formula (w, I') \\<phi>;\n         length I' = Suc n; (w, I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "moreover"], ["proof (state)\nthis:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>", "obtain I\\<^sub>0 I where \"I' = I\\<^sub>0 # I\""], ["proof (prove)\nusing this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>I\\<^sub>0 I.\n        I' = I\\<^sub>0 # I \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I') auto"], ["proof (state)\nthis:\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "moreover"], ["proof (state)\nthis:\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "with FEXISTS(2) *(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I') \\<phi>\n  I' = I\\<^sub>0 # I", "obtain P where \"I\\<^sub>0 = Inr P\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I') \\<phi>\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. (\\<And>P. I\\<^sub>0 = Inr P \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: nth_Cons' split: sum.splits if_split_asm)"], ["proof (state)\nthis:\n  I\\<^sub>0 = Inr P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "moreover"], ["proof (state)\nthis:\n  I\\<^sub>0 = Inr P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "have \"length w \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> length w", "using x' *(1)"], ["proof (prove)\nusing this:\n  0 < length x'\n  x' = enc (w, I')\n\ngoal (1 subgoal):\n 1. 1 \\<le> length w", "by (cases w) auto"], ["proof (state)\nthis:\n  1 \\<le> length w\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inr P\n  1 \\<le> length w", "have \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\" \"length I = n\"\n      \"length w > 0\" \"satisfies (w, I) (FEXISTS \\<phi>)\""], ["proof (prove)\nusing this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inr P\n  1 \\<le> length w\n\ngoal (1 subgoal):\n 1. (x = enc (w, I) &&& wf_interp_for_formula (w, I) (FEXISTS \\<phi>)) &&&\n    length I = n &&& 0 < length w &&& (w, I) \\<Turnstile> FEXISTS \\<phi>", "using FEXISTS(2)"], ["proof (prove)\nusing this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inr P\n  1 \\<le> length w\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. (x = enc (w, I) &&& wf_interp_for_formula (w, I) (FEXISTS \\<phi>)) &&&\n    length I = n &&& 0 < length w &&& (w, I) \\<Turnstile> FEXISTS \\<phi>", "unfolding x"], ["proof (prove)\nusing this:\n  x' = enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inr P\n  1 \\<le> length w\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. (map \\<pi> x' = enc (w, I) &&&\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>)) &&&\n    length I = n &&& 0 < length w &&& (w, I) \\<Turnstile> FEXISTS \\<phi>", "by (auto simp add: map_tl nth_Cons' split: if_split_asm\n        intro!: exI[of _ P] simp del: o_apply) (auto simp: \\<pi>_def)"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} \\<Longrightarrow>\n       x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "thus \"x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_def"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  0 < length w\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FEXISTS \\<phi>) \\<and>\n             (w, I) \\<Turnstile> FEXISTS \\<phi>}", "by (auto intro!: exI[of _ w] exI[of _ I])"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>M\\<^sub>2\\<^sub>L n (FEXISTS \\<phi>) =\n  lang n (rexp_of n (FEXISTS \\<phi>)) - {[]}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_rexp_of: \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of n \\<phi>)", "by (induct \\<phi> arbitrary: n) (auto intro: wf_rexp_ENC simp: finite_FOV max_idx_vars)"], ["", "lemma wf_rexp_of_alt: \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of_alt n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of_alt n \\<phi>)", "by (induct \\<phi> arbitrary: n) (auto simp: wf_rexp_ENC finite_FOV max_idx_vars)"], ["", "lemma wf_rexp_of': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of' n \\<phi>)", "unfolding rexp_of'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    local.wf n (rexp.Inter (rexp_of_alt n \\<phi>) (ENC n (FOV \\<phi>)))", "by (auto simp: wf_rexp_ENC wf_rexp_of_alt finite_FOV max_idx_vars)"], ["", "lemma wf_rexp_of_alt': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of_alt' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of_alt' n \\<phi>)", "by (induct \\<phi> arbitrary: n) (auto simp: wf_rexp_ENC)"], ["", "lemma wf_rexp_of'': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of'' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of'' n \\<phi>)", "unfolding rexp_of''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    local.wf n (rexp.Inter (rexp_of_alt' n \\<phi>) (ENC n (FOV \\<phi>)))", "by (auto simp: wf_rexp_ENC wf_rexp_of_alt' finite_FOV max_idx_vars)"], ["", "lemma ENC_Not: \"ENC n (FOV (FNot \\<phi>)) = ENC n (FOV \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ENC n (FOV (FNot \\<phi>)) = ENC n (FOV \\<phi>)", "unfolding ENC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. INTERSECT (sorted_list_of_set (valid_ENC n ` FOV (FNot \\<phi>))) =\n    INTERSECT (sorted_list_of_set (valid_ENC n ` FOV \\<phi>))", "by auto"], ["", "lemma ENC_And:\n  \"wf_formula n (FAnd \\<phi> \\<psi>) \\<Longrightarrow> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]} \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>)) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n (FAnd \\<phi> \\<psi>) \\<Longrightarrow>\n    lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\n    \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                lang n (ENC n (FOV \\<psi>)) -\n                {[]}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "assume wf: \"wf_formula n (FAnd \\<phi> \\<psi>)\" and x: \"x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\""], ["proof (state)\nthis:\n  wf_formula n (FAnd \\<phi> \\<psi>)\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "hence wf1: \"wf_formula n \\<phi>\" and wf2: \"wf_formula n \\<psi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi> \\<psi>)\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> &&& wf_formula n \\<psi>", "by auto"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\n  wf_formula n \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}", "obtain w I where wI: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\n  lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]} =\n  {enc (w, I) |w I.\n   length I = n \\<and> wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "hence \"wf_interp_for_formula (w, I) \\<phi>\" \"wf_interp_for_formula (w, I) \\<psi>\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) \\<phi> &&&\n    wf_interp_for_formula (w, I) \\<psi>", "unfolding wf_interp_for_formula_FAnd"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi> \\<and>\n  wf_interp_for_formula (w, I) \\<psi>\n  length I = n\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) \\<phi> &&&\n    wf_interp_for_formula (w, I) \\<psi>", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "hence \"x \\<in> (lang n (ENC n (FOV \\<phi>)) - {[]}) \\<inter> (lang n (ENC n (FOV \\<psi>)) - {[]})\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. x \\<in> (lang n (ENC n (FOV \\<phi>)) - {[]}) \\<inter>\n            (lang n (ENC n (FOV \\<psi>)) - {[]})", "unfolding lang_ENC_formula[OF wf1] lang_ENC_formula[OF wf2]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) \\<phi>} \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and> wf_interp_for_formula (w, I) \\<psi>}", "using wI"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) \\<phi>} \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and> wf_interp_for_formula (w, I) \\<psi>}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (lang n (ENC n (FOV \\<phi>)) - {[]}) \\<inter>\n          (lang n (ENC n (FOV \\<psi>)) - {[]})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "thus \"x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>)) - {[]}\""], ["proof (prove)\nusing this:\n  x \\<in> (lang n (ENC n (FOV \\<phi>)) - {[]}) \\<inter>\n          (lang n (ENC n (FOV \\<psi>)) - {[]})\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n            lang n (ENC n (FOV \\<psi>)) -\n            {[]}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>)) -\n          {[]}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ENC_Or:\n  \"wf_formula n (FOr \\<phi> \\<psi>) \\<Longrightarrow> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]} \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>)) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n (FOr \\<phi> \\<psi>) \\<Longrightarrow>\n    lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\n    \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                lang n (ENC n (FOV \\<psi>)) -\n                {[]}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "assume wf: \"wf_formula n (FOr \\<phi> \\<psi>)\" and x: \"x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\""], ["proof (state)\nthis:\n  wf_formula n (FOr \\<phi> \\<psi>)\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "hence wf1: \"wf_formula n \\<phi>\" and wf2: \"wf_formula n \\<psi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FOr \\<phi> \\<psi>)\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> &&& wf_formula n \\<psi>", "by auto"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\n  wf_formula n \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}", "obtain w I where wI: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\n  lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]} =\n  {enc (w, I) |w I.\n   length I = n \\<and> wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "hence \"wf_interp_for_formula (w, I) \\<phi>\" \"wf_interp_for_formula (w, I) \\<psi>\""], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) \\<phi> &&&\n    wf_interp_for_formula (w, I) \\<psi>", "unfolding wf_interp_for_formula_FOr"], ["proof (prove)\nusing this:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi> \\<and>\n  wf_interp_for_formula (w, I) \\<psi>\n  length I = n\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) \\<phi> &&&\n    wf_interp_for_formula (w, I) \\<psi>", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "hence \"x \\<in> (lang n (ENC n (FOV \\<phi>)) - {[]}) \\<inter> (lang n (ENC n (FOV \\<psi>)) - {[]})\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. x \\<in> (lang n (ENC n (FOV \\<phi>)) - {[]}) \\<inter>\n            (lang n (ENC n (FOV \\<psi>)) - {[]})", "unfolding lang_ENC_formula[OF wf1] lang_ENC_formula[OF wf2]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) \\<phi>} \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and> wf_interp_for_formula (w, I) \\<psi>}", "using wI"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) \\<phi>} \\<inter>\n            {enc (w, I) |w I.\n             length I = n \\<and> wf_interp_for_formula (w, I) \\<psi>}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (lang n (ENC n (FOV \\<phi>)) - {[]}) \\<inter>\n          (lang n (ENC n (FOV \\<psi>)) - {[]})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>)) -\n                                 {[]}", "thus \"x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>)) - {[]}\""], ["proof (prove)\nusing this:\n  x \\<in> (lang n (ENC n (FOV \\<phi>)) - {[]}) \\<inter>\n          (lang n (ENC n (FOV \\<psi>)) - {[]})\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n            lang n (ENC n (FOV \\<psi>)) -\n            {[]}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>)) -\n          {[]}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma project_enc: \"map \\<pi> (enc (w, x # I)) = enc (w, I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> (enc (w, x # I)) = enc (w, I)", "unfolding \\<pi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>(a, bs). (a, tl bs)) (enc (w, x # I)) = enc (w, I)", "by auto"], ["", "lemma list_list_eqI:\n  assumes \"\\<forall>(_, x) \\<in> set xs. x \\<noteq> []\" \"\\<forall>(_, y) \\<in> set ys. y \\<noteq> []\"\n    \"map (\\<lambda>(_, x). hd x) xs = map (\\<lambda>(_, x). hd x) ys\" \"map \\<pi> xs = map \\<pi> ys\"\n  shows \"xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xs = ys", "from assms(4)"], ["proof (chain)\npicking this:\n  map \\<pi> xs = map \\<pi> ys", "have \"length xs = length ys\""], ["proof (prove)\nusing this:\n  map \\<pi> xs = map \\<pi> ys\n\ngoal (1 subgoal):\n 1. length xs = length ys", "by (metis length_map)"], ["proof (state)\nthis:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. xs = ys", "then"], ["proof (chain)\npicking this:\n  length xs = length ys", "show ?thesis"], ["proof (prove)\nusing this:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. xs = ys", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<forall>(uu_, x)\\<in>set xs. x \\<noteq> []\n  \\<forall>(uu_, y)\\<in>set ys. y \\<noteq> []\n  map (\\<lambda>(uu_, x). hd x) xs = map (\\<lambda>(uu_, x). hd x) ys\n  map \\<pi> xs = map \\<pi> ys\n\ngoal (1 subgoal):\n 1. xs = ys", "by (induct rule: list_induct2) (auto simp: \\<pi>_def neq_Nil_conv)"], ["proof (state)\nthis:\n  xs = ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma project_enc_extend:\n  assumes \"map \\<pi> x = enc (w, I)\" \"\\<forall>(_, x) \\<in> set x. x \\<noteq> []\"\n  shows \"x = enc (w, Inr (positions_in_row x 0) # I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = enc (w, Inr (positions_in_row x 0) # I)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x = enc (w, Inr (positions_in_row x 0) # I)", "from arg_cong[OF assms(1), of \"map fst\"]"], ["proof (chain)\npicking this:\n  map fst (map \\<pi> x) = map fst (enc (w, I))", "have w: \"w = map fst x\""], ["proof (prove)\nusing this:\n  map fst (map \\<pi> x) = map fst (enc (w, I))\n\ngoal (1 subgoal):\n 1. w = map fst x", "by (auto simp: \\<pi>_def)"], ["proof (state)\nthis:\n  w = map fst x\n\ngoal (1 subgoal):\n 1. x = enc (w, Inr (positions_in_row x 0) # I)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = enc (w, Inr (positions_in_row x 0) # I)", "proof (rule list_list_eqI[OF assms(2)], unfold project_enc)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>(uu_, y)\\<in>set (enc (w, Inr (positions_in_row x 0) # I)).\n       y \\<noteq> []\n 2. map (\\<lambda>(uu_, x). hd x) x =\n    map (\\<lambda>(uu_, x). hd x) (enc (w, Inr (positions_in_row x 0) # I))\n 3. map \\<pi> x = enc (w, I)", "show \"map (\\<lambda>(_, x). hd x) x = map (\\<lambda>(_, x). hd x) (enc (w, Inr (positions_in_row x 0) # I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>(uu_, x). hd x) x =\n    map (\\<lambda>(uu_, x). hd x) (enc (w, Inr (positions_in_row x 0) # I))", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n\ngoal (1 subgoal):\n 1. map (\\<lambda>(uu_, x). hd x) x =\n    map (\\<lambda>(uu_, x). hd x) (enc (w, Inr (positions_in_row x 0) # I))", "unfolding enc.simps map_index positions_in_row w"], ["proof (prove)\nusing this:\n  \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n\ngoal (1 subgoal):\n 1. map (\\<lambda>(uu_, x). hd x) x =\n    map (\\<lambda>(uu_, x). hd x)\n     (map2 (enc_atom (Inr {p. p < length x \\<and> snd (x ! p) ! 0} # I))\n       [0..<length (map fst x)] (map fst x))", "by (intro nth_equalityI) (auto dest!: nth_mem simp: hd_conv_nth)"], ["proof (state)\nthis:\n  map (\\<lambda>(uu_, x). hd x) x =\n  map (\\<lambda>(uu_, x). hd x) (enc (w, Inr (positions_in_row x 0) # I))\n\ngoal (2 subgoals):\n 1. \\<forall>(uu_, y)\\<in>set (enc (w, Inr (positions_in_row x 0) # I)).\n       y \\<noteq> []\n 2. map \\<pi> x = enc (w, I)", "qed (auto simp: assms(1))"], ["proof (state)\nthis:\n  x = enc (w, Inr (positions_in_row x 0) # I)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ENC_Exists:\n  \"wf_formula n (FExists \\<phi>) \\<Longrightarrow> lang n (ENC n (FOV (FExists \\<phi>))) - {[]} = map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n (FExists \\<phi>) \\<Longrightarrow>\n    lang n (ENC n (FOV (FExists \\<phi>))) - {[]} =\n    map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "assume wf: \"wf_formula n (FExists \\<phi>)\" and x: \"x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\""], ["proof (state)\nthis:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "hence wf1: \"wf_formula (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\n\ngoal (1 subgoal):\n 1. wf_formula (Suc n) \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (Suc n) \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}", "obtain w I where wI: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FExists \\<phi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FExists \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\n  lang n (ENC n (FOV (FExists \\<phi>))) - {[]} =\n  {enc (w, I) |w I.\n   length I = n \\<and> wf_interp_for_formula (w, I) (FExists \\<phi>)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FExists \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "with x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n", "have \"w \\<noteq> []\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by (cases w) auto"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "from wI(2)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)", "obtain p where \"p < length w\" \"wf_interp_for_formula (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p < length w;\n         wf_interp_for_formula (w, Inl p # I) \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wf_interp_for_formula_FExists[OF wf[folded wI(3)] \\<open>w \\<noteq> []\\<close>]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>) =\n  (\\<forall>p<length w. wf_interp_for_formula (w, Inl p # I) \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p < length w;\n         wf_interp_for_formula (w, Inl p # I) \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p < length w\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "with wI(3)"], ["proof (chain)\npicking this:\n  length I = n\n  p < length w\n  wf_interp_for_formula (w, Inl p # I) \\<phi>", "have \"x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\""], ["proof (prove)\nusing this:\n  length I = n\n  p < length w\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})", "unfolding wI(1) lang_ENC_formula[OF wf1] project_enc[symmetric, of w I \"Inl p\"]"], ["proof (prove)\nusing this:\n  length I = n\n  p < length w\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (1 subgoal):\n 1. map \\<pi> (enc (w, Inl p # I))\n    \\<in> map \\<pi> `\n          {enc (w, I) |w I.\n           length I = Suc n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "by (intro imageI CollectI exI[of _ w] exI[of _ \"Inl p # I\"]) auto"], ["proof (state)\nthis:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "thus \"x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\""], ["proof (prove)\nusing this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (1 subgoal):\n 1. x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}", "by blast"], ["proof (state)\nthis:\n  x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "assume wf: \"wf_formula n (FExists \\<phi>)\" and \"x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\""], ["proof (state)\nthis:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "hence wf1: \"wf_formula (Suc n) \\<phi>\" and \"0 \\<in> FOV \\<phi>\" and x: \"x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. wf_formula (Suc n) \\<phi> &&&\n    0 \\<in> FOV \\<phi> &&&\n    x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})", "by auto"], ["proof (state)\nthis:\n  wf_formula (Suc n) \\<phi>\n  0 \\<in> FOV \\<phi>\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "from x"], ["proof (chain)\npicking this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})", "obtain w I where wI: \"x = map \\<pi> (enc (w, I))\" \"wf_interp_for_formula (w, I) \\<phi>\" \"length I = Suc n\""], ["proof (prove)\nusing this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = map \\<pi> (enc (w, I));\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf1]"], ["proof (prove)\nusing this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]} =\n  {enc (w, I) |w I.\n   length I = Suc n \\<and> wf_interp_for_formula (w, I) \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = map \\<pi> (enc (w, I));\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "with \\<open>0 \\<in> FOV \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  0 \\<in> FOV \\<phi>\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n", "obtain p I' where I: \"I = Inl p # I'\""], ["proof (prove)\nusing this:\n  0 \\<in> FOV \\<phi>\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>p I'. I = Inl p # I' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I) (fastforce split: sum.splits)+"], ["proof (state)\nthis:\n  I = Inl p # I'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "with wI"], ["proof (chain)\npicking this:\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inl p # I'", "have wtlI: \"x = enc (w, I')\" \"length I' = n\""], ["proof (prove)\nusing this:\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inl p # I'\n\ngoal (1 subgoal):\n 1. x = enc (w, I') &&& length I' = n", "unfolding \\<pi>_def"], ["proof (prove)\nusing this:\n  x = map (\\<lambda>(a, bs). (a, tl bs)) (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inl p # I'\n\ngoal (1 subgoal):\n 1. x = enc (w, I') &&& length I' = n", "by auto"], ["proof (state)\nthis:\n  x = enc (w, I')\n  length I' = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "with x"], ["proof (chain)\npicking this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n  x = enc (w, I')\n  length I' = n", "have \"w \\<noteq> []\""], ["proof (prove)\nusing this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n  x = enc (w, I')\n  length I' = n\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by (cases w) auto"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "have \"wf_interp_for_formula (w, I') (FExists \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I') (FExists \\<phi>)", "using wf_interp_for_formula_FExists[OF wf[folded wtlI(2)] \\<open>w \\<noteq> []\\<close>]\n          wf_interp_for_formula_any_Inl[OF wI(2)[unfolded I]]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I') (FExists \\<phi>) =\n  (\\<forall>p<length w. wf_interp_for_formula (w, Inl p # I') \\<phi>)\n  \\<forall>p<length w. wf_interp_for_formula (w, Inl p # I') \\<phi>\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I') (FExists \\<phi>)", ".."], ["proof (state)\nthis:\n  wf_interp_for_formula (w, I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) -\n                                 {[]}", "with wtlI"], ["proof (chain)\npicking this:\n  x = enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FExists \\<phi>)", "show \"x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\""], ["proof (prove)\nusing this:\n  x = enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}", "unfolding lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x = enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FExists \\<phi>)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>))) - {[]}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ENC_EXISTS:\n  \"wf_formula n (FEXISTS \\<phi>) \\<Longrightarrow> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} = map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n (FEXISTS \\<phi>) \\<Longrightarrow>\n    lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} =\n    map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "assume wf: \"wf_formula n (FEXISTS \\<phi>)\" and x: \"x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\""], ["proof (state)\nthis:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "hence wf1: \"wf_formula (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\n\ngoal (1 subgoal):\n 1. wf_formula (Suc n) \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (Suc n) \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}", "obtain w I where wI: \"x = enc (w, I)\" \"wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\n  lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} =\n  {enc (w, I) |w I.\n   length I = n \\<and> wf_interp_for_formula (w, I) (FEXISTS \\<phi>)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = enc (w, I);\n         wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "with x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n", "have \"w \\<noteq> []\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\n  x = enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by (cases w) auto"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "from wI(2)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)", "obtain P where \"\\<forall>p \\<in> P. p < length w\" \"wf_interp_for_formula (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>\\<forall>p\\<in>P. p < length w;\n         wf_interp_for_formula (w, Inr P # I) \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wf_interp_for_formula_FEXISTS[OF wf[folded wI(3)] \\<open>w \\<noteq> []\\<close>]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>) =\n  (\\<forall>P\\<subseteq>{0..length w - 1}.\n      wf_interp_for_formula (w, Inr P # I) \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>\\<forall>p\\<in>P. p < length w;\n         wf_interp_for_formula (w, Inr P # I) \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>P. p < length w\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "with wI(3)"], ["proof (chain)\npicking this:\n  length I = n\n  \\<forall>p\\<in>P. p < length w\n  wf_interp_for_formula (w, Inr P # I) \\<phi>", "have \"x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\""], ["proof (prove)\nusing this:\n  length I = n\n  \\<forall>p\\<in>P. p < length w\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})", "unfolding wI(1) lang_ENC_formula[OF wf1] project_enc[symmetric, of w I \"Inr P\"]"], ["proof (prove)\nusing this:\n  length I = n\n  \\<forall>p\\<in>P. p < length w\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (1 subgoal):\n 1. map \\<pi> (enc (w, Inr P # I))\n    \\<in> map \\<pi> `\n          {enc (w, I) |w I.\n           length I = Suc n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "by (intro imageI CollectI exI[of _ w] exI[of _ \"Inr P # I\"]) auto"], ["proof (state)\nthis:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> map \\<pi> `\n                                 lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                                 {[]}\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "thus \"x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\""], ["proof (prove)\nusing this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (1 subgoal):\n 1. x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}", "by blast"], ["proof (state)\nthis:\n  x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "assume wf: \"wf_formula n (FEXISTS \\<phi>)\" and \"x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\""], ["proof (state)\nthis:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "hence wf1: \"wf_formula (Suc n) \\<phi>\" and \"0 \\<in> SOV \\<phi>\" and x: \"x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. wf_formula (Suc n) \\<phi> &&&\n    0 \\<in> SOV \\<phi> &&&\n    x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})", "by auto"], ["proof (state)\nthis:\n  wf_formula (Suc n) \\<phi>\n  0 \\<in> SOV \\<phi>\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "from x"], ["proof (chain)\npicking this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})", "obtain w I where wI: \"x = map \\<pi> (enc (w, I))\" \"wf_interp_for_formula (w, I) \\<phi>\" \"length I = Suc n\""], ["proof (prove)\nusing this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = map \\<pi> (enc (w, I));\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf1]"], ["proof (prove)\nusing this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]} =\n  {enc (w, I) |w I.\n   length I = Suc n \\<and> wf_interp_for_formula (w, I) \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x = map \\<pi> (enc (w, I));\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "with \\<open>0 \\<in> SOV \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  0 \\<in> SOV \\<phi>\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n", "obtain P I' where I: \"I = Inr P # I'\""], ["proof (prove)\nusing this:\n  0 \\<in> SOV \\<phi>\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>P I'. I = Inr P # I' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I) (fastforce split: sum.splits)+"], ["proof (state)\nthis:\n  I = Inr P # I'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "with wI"], ["proof (chain)\npicking this:\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inr P # I'", "have wtlI: \"x = enc (w, I')\" \"length I' = n\""], ["proof (prove)\nusing this:\n  x = map \\<pi> (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inr P # I'\n\ngoal (1 subgoal):\n 1. x = enc (w, I') &&& length I' = n", "unfolding \\<pi>_def"], ["proof (prove)\nusing this:\n  x = map (\\<lambda>(a, bs). (a, tl bs)) (enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inr P # I'\n\ngoal (1 subgoal):\n 1. x = enc (w, I') &&& length I' = n", "by auto"], ["proof (state)\nthis:\n  x = enc (w, I')\n  length I' = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "with x"], ["proof (chain)\npicking this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n  x = enc (w, I')\n  length I' = n", "have \"w \\<noteq> []\""], ["proof (prove)\nusing this:\n  x \\<in> map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n  x = enc (w, I')\n  length I' = n\n\ngoal (1 subgoal):\n 1. w \\<noteq> []", "by (cases w) auto"], ["proof (state)\nthis:\n  w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "have \"wf_interp_for_formula (w, I') (FEXISTS \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I') (FEXISTS \\<phi>)", "using wf_interp_for_formula_FEXISTS[OF wf[folded wtlI(2)] \\<open>w \\<noteq> []\\<close>]\n          wf_interp_for_formula_any_Inr[OF wI(2)[unfolded I]]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>) =\n  (\\<forall>P\\<subseteq>{0..length w - 1}.\n      wf_interp_for_formula (w, Inr P # I') \\<phi>)\n  \\<forall>P\\<subseteq>{0..length w - 1}.\n     wf_interp_for_formula (w, Inr P # I') \\<phi>\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I') (FEXISTS \\<phi>)", ".."], ["proof (state)\nthis:\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) -\n                {[]}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n                                 {[]}", "with wtlI"], ["proof (chain)\npicking this:\n  x = enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>)", "show \"x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\""], ["proof (prove)\nusing this:\n  x = enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}", "unfolding lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x = enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I) (FEXISTS \\<phi>)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_project_empty: \"map \\<pi> ` A - {[]} = map \\<pi> ` (A - {[]})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> ` A - {[]} = map \\<pi> ` (A - {[]})", "by auto"], ["", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of_rexp_of':\n  \"wf_formula n \\<phi> \\<Longrightarrow> lang n (rexp_of n \\<phi>) - {[]} = lang n (rexp_of' n \\<phi>) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang n (rexp_of n \\<phi>) - {[]} = lang n (rexp_of' n \\<phi>) - {[]}", "unfolding rexp_of'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang n (rexp_of n \\<phi>) - {[]} =\n    lang n (rexp.Inter (rexp_of_alt n \\<phi>) (ENC n (FOV \\<phi>))) - {[]}", "proof (induction \\<phi> arbitrary: n)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FNot \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FNot \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp.Inter (rexp_of_alt ?n \\<phi>) (ENC ?n (FOV \\<phi>))) - {[]}\n  wf_formula n (FNot \\<phi>)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FNot \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence \"wf_formula n \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp.Inter (rexp_of_alt ?n \\<phi>) (ENC ?n (FOV \\<phi>))) - {[]}\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>", "by simp"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FNot \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "with FNot.IH"], ["proof (chain)\npicking this:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp.Inter (rexp_of_alt ?n \\<phi>) (ENC ?n (FOV \\<phi>))) - {[]}\n  wf_formula n \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp.Inter (rexp_of_alt ?n \\<phi>) (ENC ?n (FOV \\<phi>))) - {[]}\n  wf_formula n \\<phi>\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FNot \\<phi>)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n       (ENC n (FOV (FNot \\<phi>)))) -\n    {[]}", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps ENC_Not"], ["proof (prove)\nusing this:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp_of_alt ?n \\<phi>) \\<inter> lang ?n (ENC ?n (FOV \\<phi>)) -\n  {[]}\n  wf_formula n \\<phi>\n\ngoal (1 subgoal):\n 1. (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n     lang n (rexp_of n \\<phi>)) \\<inter>\n    lang n (ENC n (FOV \\<phi>)) -\n    {[]} =\n    (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n     lang n (rexp_of_alt n \\<phi>)) \\<inter>\n    lang n (ENC n (FOV \\<phi>)) -\n    {[]}", "by blast"], ["proof (state)\nthis:\n  lang n (rexp_of n (FNot \\<phi>)) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FNot \\<phi>)) (ENC n (FOV (FNot \\<phi>)))) -\n  {[]}\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>1) - {[]} =\n  lang ?n\n   (rexp.Inter (rexp_of_alt ?n \\<phi>\\<^sub>1)\n     (ENC ?n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  wf_formula ?n \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>2) - {[]} =\n  lang ?n\n   (rexp.Inter (rexp_of_alt ?n \\<phi>\\<^sub>2)\n     (ENC ?n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence wf1: \"wf_formula n \\<phi>\\<^sub>1\" and wf2: \"wf_formula n \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  wf_formula ?n \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>1) - {[]} =\n  lang ?n\n   (rexp.Inter (rexp_of_alt ?n \\<phi>\\<^sub>1)\n     (ENC ?n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  wf_formula ?n \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>2) - {[]} =\n  lang ?n\n   (rexp.Inter (rexp_of_alt ?n \\<phi>\\<^sub>2)\n     (ENC ?n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>\\<^sub>1 &&& wf_formula n \\<phi>\\<^sub>2", "by force+"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\\<^sub>1\n  wf_formula n \\<phi>\\<^sub>2\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "from FAnd.IH(1)[OF wf1] FAnd.IH(2)[OF wf2]"], ["proof (chain)\npicking this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}", "show ?case"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]}", "using ENC_And[OF FAnd.prems]"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) - {[]}\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n              {[]}\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]}", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} =\n  lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1)) -\n  {[]}\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]} =\n  lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n  {[]}\n  lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) - {[]}\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n              {[]}\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n \\<phi>\\<^sub>1) \\<inter>\n    (lang n (rexp_of n \\<phi>\\<^sub>2) \\<inter>\n     lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]} =\n    lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n    lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n    lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) -\n    {[]}", "by blast"], ["proof (state)\nthis:\n  lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n  {[]}\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>1) - {[]} =\n  lang ?n\n   (rexp.Inter (rexp_of_alt ?n \\<phi>\\<^sub>1)\n     (ENC ?n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  wf_formula ?n \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>2) - {[]} =\n  lang ?n\n   (rexp.Inter (rexp_of_alt ?n \\<phi>\\<^sub>2)\n     (ENC ?n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence wf1: \"wf_formula n \\<phi>\\<^sub>1\" and wf2: \"wf_formula n \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  wf_formula ?n \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>1) - {[]} =\n  lang ?n\n   (rexp.Inter (rexp_of_alt ?n \\<phi>\\<^sub>1)\n     (ENC ?n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  wf_formula ?n \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>\\<^sub>2) - {[]} =\n  lang ?n\n   (rexp.Inter (rexp_of_alt ?n \\<phi>\\<^sub>2)\n     (ENC ?n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>\\<^sub>1 &&& wf_formula n \\<phi>\\<^sub>2", "by force+"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\\<^sub>1\n  wf_formula n \\<phi>\\<^sub>2\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) - {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "from FOr.IH(1)[OF wf1] FOr.IH(2)[OF wf2]"], ["proof (chain)\npicking this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}", "show ?case"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]}", "using ENC_Or[OF FOr.prems]"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) - {[]}\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n              {[]}\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]}", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) - {[]} =\n  lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1)) -\n  {[]}\n  lang n (rexp_of n \\<phi>\\<^sub>2) - {[]} =\n  lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n  {[]}\n  lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) - {[]}\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n              {[]}\n\ngoal (1 subgoal):\n 1. (lang n (rexp_of n \\<phi>\\<^sub>1) \\<union>\n     lang n (rexp_of n \\<phi>\\<^sub>2)) \\<inter>\n    lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) -\n    {[]} =\n    (lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<union>\n     lang n (rexp_of_alt n \\<phi>\\<^sub>2)) \\<inter>\n    lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) -\n    {[]}", "by blast"], ["proof (state)\nthis:\n  lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n  {[]}\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FExists \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp.Inter (rexp_of_alt ?n \\<phi>) (ENC ?n (FOV \\<phi>))) - {[]}\n  wf_formula n (FExists \\<phi>)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence wf: \"wf_formula (n + 1) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp.Inter (rexp_of_alt ?n \\<phi>) (ENC ?n (FOV \\<phi>))) - {[]}\n  wf_formula n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula (n + 1) \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (n + 1) \\<phi>\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>)))) -\n    {[]}", "using ENC_Exists[OF FExists.prems]"], ["proof (prove)\nusing this:\n  lang n (ENC n (FOV (FExists \\<phi>))) - {[]} =\n  map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>)))) -\n    {[]}", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps map_project_empty FExists.IH[OF wf]"], ["proof (prove)\nusing this:\n  lang n (ENC n (FOV (FExists \\<phi>))) - {[]} =\n  map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (1 subgoal):\n 1. map \\<pi> `\n    (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n     lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) -\n     {[]}) =\n    map \\<pi> `\n    (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n     lang (n + 1) (ENC (n + 1) (FOV \\<phi>))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>))) -\n    {[]}", "by auto"], ["proof (state)\nthis:\n  lang n (rexp_of n (FExists \\<phi>)) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n     (ENC n (FOV (FExists \\<phi>)))) -\n  {[]}\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FEXISTS \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp.Inter (rexp_of_alt ?n \\<phi>) (ENC ?n (FOV \\<phi>))) - {[]}\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence wf: \"wf_formula (n + 1) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n \\<phi> \\<Longrightarrow>\n  lang ?n (rexp_of ?n \\<phi>) - {[]} =\n  lang ?n (rexp.Inter (rexp_of_alt ?n \\<phi>) (ENC ?n (FOV \\<phi>))) - {[]}\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula (n + 1) \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (n + 1) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) - {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>)))) -\n    {[]}", "using ENC_EXISTS[OF FEXISTS.prems]"], ["proof (prove)\nusing this:\n  lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} =\n  map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>)))) -\n    {[]}", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps map_project_empty FEXISTS.IH[OF wf]"], ["proof (prove)\nusing this:\n  lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} =\n  map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n\ngoal (1 subgoal):\n 1. map \\<pi> `\n    (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n     lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) -\n     {[]}) =\n    map \\<pi> `\n    (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n     lang (n + 1) (ENC (n + 1) (FOV \\<phi>))) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>))) -\n    {[]}", "by auto"], ["proof (state)\nthis:\n  lang n (rexp_of n (FEXISTS \\<phi>)) - {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n     (ENC n (FOV (FEXISTS \\<phi>)))) -\n  {[]}\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) - {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]}", "qed auto"], ["", "lemma Int_Diff_both: \"A \\<inter> B - C = (A - C) \\<inter> (B - C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> B - C = (A - C) \\<inter> (B - C)", "by auto"], ["", "lemma lang_ENC_split:\n  assumes \"finite X\" \"X = Y1 \\<union> Y2\" \"n = 0 \\<or> (\\<forall>p \\<in> X. p < n)\"\n  shows \"lang n (ENC n X) = lang n (ENC n Y1) \\<inter> lang n (ENC n Y2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (ENC n X) = lang n (ENC n Y1) \\<inter> lang n (ENC n Y2)", "unfolding ENC_def lang_INTERSECT"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if sorted_list_of_set (valid_ENC n ` X) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter> (lang n ` set (sorted_list_of_set (valid_ENC n ` X)))) =\n    (if sorted_list_of_set (valid_ENC n ` Y1) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter>\n           (lang n ` set (sorted_list_of_set (valid_ENC n ` Y1)))) \\<inter>\n    (if sorted_list_of_set (valid_ENC n ` Y2) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter> (lang n ` set (sorted_list_of_set (valid_ENC n ` Y2))))", "using assms lang_subset_lists[OF wf_rexp_valid_ENC, of n]"], ["proof (prove)\nusing this:\n  finite X\n  X = Y1 \\<union> Y2\n  n = 0 \\<or> (\\<forall>p\\<in>X. p < n)\n  n = 0 \\<or> ?p1 < n \\<Longrightarrow>\n  lang n (valid_ENC n ?p1)\n  \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n\ngoal (1 subgoal):\n 1. (if sorted_list_of_set (valid_ENC n ` X) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter> (lang n ` set (sorted_list_of_set (valid_ENC n ` X)))) =\n    (if sorted_list_of_set (valid_ENC n ` Y1) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter>\n           (lang n ` set (sorted_list_of_set (valid_ENC n ` Y1)))) \\<inter>\n    (if sorted_list_of_set (valid_ENC n ` Y2) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter> (lang n ` set (sorted_list_of_set (valid_ENC n ` Y2))))", "by auto"], ["", "lemma map_project_Int_ENC:\n  assumes \"0 \\<notin> X\" \"X \\<subseteq> {0 ..< n + 1}\" \"Z \\<subseteq> lists ((set o \\<sigma> \\<Sigma>) (n + 1))\"\n  shows \"map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}", "let ?Y = \"{0 ..< n + 1} - X\""], ["proof (state)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}", "let ?fX = \"(\\<lambda>x. x - 1) ` X\""], ["proof (state)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}", "let ?fY = \"{0 ..< n} - (\\<lambda>x. x - 1) ` X\""], ["proof (state)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}", "from assms"], ["proof (chain)\npicking this:\n  0 \\<notin> X\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))", "have *: \"(\\<lambda>x. x - 1) ` X \\<subseteq> {0 ..< n}\""], ["proof (prove)\nusing this:\n  0 \\<notin> X\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x - 1) ` X \\<subseteq> {0..<n}", "by (cases n) auto"], ["proof (state)\nthis:\n  (\\<lambda>x. x - 1) ` X \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}", "unfolding Int_Diff lang_ENC[OF assms(2) subset_refl] lang_ENC[OF * subset_refl]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> `\n    (Z \\<inter>\n     {enc (w, I) |w I.\n      length I = n + 1 \\<and>\n      (0 < length w \\<and>\n       (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n       Ball (set I)\n        (case_sum (\\<lambda>p. p < length w)\n          (\\<lambda>P. \\<forall>p\\<in>P. p < length w))) \\<and>\n      (\\<forall>i\\<in>X.\n          case I ! i of Inl x \\<Rightarrow> True\n          | Inr x \\<Rightarrow> False) \\<and>\n      (\\<forall>i\\<in>{0..<n + 1} - X.\n          case I ! i of Inl x \\<Rightarrow> False\n          | Inr x \\<Rightarrow> True)}) =\n    map \\<pi> ` Z \\<inter>\n    {enc (w, I) |w I.\n     length I = n \\<and>\n     (0 < length w \\<and>\n      (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n      Ball (set I)\n       (case_sum (\\<lambda>p. p < length w)\n         (\\<lambda>P. \\<forall>p\\<in>P. p < length w))) \\<and>\n     (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n         case I ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n         case I ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)}", "proof (safe elim!: imageI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa w I.\n       \\<lbrakk>enc (w, I) \\<in> Z; length I = n + 1; w \\<noteq> [];\n        \\<forall>i\\<in>X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<n + 1} - X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>wa Ia.\n                            map \\<pi> (enc (w, I)) = enc (wa, Ia) \\<and>\n                            length Ia = n \\<and>\n                            (0 < length wa \\<and>\n                             (\\<forall>a\\<in>set wa.\n                                 a \\<in> set \\<Sigma>) \\<and>\n                             Ball (set Ia)\n                              (case_sum (\\<lambda>p. p < length wa)\n                                (\\<lambda>P.\n                                    \\<forall>p\\<in>P.\n p < length wa))) \\<and>\n                            (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                                case Ia ! i of Inl x \\<Rightarrow> True\n                                | Inr x \\<Rightarrow> False) \\<and>\n                            (\\<forall>i\n\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                                case Ia ! i of Inl x \\<Rightarrow> False\n                                | Inr x \\<Rightarrow> True)\n 2. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "fix w I"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa w I.\n       \\<lbrakk>enc (w, I) \\<in> Z; length I = n + 1; w \\<noteq> [];\n        \\<forall>i\\<in>X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<n + 1} - X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>wa Ia.\n                            map \\<pi> (enc (w, I)) = enc (wa, Ia) \\<and>\n                            length Ia = n \\<and>\n                            (0 < length wa \\<and>\n                             (\\<forall>a\\<in>set wa.\n                                 a \\<in> set \\<Sigma>) \\<and>\n                             Ball (set Ia)\n                              (case_sum (\\<lambda>p. p < length wa)\n                                (\\<lambda>P.\n                                    \\<forall>p\\<in>P.\n p < length wa))) \\<and>\n                            (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                                case Ia ! i of Inl x \\<Rightarrow> True\n                                | Inr x \\<Rightarrow> False) \\<and>\n                            (\\<forall>i\n\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                                case Ia ! i of Inl x \\<Rightarrow> False\n                                | Inr x \\<Rightarrow> True)\n 2. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "assume *: \"length I = n + 1\" \"w \\<noteq> []\"\n      \"\\<forall>i\\<in>X. case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\"\n      \"\\<forall>i\\<in>?Y. case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\"\n      \"\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\" \"Ball (set I) (case_sum (\\<lambda>p. p < length w) (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\""], ["proof (state)\nthis:\n  length I = n + 1\n  w \\<noteq> []\n  \\<forall>i\\<in>X.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>{0..<n + 1} - X.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n  \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\n  Ball (set I)\n   (case_sum (\\<lambda>p. p < length w)\n     (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\n\ngoal (2 subgoals):\n 1. \\<And>x xa w I.\n       \\<lbrakk>enc (w, I) \\<in> Z; length I = n + 1; w \\<noteq> [];\n        \\<forall>i\\<in>X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<n + 1} - X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>wa Ia.\n                            map \\<pi> (enc (w, I)) = enc (wa, Ia) \\<and>\n                            length Ia = n \\<and>\n                            (0 < length wa \\<and>\n                             (\\<forall>a\\<in>set wa.\n                                 a \\<in> set \\<Sigma>) \\<and>\n                             Ball (set Ia)\n                              (case_sum (\\<lambda>p. p < length wa)\n                                (\\<lambda>P.\n                                    \\<forall>p\\<in>P.\n p < length wa))) \\<and>\n                            (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                                case Ia ! i of Inl x \\<Rightarrow> True\n                                | Inr x \\<Rightarrow> False) \\<and>\n                            (\\<forall>i\n\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                                case Ia ! i of Inl x \\<Rightarrow> False\n                                | Inr x \\<Rightarrow> True)\n 2. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "then"], ["proof (chain)\npicking this:\n  length I = n + 1\n  w \\<noteq> []\n  \\<forall>i\\<in>X.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>{0..<n + 1} - X.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n  \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\n  Ball (set I)\n   (case_sum (\\<lambda>p. p < length w)\n     (\\<lambda>P. \\<forall>p\\<in>P. p < length w))", "obtain p Is where \"I = p # Is\""], ["proof (prove)\nusing this:\n  length I = n + 1\n  w \\<noteq> []\n  \\<forall>i\\<in>X.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>{0..<n + 1} - X.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n  \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\n  Ball (set I)\n   (case_sum (\\<lambda>p. p < length w)\n     (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\n\ngoal (1 subgoal):\n 1. (\\<And>p Is. I = p # Is \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I) auto"], ["proof (state)\nthis:\n  I = p # Is\n\ngoal (2 subgoals):\n 1. \\<And>x xa w I.\n       \\<lbrakk>enc (w, I) \\<in> Z; length I = n + 1; w \\<noteq> [];\n        \\<forall>i\\<in>X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<n + 1} - X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>wa Ia.\n                            map \\<pi> (enc (w, I)) = enc (wa, Ia) \\<and>\n                            length Ia = n \\<and>\n                            (0 < length wa \\<and>\n                             (\\<forall>a\\<in>set wa.\n                                 a \\<in> set \\<Sigma>) \\<and>\n                             Ball (set Ia)\n                              (case_sum (\\<lambda>p. p < length wa)\n                                (\\<lambda>P.\n                                    \\<forall>p\\<in>P.\n p < length wa))) \\<and>\n                            (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                                case Ia ! i of Inl x \\<Rightarrow> True\n                                | Inr x \\<Rightarrow> False) \\<and>\n                            (\\<forall>i\n\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                                case Ia ! i of Inl x \\<Rightarrow> False\n                                | Inr x \\<Rightarrow> True)\n 2. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "then"], ["proof (chain)\npicking this:\n  I = p # Is", "show \"\\<exists>w' I'.\n      map \\<pi> (enc (w, I)) = enc (w', I') \\<and>\n      length I' = n \\<and> (0 < length w' \\<and> (\\<forall>a\\<in>set w'. a \\<in> set \\<Sigma>) \\<and>\n      Ball (set I') (case_sum (\\<lambda>p. p < length w') (\\<lambda>P. \\<forall>p\\<in>P. p < length w'))) \\<and>\n      (\\<forall>i\\<in>?fX. case I' ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False) \\<and>\n      (\\<forall>i\\<in>?fY. case I' ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\""], ["proof (prove)\nusing this:\n  I = p # Is\n\ngoal (1 subgoal):\n 1. \\<exists>w' I'.\n       map \\<pi> (enc (w, I)) = enc (w', I') \\<and>\n       length I' = n \\<and>\n       (0 < length w' \\<and>\n        (\\<forall>a\\<in>set w'. a \\<in> set \\<Sigma>) \\<and>\n        Ball (set I')\n         (case_sum (\\<lambda>p. p < length w')\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w'))) \\<and>\n       (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I' ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False) \\<and>\n       (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n           case I' ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True)", "proof (hypsubst, intro exI[of _ w] exI[of _ Is] conjI ballI project_enc)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<lbrakk>I = p # Is; I = p # Is\\<rbrakk> \\<Longrightarrow> length Is = n\n 2. \\<lbrakk>I = p # Is; I = p # Is\\<rbrakk> \\<Longrightarrow> 0 < length w\n 3. \\<And>a.\n       \\<lbrakk>I = p # Is; I = p # Is; a \\<in> set w\\<rbrakk>\n       \\<Longrightarrow> a \\<in> set \\<Sigma>\n 4. \\<And>x.\n       \\<lbrakk>I = p # Is; I = p # Is; x \\<in> set Is\\<rbrakk>\n       \\<Longrightarrow> case x of Inl p \\<Rightarrow> p < length w\n                         | Inr P \\<Rightarrow>\n                             \\<forall>p\\<in>P. p < length w\n 5. \\<And>i.\n       \\<lbrakk>I = p # Is; I = p # Is;\n        i \\<in> (\\<lambda>x. x - 1) ` X\\<rbrakk>\n       \\<Longrightarrow> case Is ! i of Inl x \\<Rightarrow> True\n                         | Inr x \\<Rightarrow> False\n 6. \\<And>i.\n       \\<lbrakk>I = p # Is; I = p # Is;\n        i \\<in> {0..<n} - (\\<lambda>x. x - 1) ` X\\<rbrakk>\n       \\<Longrightarrow> case Is ! i of Inl x \\<Rightarrow> False\n                         | Inr x \\<Rightarrow> True", "fix i"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<lbrakk>I = p # Is; I = p # Is\\<rbrakk> \\<Longrightarrow> length Is = n\n 2. \\<lbrakk>I = p # Is; I = p # Is\\<rbrakk> \\<Longrightarrow> 0 < length w\n 3. \\<And>a.\n       \\<lbrakk>I = p # Is; I = p # Is; a \\<in> set w\\<rbrakk>\n       \\<Longrightarrow> a \\<in> set \\<Sigma>\n 4. \\<And>x.\n       \\<lbrakk>I = p # Is; I = p # Is; x \\<in> set Is\\<rbrakk>\n       \\<Longrightarrow> case x of Inl p \\<Rightarrow> p < length w\n                         | Inr P \\<Rightarrow>\n                             \\<forall>p\\<in>P. p < length w\n 5. \\<And>i.\n       \\<lbrakk>I = p # Is; I = p # Is;\n        i \\<in> (\\<lambda>x. x - 1) ` X\\<rbrakk>\n       \\<Longrightarrow> case Is ! i of Inl x \\<Rightarrow> True\n                         | Inr x \\<Rightarrow> False\n 6. \\<And>i.\n       \\<lbrakk>I = p # Is; I = p # Is;\n        i \\<in> {0..<n} - (\\<lambda>x. x - 1) ` X\\<rbrakk>\n       \\<Longrightarrow> case Is ! i of Inl x \\<Rightarrow> False\n                         | Inr x \\<Rightarrow> True", "assume \"i \\<in> ?fY\""], ["proof (state)\nthis:\n  i \\<in> {0..<n} - (\\<lambda>x. x - 1) ` X\n\ngoal (6 subgoals):\n 1. \\<lbrakk>I = p # Is; I = p # Is\\<rbrakk> \\<Longrightarrow> length Is = n\n 2. \\<lbrakk>I = p # Is; I = p # Is\\<rbrakk> \\<Longrightarrow> 0 < length w\n 3. \\<And>a.\n       \\<lbrakk>I = p # Is; I = p # Is; a \\<in> set w\\<rbrakk>\n       \\<Longrightarrow> a \\<in> set \\<Sigma>\n 4. \\<And>x.\n       \\<lbrakk>I = p # Is; I = p # Is; x \\<in> set Is\\<rbrakk>\n       \\<Longrightarrow> case x of Inl p \\<Rightarrow> p < length w\n                         | Inr P \\<Rightarrow>\n                             \\<forall>p\\<in>P. p < length w\n 5. \\<And>i.\n       \\<lbrakk>I = p # Is; I = p # Is;\n        i \\<in> (\\<lambda>x. x - 1) ` X\\<rbrakk>\n       \\<Longrightarrow> case Is ! i of Inl x \\<Rightarrow> True\n                         | Inr x \\<Rightarrow> False\n 6. \\<And>i.\n       \\<lbrakk>I = p # Is; I = p # Is;\n        i \\<in> {0..<n} - (\\<lambda>x. x - 1) ` X\\<rbrakk>\n       \\<Longrightarrow> case Is ! i of Inl x \\<Rightarrow> False\n                         | Inr x \\<Rightarrow> True", "then"], ["proof (chain)\npicking this:\n  i \\<in> {0..<n} - (\\<lambda>x. x - 1) ` X", "show \"case Is ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\""], ["proof (prove)\nusing this:\n  i \\<in> {0..<n} - (\\<lambda>x. x - 1) ` X\n\ngoal (1 subgoal):\n 1. case Is ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True", "using *[unfolded \\<open>I = p # Is\\<close>] assms(1)"], ["proof (prove)\nusing this:\n  i \\<in> {0..<n} - (\\<lambda>x. x - 1) ` X\n  length (p # Is) = n + 1\n  w \\<noteq> []\n  \\<forall>i\\<in>X.\n     case (p # Is) ! i of Inl x \\<Rightarrow> True\n     | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>{0..<n + 1} - X.\n     case (p # Is) ! i of Inl x \\<Rightarrow> False\n     | Inr x \\<Rightarrow> True\n  \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\n  Ball (set (p # Is))\n   (case_sum (\\<lambda>p. p < length w)\n     (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\n  0 \\<notin> X\n\ngoal (1 subgoal):\n 1. case Is ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True", "by (cases \"i = 0\") (fastforce simp: nth_Cons' image_iff split: sum.splits if_splits)+"], ["proof (state)\nthis:\n  case Is ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n\ngoal (5 subgoals):\n 1. \\<lbrakk>I = p # Is; I = p # Is\\<rbrakk> \\<Longrightarrow> length Is = n\n 2. \\<lbrakk>I = p # Is; I = p # Is\\<rbrakk> \\<Longrightarrow> 0 < length w\n 3. \\<And>a.\n       \\<lbrakk>I = p # Is; I = p # Is; a \\<in> set w\\<rbrakk>\n       \\<Longrightarrow> a \\<in> set \\<Sigma>\n 4. \\<And>x.\n       \\<lbrakk>I = p # Is; I = p # Is; x \\<in> set Is\\<rbrakk>\n       \\<Longrightarrow> case x of Inl p \\<Rightarrow> p < length w\n                         | Inr P \\<Rightarrow>\n                             \\<forall>p\\<in>P. p < length w\n 5. \\<And>i.\n       \\<lbrakk>I = p # Is; I = p # Is;\n        i \\<in> (\\<lambda>x. x - 1) ` X\\<rbrakk>\n       \\<Longrightarrow> case Is ! i of Inl x \\<Rightarrow> True\n                         | Inr x \\<Rightarrow> False", "qed (insert *[unfolded \\<open>I = p # Is\\<close>] assms(1), auto simp: nth_Cons' split: sum.splits if_splits)"], ["proof (state)\nthis:\n  \\<exists>w' I'.\n     map \\<pi> (enc (w, I)) = enc (w', I') \\<and>\n     length I' = n \\<and>\n     (0 < length w' \\<and>\n      (\\<forall>a\\<in>set w'. a \\<in> set \\<Sigma>) \\<and>\n      Ball (set I')\n       (case_sum (\\<lambda>p. p < length w')\n         (\\<lambda>P. \\<forall>p\\<in>P. p < length w'))) \\<and>\n     (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n         case I' ! i of Inl x \\<Rightarrow> True\n         | Inr x \\<Rightarrow> False) \\<and>\n     (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n         case I' ! i of Inl x \\<Rightarrow> False\n         | Inr x \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "fix x w I"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "assume *: \"w \\<noteq> []\" \"x \\<in> Z\" \"map \\<pi> x = enc (w, I)\"\n      \"\\<forall>i\\<in>?fX. case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\"\n      \"\\<forall>i\\<in>{0 ..< length I} - ?fX. case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\"\n      \"\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\" \"Ball (set I) (case_sum (\\<lambda>p. p < length w) (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\""], ["proof (state)\nthis:\n  w \\<noteq> []\n  x \\<in> Z\n  map \\<pi> x = enc (w, I)\n  \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n  \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\n  Ball (set I)\n   (case_sum (\\<lambda>p. p < length w)\n     (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\n\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "moreover"], ["proof (state)\nthis:\n  w \\<noteq> []\n  x \\<in> Z\n  map \\<pi> x = enc (w, I)\n  \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n  \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\n  Ball (set I)\n   (case_sum (\\<lambda>p. p < length w)\n     (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\n\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "from assms(1)"], ["proof (chain)\npicking this:\n  0 \\<notin> X", "have \"\\<forall>x \\<in> X. x > 0\" \"\\<And>x y. x - Suc 0 = y - Suc 0 \\<longleftrightarrow> \n      x = y \\<or> (x = 0 \\<and> y = Suc 0) \\<or> (x = Suc 0 \\<and> y = 0)\""], ["proof (prove)\nusing this:\n  0 \\<notin> X\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. 0 < x &&&\n    (\\<And>x y.\n        (x - Suc 0 = y - Suc 0) =\n        (x = y \\<or> x = 0 \\<and> y = Suc 0 \\<or> x = Suc 0 \\<and> y = 0))", "by (metis neq0_conv) (metis One_nat_def Suc_diff_1 diff_0_eq_0 diff_self_eq_0 neq0_conv)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. 0 < x\n  (?x - Suc 0 = ?y - Suc 0) =\n  (?x = ?y \\<or> ?x = 0 \\<and> ?y = Suc 0 \\<or> ?x = Suc 0 \\<and> ?y = 0)\n\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. 0 < x\n  (?x - Suc 0 = ?y - Suc 0) =\n  (?x = ?y \\<or> ?x = 0 \\<and> ?y = Suc 0 \\<or> ?x = Suc 0 \\<and> ?y = 0)\n\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "from *(2) assms(3)"], ["proof (chain)\npicking this:\n  x \\<in> Z\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))", "have \"x = enc (w, Inr (positions_in_row x 0) # I)\""], ["proof (prove)\nusing this:\n  x \\<in> Z\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. x = enc (w, Inr (positions_in_row x 0) # I)", "apply (intro project_enc_extend [OF *(3)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z;\n     Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []", "apply (simp only: \\<sigma>_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z;\n     Z \\<subseteq> lists\n                    ((set \\<circ>\n                      (\\<lambda>n.\n                          concat\n                           (map (\\<lambda>bs.\n                                    map (\\<lambda>a. (a, bs)) \\<Sigma>)\n                             (List.n_lists n [True, False]))))\n                      (n + 1))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x = enc (w, Inr (positions_in_row x 0) # I)\n\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "moreover"], ["proof (state)\nthis:\n  x = enc (w, Inr (positions_in_row x 0) # I)\n\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "from arg_cong[OF *(3), of length]"], ["proof (chain)\npicking this:\n  length (map \\<pi> x) = length (enc (w, I))", "have \"length w = length x\""], ["proof (prove)\nusing this:\n  length (map \\<pi> x) = length (enc (w, I))\n\ngoal (1 subgoal):\n 1. length w = length x", "by simp"], ["proof (state)\nthis:\n  length w = length x\n\ngoal (1 subgoal):\n 1. \\<And>x xa w I.\n       \\<lbrakk>xa \\<in> Z; map \\<pi> xa = enc (w, I); n = length I;\n        w \\<noteq> [];\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I)\n         (case_sum (\\<lambda>p. p < length w)\n           (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter>\n                                {enc (w, Ia) |w Ia.\n                                 length Ia = length I + 1 \\<and>\n                                 (0 < length w \\<and>\n                                  (\\<forall>a\\<in>set w.\na \\<in> set \\<Sigma>) \\<and>\n                                  Ball (set Ia)\n                                   (case_sum (\\<lambda>p. p < length w)\n                                     (\\<lambda>P.\n   \\<forall>p\\<in>P. p < length w))) \\<and>\n                                 (\\<forall>i\\<in>X.\n                                     case Ia ! i of Inl x \\<Rightarrow> True\n                                     | Inr x \\<Rightarrow> False) \\<and>\n                                 (\\<forall>i\\<in>{0..<length I + 1} - X.\n                                     case Ia ! i of\n                                     Inl x \\<Rightarrow> False\n                                     | Inr x \\<Rightarrow> True)})", "ultimately"], ["proof (chain)\npicking this:\n  w \\<noteq> []\n  x \\<in> Z\n  map \\<pi> x = enc (w, I)\n  \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n  \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\n  Ball (set I)\n   (case_sum (\\<lambda>p. p < length w)\n     (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\n  \\<forall>x\\<in>X. 0 < x\n  (?x - Suc 0 = ?y - Suc 0) =\n  (?x = ?y \\<or> ?x = 0 \\<and> ?y = Suc 0 \\<or> ?x = Suc 0 \\<and> ?y = 0)\n  x = enc (w, Inr (positions_in_row x 0) # I)\n  length w = length x", "show \" map \\<pi> x \\<in> map \\<pi> `\n      (Z \\<inter> {enc (w, I') |w I'. length I' = length I + 1 \\<and> (0 < length w \\<and> (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n         Ball (set I') (case_sum (\\<lambda>p. p < length w) (\\<lambda>P. \\<forall>p\\<in>P. p < length w))) \\<and>\n           (\\<forall>i\\<in>X. case I' ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False) \\<and>\n           (\\<forall>i\\<in>{0..<length I + 1} - X. case I' ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)})\""], ["proof (prove)\nusing this:\n  w \\<noteq> []\n  x \\<in> Z\n  map \\<pi> x = enc (w, I)\n  \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n     case I ! i of Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False\n  \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n     case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True\n  \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>\n  Ball (set I)\n   (case_sum (\\<lambda>p. p < length w)\n     (\\<lambda>P. \\<forall>p\\<in>P. p < length w))\n  \\<forall>x\\<in>X. 0 < x\n  (?x - Suc 0 = ?y - Suc 0) =\n  (?x = ?y \\<or> ?x = 0 \\<and> ?y = Suc 0 \\<or> ?x = Suc 0 \\<and> ?y = 0)\n  x = enc (w, Inr (positions_in_row x 0) # I)\n  length w = length x\n\ngoal (1 subgoal):\n 1. map \\<pi> x\n    \\<in> map \\<pi> `\n          (Z \\<inter>\n           {enc (w, I') |w I'.\n            length I' = length I + 1 \\<and>\n            (0 < length w \\<and>\n             (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n             Ball (set I')\n              (case_sum (\\<lambda>p. p < length w)\n                (\\<lambda>P. \\<forall>p\\<in>P. p < length w))) \\<and>\n            (\\<forall>i\\<in>X.\n                case I' ! i of Inl x \\<Rightarrow> True\n                | Inr x \\<Rightarrow> False) \\<and>\n            (\\<forall>i\\<in>{0..<length I + 1} - X.\n                case I' ! i of Inl x \\<Rightarrow> False\n                | Inr x \\<Rightarrow> True)})", "by (intro imageI CollectI conjI IntI exI[of _ w] exI[of _ \"Inr (positions_in_row x 0) # I\"])\n        (auto simp: nth_Cons' positions_in_row elim!: bspec simp del: enc.simps)"], ["proof (state)\nthis:\n  map \\<pi> x\n  \\<in> map \\<pi> `\n        (Z \\<inter>\n         {enc (w, I') |w I'.\n          length I' = length I + 1 \\<and>\n          (0 < length w \\<and>\n           (\\<forall>a\\<in>set w. a \\<in> set \\<Sigma>) \\<and>\n           Ball (set I')\n            (case_sum (\\<lambda>p. p < length w)\n              (\\<lambda>P. \\<forall>p\\<in>P. p < length w))) \\<and>\n          (\\<forall>i\\<in>X.\n              case I' ! i of Inl x \\<Rightarrow> True\n              | Inr x \\<Rightarrow> False) \\<and>\n          (\\<forall>i\\<in>{0..<length I + 1} - X.\n              case I' ! i of Inl x \\<Rightarrow> False\n              | Inr x \\<Rightarrow> True)})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_project_ENC:\n  assumes \"X \\<subseteq> {0 ..< n + 1}\" \"Z \\<subseteq> lists ((set o \\<sigma> \\<Sigma>) (n + 1))\"\n  shows \"map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    (if 0 \\<in> X\n    then map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) - {[]}\n    else map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) - {[]})\"\n    (is \"?L = (if _ then ?R1 else ?R2)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    (if 0 \\<in> X\n     then map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n          lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n          {[]}\n     else map \\<pi> ` Z \\<inter>\n          lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n          {[]})", "proof (split if_splits, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}\n 2. 0 \\<notin> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "assume 0: \"0 \\<notin> X\""], ["proof (state)\nthis:\n  0 \\<notin> X\n\ngoal (2 subgoals):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}\n 2. 0 \\<notin> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "from assms"], ["proof (chain)\npicking this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))", "have fin: \"finite X\" \"finite ((\\<lambda>x. x - 1) ` X)\""], ["proof (prove)\nusing this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. finite X &&& finite ((\\<lambda>x. x - 1) ` X)", "by (auto elim: finite_subset intro!: finite_imageI[of \"X\"])"], ["proof (state)\nthis:\n  finite X\n  finite ((\\<lambda>x. x - 1) ` X)\n\ngoal (2 subgoals):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}\n 2. 0 \\<notin> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "from 0"], ["proof (chain)\npicking this:\n  0 \\<notin> X", "show \"?L = ?R2\""], ["proof (prove)\nusing this:\n  0 \\<notin> X\n\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "using map_project_Int_ENC[OF 0 assms]"], ["proof (prove)\nusing this:\n  0 \\<notin> X\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}\n\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "unfolding lists_image[symmetric] \\<pi>_\\<sigma>\n      Int_absorb1[OF lang_subset_lists[OF wf_rexp_ENC[OF fin(1)]], of \"n + 1\"]\n      Int_absorb1[OF lang_subset_lists[OF wf_rexp_ENC[OF fin(2)]], of n]"], ["proof (prove)\nusing this:\n  0 \\<notin> X\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X)) - {[]}\n\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` Z \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "by auto"], ["proof (state)\nthis:\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> ` Z \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n  {[]}\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "assume \"0 \\<in> X\""], ["proof (state)\nthis:\n  0 \\<in> X\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "hence 0: \"0 \\<notin> X - {0}\" and X: \"X = {0} \\<union> (X - {0})\""], ["proof (prove)\nusing this:\n  0 \\<in> X\n\ngoal (1 subgoal):\n 1. 0 \\<notin> X - {0} &&& X = {0} \\<union> (X - {0})", "by auto"], ["proof (state)\nthis:\n  0 \\<notin> X - {0}\n  X = {0} \\<union> (X - {0})\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "from assms"], ["proof (chain)\npicking this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))", "have fin: \"finite X\""], ["proof (prove)\nusing this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. finite X", "by (auto elim: finite_subset intro!: finite_imageI[of \"X\"])"], ["proof (state)\nthis:\n  finite X\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "have \"?L = map \\<pi> ` ((Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter> lang (n + 1) (ENC (n + 1) (X - {0})) - {[]})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> `\n    (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n     lang (n + 1) (ENC (n + 1) (X - {0})) -\n     {[]})", "unfolding Int_assoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> `\n    (Z \\<inter>\n     (lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n      lang (n + 1) (ENC (n + 1) (X - {0}))) -\n     {[]})", "using assms"], ["proof (prove)\nusing this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> `\n    (Z \\<inter>\n     (lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n      lang (n + 1) (ENC (n + 1) (X - {0}))) -\n     {[]})", "by (subst lang_ENC_split[OF fin X, of \"n + 1\"]) auto"], ["proof (state)\nthis:\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> `\n  (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n   lang (n + 1) (ENC (n + 1) (X - {0})) -\n   {[]})\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "also"], ["proof (state)\nthis:\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> `\n  (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n   lang (n + 1) (ENC (n + 1) (X - {0})) -\n   {[]})\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "have \"\\<dots> = ?R1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> `\n    (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n     lang (n + 1) (ENC (n + 1) (X - {0})) -\n     {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "using 0 assms"], ["proof (prove)\nusing this:\n  0 \\<notin> X - {0}\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. map \\<pi> `\n    (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n     lang (n + 1) (ENC (n + 1) (X - {0})) -\n     {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "by (elim map_project_Int_ENC) auto"], ["proof (state)\nthis:\n  map \\<pi> `\n  (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n   lang (n + 1) (ENC (n + 1) (X - {0})) -\n   {[]}) =\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n  {[]}\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "finally"], ["proof (chain)\npicking this:\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n  {[]}", "show \"?L = ?R1\""], ["proof (prove)\nusing this:\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n  {[]}\n\ngoal (1 subgoal):\n 1. map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n    map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n    {[]}", "."], ["proof (state)\nthis:\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X) - {[]}) =\n  map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))) -\n  {[]}\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"\\<LL> \\<equiv> project.lang (set \\<circ> \\<sigma> \\<Sigma>) \\<pi>\""], ["", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of'_rexp_of'':\n  \"wf_formula n \\<phi> \\<Longrightarrow> lang n (rexp_of' n \\<phi>) - {[]} = lang n (rexp_of'' n \\<phi>) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang n (rexp_of' n \\<phi>) - {[]} = lang n (rexp_of'' n \\<phi>) - {[]}", "unfolding rexp_of'_def rexp_of''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang n (rexp.Inter (rexp_of_alt n \\<phi>) (ENC n (FOV \\<phi>))) - {[]} =\n    lang n (rexp.Inter (rexp_of_alt' n \\<phi>) (ENC n (FOV \\<phi>))) - {[]}", "proof (induction \\<phi> arbitrary: n)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FNot \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp.Inter (rexp_of_alt ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]} =\n  lang ?n1 (rexp.Inter (rexp_of_alt' ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]}\n  wf_formula n (FNot \\<phi>)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence \"wf_formula n \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp.Inter (rexp_of_alt ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]} =\n  lang ?n1 (rexp.Inter (rexp_of_alt' ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]}\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>", "by simp"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "with FNot.IH"], ["proof (chain)\npicking this:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp.Inter (rexp_of_alt ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]} =\n  lang ?n1 (rexp.Inter (rexp_of_alt' ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]}\n  wf_formula n \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp.Inter (rexp_of_alt ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]} =\n  lang ?n1 (rexp.Inter (rexp_of_alt' ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]}\n  wf_formula n \\<phi>\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n       (ENC n (FOV (FNot \\<phi>)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FNot \\<phi>))\n       (ENC n (FOV (FNot \\<phi>)))) -\n    {[]}", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps ENC_Not"], ["proof (prove)\nusing this:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp_of_alt ?n1 \\<phi>) \\<inter>\n  lang ?n1 (ENC ?n1 (FOV \\<phi>)) -\n  {[]} =\n  lang ?n1 (rexp_of_alt' ?n1 \\<phi>) \\<inter>\n  lang ?n1 (ENC ?n1 (FOV \\<phi>)) -\n  {[]}\n  wf_formula n \\<phi>\n\ngoal (1 subgoal):\n 1. (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n     lang n (rexp_of_alt n \\<phi>)) \\<inter>\n    lang n (ENC n (FOV \\<phi>)) -\n    {[]} =\n    (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n     lang n (rexp_of_alt' n \\<phi>)) \\<inter>\n    lang n (ENC n (FOV \\<phi>)) -\n    {[]}", "by blast"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FNot \\<phi>)) (ENC n (FOV (FNot \\<phi>)))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FNot \\<phi>)) (ENC n (FOV (FNot \\<phi>)))) -\n  {[]}\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n1 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n1\n   (rexp.Inter (rexp_of_alt ?n1 \\<phi>\\<^sub>1)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang ?n1\n   (rexp.Inter (rexp_of_alt' ?n1 \\<phi>\\<^sub>1)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  wf_formula ?n1 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n1\n   (rexp.Inter (rexp_of_alt ?n1 \\<phi>\\<^sub>2)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang ?n1\n   (rexp.Inter (rexp_of_alt' ?n1 \\<phi>\\<^sub>2)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence wf1: \"wf_formula n \\<phi>\\<^sub>1\" and wf2: \"wf_formula n \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  wf_formula ?n1 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n1\n   (rexp.Inter (rexp_of_alt ?n1 \\<phi>\\<^sub>1)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang ?n1\n   (rexp.Inter (rexp_of_alt' ?n1 \\<phi>\\<^sub>1)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  wf_formula ?n1 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n1\n   (rexp.Inter (rexp_of_alt ?n1 \\<phi>\\<^sub>2)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang ?n1\n   (rexp.Inter (rexp_of_alt' ?n1 \\<phi>\\<^sub>2)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>\\<^sub>1 &&& wf_formula n \\<phi>\\<^sub>2", "by force+"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\\<^sub>1\n  wf_formula n \\<phi>\\<^sub>2\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "from FAnd.IH(1)[OF wf1] FAnd.IH(2)[OF wf2]"], ["proof (chain)\npicking this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}", "show ?case"], ["proof (prove)\nusing this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]}", "using ENC_And[OF FAnd.prems]"], ["proof (prove)\nusing this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) - {[]}\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n              {[]}\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]}", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1)) -\n  {[]} =\n  lang n (rexp_of_alt' n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1)) -\n  {[]}\n  lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n  {[]} =\n  lang n (rexp_of_alt' n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n  {[]}\n  lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) - {[]}\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n              {[]}\n\ngoal (1 subgoal):\n 1. lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n    lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n    lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) -\n    {[]} =\n    lang n (rexp_of_alt' n \\<phi>\\<^sub>1) \\<inter>\n    lang n (rexp_of_alt' n \\<phi>\\<^sub>2) \\<inter>\n    lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) -\n    {[]}", "by blast"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n  {[]}\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n1 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n1\n   (rexp.Inter (rexp_of_alt ?n1 \\<phi>\\<^sub>1)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang ?n1\n   (rexp.Inter (rexp_of_alt' ?n1 \\<phi>\\<^sub>1)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  wf_formula ?n1 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n1\n   (rexp.Inter (rexp_of_alt ?n1 \\<phi>\\<^sub>2)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang ?n1\n   (rexp.Inter (rexp_of_alt' ?n1 \\<phi>\\<^sub>2)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence wf1: \"wf_formula n \\<phi>\\<^sub>1\" and wf2: \"wf_formula n \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  wf_formula ?n1 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n1\n   (rexp.Inter (rexp_of_alt ?n1 \\<phi>\\<^sub>1)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang ?n1\n   (rexp.Inter (rexp_of_alt' ?n1 \\<phi>\\<^sub>1)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  wf_formula ?n1 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n1\n   (rexp.Inter (rexp_of_alt ?n1 \\<phi>\\<^sub>2)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang ?n1\n   (rexp.Inter (rexp_of_alt' ?n1 \\<phi>\\<^sub>2)\n     (ENC ?n1 (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>\\<^sub>1 &&& wf_formula n \\<phi>\\<^sub>2", "by force+"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\\<^sub>1\n  wf_formula n \\<phi>\\<^sub>2\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) -\n                   {[]};\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]} =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2))) -\n           {[]};\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "from FOr.IH(1)[OF wf1] FOr.IH(2)[OF wf2]"], ["proof (chain)\npicking this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}", "show ?case"], ["proof (prove)\nusing this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]}", "using ENC_Or[OF FOr.prems]"], ["proof (prove)\nusing this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) -\n  {[]}\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) -\n  {[]}\n  lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) - {[]}\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n              {[]}\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n    {[]}", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1)) -\n  {[]} =\n  lang n (rexp_of_alt' n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1)) -\n  {[]}\n  lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n  {[]} =\n  lang n (rexp_of_alt' n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n  {[]}\n  lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) - {[]}\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2)) -\n              {[]}\n\ngoal (1 subgoal):\n 1. (lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<union>\n     lang n (rexp_of_alt n \\<phi>\\<^sub>2)) \\<inter>\n    lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) -\n    {[]} =\n    (lang n (rexp_of_alt' n \\<phi>\\<^sub>1) \\<union>\n     lang n (rexp_of_alt' n \\<phi>\\<^sub>2)) \\<inter>\n    lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) -\n    {[]}", "by blast"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) -\n  {[]}\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FExists \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp.Inter (rexp_of_alt ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]} =\n  lang ?n1 (rexp.Inter (rexp_of_alt' ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]}\n  wf_formula n (FExists \\<phi>)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence wf: \"wf_formula (n + 1) \\<phi>\" and 0: \"0 \\<in> FOV \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp.Inter (rexp_of_alt ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]} =\n  lang ?n1 (rexp.Inter (rexp_of_alt' ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]}\n  wf_formula n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula (n + 1) \\<phi> &&& 0 \\<in> FOV \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) -\n                         {[]}\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "then"], ["proof (chain)\npicking this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>)))) -\n    {[]}", "using ENC_Exists[OF FExists.prems] map_project_ENC[of \"FOV \\<phi>\" n] max_idx_vars[of \"n + 1\" \\<phi>]\n      wf_rexp_of_alt'[OF wf] 0"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n  lang n (ENC n (FOV (FExists \\<phi>))) - {[]} =\n  map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n  \\<lbrakk>FOV \\<phi> \\<subseteq> {0..<n + 1};\n   ?Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\\<rbrakk>\n  \\<Longrightarrow> map \\<pi> `\n                    (?Z \\<inter> lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) -\n                     {[]}) =\n                    (if 0 \\<in> FOV \\<phi>\n                     then map \\<pi> `\n                          (?Z \\<inter>\n                           lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n                          lang n\n                           (ENC n\n                             ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                          {[]}\n                     else map \\<pi> ` ?Z \\<inter>\n                          lang n\n                           (ENC n\n                             ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                          {[]})\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n  0 \\<in> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>)))) -\n    {[]}", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps Int_Diff_both"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n  lang n (ENC n (FOV (FExists \\<phi>))) - {[]} =\n  map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n  \\<lbrakk>FOV \\<phi> \\<subseteq> {0..<n + 1};\n   ?Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\\<rbrakk>\n  \\<Longrightarrow> map \\<pi> `\n                    ((?Z - {[]}) \\<inter>\n                     (lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) - {[]})) =\n                    (if 0 \\<in> FOV \\<phi>\n                     then (map \\<pi> `\n                           (?Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) -\n                           {[]}) \\<inter>\n                          (lang n\n                            (ENC n\n                              ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                           {[]})\n                     else (map \\<pi> ` ?Z - {[]}) \\<inter>\n                          (lang n\n                            (ENC n\n                              ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                           {[]}))\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n  0 \\<in> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. (map \\<pi> `\n     (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n      lang (n + 1) (ENC (n + 1) (FOV \\<phi>))) -\n     {[]}) \\<inter>\n    (lang n (ENC n (FOV (FExists \\<phi>))) - {[]}) =\n    (map \\<pi> `\n     (lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) \\<inter>\n      lang (n + 1) (ENC (n + 1) {0})) -\n     {[]}) \\<inter>\n    (lang n (ENC n (FOV (FExists \\<phi>))) - {[]})", "unfolding map_project_empty FExists.IH[OF wf, unfolded lang.simps]"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n  lang n (ENC n (FOV (FExists \\<phi>))) - {[]} =\n  map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n  \\<lbrakk>FOV \\<phi> \\<subseteq> {0..<n + 1};\n   ?Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\\<rbrakk>\n  \\<Longrightarrow> map \\<pi> `\n                    ((?Z - {[]}) \\<inter>\n                     (lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) - {[]})) =\n                    (if 0 \\<in> FOV \\<phi>\n                     then map \\<pi> `\n                          (?Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) -\n                           {[]}) \\<inter>\n                          (lang n\n                            (ENC n\n                              ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                           {[]})\n                     else map \\<pi> ` (?Z - {[]}) \\<inter>\n                          (lang n\n                            (ENC n\n                              ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                           {[]}))\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n  0 \\<in> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. map \\<pi> `\n    (lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) \\<inter>\n     lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) -\n     {[]}) \\<inter>\n    (lang n (ENC n (FOV (FExists \\<phi>))) - {[]}) =\n    map \\<pi> `\n    (lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) \\<inter>\n     lang (n + 1) (ENC (n + 1) {0}) -\n     {[]}) \\<inter>\n    (lang n (ENC n (FOV (FExists \\<phi>))) - {[]})", "by (intro trans[OF arg_cong2[of _ _ _ _ \"(\\<inter>)\", OF map_project_ENC[OF _ lang_subset_lists] refl]])\n      fastforce+"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n     (ENC n (FOV (FExists \\<phi>)))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n     (ENC n (FOV (FExists \\<phi>)))) -\n  {[]}\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "case (FEXISTS \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp.Inter (rexp_of_alt ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]} =\n  lang ?n1 (rexp.Inter (rexp_of_alt' ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]}\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "hence wf: \"wf_formula (n + 1) \\<phi>\" and 0: \"0 \\<notin> FOV \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n1 \\<phi> \\<Longrightarrow>\n  lang ?n1 (rexp.Inter (rexp_of_alt ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]} =\n  lang ?n1 (rexp.Inter (rexp_of_alt' ?n1 \\<phi>) (ENC ?n1 (FOV \\<phi>))) -\n  {[]}\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula (n + 1) \\<phi> &&& 0 \\<notin> FOV \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]} =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>))) -\n                   {[]};\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]} =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) -\n                         {[]}", "then"], ["proof (chain)\npicking this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>)))) -\n    {[]}", "using ENC_EXISTS[OF FEXISTS.prems] map_project_ENC[of \"FOV \\<phi>\" n] max_idx_vars[of \"n + 1\" \\<phi>]\n      wf_rexp_of_alt'[OF wf] 0"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n  lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} =\n  map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n  \\<lbrakk>FOV \\<phi> \\<subseteq> {0..<n + 1};\n   ?Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\\<rbrakk>\n  \\<Longrightarrow> map \\<pi> `\n                    (?Z \\<inter> lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) -\n                     {[]}) =\n                    (if 0 \\<in> FOV \\<phi>\n                     then map \\<pi> `\n                          (?Z \\<inter>\n                           lang (n + 1) (ENC (n + 1) {0})) \\<inter>\n                          lang n\n                           (ENC n\n                             ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                          {[]}\n                     else map \\<pi> ` ?Z \\<inter>\n                          lang n\n                           (ENC n\n                             ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                          {[]})\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n  0 \\<notin> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>)))) -\n    {[]} =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>)))) -\n    {[]}", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps Int_Diff_both"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n  lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} =\n  map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]}\n  \\<lbrakk>FOV \\<phi> \\<subseteq> {0..<n + 1};\n   ?Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\\<rbrakk>\n  \\<Longrightarrow> map \\<pi> `\n                    ((?Z - {[]}) \\<inter>\n                     (lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) - {[]})) =\n                    (if 0 \\<in> FOV \\<phi>\n                     then (map \\<pi> `\n                           (?Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) -\n                           {[]}) \\<inter>\n                          (lang n\n                            (ENC n\n                              ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                           {[]})\n                     else (map \\<pi> ` ?Z - {[]}) \\<inter>\n                          (lang n\n                            (ENC n\n                              ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                           {[]}))\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n  0 \\<notin> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. (map \\<pi> `\n     (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n      lang (n + 1) (ENC (n + 1) (FOV \\<phi>))) -\n     {[]}) \\<inter>\n    (lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}) =\n    (map \\<pi> ` lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) - {[]}) \\<inter>\n    (lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]})", "unfolding map_project_empty FEXISTS.IH[OF wf, unfolded lang.simps]"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n  lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]} =\n  map \\<pi> ` (lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) - {[]})\n  \\<lbrakk>FOV \\<phi> \\<subseteq> {0..<n + 1};\n   ?Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\\<rbrakk>\n  \\<Longrightarrow> map \\<pi> `\n                    ((?Z - {[]}) \\<inter>\n                     (lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) - {[]})) =\n                    (if 0 \\<in> FOV \\<phi>\n                     then map \\<pi> `\n                          (?Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) -\n                           {[]}) \\<inter>\n                          (lang n\n                            (ENC n\n                              ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                           {[]})\n                     else map \\<pi> ` (?Z - {[]}) \\<inter>\n                          (lang n\n                            (ENC n\n                              ((\\<lambda>x. x - 1) ` (FOV \\<phi> - {0}))) -\n                           {[]}))\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n  0 \\<notin> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. map \\<pi> `\n    (lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) \\<inter>\n     lang (n + 1) (ENC (n + 1) (FOV \\<phi>)) -\n     {[]}) \\<inter>\n    (lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]}) =\n    map \\<pi> ` (lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) - {[]}) \\<inter>\n    (lang n (ENC n (FOV (FEXISTS \\<phi>))) - {[]})", "by (intro trans[OF arg_cong2[of _ _ _ _ \"(\\<inter>)\", OF map_project_ENC[OF _ lang_subset_lists] refl]])\n      fastforce+"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n     (ENC n (FOV (FEXISTS \\<phi>)))) -\n  {[]} =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n     (ENC n (FOV (FEXISTS \\<phi>)))) -\n  {[]}\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) -\n       {[]}\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) -\n       {[]}\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) -\n       {[]} =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2))\n          (ENC n (FOV (FIn x1 x2)))) -\n       {[]}", "qed simp_all"], ["", "theorem lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of': \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> = lang n (rexp_of' n \\<phi>) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n    lang n (rexp_of' n \\<phi>) - {[]}", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of_rexp_of'[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> = lang n (rexp_of n \\<phi>) - {[]}", "by (rule lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of)"], ["", "theorem lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of'': \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> = lang n (rexp_of'' n \\<phi>) - {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n    lang n (rexp_of'' n \\<phi>) - {[]}", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of'_rexp_of''[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>M\\<^sub>2\\<^sub>L n \\<phi> =\n    lang n (rexp_of' n \\<phi>) - {[]}", "by (rule lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of')"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}