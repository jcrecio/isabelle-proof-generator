{"file_name": "/home/qj213/afp-2021-10-22/thys/MSO_Regex_Equivalence/Pi_Regular_Set.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MSO_Regex_Equivalence", "problem_names": ["lemma [code]:\n  \"A @@ B = (%(xs, ys). xs @ ys) ` (A \\<times> B)\"", "lemma word_pow_alt: \"compow n w = concat (replicate n w)\"", "lemma concI[simp,intro]: \"u : A \\<Longrightarrow> v : B \\<Longrightarrow> u@v : A @@ B\"", "lemma concE[elim]: \nassumes \"w \\<in> A @@ B\"\nobtains u v where \"u \\<in> A\" \"v \\<in> B\" \"w = u@v\"", "lemma conc_mono: \"A \\<subseteq> C \\<Longrightarrow> B \\<subseteq> D \\<Longrightarrow> A @@ B \\<subseteq> C @@ D\"", "lemma conc_empty[simp]: shows \"{} @@ A = {}\" and \"A @@ {} = {}\"", "lemma conc_epsilon[simp]: shows \"{[]} @@ A = A\" and \"A @@ {[]} = A\"", "lemma conc_assoc: \"(A @@ B) @@ C = A @@ (B @@ C)\"", "lemma conc_Un_distrib:\nshows \"A @@ (B \\<union> C) = A @@ B \\<union> A @@ C\"\nand   \"(A \\<union> B) @@ C = A @@ C \\<union> B @@ C\"", "lemma conc_UNION_distrib:\nshows \"A @@ \\<Union>(M ` I) = \\<Union>((%i. A @@ M i) ` I)\"\nand   \"\\<Union>(M ` I) @@ A = \\<Union>((%i. M i @@ A) ` I)\"", "lemma hom_image_conc: \"\\<lbrakk>\\<And>xs ys. f (xs @ ys) = f xs @ f ys\\<rbrakk> \\<Longrightarrow> f ` (A @@ B) = f ` A @@ f ` B\"", "lemma map_image_conc[simp]: \"map f ` (A @@ B) = map f ` A @@ map f ` B\"", "lemma conc_subset_lists: \"A \\<subseteq> lists S \\<Longrightarrow> B \\<subseteq> lists S \\<Longrightarrow> A @@ B \\<subseteq> lists S\"", "lemma lang_pow_add: \"A ^^ (n + m) = A ^^ n @@ A ^^ m\"", "lemma lang_pow_simps: \"(A ^^ Suc n) = (A ^^ n @@ A)\"", "lemma lang_pow_empty: \"{} ^^ n = (if n = 0 then {[]} else {})\"", "lemma lang_pow_empty_Suc[simp]: \"({}::'a lang) ^^ Suc n = {}\"", "lemma conc_pow_comm:\n  shows \"A @@ (A ^^ n) = (A ^^ n) @@ A\"", "lemma length_lang_pow_ub:\n  \"ALL w : A. length w \\<le> k \\<Longrightarrow> w : A^^n \\<Longrightarrow> length w \\<le> k*n\"", "lemma length_lang_pow_lb:\n  \"ALL w : A. length w \\<ge> k \\<Longrightarrow> w : A^^n \\<Longrightarrow> length w \\<ge> k*n\"", "lemma lang_pow_subset_lists: \"A \\<subseteq> lists S \\<Longrightarrow> A ^^ n \\<subseteq> lists S\"", "lemma star_subset_lists: \"A \\<subseteq> lists S \\<Longrightarrow> star A \\<subseteq> lists S\"", "lemma star_if_lang_pow[simp]: \"w : A ^^ n \\<Longrightarrow> w : star A\"", "lemma Nil_in_star[iff]: \"[] : star A\"", "lemma star_if_lang[simp]: assumes \"w : A\" shows \"w : star A\"", "lemma append_in_starI[simp]:\nassumes \"u : star A\" and \"v : star A\" shows \"u@v : star A\"", "lemma conc_star_star: \"star A @@ star A = star A\"", "lemma conc_star_comm:\n  shows \"A @@ star A = star A @@ A\"", "lemma star_induct[consumes 1, case_names Nil append, induct set: star]:\nassumes \"w : star A\"\n  and \"P []\"\n  and step: \"!!u v. u : A \\<Longrightarrow> v : star A \\<Longrightarrow> P v \\<Longrightarrow> P (u@v)\"\nshows \"P w\"", "lemma star_empty[simp]: \"star {} = {[]}\"", "lemma star_epsilon[simp]: \"star {[]} = {[]}\"", "lemma star_idemp[simp]: \"star (star A) = star A\"", "lemma star_unfold_left: \"star A = A @@ star A \\<union> {[]}\" (is \"?L = ?R\")", "lemma concat_in_star: \"set ws \\<subseteq> A \\<Longrightarrow> concat ws : star A\"", "lemma in_star_iff_concat:\n  \"w : star A = (EX ws. set ws \\<subseteq> A & w = concat ws & [] \\<notin> set ws)\"\n  (is \"_ = (EX ws. ?R w ws)\")", "lemma star_conv_concat: \"star A = {concat ws|ws. set ws \\<subseteq> A & [] \\<notin> set ws}\"", "lemma star_insert_eps[simp]: \"star (insert [] A) = star(A)\"", "lemma star_decom: \n  assumes a: \"x \\<in> star A\" \"x \\<noteq> []\"\n  shows \"\\<exists>a b. x = a @ b \\<and> a \\<noteq> [] \\<and> a \\<in> A \\<and> b \\<in> star A\"", "lemma Ball_starI: \"\\<forall>a \\<in> set as. [a] \\<in> A \\<Longrightarrow> as \\<in> star A\"", "lemma map_image_star[simp]: \"map f ` star A = star (map f ` A)\"", "lemma lQuot_empty[simp]:   \"lQuot a {} = {}\"\n  and lQuot_epsilon[simp]: \"lQuot a {[]} = {}\"\n  and lQuot_char[simp]:    \"lQuot a {[b]} = (if a = b then {[]} else {})\"\n  and lQuot_chars[simp]:   \"lQuot a {[b] | b. P b} = (if P a then {[]} else {})\"\n  and lQuot_union[simp]:   \"lQuot a (A \\<union> B) = lQuot a A \\<union> lQuot a B\"\n  and lQuot_inter[simp]:   \"lQuot a (A \\<inter> B) = lQuot a A \\<inter> lQuot a B\"\n  and lQuot_compl[simp]:   \"lQuot a (-A) = - lQuot a A\"", "lemma lQuot_conc_subset: \"lQuot a A @@ B \\<subseteq> lQuot a (A @@ B)\" (is \"?L \\<subseteq> ?R\")", "lemma lQuot_conc [simp]: \"lQuot c (A @@ B) = (lQuot c A) @@ B \\<union> (if [] \\<in> A then lQuot c B else {})\"", "lemma lQuot_star [simp]: \"lQuot c (star A) = (lQuot c A) @@ star A\"", "lemma lQuot_diff[simp]: \"lQuot c (A - B) = lQuot c A - lQuot c B\"", "lemma lQuot_lists[simp]: \"c : S \\<Longrightarrow> lQuot c (lists S) = lists S\"", "lemma lQuots_simps [simp]:\n  shows \"lQuots [] A = A\"\n  and   \"lQuots (c # s) A = lQuots s (lQuot c A)\"\n  and   \"lQuots (s1 @ s2) A = lQuots s2 (lQuots s1 A)\"", "lemma lQuots_append[iff]: \"v \\<in> lQuots w A \\<longleftrightarrow> w @ v \\<in> A\"", "lemma rQuot_rev_lQuot: \"rQuot x A = rev ` lQuot x (rev ` A)\"", "lemma rQuots_rev_lQuots: \"rQuots x A = rev ` lQuots x (rev ` A)\"", "lemma rQuot_empty[simp]:   \"rQuot a {} = {}\"\n  and rQuot_epsilon[simp]: \"rQuot a {[]} = {}\"\n  and rQuot_char[simp]:    \"rQuot a {[b]} = (if a = b then {[]} else {})\"\n  and rQuot_union[simp]:   \"rQuot a (A \\<union> B) = rQuot a A \\<union> rQuot a B\"\n  and rQuot_inter[simp]:   \"rQuot a (A \\<inter> B) = rQuot a A \\<inter> rQuot a B\"\n  and rQuot_compl[simp]:   \"rQuot a (-A) = - rQuot a A\"", "lemma lQuot_rQuot: \"lQuot a (rQuot b A) = rQuot b (lQuot a A)\"", "lemma rQuot_lQuot: \"rQuot a (lQuot b A) = lQuot b (rQuot a A)\"", "lemma rev_simp_invert: \"(xs @ [x] = rev zs) = (zs = x # rev xs)\"", "lemma rev_append_invert: \"(xs @ ys = rev zs) = (zs = rev ys @ rev xs)\"", "lemma image_rev_lists[simp]: \"rev ` lists S = lists S\"", "lemma image_rev_conc[simp]: \"rev ` (A @@ B) = rev ` B @@ rev ` A\"", "lemma image_rev_star[simp]: \"rev ` star A = star (rev ` A)\"", "lemma rQuot_conc [simp]: \"rQuot c (A @@ B) = A @@ (rQuot c B) \\<union> (if [] \\<in> B then rQuot c A else {})\"", "lemma rQuot_star [simp]: \"rQuot c (star A) = star A @@ (rQuot c A)\"", "lemma rQuot_diff[simp]: \"rQuot c (A - B) = rQuot c A - rQuot c B\"", "lemma rQuot_lists[simp]: \"c : S \\<Longrightarrow> rQuot c (lists S) = lists S\"", "lemma rQuots_simps [simp]:\n  shows \"rQuots [] A = A\"\n  and   \"rQuots (c # s) A = rQuots s (rQuot c A)\"\n  and   \"rQuots (s1 @ s2) A = rQuots s2 (rQuots s1 A)\"", "lemma rQuots_append[iff]: \"v \\<in> rQuots w A \\<longleftrightarrow> v @ rev w \\<in> A\"", "lemma biQuot_rQuot_lQuot: \"biQuot x y A = rQuot y (lQuot x A)\"", "lemma biQuot_lQuot_rQuot: \"biQuot x y A = lQuot x (rQuot y A)\"", "lemma biQuots_rQuots_lQuots: \"biQuots x y A = rQuots y (lQuots x A)\"", "lemma biQuots_lQuots_rQuots: \"biQuots x y A = lQuots x (rQuots y A)\"", "lemma biQuot_empty[simp]:   \"biQuot a b {} = {}\"\n  and biQuot_epsilon[simp]: \"biQuot a b {[]} = {}\"\n  and biQuot_char[simp]:    \"biQuot a b {[c]} = {}\"\n  and biQuot_union[simp]:   \"biQuot a b (A \\<union> B) = biQuot a b A \\<union> biQuot a b B\"\n  and biQuot_inter[simp]:   \"biQuot a b (A \\<inter> B) = biQuot a b A \\<inter> biQuot a b B\"\n  and biQuot_compl[simp]:   \"biQuot a b (-A) = - biQuot a b A\"", "lemma biQuot_conc [simp]: \"biQuot a b (A @@ B) =\n  lQuot a A @@ rQuot b B \\<union>\n  (if [] \\<in> A \\<and> [] \\<in> B then biQuot a b A \\<union> biQuot a b B\n  else if [] \\<in> A then biQuot a b B\n  else if [] \\<in> B then biQuot a b A\n  else {})\"", "lemma biQuot_star [simp]: \"biQuot a b (star A) = biQuot a b A \\<union> lQuot a A @@ star A @@ rQuot b A\"", "lemma biQuot_diff[simp]: \"biQuot a b (A - B) = biQuot a b A - biQuot a b B\"", "lemma biQuot_lists[simp]: \"a : S \\<Longrightarrow> b : S \\<Longrightarrow> biQuot a b (lists S) = lists S\"", "lemma biQuots_simps [simp]:\n  shows \"biQuots [] [] A = A\"\n  and   \"biQuots (a#as) (b#bs) A = biQuots as bs (biQuot a b A)\"\n  and   \"\\<lbrakk>length s1 = length t1; length s2 = length t2\\<rbrakk> \\<Longrightarrow>\n    biQuots (s1 @ s2) (t1 @ t2) A = biQuots s2 t2 (biQuots s1 t1 A)\"", "lemma biQuots_append[iff]: \"v \\<in> biQuots u w A \\<longleftrightarrow> u @ v @ rev w \\<in> A\"", "lemma arden_helper:\n  assumes eq: \"X = A @@ X \\<union> B\"\n  shows \"X = (A ^^ Suc n) @@ X \\<union> (\\<Union>m\\<le>n. (A ^^ m) @@ B)\"", "lemma Arden:\n  assumes \"[] \\<notin> A\" \n  shows \"X = A @@ X \\<union> B \\<longleftrightarrow> X = star A @@ B\"", "lemma reversed_arden_helper:\n  assumes eq: \"X = X @@ A \\<union> B\"\n  shows \"X = X @@ (A ^^ Suc n) \\<union> (\\<Union>m\\<le>n. B @@ (A ^^ m))\"", "theorem reversed_Arden:\n  assumes nemp: \"[] \\<notin> A\"\n  shows \"X = X @@ A \\<union> B \\<longleftrightarrow> X = B @@ star A\"", "lemma tl_listsN: \"A \\<subseteq> listsN (n + 1) S \\<Longrightarrow> tl ` A \\<subseteq> listsN n S\"", "lemma map_tl_listsN: \"A \\<subseteq> lists (listsN (n + 1) S) \\<Longrightarrow> map tl ` A \\<subseteq> lists (listsN n S)\""], "translations": [["", "lemma [code]:\n  \"A @@ B = (%(xs, ys). xs @ ys) ` (A \\<times> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A @@ B = (\\<lambda>(xs, ys). xs @ ys) ` (A \\<times> B)", "unfolding conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs @ ys |xs ys. xs \\<in> A \\<and> ys \\<in> B} =\n    (\\<lambda>(xs, ys). xs @ ys) ` (A \\<times> B)", "by auto"], ["", "overloading word_pow == \"compow :: nat \\<Rightarrow> 'a list \\<Rightarrow> 'a list\"\nbegin"], ["", "primrec word_pow :: \"nat \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n  \"word_pow 0 w = []\" |\n  \"word_pow (Suc n) w = w @ word_pow n w\""], ["", "end"], ["", "overloading lang_pow == \"compow :: nat \\<Rightarrow> 'a lang \\<Rightarrow> 'a lang\"\nbegin"], ["", "primrec lang_pow :: \"nat \\<Rightarrow> 'a lang \\<Rightarrow> 'a lang\" where\n  \"lang_pow 0 A = {[]}\" |\n  \"lang_pow (Suc n) A = A @@ (lang_pow n A)\""], ["", "end"], ["", "lemma word_pow_alt: \"compow n w = concat (replicate n w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w ^^ n = concat (replicate n w)", "by (induct n) auto"], ["", "definition star :: \"'a lang \\<Rightarrow> 'a lang\" where\n\"star A = (\\<Union>n. A ^^ n)\""], ["", "subsection\\<open>Concatenation of Languages\\<close>"], ["", "lemma concI[simp,intro]: \"u : A \\<Longrightarrow> v : B \\<Longrightarrow> u@v : A @@ B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<in> A; v \\<in> B\\<rbrakk>\n    \\<Longrightarrow> u @ v \\<in> A @@ B", "by (auto simp add: conc_def)"], ["", "lemma concE[elim]: \nassumes \"w \\<in> A @@ B\"\nobtains u v where \"u \\<in> A\" \"v \\<in> B\" \"w = u@v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>u \\<in> A; v \\<in> B; w = u @ v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  w \\<in> A @@ B\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>u \\<in> A; v \\<in> B; w = u @ v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: conc_def)"], ["", "lemma conc_mono: \"A \\<subseteq> C \\<Longrightarrow> B \\<subseteq> D \\<Longrightarrow> A @@ B \\<subseteq> C @@ D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> C; B \\<subseteq> D\\<rbrakk>\n    \\<Longrightarrow> A @@ B \\<subseteq> C @@ D", "by (auto simp: conc_def)"], ["", "lemma conc_empty[simp]: shows \"{} @@ A = {}\" and \"A @@ {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} @@ A = {} &&& A @@ {} = {}", "by auto"], ["", "lemma conc_epsilon[simp]: shows \"{[]} @@ A = A\" and \"A @@ {[]} = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {[]} @@ A = A &&& A @@ {[]} = A", "by (simp_all add:conc_def)"], ["", "lemma conc_assoc: \"(A @@ B) @@ C = A @@ (B @@ C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A @@ B) @@ C = A @@ B @@ C", "by (auto elim!: concE) (simp only: append_assoc[symmetric] concI)"], ["", "lemma conc_Un_distrib:\nshows \"A @@ (B \\<union> C) = A @@ B \\<union> A @@ C\"\nand   \"(A \\<union> B) @@ C = A @@ C \\<union> B @@ C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A @@ (B \\<union> C) = A @@ B \\<union> A @@ C &&&\n    (A \\<union> B) @@ C = A @@ C \\<union> B @@ C", "by auto"], ["", "lemma conc_UNION_distrib:\nshows \"A @@ \\<Union>(M ` I) = \\<Union>((%i. A @@ M i) ` I)\"\nand   \"\\<Union>(M ` I) @@ A = \\<Union>((%i. M i @@ A) ` I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A @@ \\<Union> (M ` I) = (\\<Union>i\\<in>I. A @@ M i) &&&\n    \\<Union> (M ` I) @@ A = (\\<Union>i\\<in>I. M i @@ A)", "by auto"], ["", "lemma hom_image_conc: \"\\<lbrakk>\\<And>xs ys. f (xs @ ys) = f xs @ f ys\\<rbrakk> \\<Longrightarrow> f ` (A @@ B) = f ` A @@ f ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs ys. f (xs @ ys) = f xs @ f ys) \\<Longrightarrow>\n    f ` (A @@ B) = f ` A @@ f ` B", "unfolding conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs ys. f (xs @ ys) = f xs @ f ys) \\<Longrightarrow>\n    f ` {xs @ ys |xs ys. xs \\<in> A \\<and> ys \\<in> B} =\n    {xs @ ys |xs ys. xs \\<in> f ` A \\<and> ys \\<in> f ` B}", "by (auto simp: image_iff) metis"], ["", "lemma map_image_conc[simp]: \"map f ` (A @@ B) = map f ` A @@ map f ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f ` (A @@ B) = map f ` A @@ map f ` B", "by (simp add: hom_image_conc)"], ["", "lemma conc_subset_lists: \"A \\<subseteq> lists S \\<Longrightarrow> B \\<subseteq> lists S \\<Longrightarrow> A @@ B \\<subseteq> lists S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> lists S; B \\<subseteq> lists S\\<rbrakk>\n    \\<Longrightarrow> A @@ B \\<subseteq> lists S", "by(fastforce simp: conc_def in_lists_conv_set)"], ["", "subsection\\<open>Iteration of Languages\\<close>"], ["", "lemma lang_pow_add: \"A ^^ (n + m) = A ^^ n @@ A ^^ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^^ (n + m) = A ^^ n @@ A ^^ m", "by (induct n) (auto simp: conc_assoc)"], ["", "lemma lang_pow_simps: \"(A ^^ Suc n) = (A ^^ n @@ A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^^ Suc n = A ^^ n @@ A", "using lang_pow_add[of n \"Suc 0\" A]"], ["proof (prove)\nusing this:\n  A ^^ (n + Suc 0) = A ^^ n @@ A ^^ Suc 0\n\ngoal (1 subgoal):\n 1. A ^^ Suc n = A ^^ n @@ A", "by auto"], ["", "lemma lang_pow_empty: \"{} ^^ n = (if n = 0 then {[]} else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} ^^ n = (if n = 0 then {[]} else {})", "by (induct n) auto"], ["", "lemma lang_pow_empty_Suc[simp]: \"({}::'a lang) ^^ Suc n = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} ^^ Suc n = {}", "by (simp add: lang_pow_empty)"], ["", "lemma conc_pow_comm:\n  shows \"A @@ (A ^^ n) = (A ^^ n) @@ A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A @@ A ^^ n = A ^^ n @@ A", "by (induct n) (simp_all add: conc_assoc[symmetric])"], ["", "lemma length_lang_pow_ub:\n  \"ALL w : A. length w \\<le> k \\<Longrightarrow> w : A^^n \\<Longrightarrow> length w \\<le> k*n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>w\\<in>A. length w \\<le> k; w \\<in> A ^^ n\\<rbrakk>\n    \\<Longrightarrow> length w \\<le> k * n", "by(induct n arbitrary: w) (fastforce simp: conc_def)+"], ["", "lemma length_lang_pow_lb:\n  \"ALL w : A. length w \\<ge> k \\<Longrightarrow> w : A^^n \\<Longrightarrow> length w \\<ge> k*n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>w\\<in>A. k \\<le> length w; w \\<in> A ^^ n\\<rbrakk>\n    \\<Longrightarrow> k * n \\<le> length w", "by(induct n arbitrary: w) (fastforce simp: conc_def)+"], ["", "lemma lang_pow_subset_lists: \"A \\<subseteq> lists S \\<Longrightarrow> A ^^ n \\<subseteq> lists S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> lists S \\<Longrightarrow> A ^^ n \\<subseteq> lists S", "by (induct n) (auto simp: conc_subset_lists)"], ["", "lemma star_subset_lists: \"A \\<subseteq> lists S \\<Longrightarrow> star A \\<subseteq> lists S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> lists S \\<Longrightarrow> star A \\<subseteq> lists S", "unfolding star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> lists S \\<Longrightarrow>\n    \\<Union> (range ((^^) A)) \\<subseteq> lists S", "by(blast dest: lang_pow_subset_lists)"], ["", "lemma star_if_lang_pow[simp]: \"w : A ^^ n \\<Longrightarrow> w : star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> A ^^ n \\<Longrightarrow> w \\<in> star A", "by (auto simp: star_def)"], ["", "lemma Nil_in_star[iff]: \"[] : star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> star A", "proof (rule star_if_lang_pow)"], ["proof (state)\ngoal (1 subgoal):\n 1. [] \\<in> A ^^ ?n", "show \"[] : A ^^ 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> A ^^ 0", "by simp"], ["proof (state)\nthis:\n  [] \\<in> A ^^ 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma star_if_lang[simp]: assumes \"w : A\" shows \"w : star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> star A", "proof (rule star_if_lang_pow)"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<in> A ^^ ?n", "show \"w : A ^^ 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> A ^^ 1", "using \\<open>w : A\\<close>"], ["proof (prove)\nusing this:\n  w \\<in> A\n\ngoal (1 subgoal):\n 1. w \\<in> A ^^ 1", "by simp"], ["proof (state)\nthis:\n  w \\<in> A ^^ 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma append_in_starI[simp]:\nassumes \"u : star A\" and \"v : star A\" shows \"u@v : star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u @ v \\<in> star A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u @ v \\<in> star A", "from \\<open>u : star A\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> star A", "obtain m where \"u : A ^^ m\""], ["proof (prove)\nusing this:\n  u \\<in> star A\n\ngoal (1 subgoal):\n 1. (\\<And>m. u \\<in> A ^^ m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: star_def)"], ["proof (state)\nthis:\n  u \\<in> A ^^ m\n\ngoal (1 subgoal):\n 1. u @ v \\<in> star A", "moreover"], ["proof (state)\nthis:\n  u \\<in> A ^^ m\n\ngoal (1 subgoal):\n 1. u @ v \\<in> star A", "from \\<open>v : star A\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> star A", "obtain n where \"v : A ^^ n\""], ["proof (prove)\nusing this:\n  v \\<in> star A\n\ngoal (1 subgoal):\n 1. (\\<And>n. v \\<in> A ^^ n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: star_def)"], ["proof (state)\nthis:\n  v \\<in> A ^^ n\n\ngoal (1 subgoal):\n 1. u @ v \\<in> star A", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> A ^^ m\n  v \\<in> A ^^ n", "have \"u@v : A ^^ (m+n)\""], ["proof (prove)\nusing this:\n  u \\<in> A ^^ m\n  v \\<in> A ^^ n\n\ngoal (1 subgoal):\n 1. u @ v \\<in> A ^^ (m + n)", "by (simp add: lang_pow_add)"], ["proof (state)\nthis:\n  u @ v \\<in> A ^^ (m + n)\n\ngoal (1 subgoal):\n 1. u @ v \\<in> star A", "thus ?thesis"], ["proof (prove)\nusing this:\n  u @ v \\<in> A ^^ (m + n)\n\ngoal (1 subgoal):\n 1. u @ v \\<in> star A", "by simp"], ["proof (state)\nthis:\n  u @ v \\<in> star A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conc_star_star: \"star A @@ star A = star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star A @@ star A = star A", "by (auto simp: conc_def)"], ["", "lemma conc_star_comm:\n  shows \"A @@ star A = star A @@ A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A @@ star A = star A @@ A", "unfolding star_def conc_pow_comm conc_UNION_distrib"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i. A ^^ i @@ A) = (\\<Union>i. A ^^ i @@ A)", "by simp"], ["", "lemma star_induct[consumes 1, case_names Nil append, induct set: star]:\nassumes \"w : star A\"\n  and \"P []\"\n  and step: \"!!u v. u : A \\<Longrightarrow> v : star A \\<Longrightarrow> P v \\<Longrightarrow> P (u@v)\"\nshows \"P w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P w", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. P w", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. P w", "have \"w : A ^^ n \\<Longrightarrow> P w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> A ^^ n \\<Longrightarrow> P w", "by (induct n arbitrary: w) (auto intro: \\<open>P []\\<close> step star_if_lang_pow)"], ["proof (state)\nthis:\n  w \\<in> A ^^ n \\<Longrightarrow> P w\n\ngoal (1 subgoal):\n 1. P w", "}"], ["proof (state)\nthis:\n  w \\<in> A ^^ ?n2 \\<Longrightarrow> P w\n\ngoal (1 subgoal):\n 1. P w", "with \\<open>w : star A\\<close>"], ["proof (chain)\npicking this:\n  w \\<in> star A\n  w \\<in> A ^^ ?n2 \\<Longrightarrow> P w", "show \"P w\""], ["proof (prove)\nusing this:\n  w \\<in> star A\n  w \\<in> A ^^ ?n2 \\<Longrightarrow> P w\n\ngoal (1 subgoal):\n 1. P w", "by (auto simp: star_def)"], ["proof (state)\nthis:\n  P w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma star_empty[simp]: \"star {} = {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star {} = {[]}", "by (auto elim: star_induct)"], ["", "lemma star_epsilon[simp]: \"star {[]} = {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star {[]} = {[]}", "by (auto elim: star_induct)"], ["", "lemma star_idemp[simp]: \"star (star A) = star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star (star A) = star A", "by (auto elim: star_induct)"], ["", "lemma star_unfold_left: \"star A = A @@ star A \\<union> {[]}\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. star A = A @@ star A \\<union> {[]}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. star A \\<subseteq> A @@ star A \\<union> {[]}\n 2. A @@ star A \\<union> {[]} \\<subseteq> star A", "show \"?L \\<subseteq> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star A \\<subseteq> A @@ star A \\<union> {[]}", "by (rule, erule star_induct) auto"], ["proof (state)\nthis:\n  star A \\<subseteq> A @@ star A \\<union> {[]}\n\ngoal (1 subgoal):\n 1. A @@ star A \\<union> {[]} \\<subseteq> star A", "qed auto"], ["", "lemma concat_in_star: \"set ws \\<subseteq> A \\<Longrightarrow> concat ws : star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ws \\<subseteq> A \\<Longrightarrow> concat ws \\<in> star A", "by (induct ws) simp_all"], ["", "lemma in_star_iff_concat:\n  \"w : star A = (EX ws. set ws \\<subseteq> A & w = concat ws & [] \\<notin> set ws)\"\n  (is \"_ = (EX ws. ?R w ws)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<in> star A) =\n    (\\<exists>ws.\n        set ws \\<subseteq> A \\<and> w = concat ws \\<and> [] \\<notin> set ws)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<in> star A \\<Longrightarrow>\n    \\<exists>ws.\n       set ws \\<subseteq> A \\<and> w = concat ws \\<and> [] \\<notin> set ws\n 2. \\<exists>ws.\n       set ws \\<subseteq> A \\<and>\n       w = concat ws \\<and> [] \\<notin> set ws \\<Longrightarrow>\n    w \\<in> star A", "assume \"w : star A\""], ["proof (state)\nthis:\n  w \\<in> star A\n\ngoal (2 subgoals):\n 1. w \\<in> star A \\<Longrightarrow>\n    \\<exists>ws.\n       set ws \\<subseteq> A \\<and> w = concat ws \\<and> [] \\<notin> set ws\n 2. \\<exists>ws.\n       set ws \\<subseteq> A \\<and>\n       w = concat ws \\<and> [] \\<notin> set ws \\<Longrightarrow>\n    w \\<in> star A", "thus \"EX ws. ?R w ws\""], ["proof (prove)\nusing this:\n  w \\<in> star A\n\ngoal (1 subgoal):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and> w = concat ws \\<and> [] \\<notin> set ws", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and> [] = concat ws \\<and> [] \\<notin> set ws\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and> [] = concat ws \\<and> [] \\<notin> set ws\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "have \"?R [] []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set [] \\<subseteq> A \\<and> [] = concat [] \\<and> [] \\<notin> set []", "by simp"], ["proof (state)\nthis:\n  set [] \\<subseteq> A \\<and> [] = concat [] \\<and> [] \\<notin> set []\n\ngoal (2 subgoals):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and> [] = concat ws \\<and> [] \\<notin> set ws\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "thus ?case"], ["proof (prove)\nusing this:\n  set [] \\<subseteq> A \\<and> [] = concat [] \\<and> [] \\<notin> set []\n\ngoal (1 subgoal):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and> [] = concat ws \\<and> [] \\<notin> set ws", ".."], ["proof (state)\nthis:\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> [] = concat ws \\<and> [] \\<notin> set ws\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "case (append u v)"], ["proof (state)\nthis:\n  u \\<in> A\n  v \\<in> star A\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "moreover"], ["proof (state)\nthis:\n  u \\<in> A\n  v \\<in> star A\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "then"], ["proof (chain)\npicking this:\n  u \\<in> A\n  v \\<in> star A\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws", "obtain ws where \"set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws\""], ["proof (prove)\nusing this:\n  u \\<in> A\n  v \\<in> star A\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        set ws \\<subseteq> A \\<and>\n        v = concat ws \\<and> [] \\<notin> set ws \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> A\n  v \\<in> star A\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws\n  set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws", "have \"?R (u@v) (if u = [] then ws else u#ws)\""], ["proof (prove)\nusing this:\n  u \\<in> A\n  v \\<in> star A\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws\n  set ws \\<subseteq> A \\<and> v = concat ws \\<and> [] \\<notin> set ws\n\ngoal (1 subgoal):\n 1. set (if u = [] then ws else u # ws) \\<subseteq> A \\<and>\n    u @ v = concat (if u = [] then ws else u # ws) \\<and>\n    [] \\<notin> set (if u = [] then ws else u # ws)", "by auto"], ["proof (state)\nthis:\n  set (if u = [] then ws else u # ws) \\<subseteq> A \\<and>\n  u @ v = concat (if u = [] then ws else u # ws) \\<and>\n  [] \\<notin> set (if u = [] then ws else u # ws)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> A; v \\<in> star A;\n        \\<exists>ws.\n           set ws \\<subseteq> A \\<and>\n           v = concat ws \\<and> [] \\<notin> set ws\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ws.\n                            set ws \\<subseteq> A \\<and>\n                            u @ v = concat ws \\<and> [] \\<notin> set ws", "thus ?case"], ["proof (prove)\nusing this:\n  set (if u = [] then ws else u # ws) \\<subseteq> A \\<and>\n  u @ v = concat (if u = [] then ws else u # ws) \\<and>\n  [] \\<notin> set (if u = [] then ws else u # ws)\n\ngoal (1 subgoal):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and>\n       u @ v = concat ws \\<and> [] \\<notin> set ws", ".."], ["proof (state)\nthis:\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> u @ v = concat ws \\<and> [] \\<notin> set ws\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ws.\n     set ws \\<subseteq> A \\<and> w = concat ws \\<and> [] \\<notin> set ws\n\ngoal (1 subgoal):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and>\n       w = concat ws \\<and> [] \\<notin> set ws \\<Longrightarrow>\n    w \\<in> star A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and>\n       w = concat ws \\<and> [] \\<notin> set ws \\<Longrightarrow>\n    w \\<in> star A", "assume \"EX us. ?R w us\""], ["proof (state)\nthis:\n  \\<exists>us.\n     set us \\<subseteq> A \\<and> w = concat us \\<and> [] \\<notin> set us\n\ngoal (1 subgoal):\n 1. \\<exists>ws.\n       set ws \\<subseteq> A \\<and>\n       w = concat ws \\<and> [] \\<notin> set ws \\<Longrightarrow>\n    w \\<in> star A", "thus \"w : star A\""], ["proof (prove)\nusing this:\n  \\<exists>us.\n     set us \\<subseteq> A \\<and> w = concat us \\<and> [] \\<notin> set us\n\ngoal (1 subgoal):\n 1. w \\<in> star A", "by (auto simp: concat_in_star)"], ["proof (state)\nthis:\n  w \\<in> star A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma star_conv_concat: \"star A = {concat ws|ws. set ws \\<subseteq> A & [] \\<notin> set ws}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star A = {concat ws |ws. set ws \\<subseteq> A \\<and> [] \\<notin> set ws}", "by (fastforce simp: in_star_iff_concat)"], ["", "lemma star_insert_eps[simp]: \"star (insert [] A) = star(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star (insert [] A) = star A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. star (insert [] A) = star A", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. star (insert [] A) = star A", "fix us"], ["proof (state)\ngoal (1 subgoal):\n 1. star (insert [] A) = star A", "have \"set us \\<subseteq> insert [] A \\<Longrightarrow> EX vs. concat us = concat vs \\<and> set vs \\<subseteq> A\"\n      (is \"?P \\<Longrightarrow> EX vs. ?Q vs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set us \\<subseteq> insert [] A \\<Longrightarrow>\n    \\<exists>vs. concat us = concat vs \\<and> set vs \\<subseteq> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. set us \\<subseteq> insert [] A \\<Longrightarrow>\n    concat us = concat ?vs \\<and> set ?vs \\<subseteq> A", "let ?vs = \"filter (%u. u \\<noteq> []) us\""], ["proof (state)\ngoal (1 subgoal):\n 1. set us \\<subseteq> insert [] A \\<Longrightarrow>\n    concat us = concat ?vs \\<and> set ?vs \\<subseteq> A", "show \"?P \\<Longrightarrow> ?Q ?vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set us \\<subseteq> insert [] A \\<Longrightarrow>\n    concat us = concat (filter (\\<lambda>u. u \\<noteq> []) us) \\<and>\n    set (filter (\\<lambda>u. u \\<noteq> []) us) \\<subseteq> A", "by (induct us) auto"], ["proof (state)\nthis:\n  set us \\<subseteq> insert [] A \\<Longrightarrow>\n  concat us = concat (filter (\\<lambda>u. u \\<noteq> []) us) \\<and>\n  set (filter (\\<lambda>u. u \\<noteq> []) us) \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set us \\<subseteq> insert [] A \\<Longrightarrow>\n  \\<exists>vs. concat us = concat vs \\<and> set vs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. star (insert [] A) = star A", "}"], ["proof (state)\nthis:\n  set ?us2 \\<subseteq> insert [] A \\<Longrightarrow>\n  \\<exists>vs. concat ?us2 = concat vs \\<and> set vs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. star (insert [] A) = star A", "thus ?thesis"], ["proof (prove)\nusing this:\n  set ?us2 \\<subseteq> insert [] A \\<Longrightarrow>\n  \\<exists>vs. concat ?us2 = concat vs \\<and> set vs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. star (insert [] A) = star A", "by (auto simp: star_conv_concat)"], ["proof (state)\nthis:\n  star (insert [] A) = star A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma star_decom: \n  assumes a: \"x \\<in> star A\" \"x \\<noteq> []\"\n  shows \"\\<exists>a b. x = a @ b \\<and> a \\<noteq> [] \\<and> a \\<in> A \\<and> b \\<in> star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       x = a @ b \\<and> a \\<noteq> [] \\<and> a \\<in> A \\<and> b \\<in> star A", "using a"], ["proof (prove)\nusing this:\n  x \\<in> star A\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       x = a @ b \\<and> a \\<noteq> [] \\<and> a \\<in> A \\<and> b \\<in> star A", "by (induct rule: star_induct) (blast)+"], ["", "lemma Ball_starI: \"\\<forall>a \\<in> set as. [a] \\<in> A \\<Longrightarrow> as \\<in> star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as. [a] \\<in> A \\<Longrightarrow> as \\<in> star A", "by (induct as rule: rev_induct) auto"], ["", "lemma map_image_star[simp]: \"map f ` star A = star (map f ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f ` star A = star (map f ` A)", "by (auto elim: star_induct) (auto elim: star_induct simp del: map_append simp: map_append[symmetric] intro!: imageI)"], ["", "subsection \\<open>Left-Quotients of Languages\\<close>"], ["", "definition lQuot :: \"'a \\<Rightarrow> 'a lang \\<Rightarrow> 'a lang\"\nwhere \"lQuot x A = { xs. x#xs \\<in> A }\""], ["", "definition lQuots :: \"'a list \\<Rightarrow> 'a lang \\<Rightarrow> 'a lang\"\nwhere \"lQuots xs A = { ys. xs @ ys \\<in> A }\""], ["", "abbreviation \n  lQuotss :: \"'a list \\<Rightarrow> 'a lang set \\<Rightarrow> 'a lang\"\nwhere\n  \"lQuotss s As \\<equiv> \\<Union> (lQuots s ` As)\""], ["", "lemma lQuot_empty[simp]:   \"lQuot a {} = {}\"\n  and lQuot_epsilon[simp]: \"lQuot a {[]} = {}\"\n  and lQuot_char[simp]:    \"lQuot a {[b]} = (if a = b then {[]} else {})\"\n  and lQuot_chars[simp]:   \"lQuot a {[b] | b. P b} = (if P a then {[]} else {})\"\n  and lQuot_union[simp]:   \"lQuot a (A \\<union> B) = lQuot a A \\<union> lQuot a B\"\n  and lQuot_inter[simp]:   \"lQuot a (A \\<inter> B) = lQuot a A \\<inter> lQuot a B\"\n  and lQuot_compl[simp]:   \"lQuot a (-A) = - lQuot a A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lQuot a {} = {} &&&\n     lQuot a {[]} = {} &&& lQuot a {[b]} = (if a = b then {[]} else {})) &&&\n    (lQuot a {[b] |b. P b} = (if P a then {[]} else {}) &&&\n     lQuot a (A \\<union> B) = lQuot a A \\<union> lQuot a B) &&&\n    lQuot a (A \\<inter> B) = lQuot a A \\<inter> lQuot a B &&&\n    lQuot a (- A) = - lQuot a A", "by (auto simp: lQuot_def)"], ["", "lemma lQuot_conc_subset: \"lQuot a A @@ B \\<subseteq> lQuot a (A @@ B)\" (is \"?L \\<subseteq> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot a A @@ B \\<subseteq> lQuot a (A @@ B)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lQuot a A @@ B \\<Longrightarrow> x \\<in> lQuot a (A @@ B)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lQuot a A @@ B \\<Longrightarrow> x \\<in> lQuot a (A @@ B)", "assume \"w \\<in> ?L\""], ["proof (state)\nthis:\n  w \\<in> lQuot a A @@ B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lQuot a A @@ B \\<Longrightarrow> x \\<in> lQuot a (A @@ B)", "then"], ["proof (chain)\npicking this:\n  w \\<in> lQuot a A @@ B", "obtain u v where \"w = u @ v\" \"a # u \\<in> A\" \"v \\<in> B\""], ["proof (prove)\nusing this:\n  w \\<in> lQuot a A @@ B\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>w = u @ v; a # u \\<in> A; v \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: lQuot_def)"], ["proof (state)\nthis:\n  w = u @ v\n  a # u \\<in> A\n  v \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lQuot a A @@ B \\<Longrightarrow> x \\<in> lQuot a (A @@ B)", "then"], ["proof (chain)\npicking this:\n  w = u @ v\n  a # u \\<in> A\n  v \\<in> B", "have \"a # w \\<in> A @@ B\""], ["proof (prove)\nusing this:\n  w = u @ v\n  a # u \\<in> A\n  v \\<in> B\n\ngoal (1 subgoal):\n 1. a # w \\<in> A @@ B", "by (auto intro: concI[of \"a # u\", simplified])"], ["proof (state)\nthis:\n  a # w \\<in> A @@ B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lQuot a A @@ B \\<Longrightarrow> x \\<in> lQuot a (A @@ B)", "thus \"w \\<in> ?R\""], ["proof (prove)\nusing this:\n  a # w \\<in> A @@ B\n\ngoal (1 subgoal):\n 1. w \\<in> lQuot a (A @@ B)", "by (auto simp: lQuot_def)"], ["proof (state)\nthis:\n  w \\<in> lQuot a (A @@ B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lQuot_conc [simp]: \"lQuot c (A @@ B) = (lQuot c A) @@ B \\<union> (if [] \\<in> A then lQuot c B else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot c (A @@ B) =\n    lQuot c A @@ B \\<union> (if [] \\<in> A then lQuot c B else {})", "unfolding lQuot_def conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. c # xs \\<in> {xs @ ys |xs ys. xs \\<in> A \\<and> ys \\<in> B}} =\n    {xs @ ys |xs ys.\n     xs \\<in> {xs. c # xs \\<in> A} \\<and> ys \\<in> B} \\<union>\n    (if [] \\<in> A then {xs. c # xs \\<in> B} else {})", "by (auto simp add: Cons_eq_append_conv)"], ["", "lemma lQuot_star [simp]: \"lQuot c (star A) = (lQuot c A) @@ star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "have incl: \"[] \\<in> A \\<Longrightarrow> lQuot c (star A) \\<subseteq> (lQuot c A) @@ star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> A \\<Longrightarrow>\n    lQuot c (star A) \\<subseteq> lQuot c A @@ star A", "unfolding lQuot_def conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> A \\<Longrightarrow>\n    {xs. c # xs \\<in> star A}\n    \\<subseteq> {xs @ ys |xs ys.\n                 xs \\<in> {xs. c # xs \\<in> A} \\<and> ys \\<in> star A}", "apply(auto simp add: Cons_eq_append_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>[] \\<in> A; c # x \\<in> star A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs ys.\n                            x = xs @ ys \\<and>\n                            c # xs \\<in> A \\<and> ys \\<in> star A", "apply(drule star_decom)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. [] \\<in> A \\<Longrightarrow> c # x \\<noteq> []\n 2. \\<And>x.\n       \\<lbrakk>[] \\<in> A;\n        \\<exists>a b.\n           c # x = a @ b \\<and>\n           a \\<noteq> [] \\<and> a \\<in> A \\<and> b \\<in> star A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs ys.\n                            x = xs @ ys \\<and>\n                            c # xs \\<in> A \\<and> ys \\<in> star A", "apply(auto simp add: Cons_eq_append_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  [] \\<in> A \\<Longrightarrow>\n  lQuot c (star A) \\<subseteq> lQuot c A @@ star A\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "have \"lQuot c (star A) = lQuot c (A @@ star A \\<union> {[]})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c (A @@ star A \\<union> {[]})", "by (simp only: star_unfold_left[symmetric])"], ["proof (state)\nthis:\n  lQuot c (star A) = lQuot c (A @@ star A \\<union> {[]})\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "also"], ["proof (state)\nthis:\n  lQuot c (star A) = lQuot c (A @@ star A \\<union> {[]})\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "have \"... = lQuot c (A @@ star A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot c (A @@ star A \\<union> {[]}) = lQuot c (A @@ star A)", "by (simp only: lQuot_union) (simp)"], ["proof (state)\nthis:\n  lQuot c (A @@ star A \\<union> {[]}) = lQuot c (A @@ star A)\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "also"], ["proof (state)\nthis:\n  lQuot c (A @@ star A \\<union> {[]}) = lQuot c (A @@ star A)\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "have \"... =  (lQuot c A) @@ (star A) \\<union> (if [] \\<in> A then lQuot c (star A) else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot c (A @@ star A) =\n    lQuot c A @@ star A \\<union>\n    (if [] \\<in> A then lQuot c (star A) else {})", "by simp"], ["proof (state)\nthis:\n  lQuot c (A @@ star A) =\n  lQuot c A @@ star A \\<union> (if [] \\<in> A then lQuot c (star A) else {})\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "also"], ["proof (state)\nthis:\n  lQuot c (A @@ star A) =\n  lQuot c A @@ star A \\<union> (if [] \\<in> A then lQuot c (star A) else {})\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "have \"... =  (lQuot c A) @@ star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot c A @@ star A \\<union>\n    (if [] \\<in> A then lQuot c (star A) else {}) =\n    lQuot c A @@ star A", "using incl"], ["proof (prove)\nusing this:\n  [] \\<in> A \\<Longrightarrow>\n  lQuot c (star A) \\<subseteq> lQuot c A @@ star A\n\ngoal (1 subgoal):\n 1. lQuot c A @@ star A \\<union>\n    (if [] \\<in> A then lQuot c (star A) else {}) =\n    lQuot c A @@ star A", "by auto"], ["proof (state)\nthis:\n  lQuot c A @@ star A \\<union>\n  (if [] \\<in> A then lQuot c (star A) else {}) =\n  lQuot c A @@ star A\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "finally"], ["proof (chain)\npicking this:\n  lQuot c (star A) = lQuot c A @@ star A", "show \"lQuot c (star A) = (lQuot c A) @@ star A\""], ["proof (prove)\nusing this:\n  lQuot c (star A) = lQuot c A @@ star A\n\ngoal (1 subgoal):\n 1. lQuot c (star A) = lQuot c A @@ star A", "."], ["proof (state)\nthis:\n  lQuot c (star A) = lQuot c A @@ star A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lQuot_diff[simp]: \"lQuot c (A - B) = lQuot c A - lQuot c B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot c (A - B) = lQuot c A - lQuot c B", "by(auto simp add: lQuot_def)"], ["", "lemma lQuot_lists[simp]: \"c : S \\<Longrightarrow> lQuot c (lists S) = lists S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> S \\<Longrightarrow> lQuot c (lists S) = lists S", "by(auto simp add: lQuot_def)"], ["", "lemma lQuots_simps [simp]:\n  shows \"lQuots [] A = A\"\n  and   \"lQuots (c # s) A = lQuots s (lQuot c A)\"\n  and   \"lQuots (s1 @ s2) A = lQuots s2 (lQuots s1 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuots [] A = A &&&\n    lQuots (c # s) A = lQuots s (lQuot c A) &&&\n    lQuots (s1 @ s2) A = lQuots s2 (lQuots s1 A)", "unfolding lQuots_def lQuot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ys. [] @ ys \\<in> A} = A &&&\n    {ys. (c # s) @ ys \\<in> A} = {ys. s @ ys \\<in> {xs. c # xs \\<in> A}} &&&\n    {ys. (s1 @ s2) @ ys \\<in> A} = {ys. s2 @ ys \\<in> {ys. s1 @ ys \\<in> A}}", "by auto"], ["", "lemma lQuots_append[iff]: \"v \\<in> lQuots w A \\<longleftrightarrow> w @ v \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> lQuots w A) = (w @ v \\<in> A)", "by (induct w arbitrary: v A) (auto simp add: lQuot_def)"], ["", "subsection \\<open>Right-Quotients of Languages\\<close>"], ["", "definition rQuot :: \"'a \\<Rightarrow> 'a lang \\<Rightarrow> 'a lang\"\nwhere \"rQuot x A = { xs. xs @ [x] \\<in> A }\""], ["", "definition rQuots :: \"'a list \\<Rightarrow> 'a lang \\<Rightarrow> 'a lang\"\nwhere \"rQuots xs A = { ys. ys @ rev xs \\<in> A }\""], ["", "abbreviation \n  rQuotss :: \"'a list \\<Rightarrow> 'a lang set \\<Rightarrow> 'a lang\"\nwhere\n  \"rQuotss s As \\<equiv> \\<Union> (rQuots s ` As)\""], ["", "lemma rQuot_rev_lQuot: \"rQuot x A = rev ` lQuot x (rev ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuot x A = rev ` lQuot x (rev ` A)", "unfolding rQuot_def lQuot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. xs @ [x] \\<in> A} = rev ` {xs. x # xs \\<in> rev ` A}", "by (auto simp: rev_swap[symmetric])"], ["", "lemma rQuots_rev_lQuots: \"rQuots x A = rev ` lQuots x (rev ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuots x A = rev ` lQuots x (rev ` A)", "unfolding rQuots_def lQuots_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ys. ys @ rev x \\<in> A} = rev ` {ys. x @ ys \\<in> rev ` A}", "by (auto simp: rev_swap[symmetric])"], ["", "lemma rQuot_empty[simp]:   \"rQuot a {} = {}\"\n  and rQuot_epsilon[simp]: \"rQuot a {[]} = {}\"\n  and rQuot_char[simp]:    \"rQuot a {[b]} = (if a = b then {[]} else {})\"\n  and rQuot_union[simp]:   \"rQuot a (A \\<union> B) = rQuot a A \\<union> rQuot a B\"\n  and rQuot_inter[simp]:   \"rQuot a (A \\<inter> B) = rQuot a A \\<inter> rQuot a B\"\n  and rQuot_compl[simp]:   \"rQuot a (-A) = - rQuot a A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rQuot a {} = {} &&&\n     rQuot a {[]} = {} &&& rQuot a {[b]} = (if a = b then {[]} else {})) &&&\n    rQuot a (A \\<union> B) = rQuot a A \\<union> rQuot a B &&&\n    rQuot a (A \\<inter> B) = rQuot a A \\<inter> rQuot a B &&&\n    rQuot a (- A) = - rQuot a A", "by (auto simp: rQuot_def)"], ["", "lemma lQuot_rQuot: \"lQuot a (rQuot b A) = rQuot b (lQuot a A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lQuot a (rQuot b A) = rQuot b (lQuot a A)", "unfolding lQuot_def rQuot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. a # xs \\<in> {xs. xs @ [b] \\<in> A}} =\n    {xs. xs @ [b] \\<in> {xs. a # xs \\<in> A}}", "by auto"], ["", "lemma rQuot_lQuot: \"rQuot a (lQuot b A) = lQuot b (rQuot a A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuot a (lQuot b A) = lQuot b (rQuot a A)", "unfolding lQuot_def rQuot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. xs @ [a] \\<in> {xs. b # xs \\<in> A}} =\n    {xs. b # xs \\<in> {xs. xs @ [a] \\<in> A}}", "by auto"], ["", "lemma rev_simp_invert: \"(xs @ [x] = rev zs) = (zs = x # rev xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [x] = rev zs) = (zs = x # rev xs)", "by (induct zs) auto"], ["", "lemma rev_append_invert: \"(xs @ ys = rev zs) = (zs = rev ys @ rev xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ys = rev zs) = (zs = rev ys @ rev xs)", "by (induct xs arbitrary: ys rule: rev_induct) auto"], ["", "lemma image_rev_lists[simp]: \"rev ` lists S = lists S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` lists S = lists S", "proof (intro set_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (x \\<in> rev ` lists S) = (x \\<in> lists S)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (x \\<in> rev ` lists S) = (x \\<in> lists S)", "show \"xs \\<in> rev ` lists S \\<longleftrightarrow> xs \\<in> lists S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> rev ` lists S) = (xs \\<in> lists S)", "proof (induct xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. ([] \\<in> rev ` lists S) = ([] \\<in> lists S)\n 2. \\<And>x xs.\n       (xs \\<in> rev ` lists S) = (xs \\<in> lists S) \\<Longrightarrow>\n       (xs @ [x] \\<in> rev ` lists S) = (xs @ [x] \\<in> lists S)", "case (snoc x xs)"], ["proof (state)\nthis:\n  (xs \\<in> rev ` lists S) = (xs \\<in> lists S)\n\ngoal (2 subgoals):\n 1. ([] \\<in> rev ` lists S) = ([] \\<in> lists S)\n 2. \\<And>x xs.\n       (xs \\<in> rev ` lists S) = (xs \\<in> lists S) \\<Longrightarrow>\n       (xs @ [x] \\<in> rev ` lists S) = (xs @ [x] \\<in> lists S)", "thus ?case"], ["proof (prove)\nusing this:\n  (xs \\<in> rev ` lists S) = (xs \\<in> lists S)\n\ngoal (1 subgoal):\n 1. (xs @ [x] \\<in> rev ` lists S) = (xs @ [x] \\<in> lists S)", "by (auto intro!: image_eqI[of _ rev] simp: rev_simp_invert)"], ["proof (state)\nthis:\n  (xs @ [x] \\<in> rev ` lists S) = (xs @ [x] \\<in> lists S)\n\ngoal (1 subgoal):\n 1. ([] \\<in> rev ` lists S) = ([] \\<in> lists S)", "qed simp"], ["proof (state)\nthis:\n  (xs \\<in> rev ` lists S) = (xs \\<in> lists S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma image_rev_conc[simp]: \"rev ` (A @@ B) = rev ` B @@ rev ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` (A @@ B) = rev ` B @@ rev ` A", "by auto (auto simp: rev_append[symmetric] simp del: rev_append)"], ["", "lemma image_rev_star[simp]: \"rev ` star A = star (rev ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` star A = star (rev ` A)", "by (auto elim: star_induct) (auto elim: star_induct simp: rev_append[symmetric] simp del: rev_append)"], ["", "lemma rQuot_conc [simp]: \"rQuot c (A @@ B) = A @@ (rQuot c B) \\<union> (if [] \\<in> B then rQuot c A else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuot c (A @@ B) =\n    A @@ rQuot c B \\<union> (if [] \\<in> B then rQuot c A else {})", "unfolding rQuot_rev_lQuot"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` lQuot c (rev ` (A @@ B)) =\n    A @@ rev ` lQuot c (rev ` B) \\<union>\n    (if [] \\<in> B then rev ` lQuot c (rev ` A) else {})", "by (auto simp: image_image image_Un)"], ["", "lemma rQuot_star [simp]: \"rQuot c (star A) = star A @@ (rQuot c A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuot c (star A) = star A @@ rQuot c A", "unfolding rQuot_rev_lQuot"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` lQuot c (rev ` star A) = star A @@ rev ` lQuot c (rev ` A)", "by (auto simp: image_image)"], ["", "lemma rQuot_diff[simp]: \"rQuot c (A - B) = rQuot c A - rQuot c B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuot c (A - B) = rQuot c A - rQuot c B", "by(auto simp add: rQuot_def)"], ["", "lemma rQuot_lists[simp]: \"c : S \\<Longrightarrow> rQuot c (lists S) = lists S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> S \\<Longrightarrow> rQuot c (lists S) = lists S", "by(auto simp add: rQuot_def)"], ["", "lemma rQuots_simps [simp]:\n  shows \"rQuots [] A = A\"\n  and   \"rQuots (c # s) A = rQuots s (rQuot c A)\"\n  and   \"rQuots (s1 @ s2) A = rQuots s2 (rQuots s1 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuots [] A = A &&&\n    rQuots (c # s) A = rQuots s (rQuot c A) &&&\n    rQuots (s1 @ s2) A = rQuots s2 (rQuots s1 A)", "unfolding rQuots_def rQuot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ys. ys @ rev [] \\<in> A} = A &&&\n    {ys. ys @ rev (c # s) \\<in> A} =\n    {ys. ys @ rev s \\<in> {xs. xs @ [c] \\<in> A}} &&&\n    {ys. ys @ rev (s1 @ s2) \\<in> A} =\n    {ys. ys @ rev s2 \\<in> {ys. ys @ rev s1 \\<in> A}}", "by auto"], ["", "lemma rQuots_append[iff]: \"v \\<in> rQuots w A \\<longleftrightarrow> v @ rev w \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> rQuots w A) = (v @ rev w \\<in> A)", "by (induct w arbitrary: v A) (auto simp add: rQuot_def)"], ["", "subsection \\<open>Two-Sided-Quotients of Languages\\<close>"], ["", "definition biQuot :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a lang \\<Rightarrow> 'a lang\"\nwhere \"biQuot x y A = { xs. x # xs @ [y] \\<in> A }\""], ["", "definition biQuots :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a lang \\<Rightarrow> 'a lang\"\nwhere \"biQuots xs ys A = { zs. xs @ zs @ rev ys \\<in> A }\""], ["", "abbreviation \n  biQuotss :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a lang set \\<Rightarrow> 'a lang\"\nwhere\n  \"biQuotss xs ys As \\<equiv> \\<Union> (biQuots xs ys ` As)\""], ["", "lemma biQuot_rQuot_lQuot: \"biQuot x y A = rQuot y (lQuot x A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. biQuot x y A = rQuot y (lQuot x A)", "unfolding biQuot_def rQuot_def lQuot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. x # xs @ [y] \\<in> A} = {xs. xs @ [y] \\<in> {xs. x # xs \\<in> A}}", "by auto"], ["", "lemma biQuot_lQuot_rQuot: \"biQuot x y A = lQuot x (rQuot y A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. biQuot x y A = lQuot x (rQuot y A)", "unfolding biQuot_def rQuot_def lQuot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. x # xs @ [y] \\<in> A} = {xs. x # xs \\<in> {xs. xs @ [y] \\<in> A}}", "by auto"], ["", "lemma biQuots_rQuots_lQuots: \"biQuots x y A = rQuots y (lQuots x A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. biQuots x y A = rQuots y (lQuots x A)", "unfolding biQuots_def rQuots_def lQuots_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {zs. x @ zs @ rev y \\<in> A} =\n    {ys. ys @ rev y \\<in> {ys. x @ ys \\<in> A}}", "by auto"], ["", "lemma biQuots_lQuots_rQuots: \"biQuots x y A = lQuots x (rQuots y A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. biQuots x y A = lQuots x (rQuots y A)", "unfolding biQuots_def rQuots_def lQuots_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {zs. x @ zs @ rev y \\<in> A} =\n    {ys. x @ ys \\<in> {ys. ys @ rev y \\<in> A}}", "by auto"], ["", "lemma biQuot_empty[simp]:   \"biQuot a b {} = {}\"\n  and biQuot_epsilon[simp]: \"biQuot a b {[]} = {}\"\n  and biQuot_char[simp]:    \"biQuot a b {[c]} = {}\"\n  and biQuot_union[simp]:   \"biQuot a b (A \\<union> B) = biQuot a b A \\<union> biQuot a b B\"\n  and biQuot_inter[simp]:   \"biQuot a b (A \\<inter> B) = biQuot a b A \\<inter> biQuot a b B\"\n  and biQuot_compl[simp]:   \"biQuot a b (-A) = - biQuot a b A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (biQuot a b {} = {} &&&\n     biQuot a b {[]} = {} &&& biQuot a b {[c]} = {}) &&&\n    biQuot a b (A \\<union> B) = biQuot a b A \\<union> biQuot a b B &&&\n    biQuot a b (A \\<inter> B) = biQuot a b A \\<inter> biQuot a b B &&&\n    biQuot a b (- A) = - biQuot a b A", "by (auto simp: biQuot_def)"], ["", "lemma biQuot_conc [simp]: \"biQuot a b (A @@ B) =\n  lQuot a A @@ rQuot b B \\<union>\n  (if [] \\<in> A \\<and> [] \\<in> B then biQuot a b A \\<union> biQuot a b B\n  else if [] \\<in> A then biQuot a b B\n  else if [] \\<in> B then biQuot a b A\n  else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. biQuot a b (A @@ B) =\n    lQuot a A @@ rQuot b B \\<union>\n    (if [] \\<in> A \\<and> [] \\<in> B then biQuot a b A \\<union> biQuot a b B\n     else if [] \\<in> A then biQuot a b B\n          else if [] \\<in> B then biQuot a b A else {})", "unfolding biQuot_rQuot_lQuot"], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuot b (lQuot a (A @@ B)) =\n    lQuot a A @@ rQuot b B \\<union>\n    (if [] \\<in> A \\<and> [] \\<in> B\n     then rQuot b (lQuot a A) \\<union> rQuot b (lQuot a B)\n     else if [] \\<in> A then rQuot b (lQuot a B)\n          else if [] \\<in> B then rQuot b (lQuot a A) else {})", "by auto"], ["", "lemma biQuot_star [simp]: \"biQuot a b (star A) = biQuot a b A \\<union> lQuot a A @@ star A @@ rQuot b A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. biQuot a b (star A) =\n    biQuot a b A \\<union> lQuot a A @@ star A @@ rQuot b A", "unfolding biQuot_rQuot_lQuot"], ["proof (prove)\ngoal (1 subgoal):\n 1. rQuot b (lQuot a (star A)) =\n    rQuot b (lQuot a A) \\<union> lQuot a A @@ star A @@ rQuot b A", "by auto"], ["", "lemma biQuot_diff[simp]: \"biQuot a b (A - B) = biQuot a b A - biQuot a b B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. biQuot a b (A - B) = biQuot a b A - biQuot a b B", "by(auto simp add: biQuot_def)"], ["", "lemma biQuot_lists[simp]: \"a : S \\<Longrightarrow> b : S \\<Longrightarrow> biQuot a b (lists S) = lists S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> S; b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> biQuot a b (lists S) = lists S", "by(auto simp add: biQuot_def)"], ["", "lemma biQuots_simps [simp]:\n  shows \"biQuots [] [] A = A\"\n  and   \"biQuots (a#as) (b#bs) A = biQuots as bs (biQuot a b A)\"\n  and   \"\\<lbrakk>length s1 = length t1; length s2 = length t2\\<rbrakk> \\<Longrightarrow>\n    biQuots (s1 @ s2) (t1 @ t2) A = biQuots s2 t2 (biQuots s1 t1 A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. biQuots [] [] A = A &&&\n    biQuots (a # as) (b # bs) A = biQuots as bs (biQuot a b A) &&&\n    (\\<lbrakk>length s1 = length t1; length s2 = length t2\\<rbrakk>\n     \\<Longrightarrow> biQuots (s1 @ s2) (t1 @ t2) A =\n                       biQuots s2 t2 (biQuots s1 t1 A))", "unfolding biQuots_def biQuot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {zs. [] @ zs @ rev [] \\<in> A} = A &&&\n    {zs. (a # as) @ zs @ rev (b # bs) \\<in> A} =\n    {zs. as @ zs @ rev bs \\<in> {xs. a # xs @ [b] \\<in> A}} &&&\n    (\\<lbrakk>length s1 = length t1; length s2 = length t2\\<rbrakk>\n     \\<Longrightarrow> {zs. (s1 @ s2) @ zs @ rev (t1 @ t2) \\<in> A} =\n                       {zs.\n                        s2 @ zs @ rev t2\n                        \\<in> {zs. s1 @ zs @ rev t1 \\<in> A}})", "by auto"], ["", "lemma biQuots_append[iff]: \"v \\<in> biQuots u w A \\<longleftrightarrow> u @ v @ rev w \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> biQuots u w A) = (u @ v @ rev w \\<in> A)", "unfolding biQuots_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> {zs. u @ zs @ rev w \\<in> A}) = (u @ v @ rev w \\<in> A)", "by auto"], ["", "subsection \\<open>Arden's Lemma\\<close>"], ["", "lemma arden_helper:\n  assumes eq: \"X = A @@ X \\<union> B\"\n  shows \"X = (A ^^ Suc n) @@ X \\<union> (\\<Union>m\\<le>n. (A ^^ m) @@ B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. X = A ^^ Suc 0 @@ X \\<union> (\\<Union>m\\<le>0. A ^^ m @@ B)\n 2. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. X = A ^^ Suc 0 @@ X \\<union> (\\<Union>m\\<le>0. A ^^ m @@ B)\n 2. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "show \"X = (A ^^ Suc 0) @@ X \\<union> (\\<Union>m\\<le>0. (A ^^ m) @@ B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = A ^^ Suc 0 @@ X \\<union> (\\<Union>m\\<le>0. A ^^ m @@ B)", "using eq"], ["proof (prove)\nusing this:\n  X = A @@ X \\<union> B\n\ngoal (1 subgoal):\n 1. X = A ^^ Suc 0 @@ X \\<union> (\\<Union>m\\<le>0. A ^^ m @@ B)", "by simp"], ["proof (state)\nthis:\n  X = A ^^ Suc 0 @@ X \\<union> (\\<Union>m\\<le>0. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "case (Suc n)"], ["proof (state)\nthis:\n  X = A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "have ih: \"X = (A ^^ Suc n) @@ X \\<union> (\\<Union>m\\<le>n. (A ^^ m) @@ B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B)", "by fact"], ["proof (state)\nthis:\n  X = A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "also"], ["proof (state)\nthis:\n  X = A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "have \"\\<dots> = (A ^^ Suc n) @@ (A @@ X \\<union> B) \\<union> (\\<Union>m\\<le>n. (A ^^ m) @@ B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B) =\n    A ^^ Suc n @@ (A @@ X \\<union> B) \\<union>\n    (\\<Union>m\\<le>n. A ^^ m @@ B)", "using eq"], ["proof (prove)\nusing this:\n  X = A @@ X \\<union> B\n\ngoal (1 subgoal):\n 1. A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B) =\n    A ^^ Suc n @@ (A @@ X \\<union> B) \\<union>\n    (\\<Union>m\\<le>n. A ^^ m @@ B)", "by simp"], ["proof (state)\nthis:\n  A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B) =\n  A ^^ Suc n @@ (A @@ X \\<union> B) \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "also"], ["proof (state)\nthis:\n  A ^^ Suc n @@ X \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B) =\n  A ^^ Suc n @@ (A @@ X \\<union> B) \\<union> (\\<Union>m\\<le>n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "have \"\\<dots> = (A ^^ Suc (Suc n)) @@ X \\<union> ((A ^^ Suc n) @@ B) \\<union> (\\<Union>m\\<le>n. (A ^^ m) @@ B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^^ Suc n @@ (A @@ X \\<union> B) \\<union>\n    (\\<Union>m\\<le>n. A ^^ m @@ B) =\n    A ^^ Suc (Suc n) @@ X \\<union> A ^^ Suc n @@ B \\<union>\n    (\\<Union>m\\<le>n. A ^^ m @@ B)", "by (simp add: conc_Un_distrib conc_assoc[symmetric] conc_pow_comm)"], ["proof (state)\nthis:\n  A ^^ Suc n @@ (A @@ X \\<union> B) \\<union>\n  (\\<Union>m\\<le>n. A ^^ m @@ B) =\n  A ^^ Suc (Suc n) @@ X \\<union> A ^^ Suc n @@ B \\<union>\n  (\\<Union>m\\<le>n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "also"], ["proof (state)\nthis:\n  A ^^ Suc n @@ (A @@ X \\<union> B) \\<union>\n  (\\<Union>m\\<le>n. A ^^ m @@ B) =\n  A ^^ Suc (Suc n) @@ X \\<union> A ^^ Suc n @@ B \\<union>\n  (\\<Union>m\\<le>n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "have \"\\<dots> = (A ^^ Suc (Suc n)) @@ X \\<union> (\\<Union>m\\<le>Suc n. (A ^^ m) @@ B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^^ Suc (Suc n) @@ X \\<union> A ^^ Suc n @@ B \\<union>\n    (\\<Union>m\\<le>n. A ^^ m @@ B) =\n    A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "by (auto simp add: atMost_Suc)"], ["proof (state)\nthis:\n  A ^^ Suc (Suc n) @@ X \\<union> A ^^ Suc n @@ B \\<union>\n  (\\<Union>m\\<le>n. A ^^ m @@ B) =\n  A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       A ^^ Suc n @@ X \\<union>\n       (\\<Union>m\\<le>n. A ^^ m @@ B) \\<Longrightarrow>\n       X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "finally"], ["proof (chain)\npicking this:\n  X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "show \"X = (A ^^ Suc (Suc n)) @@ X \\<union> (\\<Union>m\\<le>Suc n. (A ^^ m) @@ B)\""], ["proof (prove)\nusing this:\n  X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)", "."], ["proof (state)\nthis:\n  X = A ^^ Suc (Suc n) @@ X \\<union> (\\<Union>m\\<le>Suc n. A ^^ m @@ B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Arden:\n  assumes \"[] \\<notin> A\" \n  shows \"X = A @@ X \\<union> B \\<longleftrightarrow> X = star A @@ B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X = A @@ X \\<union> B) = (X = star A @@ B)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "assume eq: \"X = A @@ X \\<union> B\""], ["proof (state)\nthis:\n  X = A @@ X \\<union> B\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "{"], ["proof (state)\nthis:\n  X = A @@ X \\<union> B\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "fix w"], ["proof (state)\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "assume \"w : X\""], ["proof (state)\nthis:\n  w \\<in> X\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "let ?n = \"size w\""], ["proof (state)\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "from \\<open>[] \\<notin> A\\<close>"], ["proof (chain)\npicking this:\n  [] \\<notin> A", "have \"ALL u : A. length u \\<ge> 1\""], ["proof (prove)\nusing this:\n  [] \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>A. 1 \\<le> length u", "by (metis Suc_eq_plus1 add_leD2 le_0_eq length_0_conv not_less_eq_eq)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>A. 1 \\<le> length u\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "hence \"ALL u : A^^(?n+1). length u \\<ge> ?n+1\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>A. 1 \\<le> length u\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>A ^^ (length w + 1). length w + 1 \\<le> length u", "by (metis length_lang_pow_lb nat_mult_1)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>A ^^ (length w + 1). length w + 1 \\<le> length u\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "hence \"ALL u : A^^(?n+1)@@X. length u \\<ge> ?n+1\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>A ^^ (length w + 1). length w + 1 \\<le> length u\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>A ^^ (length w + 1) @@ X. length w + 1 \\<le> length u", "by(auto simp only: conc_def length_append)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>A ^^ (length w + 1) @@ X. length w + 1 \\<le> length u\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "hence \"w \\<notin> A^^(?n+1)@@X\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>A ^^ (length w + 1) @@ X. length w + 1 \\<le> length u\n\ngoal (1 subgoal):\n 1. w \\<notin> A ^^ (length w + 1) @@ X", "by auto"], ["proof (state)\nthis:\n  w \\<notin> A ^^ (length w + 1) @@ X\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "hence \"w : star A @@ B\""], ["proof (prove)\nusing this:\n  w \\<notin> A ^^ (length w + 1) @@ X\n\ngoal (1 subgoal):\n 1. w \\<in> star A @@ B", "using \\<open>w : X\\<close>"], ["proof (prove)\nusing this:\n  w \\<notin> A ^^ (length w + 1) @@ X\n  w \\<in> X\n\ngoal (1 subgoal):\n 1. w \\<in> star A @@ B", "using arden_helper[OF eq, where n=\"?n\"]"], ["proof (prove)\nusing this:\n  w \\<notin> A ^^ (length w + 1) @@ X\n  w \\<in> X\n  X =\n  A ^^ Suc (length w) @@ X \\<union> (\\<Union>m\\<le>length w. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. w \\<in> star A @@ B", "by (auto simp add: star_def conc_UNION_distrib)"], ["proof (state)\nthis:\n  w \\<in> star A @@ B\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "}"], ["proof (state)\nthis:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> star A @@ B\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "moreover"], ["proof (state)\nthis:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> star A @@ B\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "{"], ["proof (state)\nthis:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> star A @@ B\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "fix w"], ["proof (state)\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "assume \"w : star A @@ B\""], ["proof (state)\nthis:\n  w \\<in> star A @@ B\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "hence \"EX n. w : A^^n @@ B\""], ["proof (prove)\nusing this:\n  w \\<in> star A @@ B\n\ngoal (1 subgoal):\n 1. \\<exists>n. w \\<in> A ^^ n @@ B", "by(auto simp: conc_def star_def)"], ["proof (state)\nthis:\n  \\<exists>n. w \\<in> A ^^ n @@ B\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "hence \"w : X\""], ["proof (prove)\nusing this:\n  \\<exists>n. w \\<in> A ^^ n @@ B\n\ngoal (1 subgoal):\n 1. w \\<in> X", "using arden_helper[OF eq]"], ["proof (prove)\nusing this:\n  \\<exists>n. w \\<in> A ^^ n @@ B\n  X = A ^^ Suc ?n @@ X \\<union> (\\<Union>m\\<le>?n. A ^^ m @@ B)\n\ngoal (1 subgoal):\n 1. w \\<in> X", "by blast"], ["proof (state)\nthis:\n  w \\<in> X\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "}"], ["proof (state)\nthis:\n  ?w2 \\<in> star A @@ B \\<Longrightarrow> ?w2 \\<in> X\n\ngoal (2 subgoals):\n 1. X = A @@ X \\<union> B \\<Longrightarrow> X = star A @@ B\n 2. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "ultimately"], ["proof (chain)\npicking this:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> star A @@ B\n  ?w2 \\<in> star A @@ B \\<Longrightarrow> ?w2 \\<in> X", "show \"X = star A @@ B\""], ["proof (prove)\nusing this:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> star A @@ B\n  ?w2 \\<in> star A @@ B \\<Longrightarrow> ?w2 \\<in> X\n\ngoal (1 subgoal):\n 1. X = star A @@ B", "by blast"], ["proof (state)\nthis:\n  X = star A @@ B\n\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "assume eq: \"X = star A @@ B\""], ["proof (state)\nthis:\n  X = star A @@ B\n\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "have \"star A = A @@ star A \\<union> {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star A = A @@ star A \\<union> {[]}", "by (rule star_unfold_left)"], ["proof (state)\nthis:\n  star A = A @@ star A \\<union> {[]}\n\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "then"], ["proof (chain)\npicking this:\n  star A = A @@ star A \\<union> {[]}", "have \"star A @@ B = (A @@ star A \\<union> {[]}) @@ B\""], ["proof (prove)\nusing this:\n  star A = A @@ star A \\<union> {[]}\n\ngoal (1 subgoal):\n 1. star A @@ B = (A @@ star A \\<union> {[]}) @@ B", "by metis"], ["proof (state)\nthis:\n  star A @@ B = (A @@ star A \\<union> {[]}) @@ B\n\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "also"], ["proof (state)\nthis:\n  star A @@ B = (A @@ star A \\<union> {[]}) @@ B\n\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "have \"\\<dots> = (A @@ star A) @@ B \\<union> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A @@ star A \\<union> {[]}) @@ B = (A @@ star A) @@ B \\<union> B", "unfolding conc_Un_distrib"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A @@ star A) @@ B \\<union> {[]} @@ B = (A @@ star A) @@ B \\<union> B", "by simp"], ["proof (state)\nthis:\n  (A @@ star A \\<union> {[]}) @@ B = (A @@ star A) @@ B \\<union> B\n\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "also"], ["proof (state)\nthis:\n  (A @@ star A \\<union> {[]}) @@ B = (A @@ star A) @@ B \\<union> B\n\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "have \"\\<dots> = A @@ (star A @@ B) \\<union> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A @@ star A) @@ B \\<union> B = A @@ star A @@ B \\<union> B", "by (simp only: conc_assoc)"], ["proof (state)\nthis:\n  (A @@ star A) @@ B \\<union> B = A @@ star A @@ B \\<union> B\n\ngoal (1 subgoal):\n 1. X = star A @@ B \\<Longrightarrow> X = A @@ X \\<union> B", "finally"], ["proof (chain)\npicking this:\n  star A @@ B = A @@ star A @@ B \\<union> B", "show \"X = A @@ X \\<union> B\""], ["proof (prove)\nusing this:\n  star A @@ B = A @@ star A @@ B \\<union> B\n\ngoal (1 subgoal):\n 1. X = A @@ X \\<union> B", "using eq"], ["proof (prove)\nusing this:\n  star A @@ B = A @@ star A @@ B \\<union> B\n  X = star A @@ B\n\ngoal (1 subgoal):\n 1. X = A @@ X \\<union> B", "by blast"], ["proof (state)\nthis:\n  X = A @@ X \\<union> B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reversed_arden_helper:\n  assumes eq: \"X = X @@ A \\<union> B\"\n  shows \"X = X @@ (A ^^ Suc n) \\<union> (\\<Union>m\\<le>n. B @@ (A ^^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. X = X @@ A ^^ Suc 0 \\<union> (\\<Union>m\\<le>0. B @@ A ^^ m)\n 2. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. X = X @@ A ^^ Suc 0 \\<union> (\\<Union>m\\<le>0. B @@ A ^^ m)\n 2. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "show \"X = X @@ (A ^^ Suc 0) \\<union> (\\<Union>m\\<le>0. B @@ (A ^^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = X @@ A ^^ Suc 0 \\<union> (\\<Union>m\\<le>0. B @@ A ^^ m)", "using eq"], ["proof (prove)\nusing this:\n  X = X @@ A \\<union> B\n\ngoal (1 subgoal):\n 1. X = X @@ A ^^ Suc 0 \\<union> (\\<Union>m\\<le>0. B @@ A ^^ m)", "by simp"], ["proof (state)\nthis:\n  X = X @@ A ^^ Suc 0 \\<union> (\\<Union>m\\<le>0. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "case (Suc n)"], ["proof (state)\nthis:\n  X = X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "have ih: \"X = X @@ (A ^^ Suc n) \\<union> (\\<Union>m\\<le>n. B @@ (A ^^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m)", "by fact"], ["proof (state)\nthis:\n  X = X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "also"], ["proof (state)\nthis:\n  X = X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "have \"\\<dots> = (X @@ A \\<union> B) @@ (A ^^ Suc n) \\<union> (\\<Union>m\\<le>n. B @@ (A ^^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m) =\n    (X @@ A \\<union> B) @@ A ^^ Suc n \\<union>\n    (\\<Union>m\\<le>n. B @@ A ^^ m)", "using eq"], ["proof (prove)\nusing this:\n  X = X @@ A \\<union> B\n\ngoal (1 subgoal):\n 1. X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m) =\n    (X @@ A \\<union> B) @@ A ^^ Suc n \\<union>\n    (\\<Union>m\\<le>n. B @@ A ^^ m)", "by simp"], ["proof (state)\nthis:\n  X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m) =\n  (X @@ A \\<union> B) @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "also"], ["proof (state)\nthis:\n  X @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m) =\n  (X @@ A \\<union> B) @@ A ^^ Suc n \\<union> (\\<Union>m\\<le>n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "have \"\\<dots> = X @@ (A ^^ Suc (Suc n)) \\<union> (B @@ (A ^^ Suc n)) \\<union> (\\<Union>m\\<le>n. B @@ (A ^^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X @@ A \\<union> B) @@ A ^^ Suc n \\<union>\n    (\\<Union>m\\<le>n. B @@ A ^^ m) =\n    X @@ A ^^ Suc (Suc n) \\<union> B @@ A ^^ Suc n \\<union>\n    (\\<Union>m\\<le>n. B @@ A ^^ m)", "by (simp add: conc_Un_distrib conc_assoc)"], ["proof (state)\nthis:\n  (X @@ A \\<union> B) @@ A ^^ Suc n \\<union>\n  (\\<Union>m\\<le>n. B @@ A ^^ m) =\n  X @@ A ^^ Suc (Suc n) \\<union> B @@ A ^^ Suc n \\<union>\n  (\\<Union>m\\<le>n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "also"], ["proof (state)\nthis:\n  (X @@ A \\<union> B) @@ A ^^ Suc n \\<union>\n  (\\<Union>m\\<le>n. B @@ A ^^ m) =\n  X @@ A ^^ Suc (Suc n) \\<union> B @@ A ^^ Suc n \\<union>\n  (\\<Union>m\\<le>n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "have \"\\<dots> = X @@ (A ^^ Suc (Suc n)) \\<union> (\\<Union>m\\<le>Suc n. B @@ (A ^^ m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X @@ A ^^ Suc (Suc n) \\<union> B @@ A ^^ Suc n \\<union>\n    (\\<Union>m\\<le>n. B @@ A ^^ m) =\n    X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "by (auto simp add: atMost_Suc)"], ["proof (state)\nthis:\n  X @@ A ^^ Suc (Suc n) \\<union> B @@ A ^^ Suc n \\<union>\n  (\\<Union>m\\<le>n. B @@ A ^^ m) =\n  X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       X =\n       X @@ A ^^ Suc n \\<union>\n       (\\<Union>m\\<le>n. B @@ A ^^ m) \\<Longrightarrow>\n       X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "finally"], ["proof (chain)\npicking this:\n  X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "show \"X = X @@ (A ^^ Suc (Suc n)) \\<union> (\\<Union>m\\<le>Suc n. B @@ (A ^^ m))\""], ["proof (prove)\nusing this:\n  X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)", "."], ["proof (state)\nthis:\n  X = X @@ A ^^ Suc (Suc n) \\<union> (\\<Union>m\\<le>Suc n. B @@ A ^^ m)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem reversed_Arden:\n  assumes nemp: \"[] \\<notin> A\"\n  shows \"X = X @@ A \\<union> B \\<longleftrightarrow> X = B @@ star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X = X @@ A \\<union> B) = (X = B @@ star A)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "assume eq: \"X = X @@ A \\<union> B\""], ["proof (state)\nthis:\n  X = X @@ A \\<union> B\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "{"], ["proof (state)\nthis:\n  X = X @@ A \\<union> B\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "fix w"], ["proof (state)\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "assume \"w : X\""], ["proof (state)\nthis:\n  w \\<in> X\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "let ?n = \"size w\""], ["proof (state)\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "from \\<open>[] \\<notin> A\\<close>"], ["proof (chain)\npicking this:\n  [] \\<notin> A", "have \"ALL u : A. length u \\<ge> 1\""], ["proof (prove)\nusing this:\n  [] \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>A. 1 \\<le> length u", "by (metis Suc_eq_plus1 add_leD2 le_0_eq length_0_conv not_less_eq_eq)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>A. 1 \\<le> length u\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "hence \"ALL u : A^^(?n+1). length u \\<ge> ?n+1\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>A. 1 \\<le> length u\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>A ^^ (length w + 1). length w + 1 \\<le> length u", "by (metis length_lang_pow_lb nat_mult_1)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>A ^^ (length w + 1). length w + 1 \\<le> length u\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "hence \"ALL u : X @@ A^^(?n+1). length u \\<ge> ?n+1\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>A ^^ (length w + 1). length w + 1 \\<le> length u\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>X @@ A ^^ (length w + 1). length w + 1 \\<le> length u", "by(auto simp only: conc_def length_append)"], ["proof (state)\nthis:\n  \\<forall>u\\<in>X @@ A ^^ (length w + 1). length w + 1 \\<le> length u\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "hence \"w \\<notin> X @@ A^^(?n+1)\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>X @@ A ^^ (length w + 1). length w + 1 \\<le> length u\n\ngoal (1 subgoal):\n 1. w \\<notin> X @@ A ^^ (length w + 1)", "by auto"], ["proof (state)\nthis:\n  w \\<notin> X @@ A ^^ (length w + 1)\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "hence \"w : B @@ star A\""], ["proof (prove)\nusing this:\n  w \\<notin> X @@ A ^^ (length w + 1)\n\ngoal (1 subgoal):\n 1. w \\<in> B @@ star A", "using \\<open>w : X\\<close>"], ["proof (prove)\nusing this:\n  w \\<notin> X @@ A ^^ (length w + 1)\n  w \\<in> X\n\ngoal (1 subgoal):\n 1. w \\<in> B @@ star A", "using reversed_arden_helper[OF eq, where n=\"?n\"]"], ["proof (prove)\nusing this:\n  w \\<notin> X @@ A ^^ (length w + 1)\n  w \\<in> X\n  X =\n  X @@ A ^^ Suc (length w) \\<union> (\\<Union>m\\<le>length w. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. w \\<in> B @@ star A", "by (auto simp add: star_def conc_UNION_distrib)"], ["proof (state)\nthis:\n  w \\<in> B @@ star A\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "}"], ["proof (state)\nthis:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> B @@ star A\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "moreover"], ["proof (state)\nthis:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> B @@ star A\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "{"], ["proof (state)\nthis:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> B @@ star A\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "fix w"], ["proof (state)\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "assume \"w : B @@ star A\""], ["proof (state)\nthis:\n  w \\<in> B @@ star A\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "hence \"EX n. w : B @@ A^^n\""], ["proof (prove)\nusing this:\n  w \\<in> B @@ star A\n\ngoal (1 subgoal):\n 1. \\<exists>n. w \\<in> B @@ A ^^ n", "by (auto simp: conc_def star_def)"], ["proof (state)\nthis:\n  \\<exists>n. w \\<in> B @@ A ^^ n\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "hence \"w : X\""], ["proof (prove)\nusing this:\n  \\<exists>n. w \\<in> B @@ A ^^ n\n\ngoal (1 subgoal):\n 1. w \\<in> X", "using reversed_arden_helper[OF eq]"], ["proof (prove)\nusing this:\n  \\<exists>n. w \\<in> B @@ A ^^ n\n  X = X @@ A ^^ Suc ?n \\<union> (\\<Union>m\\<le>?n. B @@ A ^^ m)\n\ngoal (1 subgoal):\n 1. w \\<in> X", "by blast"], ["proof (state)\nthis:\n  w \\<in> X\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "}"], ["proof (state)\nthis:\n  ?w2 \\<in> B @@ star A \\<Longrightarrow> ?w2 \\<in> X\n\ngoal (2 subgoals):\n 1. X = X @@ A \\<union> B \\<Longrightarrow> X = B @@ star A\n 2. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "ultimately"], ["proof (chain)\npicking this:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> B @@ star A\n  ?w2 \\<in> B @@ star A \\<Longrightarrow> ?w2 \\<in> X", "show \"X = B @@ star A\""], ["proof (prove)\nusing this:\n  ?w2 \\<in> X \\<Longrightarrow> ?w2 \\<in> B @@ star A\n  ?w2 \\<in> B @@ star A \\<Longrightarrow> ?w2 \\<in> X\n\ngoal (1 subgoal):\n 1. X = B @@ star A", "by blast"], ["proof (state)\nthis:\n  X = B @@ star A\n\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "assume eq: \"X = B @@ star A\""], ["proof (state)\nthis:\n  X = B @@ star A\n\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "have \"star A = {[]} \\<union> star A @@ A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star A = {[]} \\<union> star A @@ A", "unfolding conc_star_comm[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. star A = {[]} \\<union> A @@ star A", "by(metis Un_commute star_unfold_left)"], ["proof (state)\nthis:\n  star A = {[]} \\<union> star A @@ A\n\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "then"], ["proof (chain)\npicking this:\n  star A = {[]} \\<union> star A @@ A", "have \"B @@ star A = B @@ ({[]} \\<union> star A @@ A)\""], ["proof (prove)\nusing this:\n  star A = {[]} \\<union> star A @@ A\n\ngoal (1 subgoal):\n 1. B @@ star A = B @@ ({[]} \\<union> star A @@ A)", "by metis"], ["proof (state)\nthis:\n  B @@ star A = B @@ ({[]} \\<union> star A @@ A)\n\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "also"], ["proof (state)\nthis:\n  B @@ star A = B @@ ({[]} \\<union> star A @@ A)\n\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "have \"\\<dots> = B \\<union> B @@ (star A @@ A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B @@ ({[]} \\<union> star A @@ A) = B \\<union> B @@ star A @@ A", "unfolding conc_Un_distrib"], ["proof (prove)\ngoal (1 subgoal):\n 1. B @@ {[]} \\<union> B @@ star A @@ A = B \\<union> B @@ star A @@ A", "by simp"], ["proof (state)\nthis:\n  B @@ ({[]} \\<union> star A @@ A) = B \\<union> B @@ star A @@ A\n\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "also"], ["proof (state)\nthis:\n  B @@ ({[]} \\<union> star A @@ A) = B \\<union> B @@ star A @@ A\n\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "have \"\\<dots> = B \\<union> (B @@ star A) @@ A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<union> B @@ star A @@ A = B \\<union> (B @@ star A) @@ A", "by (simp only: conc_assoc)"], ["proof (state)\nthis:\n  B \\<union> B @@ star A @@ A = B \\<union> (B @@ star A) @@ A\n\ngoal (1 subgoal):\n 1. X = B @@ star A \\<Longrightarrow> X = X @@ A \\<union> B", "finally"], ["proof (chain)\npicking this:\n  B @@ star A = B \\<union> (B @@ star A) @@ A", "show \"X = X @@ A \\<union> B\""], ["proof (prove)\nusing this:\n  B @@ star A = B \\<union> (B @@ star A) @@ A\n\ngoal (1 subgoal):\n 1. X = X @@ A \\<union> B", "using eq"], ["proof (prove)\nusing this:\n  B @@ star A = B \\<union> (B @@ star A) @@ A\n  X = B @@ star A\n\ngoal (1 subgoal):\n 1. X = X @@ A \\<union> B", "by blast"], ["proof (state)\nthis:\n  X = X @@ A \\<union> B\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Lists of Fixed Length\\<close>"], ["", "abbreviation listsN where \"listsN n S \\<equiv> {xs. xs \\<in> lists S \\<and> length xs = n}\""], ["", "lemma tl_listsN: \"A \\<subseteq> listsN (n + 1) S \\<Longrightarrow> tl ` A \\<subseteq> listsN n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> listsN (n + 1) S \\<Longrightarrow>\n    tl ` A \\<subseteq> listsN n S", "proof (intro image_subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> listsN (n + 1) S; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> tl x \\<in> listsN n S", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> listsN (n + 1) S; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> tl x \\<in> listsN n S", "assume \"A \\<subseteq> listsN (n + 1) S\" \"xs \\<in> A\""], ["proof (state)\nthis:\n  A \\<subseteq> listsN (n + 1) S\n  xs \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> listsN (n + 1) S; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> tl x \\<in> listsN n S", "thus \"tl xs \\<in> listsN n S\""], ["proof (prove)\nusing this:\n  A \\<subseteq> listsN (n + 1) S\n  xs \\<in> A\n\ngoal (1 subgoal):\n 1. tl xs \\<in> listsN n S", "by (induct xs) auto"], ["proof (state)\nthis:\n  tl xs \\<in> listsN n S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_tl_listsN: \"A \\<subseteq> lists (listsN (n + 1) S) \\<Longrightarrow> map tl ` A \\<subseteq> lists (listsN n S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> lists (listsN (n + 1) S) \\<Longrightarrow>\n    map tl ` A \\<subseteq> lists (listsN n S)", "proof (intro image_subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> lists (listsN (n + 1) S); x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> map tl x \\<in> lists (listsN n S)", "fix xss"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> lists (listsN (n + 1) S); x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> map tl x \\<in> lists (listsN n S)", "assume \"A \\<subseteq> lists (listsN (n + 1) S)\" \"xss \\<in> A\""], ["proof (state)\nthis:\n  A \\<subseteq> lists (listsN (n + 1) S)\n  xss \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> lists (listsN (n + 1) S); x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> map tl x \\<in> lists (listsN n S)", "hence \"set xss \\<subseteq> listsN (n + 1) S\""], ["proof (prove)\nusing this:\n  A \\<subseteq> lists (listsN (n + 1) S)\n  xss \\<in> A\n\ngoal (1 subgoal):\n 1. set xss \\<subseteq> listsN (n + 1) S", "by auto"], ["proof (state)\nthis:\n  set xss \\<subseteq> listsN (n + 1) S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> lists (listsN (n + 1) S); x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> map tl x \\<in> lists (listsN n S)", "hence \"\\<forall>xs \\<in> set xss. tl xs \\<in> listsN n S\""], ["proof (prove)\nusing this:\n  set xss \\<subseteq> listsN (n + 1) S\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>set xss. tl xs \\<in> listsN n S", "using tl_listsN[of \"set xss\" S n]"], ["proof (prove)\nusing this:\n  set xss \\<subseteq> listsN (n + 1) S\n  set xss \\<subseteq> listsN (n + 1) S \\<Longrightarrow>\n  tl ` set xss \\<subseteq> listsN n S\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>set xss. tl xs \\<in> listsN n S", "by auto"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>set xss. tl xs \\<in> listsN n S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> lists (listsN (n + 1) S); x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> map tl x \\<in> lists (listsN n S)", "thus \"map tl xss \\<in> lists (listsN n S)\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>set xss. tl xs \\<in> listsN n S\n\ngoal (1 subgoal):\n 1. map tl xss \\<in> lists (listsN n S)", "by (induct xss) auto"], ["proof (state)\nthis:\n  map tl xss \\<in> lists (listsN n S)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}