{"file_name": "/home/qj213/afp-2021-10-22/thys/MSO_Regex_Equivalence/WS1S.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MSO_Regex_Equivalence", "problem_names": ["lemma (in wellorder) min_Least:\n  \"\\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n\\<rbrakk> \\<Longrightarrow> min (Least P) (Least Q) = (LEAST n. P n \\<or> Q n)\"", "lemma sconst_collapse: \"y ## sconst y = sconst y\"", "lemma shift_sconst_inj: \"\\<lbrakk>length x = length y; x @- sconst z = y @- sconst z\\<rbrakk> \\<Longrightarrow> x = y\"", "lemma any_\\<Sigma>[simp]: \"any \\<in> set \\<Sigma>\"", "lemma any_\\<sigma>[simp]: \"length bs = n \\<Longrightarrow> (any, bs) \\<in> set (\\<sigma> \\<Sigma> n)\"", "lemma tl_stream_enc[simp]: \"smap \\<pi> (stream_enc (w, x # I)) = stream_enc (w, I)\"", "lemma enc_atom_max: \"\\<lbrakk>\\<forall>x\\<in>set I. case x of Inl p \\<Rightarrow> p \\<le> n | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n; n \\<le> n'\\<rbrakk> \\<Longrightarrow>\n  enc_atom I (Suc n') a = (a, replicate (length I) False)\"", "lemma ex_Loop_stream_enc:\nassumes \"\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True\"\nshows \"\\<exists>n. sdrop n (stream_enc (w, I)) = sconst (any, replicate (length I) False)\"", "lemma length_snth_enc[simp]: \"length (snd (stream_enc (w, I) !! n)) = length I\"", "lemma sset_singleton[simp]: \"sset s \\<subseteq> {x} \\<longleftrightarrow> sset s = {x}\"", "lemma drop_sconstE: \"\\<lbrakk>drop n w @- sconst y = sconst y; p < length w; \\<not> p < n\\<rbrakk> \\<Longrightarrow> w ! p = y\"", "lemma less_length_cut_same:\n  \"\\<lbrakk>(w @- sconst y) !! p = a\\<rbrakk> \\<Longrightarrow> a = y \\<or> (p < length (cut_same y (w @- sconst y)) \\<and> w ! p = a)\"", "lemma less_length_cut_same_Inl:\n  \"\\<lbrakk>(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True); r < length I; I ! r = Inl p\\<rbrakk> \\<Longrightarrow>\n  p < length (cut_same (any, replicate (length I) False) (stream_enc (w, I)))\"", "lemma less_length_cut_same_Inr:\n  \"\\<lbrakk>(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True); r < length I; I ! r = Inr P\\<rbrakk> \\<Longrightarrow>\n  \\<forall>p \\<in> P. p < length (cut_same (any, replicate (length I) False) (stream_enc (w, I)))\"", "lemma cut_same_all[simp]: \"cut_same x (sconst x) = []\"", "lemma cut_same_stop[simp]:\n  assumes \"x \\<noteq> y\"\n  shows \"cut_same x (xs @- y ## sconst x) = xs @ [y]\" (is \"cut_same x ?s = _\")", "lemma cut_same_shift_sconst: \"\\<exists>n. w = cut_same x (w @- sconst x) @ replicate n x\"", "lemma set_cut_same: \"set (cut_same x (w @- sconst x)) \\<subseteq> set w\"", "lemma stream_enc_cut_same:\n  assumes \"(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\"\n  shows \"stream_enc (w, I) = cut_same (any, replicate (length I) False) (stream_enc (w, I)) @-\n    sconst (any, replicate (length I) False)\"", "lemma stream_enc_enc:\n  assumes \"(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\" and  v: \"v \\<in> enc (w, I)\"\n  shows \"stream_enc (w, I) = v @- sconst (any, replicate (length I) False)\"\n  (is \"?s = ?v @- sconst ?F\")", "lemma stream_enc_enc_some:\n  assumes \"(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\"\n  shows \"stream_enc (w, I) = (SOME v. v \\<in> enc (w, I)) @- sconst (any, replicate (length I) False)\"", "lemma enc_unique_length: \"v \\<in> enc (w, I) \\<Longrightarrow> \\<forall>v'. length v' = length v \\<and> v' \\<in> enc (w, I) \\<longrightarrow> v = v'\"", "lemma sdrop_sconst: \"sdrop n s = sconst x \\<Longrightarrow> n \\<le> m \\<Longrightarrow> s !! m = x\"", "lemma fin_cut_same_tl:\n  assumes \"\\<exists>n. sdrop n s = sconst x\" \n  shows \"fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) = cut_same (\\<pi> x) (smap \\<pi> s)\"", "lemma tl_enc[simp]:\n  assumes \"\\<forall>x \\<in> set (x # I). case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True\"\n  shows \"SAMEQUOT (any, replicate (length I) False) (map \\<pi> ` enc (w, x # I)) = enc (w, I)\"", "lemma encD:\n  \"\\<lbrakk>v \\<in> enc (w, I); (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\\<rbrakk> \\<Longrightarrow>\n  v = map (case_prod (enc_atom I)) (zip [0 ..< length v] (stake (length v) (w @- sconst any)))\"", "lemma enc_Inl: \"\\<lbrakk>x \\<in> enc (w, I); (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True);\n  m < length I; I ! m = Inl p\\<rbrakk> \\<Longrightarrow> p < length x \\<and> snd (x ! p) ! m\"", "lemma enc_Inr: assumes \"x \\<in> enc (w, I)\" \"\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True\"\n  \"M < length I\" \"I ! M = Inr P\"\n  shows \"p \\<in> P \\<longleftrightarrow> p < length x \\<and> snd (x ! p) ! M\"", "lemma enc_length:\n  assumes \"enc (w, I) = enc (w', I')\"\n  shows \"length I = length I'\"", "lemma enc_stream_enc: \n  \"\\<lbrakk>(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True);\n    (\\<forall>x \\<in> set I'. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True); \n    enc (w, I) = enc (w', I')\\<rbrakk> \\<Longrightarrow> stream_enc (w, I) = stream_enc (w', I')\"", "lemma encD_ex: \"\\<lbrakk>x \\<in> enc (w, I); (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\\<rbrakk> \\<Longrightarrow>\n  \\<exists>n. x = map (case_prod (enc_atom I)) (zip [0 ..< n] (stake n (w @- sconst any)))\"", "lemma enc_set_\\<sigma>: \"\\<lbrakk>x \\<in> enc (w, I); (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True);\n  length I = n; a \\<in> set x; set w \\<subseteq> set \\<Sigma>\\<rbrakk> \\<Longrightarrow> a \\<in> set (\\<sigma> \\<Sigma> n)\"", "lemma positions_in_row: \"positions_in_row s i = {p. snd (s !! p) ! i}\"", "lemma positions_in_row_unique: \"\\<exists>!p. snd (s !! p) ! i \\<Longrightarrow>\n  the_elem (positions_in_row s i) = (THE p. snd (s !! p) ! i)\"", "lemma positions_in_row_nth: \"\\<exists>!p. snd (s !! p) ! i \\<Longrightarrow>\n  snd (s !! the_elem (positions_in_row s i)) ! i\"", "lemma dec_word_stream_enc: \"dec_word (stream_enc (w, I)) = cut_same any (w @- sconst any)\"", "lemma stream_dec_Inl: \"\\<lbrakk>i \\<in> FO; i < n\\<rbrakk> \\<Longrightarrow> \\<exists>p. stream_dec n FO s ! i = Inl p\"", "lemma stream_dec_not_Inr: \"\\<lbrakk>stream_dec n FO s ! i = Inr P; i \\<in> FO; i < n\\<rbrakk> \\<Longrightarrow> False\"", "lemma stream_dec_Inr: \"\\<lbrakk>i \\<notin> FO; i < n\\<rbrakk> \\<Longrightarrow> \\<exists>P. stream_dec n FO s ! i = Inr P\"", "lemma stream_dec_not_Inl: \"\\<lbrakk>stream_dec n FO s ! i = Inl p; i \\<notin> FO; i < n\\<rbrakk> \\<Longrightarrow> False\"", "lemma Inr_dec_finite: \"\\<lbrakk>\\<forall>i<n. finite {p. snd (s !! p) ! i}; Inr P \\<in> set (stream_dec n FO s)\\<rbrakk> \\<Longrightarrow>\n  finite P\"", "lemma enc_atom_dec: \n  \"\\<lbrakk>\\<forall>p. length (snd (s !! p)) = n; \\<forall>i \\<in> FO. i < n \\<longrightarrow> (\\<exists>!p. snd (s !! p) ! i); a = fst (s !! p)\\<rbrakk> \\<Longrightarrow>\n   enc_atom (stream_dec n FO s) p a = s !! p\"", "lemma length_stream_dec[simp]: \"length (stream_dec n FO x) = n\"", "lemma stream_enc_dec:\n  \"\\<lbrakk>\\<exists>n. sdrop n (smap fst s) = sconst any;\n   stream_all (\\<lambda>x. length (snd x) = n) s; \\<forall>i \\<in> FO. (\\<exists>!p. snd (s !! p) ! i)\\<rbrakk> \\<Longrightarrow>\n   stream_enc (dec_word s, stream_dec n FO s) = s\"", "lemma stream_enc_unique: \n  \"i < length I \\<Longrightarrow> \\<exists>p. I ! i = Inl p \\<Longrightarrow> \\<exists>!p. snd (stream_enc (w, I) !! p) ! i\"", "lemma stream_dec_enc_Inl:\n  \"\\<lbrakk>stream_dec n FO (stream_enc (w, I)) ! i = Inl p'; I ! i = Inl p; i \\<in> FO; i < n; length I = n\\<rbrakk> \\<Longrightarrow>\n  p = p'\"", "lemma stream_dec_enc_Inr:\n  \"\\<lbrakk>stream_dec n FO (stream_enc (w, I)) ! i = Inr P'; I ! i = Inr P; i \\<notin> FO; i < n; length I = n\\<rbrakk> \\<Longrightarrow>\n  P = P'\"", "lemma Collect_snth: \"{p. P ((x ## s) !! p)} \\<subseteq> {0} \\<union> Suc ` {p. P (s !! p)}\"", "lemma finite_True_in_row: \"\\<forall>i < n. finite {p. snd ((w @- sconst (any, replicate n False)) !! p) ! i}\"", "lemma lang_ENC:\n assumes \"FO \\<subseteq> {0 ..< n}\" \"SO \\<subseteq> {0 ..< n} - FO\"\n shows \"lang n (ENC n FO) = \\<Union>{enc (w, I) | w I . length I = n \\<and> wf_interp w I \\<and>\n   (\\<forall>i \\<in> FO. case I ! i of Inl _ \\<Rightarrow> True | Inr _ \\<Rightarrow> False) \\<and>\n   (\\<forall>i \\<in> SO. case I ! i of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True)}\"\n   (is \"?L = ?R\")", "lemma lang_ENC_formula:\n  assumes \"wf_formula n \\<phi>\"\n  shows \"lang n (ENC n (FOV \\<phi>)) = \\<Union>{enc (w, I) | w I . length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}\"", "lemma wf_interp_for_formula_FExists: \n \"\\<lbrakk>wf_formula (length I) (FExists \\<phi>)\\<rbrakk>\\<Longrightarrow>\n  wf_interp_for_formula (w, I) (FExists \\<phi>) \\<longleftrightarrow> (\\<forall>p. wf_interp_for_formula (w, Inl p # I) \\<phi>)\"", "lemma wf_interp_for_formula_any_Inl: \"wf_interp_for_formula (w, Inl p # I) \\<phi> \\<Longrightarrow>\n  \\<forall>p. wf_interp_for_formula (w, Inl p # I) \\<phi>\"", "lemma wf_interp_for_formula_FEXISTS: \n \"\\<lbrakk>wf_formula (length I) (FEXISTS \\<phi>)\\<rbrakk>\\<Longrightarrow>\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>) \\<longleftrightarrow> (\\<forall>P. finite P \\<longrightarrow> wf_interp_for_formula (w, Inr P # I) \\<phi>)\"", "lemma wf_interp_for_formula_any_Inr: \"wf_interp_for_formula (w, Inr P # I) \\<phi> \\<Longrightarrow>\n  \\<forall>P. finite P \\<longrightarrow> wf_interp_for_formula (w, Inr P # I) \\<phi>\"", "lemma wf_interp_for_formula_FOr:\n  \"wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2) =\n     (wf_interp_for_formula (w, I) \\<phi>1 \\<and> wf_interp_for_formula (w, I) \\<phi>2)\"", "lemma wf_interp_for_formula_FAnd:\n  \"wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2) =\n     (wf_interp_for_formula (w, I) \\<phi>1 \\<and> wf_interp_for_formula (w, I) \\<phi>2)\"", "lemma enc_wf_interp: \n \"\\<lbrakk>wf_formula (length I) \\<phi>; wf_interp_for_formula (w, I) \\<phi>; x \\<in> enc (w, I)\\<rbrakk> \\<Longrightarrow>\n  wf_interp_for_formula (dec_word (x @- sconst (any, replicate (length I) False)),\n    stream_dec (length I) (FOV \\<phi>) (x @- sconst (any, replicate (length I) False))) \\<phi>\"", "lemma enc_atom_welldef: \"\\<forall>x a. enc_atom I x a = enc_atom I' x a \\<Longrightarrow> m < length I \\<Longrightarrow>\n  (case (I ! m, I' ! m) of (Inl p, Inl q) \\<Rightarrow> p = q | (Inr P, Inr Q) \\<Rightarrow> P = Q | _ \\<Rightarrow> True)\"", "lemma stream_enc_welldef: \"\\<lbrakk>stream_enc (w, I) = stream_enc (w', I'); wf_formula (length I) \\<phi>;\n  wf_interp_for_formula (w, I) \\<phi>; wf_interp_for_formula (w', I') \\<phi>\\<rbrakk> \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi> \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>\"", "lemma lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_FOr:\n  assumes \"wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\"\n  shows \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<subseteq>\n    (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<union> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2) \\<inter> \\<Union>{enc (w, I) | w I. length I = n \\<and> wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\"\n    (is \"_ \\<subseteq> (?L1 \\<union> ?L2) \\<inter> ?ENC\")", "lemma lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_FAnd:\n  assumes \"wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\"\n  shows \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<subseteq>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<inter> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 \\<inter> \\<Union>{enc (w, I) | w I. length I = n \\<and> wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\"", "lemma enc_eqI:\n  assumes \"x \\<in> enc (w, I)\" \"x \\<in> enc (w', I')\" \"wf_interp_for_formula (w, I) \\<phi>\" \"wf_interp_for_formula (w', I') \\<phi>\"\n    \"length I = length I'\"\n  shows \"enc (w, I) = enc (w', I')\"", "lemma enc_eq_welldef:\n  \"\\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) \\<phi>; wf_interp_for_formula (w, I) \\<phi> ;wf_interp_for_formula (w', I') \\<phi>\\<rbrakk> \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi> \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>\"", "lemma enc_welldef:\n  \"\\<lbrakk>x \\<in> enc (w, I); x \\<in> enc (w', I'); length I = length I'; wf_formula (length I) \\<phi>;\n  wf_interp_for_formula (w, I) \\<phi> ;wf_interp_for_formula (w', I') \\<phi>\\<rbrakk> \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi> \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>\"", "lemma wf_rexp_of: \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of n \\<phi>)\"", "theorem lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of: \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> = lang n (rexp_of n \\<phi>)\"\n   (is \"_ \\<Longrightarrow> _ = ?L n \\<phi>\")", "lemma wf_rexp_of_alt: \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of_alt n \\<phi>)\"", "lemma wf_rexp_of': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of' n \\<phi>)\"", "lemma wf_rexp_of_alt': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of_alt' n \\<phi>)\"", "lemma wf_rexp_of'': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of'' n \\<phi>)\"", "lemma ENC_FNot: \"ENC n (FOV (FNot \\<phi>)) = ENC n (FOV \\<phi>)\"", "lemma ENC_FAnd:\n  \"wf_formula n (FAnd \\<phi> \\<psi>) \\<Longrightarrow> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))\"", "lemma ENC_FOr:\n  \"wf_formula n (FOr \\<phi> \\<psi>) \\<Longrightarrow> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))\"", "lemma ENC_FExists:\n  \"wf_formula n (FExists \\<phi>) \\<Longrightarrow> lang n (ENC n (FOV (FExists \\<phi>))) =\n  SAMEQUOT (any, replicate n False) (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\" (is \"_ \\<Longrightarrow> ?L = ?R\")", "lemma ENC_FEXISTS:\n  \"wf_formula n (FEXISTS \\<phi>) \\<Longrightarrow> lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n  SAMEQUOT (any, replicate n False) (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\" (is \"_ \\<Longrightarrow> ?L = ?R\")", "lemma lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of_rexp_of':\n  \"wf_formula n \\<phi> \\<Longrightarrow> lang n (rexp_of n \\<phi>) = lang n (rexp_of' n \\<phi>)\"", "lemma SAMEQUTO_UN[simp]: \"SAMEQUOT x (\\<Union>y \\<in> A. B y) = (\\<Union>y \\<in> A. SAMEQUOT x (B y))\"", "lemma finite_positions_in_row[simp]:\n  \"n > 0 \\<Longrightarrow> finite (positions_in_row (x @- sconst (any, replicate n False)) 0)\"", "lemma fin_cut_same_snoc: \"fin_cut_same x (xs @ [y]) = (if x = y then fin_cut_same x xs else xs @ [y])\"", "lemma fin_cut_same_idem: \"fin_cut_same x (fin_cut_same x xs) = fin_cut_same x xs\"", "lemma cut_same_sconst: \"cut_same x (xs @- sconst x) = fin_cut_same x xs\"", "lemma length_cut_same: \"length (cut_same x s) = (LEAST n. sdrop n s = sconst x)\"", "lemma enc_alt: \"wf_interp w I \\<Longrightarrow>\n  x \\<in> enc (w, I) \\<longleftrightarrow> x @- sconst ((any, replicate (length I) False)) = stream_enc (w, I)\"", "lemma stream_stream_eqI: \"\\<lbrakk>\\<forall>(_, x) \\<in> sset xs. x \\<noteq> []; \\<forall>(_, x) \\<in> sset ys. x \\<noteq> [];\n  smap (\\<lambda>(_, x). hd x) xs = smap (\\<lambda>(_, x). hd x) ys; smap \\<pi> xs = smap \\<pi> ys\\<rbrakk> \\<Longrightarrow> xs = ys\"", "lemma project_enc_extend:\n  fixes x I\n  defines \"n \\<equiv> length I\"\n  defines \"z \\<equiv> \\<lambda>n. (any, replicate n False)\"\n  defines \"I' \\<equiv> Inr (positions_in_row (x @- sconst (z (Suc n))) 0) # I\"\n  assumes wf: \"wf_interp w I\"\n  assumes enc: \"fin_cut_same (z n) (map \\<pi> x) @ replicate m (z n) \\<in> enc (w, I)\"\n  assumes nonempty: \"\\<forall>(_, x) \\<in> set x. x \\<noteq> []\"\n  shows \"x \\<in> enc (w, I')\"", "lemma pred_case_conv: \"x - Suc 0 = (case x of 0 \\<Rightarrow> 0 | Suc m \\<Rightarrow> m)\"", "lemma in_pred_image_iff: \"0 \\<notin> X \\<Longrightarrow> (x \\<in> (\\<lambda>x. x - Suc 0) ` X) = (Suc x \\<in> X)\"", "lemma map_project_Int_ENC:\n  fixes X Z n\n  defines \"z \\<equiv> (any, replicate n False)\"\n  assumes \"0 \\<notin> X\" \"X \\<subseteq> {0 ..< n + 1}\" \"Z \\<subseteq> lists ((set o \\<sigma> \\<Sigma>) (n + 1))\"\n  shows \"SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\"", "lemma lang_ENC_split:\n  assumes \"finite X\" \"X = Y1 \\<union> Y2\" \"n = 0 \\<or> (\\<forall>p \\<in> X. p < n)\"\n  shows \"lang n (ENC n X) = lang n (ENC n Y1) \\<inter> lang n (ENC n Y2)\"", "lemma map_project_ENC:\n  fixes n\n  assumes \"X \\<subseteq> {0 ..< n + 1}\" \"Z \\<subseteq> lists ((set o \\<sigma> \\<Sigma>) (n + 1))\"\n  defines \"z \\<equiv> (any, replicate n False)\"\n  shows \"SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    (if 0 \\<in> X\n    then SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n    else SAMEQUOT z (map \\<pi> ` Z) \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))))\"\n    (is \"?L = (if _ then ?R1 else ?R2)\")", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of'_rexp_of'':\n  \"wf_formula n \\<phi> \\<Longrightarrow> lang n (rexp_of' n \\<phi>) = lang n (rexp_of'' n \\<phi>)\"", "theorem lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of': \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> = lang n (rexp_of' n \\<phi>)\"", "theorem lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of'': \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> = lang n (rexp_of'' n \\<phi>)\""], "translations": [["", "lemma (in wellorder) min_Least:\n  \"\\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n\\<rbrakk> \\<Longrightarrow> min (Least P) (Least Q) = (LEAST n. P n \\<or> Q n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n\\<rbrakk>\n    \\<Longrightarrow> min (Least P) (Least Q) = (LEAST n. P n \\<or> Q n)", "proof (intro sym[OF Least_equality])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n\\<rbrakk>\n    \\<Longrightarrow> P (min (Least P) (Least Q)) \\<or>\n                      Q (min (Least P) (Least Q))\n 2. \\<And>y.\n       \\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n; P y \\<or> Q y\\<rbrakk>\n       \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n\\<rbrakk>\n    \\<Longrightarrow> P (min (Least P) (Least Q)) \\<or>\n                      Q (min (Least P) (Least Q))\n 2. \\<And>y.\n       \\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n; P y \\<or> Q y\\<rbrakk>\n       \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "assume \"P y \\<or> Q y\""], ["proof (state)\nthis:\n  P y \\<or> Q y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n\\<rbrakk>\n    \\<Longrightarrow> P (min (Least P) (Least Q)) \\<or>\n                      Q (min (Least P) (Least Q))\n 2. \\<And>y.\n       \\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n; P y \\<or> Q y\\<rbrakk>\n       \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "thus \"min (Least P) (Least Q) \\<le> y\""], ["proof (prove)\nusing this:\n  P y \\<or> Q y\n\ngoal (1 subgoal):\n 1. min (Least P) (Least Q) \\<le> y", "proof (elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. P y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y\n 2. Q y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "assume \"P y\""], ["proof (state)\nthis:\n  P y\n\ngoal (2 subgoals):\n 1. P y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y\n 2. Q y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "hence \"Least P \\<le> y\""], ["proof (prove)\nusing this:\n  P y\n\ngoal (1 subgoal):\n 1. Least P \\<le> y", "by (auto intro: LeastI2_wellorder)"], ["proof (state)\nthis:\n  Least P \\<le> y\n\ngoal (2 subgoals):\n 1. P y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y\n 2. Q y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "thus \"min (Least P) (Least Q) \\<le> y\""], ["proof (prove)\nusing this:\n  Least P \\<le> y\n\ngoal (1 subgoal):\n 1. min (Least P) (Least Q) \\<le> y", "unfolding min_def"], ["proof (prove)\nusing this:\n  Least P \\<le> y\n\ngoal (1 subgoal):\n 1. (if Least P \\<le> Least Q then Least P else Least Q) \\<le> y", "by auto"], ["proof (state)\nthis:\n  min (Least P) (Least Q) \\<le> y\n\ngoal (1 subgoal):\n 1. Q y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Q y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "assume \"Q y\""], ["proof (state)\nthis:\n  Q y\n\ngoal (1 subgoal):\n 1. Q y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "hence \"Least Q \\<le> y\""], ["proof (prove)\nusing this:\n  Q y\n\ngoal (1 subgoal):\n 1. Least Q \\<le> y", "by (auto intro: LeastI2_wellorder)"], ["proof (state)\nthis:\n  Least Q \\<le> y\n\ngoal (1 subgoal):\n 1. Q y \\<Longrightarrow> min (Least P) (Least Q) \\<le> y", "thus \"min (Least P) (Least Q) \\<le> y\""], ["proof (prove)\nusing this:\n  Least Q \\<le> y\n\ngoal (1 subgoal):\n 1. min (Least P) (Least Q) \\<le> y", "unfolding min_def"], ["proof (prove)\nusing this:\n  Least Q \\<le> y\n\ngoal (1 subgoal):\n 1. (if Least P \\<le> Least Q then Least P else Least Q) \\<le> y", "by auto"], ["proof (state)\nthis:\n  min (Least P) (Least Q) \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  min (Least P) (Least Q) \\<le> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n. P n; \\<exists>n. Q n\\<rbrakk>\n    \\<Longrightarrow> P (min (Least P) (Least Q)) \\<or>\n                      Q (min (Least P) (Least Q))", "qed (metis LeastI_ex min_def)"], ["", "lemma sconst_collapse: \"y ## sconst y = sconst y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y ## sconst y = sconst y", "by (subst (2) siterate.ctr) auto"], ["", "lemma shift_sconst_inj: \"\\<lbrakk>length x = length y; x @- sconst z = y @- sconst z\\<rbrakk> \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length x = length y; x @- sconst z = y @- sconst z\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (induct rule: list_induct2) auto"], ["", "context formula\nbegin"], ["", "definition \"any \\<equiv> hd \\<Sigma>\""], ["", "lemma any_\\<Sigma>[simp]: \"any \\<in> set \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. any \\<in> set \\<Sigma>", "unfolding any_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. hd \\<Sigma> \\<in> set \\<Sigma>", "by (auto simp: nonempty intro: someI[of _ \"hd \\<Sigma>\"])"], ["", "lemma any_\\<sigma>[simp]: \"length bs = n \\<Longrightarrow> (any, bs) \\<in> set (\\<sigma> \\<Sigma> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length bs = n \\<Longrightarrow>\n    (any, bs) \\<in> set (\\<sigma> \\<Sigma> n)", "by (auto simp: \\<sigma>_def set_n_lists)"], ["", "fun stream_enc :: \"'a interp \\<Rightarrow> ('a \\<times> bool list) stream\" where\n  \"stream_enc (w, I) = smap2 (enc_atom I) nats (w @- sconst any)\""], ["", "lemma tl_stream_enc[simp]: \"smap \\<pi> (stream_enc (w, x # I)) = stream_enc (w, I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smap \\<pi> (stream_enc (w, x # I)) = stream_enc (w, I)", "by (auto simp: comp_def \\<pi>_def)"], ["", "lemma enc_atom_max: \"\\<lbrakk>\\<forall>x\\<in>set I. case x of Inl p \\<Rightarrow> p \\<le> n | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n; n \\<le> n'\\<rbrakk> \\<Longrightarrow>\n  enc_atom I (Suc n') a = (a, replicate (length I) False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set I.\n                case x of Inl p \\<Rightarrow> p \\<le> n\n                | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n;\n     n \\<le> n'\\<rbrakk>\n    \\<Longrightarrow> enc_atom I (Suc n') a =\n                      (a, replicate (length I) False)", "by (induct I) (auto split: sum.splits)"], ["", "lemma ex_Loop_stream_enc:\nassumes \"\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True\"\nshows \"\\<exists>n. sdrop n (stream_enc (w, I)) = sconst (any, replicate (length I) False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       sdrop n (stream_enc (w, I)) =\n       sconst (any, replicate (length I) False)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       sdrop n (stream_enc (w, I)) =\n       sconst (any, replicate (length I) False)", "from assms"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P", "have \"\\<exists>n > length w. \\<forall>x\\<in>set I. case x of Inl p \\<Rightarrow> p \\<le> n | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P\n\ngoal (1 subgoal):\n 1. \\<exists>n>length w.\n       \\<forall>x\\<in>set I.\n          case x of Inl p \\<Rightarrow> p \\<le> n\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n", "proof (induct I)"], ["proof (state)\ngoal (2 subgoals):\n 1. Ball (set []) (case_sum (\\<lambda>a. True) finite) \\<Longrightarrow>\n    \\<exists>n>length w.\n       Ball (set [])\n        (case_sum (\\<lambda>p. p \\<le> n)\n          (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n))\n 2. \\<And>a I.\n       \\<lbrakk>Ball (set I)\n                 (case_sum (\\<lambda>a. True) finite) \\<Longrightarrow>\n                \\<exists>n>length w.\n                   Ball (set I)\n                    (case_sum (\\<lambda>p. p \\<le> n)\n                      (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n));\n        Ball (set (a # I)) (case_sum (\\<lambda>a. True) finite)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            Ball (set (a # I))\n                             (case_sum (\\<lambda>p. p \\<le> n)\n                               (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n))", "case (Cons x I)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set I.\n     case a of Inl a \\<Rightarrow> True\n     | Inr a \\<Rightarrow> finite a \\<Longrightarrow>\n  \\<exists>n>length w.\n     \\<forall>a\\<in>set I.\n        case a of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n  \\<forall>a\\<in>set (x # I).\n     case a of Inl a \\<Rightarrow> True | Inr a \\<Rightarrow> finite a\n\ngoal (2 subgoals):\n 1. Ball (set []) (case_sum (\\<lambda>a. True) finite) \\<Longrightarrow>\n    \\<exists>n>length w.\n       Ball (set [])\n        (case_sum (\\<lambda>p. p \\<le> n)\n          (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n))\n 2. \\<And>a I.\n       \\<lbrakk>Ball (set I)\n                 (case_sum (\\<lambda>a. True) finite) \\<Longrightarrow>\n                \\<exists>n>length w.\n                   Ball (set I)\n                    (case_sum (\\<lambda>p. p \\<le> n)\n                      (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n));\n        Ball (set (a # I)) (case_sum (\\<lambda>a. True) finite)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            Ball (set (a # I))\n                             (case_sum (\\<lambda>p. p \\<le> n)\n                               (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n))", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set I.\n     case a of Inl a \\<Rightarrow> True\n     | Inr a \\<Rightarrow> finite a \\<Longrightarrow>\n  \\<exists>n>length w.\n     \\<forall>a\\<in>set I.\n        case a of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n  \\<forall>a\\<in>set (x # I).\n     case a of Inl a \\<Rightarrow> True | Inr a \\<Rightarrow> finite a", "obtain n where IH: \"length w < n\"\n      \"\\<forall>x\\<in>set I. case x of Inl p \\<Rightarrow> p \\<le> n | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set I.\n     case a of Inl a \\<Rightarrow> True\n     | Inr a \\<Rightarrow> finite a \\<Longrightarrow>\n  \\<exists>n>length w.\n     \\<forall>a\\<in>set I.\n        case a of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n  \\<forall>a\\<in>set (x # I).\n     case a of Inl a \\<Rightarrow> True | Inr a \\<Rightarrow> finite a\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>length w < n;\n         \\<forall>x\\<in>set I.\n            case x of Inl p \\<Rightarrow> p \\<le> n\n            | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  length w < n\n  \\<forall>x\\<in>set I.\n     case x of Inl p \\<Rightarrow> p \\<le> n\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal (2 subgoals):\n 1. Ball (set []) (case_sum (\\<lambda>a. True) finite) \\<Longrightarrow>\n    \\<exists>n>length w.\n       Ball (set [])\n        (case_sum (\\<lambda>p. p \\<le> n)\n          (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n))\n 2. \\<And>a I.\n       \\<lbrakk>Ball (set I)\n                 (case_sum (\\<lambda>a. True) finite) \\<Longrightarrow>\n                \\<exists>n>length w.\n                   Ball (set I)\n                    (case_sum (\\<lambda>p. p \\<le> n)\n                      (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n));\n        Ball (set (a # I)) (case_sum (\\<lambda>a. True) finite)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            Ball (set (a # I))\n                             (case_sum (\\<lambda>p. p \\<le> n)\n                               (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n))", "thus ?case"], ["proof (prove)\nusing this:\n  length w < n\n  \\<forall>x\\<in>set I.\n     case x of Inl p \\<Rightarrow> p \\<le> n\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>n>length w.\n       \\<forall>a\\<in>set (x # I).\n          case a of Inl p \\<Rightarrow> p \\<le> n\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n", "proof (cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>length w < n;\n        \\<forall>x\\<in>set I.\n           case x of Inl p \\<Rightarrow> p \\<le> n\n           | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n;\n        x = Inl a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            \\<forall>a\\<in>set (x # I).\n                               case a of Inl p \\<Rightarrow> p \\<le> n\n                               | Inr P \\<Rightarrow>\n                                   \\<forall>p\\<in>P. p \\<le> n\n 2. \\<And>b.\n       \\<lbrakk>length w < n;\n        \\<forall>x\\<in>set I.\n           case x of Inl p \\<Rightarrow> p \\<le> n\n           | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n;\n        x = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            \\<forall>a\\<in>set (x # I).\n                               case a of Inl p \\<Rightarrow> p \\<le> n\n                               | Inr P \\<Rightarrow>\n                                   \\<forall>p\\<in>P. p \\<le> n", "case (Inl p)"], ["proof (state)\nthis:\n  x = Inl p\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>length w < n;\n        \\<forall>x\\<in>set I.\n           case x of Inl p \\<Rightarrow> p \\<le> n\n           | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n;\n        x = Inl a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            \\<forall>a\\<in>set (x # I).\n                               case a of Inl p \\<Rightarrow> p \\<le> n\n                               | Inr P \\<Rightarrow>\n                                   \\<forall>p\\<in>P. p \\<le> n\n 2. \\<And>b.\n       \\<lbrakk>length w < n;\n        \\<forall>x\\<in>set I.\n           case x of Inl p \\<Rightarrow> p \\<le> n\n           | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n;\n        x = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            \\<forall>a\\<in>set (x # I).\n                               case a of Inl p \\<Rightarrow> p \\<le> n\n                               | Inr P \\<Rightarrow>\n                                   \\<forall>p\\<in>P. p \\<le> n", "with IH"], ["proof (chain)\npicking this:\n  length w < n\n  \\<forall>x\\<in>set I.\n     case x of Inl p \\<Rightarrow> p \\<le> n\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n  x = Inl p", "show ?thesis"], ["proof (prove)\nusing this:\n  length w < n\n  \\<forall>x\\<in>set I.\n     case x of Inl p \\<Rightarrow> p \\<le> n\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n  x = Inl p\n\ngoal (1 subgoal):\n 1. \\<exists>n>length w.\n       \\<forall>a\\<in>set (x # I).\n          case a of Inl p \\<Rightarrow> p \\<le> n\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n", "by (intro exI[of _ \"max p n\"]) (fastforce split: sum.splits)"], ["proof (state)\nthis:\n  \\<exists>n>length w.\n     \\<forall>a\\<in>set (x # I).\n        case a of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>length w < n;\n        \\<forall>x\\<in>set I.\n           case x of Inl p \\<Rightarrow> p \\<le> n\n           | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n;\n        x = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            \\<forall>a\\<in>set (x # I).\n                               case a of Inl p \\<Rightarrow> p \\<le> n\n                               | Inr P \\<Rightarrow>\n                                   \\<forall>p\\<in>P. p \\<le> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>length w < n;\n        \\<forall>x\\<in>set I.\n           case x of Inl p \\<Rightarrow> p \\<le> n\n           | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n;\n        x = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            \\<forall>a\\<in>set (x # I).\n                               case a of Inl p \\<Rightarrow> p \\<le> n\n                               | Inr P \\<Rightarrow>\n                                   \\<forall>p\\<in>P. p \\<le> n", "case (Inr P)"], ["proof (state)\nthis:\n  x = Inr P\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>length w < n;\n        \\<forall>x\\<in>set I.\n           case x of Inl p \\<Rightarrow> p \\<le> n\n           | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n;\n        x = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n>length w.\n                            \\<forall>a\\<in>set (x # I).\n                               case a of Inl p \\<Rightarrow> p \\<le> n\n                               | Inr P \\<Rightarrow>\n                                   \\<forall>p\\<in>P. p \\<le> n", "with IH Cons(2)"], ["proof (chain)\npicking this:\n  length w < n\n  \\<forall>x\\<in>set I.\n     case x of Inl p \\<Rightarrow> p \\<le> n\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n  \\<forall>a\\<in>set (x # I).\n     case a of Inl a \\<Rightarrow> True | Inr a \\<Rightarrow> finite a\n  x = Inr P", "show ?thesis"], ["proof (prove)\nusing this:\n  length w < n\n  \\<forall>x\\<in>set I.\n     case x of Inl p \\<Rightarrow> p \\<le> n\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n  \\<forall>a\\<in>set (x # I).\n     case a of Inl a \\<Rightarrow> True | Inr a \\<Rightarrow> finite a\n  x = Inr P\n\ngoal (1 subgoal):\n 1. \\<exists>n>length w.\n       \\<forall>a\\<in>set (x # I).\n          case a of Inl p \\<Rightarrow> p \\<le> n\n          | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n", "by (intro exI[of _ \"max (Max P) n\"]) (fastforce dest: Max_ge split: sum.splits)"], ["proof (state)\nthis:\n  \\<exists>n>length w.\n     \\<forall>a\\<in>set (x # I).\n        case a of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n>length w.\n     \\<forall>a\\<in>set (x # I).\n        case a of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal (1 subgoal):\n 1. Ball (set []) (case_sum (\\<lambda>a. True) finite) \\<Longrightarrow>\n    \\<exists>n>length w.\n       Ball (set [])\n        (case_sum (\\<lambda>p. p \\<le> n)\n          (\\<lambda>P. \\<forall>p\\<in>P. p \\<le> n))", "qed auto"], ["proof (state)\nthis:\n  \\<exists>n>length w.\n     \\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       sdrop n (stream_enc (w, I)) =\n       sconst (any, replicate (length I) False)", "then"], ["proof (chain)\npicking this:\n  \\<exists>n>length w.\n     \\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n", "obtain n where \"length w < n\" \"\\<forall>x\\<in>set I. case x of Inl p \\<Rightarrow> p \\<le> n | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\""], ["proof (prove)\nusing this:\n  \\<exists>n>length w.\n     \\<forall>x\\<in>set I.\n        case x of Inl p \\<Rightarrow> p \\<le> n\n        | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>length w < n;\n         \\<forall>x\\<in>set I.\n            case x of Inl p \\<Rightarrow> p \\<le> n\n            | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim exE conjE)"], ["proof (state)\nthis:\n  length w < n\n  \\<forall>x\\<in>set I.\n     case x of Inl p \\<Rightarrow> p \\<le> n\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       sdrop n (stream_enc (w, I)) =\n       sconst (any, replicate (length I) False)", "hence \"sdrop (Suc n) (stream_enc (w, I)) = sconst (any, replicate (length I) False)\"\n    (is \"?s1 n = ?s2\")"], ["proof (prove)\nusing this:\n  length w < n\n  \\<forall>x\\<in>set I.\n     case x of Inl p \\<Rightarrow> p \\<le> n\n     | Inr P \\<Rightarrow> \\<forall>p\\<in>P. p \\<le> n\n\ngoal (1 subgoal):\n 1. sdrop (Suc n) (stream_enc (w, I)) =\n    sconst (any, replicate (length I) False)", "by (intro stream.coinduct[of \"\\<lambda>s1 s2. \\<exists>n'\\<ge> n. s1 = ?s1 n' \\<and> s2 = ?s2\"])\n      (auto simp: enc_atom_max dest: le_SucI)"], ["proof (state)\nthis:\n  sdrop (Suc n) (stream_enc (w, I)) =\n  sconst (any, replicate (length I) False)\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       sdrop n (stream_enc (w, I)) =\n       sconst (any, replicate (length I) False)", "thus ?thesis"], ["proof (prove)\nusing this:\n  sdrop (Suc n) (stream_enc (w, I)) =\n  sconst (any, replicate (length I) False)\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       sdrop n (stream_enc (w, I)) =\n       sconst (any, replicate (length I) False)", "by blast"], ["proof (state)\nthis:\n  \\<exists>n.\n     sdrop n (stream_enc (w, I)) = sconst (any, replicate (length I) False)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_snth_enc[simp]: \"length (snd (stream_enc (w, I) !! n)) = length I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (snd (stream_enc (w, I) !! n)) = length I", "by auto"], ["", "lemma sset_singleton[simp]: \"sset s \\<subseteq> {x} \\<longleftrightarrow> sset s = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sset s \\<subseteq> {x}) = (sset s = {x})", "by (cases s) auto"], ["", "lemma drop_sconstE: \"\\<lbrakk>drop n w @- sconst y = sconst y; p < length w; \\<not> p < n\\<rbrakk> \\<Longrightarrow> w ! p = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>drop n w @- sconst y = sconst y; p < length w;\n     \\<not> p < n\\<rbrakk>\n    \\<Longrightarrow> w ! p = y", "unfolding not_less sconst_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sset (drop n w @- sconst y) = {y}; p < length w;\n     n \\<le> p\\<rbrakk>\n    \\<Longrightarrow> w ! p = y", "proof (induct p arbitrary: w n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>w n.\n       \\<lbrakk>sset (drop n w @- sconst y) = {y}; 0 < length w;\n        n \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> w ! 0 = y\n 2. \\<And>p w n.\n       \\<lbrakk>\\<And>w n.\n                   \\<lbrakk>sset (drop n w @- sconst y) = {y}; p < length w;\n                    n \\<le> p\\<rbrakk>\n                   \\<Longrightarrow> w ! p = y;\n        sset (drop n w @- sconst y) = {y}; Suc p < length w;\n        n \\<le> Suc p\\<rbrakk>\n       \\<Longrightarrow> w ! Suc p = y", "case (Suc p)"], ["proof (state)\nthis:\n  \\<lbrakk>sset (drop ?n ?w @- sconst y) = {y}; p < length ?w;\n   ?n \\<le> p\\<rbrakk>\n  \\<Longrightarrow> ?w ! p = y\n  sset (drop n w @- sconst y) = {y}\n  Suc p < length w\n  n \\<le> Suc p\n\ngoal (2 subgoals):\n 1. \\<And>w n.\n       \\<lbrakk>sset (drop n w @- sconst y) = {y}; 0 < length w;\n        n \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> w ! 0 = y\n 2. \\<And>p w n.\n       \\<lbrakk>\\<And>w n.\n                   \\<lbrakk>sset (drop n w @- sconst y) = {y}; p < length w;\n                    n \\<le> p\\<rbrakk>\n                   \\<Longrightarrow> w ! p = y;\n        sset (drop n w @- sconst y) = {y}; Suc p < length w;\n        n \\<le> Suc p\\<rbrakk>\n       \\<Longrightarrow> w ! Suc p = y", "with Suc(1)[of 0 \"tl w\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>sset (drop 0 (tl w) @- sconst y) = {y}; p < length (tl w);\n   0 \\<le> p\\<rbrakk>\n  \\<Longrightarrow> tl w ! p = y\n  \\<lbrakk>sset (drop ?n ?w @- sconst y) = {y}; p < length ?w;\n   ?n \\<le> p\\<rbrakk>\n  \\<Longrightarrow> ?w ! p = y\n  sset (drop n w @- sconst y) = {y}\n  Suc p < length w\n  n \\<le> Suc p", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>sset (drop 0 (tl w) @- sconst y) = {y}; p < length (tl w);\n   0 \\<le> p\\<rbrakk>\n  \\<Longrightarrow> tl w ! p = y\n  \\<lbrakk>sset (drop ?n ?w @- sconst y) = {y}; p < length ?w;\n   ?n \\<le> p\\<rbrakk>\n  \\<Longrightarrow> ?w ! p = y\n  sset (drop n w @- sconst y) = {y}\n  Suc p < length w\n  n \\<le> Suc p\n\ngoal (1 subgoal):\n 1. w ! Suc p = y", "by (cases w n rule: list.exhaust[case_product nat.exhaust]) auto"], ["proof (state)\nthis:\n  w ! Suc p = y\n\ngoal (1 subgoal):\n 1. \\<And>w n.\n       \\<lbrakk>sset (drop n w @- sconst y) = {y}; 0 < length w;\n        n \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> w ! 0 = y", "qed (auto simp add: neq_Nil_conv)"], ["", "lemma less_length_cut_same:\n  \"\\<lbrakk>(w @- sconst y) !! p = a\\<rbrakk> \\<Longrightarrow> a = y \\<or> (p < length (cut_same y (w @- sconst y)) \\<and> w ! p = a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w @- sconst y) !! p = a \\<Longrightarrow>\n    a = y \\<or> p < length (cut_same y (w @- sconst y)) \\<and> w ! p = a", "unfolding cut_same_def length_stake"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w @- sconst y) !! p = a \\<Longrightarrow>\n    a = y \\<or>\n    p < (LEAST n. sdrop n (w @- sconst y) = sconst y) \\<and> w ! p = a", "by (rule LeastI2_ex[OF exI[of _ \"length w\"]])\n    (auto simp: sdrop_shift shift_snth split: if_split_asm elim!: drop_sconstE)"], ["", "lemma less_length_cut_same_Inl:\n  \"\\<lbrakk>(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True); r < length I; I ! r = Inl p\\<rbrakk> \\<Longrightarrow>\n  p < length (cut_same (any, replicate (length I) False) (stream_enc (w, I)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set I.\n                case x of Inl a \\<Rightarrow> True\n                | Inr P \\<Rightarrow> finite P;\n     r < length I; I ! r = Inl p\\<rbrakk>\n    \\<Longrightarrow> p < length\n                           (cut_same (any, replicate (length I) False)\n                             (stream_enc (w, I)))", "unfolding cut_same_def length_stake"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set I.\n                case x of Inl a \\<Rightarrow> True\n                | Inr P \\<Rightarrow> finite P;\n     r < length I; I ! r = Inl p\\<rbrakk>\n    \\<Longrightarrow> p < (LEAST n.\n                              sdrop n (stream_enc (w, I)) =\n                              sconst (any, replicate (length I) False))", "by (erule LeastI2_ex[OF ex_Loop_stream_enc ccontr],\n    auto simp: smap2_alt list_eq_iff_nth_eq add.commute dest!: add_diff_inverse split: sum.splits,\n    metis)"], ["", "lemma less_length_cut_same_Inr:\n  \"\\<lbrakk>(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True); r < length I; I ! r = Inr P\\<rbrakk> \\<Longrightarrow>\n  \\<forall>p \\<in> P. p < length (cut_same (any, replicate (length I) False) (stream_enc (w, I)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set I.\n                case x of Inl a \\<Rightarrow> True\n                | Inr P \\<Rightarrow> finite P;\n     r < length I; I ! r = Inr P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>p\\<in>P.\n                         p < length\n                              (cut_same (any, replicate (length I) False)\n                                (stream_enc (w, I)))", "unfolding cut_same_def length_stake"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set I.\n                case x of Inl a \\<Rightarrow> True\n                | Inr P \\<Rightarrow> finite P;\n     r < length I; I ! r = Inr P\\<rbrakk>\n    \\<Longrightarrow> \\<forall>p\\<in>P.\n                         p < (LEAST n.\n                                 sdrop n (stream_enc (w, I)) =\n                                 sconst (any, replicate (length I) False))", "by (rule ballI, erule LeastI2_ex[OF ex_Loop_stream_enc ccontr],\n    auto simp: smap2_alt list_eq_iff_nth_eq add.commute dest!: add_diff_inverse split: sum.splits,\n    metis)"], ["", "fun enc :: \"'a interp \\<Rightarrow> ('a \\<times> bool list) list set\" where\n  \"enc (w, I) = {x. \\<exists>n. x = (cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n     replicate n (any, replicate (length I) False))}\""], ["", "lemma cut_same_all[simp]: \"cut_same x (sconst x) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cut_same x (sconst x) = []", "unfolding cut_same_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. stake (LEAST n. sdrop n (sconst x) = sconst x) (sconst x) = []", "by (auto intro: Least_equality)"], ["", "lemma cut_same_stop[simp]:\n  assumes \"x \\<noteq> y\"\n  shows \"cut_same x (xs @- y ## sconst x) = xs @ [y]\" (is \"cut_same x ?s = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. cut_same x (xs @- y ## sconst x) = xs @ [y]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cut_same x (xs @- y ## sconst x) = xs @ [y]", "have \"(LEAST n. sdrop n ?s = sconst x) = Suc (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. sdrop n (xs @- y ## sconst x) = sconst x) = Suc (length xs)", "proof (rule Least_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. sdrop (Suc (length xs)) (xs @- y ## sconst x) = sconst x\n 2. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "show \"sdrop (Suc (length xs)) ?s = sconst x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sdrop (Suc (length xs)) (xs @- y ## sconst x) = sconst x", "by (auto simp: sdrop_shift)"], ["proof (state)\nthis:\n  sdrop (Suc (length xs)) (xs @- y ## sconst x) = sconst x\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "assume *: \"sdrop m ?s = sconst x\""], ["proof (state)\nthis:\n  sdrop m (xs @- y ## sconst x) = sconst x\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "{"], ["proof (state)\nthis:\n  sdrop m (xs @- y ## sconst x) = sconst x\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "assume \"m < Suc (length xs)\""], ["proof (state)\nthis:\n  m < Suc (length xs)\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "hence \"m \\<le> length xs\""], ["proof (prove)\nusing this:\n  m < Suc (length xs)\n\ngoal (1 subgoal):\n 1. m \\<le> length xs", "by simp"], ["proof (state)\nthis:\n  m \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "then"], ["proof (chain)\npicking this:\n  m \\<le> length xs", "obtain ys where \"sdrop m ?s = ys @- y ## sconst x\""], ["proof (prove)\nusing this:\n  m \\<le> length xs\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        sdrop m (xs @- y ## sconst x) =\n        ys @- y ## sconst x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (induct m arbitrary: xs, auto)"], ["proof (state)\nthis:\n  sdrop m (xs @- y ## sconst x) = ys @- y ## sconst x\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "with *"], ["proof (chain)\npicking this:\n  sdrop m (xs @- y ## sconst x) = sconst x\n  sdrop m (xs @- y ## sconst x) = ys @- y ## sconst x", "obtain \"ys @- y ## sconst x = sconst x\""], ["proof (prove)\nusing this:\n  sdrop m (xs @- y ## sconst x) = sconst x\n  sdrop m (xs @- y ## sconst x) = ys @- y ## sconst x\n\ngoal (1 subgoal):\n 1. (ys @- y ## sconst x = sconst x \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  ys @- y ## sconst x = sconst x\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "from arg_cong[OF this, of \"sdrop (length ys)\"]"], ["proof (chain)\npicking this:\n  sdrop (length ys) (ys @- y ## sconst x) = sdrop (length ys) (sconst x)", "have \"y ## sconst x = sconst x\""], ["proof (prove)\nusing this:\n  sdrop (length ys) (ys @- y ## sconst x) = sdrop (length ys) (sconst x)\n\ngoal (1 subgoal):\n 1. y ## sconst x = sconst x", "by (auto simp: sdrop_shift)"], ["proof (state)\nthis:\n  y ## sconst x = sconst x\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "with assms"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  y ## sconst x = sconst x", "have False"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  y ## sconst x = sconst x\n\ngoal (1 subgoal):\n 1. False", "by (metis siterate.code stream.inject)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "}"], ["proof (state)\nthis:\n  m < Suc (length xs) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>ya.\n       sdrop ya (xs @- y ## sconst x) = sconst x \\<Longrightarrow>\n       Suc (length xs) \\<le> ya", "thus \"Suc (length xs) \\<le> m\""], ["proof (prove)\nusing this:\n  m < Suc (length xs) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. Suc (length xs) \\<le> m", "by (blast intro: leI)"], ["proof (state)\nthis:\n  Suc (length xs) \\<le> m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST n. sdrop n (xs @- y ## sconst x) = sconst x) = Suc (length xs)\n\ngoal (1 subgoal):\n 1. cut_same x (xs @- y ## sconst x) = xs @ [y]", "thus ?thesis"], ["proof (prove)\nusing this:\n  (LEAST n. sdrop n (xs @- y ## sconst x) = sconst x) = Suc (length xs)\n\ngoal (1 subgoal):\n 1. cut_same x (xs @- y ## sconst x) = xs @ [y]", "unfolding cut_same_def stake_shift"], ["proof (prove)\nusing this:\n  (LEAST n. sdrop n (xs @- y ## sconst x) = sconst x) = Suc (length xs)\n\ngoal (1 subgoal):\n 1. take (LEAST n. sdrop n (xs @- y ## sconst x) = sconst x) xs @\n    stake ((LEAST n. sdrop n (xs @- y ## sconst x) = sconst x) - length xs)\n     (y ## sconst x) =\n    xs @ [y]", "by simp"], ["proof (state)\nthis:\n  cut_same x (xs @- y ## sconst x) = xs @ [y]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cut_same_shift_sconst: \"\\<exists>n. w = cut_same x (w @- sconst x) @ replicate n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. w = cut_same x (w @- sconst x) @ replicate n x", "proof (induct w rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>n. [] = cut_same x ([] @- sconst x) @ replicate n x\n 2. \\<And>xa xs.\n       \\<exists>n.\n          xs = cut_same x (xs @- sconst x) @ replicate n x \\<Longrightarrow>\n       \\<exists>n.\n          xs @ [xa] = cut_same x ((xs @ [xa]) @- sconst x) @ replicate n x", "case (snoc a w)"], ["proof (state)\nthis:\n  \\<exists>n. w = cut_same x (w @- sconst x) @ replicate n x\n\ngoal (2 subgoals):\n 1. \\<exists>n. [] = cut_same x ([] @- sconst x) @ replicate n x\n 2. \\<And>xa xs.\n       \\<exists>n.\n          xs = cut_same x (xs @- sconst x) @ replicate n x \\<Longrightarrow>\n       \\<exists>n.\n          xs @ [xa] = cut_same x ((xs @ [xa]) @- sconst x) @ replicate n x", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. w = cut_same x (w @- sconst x) @ replicate n x", "obtain n where \"w = cut_same x (w @- sconst x) @ replicate n x\""], ["proof (prove)\nusing this:\n  \\<exists>n. w = cut_same x (w @- sconst x) @ replicate n x\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        w = cut_same x (w @- sconst x) @ replicate n x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w = cut_same x (w @- sconst x) @ replicate n x\n\ngoal (2 subgoals):\n 1. \\<exists>n. [] = cut_same x ([] @- sconst x) @ replicate n x\n 2. \\<And>xa xs.\n       \\<exists>n.\n          xs = cut_same x (xs @- sconst x) @ replicate n x \\<Longrightarrow>\n       \\<exists>n.\n          xs @ [xa] = cut_same x ((xs @ [xa]) @- sconst x) @ replicate n x", "thus ?case"], ["proof (prove)\nusing this:\n  w = cut_same x (w @- sconst x) @ replicate n x\n\ngoal (1 subgoal):\n 1. \\<exists>n. w @ [a] = cut_same x ((w @ [a]) @- sconst x) @ replicate n x", "by (cases \"a = x\")\n     (auto simp: id_def[symmetric] siterate.code[of id, simplified id_apply, symmetric]\n      replicate_append_same[symmetric] intro!: exI[of _ \"Suc n\"])"], ["proof (state)\nthis:\n  \\<exists>n. w @ [a] = cut_same x ((w @ [a]) @- sconst x) @ replicate n x\n\ngoal (1 subgoal):\n 1. \\<exists>n. [] = cut_same x ([] @- sconst x) @ replicate n x", "qed (simp add: id_def[symmetric])"], ["", "lemma set_cut_same: \"set (cut_same x (w @- sconst x)) \\<subseteq> set w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (cut_same x (w @- sconst x)) \\<subseteq> set w", "proof (induct w rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. set (cut_same x ([] @- sconst x)) \\<subseteq> set []\n 2. \\<And>xa xs.\n       set (cut_same x (xs @- sconst x))\n       \\<subseteq> set xs \\<Longrightarrow>\n       set (cut_same x ((xs @ [xa]) @- sconst x))\n       \\<subseteq> set (xs @ [xa])", "case (snoc a w)"], ["proof (state)\nthis:\n  set (cut_same x (w @- sconst x)) \\<subseteq> set w\n\ngoal (2 subgoals):\n 1. set (cut_same x ([] @- sconst x)) \\<subseteq> set []\n 2. \\<And>xa xs.\n       set (cut_same x (xs @- sconst x))\n       \\<subseteq> set xs \\<Longrightarrow>\n       set (cut_same x ((xs @ [xa]) @- sconst x))\n       \\<subseteq> set (xs @ [xa])", "thus ?case"], ["proof (prove)\nusing this:\n  set (cut_same x (w @- sconst x)) \\<subseteq> set w\n\ngoal (1 subgoal):\n 1. set (cut_same x ((w @ [a]) @- sconst x)) \\<subseteq> set (w @ [a])", "by (cases \"a = x\")\n    (auto simp: id_def[symmetric] siterate.code[of id, simplified id_apply, symmetric])"], ["proof (state)\nthis:\n  set (cut_same x ((w @ [a]) @- sconst x)) \\<subseteq> set (w @ [a])\n\ngoal (1 subgoal):\n 1. set (cut_same x ([] @- sconst x)) \\<subseteq> set []", "qed  (simp add: id_def[symmetric])"], ["", "lemma stream_enc_cut_same:\n  assumes \"(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\"\n  shows \"stream_enc (w, I) = cut_same (any, replicate (length I) False) (stream_enc (w, I)) @-\n    sconst (any, replicate (length I) False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_enc (w, I) =\n    cut_same (any, replicate (length I) False) (stream_enc (w, I)) @-\n    sconst (any, replicate (length I) False)", "unfolding cut_same_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_enc (w, I) =\n    stake\n     (LEAST n.\n         sdrop n (stream_enc (w, I)) =\n         sconst (any, replicate (length I) False))\n     (stream_enc (w, I)) @-\n    sconst (any, replicate (length I) False)", "by (rule trans[OF sym[OF stake_sdrop] arg_cong2[of _ _ _ _ \"(@-)\", OF refl]])\n     (rule LeastI_ex[OF ex_Loop_stream_enc[OF assms]])"], ["", "lemma stream_enc_enc:\n  assumes \"(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\" and  v: \"v \\<in> enc (w, I)\"\n  shows \"stream_enc (w, I) = v @- sconst (any, replicate (length I) False)\"\n  (is \"?s = ?v @- sconst ?F\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_enc (w, I) = v @- sconst (any, replicate (length I) False)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. stream_enc (w, I) = v @- sconst (any, replicate (length I) False)", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P", "obtain n where \"sdrop n (stream_enc (w, I)) = sconst ?F\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        sdrop n (stream_enc (w, I)) =\n        sconst (any, replicate (length I) False) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_Loop_stream_enc)"], ["proof (state)\nthis:\n  sdrop n (stream_enc (w, I)) = sconst (any, replicate (length I) False)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = v @- sconst (any, replicate (length I) False)", "moreover"], ["proof (state)\nthis:\n  sdrop n (stream_enc (w, I)) = sconst (any, replicate (length I) False)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = v @- sconst (any, replicate (length I) False)", "from v"], ["proof (chain)\npicking this:\n  v \\<in> enc (w, I)", "obtain m where \"?v = cut_same ?F ?s @ replicate m ?F\""], ["proof (prove)\nusing this:\n  v \\<in> enc (w, I)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        v =\n        cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n        replicate m (any, replicate (length I) False) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v =\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate m (any, replicate (length I) False)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = v @- sconst (any, replicate (length I) False)", "ultimately"], ["proof (chain)\npicking this:\n  sdrop n (stream_enc (w, I)) = sconst (any, replicate (length I) False)\n  v =\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate m (any, replicate (length I) False)", "show \"?s = v @- sconst ?F\""], ["proof (prove)\nusing this:\n  sdrop n (stream_enc (w, I)) = sconst (any, replicate (length I) False)\n  v =\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate m (any, replicate (length I) False)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = v @- sconst (any, replicate (length I) False)", "by (auto simp del: stream_enc.simps intro: stream_enc_cut_same[OF assms(1)])"], ["proof (state)\nthis:\n  stream_enc (w, I) = v @- sconst (any, replicate (length I) False)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma stream_enc_enc_some:\n  assumes \"(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\"\n  shows \"stream_enc (w, I) = (SOME v. v \\<in> enc (w, I)) @- sconst (any, replicate (length I) False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_enc (w, I) =\n    (SOME v. v \\<in> enc (w, I)) @- sconst (any, replicate (length I) False)", "by (rule stream_enc_enc[OF assms], rule someI_ex) auto"], ["", "lemma enc_unique_length: \"v \\<in> enc (w, I) \\<Longrightarrow> \\<forall>v'. length v' = length v \\<and> v' \\<in> enc (w, I) \\<longrightarrow> v = v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> enc (w, I) \\<Longrightarrow>\n    \\<forall>v'.\n       length v' = length v \\<and> v' \\<in> enc (w, I) \\<longrightarrow>\n       v = v'", "by auto"], ["", "lemma sdrop_sconst: \"sdrop n s = sconst x \\<Longrightarrow> n \\<le> m \\<Longrightarrow> s !! m = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sdrop n s = sconst x; n \\<le> m\\<rbrakk>\n    \\<Longrightarrow> s !! m = x", "by (metis le_iff_add sdrop_snth snth_siterate[of id, simplified id_funpow id_apply])"], ["", "lemma fin_cut_same_tl:\n  assumes \"\\<exists>n. sdrop n s = sconst x\" \n  shows \"fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) = cut_same (\\<pi> x) (smap \\<pi> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "define min where \"min = (LEAST n. sdrop n s = sconst x)\""], ["proof (state)\nthis:\n  min = (LEAST n. sdrop n s = sconst x)\n\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "from assms"], ["proof (chain)\npicking this:\n  \\<exists>n. sdrop n s = sconst x", "have min: \"sdrop min s = sconst x\" \"\\<And>m. sdrop m s = sconst x \\<Longrightarrow> min \\<le> m\""], ["proof (prove)\nusing this:\n  \\<exists>n. sdrop n s = sconst x\n\ngoal (1 subgoal):\n 1. sdrop min s = sconst x &&&\n    (\\<And>m. sdrop m s = sconst x \\<Longrightarrow> min \\<le> m)", "unfolding min_def"], ["proof (prove)\nusing this:\n  \\<exists>n. sdrop n s = sconst x\n\ngoal (1 subgoal):\n 1. sdrop (LEAST n. sdrop n s = sconst x) s = sconst x &&&\n    (\\<And>m.\n        sdrop m s = sconst x \\<Longrightarrow>\n        (LEAST n. sdrop n s = sconst x) \\<le> m)", "by (auto intro: LeastI Least_le)"], ["proof (state)\nthis:\n  sdrop min s = sconst x\n  sdrop ?m s = sconst x \\<Longrightarrow> min \\<le> ?m\n\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "have Ex: \"\\<exists>n. drop n (map \\<pi> (stake min s)) = replicate (length (map \\<pi> (stake min s)) - n) (\\<pi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       drop n (map \\<pi> (stake min s)) =\n       replicate (length (map \\<pi> (stake min s)) - n) (\\<pi> x)", "by (auto intro: exI[of _ \"length (map \\<pi> (stake min s))\"])"], ["proof (state)\nthis:\n  \\<exists>n.\n     drop n (map \\<pi> (stake min s)) =\n     replicate (length (map \\<pi> (stake min s)) - n) (\\<pi> x)\n\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "have \"fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n     map \\<pi> (stake  (LEAST n.\n       map \\<pi> (stake (min - n) (sdrop n s)) = replicate (min - n) (\\<pi> x) \\<or> sdrop n s = sconst x) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    map \\<pi>\n     (stake\n       (LEAST n.\n           map \\<pi> (stake (min - n) (sdrop n s)) =\n           replicate (min - n) (\\<pi> x) \\<or>\n           sdrop n s = sconst x)\n       s)", "unfolding fin_cut_same_def cut_same_def take_map take_stake min_Least[OF Ex assms, folded min_def]\n      min_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (stake\n       (LEAST n.\n           drop n (map \\<pi> (stake min s)) =\n           replicate (length (map \\<pi> (stake min s)) - n) (\\<pi> x) \\<or>\n           sdrop n s = sconst x)\n       s) =\n    map \\<pi>\n     (stake\n       (LEAST n.\n           map \\<pi> (stake (min - n) (sdrop n s)) =\n           replicate (min - n) (\\<pi> x) \\<or>\n           sdrop n s = sconst x)\n       s)", "by (auto simp: drop_map drop_stake)"], ["proof (state)\nthis:\n  fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n  map \\<pi>\n   (stake\n     (LEAST n.\n         map \\<pi> (stake (min - n) (sdrop n s)) =\n         replicate (min - n) (\\<pi> x) \\<or>\n         sdrop n s = sconst x)\n     s)\n\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "also"], ["proof (state)\nthis:\n  fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n  map \\<pi>\n   (stake\n     (LEAST n.\n         map \\<pi> (stake (min - n) (sdrop n s)) =\n         replicate (min - n) (\\<pi> x) \\<or>\n         sdrop n s = sconst x)\n     s)\n\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "have \"(\\<lambda>n. map \\<pi> (stake (min - n) (sdrop n s)) = replicate (min - n) (\\<pi> x) \\<or> sdrop n s = sconst x) =\n     (\\<lambda>n. smap \\<pi> (sdrop n s) = sconst (\\<pi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        map \\<pi> (stake (min - n) (sdrop n s)) =\n        replicate (min - n) (\\<pi> x) \\<or>\n        sdrop n s = sconst x) =\n    (\\<lambda>n. smap \\<pi> (sdrop n s) = sconst (\\<pi> x))", "proof (rule ext, unfold smap_alt snth_siterate[of id, simplified id_funpow id_apply], safe)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n na.\n       map \\<pi> (stake (min - n) (sdrop n s)) =\n       replicate (min - n) (\\<pi> x) \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "fix n m"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n na.\n       map \\<pi> (stake (min - n) (sdrop n s)) =\n       replicate (min - n) (\\<pi> x) \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "assume \"map \\<pi> (stake (min - n) (sdrop n s)) = replicate (min - n) (\\<pi> x)\""], ["proof (state)\nthis:\n  map \\<pi> (stake (min - n) (sdrop n s)) = replicate (min - n) (\\<pi> x)\n\ngoal (3 subgoals):\n 1. \\<And>n na.\n       map \\<pi> (stake (min - n) (sdrop n s)) =\n       replicate (min - n) (\\<pi> x) \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "hence \"\\<forall>y\\<in>set (stake (min - n) (sdrop n s)). \\<pi> y = \\<pi> x\""], ["proof (prove)\nusing this:\n  map \\<pi> (stake (min - n) (sdrop n s)) = replicate (min - n) (\\<pi> x)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set (stake (min - n) (sdrop n s)). \\<pi> y = \\<pi> x", "by (intro iffD1[OF map_eq_conv]) (metis length_stake map_replicate_const)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set (stake (min - n) (sdrop n s)). \\<pi> y = \\<pi> x\n\ngoal (3 subgoals):\n 1. \\<And>n na.\n       map \\<pi> (stake (min - n) (sdrop n s)) =\n       replicate (min - n) (\\<pi> x) \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "hence \"\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set (stake (min - n) (sdrop n s)). \\<pi> y = \\<pi> x\n\ngoal (1 subgoal):\n 1. \\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x", "unfolding all_set_conv_all_nth"], ["proof (prove)\nusing this:\n  \\<forall>i<length (stake (min - n) (sdrop n s)).\n     \\<pi> (stake (min - n) (sdrop n s) ! i) = \\<pi> x\n\ngoal (1 subgoal):\n 1. \\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x", "by (auto simp: sdrop_snth)"], ["proof (state)\nthis:\n  \\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x\n\ngoal (3 subgoals):\n 1. \\<And>n na.\n       map \\<pi> (stake (min - n) (sdrop n s)) =\n       replicate (min - n) (\\<pi> x) \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "thus \"\\<pi> (sdrop n s !! m) = \\<pi> x\""], ["proof (prove)\nusing this:\n  \\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x\n\ngoal (1 subgoal):\n 1. \\<pi> (sdrop n s !! m) = \\<pi> x", "proof (cases \"m < min - n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x\n 2. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     \\<not> m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x", "case False"], ["proof (state)\nthis:\n  \\<not> m < min - n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x\n 2. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     \\<not> m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x", "hence \"min \\<le> n + m\""], ["proof (prove)\nusing this:\n  \\<not> m < min - n\n\ngoal (1 subgoal):\n 1. min \\<le> n + m", "by linarith"], ["proof (state)\nthis:\n  min \\<le> n + m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x\n 2. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     \\<not> m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x", "hence \"sdrop n s !! m = x\""], ["proof (prove)\nusing this:\n  min \\<le> n + m\n\ngoal (1 subgoal):\n 1. sdrop n s !! m = x", "unfolding sdrop_snth"], ["proof (prove)\nusing this:\n  min \\<le> n + m\n\ngoal (1 subgoal):\n 1. s !! (n + m) = x", "by (rule sdrop_sconst[OF min(1)])"], ["proof (state)\nthis:\n  sdrop n s !! m = x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x\n 2. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     \\<not> m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x", "thus ?thesis"], ["proof (prove)\nusing this:\n  sdrop n s !! m = x\n\ngoal (1 subgoal):\n 1. \\<pi> (sdrop n s !! m) = \\<pi> x", "by simp"], ["proof (state)\nthis:\n  \\<pi> (sdrop n s !! m) = \\<pi> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<min - n. \\<pi> (sdrop n s !! i) = \\<pi> x;\n     m < min - n\\<rbrakk>\n    \\<Longrightarrow> \\<pi> (sdrop n s !! m) = \\<pi> x", "qed auto"], ["proof (state)\nthis:\n  \\<pi> (sdrop n s !! m) = \\<pi> x\n\ngoal (2 subgoals):\n 1. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "assume \"\\<forall>m. \\<pi> (sdrop n s !! m) = \\<pi> x\""], ["proof (state)\nthis:\n  \\<forall>m. \\<pi> (sdrop n s !! m) = \\<pi> x\n\ngoal (2 subgoals):\n 1. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>na. \\<pi> (sdrop n s !! na) = \\<pi> x;\n        sdrop n s \\<noteq> sconst x\\<rbrakk>\n       \\<Longrightarrow> map \\<pi> (stake (min - n) (sdrop n s)) =\n                         replicate (min - n) (\\<pi> x)", "thus \"map \\<pi> (stake (min - n) (sdrop n s)) = replicate (min - n) (\\<pi> x)\""], ["proof (prove)\nusing this:\n  \\<forall>m. \\<pi> (sdrop n s !! m) = \\<pi> x\n\ngoal (1 subgoal):\n 1. map \\<pi> (stake (min - n) (sdrop n s)) = replicate (min - n) (\\<pi> x)", "unfolding stake_smap[symmetric] smap_alt[symmetric, of \\<pi> \"sdrop n s\" \"sconst (\\<pi> x)\", simplified]"], ["proof (prove)\nusing this:\n  smap \\<pi> (sdrop n s) = sconst (\\<pi> x)\n\ngoal (1 subgoal):\n 1. stake (min - n) (smap \\<pi> (sdrop n s)) = replicate (min - n) (\\<pi> x)", "by (auto simp: map_replicate_const)"], ["proof (state)\nthis:\n  map \\<pi> (stake (min - n) (sdrop n s)) = replicate (min - n) (\\<pi> x)\n\ngoal (1 subgoal):\n 1. \\<And>n na.\n       sdrop n s = sconst x \\<Longrightarrow>\n       \\<pi> (sdrop n s !! na) = \\<pi> x", "qed auto"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      map \\<pi> (stake (min - n) (sdrop n s)) =\n      replicate (min - n) (\\<pi> x) \\<or>\n      sdrop n s = sconst x) =\n  (\\<lambda>n. smap \\<pi> (sdrop n s) = sconst (\\<pi> x))\n\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "finally"], ["proof (chain)\npicking this:\n  fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n  map \\<pi> (stake (LEAST n. smap \\<pi> (sdrop n s) = sconst (\\<pi> x)) s)", "show ?thesis"], ["proof (prove)\nusing this:\n  fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n  map \\<pi> (stake (LEAST n. smap \\<pi> (sdrop n s) = sconst (\\<pi> x)) s)\n\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n    cut_same (\\<pi> x) (smap \\<pi> s)", "unfolding cut_same_def sdrop_smap stake_smap"], ["proof (prove)\nusing this:\n  fin_cut_same (\\<pi> x)\n   (map \\<pi> (stake (LEAST n. sdrop n s = sconst x) s)) =\n  map \\<pi> (stake (LEAST n. smap \\<pi> (sdrop n s) = sconst (\\<pi> x)) s)\n\ngoal (1 subgoal):\n 1. fin_cut_same (\\<pi> x)\n     (map \\<pi> (stake (LEAST n. sdrop n s = sconst x) s)) =\n    map \\<pi> (stake (LEAST n. smap \\<pi> (sdrop n s) = sconst (\\<pi> x)) s)", "."], ["proof (state)\nthis:\n  fin_cut_same (\\<pi> x) (map \\<pi> (cut_same x s)) =\n  cut_same (\\<pi> x) (smap \\<pi> s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tl_enc[simp]:\n  assumes \"\\<forall>x \\<in> set (x # I). case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True\"\n  shows \"SAMEQUOT (any, replicate (length I) False) (map \\<pi> ` enc (w, x # I)) = enc (w, I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate (length I) False)\n     (map \\<pi> ` enc (w, x # I)) =\n    enc (w, I)", "unfolding SAMEQUOT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {fin_cut_same (any, replicate (length I) False) xa @\n     replicate m (any, replicate (length I) False) |\n     xa m. xa \\<in> map \\<pi> ` enc (w, x # I)} =\n    enc (w, I)", "by (fastforce simp: assms \\<pi>_def\n    fin_cut_same_tl[OF ex_Loop_stream_enc[OF assms], unfolded \\<pi>_def, simplified, symmetric])"], ["", "lemma encD:\n  \"\\<lbrakk>v \\<in> enc (w, I); (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\\<rbrakk> \\<Longrightarrow>\n  v = map (case_prod (enc_atom I)) (zip [0 ..< length v] (stake (length v) (w @- sconst any)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> enc (w, I);\n     \\<forall>x\\<in>set I.\n        case x of Inl a \\<Rightarrow> True\n        | Inr P \\<Rightarrow> finite P\\<rbrakk>\n    \\<Longrightarrow> v =\n                      map2 (enc_atom I) [0..<length v]\n                       (stake (length v) (w @- sconst any))", "by (erule box_equals[OF sym[OF arg_cong[of _ _ \"stake (length v)\" ,OF stream_enc_enc]]])\n   (auto simp: stake_shift sdrop_shift stake_add[symmetric] map_replicate_const)"], ["", "lemma enc_Inl: \"\\<lbrakk>x \\<in> enc (w, I); (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True);\n  m < length I; I ! m = Inl p\\<rbrakk> \\<Longrightarrow> p < length x \\<and> snd (x ! p) ! m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     \\<forall>x\\<in>set I.\n        case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P;\n     m < length I; I ! m = Inl p\\<rbrakk>\n    \\<Longrightarrow> p < length x \\<and> snd (x ! p) ! m", "by (auto dest!: less_length_cut_same_Inl[of _ _ _ w] simp: nth_append cut_same_def)"], ["", "lemma enc_Inr: assumes \"x \\<in> enc (w, I)\" \"\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True\"\n  \"M < length I\" \"I ! M = Inr P\"\n  shows \"p \\<in> P \\<longleftrightarrow> p < length x \\<and> snd (x ! p) ! M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<in> P) = (p < length x \\<and> snd (x ! p) ! M)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> P \\<Longrightarrow> p < length x \\<and> snd (x ! p) ! M\n 2. p < length x \\<and> snd (x ! p) ! M \\<Longrightarrow> p \\<in> P", "assume \"p \\<in> P\""], ["proof (state)\nthis:\n  p \\<in> P\n\ngoal (2 subgoals):\n 1. p \\<in> P \\<Longrightarrow> p < length x \\<and> snd (x ! p) ! M\n 2. p < length x \\<and> snd (x ! p) ! M \\<Longrightarrow> p \\<in> P", "with assms"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P\n  M < length I\n  I ! M = Inr P\n  p \\<in> P", "show \"p < length x \\<and> snd (x ! p) ! M\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P\n  M < length I\n  I ! M = Inr P\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. p < length x \\<and> snd (x ! p) ! M", "by (auto dest!: less_length_cut_same_Inr[of _ _ _ w] simp: nth_append cut_same_def)"], ["proof (state)\nthis:\n  p < length x \\<and> snd (x ! p) ! M\n\ngoal (1 subgoal):\n 1. p < length x \\<and> snd (x ! p) ! M \\<Longrightarrow> p \\<in> P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p < length x \\<and> snd (x ! p) ! M \\<Longrightarrow> p \\<in> P", "assume \"p < length x \\<and> snd (x ! p) ! M\""], ["proof (state)\nthis:\n  p < length x \\<and> snd (x ! p) ! M\n\ngoal (1 subgoal):\n 1. p < length x \\<and> snd (x ! p) ! M \\<Longrightarrow> p \\<in> P", "thus \"p \\<in> P\""], ["proof (prove)\nusing this:\n  p < length x \\<and> snd (x ! p) ! M\n\ngoal (1 subgoal):\n 1. p \\<in> P", "using assms"], ["proof (prove)\nusing this:\n  p < length x \\<and> snd (x ! p) ! M\n  x \\<in> enc (w, I)\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P\n  M < length I\n  I ! M = Inr P\n\ngoal (1 subgoal):\n 1. p \\<in> P", "by (subst (asm) (2) encD[OF assms(1,2)]) auto"], ["proof (state)\nthis:\n  p \\<in> P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enc_length:\n  assumes \"enc (w, I) = enc (w', I')\"\n  shows \"length I = length I'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length I = length I'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length I = length I'", "let ?cL = \"\\<lambda>w I. cut_same (any, replicate (length I) False) (stream_enc (w, I))\""], ["proof (state)\ngoal (1 subgoal):\n 1. length I = length I'", "let ?w = \"\\<lambda>w I m. ?cL w I @ replicate (m - length (?cL w I)) (any, replicate (length I) False)\""], ["proof (state)\ngoal (1 subgoal):\n 1. length I = length I'", "let ?max = \"max (length (?cL w I)) (length (?cL w' I')) + 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. length I = length I'", "from assms"], ["proof (chain)\npicking this:\n  enc (w, I) = enc (w', I')", "have \"?w w I ?max \\<in> enc (w, I)\" \"?w w' I' ?max \\<in> enc (w', I')\""], ["proof (prove)\nusing this:\n  enc (w, I) = enc (w', I')\n\ngoal (1 subgoal):\n 1. cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (any, replicate (length I) False)\n    \\<in> enc (w, I) &&&\n    cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n     (any, replicate (length I') False)\n    \\<in> enc (w', I')", "by auto"], ["proof (state)\nthis:\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n   (any, replicate (length I) False)\n  \\<in> enc (w, I)\n  cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length\n     (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n   (any, replicate (length I') False)\n  \\<in> enc (w', I')\n\ngoal (1 subgoal):\n 1. length I = length I'", "hence \"?w w I ?max = ?w w' I' ?max\""], ["proof (prove)\nusing this:\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n   (any, replicate (length I) False)\n  \\<in> enc (w, I)\n  cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length\n     (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n   (any, replicate (length I') False)\n  \\<in> enc (w', I')\n\ngoal (1 subgoal):\n 1. cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (any, replicate (length I) False) =\n    cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n     (any, replicate (length I') False)", "using enc_unique_length assms"], ["proof (prove)\nusing this:\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n   (any, replicate (length I) False)\n  \\<in> enc (w, I)\n  cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length\n     (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n   (any, replicate (length I') False)\n  \\<in> enc (w', I')\n  ?v \\<in> enc (?w, ?I) \\<Longrightarrow>\n  \\<forall>v'.\n     length v' = length ?v \\<and> v' \\<in> enc (?w, ?I) \\<longrightarrow>\n     ?v = v'\n  enc (w, I) = enc (w', I')\n\ngoal (1 subgoal):\n 1. cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (any, replicate (length I) False) =\n    cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n     (any, replicate (length I') False)", "by (simp del: enc.simps)"], ["proof (state)\nthis:\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n   (any, replicate (length I) False) =\n  cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length\n     (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n   (any, replicate (length I') False)\n\ngoal (1 subgoal):\n 1. length I = length I'", "moreover"], ["proof (state)\nthis:\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n   (any, replicate (length I) False) =\n  cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length\n     (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n   (any, replicate (length I') False)\n\ngoal (1 subgoal):\n 1. length I = length I'", "have \"last (?w w I ?max) = (any, replicate (length I) False)\"\n                \"last (?w w' I' ?max) = (any, replicate (length I') False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last\n     (cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n      replicate\n       (max (length\n              (cut_same (any, replicate (length I) False)\n                (stream_enc (w, I))))\n         (length\n           (cut_same (any, replicate (length I') False)\n             (stream_enc (w', I')))) +\n        1 -\n        length\n         (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n       (any, replicate (length I) False)) =\n    (any, replicate (length I) False) &&&\n    last\n     (cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n      replicate\n       (max (length\n              (cut_same (any, replicate (length I) False)\n                (stream_enc (w, I))))\n         (length\n           (cut_same (any, replicate (length I') False)\n             (stream_enc (w', I')))) +\n        1 -\n        length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I'))))\n       (any, replicate (length I') False)) =\n    (any, replicate (length I') False)", "by auto"], ["proof (state)\nthis:\n  last\n   (cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (any, replicate (length I) False)) =\n  (any, replicate (length I) False)\n  last\n   (cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n     (any, replicate (length I') False)) =\n  (any, replicate (length I') False)\n\ngoal (1 subgoal):\n 1. length I = length I'", "ultimately"], ["proof (chain)\npicking this:\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n   (any, replicate (length I) False) =\n  cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length\n     (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n   (any, replicate (length I') False)\n  last\n   (cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (any, replicate (length I) False)) =\n  (any, replicate (length I) False)\n  last\n   (cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n     (any, replicate (length I') False)) =\n  (any, replicate (length I') False)", "show \"length I = length I'\""], ["proof (prove)\nusing this:\n  cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n   (any, replicate (length I) False) =\n  cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n  replicate\n   (max (length\n          (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (length\n       (cut_same (any, replicate (length I') False)\n         (stream_enc (w', I')))) +\n    1 -\n    length\n     (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n   (any, replicate (length I') False)\n  last\n   (cut_same (any, replicate (length I) False) (stream_enc (w, I)) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I) False) (stream_enc (w, I))))\n     (any, replicate (length I) False)) =\n  (any, replicate (length I) False)\n  last\n   (cut_same (any, replicate (length I') False) (stream_enc (w', I')) @\n    replicate\n     (max (length\n            (cut_same (any, replicate (length I) False)\n              (stream_enc (w, I))))\n       (length\n         (cut_same (any, replicate (length I') False)\n           (stream_enc (w', I')))) +\n      1 -\n      length\n       (cut_same (any, replicate (length I') False) (stream_enc (w', I'))))\n     (any, replicate (length I') False)) =\n  (any, replicate (length I') False)\n\ngoal (1 subgoal):\n 1. length I = length I'", "by auto"], ["proof (state)\nthis:\n  length I = length I'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enc_stream_enc: \n  \"\\<lbrakk>(\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True);\n    (\\<forall>x \\<in> set I'. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True); \n    enc (w, I) = enc (w', I')\\<rbrakk> \\<Longrightarrow> stream_enc (w, I) = stream_enc (w', I')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set I.\n                case x of Inl a \\<Rightarrow> True\n                | Inr P \\<Rightarrow> finite P;\n     \\<forall>x\\<in>set I'.\n        case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P;\n     enc (w, I) = enc (w', I')\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, I) = stream_enc (w', I')", "by (rule box_equals[OF _ sym[OF stream_enc_enc_some] sym[OF stream_enc_enc_some]])\n    (auto dest: enc_length simp del: enc.simps)"], ["", "abbreviation \"wf_interp w I \\<equiv>\n  ((\\<forall>a \\<in> set w. a \\<in> set \\<Sigma>) \\<and> (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True))\""], ["", "fun wf_interp_for_formula :: \"'a interp \\<Rightarrow> 'a formula \\<Rightarrow> bool\" where\n  \"wf_interp_for_formula (w, I) \\<phi> =\n    (wf_interp w I \\<and>\n     (\\<forall>n \\<in> FOV \\<phi>. case I ! n of Inl _ \\<Rightarrow> True | _ \\<Rightarrow> False) \\<and>\n     (\\<forall>n \\<in> SOV \\<phi>. case I ! n of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True))\""], ["", "fun satisfies :: \"'a interp \\<Rightarrow> 'a formula \\<Rightarrow> bool\" (infix \"\\<Turnstile>\" 50) where\n  \"(w, I) \\<Turnstile> FQ a m = ((case I ! m of Inl p \\<Rightarrow> if p < length w then w ! p else any) = a)\"\n| \"(w, I) \\<Turnstile> FLess m1 m2 = ((case I ! m1 of Inl p \\<Rightarrow> p) < (case I ! m2 of Inl p \\<Rightarrow> p))\"\n| \"(w, I) \\<Turnstile> FIn m M = ((case I ! m of Inl p \\<Rightarrow> p) \\<in> (case I ! M of Inr P \\<Rightarrow> P))\"\n| \"(w, I) \\<Turnstile> FNot \\<phi> = (\\<not> (w, I) \\<Turnstile> \\<phi>)\"\n| \"(w, I) \\<Turnstile> (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = ((w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or> (w, I) \\<Turnstile> \\<phi>\\<^sub>2)\"\n| \"(w, I) \\<Turnstile> (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = ((w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and> (w, I) \\<Turnstile> \\<phi>\\<^sub>2)\"\n| \"(w, I) \\<Turnstile> (FExists \\<phi>) = (\\<exists>p. (w, Inl p # I) \\<Turnstile> \\<phi>)\"\n| \"(w, I) \\<Turnstile> (FEXISTS \\<phi>) = (\\<exists>P. finite P \\<and> (w, Inr P # I) \\<Turnstile> \\<phi>)\""], ["", "definition lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S :: \"nat \\<Rightarrow> 'a formula \\<Rightarrow> ('a \\<times> bool list) list set\" where\n  \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> = \\<Union>{enc (w, I) | w I . length I = n \\<and> wf_interp_for_formula (w, I) \\<phi> \\<and> (w, I) \\<Turnstile> \\<phi>}\""], ["", "lemma encD_ex: \"\\<lbrakk>x \\<in> enc (w, I); (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True)\\<rbrakk> \\<Longrightarrow>\n  \\<exists>n. x = map (case_prod (enc_atom I)) (zip [0 ..< n] (stake n (w @- sconst any)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     \\<forall>x\\<in>set I.\n        case x of Inl a \\<Rightarrow> True\n        | Inr P \\<Rightarrow> finite P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         x =\n                         map2 (enc_atom I) [0..<n]\n                          (stake n (w @- sconst any))", "by (auto dest!: encD simp del: enc.simps)"], ["", "lemma enc_set_\\<sigma>: \"\\<lbrakk>x \\<in> enc (w, I); (\\<forall>x \\<in> set I. case x of Inr P \\<Rightarrow> finite P | _ \\<Rightarrow> True);\n  length I = n; a \\<in> set x; set w \\<subseteq> set \\<Sigma>\\<rbrakk> \\<Longrightarrow> a \\<in> set (\\<sigma> \\<Sigma> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     \\<forall>x\\<in>set I.\n        case x of Inl a \\<Rightarrow> True | Inr P \\<Rightarrow> finite P;\n     length I = n; a \\<in> set x; set w \\<subseteq> set \\<Sigma>\\<rbrakk>\n    \\<Longrightarrow> a \\<in> set (\\<sigma> \\<Sigma> n)", "by (force dest: encD_ex intro: enc_atom_\\<sigma> simp: in_set_zip shift_snth simp del: enc.simps)"], ["", "definition \"positions_in_row s i =\n  Option.these (sset (smap2 (\\<lambda>p (_, bs). if nth bs i then Some p else None) nats s))\""], ["", "lemma positions_in_row: \"positions_in_row s i = {p. snd (s !! p) ! i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positions_in_row s i = {p. snd (s !! p) ! i}", "unfolding positions_in_row_def Option.these_def smap2_szip stream.set_map sset_range"], ["proof (prove)\ngoal (1 subgoal):\n 1. the `\n    {x \\<in> range\n              ((!!)\n                (smap\n                  (\\<lambda>(p, uu_, bs). if bs ! i then Some p else None)\n                  (szip nats s))).\n     x \\<noteq> None} =\n    {p. snd (s !! p) ! i}", "by (auto split: if_split_asm intro!: image_eqI[of _ the] split: prod.splits)"], ["", "lemma positions_in_row_unique: \"\\<exists>!p. snd (s !! p) ! i \\<Longrightarrow>\n  the_elem (positions_in_row s i) = (THE p. snd (s !! p) ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (s !! p) ! i \\<Longrightarrow>\n    the_elem (positions_in_row s i) = (THE p. snd (s !! p) ! i)", "by (rule the1I2) (auto simp: the_elem_def positions_in_row)"], ["", "lemma positions_in_row_nth: \"\\<exists>!p. snd (s !! p) ! i \\<Longrightarrow>\n  snd (s !! the_elem (positions_in_row s i)) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (s !! p) ! i \\<Longrightarrow>\n    snd (s !! the_elem (positions_in_row s i)) ! i", "unfolding positions_in_row_unique"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (s !! p) ! i \\<Longrightarrow>\n    snd (s !! (THE p. snd (s !! p) ! i)) ! i", "by (rule the1I2) auto"], ["", "definition \"dec_word s = cut_same any (smap fst s)\""], ["", "lemma dec_word_stream_enc: \"dec_word (stream_enc (w, I)) = cut_same any (w @- sconst any)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dec_word (stream_enc (w, I)) = cut_same any (w @- sconst any)", "unfolding dec_word_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cut_same any (smap fst (stream_enc (w, I))) =\n    cut_same any (w @- sconst any)", "by (auto intro!: arg_cong[of _ _ \"cut_same any\"] simp: smap2_alt)"], ["", "definition \"stream_dec n FO (s :: ('a \\<times> bool list) stream) = map (\\<lambda>i.\n  if i \\<in> FO\n  then Inl (the_elem (positions_in_row s i))\n  else Inr (positions_in_row s i)) [0..<n]\""], ["", "lemma stream_dec_Inl: \"\\<lbrakk>i \\<in> FO; i < n\\<rbrakk> \\<Longrightarrow> \\<exists>p. stream_dec n FO s ! i = Inl p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p. stream_dec n FO s ! i = Inl p", "unfolding stream_dec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         map (\\<lambda>i.\n                                 if i \\<in> FO\n                                 then Inl (the_elem (positions_in_row s i))\n                                 else Inr (positions_in_row s i))\n                          [0..<n] !\n                         i =\n                         Inl p", "using nth_map[of n \"[0..<n]\"]"], ["proof (prove)\nusing this:\n  n < length [0..<n] \\<Longrightarrow> map ?f [0..<n] ! n = ?f ([0..<n] ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         map (\\<lambda>i.\n                                 if i \\<in> FO\n                                 then Inl (the_elem (positions_in_row s i))\n                                 else Inr (positions_in_row s i))\n                          [0..<n] !\n                         i =\n                         Inl p", "by auto"], ["", "lemma stream_dec_not_Inr: \"\\<lbrakk>stream_dec n FO s ! i = Inr P; i \\<in> FO; i < n\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>stream_dec n FO s ! i = Inr P; i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding stream_dec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row s i))\n                     else Inr (positions_in_row s i))\n              [0..<n] !\n             i =\n             Inr P;\n     i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "using nth_map[of n \"[0..<n]\"]"], ["proof (prove)\nusing this:\n  n < length [0..<n] \\<Longrightarrow> map ?f [0..<n] ! n = ?f ([0..<n] ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row s i))\n                     else Inr (positions_in_row s i))\n              [0..<n] !\n             i =\n             Inr P;\n     i \\<in> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "by auto"], ["", "lemma stream_dec_Inr: \"\\<lbrakk>i \\<notin> FO; i < n\\<rbrakk> \\<Longrightarrow> \\<exists>P. stream_dec n FO s ! i = Inr P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>P. stream_dec n FO s ! i = Inr P", "unfolding stream_dec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>P.\n                         map (\\<lambda>i.\n                                 if i \\<in> FO\n                                 then Inl (the_elem (positions_in_row s i))\n                                 else Inr (positions_in_row s i))\n                          [0..<n] !\n                         i =\n                         Inr P", "using nth_map[of n \"[0..<n]\"]"], ["proof (prove)\nusing this:\n  n < length [0..<n] \\<Longrightarrow> map ?f [0..<n] ! n = ?f ([0..<n] ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>P.\n                         map (\\<lambda>i.\n                                 if i \\<in> FO\n                                 then Inl (the_elem (positions_in_row s i))\n                                 else Inr (positions_in_row s i))\n                          [0..<n] !\n                         i =\n                         Inr P", "by auto"], ["", "lemma stream_dec_not_Inl: \"\\<lbrakk>stream_dec n FO s ! i = Inl p; i \\<notin> FO; i < n\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>stream_dec n FO s ! i = Inl p; i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding stream_dec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row s i))\n                     else Inr (positions_in_row s i))\n              [0..<n] !\n             i =\n             Inl p;\n     i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "using nth_map[of n \"[0..<n]\"]"], ["proof (prove)\nusing this:\n  n < length [0..<n] \\<Longrightarrow> map ?f [0..<n] ! n = ?f ([0..<n] ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem (positions_in_row s i))\n                     else Inr (positions_in_row s i))\n              [0..<n] !\n             i =\n             Inl p;\n     i \\<notin> FO; i < n\\<rbrakk>\n    \\<Longrightarrow> False", "by auto"], ["", "lemma Inr_dec_finite: \"\\<lbrakk>\\<forall>i<n. finite {p. snd (s !! p) ! i}; Inr P \\<in> set (stream_dec n FO s)\\<rbrakk> \\<Longrightarrow>\n  finite P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<n. finite {p. snd (s !! p) ! i};\n     Inr P \\<in> set (stream_dec n FO s)\\<rbrakk>\n    \\<Longrightarrow> finite P", "unfolding stream_dec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<n. finite {p. snd (s !! p) ! i};\n     Inr P\n     \\<in> set (map (\\<lambda>i.\n                        if i \\<in> FO\n                        then Inl (the_elem (positions_in_row s i))\n                        else Inr (positions_in_row s i))\n                 [0..<n])\\<rbrakk>\n    \\<Longrightarrow> finite P", "by (auto simp: positions_in_row)"], ["", "lemma enc_atom_dec: \n  \"\\<lbrakk>\\<forall>p. length (snd (s !! p)) = n; \\<forall>i \\<in> FO. i < n \\<longrightarrow> (\\<exists>!p. snd (s !! p) ! i); a = fst (s !! p)\\<rbrakk> \\<Longrightarrow>\n   enc_atom (stream_dec n FO s) p a = s !! p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>p. length (snd (s !! p)) = n;\n     \\<forall>i\\<in>FO.\n        i < n \\<longrightarrow> (\\<exists>!p. snd (s !! p) ! i);\n     a = fst (s !! p)\\<rbrakk>\n    \\<Longrightarrow> enc_atom (stream_dec n FO s) p a = s !! p", "unfolding stream_dec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>p. length (snd (s !! p)) = n;\n     \\<forall>i\\<in>FO.\n        i < n \\<longrightarrow> (\\<exists>!p. snd (s !! p) ! i);\n     a = fst (s !! p)\\<rbrakk>\n    \\<Longrightarrow> enc_atom\n                       (map (\\<lambda>i.\n                                if i \\<in> FO\n                                then Inl (the_elem (positions_in_row s i))\n                                else Inr (positions_in_row s i))\n                         [0..<n])\n                       p a =\n                      s !! p", "by (rule sym, subst surjective_pairing[of \"s !! p\"])\n    (auto intro!: nth_equalityI simp: positions_in_row simp del: prod.collapse split: if_split_asm,\n    (metis positions_in_row positions_in_row_nth)+)"], ["", "lemma length_stream_dec[simp]: \"length (stream_dec n FO x) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (stream_dec n FO x) = n", "unfolding stream_dec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (map (\\<lambda>i.\n              if i \\<in> FO then Inl (the_elem (positions_in_row x i))\n              else Inr (positions_in_row x i))\n       [0..<n]) =\n    n", "by auto"], ["", "lemma stream_enc_dec:\n  \"\\<lbrakk>\\<exists>n. sdrop n (smap fst s) = sconst any;\n   stream_all (\\<lambda>x. length (snd x) = n) s; \\<forall>i \\<in> FO. (\\<exists>!p. snd (s !! p) ! i)\\<rbrakk> \\<Longrightarrow>\n   stream_enc (dec_word s, stream_dec n FO s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n. sdrop n (smap fst s) = sconst any;\n     stream_all (\\<lambda>x. length (snd x) = n) s;\n     \\<forall>i\\<in>FO. \\<exists>!p. snd (s !! p) ! i\\<rbrakk>\n    \\<Longrightarrow> stream_enc (dec_word s, stream_dec n FO s) = s", "unfolding dec_word_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n. sdrop n (smap fst s) = sconst any;\n     stream_all (\\<lambda>x. length (snd x) = n) s;\n     \\<forall>i\\<in>FO. \\<exists>!p. snd (s !! p) ! i\\<rbrakk>\n    \\<Longrightarrow> stream_enc\n                       (cut_same any (smap fst s), stream_dec n FO s) =\n                      s", "by (drule LeastI_ex)\n    (auto intro!: enc_atom_dec simp: smap2_alt cut_same_def\n    simp del: stake_smap sdrop_smap\n    intro!: trans[OF arg_cong2[of _ _ _ _ \"(!!)\"] snth_smap]\n            trans[OF arg_cong2[of _ _ _ _ \"(@-)\"] stake_sdrop])"], ["", "lemma stream_enc_unique: \n  \"i < length I \\<Longrightarrow> \\<exists>p. I ! i = Inl p \\<Longrightarrow> \\<exists>!p. snd (stream_enc (w, I) !! p) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length I; \\<exists>p. I ! i = Inl p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!p. snd (stream_enc (w, I) !! p) ! i", "by auto"], ["", "lemma stream_dec_enc_Inl:\n  \"\\<lbrakk>stream_dec n FO (stream_enc (w, I)) ! i = Inl p'; I ! i = Inl p; i \\<in> FO; i < n; length I = n\\<rbrakk> \\<Longrightarrow>\n  p = p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>stream_dec n FO (stream_enc (w, I)) ! i = Inl p';\n     I ! i = Inl p; i \\<in> FO; i < n; length I = n\\<rbrakk>\n    \\<Longrightarrow> p = p'", "unfolding stream_dec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem\n                                (positions_in_row (stream_enc (w, I)) i))\n                     else Inr (positions_in_row (stream_enc (w, I)) i))\n              [0..<n] !\n             i =\n             Inl p';\n     I ! i = Inl p; i \\<in> FO; i < n; length I = n\\<rbrakk>\n    \\<Longrightarrow> p = p'", "by (auto intro!: trans[OF _ sym[OF  positions_in_row_unique[OF stream_enc_unique]]]\n    simp del: stream_enc.simps) simp"], ["", "lemma stream_dec_enc_Inr:\n  \"\\<lbrakk>stream_dec n FO (stream_enc (w, I)) ! i = Inr P'; I ! i = Inr P; i \\<notin> FO; i < n; length I = n\\<rbrakk> \\<Longrightarrow>\n  P = P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>stream_dec n FO (stream_enc (w, I)) ! i = Inr P';\n     I ! i = Inr P; i \\<notin> FO; i < n; length I = n\\<rbrakk>\n    \\<Longrightarrow> P = P'", "unfolding stream_dec_def positions_in_row"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map (\\<lambda>i.\n                     if i \\<in> FO\n                     then Inl (the_elem\n                                {p. snd (stream_enc (w, I) !! p) ! i})\n                     else Inr {p. snd (stream_enc (w, I) !! p) ! i})\n              [0..<n] !\n             i =\n             Inr P';\n     I ! i = Inr P; i \\<notin> FO; i < n; length I = n\\<rbrakk>\n    \\<Longrightarrow> P = P'", "by auto"], ["", "lemma Collect_snth: \"{p. P ((x ## s) !! p)} \\<subseteq> {0} \\<union> Suc ` {p. P (s !! p)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. P ((x ## s) !! p)} \\<subseteq> {0} \\<union> Suc ` {p. P (s !! p)}", "unfolding image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. P ((x ## s) !! p)}\n    \\<subseteq> {0} \\<union> {y. \\<exists>x\\<in>{p. P (s !! p)}. y = Suc x}", "by (auto simp: gr0_conv_Suc)"], ["", "lemma finite_True_in_row: \"\\<forall>i < n. finite {p. snd ((w @- sconst (any, replicate n False)) !! p) ! i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n.\n       finite {p. snd ((w @- sconst (any, replicate n False)) !! p) ! i}", "by (induct w) (auto simp: id_def[symmetric] intro: finite_subset[OF Collect_snth])"], ["", "lemma lang_ENC:\n assumes \"FO \\<subseteq> {0 ..< n}\" \"SO \\<subseteq> {0 ..< n} - FO\"\n shows \"lang n (ENC n FO) = \\<Union>{enc (w, I) | w I . length I = n \\<and> wf_interp w I \\<and>\n   (\\<forall>i \\<in> FO. case I ! i of Inl _ \\<Rightarrow> True | Inr _ \\<Rightarrow> False) \\<and>\n   (\\<forall>i \\<in> SO. case I ! i of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True)}\"\n   (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (ENC n FO) =\n    \\<Union>\n     {enc (w, I) |w I.\n      length I = n \\<and>\n      wf_interp w I \\<and>\n      (\\<forall>i\\<in>FO.\n          case I ! i of Inl x \\<Rightarrow> True\n          | Inr x \\<Rightarrow> False) \\<and>\n      (\\<forall>i\\<in>SO.\n          case I ! i of Inl x \\<Rightarrow> False\n          | Inr x \\<Rightarrow> True)}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "assume L: \"x \\<in> ?L\""], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n FO)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "from assms(1)"], ["proof (chain)\npicking this:\n  FO \\<subseteq> {0..<n}", "have fin: \"finite FO\""], ["proof (prove)\nusing this:\n  FO \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. finite FO", "by (auto simp: finite_subset)"], ["proof (state)\nthis:\n  finite FO\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "have *: \"set x \\<subseteq> set (\\<sigma> \\<Sigma> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set x \\<subseteq> set (\\<sigma> \\<Sigma> n)", "using subsetD[OF assms(1)]\n    bspec[OF wf_lang_wf_word[OF wf_rexp_ENC[OF fin]] L]"], ["proof (prove)\nusing this:\n  ?c \\<in> FO \\<Longrightarrow> ?c \\<in> {0..<n}\n  n = 0 \\<or> (\\<forall>v\\<in>FO. v < n) \\<Longrightarrow> wf_word n x\n\ngoal (1 subgoal):\n 1. set x \\<subseteq> set (\\<sigma> \\<Sigma> n)", "by (cases n) (auto simp: wf_word)"], ["proof (state)\nthis:\n  set x \\<subseteq> set (\\<sigma> \\<Sigma> n)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "let ?s = \"x @- sconst (any, replicate n False)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "from assms"], ["proof (chain)\npicking this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO", "have \"list_all (\\<lambda>bs. length (snd bs) = n) x\""], ["proof (prove)\nusing this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>bs. length (snd bs) = n) x", "using *"], ["proof (prove)\nusing this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  set x \\<subseteq> set (\\<sigma> \\<Sigma> n)\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>bs. length (snd bs) = n) x", "by (auto simp: list_all_iff \\<sigma>_def set_n_lists)"], ["proof (state)\nthis:\n  list_all (\\<lambda>bs. length (snd bs) = n) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "hence \"stream_all (\\<lambda>x. length (snd x) = n) (x @- sconst (any, replicate n False))\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>bs. length (snd bs) = n) x\n\ngoal (1 subgoal):\n 1. stream_all (\\<lambda>x. length (snd x) = n)\n     (x @- sconst (any, replicate n False))", "by (auto simp only: stream_all_shift sset_sconst length_replicate snd_conv)"], ["proof (state)\nthis:\n  stream_all (\\<lambda>x. length (snd x) = n)\n   (x @- sconst (any, replicate n False))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "moreover"], ["proof (state)\nthis:\n  stream_all (\\<lambda>x. length (snd x) = n)\n   (x @- sconst (any, replicate n False))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "{"], ["proof (state)\nthis:\n  stream_all (\\<lambda>x. length (snd x) = n)\n   (x @- sconst (any, replicate n False))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "fix m"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "assume \"m \\<in> FO\""], ["proof (state)\nthis:\n  m \\<in> FO\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "with assms"], ["proof (chain)\npicking this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  m \\<in> FO", "have \"m < n\""], ["proof (prove)\nusing this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  m \\<in> FO\n\ngoal (1 subgoal):\n 1. m < n", "by (auto simp: max_idx_vars)"], ["proof (state)\nthis:\n  m < n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "with L \\<open>m \\<in> FO\\<close> assms"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n FO)\n  m \\<in> FO\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  m < n", "obtain u z v where uzv: \"x = u @ z @ v\"\n      \"u \\<in> star (lang n (Atom (Arbitrary_Except m False)))\"\n      \"z \\<in> lang n (Atom (Arbitrary_Except m True))\"\n      \"v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n FO)\n  m \\<in> FO\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  m < n\n\ngoal (1 subgoal):\n 1. (\\<And>u z v.\n        \\<lbrakk>x = u @ z @ v;\n         u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n         z \\<in> lang n (Atom (Arbitrary_Except m True));\n         v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ENC_def"], ["proof (prove)\nusing this:\n  x \\<in> lang n (INTERSECT (sorted_list_of_set (valid_ENC n ` FO)))\n  m \\<in> FO\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  m < n\n\ngoal (1 subgoal):\n 1. (\\<And>u z v.\n        \\<lbrakk>x = u @ z @ v;\n         u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n         z \\<in> lang n (Atom (Arbitrary_Except m True));\n         v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases n)\n       (auto simp: not_less max_idx_vars valid_ENC_def fin intro!: wf_rexp_valid_ENC finite_FOV\n        dest!: iffD1[OF lang_flatten_INTERSECT, rotated -1], fast)"], ["proof (state)\nthis:\n  x = u @ z @ v\n  u \\<in> star (lang n (Atom (Arbitrary_Except m False)))\n  z \\<in> lang n (Atom (Arbitrary_Except m True))\n  v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "with \\<open>m < n\\<close>"], ["proof (chain)\npicking this:\n  m < n\n  x = u @ z @ v\n  u \\<in> star (lang n (Atom (Arbitrary_Except m False)))\n  z \\<in> lang n (Atom (Arbitrary_Except m True))\n  v \\<in> star (lang n (Atom (Arbitrary_Except m False)))", "have \"\\<exists>!p.  snd (x ! p) ! m \\<and> p < length x\""], ["proof (prove)\nusing this:\n  m < n\n  x = u @ z @ v\n  u \\<in> star (lang n (Atom (Arbitrary_Except m False)))\n  z \\<in> lang n (Atom (Arbitrary_Except m True))\n  v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\n\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (x ! p) ! m \\<and> p < length x", "proof (intro ex1I[of _ \"length u\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m < n; x = u @ z @ v;\n     u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n     z \\<in> lang n (Atom (Arbitrary_Except m True));\n     v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\\<rbrakk>\n    \\<Longrightarrow> snd (x ! length u) ! m \\<and> length u < length x\n 2. \\<And>p.\n       \\<lbrakk>m < n; x = u @ z @ v;\n        u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n        z \\<in> lang n (Atom (Arbitrary_Except m True));\n        v \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n        snd (x ! p) ! m \\<and> p < length x\\<rbrakk>\n       \\<Longrightarrow> p = length u", "fix p"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m < n; x = u @ z @ v;\n     u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n     z \\<in> lang n (Atom (Arbitrary_Except m True));\n     v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\\<rbrakk>\n    \\<Longrightarrow> snd (x ! length u) ! m \\<and> length u < length x\n 2. \\<And>p.\n       \\<lbrakk>m < n; x = u @ z @ v;\n        u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n        z \\<in> lang n (Atom (Arbitrary_Except m True));\n        v \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n        snd (x ! p) ! m \\<and> p < length x\\<rbrakk>\n       \\<Longrightarrow> p = length u", "assume \"m < n\" \"snd (x ! p) ! m \\<and> p < length x\""], ["proof (state)\nthis:\n  m < n\n  snd (x ! p) ! m \\<and> p < length x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m < n; x = u @ z @ v;\n     u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n     z \\<in> lang n (Atom (Arbitrary_Except m True));\n     v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\\<rbrakk>\n    \\<Longrightarrow> snd (x ! length u) ! m \\<and> length u < length x\n 2. \\<And>p.\n       \\<lbrakk>m < n; x = u @ z @ v;\n        u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n        z \\<in> lang n (Atom (Arbitrary_Except m True));\n        v \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n        snd (x ! p) ! m \\<and> p < length x\\<rbrakk>\n       \\<Longrightarrow> p = length u", "with star_Arbitrary_ExceptD[OF uzv(2)] Arbitrary_ExceptD[OF uzv(3)] star_Arbitrary_ExceptD[OF uzv(4)]"], ["proof (chain)\npicking this:\n  \\<lbrakk>m < n; ?i < length u\\<rbrakk>\n  \\<Longrightarrow> snd (u ! ?i) ! m = False\n  m < n \\<Longrightarrow> \\<exists>x. z = [x] \\<and> snd x ! m = True\n  \\<lbrakk>m < n; ?i < length v\\<rbrakk>\n  \\<Longrightarrow> snd (v ! ?i) ! m = False\n  m < n\n  snd (x ! p) ! m \\<and> p < length x", "show \"p = length u\""], ["proof (prove)\nusing this:\n  \\<lbrakk>m < n; ?i < length u\\<rbrakk>\n  \\<Longrightarrow> snd (u ! ?i) ! m = False\n  m < n \\<Longrightarrow> \\<exists>x. z = [x] \\<and> snd x ! m = True\n  \\<lbrakk>m < n; ?i < length v\\<rbrakk>\n  \\<Longrightarrow> snd (v ! ?i) ! m = False\n  m < n\n  snd (x ! p) ! m \\<and> p < length x\n\ngoal (1 subgoal):\n 1. p = length u", "by (cases rule: linorder_cases) (auto simp: nth_append uzv(1))"], ["proof (state)\nthis:\n  p = length u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m < n; x = u @ z @ v;\n     u \\<in> star (lang n (Atom (Arbitrary_Except m False)));\n     z \\<in> lang n (Atom (Arbitrary_Except m True));\n     v \\<in> star (lang n (Atom (Arbitrary_Except m False)))\\<rbrakk>\n    \\<Longrightarrow> snd (x ! length u) ! m \\<and> length u < length x", "qed (auto dest!: Arbitrary_ExceptD)"], ["proof (state)\nthis:\n  \\<exists>!p. snd (x ! p) ! m \\<and> p < length x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "then"], ["proof (chain)\npicking this:\n  \\<exists>!p. snd (x ! p) ! m \\<and> p < length x", "obtain p where p: \"p < length x\" \"snd (x ! p) ! m\"\n      \"\\<And>q. snd (x ! q) ! m \\<and> q < length x \\<longrightarrow> q = p\""], ["proof (prove)\nusing this:\n  \\<exists>!p. snd (x ! p) ! m \\<and> p < length x\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p < length x; snd (x ! p) ! m;\n         \\<And>q.\n            snd (x ! q) ! m \\<and> q < length x \\<longrightarrow>\n            q = p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n  snd (x ! ?q2) ! m \\<and> ?q2 < length x \\<longrightarrow> ?q2 = p\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "from this(1,2)"], ["proof (chain)\npicking this:\n  p < length x\n  snd (x ! p) ! m", "have \"\\<exists>!p. snd (?s !! p) ! m\""], ["proof (prove)\nusing this:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m", "proof (intro ex1I[of _ p])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p < length x; snd (x ! p) ! m\\<rbrakk>\n    \\<Longrightarrow> snd ((x @- sconst (any, replicate n False)) !! p) ! m\n 2. \\<And>pa.\n       \\<lbrakk>p < length x; snd (x ! p) ! m;\n        snd ((x @- sconst (any, replicate n False)) !! pa) ! m\\<rbrakk>\n       \\<Longrightarrow> pa = p", "fix q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p < length x; snd (x ! p) ! m\\<rbrakk>\n    \\<Longrightarrow> snd ((x @- sconst (any, replicate n False)) !! p) ! m\n 2. \\<And>pa.\n       \\<lbrakk>p < length x; snd (x ! p) ! m;\n        snd ((x @- sconst (any, replicate n False)) !! pa) ! m\\<rbrakk>\n       \\<Longrightarrow> pa = p", "from p(1,2) p(3)[of q] \\<open>m < n\\<close>"], ["proof (chain)\npicking this:\n  p < length x\n  snd (x ! p) ! m\n  snd (x ! q) ! m \\<and> q < length x \\<longrightarrow> q = p\n  m < n", "show \"snd (?s !! q) ! m \\<Longrightarrow> q = p\""], ["proof (prove)\nusing this:\n  p < length x\n  snd (x ! p) ! m\n  snd (x ! q) ! m \\<and> q < length x \\<longrightarrow> q = p\n  m < n\n\ngoal (1 subgoal):\n 1. snd ((x @- sconst (any, replicate n False)) !! q) ! m \\<Longrightarrow>\n    q = p", "by (cases \"q < length x\")  auto"], ["proof (state)\nthis:\n  snd ((x @- sconst (any, replicate n False)) !! q) ! m \\<Longrightarrow>\n  q = p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p < length x; snd (x ! p) ! m\\<rbrakk>\n    \\<Longrightarrow> snd ((x @- sconst (any, replicate n False)) !! p) ! m", "qed auto"], ["proof (state)\nthis:\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "}"], ["proof (state)\nthis:\n  ?m4 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! ?m4\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "moreover"], ["proof (state)\nthis:\n  ?m4 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! ?m4\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "have \"sdrop (length x) (smap fst (x @- sconst (any, replicate n False))) = sconst any\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sdrop (length x) (smap fst (x @- sconst (any, replicate n False))) =\n    sconst any", "unfolding sdrop_smap"], ["proof (prove)\ngoal (1 subgoal):\n 1. smap fst (sdrop (length x) (x @- sconst (any, replicate n False))) =\n    sconst any", "by (simp add: sdrop_shift)"], ["proof (state)\nthis:\n  sdrop (length x) (smap fst (x @- sconst (any, replicate n False))) =\n  sconst any\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "ultimately"], ["proof (chain)\npicking this:\n  stream_all (\\<lambda>x. length (snd x) = n)\n   (x @- sconst (any, replicate n False))\n  ?m4 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! ?m4\n  sdrop (length x) (smap fst (x @- sconst (any, replicate n False))) =\n  sconst any", "have enc_dec: \"stream_enc (dec_word ?s, stream_dec n FO ?s) =\n    x @- sconst (any, replicate n False)\""], ["proof (prove)\nusing this:\n  stream_all (\\<lambda>x. length (snd x) = n)\n   (x @- sconst (any, replicate n False))\n  ?m4 \\<in> FO \\<Longrightarrow>\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! ?m4\n  sdrop (length x) (smap fst (x @- sconst (any, replicate n False))) =\n  sconst any\n\ngoal (1 subgoal):\n 1. stream_enc\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n FO (x @- sconst (any, replicate n False))) =\n    x @- sconst (any, replicate n False)", "by (intro stream_enc_dec) auto"], ["proof (state)\nthis:\n  stream_enc\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n FO (x @- sconst (any, replicate n False))) =\n  x @- sconst (any, replicate n False)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "define I where \"I = stream_dec n FO ?s\""], ["proof (state)\nthis:\n  I = stream_dec n FO (x @- sconst (any, replicate n False))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "with assms"], ["proof (chain)\npicking this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  I = stream_dec n FO (x @- sconst (any, replicate n False))", "have \"wf_interp (dec_word ?s) I \\<and>\n   (\\<forall>i \\<in> FO. case I ! i of Inl _ \\<Rightarrow> True | Inr _ \\<Rightarrow> False) \\<and>\n   (\\<forall>i \\<in> SO. case I ! i of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True)\""], ["proof (prove)\nusing this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  I = stream_dec n FO (x @- sconst (any, replicate n False))\n\ngoal (1 subgoal):\n 1. wf_interp (dec_word (x @- sconst (any, replicate n False))) I \\<and>\n    (\\<forall>i\\<in>FO.\n        case I ! i of Inl x \\<Rightarrow> True\n        | Inr x \\<Rightarrow> False) \\<and>\n    (\\<forall>i\\<in>SO.\n        case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)", "unfolding I_def dec_word_def"], ["proof (prove)\nusing this:\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  stream_dec n FO (x @- sconst (any, replicate n False)) =\n  stream_dec n FO (x @- sconst (any, replicate n False))\n\ngoal (1 subgoal):\n 1. wf_interp\n     (cut_same any (smap fst (x @- sconst (any, replicate n False))))\n     (stream_dec n FO (x @- sconst (any, replicate n False))) \\<and>\n    (\\<forall>i\\<in>FO.\n        case stream_dec n FO (x @- sconst (any, replicate n False)) ! i of\n        Inl x \\<Rightarrow> True | Inr x \\<Rightarrow> False) \\<and>\n    (\\<forall>i\\<in>SO.\n        case stream_dec n FO (x @- sconst (any, replicate n False)) ! i of\n        Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)", "by (auto dest: stream_dec_not_Inr stream_dec_not_Inl simp: \\<sigma>_def  max_idx_vars\n      dest!: subsetD[OF set_cut_same[of any \"map fst x\"]] subsetD[OF *]  split: sum.splits)\n      (auto simp: stream_dec_def positions_in_row finite_True_in_row)"], ["proof (state)\nthis:\n  wf_interp (dec_word (x @- sconst (any, replicate n False))) I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "moreover"], ["proof (state)\nthis:\n  wf_interp (dec_word (x @- sconst (any, replicate n False))) I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "have \"length I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length I = n", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (stream_dec n FO (x @- sconst (any, replicate n False))) = n", "by simp"], ["proof (state)\nthis:\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "moreover"], ["proof (state)\nthis:\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "have \"x \\<in> enc (dec_word ?s, I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> enc (dec_word (x @- sconst (any, replicate n False)), I)", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> enc (dec_word (x @- sconst (any, replicate n False)),\n                 stream_dec n FO (x @- sconst (any, replicate n False)))", "by (simp add: enc_dec cut_same_shift_sconst del: stream_enc.simps)"], ["proof (state)\nthis:\n  x \\<in> enc (dec_word (x @- sconst (any, replicate n False)), I)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang n (ENC n FO) \\<Longrightarrow>\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)}\n 2. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "ultimately"], ["proof (chain)\npicking this:\n  wf_interp (dec_word (x @- sconst (any, replicate n False))) I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n  x \\<in> enc (dec_word (x @- sconst (any, replicate n False)), I)", "show \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  wf_interp (dec_word (x @- sconst (any, replicate n False))) I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n  x \\<in> enc (dec_word (x @- sconst (any, replicate n False)), I)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp w I \\<and>\n              (\\<forall>i\\<in>FO.\n                  case I ! i of Inl x \\<Rightarrow> True\n                  | Inr x \\<Rightarrow> False) \\<and>\n              (\\<forall>i\\<in>SO.\n                  case I ! i of Inl x \\<Rightarrow> False\n                  | Inr x \\<Rightarrow> True)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp w I \\<and>\n            (\\<forall>i\\<in>FO.\n                case I ! i of Inl x \\<Rightarrow> True\n                | Inr x \\<Rightarrow> False) \\<and>\n            (\\<forall>i\\<in>SO.\n                case I ! i of Inl x \\<Rightarrow> False\n                | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "assume \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp w I \\<and>\n            (\\<forall>i\\<in>FO.\n                case I ! i of Inl x \\<Rightarrow> True\n                | Inr x \\<Rightarrow> False) \\<and>\n            (\\<forall>i\\<in>SO.\n                case I ! i of Inl x \\<Rightarrow> False\n                | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp w I \\<and>\n            (\\<forall>i\\<in>FO.\n                case I ! i of Inl x \\<Rightarrow> True\n                | Inr x \\<Rightarrow> False) \\<and>\n            (\\<forall>i\\<in>SO.\n                case I ! i of Inl x \\<Rightarrow> False\n                | Inr x \\<Rightarrow> True)}", "obtain w I where I: \"x \\<in> enc (w, I)\" \"wf_interp w I \\<and>\n   (\\<forall>i \\<in> FO. case I ! i of Inl _ \\<Rightarrow> True | Inr _ \\<Rightarrow> False) \\<and>\n   (\\<forall>i \\<in> SO. case I ! i of Inl _ \\<Rightarrow> False | Inr _ \\<Rightarrow> True)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp w I \\<and>\n            (\\<forall>i\\<in>FO.\n                case I ! i of Inl x \\<Rightarrow> True\n                | Inr x \\<Rightarrow> False) \\<and>\n            (\\<forall>i\\<in>SO.\n                case I ! i of Inl x \\<Rightarrow> False\n                | Inr x \\<Rightarrow> True)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp w I \\<and>\n         (\\<forall>i\\<in>FO.\n             case I ! i of Inl x \\<Rightarrow> True\n             | Inr x \\<Rightarrow> False) \\<and>\n         (\\<forall>i\\<in>SO.\n             case I ! i of Inl x \\<Rightarrow> False\n             | Inr x \\<Rightarrow> True);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "{"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "from I(2)"], ["proof (chain)\npicking this:\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)", "have \"(w @- sconst any) !! i \\<in> set \\<Sigma>\""], ["proof (prove)\nusing this:\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. (w @- sconst any) !! i \\<in> set \\<Sigma>", "by (cases \"i < length w\") auto"], ["proof (state)\nthis:\n  (w @- sconst any) !! i \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "}"], ["proof (state)\nthis:\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "note * = this"], ["proof (state)\nthis:\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "from I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n", "have \"x @- sconst (any, replicate (length I) False) = stream_enc (w, I)\" (is \"x @- ?F = ?s\")"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n\ngoal (1 subgoal):\n 1. x @- sconst (any, replicate (length I) False) = stream_enc (w, I)", "by (intro stream_enc_enc[symmetric]) auto"], ["proof (state)\nthis:\n  x @- sconst (any, replicate (length I) False) = stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "with * \\<open>length I = n\\<close>"], ["proof (chain)\npicking this:\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>\n  length I = n\n  x @- sconst (any, replicate (length I) False) = stream_enc (w, I)", "have \"\\<forall>x \\<in> set x. length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>\""], ["proof (prove)\nusing this:\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>\n  length I = n\n  x @- sconst (any, replicate (length I) False) = stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set x. length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>", "by (auto dest!: shift_snth_less[of _ _ ?F, symmetric] simp: in_set_conv_nth)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set x. length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>FO.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>SO.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)} \\<Longrightarrow>\n       x \\<in> lang n (ENC n FO)", "thus \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set x. length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n FO)", "proof (cases \"FO = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "case False"], ["proof (state)\nthis:\n  FO \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "hence nonempty: \"valid_ENC n ` FO \\<noteq> {}\""], ["proof (prove)\nusing this:\n  FO \\<noteq> {}\n\ngoal (1 subgoal):\n 1. valid_ENC n ` FO \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  valid_ENC n ` FO \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "have finite: \"finite (valid_ENC n ` FO)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (valid_ENC n ` FO)", "by (rule finite_imageI[OF finite_subset[OF assms(1)]]) simp"], ["proof (state)\nthis:\n  finite (valid_ENC n ` FO)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "from False assms(1)"], ["proof (chain)\npicking this:\n  FO \\<noteq> {}\n  FO \\<subseteq> {0..<n}", "have \"0 < n\""], ["proof (prove)\nusing this:\n  FO \\<noteq> {}\n  FO \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. 0 < n", "by (cases n) (auto split: dest!: max_idx_vars)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "with wf_rexp_valid_ENC assms"], ["proof (chain)\npicking this:\n  ?n = 0 \\<or> ?p < ?n \\<Longrightarrow> local.wf ?n (valid_ENC ?n ?p)\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  0 < n", "have wf_rexp: \"\\<forall>x \\<in> valid_ENC n ` FO. wf n x\""], ["proof (prove)\nusing this:\n  ?n = 0 \\<or> ?p < ?n \\<Longrightarrow> local.wf ?n (valid_ENC ?n ?p)\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>valid_ENC n ` FO. local.wf n x", "by (auto simp: max_idx_vars)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>valid_ENC n ` FO. local.wf n x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "{"], ["proof (state)\nthis:\n  \\<forall>x\\<in>valid_ENC n ` FO. local.wf n x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "fix r"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "assume \"r \\<in> FO\""], ["proof (state)\nthis:\n  r \\<in> FO\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "with I(2)"], ["proof (chain)\npicking this:\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  r \\<in> FO", "obtain p where p: \"I ! r = Inl p\""], ["proof (prove)\nusing this:\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  r \\<in> FO\n\ngoal (1 subgoal):\n 1. (\\<And>p. I ! r = Inl p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"I ! r\") auto"], ["proof (state)\nthis:\n  I ! r = Inl p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "from \\<open>r \\<in> FO\\<close> assms I(2,3)"], ["proof (chain)\npicking this:\n  r \\<in> FO\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n", "have r: \"r < length I\""], ["proof (prove)\nusing this:\n  r \\<in> FO\n  FO \\<subseteq> {0..<n}\n  SO \\<subseteq> {0..<n} - FO\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n\ngoal (1 subgoal):\n 1. r < length I", "by (auto dest!: max_idx_vars)"], ["proof (state)\nthis:\n  r < length I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "from p I(1,2) r"], ["proof (chain)\npicking this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  r < length I", "have \"p < length x\""], ["proof (prove)\nusing this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  r < length I\n\ngoal (1 subgoal):\n 1. p < length x", "using less_length_cut_same_Inl[of I r p w]"], ["proof (prove)\nusing this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  r < length I\n  \\<lbrakk>\\<forall>x\\<in>set I.\n              case x of Inl a \\<Rightarrow> True\n              | Inr P \\<Rightarrow> finite P;\n   r < length I; I ! r = Inl p\\<rbrakk>\n  \\<Longrightarrow> p < length\n                         (cut_same (any, replicate (length I) False)\n                           (stream_enc (w, I)))\n\ngoal (1 subgoal):\n 1. p < length x", "by auto"], ["proof (state)\nthis:\n  p < length x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "with p I r *"], ["proof (chain)\npicking this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n  r < length I\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>\n  p < length x", "have \"[x ! p] \\<in> lang n (Atom (Arbitrary_Except r True))\""], ["proof (prove)\nusing this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n  r < length I\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>\n  p < length x\n\ngoal (1 subgoal):\n 1. [x ! p] \\<in> lang n (Atom (Arbitrary_Except r True))", "by (subst encD[of x w I]) (auto simp del: lang.simps intro!: enc_atom_lang_Arbitrary_Except_True)"], ["proof (state)\nthis:\n  [x ! p] \\<in> lang n (Atom (Arbitrary_Except r True))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "moreover"], ["proof (state)\nthis:\n  [x ! p] \\<in> lang n (Atom (Arbitrary_Except r True))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "from p I r *"], ["proof (chain)\npicking this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n  r < length I\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>", "have \"take p x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\""], ["proof (prove)\nusing this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n  r < length I\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. take p x \\<in> star (lang n (Atom (Arbitrary_Except r False)))", "by (subst encD[of x]) (auto  simp del: lang.simps simp: in_set_conv_nth intro!: Ball_starI enc_atom_lang_Arbitrary_Except_False)"], ["proof (state)\nthis:\n  take p x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "moreover"], ["proof (state)\nthis:\n  take p x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "from p I r *"], ["proof (chain)\npicking this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n  r < length I\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>", "have \"drop (Suc p) x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\""], ["proof (prove)\nusing this:\n  I ! r = Inl p\n  x \\<in> enc (w, I)\n  wf_interp w I \\<and>\n  (\\<forall>i\\<in>FO.\n      case I ! i of Inl x \\<Rightarrow> True\n      | Inr x \\<Rightarrow> False) \\<and>\n  (\\<forall>i\\<in>SO.\n      case I ! i of Inl x \\<Rightarrow> False | Inr x \\<Rightarrow> True)\n  length I = n\n  r < length I\n  (w @- sconst any) !! ?i4 \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. drop (Suc p) x \\<in> star (lang n (Atom (Arbitrary_Except r False)))", "by (subst encD[of x]) (auto simp: in_set_conv_nth simp del: lang.simps snth.simps intro!: Ball_starI enc_atom_lang_Arbitrary_Except_False)"], ["proof (state)\nthis:\n  drop (Suc p) x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "ultimately"], ["proof (chain)\npicking this:\n  [x ! p] \\<in> lang n (Atom (Arbitrary_Except r True))\n  take p x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  drop (Suc p) x \\<in> star (lang n (Atom (Arbitrary_Except r False)))", "have \"take p x @ [x ! p] @ drop (p + 1) x \\<in> lang n (valid_ENC n r)\""], ["proof (prove)\nusing this:\n  [x ! p] \\<in> lang n (Atom (Arbitrary_Except r True))\n  take p x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  drop (Suc p) x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n\ngoal (1 subgoal):\n 1. take p x @ [x ! p] @ drop (p + 1) x \\<in> lang n (valid_ENC n r)", "using \\<open>0 < n\\<close>"], ["proof (prove)\nusing this:\n  [x ! p] \\<in> lang n (Atom (Arbitrary_Except r True))\n  take p x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  drop (Suc p) x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  0 < n\n\ngoal (1 subgoal):\n 1. take p x @ [x ! p] @ drop (p + 1) x \\<in> lang n (valid_ENC n r)", "unfolding valid_ENC_def"], ["proof (prove)\nusing this:\n  [x ! p] \\<in> lang n (Atom (Arbitrary_Except r True))\n  take p x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  drop (Suc p) x \\<in> star (lang n (Atom (Arbitrary_Except r False)))\n  0 < n\n\ngoal (1 subgoal):\n 1. take p x @ [x ! p] @ drop (p + 1) x\n    \\<in> lang n\n           (if n = 0 then Full\n            else TIMES\n                  [Star (Atom (Arbitrary_Except r False)),\n                   Atom (Arbitrary_Except r True),\n                   Star (Atom (Arbitrary_Except r False))])", "by (auto simp del: append.simps)"], ["proof (state)\nthis:\n  take p x @ [x ! p] @ drop (p + 1) x \\<in> lang n (valid_ENC n r)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "hence \"x \\<in> lang n (valid_ENC n r)\""], ["proof (prove)\nusing this:\n  take p x @ [x ! p] @ drop (p + 1) x \\<in> lang n (valid_ENC n r)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (valid_ENC n r)", "using id_take_nth_drop[OF \\<open>p < length x\\<close>]"], ["proof (prove)\nusing this:\n  take p x @ [x ! p] @ drop (p + 1) x \\<in> lang n (valid_ENC n r)\n  x = take p x @ x ! p # drop (Suc p) x\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (valid_ENC n r)", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang n (valid_ENC n r)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "}"], ["proof (state)\nthis:\n  ?r4 \\<in> FO \\<Longrightarrow> x \\<in> lang n (valid_ENC n ?r4)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)\n 2. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "with False lang_flatten_INTERSECT[OF finite nonempty wf_rexp]"], ["proof (chain)\npicking this:\n  FO \\<noteq> {}\n  (?w \\<in> lang n (INTERSECT (sorted_list_of_set (valid_ENC n ` FO)))) =\n  (\\<forall>r\\<in>valid_ENC n ` FO. ?w \\<in> lang n r)\n  ?r4 \\<in> FO \\<Longrightarrow> x \\<in> lang n (valid_ENC n ?r4)", "show ?thesis"], ["proof (prove)\nusing this:\n  FO \\<noteq> {}\n  (?w \\<in> lang n (INTERSECT (sorted_list_of_set (valid_ENC n ` FO)))) =\n  (\\<forall>r\\<in>valid_ENC n ` FO. ?w \\<in> lang n r)\n  ?r4 \\<in> FO \\<Longrightarrow> x \\<in> lang n (valid_ENC n ?r4)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n FO)", "by (auto simp: ENC_def)"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n FO)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set x.\n                length (snd x) = n \\<and> fst x \\<in> set \\<Sigma>;\n     FO = {}\\<rbrakk>\n    \\<Longrightarrow> x \\<in> lang n (ENC n FO)", "qed (simp add: ENC_def, auto simp: \\<sigma>_def set_n_lists image_iff)"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n FO)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang_ENC_formula:\n  assumes \"wf_formula n \\<phi>\"\n  shows \"lang n (ENC n (FOV \\<phi>)) = \\<Union>{enc (w, I) | w I . length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (ENC n (FOV \\<phi>)) =\n    \\<Union>\n     {enc (w, I) |w I.\n      length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang n (ENC n (FOV \\<phi>)) =\n    \\<Union>\n     {enc (w, I) |w I.\n      length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "from assms max_idx_vars"], ["proof (chain)\npicking this:\n  wf_formula n \\<phi>\n  pre_wf_formula ?n ?\\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV ?\\<phi> \\<union> SOV ?\\<phi>. p < ?n", "have *: \"FOV \\<phi> \\<subseteq> {0 ..< n}\" \"SOV \\<phi> \\<subseteq> {0 ..< n} - FOV \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n \\<phi>\n  pre_wf_formula ?n ?\\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV ?\\<phi> \\<union> SOV ?\\<phi>. p < ?n\n\ngoal (1 subgoal):\n 1. FOV \\<phi> \\<subseteq> {0..<n} &&&\n    SOV \\<phi> \\<subseteq> {0..<n} - FOV \\<phi>", "by auto"], ["proof (state)\nthis:\n  FOV \\<phi> \\<subseteq> {0..<n}\n  SOV \\<phi> \\<subseteq> {0..<n} - FOV \\<phi>\n\ngoal (1 subgoal):\n 1. lang n (ENC n (FOV \\<phi>)) =\n    \\<Union>\n     {enc (w, I) |w I.\n      length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (ENC n (FOV \\<phi>)) =\n    \\<Union>\n     {enc (w, I) |w I.\n      length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "unfolding lang_ENC[OF *]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {enc (w, I) |w I.\n      length I = n \\<and>\n      wf_interp w I \\<and>\n      (\\<forall>i\\<in>FOV \\<phi>.\n          case I ! i of Inl x \\<Rightarrow> True\n          | Inr x \\<Rightarrow> False) \\<and>\n      (\\<forall>i\\<in>SOV \\<phi>.\n          case I ! i of Inl x \\<Rightarrow> False\n          | Inr x \\<Rightarrow> True)} =\n    \\<Union>\n     {enc (w, I) |w I.\n      length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}", "by simp"], ["proof (state)\nthis:\n  lang n (ENC n (FOV \\<phi>)) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = n \\<and> wf_interp_for_formula (w, I) \\<phi>}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Welldefinedness of enc wrt. Models\\<close>"], ["", "lemma wf_interp_for_formula_FExists: \n \"\\<lbrakk>wf_formula (length I) (FExists \\<phi>)\\<rbrakk>\\<Longrightarrow>\n  wf_interp_for_formula (w, I) (FExists \\<phi>) \\<longleftrightarrow> (\\<forall>p. wf_interp_for_formula (w, Inl p # I) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula (length I) (FExists \\<phi>) \\<Longrightarrow>\n    wf_interp_for_formula (w, I) (FExists \\<phi>) =\n    (\\<forall>p. wf_interp_for_formula (w, Inl p # I) \\<phi>)", "by (auto simp: nth_Cons' split: if_split_asm)"], ["", "lemma wf_interp_for_formula_any_Inl: \"wf_interp_for_formula (w, Inl p # I) \\<phi> \\<Longrightarrow>\n  \\<forall>p. wf_interp_for_formula (w, Inl p # I) \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inl p # I) \\<phi> \\<Longrightarrow>\n    \\<forall>p. wf_interp_for_formula (w, Inl p # I) \\<phi>", "by (auto simp: nth_Cons' split: if_split_asm)"], ["", "lemma wf_interp_for_formula_FEXISTS: \n \"\\<lbrakk>wf_formula (length I) (FEXISTS \\<phi>)\\<rbrakk>\\<Longrightarrow>\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>) \\<longleftrightarrow> (\\<forall>P. finite P \\<longrightarrow> wf_interp_for_formula (w, Inr P # I) \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula (length I) (FEXISTS \\<phi>) \\<Longrightarrow>\n    wf_interp_for_formula (w, I) (FEXISTS \\<phi>) =\n    (\\<forall>P.\n        finite P \\<longrightarrow>\n        wf_interp_for_formula (w, Inr P # I) \\<phi>)", "by (auto simp: nth_Cons' split: if_split_asm)"], ["", "lemma wf_interp_for_formula_any_Inr: \"wf_interp_for_formula (w, Inr P # I) \\<phi> \\<Longrightarrow>\n  \\<forall>P. finite P \\<longrightarrow> wf_interp_for_formula (w, Inr P # I) \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inr P # I) \\<phi> \\<Longrightarrow>\n    \\<forall>P.\n       finite P \\<longrightarrow>\n       wf_interp_for_formula (w, Inr P # I) \\<phi>", "by (auto simp: nth_Cons' split: if_split_asm)"], ["", "lemma wf_interp_for_formula_FOr:\n  \"wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2) =\n     (wf_interp_for_formula (w, I) \\<phi>1 \\<and> wf_interp_for_formula (w, I) \\<phi>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2) =\n    (wf_interp_for_formula (w, I) \\<phi>1 \\<and>\n     wf_interp_for_formula (w, I) \\<phi>2)", "by auto"], ["", "lemma wf_interp_for_formula_FAnd:\n  \"wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2) =\n     (wf_interp_for_formula (w, I) \\<phi>1 \\<and> wf_interp_for_formula (w, I) \\<phi>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2) =\n    (wf_interp_for_formula (w, I) \\<phi>1 \\<and>\n     wf_interp_for_formula (w, I) \\<phi>2)", "by auto"], ["", "lemma enc_wf_interp: \n \"\\<lbrakk>wf_formula (length I) \\<phi>; wf_interp_for_formula (w, I) \\<phi>; x \\<in> enc (w, I)\\<rbrakk> \\<Longrightarrow>\n  wf_interp_for_formula (dec_word (x @- sconst (any, replicate (length I) False)),\n    stream_dec (length I) (FOV \\<phi>) (x @- sconst (any, replicate (length I) False))) \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_formula (length I) \\<phi>;\n     wf_interp_for_formula (w, I) \\<phi>; x \\<in> enc (w, I)\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula\n                       (dec_word\n                         (x @- sconst (any, replicate (length I) False)),\n                        stream_dec (length I) (FOV \\<phi>)\n                         (x @- sconst (any, replicate (length I) False)))\n                       \\<phi>", "using\n    stream_dec_Inl[of _ \"FOV \\<phi>\" \"length I\" \"stream_enc (w, I)\", OF _ bspec[OF max_idx_vars]]\n    stream_dec_Inr[of _ \"FOV \\<phi>\" \"length I\" \"stream_enc (w, I)\", OF _ bspec[OF max_idx_vars]]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<in> FOV \\<phi>; pre_wf_formula (length I) ?\\<phi>2;\n   ?i \\<in> FOV ?\\<phi>2 \\<union> SOV ?\\<phi>2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p.\n                       stream_dec (length I) (FOV \\<phi>)\n                        (stream_enc (w, I)) !\n                       ?i =\n                       Inl p\n  \\<lbrakk>?i \\<notin> FOV \\<phi>; pre_wf_formula (length I) ?\\<phi>2;\n   ?i \\<in> FOV ?\\<phi>2 \\<union> SOV ?\\<phi>2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P.\n                       stream_dec (length I) (FOV \\<phi>)\n                        (stream_enc (w, I)) !\n                       ?i =\n                       Inr P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_formula (length I) \\<phi>;\n     wf_interp_for_formula (w, I) \\<phi>; x \\<in> enc (w, I)\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula\n                       (dec_word\n                         (x @- sconst (any, replicate (length I) False)),\n                        stream_dec (length I) (FOV \\<phi>)\n                         (x @- sconst (any, replicate (length I) False)))\n                       \\<phi>", "by (auto split: sum.splits intro: Inr_dec_finite[OF finite_True_in_row] simp: max_idx_vars dec_word_def\n    dest!: stream_dec_not_Inl stream_dec_not_Inr subsetD[OF set_cut_same] simp del: stream_enc.simps)\n    (auto simp: cut_same_def in_set_zip smap2_alt shift_snth)"], ["", "lemma enc_atom_welldef: \"\\<forall>x a. enc_atom I x a = enc_atom I' x a \\<Longrightarrow> m < length I \\<Longrightarrow>\n  (case (I ! m, I' ! m) of (Inl p, Inl q) \\<Rightarrow> p = q | (Inr P, Inr Q) \\<Rightarrow> P = Q | _ \\<Rightarrow> True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x a. enc_atom I x a = enc_atom I' x a;\n     m < length I\\<rbrakk>\n    \\<Longrightarrow> case (I ! m, I' ! m) of\n                      (Inl p, Inl q) \\<Rightarrow> p = q\n                      | (Inl p, Inr ba) \\<Rightarrow> True\n                      | (Inr P, Inl a) \\<Rightarrow> True\n                      | (Inr P, Inr Q) \\<Rightarrow> P = Q", "proof (induct \"length I\" arbitrary: I I' m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I I' m.\n       \\<lbrakk>0 = length I;\n        \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x\n 2. \\<And>x I I' m.\n       \\<lbrakk>\\<And>I I' m.\n                   \\<lbrakk>x = length I;\n                    \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n                    m < length I\\<rbrakk>\n                   \\<Longrightarrow> case (I ! m, I' ! m) of\n                                     (Inl p, Inl x) \\<Rightarrow> p = x\n                                     | (Inl p, Inr ba) \\<Rightarrow> True\n                                     | (Inr P, Inl a) \\<Rightarrow> True\n                                     | (Inr P, Inr x) \\<Rightarrow> P = x;\n        Suc x = length I; \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x", "case (Suc n I I')"], ["proof (state)\nthis:\n  \\<lbrakk>n = length ?I2;\n   \\<forall>x a. enc_atom ?I2 x a = enc_atom ?I'2 x a;\n   ?m2 < length ?I2\\<rbrakk>\n  \\<Longrightarrow> case (?I2 ! ?m2, ?I'2 ! ?m2) of\n                    (Inl p, Inl x) \\<Rightarrow> p = x\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr x) \\<Rightarrow> P = x\n  Suc n = length I\n  \\<forall>x a. enc_atom I x a = enc_atom I' x a\n  m < length I\n\ngoal (2 subgoals):\n 1. \\<And>I I' m.\n       \\<lbrakk>0 = length I;\n        \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x\n 2. \\<And>x I I' m.\n       \\<lbrakk>\\<And>I I' m.\n                   \\<lbrakk>x = length I;\n                    \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n                    m < length I\\<rbrakk>\n                   \\<Longrightarrow> case (I ! m, I' ! m) of\n                                     (Inl p, Inl x) \\<Rightarrow> p = x\n                                     | (Inl p, Inr ba) \\<Rightarrow> True\n                                     | (Inr P, Inl a) \\<Rightarrow> True\n                                     | (Inr P, Inr x) \\<Rightarrow> P = x;\n        Suc x = length I; \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>n = length ?I2;\n   \\<forall>x a. enc_atom ?I2 x a = enc_atom ?I'2 x a;\n   ?m2 < length ?I2\\<rbrakk>\n  \\<Longrightarrow> case (?I2 ! ?m2, ?I'2 ! ?m2) of\n                    (Inl p, Inl x) \\<Rightarrow> p = x\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr x) \\<Rightarrow> P = x\n  Suc n = length I\n  \\<forall>x a. enc_atom I x a = enc_atom I' x a\n  m < length I", "obtain x xs x' xs' where *: \"I = x # xs\" \"I' = x' # xs'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n = length ?I2;\n   \\<forall>x a. enc_atom ?I2 x a = enc_atom ?I'2 x a;\n   ?m2 < length ?I2\\<rbrakk>\n  \\<Longrightarrow> case (?I2 ! ?m2, ?I'2 ! ?m2) of\n                    (Inl p, Inl x) \\<Rightarrow> p = x\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr x) \\<Rightarrow> P = x\n  Suc n = length I\n  \\<forall>x a. enc_atom I x a = enc_atom I' x a\n  m < length I\n\ngoal (1 subgoal):\n 1. (\\<And>x xs x' xs'.\n        \\<lbrakk>I = x # xs; I' = x' # xs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: Suc_length_conv map_eq_Cons_conv)"], ["proof (state)\nthis:\n  I = x # xs\n  I' = x' # xs'\n\ngoal (2 subgoals):\n 1. \\<And>I I' m.\n       \\<lbrakk>0 = length I;\n        \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x\n 2. \\<And>x I I' m.\n       \\<lbrakk>\\<And>I I' m.\n                   \\<lbrakk>x = length I;\n                    \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n                    m < length I\\<rbrakk>\n                   \\<Longrightarrow> case (I ! m, I' ! m) of\n                                     (Inl p, Inl x) \\<Rightarrow> p = x\n                                     | (Inl p, Inr ba) \\<Rightarrow> True\n                                     | (Inr P, Inl a) \\<Rightarrow> True\n                                     | (Inr P, Inr x) \\<Rightarrow> P = x;\n        Suc x = length I; \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x", "with Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>n = length ?I2;\n   \\<forall>x a. enc_atom ?I2 x a = enc_atom ?I'2 x a;\n   ?m2 < length ?I2\\<rbrakk>\n  \\<Longrightarrow> case (?I2 ! ?m2, ?I'2 ! ?m2) of\n                    (Inl p, Inl x) \\<Rightarrow> p = x\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr x) \\<Rightarrow> P = x\n  Suc n = length I\n  \\<forall>x a. enc_atom I x a = enc_atom I' x a\n  m < length I\n  I = x # xs\n  I' = x' # xs'", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = length ?I2;\n   \\<forall>x a. enc_atom ?I2 x a = enc_atom ?I'2 x a;\n   ?m2 < length ?I2\\<rbrakk>\n  \\<Longrightarrow> case (?I2 ! ?m2, ?I'2 ! ?m2) of\n                    (Inl p, Inl x) \\<Rightarrow> p = x\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr x) \\<Rightarrow> P = x\n  Suc n = length I\n  \\<forall>x a. enc_atom I x a = enc_atom I' x a\n  m < length I\n  I = x # xs\n  I' = x' # xs'\n\ngoal (1 subgoal):\n 1. case (I ! m, I' ! m) of (Inl p, Inl x) \\<Rightarrow> p = x\n    | (Inl p, Inr ba) \\<Rightarrow> True | (Inr P, Inl a) \\<Rightarrow> True\n    | (Inr P, Inr x) \\<Rightarrow> P = x", "proof (cases m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>I I' m.\n                \\<lbrakk>n = length I;\n                 \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n                 m < length I\\<rbrakk>\n                \\<Longrightarrow> case (I ! m, I' ! m) of\n                                  (Inl p, Inl x) \\<Rightarrow> p = x\n                                  | (Inl p, Inr ba) \\<Rightarrow> True\n                                  | (Inr P, Inl a) \\<Rightarrow> True\n                                  | (Inr P, Inr x) \\<Rightarrow> P = x;\n     Suc n = length I; \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n     m < length I; I = x # xs; I' = x' # xs'; m = 0\\<rbrakk>\n    \\<Longrightarrow> case (I ! m, I' ! m) of\n                      (Inl p, Inl x) \\<Rightarrow> p = x\n                      | (Inl p, Inr ba) \\<Rightarrow> True\n                      | (Inr P, Inl a) \\<Rightarrow> True\n                      | (Inr P, Inr x) \\<Rightarrow> P = x\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>I I' m.\n                   \\<lbrakk>n = length I;\n                    \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n                    m < length I\\<rbrakk>\n                   \\<Longrightarrow> case (I ! m, I' ! m) of\n                                     (Inl p, Inl x) \\<Rightarrow> p = x\n                                     | (Inl p, Inr ba) \\<Rightarrow> True\n                                     | (Inr P, Inl a) \\<Rightarrow> True\n                                     | (Inr P, Inr x) \\<Rightarrow> P = x;\n        Suc n = length I; \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I; I = x # xs; I' = x' # xs'; m = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x", "case 0"], ["proof (state)\nthis:\n  m = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>I I' m.\n                \\<lbrakk>n = length I;\n                 \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n                 m < length I\\<rbrakk>\n                \\<Longrightarrow> case (I ! m, I' ! m) of\n                                  (Inl p, Inl x) \\<Rightarrow> p = x\n                                  | (Inl p, Inr ba) \\<Rightarrow> True\n                                  | (Inr P, Inl a) \\<Rightarrow> True\n                                  | (Inr P, Inr x) \\<Rightarrow> P = x;\n     Suc n = length I; \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n     m < length I; I = x # xs; I' = x' # xs'; m = 0\\<rbrakk>\n    \\<Longrightarrow> case (I ! m, I' ! m) of\n                      (Inl p, Inl x) \\<Rightarrow> p = x\n                      | (Inl p, Inr ba) \\<Rightarrow> True\n                      | (Inr P, Inl a) \\<Rightarrow> True\n                      | (Inr P, Inr x) \\<Rightarrow> P = x\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>I I' m.\n                   \\<lbrakk>n = length I;\n                    \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n                    m < length I\\<rbrakk>\n                   \\<Longrightarrow> case (I ! m, I' ! m) of\n                                     (Inl p, Inl x) \\<Rightarrow> p = x\n                                     | (Inl p, Inr ba) \\<Rightarrow> True\n                                     | (Inr P, Inl a) \\<Rightarrow> True\n                                     | (Inr P, Inr x) \\<Rightarrow> P = x;\n        Suc n = length I; \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I; I = x # xs; I' = x' # xs'; m = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x", "thus ?thesis"], ["proof (prove)\nusing this:\n  m = 0\n\ngoal (1 subgoal):\n 1. case (I ! m, I' ! m) of (Inl p, Inl x) \\<Rightarrow> p = x\n    | (Inl p, Inr ba) \\<Rightarrow> True | (Inr P, Inl a) \\<Rightarrow> True\n    | (Inr P, Inr x) \\<Rightarrow> P = x", "using Suc(3)"], ["proof (prove)\nusing this:\n  m = 0\n  \\<forall>x a. enc_atom I x a = enc_atom I' x a\n\ngoal (1 subgoal):\n 1. case (I ! m, I' ! m) of (Inl p, Inl x) \\<Rightarrow> p = x\n    | (Inl p, Inr ba) \\<Rightarrow> True | (Inr P, Inl a) \\<Rightarrow> True\n    | (Inr P, Inr x) \\<Rightarrow> P = x", "unfolding *"], ["proof (prove)\nusing this:\n  m = 0\n  \\<forall>xa a. enc_atom (x # xs) xa a = enc_atom (x' # xs') xa a\n\ngoal (1 subgoal):\n 1. case ((x # xs) ! m, (x' # xs') ! m) of\n    (Inl p, Inl x) \\<Rightarrow> p = x | (Inl p, Inr ba) \\<Rightarrow> True\n    | (Inr P, Inl a) \\<Rightarrow> True | (Inr P, Inr x) \\<Rightarrow> P = x", "by (cases x x' rule: sum.exhaust[case_product sum.exhaust]) auto"], ["proof (state)\nthis:\n  case (I ! m, I' ! m) of (Inl p, Inl x) \\<Rightarrow> p = x\n  | (Inl p, Inr ba) \\<Rightarrow> True | (Inr P, Inl a) \\<Rightarrow> True\n  | (Inr P, Inr x) \\<Rightarrow> P = x\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<And>I I' m.\n                   \\<lbrakk>n = length I;\n                    \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n                    m < length I\\<rbrakk>\n                   \\<Longrightarrow> case (I ! m, I' ! m) of\n                                     (Inl p, Inl x) \\<Rightarrow> p = x\n                                     | (Inl p, Inr ba) \\<Rightarrow> True\n                                     | (Inr P, Inl a) \\<Rightarrow> True\n                                     | (Inr P, Inr x) \\<Rightarrow> P = x;\n        Suc n = length I; \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I; I = x # xs; I' = x' # xs'; m = Suc nat\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x", "qed auto"], ["proof (state)\nthis:\n  case (I ! m, I' ! m) of (Inl p, Inl x) \\<Rightarrow> p = x\n  | (Inl p, Inr ba) \\<Rightarrow> True | (Inr P, Inl a) \\<Rightarrow> True\n  | (Inr P, Inr x) \\<Rightarrow> P = x\n\ngoal (1 subgoal):\n 1. \\<And>I I' m.\n       \\<lbrakk>0 = length I;\n        \\<forall>x a. enc_atom I x a = enc_atom I' x a;\n        m < length I\\<rbrakk>\n       \\<Longrightarrow> case (I ! m, I' ! m) of\n                         (Inl p, Inl x) \\<Rightarrow> p = x\n                         | (Inl p, Inr ba) \\<Rightarrow> True\n                         | (Inr P, Inl a) \\<Rightarrow> True\n                         | (Inr P, Inr x) \\<Rightarrow> P = x", "qed simp"], ["", "lemma stream_enc_welldef: \"\\<lbrakk>stream_enc (w, I) = stream_enc (w', I'); wf_formula (length I) \\<phi>;\n  wf_interp_for_formula (w, I) \\<phi>; wf_interp_for_formula (w', I') \\<phi>\\<rbrakk> \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi> \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) \\<phi>; wf_interp_for_formula (w, I) \\<phi>;\n     wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                      ((w', I') \\<Turnstile> \\<phi>)", "proof (induction \\<phi> arbitrary: w w' I I')"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FQ a m)"], ["proof (state)\nthis:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n  wf_interp_for_formula (w', I') (FQ a m)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FQ x1 x2);\n        wf_interp_for_formula (w, I) (FQ x1 x2);\n        wf_interp_for_formula (w', I') (FQ x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FQ x1 x2) =\n                         ((w', I') \\<Turnstile> FQ x1 x2)\n 2. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 3. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 4. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 8. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "thus ?case"], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n  wf_interp_for_formula (w', I') (FQ a m)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FQ a m) = ((w', I') \\<Turnstile> FQ a m)", "using enc_atom_welldef[of I I' m]"], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n  wf_interp_for_formula (w', I') (FQ a m)\n  \\<lbrakk>\\<forall>x a. enc_atom I x a = enc_atom I' x a;\n   m < length I\\<rbrakk>\n  \\<Longrightarrow> case (I ! m, I' ! m) of\n                    (Inl p, Inl q) \\<Rightarrow> p = q\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr Q) \\<Rightarrow> P = Q\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FQ a m) = ((w', I') \\<Turnstile> FQ a m)", "by (simp split: sum.splits add: smap2_alt shift_snth)\n      (metis snth_siterate[of id, simplified id_funpow id_apply])"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FQ a m) = ((w', I') \\<Turnstile> FQ a m)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FLess m1 m2)"], ["proof (state)\nthis:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FLess m1 m2)\n  wf_interp_for_formula (w, I) (FLess m1 m2)\n  wf_interp_for_formula (w', I') (FLess m1 m2)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FLess x1 x2);\n        wf_interp_for_formula (w, I) (FLess x1 x2);\n        wf_interp_for_formula (w', I') (FLess x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FLess x1 x2) =\n                         ((w', I') \\<Turnstile> FLess x1 x2)\n 2. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 4. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 7. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "thus ?case"], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FLess m1 m2)\n  wf_interp_for_formula (w, I) (FLess m1 m2)\n  wf_interp_for_formula (w', I') (FLess m1 m2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FLess m1 m2) = ((w', I') \\<Turnstile> FLess m1 m2)", "using enc_atom_welldef[of I I' m1] enc_atom_welldef[of I I' m2]"], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FLess m1 m2)\n  wf_interp_for_formula (w, I) (FLess m1 m2)\n  wf_interp_for_formula (w', I') (FLess m1 m2)\n  \\<lbrakk>\\<forall>x a. enc_atom I x a = enc_atom I' x a;\n   m1 < length I\\<rbrakk>\n  \\<Longrightarrow> case (I ! m1, I' ! m1) of\n                    (Inl p, Inl q) \\<Rightarrow> p = q\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr Q) \\<Rightarrow> P = Q\n  \\<lbrakk>\\<forall>x a. enc_atom I x a = enc_atom I' x a;\n   m2 < length I\\<rbrakk>\n  \\<Longrightarrow> case (I ! m2, I' ! m2) of\n                    (Inl p, Inl q) \\<Rightarrow> p = q\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr Q) \\<Rightarrow> P = Q\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FLess m1 m2) = ((w', I') \\<Turnstile> FLess m1 m2)", "by (auto split: sum.splits simp add: smap2_alt)"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FLess m1 m2) = ((w', I') \\<Turnstile> FLess m1 m2)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FIn m M)"], ["proof (state)\nthis:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n  wf_interp_for_formula (w', I') (FIn m M)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 w w' I I'.\n       \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FIn x1 x2);\n        wf_interp_for_formula (w, I) (FIn x1 x2);\n        wf_interp_for_formula (w', I') (FIn x1 x2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FIn x1 x2) =\n                         ((w', I') \\<Turnstile> FIn x1 x2)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 3. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 5. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 6. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "thus ?case"], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n  wf_interp_for_formula (w', I') (FIn m M)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FIn m M) = ((w', I') \\<Turnstile> FIn m M)", "using enc_atom_welldef[of I I' m] enc_atom_welldef[of I I' M]"], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n  wf_interp_for_formula (w', I') (FIn m M)\n  \\<lbrakk>\\<forall>x a. enc_atom I x a = enc_atom I' x a;\n   m < length I\\<rbrakk>\n  \\<Longrightarrow> case (I ! m, I' ! m) of\n                    (Inl p, Inl q) \\<Rightarrow> p = q\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr Q) \\<Rightarrow> P = Q\n  \\<lbrakk>\\<forall>x a. enc_atom I x a = enc_atom I' x a;\n   M < length I\\<rbrakk>\n  \\<Longrightarrow> case (I ! M, I' ! M) of\n                    (Inl p, Inl q) \\<Rightarrow> p = q\n                    | (Inl p, Inr ba) \\<Rightarrow> True\n                    | (Inr P, Inl a) \\<Rightarrow> True\n                    | (Inr P, Inr Q) \\<Rightarrow> P = Q\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FIn m M) = ((w', I') \\<Turnstile> FIn m M)", "by (auto split: sum.splits simp add: smap2_alt)"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FIn m M) = ((w', I') \\<Turnstile> FIn m M)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 5. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 5. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FOr \\<phi>1 \\<phi>2)"], ["proof (state)\nthis:\n  \\<lbrakk>stream_enc (?w2, ?I2) = stream_enc (?w'2, ?I'2);\n   wf_formula (length ?I2) \\<phi>1;\n   wf_interp_for_formula (?w2, ?I2) \\<phi>1;\n   wf_interp_for_formula (?w'2, ?I'2) \\<phi>1\\<rbrakk>\n  \\<Longrightarrow> ((?w2, ?I2) \\<Turnstile> \\<phi>1) =\n                    ((?w'2, ?I'2) \\<Turnstile> \\<phi>1)\n  \\<lbrakk>stream_enc (?w2, ?I2) = stream_enc (?w'2, ?I'2);\n   wf_formula (length ?I2) \\<phi>2;\n   wf_interp_for_formula (?w2, ?I2) \\<phi>2;\n   wf_interp_for_formula (?w'2, ?I'2) \\<phi>2\\<rbrakk>\n  \\<Longrightarrow> ((?w2, ?I2) \\<Turnstile> \\<phi>2) =\n                    ((?w'2, ?I'2) \\<Turnstile> \\<phi>2)\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 4. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 5. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n    ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)", "unfolding satisfies.simps(5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>1 \\<or> (w, I) \\<Turnstile> \\<phi>2) =\n    ((w', I') \\<Turnstile> \\<phi>1 \\<or> (w', I') \\<Turnstile> \\<phi>2)", "proof (intro disj_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)\n 2. \\<not> (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "from FOr(3-6)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)", "show \"(w, I) \\<Turnstile> \\<phi>1 \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>1\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)", "by (intro FOr(1)) auto"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)\n\ngoal (1 subgoal):\n 1. \\<not> (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "from FOr(3-6)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)", "show \"(w, I) \\<Turnstile> \\<phi>2 \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>2\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FOr \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FOr \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "by (intro FOr(2)) auto"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FOr \\<phi>1 \\<phi>2) =\n  ((w', I') \\<Turnstile> FOr \\<phi>1 \\<phi>2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 4. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 4. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FAnd \\<phi>1 \\<phi>2)"], ["proof (state)\nthis:\n  \\<lbrakk>stream_enc (?w2, ?I2) = stream_enc (?w'2, ?I'2);\n   wf_formula (length ?I2) \\<phi>1;\n   wf_interp_for_formula (?w2, ?I2) \\<phi>1;\n   wf_interp_for_formula (?w'2, ?I'2) \\<phi>1\\<rbrakk>\n  \\<Longrightarrow> ((?w2, ?I2) \\<Turnstile> \\<phi>1) =\n                    ((?w'2, ?I'2) \\<Turnstile> \\<phi>1)\n  \\<lbrakk>stream_enc (?w2, ?I2) = stream_enc (?w'2, ?I'2);\n   wf_formula (length ?I2) \\<phi>2;\n   wf_interp_for_formula (?w2, ?I2) \\<phi>2;\n   wf_interp_for_formula (?w'2, ?I'2) \\<phi>2\\<rbrakk>\n  \\<Longrightarrow> ((?w2, ?I2) \\<Turnstile> \\<phi>2) =\n                    ((?w'2, ?I'2) \\<Turnstile> \\<phi>2)\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi>1 \\<phi>2 w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>1;\n                    wf_interp_for_formula (w, I) \\<phi>1;\n                    wf_interp_for_formula (w', I') \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>1) =\n                                     ((w', I') \\<Turnstile> \\<phi>1);\n        \\<And>w w' I I'.\n           \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n            wf_formula (length I) \\<phi>2;\n            wf_interp_for_formula (w, I) \\<phi>2;\n            wf_interp_for_formula (w', I') \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>2) =\n                             ((w', I') \\<Turnstile> \\<phi>2);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2);\n        wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n                         ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 4. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n    ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)", "unfolding satisfies.simps(6)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>1 \\<and> (w, I) \\<Turnstile> \\<phi>2) =\n    ((w', I') \\<Turnstile> \\<phi>1 \\<and> (w', I') \\<Turnstile> \\<phi>2)", "proof (intro conj_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)\n 2. (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "from FAnd(3-6)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)", "show \"(w, I) \\<Turnstile> \\<phi>1 \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>1\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)", "by (intro FAnd(1)) auto"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> \\<phi>1) = ((w', I') \\<Turnstile> \\<phi>1)\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> \\<phi>1 \\<Longrightarrow>\n    ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "from FAnd(3-6)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)", "show \"(w, I) \\<Turnstile> \\<phi>2 \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>2\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w, I) (FAnd \\<phi>1 \\<phi>2)\n  wf_interp_for_formula (w', I') (FAnd \\<phi>1 \\<phi>2)\n\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)", "by (intro FAnd(2)) auto"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> \\<phi>2) = ((w', I') \\<Turnstile> \\<phi>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FAnd \\<phi>1 \\<phi>2) =\n  ((w', I') \\<Turnstile> FAnd \\<phi>1 \\<phi>2)\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FExists \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>stream_enc (?w2, ?I2) = stream_enc (?w'2, ?I'2);\n   wf_formula (length ?I2) \\<phi>; wf_interp_for_formula (?w2, ?I2) \\<phi>;\n   wf_interp_for_formula (?w'2, ?I'2) \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((?w2, ?I2) \\<Turnstile> \\<phi>) =\n                    ((?w'2, ?I'2) \\<Turnstile> \\<phi>)\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "hence length: \"length I' = length I\""], ["proof (prove)\nusing this:\n  \\<lbrakk>stream_enc (?w2, ?I2) = stream_enc (?w'2, ?I'2);\n   wf_formula (length ?I2) \\<phi>; wf_interp_for_formula (?w2, ?I2) \\<phi>;\n   wf_interp_for_formula (?w'2, ?I'2) \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((?w2, ?I2) \\<Turnstile> \\<phi>) =\n                    ((?w'2, ?I'2) \\<Turnstile> \\<phi>)\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. length I' = length I", "by (metis length_snth_enc)"], ["proof (state)\nthis:\n  length I' = length I\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FExists \\<phi>);\n        wf_interp_for_formula (w, I) (FExists \\<phi>);\n        wf_interp_for_formula (w', I') (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FExists \\<phi>) =\n                         ((w', I') \\<Turnstile> FExists \\<phi>)\n 3. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FExists \\<phi>) =\n    ((w', I') \\<Turnstile> FExists \\<phi>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "assume \"(w, I) \\<Turnstile> FExists \\<phi>\""], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "with FExists.prems(3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  (w, I) \\<Turnstile> FExists \\<phi>", "obtain p where \"(w, Inl p # I) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        (w, Inl p # I) \\<Turnstile> \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "moreover"], ["proof (state)\nthis:\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "with FExists.prems(1,2)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  (w, Inl p # I) \\<Turnstile> \\<phi>", "have \"(w', Inl p # I') \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', Inl p # I') \\<Turnstile> \\<phi>", "proof (intro iffD1[OF FExists.IH[of w \"Inl p # I\" w' \"Inl p # I'\"]])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inl p # I) =\n                      stream_enc (w', Inl p # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, Inl p # I) \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 5. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inl p # I) \\<Turnstile> \\<phi>", "from FExists.prems(2,3)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)", "show \"wf_interp_for_formula (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inl p # I) \\<phi>", "by (blast dest: wf_interp_for_formula_FExists[of I])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inl p # I) =\n                      stream_enc (w', Inl p # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inl p # I) \\<Turnstile> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inl p # I) =\n                      stream_enc (w', Inl p # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inl p # I) \\<Turnstile> \\<phi>", "from FExists.prems(2,4)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)", "show \"wf_interp_for_formula (w', Inl p # I') \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inl p # I') \\<phi>", "by (blast dest: wf_interp_for_formula_FExists[of I', unfolded length])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w', Inl p # I') \\<phi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inl p # I) =\n                      stream_enc (w', Inl p # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inl p # I) \\<Turnstile> \\<phi>", "qed (auto simp: smap2_alt split: sum.splits if_split_asm)"], ["proof (state)\nthis:\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FExists \\<phi>\n 2. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n  (w', Inl p # I') \\<Turnstile> \\<phi>", "show \"(w', I') \\<Turnstile> FExists \\<phi>\""], ["proof (prove)\nusing this:\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi>", "by auto"], ["proof (state)\nthis:\n  (w', I') \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "assume \"(w', I') \\<Turnstile> FExists \\<phi>\""], ["proof (state)\nthis:\n  (w', I') \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "with FExists.prems(1,2,4)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  (w', I') \\<Turnstile> FExists \\<phi>", "obtain p where \"(w', Inl p # I') \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n  (w', I') \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        (w', Inl p # I') \\<Turnstile> \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "moreover"], ["proof (state)\nthis:\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "with FExists.prems(1,2)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  (w', Inl p # I') \\<Turnstile> \\<phi>", "have \"(w, Inl p # I) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FExists \\<phi>)\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w, Inl p # I) \\<Turnstile> \\<phi>", "proof (intro iffD2[OF FExists.IH[of w \"Inl p # I\" w' \"Inl p # I'\"]])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inl p # I) =\n                      stream_enc (w', Inl p # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, Inl p # I) \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 5. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inl p # I') \\<Turnstile> \\<phi>", "from FExists.prems(2,3)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)", "show \"wf_interp_for_formula (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inl p # I) \\<phi>", "by (blast dest: wf_interp_for_formula_FExists[of I])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inl p # I) =\n                      stream_enc (w', Inl p # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inl p # I') \\<Turnstile> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inl p # I) =\n                      stream_enc (w', Inl p # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inl p # I') \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inl p # I') \\<Turnstile> \\<phi>", "from FExists.prems(2,4)"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)", "show \"wf_interp_for_formula (w', Inl p # I') \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FExists \\<phi>)\n  wf_interp_for_formula (w', I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inl p # I') \\<phi>", "by (blast dest: wf_interp_for_formula_FExists[of I', unfolded length])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w', Inl p # I') \\<phi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inl p # I) =\n                      stream_enc (w', Inl p # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inl p # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FExists \\<phi>);\n     (w', Inl p # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inl p # I') \\<Turnstile> \\<phi>", "qed (auto simp: smap2_alt split: sum.splits if_split_asm)"], ["proof (state)\nthis:\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FExists \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FExists \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n  (w, Inl p # I) \\<Turnstile> \\<phi>", "show \"(w, I) \\<Turnstile> FExists \\<phi>\""], ["proof (prove)\nusing this:\n  (w', Inl p # I') \\<Turnstile> \\<phi>\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> FExists \\<phi>", "by auto"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FExists \\<phi>) =\n  ((w', I') \\<Turnstile> FExists \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "case (FEXISTS \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>stream_enc (?w2, ?I2) = stream_enc (?w'2, ?I'2);\n   wf_formula (length ?I2) \\<phi>; wf_interp_for_formula (?w2, ?I2) \\<phi>;\n   wf_interp_for_formula (?w'2, ?I'2) \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((?w2, ?I2) \\<Turnstile> \\<phi>) =\n                    ((?w'2, ?I'2) \\<Turnstile> \\<phi>)\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "hence length: \"length I' = length I\""], ["proof (prove)\nusing this:\n  \\<lbrakk>stream_enc (?w2, ?I2) = stream_enc (?w'2, ?I'2);\n   wf_formula (length ?I2) \\<phi>; wf_interp_for_formula (?w2, ?I2) \\<phi>;\n   wf_interp_for_formula (?w'2, ?I'2) \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((?w2, ?I2) \\<Turnstile> \\<phi>) =\n                    ((?w'2, ?I'2) \\<Turnstile> \\<phi>)\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. length I' = length I", "by (metis length_snth_enc)"], ["proof (state)\nthis:\n  length I' = length I\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)\n 2. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n        wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n                         ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n    ((w', I') \\<Turnstile> FEXISTS \\<phi>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "assume \"(w, I) \\<Turnstile> FEXISTS \\<phi>\""], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "with FEXISTS.prems(3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  (w, I) \\<Turnstile> FEXISTS \\<phi>", "obtain P where \"finite P\" \"(w, Inr P # I) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>finite P; (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "moreover"], ["proof (state)\nthis:\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "with FEXISTS.prems(1,2)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>", "have \"(w', Inr P # I') \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', Inr P # I') \\<Turnstile> \\<phi>", "proof (intro iffD1[OF FEXISTS.IH[of w \"Inr P # I\" w' \"Inr P # I'\"]])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inr P # I) =\n                      stream_enc (w', Inr P # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, Inr P # I) \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 5. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inr P # I) \\<Turnstile> \\<phi>", "from FEXISTS.prems(2,3) \\<open>finite P\\<close>"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  finite P", "show \"wf_interp_for_formula (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  finite P\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inr P # I) \\<phi>", "by (blast dest: wf_interp_for_formula_FEXISTS[of I])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inr P # I) =\n                      stream_enc (w', Inr P # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inr P # I) \\<Turnstile> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inr P # I) =\n                      stream_enc (w', Inr P # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inr P # I) \\<Turnstile> \\<phi>", "from FEXISTS.prems(2,4) \\<open>finite P\\<close>"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  finite P", "show \"wf_interp_for_formula (w', Inr P # I') \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  finite P\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inr P # I') \\<phi>", "by (blast dest: wf_interp_for_formula_FEXISTS[of I', unfolded length])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w', Inr P # I') \\<phi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inr P # I) =\n                      stream_enc (w', Inr P # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>); finite P;\n     (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w, Inr P # I) \\<Turnstile> \\<phi>", "qed (auto simp: smap2_alt split: sum.splits if_split_asm)"], ["proof (state)\nthis:\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w', I') \\<Turnstile> FEXISTS \\<phi>\n 2. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n  (w', Inr P # I') \\<Turnstile> \\<phi>", "show \"(w', I') \\<Turnstile> FEXISTS \\<phi>\""], ["proof (prove)\nusing this:\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi>", "by auto"], ["proof (state)\nthis:\n  (w', I') \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "assume \"(w', I') \\<Turnstile> FEXISTS \\<phi>\""], ["proof (state)\nthis:\n  (w', I') \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "with FEXISTS.prems(1,2,4)"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  (w', I') \\<Turnstile> FEXISTS \\<phi>", "obtain P where \"finite P\" \"(w', Inr P # I') \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  (w', I') \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>finite P; (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  finite P\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "moreover"], ["proof (state)\nthis:\n  finite P\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "with FEXISTS.prems"], ["proof (chain)\npicking this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  finite P\n  (w', Inr P # I') \\<Turnstile> \\<phi>", "have \"(w, Inr P # I) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  finite P\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w, Inr P # I) \\<Turnstile> \\<phi>", "proof (intro iffD2[OF FEXISTS.IH[of w \"Inr P # I\" w' \"Inr P # I'\"]])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inr P # I) =\n                      stream_enc (w', Inr P # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w, Inr P # I) \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 5. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inr P # I') \\<Turnstile> \\<phi>", "from FEXISTS.prems(2,3) \\<open>finite P\\<close>"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  finite P", "show \"wf_interp_for_formula (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  finite P\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, Inr P # I) \\<phi>", "by (blast dest: wf_interp_for_formula_FEXISTS[of I])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inr P # I) =\n                      stream_enc (w', Inr P # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inr P # I') \\<Turnstile> \\<phi>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inr P # I) =\n                      stream_enc (w', Inr P # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_interp_for_formula (w', Inr P # I') \\<phi>\n 4. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inr P # I') \\<Turnstile> \\<phi>", "from FEXISTS.prems(2,4) \\<open>finite P\\<close>"], ["proof (chain)\npicking this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  finite P", "show \"wf_interp_for_formula (w', Inr P # I') \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula (length I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (w', I') (FEXISTS \\<phi>)\n  finite P\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w', Inr P # I') \\<phi>", "by (blast dest: wf_interp_for_formula_FEXISTS[of I', unfolded length])"], ["proof (state)\nthis:\n  wf_interp_for_formula (w', Inr P # I') \\<phi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> stream_enc (w, Inr P # I) =\n                      stream_enc (w', Inr P # I')\n 2. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> wf_formula (length (Inr P # I)) \\<phi>\n 3. \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n     wf_formula (length I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n     wf_interp_for_formula (w', I') (FEXISTS \\<phi>); finite P;\n     (w', Inr P # I') \\<Turnstile> \\<phi>\\<rbrakk>\n    \\<Longrightarrow> (w', Inr P # I') \\<Turnstile> \\<phi>", "qed (auto simp: smap2_alt split: sum.splits if_split_asm)"], ["proof (state)\nthis:\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w', I') \\<Turnstile> FEXISTS \\<phi> \\<Longrightarrow>\n    (w, I) \\<Turnstile> FEXISTS \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  finite P\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n  (w, Inr P # I) \\<Turnstile> \\<phi>", "show \"(w, I) \\<Turnstile> FEXISTS \\<phi>\""], ["proof (prove)\nusing this:\n  finite P\n  (w', Inr P # I') \\<Turnstile> \\<phi>\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> FEXISTS \\<phi>", "by auto"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((w, I) \\<Turnstile> FEXISTS \\<phi>) =\n  ((w', I') \\<Turnstile> FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> w w' I I'.\n       \\<lbrakk>\\<And>w w' I I'.\n                   \\<lbrakk>stream_enc (w, I) = stream_enc (w', I');\n                    wf_formula (length I) \\<phi>;\n                    wf_interp_for_formula (w, I) \\<phi>;\n                    wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                                     ((w', I') \\<Turnstile> \\<phi>);\n        stream_enc (w, I) = stream_enc (w', I');\n        wf_formula (length I) (FNot \\<phi>);\n        wf_interp_for_formula (w, I) (FNot \\<phi>);\n        wf_interp_for_formula (w', I') (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> ((w, I) \\<Turnstile> FNot \\<phi>) =\n                         ((w', I') \\<Turnstile> FNot \\<phi>)", "qed auto"], ["", "lemma lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_FOr:\n  assumes \"wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\"\n  shows \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<subseteq>\n    (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<union> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2) \\<inter> \\<Union>{enc (w, I) | w I. length I = n \\<and> wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\"\n    (is \"_ \\<subseteq> (?L1 \\<union> ?L2) \\<inter> ?ENC\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n     (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n    \\<subseteq> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                  \\<phi>\\<^sub>1 \\<union>\n                 lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                  \\<phi>\\<^sub>2) \\<inter>\n                \\<Union>\n                 {enc (w, I) |w I.\n                  length I = n \\<and>\n                  wf_interp_for_formula (w, I)\n                   (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>1 \\<union>\n                lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>2) \\<inter>\n               \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>1 \\<union>\n                lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>2) \\<inter>\n               \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>1 \\<union>\n                lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>2) \\<inter>\n               \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "obtain w I where\n    *: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\" \"length I = n\" and\n     \"satisfies (w, I) \\<phi>\\<^sub>1 \\<or> satisfies (w, I) \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n         length I = n;\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I)\n             (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<and>\n            (w, I) \\<Turnstile> FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n         length I = n;\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n         (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>1 \\<union>\n                lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>2) \\<inter>\n               \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "thus \"x \\<in> (?L1 \\<union> ?L2) \\<inter> ?ENC\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<union>\n             lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2) \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I)\n               (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "proof (elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n 2. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "assume \"satisfies (w, I) \\<phi>\\<^sub>1\""], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n 2. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "with *"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "have \"x \\<in> ?L1\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n              (w, I) \\<Turnstile> \\<phi>\\<^sub>1}", "by (fastforce simp del: enc.simps)"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n 2. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "with *"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<union>\n             lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2) \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I)\n               (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<union>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2) \\<inter>\n          \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I)\n             (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "assume \"satisfies (w, I) \\<phi>\\<^sub>2\""], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "with *"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "have \"x \\<in>?L2\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) \\<phi>\\<^sub>2 \\<and>\n              (w, I) \\<Turnstile> \\<phi>\\<^sub>2}", "by (fastforce simp del: enc.simps)"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> enc (w, I);\n     wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2);\n     length I = n; (w, I) \\<Turnstile> \\<phi>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>1 \\<union>\n                               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                \\<phi>\\<^sub>2) \\<inter>\n                              \\<Union>\n                               {enc (w, I) |w I.\n                                length I = n \\<and>\n                                wf_interp_for_formula (w, I)\n                                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "with *"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  length I = n\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<union>\n             lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2) \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I)\n               (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<union>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2) \\<inter>\n          \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I)\n             (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<union>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2) \\<inter>\n          \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I)\n             (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_FAnd:\n  assumes \"wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\"\n  shows \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<subseteq>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<inter> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 \\<inter> \\<Union>{enc (w, I) | w I. length I = n \\<and> wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n     (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n    \\<subseteq> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>1 \\<inter>\n                lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>2 \\<inter>\n                \\<Union>\n                 {enc (w, I) |w I.\n                  length I = n \\<and>\n                  wf_interp_for_formula (w, I)\n                   (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "using assms"], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n     (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n    \\<subseteq> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>1 \\<inter>\n                lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                 \\<phi>\\<^sub>2 \\<inter>\n                \\<Union>\n                 {enc (w, I) |w I.\n                  length I = n \\<and>\n                  wf_interp_for_formula (w, I)\n                   (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     {enc (w, I) |w I.\n      length I = n \\<and>\n      wf_interp_for_formula (w, I)\n       (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<and>\n      (w, I) \\<Turnstile> FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2}\n    \\<subseteq> \\<Union>\n                 {enc (w, I) |w I.\n                  length I = n \\<and>\n                  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n                  (w, I) \\<Turnstile> \\<phi>\\<^sub>1} \\<inter>\n                \\<Union>\n                 {enc (w, I) |w I.\n                  length I = n \\<and>\n                  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2 \\<and>\n                  (w, I) \\<Turnstile> \\<phi>\\<^sub>2} \\<inter>\n                \\<Union>\n                 {enc (w, I) |w I.\n                  length I = n \\<and>\n                  wf_interp_for_formula (w, I)\n                   (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "by (fastforce simp del: enc.simps)"], ["", "subsection \\<open>From WS1S to Regular expressions\\<close>"], ["", "fun rexp_of :: \"nat \\<Rightarrow> 'a formula \\<Rightarrow> ('a atom) rexp\" where\n  \"rexp_of n (FQ a m) =\n    Inter (TIMES [rexp.Not Zero, Atom (AQ m a), rexp.Not Zero])\n    (ENC n (FOV (FQ a m)))\"\n| \"rexp_of n (FLess m1 m2) = (if m1 = m2 then Zero else\n    Inter (TIMES [rexp.Not Zero, Atom (Arbitrary_Except m1 True),\n      rexp.Not Zero, Atom (Arbitrary_Except m2 True),\n      rexp.Not Zero]) (ENC n (FOV (FLess m1 m2 :: 'a formula))))\"\n| \"rexp_of n (FIn m M) = \n    Inter (TIMES [rexp.Not Zero, Atom (Arbitrary_Except2 m M), rexp.Not Zero])\n    (ENC n (FOV (FIn m M :: 'a formula)))\"\n| \"rexp_of n (FNot \\<phi>) = Inter (rexp.Not (rexp_of n \\<phi>)) (ENC n (FOV (FNot \\<phi>)))\"\n| \"rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Inter (Plus (rexp_of n \\<phi>\\<^sub>1) (rexp_of n \\<phi>\\<^sub>2)) (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\"\n| \"rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = INTERSECT [rexp_of n \\<phi>\\<^sub>1, rexp_of n \\<phi>\\<^sub>2, ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))]\"\n| \"rexp_of n (FExists \\<phi>) = samequot_exec (any, replicate n False) (Pr (rexp_of (n + 1) \\<phi>))\"\n| \"rexp_of n (FEXISTS \\<phi>) = samequot_exec (any, replicate n False) (Pr (rexp_of (n + 1) \\<phi>))\""], ["", "fun rexp_of_alt :: \"nat \\<Rightarrow> 'a formula \\<Rightarrow> ('a atom) rexp\" where\n  \"rexp_of_alt n (FQ a m) =\n    TIMES [rexp.Not Zero, Atom (AQ m a), rexp.Not Zero]\"\n| \"rexp_of_alt n (FLess m1 m2) = (if m1 = m2 then Zero else\n    TIMES [rexp.Not Zero, Atom (Arbitrary_Except m1 True),\n      rexp.Not Zero, Atom (Arbitrary_Except m2 True),\n      rexp.Not Zero])\"\n| \"rexp_of_alt n (FIn m M) = \n    TIMES [rexp.Not Zero, Atom (Arbitrary_Except2 m M), rexp.Not Zero]\"\n| \"rexp_of_alt n (FNot \\<phi>) = rexp.Not (rexp_of_alt n \\<phi>)\"\n| \"rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Plus (rexp_of_alt n \\<phi>\\<^sub>1) (rexp_of_alt n \\<phi>\\<^sub>2)\"\n| \"rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Inter (rexp_of_alt n \\<phi>\\<^sub>1) (rexp_of_alt n \\<phi>\\<^sub>2)\"\n| \"rexp_of_alt n (FExists \\<phi>) = samequot_exec (any, replicate n False) (Pr (Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (Suc n) (FOV \\<phi>))))\"\n| \"rexp_of_alt n (FEXISTS \\<phi>) = samequot_exec (any, replicate n False) (Pr (Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (Suc n) (FOV \\<phi>))))\""], ["", "definition \"rexp_of' n \\<phi> = Inter (rexp_of_alt n \\<phi>) (ENC n (FOV \\<phi>))\""], ["", "fun rexp_of_alt' :: \"nat \\<Rightarrow> 'a formula \\<Rightarrow> ('a atom) rexp\" where\n  \"rexp_of_alt' n (FQ a m) = TIMES [Full, Atom (AQ m a), Full]\"\n| \"rexp_of_alt' n (FLess m1 m2) = (if m1 = m2 then Zero else\n    TIMES [Full, Atom (Arbitrary_Except m1 True), Full, Atom (Arbitrary_Except m2 True), Full])\"\n| \"rexp_of_alt' n (FIn m M) = TIMES [Full, Atom (Arbitrary_Except2 m M), Full]\"\n| \"rexp_of_alt' n (FNot \\<phi>) = rexp.Not (rexp_of_alt' n \\<phi>)\"\n| \"rexp_of_alt' n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Plus (rexp_of_alt' n \\<phi>\\<^sub>1) (rexp_of_alt' n \\<phi>\\<^sub>2)\"\n| \"rexp_of_alt' n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = Inter (rexp_of_alt' n \\<phi>\\<^sub>1) (rexp_of_alt' n \\<phi>\\<^sub>2)\"\n| \"rexp_of_alt' n (FExists \\<phi>) = samequot_exec (any, replicate n False) (Pr (Inter (rexp_of_alt' (n + 1) \\<phi>) (ENC (n + 1) {0})))\"\n| \"rexp_of_alt' n (FEXISTS \\<phi>) = samequot_exec (any, replicate n False) (Pr (rexp_of_alt' (n + 1) \\<phi>))\""], ["", "definition \"rexp_of'' n \\<phi> = Inter (rexp_of_alt' n \\<phi>) (ENC n (FOV \\<phi>))\""], ["", "lemma enc_eqI:\n  assumes \"x \\<in> enc (w, I)\" \"x \\<in> enc (w', I')\" \"wf_interp_for_formula (w, I) \\<phi>\" \"wf_interp_for_formula (w', I') \\<phi>\"\n    \"length I = length I'\"\n  shows \"enc (w, I) = enc (w', I')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enc (w, I) = enc (w', I')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. enc (w, I) = enc (w', I')", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  x \\<in> enc (w', I')\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w', I') \\<phi>\n  length I = length I'", "have \"stream_enc (w, I) = stream_enc (w', I')\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  x \\<in> enc (w', I')\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w', I') \\<phi>\n  length I = length I'\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = stream_enc (w', I')", "by (intro box_equals[OF _ stream_enc_enc[symmetric] stream_enc_enc[symmetric]]) auto"], ["proof (state)\nthis:\n  stream_enc (w, I) = stream_enc (w', I')\n\ngoal (1 subgoal):\n 1. enc (w, I) = enc (w', I')", "thus ?thesis"], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n\ngoal (1 subgoal):\n 1. enc (w, I) = enc (w', I')", "using assms(5)"], ["proof (prove)\nusing this:\n  stream_enc (w, I) = stream_enc (w', I')\n  length I = length I'\n\ngoal (1 subgoal):\n 1. enc (w, I) = enc (w', I')", "by auto"], ["proof (state)\nthis:\n  enc (w, I) = enc (w', I')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enc_eq_welldef:\n  \"\\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) \\<phi>; wf_interp_for_formula (w, I) \\<phi> ;wf_interp_for_formula (w', I') \\<phi>\\<rbrakk> \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi> \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>enc (w, I) = enc (w', I'); wf_formula (length I) \\<phi>;\n     wf_interp_for_formula (w, I) \\<phi>;\n     wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                      ((w', I') \\<Turnstile> \\<phi>)", "by (intro stream_enc_welldef) (auto simp del: stream_enc.simps intro!: enc_stream_enc)"], ["", "lemma enc_welldef:\n  \"\\<lbrakk>x \\<in> enc (w, I); x \\<in> enc (w', I'); length I = length I'; wf_formula (length I) \\<phi>;\n  wf_interp_for_formula (w, I) \\<phi> ;wf_interp_for_formula (w', I') \\<phi>\\<rbrakk> \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi> \\<longleftrightarrow> (w', I') \\<Turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> enc (w, I); x \\<in> enc (w', I'); length I = length I';\n     wf_formula (length I) \\<phi>; wf_interp_for_formula (w, I) \\<phi>;\n     wf_interp_for_formula (w', I') \\<phi>\\<rbrakk>\n    \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                      ((w', I') \\<Turnstile> \\<phi>)", "by (intro enc_eq_welldef[OF enc_eqI])"], ["", "lemma wf_rexp_of: \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of n \\<phi>)", "by (induct \\<phi> arbitrary: n)\n    (auto intro!: wf_samequot_exec wf_rexp_ENC,\n    auto simp: max_idx_vars finite_FOV)"], ["", "theorem lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of: \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> = lang n (rexp_of n \\<phi>)\"\n   (is \"_ \\<Longrightarrow> _ = ?L n \\<phi>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n    lang n (rexp_of n \\<phi>)", "proof (induct \\<phi> arbitrary: n)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ x1 x2) =\n       lang n (rexp_of n (FQ x1 x2))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "case (FQ a m)"], ["proof (state)\nthis:\n  wf_formula n (FQ a m)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ x1 x2) =\n       lang n (rexp_of n (FQ x1 x2))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m) =\n    lang n (rexp_of n (FQ a m))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "obtain w I where\n      *: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FQ a m)\" \"length I = n\" \"(w, I) \\<Turnstile> FQ a m\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); wf_interp_for_formula (w, I) (FQ a m);\n         length I = n; (w, I) \\<Turnstile> FQ a m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) (FQ a m) \\<and>\n            (w, I) \\<Turnstile> FQ a m}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); wf_interp_for_formula (w, I) (FQ a m);\n         length I = n; (w, I) \\<Turnstile> FQ a m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n  (w, I) \\<Turnstile> FQ a m\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "hence x_alt: \"x = map (case_prod (enc_atom I)) (zip [0 ..< length x] (stake (length x) (w @- sconst any)))\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n  (w, I) \\<Turnstile> FQ a m\n\ngoal (1 subgoal):\n 1. x =\n    map2 (enc_atom I) [0..<length x] (stake (length x) (w @- sconst any))", "by (intro encD) auto"], ["proof (state)\nthis:\n  x = map2 (enc_atom I) [0..<length x] (stake (length x) (w @- sconst any))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from FQ(1) *(2,4)"], ["proof (chain)\npicking this:\n  wf_formula n (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n  (w, I) \\<Turnstile> FQ a m", "obtain p where p: \"I ! m = Inl p\""], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  wf_interp_for_formula (w, I) (FQ a m)\n  (w, I) \\<Turnstile> FQ a m\n\ngoal (1 subgoal):\n 1. (\\<And>p. I ! m = Inl p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: all_set_conv_all_nth split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "with FQ(1) *"], ["proof (chain)\npicking this:\n  wf_formula n (FQ a m)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n  (w, I) \\<Turnstile> FQ a m\n  I ! m = Inl p", "have p_less: \"p < length x\""], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n  (w, I) \\<Turnstile> FQ a m\n  I ! m = Inl p\n\ngoal (1 subgoal):\n 1. p < length x", "by (auto simp del: stream_enc.simps intro: trans_less_add1[OF less_length_cut_same_Inl])"], ["proof (state)\nthis:\n  p < length x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "hence enc_atom: \"x ! p = enc_atom I p ((w @- sconst any) !! p)\" (is \"_ = enc_atom _ _ ?p\")"], ["proof (prove)\nusing this:\n  p < length x\n\ngoal (1 subgoal):\n 1. x ! p = enc_atom I p ((w @- sconst any) !! p)", "by (subst x_alt, simp)"], ["proof (state)\nthis:\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "with *(1) p_less(1)"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)", "have \"x = take p x @ [enc_atom I p ?p] @ drop (p + 1) x\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n\ngoal (1 subgoal):\n 1. x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x", "using id_take_nth_drop[of p x]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  p < length x \\<Longrightarrow> x = take p x @ x ! p # drop (Suc p) x\n\ngoal (1 subgoal):\n 1. x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x", "by auto"], ["proof (state)\nthis:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from *(2,3,4) FQ(1) p"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n  (w, I) \\<Turnstile> FQ a m\n  wf_formula n (FQ a m)\n  I ! m = Inl p", "have \"[enc_atom I p ?p] \\<in> lang n (Atom (AQ m a))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n  (w, I) \\<Turnstile> FQ a m\n  wf_formula n (FQ a m)\n  I ! m = Inl p\n\ngoal (1 subgoal):\n 1. [enc_atom I p ((w @- sconst any) !! p)] \\<in> lang n (Atom (AQ m a))", "by (auto simp del: lang.simps intro!: enc_atom_lang_AQ)"], ["proof (state)\nthis:\n  [enc_atom I p ((w @- sconst any) !! p)] \\<in> lang n (Atom (AQ m a))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  [enc_atom I p ((w @- sconst any) !! p)] \\<in> lang n (Atom (AQ m a))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from *(2,3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n", "have \"take p x \\<in> lang n (rexp.Not Zero)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n\ngoal (1 subgoal):\n 1. take p x \\<in> lang n (rexp.Not Zero)", "by (subst x_alt) (auto simp: in_set_zip shift_snth intro!: enc_atom_\\<sigma> dest!: in_set_takeD)"], ["proof (state)\nthis:\n  take p x \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  take p x \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from *(2,3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n", "have \"drop (Suc p) x \\<in> lang n (rexp.Not Zero)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n\ngoal (1 subgoal):\n 1. drop (Suc p) x \\<in> lang n (rexp.Not Zero)", "by (subst x_alt) (auto simp: in_set_zip shift_snth intro!: enc_atom_\\<sigma> dest!: in_set_dropD)"], ["proof (state)\nthis:\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FQ a m) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FQ a m))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "ultimately"], ["proof (chain)\npicking this:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n  [enc_atom I p ((w @- sconst any) !! p)] \\<in> lang n (Atom (AQ m a))\n  take p x \\<in> lang n (rexp.Not Zero)\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)", "show \"x \\<in> ?L n (FQ a m)\""], ["proof (prove)\nusing this:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n  [enc_atom I p ((w @- sconst any) !! p)] \\<in> lang n (Atom (AQ m a))\n  take p x \\<in> lang n (rexp.Not Zero)\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FQ a m))", "using *(1,2,3)"], ["proof (prove)\nusing this:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n  [enc_atom I p ((w @- sconst any) !! p)] \\<in> lang n (Atom (AQ m a))\n  take p x \\<in> lang n (rexp.Not Zero)\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FQ a m))", "unfolding rexp_of.simps lang.simps(6,9) rexp_of_list.simps lang_ENC_formula[OF FQ]"], ["proof (prove)\nusing this:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n  [enc_atom I p ((w @- sconst any) !! p)] \\<in> lang n (Atom (AQ m a))\n  take p x \\<in> lang n (rexp.Not Zero)\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp.Not Zero) @@\n            lang n (Atom (AQ m a)) @@ lang n (rexp.Not Zero) \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and> wf_interp_for_formula (w, I) (FQ a m)}", "by (auto elim: ssubst simp del: o_apply append.simps lang.simps enc.simps)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FQ a m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "let ?x = \"x @- sconst (any, replicate n False)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "assume x: \"x \\<in> ?L n (FQ a m)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FQ a m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "with FQ"], ["proof (chain)\npicking this:\n  wf_formula n (FQ a m)\n  x \\<in> lang n (rexp_of n (FQ a m))", "obtain w I where\n      I: \"x \\<in> enc (w, I)\" \"length I = n\" \"wf_interp_for_formula (w, I) (FQ a m)\""], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x \\<in> lang n (rexp_of n (FQ a m))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FQ a m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps lang_ENC_formula[OF FQ]"], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x \\<in> lang n\n           (TIMES [rexp.Not Zero, Atom (AQ m a), rexp.Not Zero]) \\<inter>\n          \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and> wf_interp_for_formula (w, I) (FQ a m)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FQ a m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "hence stream_enc: \"stream_enc (w, I) = ?x\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = x @- sconst (any, replicate n False)", "using stream_enc_enc"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  \\<lbrakk>\\<forall>x\\<in>set ?I.\n              case x of Inl a \\<Rightarrow> True\n              | Inr P \\<Rightarrow> finite P;\n   ?v \\<in> enc (?w, ?I)\\<rbrakk>\n  \\<Longrightarrow> stream_enc (?w, ?I) =\n                    ?v @- sconst (any, replicate (length ?I) False)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = x @- sconst (any, replicate n False)", "by auto"], ["proof (state)\nthis:\n  stream_enc (w, I) = x @- sconst (any, replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from I FQ"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  wf_formula n (FQ a m)", "obtain p where m: \"I ! m = Inl p\" \"m < length I\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  wf_formula n (FQ a m)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>I ! m = Inl p; m < length I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n  m < length I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "with I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  I ! m = Inl p\n  m < length I", "have \"wf_interp_for_formula (dec_word ?x, stream_dec n {m} ?x) (FQ a m)\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  I ! m = Inl p\n  m < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m} (x @- sconst (any, replicate n False)))\n     (FQ a m)", "unfolding I(1)"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  I ! m = Inl p\n  m < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m} (x @- sconst (any, replicate n False)))\n     (FQ a m)", "using enc_wf_interp[OF FQ(1)[folded I(2)]]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  I ! m = Inl p\n  m < length I\n  \\<lbrakk>wf_interp_for_formula (?w, I) (FQ a m);\n   ?x \\<in> enc (?w, I)\\<rbrakk>\n  \\<Longrightarrow> wf_interp_for_formula\n                     (dec_word\n                       (?x @- sconst (any, replicate (length I) False)),\n                      stream_dec (length I) (FOV (FQ a m))\n                       (?x @- sconst (any, replicate (length I) False)))\n                     (FQ a m)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m} (x @- sconst (any, replicate n False)))\n     (FQ a m)", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FQ a m))", "obtain u1 u u2 where \"x = u1 @ u @ u2\" \"u \\<in> lang n (Atom (AQ m a))\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FQ a m))\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2; u \\<in> lang n (Atom (AQ m a))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) @@\n          {[x] |x.\n           lookup (AQ m a) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) \\<inter>\n          lang n (ENC n (FOV (FQ a m)))\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> {[x] |x.\n                  lookup (AQ m a) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using concE"], ["proof (prove)\nusing this:\n  x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) @@\n          {[x] |x.\n           lookup (AQ m a) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) \\<inter>\n          lang n (ENC n (FOV (FQ a m)))\n  \\<lbrakk>?w \\<in> ?A @@ ?B;\n   \\<And>u v.\n      \\<lbrakk>u \\<in> ?A; v \\<in> ?B; ?w = u @ v\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> {[x] |x.\n                  lookup (AQ m a) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (AQ m a))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "with FQ(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FQ a m)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (AQ m a))", "obtain v where v: \"x = u1 @ [v] @ u2\" \"snd v ! m\" \"fst v = a\""], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (AQ m a))\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>x = u1 @ [v] @ u2; snd v ! m; fst v = a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using AQ_D[of u n m a]"], ["proof (prove)\nusing this:\n  wf_formula n (FQ a m)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (AQ m a))\n  \\<lbrakk>u \\<in> lang n (Atom (AQ m a)); m < n;\n   a \\<in> set \\<Sigma>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. u = [x] \\<and> fst x = a \\<and> snd x ! m\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>x = u1 @ [v] @ u2; snd v ! m; fst v = a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a", "have u: \"length u1 < length x\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. length u1 < length x", "by auto"], ["proof (state)\nthis:\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "{"], ["proof (state)\nthis:\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a", "have \"snd (x ! length u1) ! m\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. snd (x ! length u1) ! m", "by auto"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)", "have \"p < length x\" \"snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. p < length x &&& snd (x ! p) ! m", "by (auto dest: enc_Inl simp del: enc.simps)"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)", "have ex1: \"\\<exists>!p. snd (stream_enc (w, I) !! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (stream_enc (w, I) !! p) ! m", "by (intro stream_enc_unique) auto"], ["proof (state)\nthis:\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "ultimately"], ["proof (chain)\npicking this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m", "have \"p = length u1\""], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "unfolding stream_enc"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "using u I(3)"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m\n  length u1 < length x\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. p = length u1", "by auto"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "}"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "note * = this"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a", "have \"v = x ! length u1\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  fst v = a\n\ngoal (1 subgoal):\n 1. v = x ! length u1", "by simp"], ["proof (state)\nthis:\n  v = x ! length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "with u"], ["proof (chain)\npicking this:\n  length u1 < length x\n  v = x ! length u1", "have \"?x !! length u1 = v\""], ["proof (prove)\nusing this:\n  length u1 < length x\n  v = x ! length u1\n\ngoal (1 subgoal):\n 1. (x @- sconst (any, replicate n False)) !! length u1 = v", "by (auto simp: shift_snth)"], ["proof (state)\nthis:\n  (x @- sconst (any, replicate n False)) !! length u1 = v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "with * m I v(3)"], ["proof (chain)\npicking this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  fst v = a\n  (x @- sconst (any, replicate n False)) !! length u1 = v", "have \"(dec_word ?x, stream_dec n {m} ?x) \\<Turnstile> FQ a m\""], ["proof (prove)\nusing this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  fst v = a\n  (x @- sconst (any, replicate n False)) !! length u1 = v\n\ngoal (1 subgoal):\n 1. (dec_word (x @- sconst (any, replicate n False)),\n     stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n    FQ a m", "using stream_enc_enc[OF _ I(1), symmetric] less_length_cut_same[of w \"any\" \"length u1\" a]"], ["proof (prove)\nusing this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n  fst v = a\n  (x @- sconst (any, replicate n False)) !! length u1 = v\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  x @- sconst (any, replicate (length I) False) = stream_enc (w, I)\n  (w @- sconst any) !! length u1 = a \\<Longrightarrow>\n  a = any \\<or>\n  length u1 < length (cut_same any (w @- sconst any)) \\<and>\n  w ! length u1 = a\n\ngoal (1 subgoal):\n 1. (dec_word (x @- sconst (any, replicate n False)),\n     stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n    FQ a m", "by (auto simp del: enc.simps stream_enc.simps simp: dec_word_stream_enc dest!:\n        stream_dec_enc_Inl stream_dec_not_Inr split: sum.splits)\n        (auto simp: smap2_alt cut_same_def)"], ["proof (state)\nthis:\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FQ a m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FQ a m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from m I(2)"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  length I = n", "have stream_enc_dec: \"stream_enc (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) = stream_enc (w, I)\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  length I = n\n\ngoal (1 subgoal):\n 1. stream_enc\n     (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n    stream_enc (w, I)", "by (intro stream_enc_dec)\n          (auto simp: smap2_alt sdrop_snth shift_snth intro: stream_enc_unique,\n           auto simp: smap2_szip stream.set_map)"], ["proof (state)\nthis:\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "moreover"], ["proof (state)\nthis:\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "from I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)", "have \"wf_word n x\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. wf_word n x", "unfolding wf_word"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n)", "by (auto elim: enc_set_\\<sigma> simp del: enc.simps)"], ["proof (state)\nthis:\n  wf_word n x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FQ a m)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "ultimately"], ["proof (chain)\npicking this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FQ a m)\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FQ a m\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x", "show \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FQ a m)\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FQ a m\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FQ a m)\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FQ a m\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FQ a m) \\<and>\n              (w, I) \\<Turnstile> FQ a m}", "using m I(1,3)"], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FQ a m)\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FQ a m\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n  I ! m = Inl p\n  m < length I\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FQ a m)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FQ a m) \\<and>\n              (w, I) \\<Turnstile> FQ a m}", "by (auto simp del: enc.simps stream_enc.simps intro!: exI[of _ \"enc (dec_word ?x, stream_dec n {m} ?x)\"],\n          fastforce simp del: enc.simps stream_enc.simps,\n          auto simp del: stream_enc.simps simp: stream_enc[symmetric] I(2))"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FQ a m) =\n  lang n (rexp_of n (FQ a m))\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "case (FLess m m')"], ["proof (state)\nthis:\n  wf_formula n (FLess m m')\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess x1 x2) =\n       lang n (rexp_of n (FLess x1 x2))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n    lang n (rexp_of n (FLess m m'))", "proof (cases \"m = m'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = m' \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n    lang n (rexp_of n (FLess m m'))\n 2. m \\<noteq> m' \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n    lang n (rexp_of n (FLess m m'))", "case False"], ["proof (state)\nthis:\n  m \\<noteq> m'\n\ngoal (2 subgoals):\n 1. m = m' \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n    lang n (rexp_of n (FLess m m'))\n 2. m \\<noteq> m' \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n    lang n (rexp_of n (FLess m m'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  m \\<noteq> m'\n\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n    lang n (rexp_of n (FLess m m'))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')", "obtain w I where\n        *: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FLess m m')\" \"length I = n\" \"(w, I) \\<Turnstile> FLess m m'\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FLess m m'); length I = n;\n         (w, I) \\<Turnstile> FLess m m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) (FLess m m') \\<and>\n            (w, I) \\<Turnstile> FLess m m'}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FLess m m'); length I = n;\n         (w, I) \\<Turnstile> FLess m m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  (w, I) \\<Turnstile> FLess m m'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "hence x_alt: \"x = map (case_prod (enc_atom I)) (zip [0 ..< length x] (stake (length x) (w @- sconst any)))\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  (w, I) \\<Turnstile> FLess m m'\n\ngoal (1 subgoal):\n 1. x =\n    map2 (enc_atom I) [0..<length x] (stake (length x) (w @- sconst any))", "by (intro encD) auto"], ["proof (state)\nthis:\n  x = map2 (enc_atom I) [0..<length x] (stake (length x) (w @- sconst any))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from FLess(1) *(2,4)"], ["proof (chain)\npicking this:\n  wf_formula n (FLess m m')\n  wf_interp_for_formula (w, I) (FLess m m')\n  (w, I) \\<Turnstile> FLess m m'", "obtain p q where pq: \"I ! m = Inl p\" \"I ! m' = Inl q\" \"p < q\""], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  wf_interp_for_formula (w, I) (FLess m m')\n  (w, I) \\<Turnstile> FLess m m'\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        \\<lbrakk>I ! m = Inl p; I ! m' = Inl q; p < q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: all_set_conv_all_nth split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n  I ! m' = Inl q\n  p < q\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "with FLess(1) *(1,2,3)"], ["proof (chain)\npicking this:\n  wf_formula n (FLess m m')\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  I ! m = Inl p\n  I ! m' = Inl q\n  p < q", "have pq_less: \"p < length x\" \"q < length x\""], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  I ! m = Inl p\n  I ! m' = Inl q\n  p < q\n\ngoal (1 subgoal):\n 1. p < length x &&& q < length x", "by (auto simp del: stream_enc.simps intro!: trans_less_add1[OF less_length_cut_same_Inl])"], ["proof (state)\nthis:\n  p < length x\n  q < length x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "hence enc_atom: \"x ! p = enc_atom I p ((w @- sconst any) !! p)\" (is \"_ = enc_atom _ _ ?p\")\n                      \"x ! q = enc_atom I q ((w @- sconst any) !! q)\" (is \"_ = enc_atom _ _ ?q\")"], ["proof (prove)\nusing this:\n  p < length x\n  q < length x\n\ngoal (1 subgoal):\n 1. x ! p = enc_atom I p ((w @- sconst any) !! p) &&&\n    x ! q = enc_atom I q ((w @- sconst any) !! q)", "by (subst x_alt, simp)+"], ["proof (state)\nthis:\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  x ! q = enc_atom I q ((w @- sconst any) !! q)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "with *(1) pq_less(1)"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  x ! q = enc_atom I q ((w @- sconst any) !! q)", "have \"x = take p x @ [enc_atom I p ?p] @ drop (p + 1) x\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  x ! q = enc_atom I q ((w @- sconst any) !! q)\n\ngoal (1 subgoal):\n 1. x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x", "using id_take_nth_drop[of p x]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  x ! q = enc_atom I q ((w @- sconst any) !! q)\n  p < length x \\<Longrightarrow> x = take p x @ x ! p # drop (Suc p) x\n\ngoal (1 subgoal):\n 1. x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x", "by auto"], ["proof (state)\nthis:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "also"], ["proof (state)\nthis:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "have \"drop (p + 1) x = take (q - p - 1) (drop (p + 1) x) @\n        [enc_atom I q ?q] @ drop (q - p) (drop (p + 1) x)\" (is \"_ = ?LHS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (p + 1) x =\n    take (q - p - 1) (drop (p + 1) x) @\n    [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)", "using id_take_nth_drop[of \"q - p - 1\" \"drop (p + 1) x\"] pq pq_less(2) enc_atom(2)"], ["proof (prove)\nusing this:\n  q - p - 1 < length (drop (p + 1) x) \\<Longrightarrow>\n  drop (p + 1) x =\n  take (q - p - 1) (drop (p + 1) x) @\n  drop (p + 1) x ! (q - p - 1) # drop (Suc (q - p - 1)) (drop (p + 1) x)\n  I ! m = Inl p\n  I ! m' = Inl q\n  p < q\n  q < length x\n  x ! q = enc_atom I q ((w @- sconst any) !! q)\n\ngoal (1 subgoal):\n 1. drop (p + 1) x =\n    take (q - p - 1) (drop (p + 1) x) @\n    [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)", "by auto"], ["proof (state)\nthis:\n  drop (p + 1) x =\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "finally"], ["proof (chain)\npicking this:\n  x =\n  take p x @\n  [enc_atom I p ((w @- sconst any) !! p)] @\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)", "have \"x = take p x @ [enc_atom I p ?p] @ ?LHS\""], ["proof (prove)\nusing this:\n  x =\n  take p x @\n  [enc_atom I p ((w @- sconst any) !! p)] @\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)\n\ngoal (1 subgoal):\n 1. x =\n    take p x @\n    [enc_atom I p ((w @- sconst any) !! p)] @\n    take (q - p - 1) (drop (p + 1) x) @\n    [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)", "."], ["proof (state)\nthis:\n  x =\n  take p x @\n  [enc_atom I p ((w @- sconst any) !! p)] @\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  x =\n  take p x @\n  [enc_atom I p ((w @- sconst any) !! p)] @\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from *(2,3) FLess(1) pq(1)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  wf_formula n (FLess m m')\n  I ! m = Inl p", "have \"[enc_atom I p ?p] \\<in> lang n (Atom (Arbitrary_Except m True))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  wf_formula n (FLess m m')\n  I ! m = Inl p\n\ngoal (1 subgoal):\n 1. [enc_atom I p ((w @- sconst any) !! p)]\n    \\<in> lang n (Atom (Arbitrary_Except m True))", "by (intro enc_atom_lang_Arbitrary_Except_True) (auto simp: shift_snth)"], ["proof (state)\nthis:\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except m True))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except m True))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from *(2,3) FLess(1) pq(2)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  wf_formula n (FLess m m')\n  I ! m' = Inl q", "have \"[enc_atom I q ?q] \\<in> lang n (Atom (Arbitrary_Except m' True))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n  wf_formula n (FLess m m')\n  I ! m' = Inl q\n\ngoal (1 subgoal):\n 1. [enc_atom I q ((w @- sconst any) !! q)]\n    \\<in> lang n (Atom (Arbitrary_Except m' True))", "by (intro enc_atom_lang_Arbitrary_Except_True) (auto simp: shift_snth)"], ["proof (state)\nthis:\n  [enc_atom I q ((w @- sconst any) !! q)]\n  \\<in> lang n (Atom (Arbitrary_Except m' True))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  [enc_atom I q ((w @- sconst any) !! q)]\n  \\<in> lang n (Atom (Arbitrary_Except m' True))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from *(2,3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n", "have \"take p x \\<in> lang n (rexp.Not Zero)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. take p x \\<in> lang n (rexp.Not Zero)", "by (subst x_alt) (auto simp: in_set_zip shift_snth intro!: enc_atom_\\<sigma> dest!: in_set_takeD)"], ["proof (state)\nthis:\n  take p x \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  take p x \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from *(2,3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n", "have \"take (q - p - 1) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. take (q - p - 1) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)", "by (subst x_alt) (auto simp: in_set_zip shift_snth intro!: enc_atom_\\<sigma> dest!: in_set_dropD in_set_takeD)"], ["proof (state)\nthis:\n  take (q - p - 1) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  take (q - p - 1) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from *(2,3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n", "have \"drop (q - p) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. drop (q - p) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)", "by (subst x_alt) (auto simp: in_set_zip shift_snth intro!: enc_atom_\\<sigma> dest!: in_set_dropD)"], ["proof (state)\nthis:\n  drop (q - p) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (rexp_of n (FLess m m'))\n 2. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "ultimately"], ["proof (chain)\npicking this:\n  x =\n  take p x @\n  [enc_atom I p ((w @- sconst any) !! p)] @\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except m True))\n  [enc_atom I q ((w @- sconst any) !! q)]\n  \\<in> lang n (Atom (Arbitrary_Except m' True))\n  take p x \\<in> lang n (rexp.Not Zero)\n  take (q - p - 1) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n  drop (q - p) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)", "show \"x \\<in> ?L n (FLess m m')\""], ["proof (prove)\nusing this:\n  x =\n  take p x @\n  [enc_atom I p ((w @- sconst any) !! p)] @\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except m True))\n  [enc_atom I q ((w @- sconst any) !! q)]\n  \\<in> lang n (Atom (Arbitrary_Except m' True))\n  take p x \\<in> lang n (rexp.Not Zero)\n  take (q - p - 1) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n  drop (q - p) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FLess m m'))", "using *(1,2,3)"], ["proof (prove)\nusing this:\n  x =\n  take p x @\n  [enc_atom I p ((w @- sconst any) !! p)] @\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except m True))\n  [enc_atom I q ((w @- sconst any) !! q)]\n  \\<in> lang n (Atom (Arbitrary_Except m' True))\n  take p x \\<in> lang n (rexp.Not Zero)\n  take (q - p - 1) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n  drop (q - p) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FLess m m'))", "unfolding rexp_of.simps lang.simps(6,9) rexp_of_list.simps Int_Diff lang_ENC_formula[OF FLess] if_not_P[OF False]"], ["proof (prove)\nusing this:\n  x =\n  take p x @\n  [enc_atom I p ((w @- sconst any) !! p)] @\n  take (q - p - 1) (drop (p + 1) x) @\n  [enc_atom I q ((w @- sconst any) !! q)] @ drop (q - p) (drop (p + 1) x)\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except m True))\n  [enc_atom I q ((w @- sconst any) !! q)]\n  \\<in> lang n (Atom (Arbitrary_Except m' True))\n  take p x \\<in> lang n (rexp.Not Zero)\n  take (q - p - 1) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n  drop (q - p) (drop (Suc p) x) \\<in> lang n (rexp.Not Zero)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp.Not Zero) @@\n            lang n (Atom (Arbitrary_Except m True)) @@\n            lang n (rexp.Not Zero) @@\n            lang n (Atom (Arbitrary_Except m' True)) @@\n            lang n (rexp.Not Zero) \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and> wf_interp_for_formula (w, I) (FLess m m')}", "by (auto elim: ssubst simp del: o_apply append.simps lang.simps enc.simps)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FLess m m'))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "let ?x = \"x @- sconst (any, replicate n False)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "assume x: \"x \\<in> ?L n (FLess m m')\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FLess m m'))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "with FLess"], ["proof (chain)\npicking this:\n  wf_formula n (FLess m m')\n  x \\<in> lang n (rexp_of n (FLess m m'))", "obtain w I where\n        I: \"x \\<in> enc (w, I)\" \"length I = n\" \"wf_interp_for_formula (w, I) (FLess m m')\""], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x \\<in> lang n (rexp_of n (FLess m m'))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FLess m m')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps lang_ENC_formula[OF FLess] if_not_P[OF False]"], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x \\<in> lang n\n           (TIMES\n             [rexp.Not Zero, Atom (Arbitrary_Except m True), rexp.Not Zero,\n              Atom (Arbitrary_Except m' True), rexp.Not Zero]) \\<inter>\n          \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and> wf_interp_for_formula (w, I) (FLess m m')}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FLess m m')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "hence stream_enc: \"stream_enc (w, I) = x @- sconst (any, replicate n False)\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = x @- sconst (any, replicate n False)", "using stream_enc_enc"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  \\<lbrakk>\\<forall>x\\<in>set ?I.\n              case x of Inl a \\<Rightarrow> True\n              | Inr P \\<Rightarrow> finite P;\n   ?v \\<in> enc (?w, ?I)\\<rbrakk>\n  \\<Longrightarrow> stream_enc (?w, ?I) =\n                    ?v @- sconst (any, replicate (length ?I) False)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = x @- sconst (any, replicate n False)", "by auto"], ["proof (state)\nthis:\n  stream_enc (w, I) = x @- sconst (any, replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from I FLess"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  wf_formula n (FLess m m')", "obtain p p' where m: \"I ! m = Inl p\" \"m < length I\" \"I ! m' = Inl p'\" \"m' < length I\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  wf_formula n (FLess m m')\n\ngoal (1 subgoal):\n 1. (\\<And>p p'.\n        \\<lbrakk>I ! m = Inl p; m < length I; I ! m' = Inl p';\n         m' < length I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "with I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I", "have \"wf_interp_for_formula (dec_word ?x, stream_dec n {m, m'} ?x) (FLess m m')\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n     (FLess m m')", "unfolding I(1)"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n     (FLess m m')", "using enc_wf_interp[OF FLess(1)[folded I(2)]]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  \\<lbrakk>wf_interp_for_formula (?w, I) (FLess m m');\n   ?x \\<in> enc (?w, I)\\<rbrakk>\n  \\<Longrightarrow> wf_interp_for_formula\n                     (dec_word\n                       (?x @- sconst (any, replicate (length I) False)),\n                      stream_dec (length I) (FOV (FLess m m'))\n                       (?x @- sconst (any, replicate (length I) False)))\n                     (FLess m m')\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n     (FLess m m')", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n   (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n   (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FLess m m'))", "obtain u1 u u2 u' u3 where \"x = u1 @ u @ u2 @ u' @ u3\"\n        \"u \\<in> lang n (Atom (Arbitrary_Except m True))\" \"u' \\<in> lang n (Atom (Arbitrary_Except m' True))\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FLess m m'))\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2 u' u3.\n        \\<lbrakk>x = u1 @ u @ u2 @ u' @ u3;\n         u \\<in> lang n (Atom (Arbitrary_Except m True));\n         u' \\<in> lang n (Atom (Arbitrary_Except m' True))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps rexp_of_list.simps if_not_P[OF False]"], ["proof (prove)\nusing this:\n  x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) @@\n          {[x] |x.\n           lookup (Arbitrary_Except m True) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) @@\n          {[x] |x.\n           lookup (Arbitrary_Except m' True) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) \\<inter>\n          lang n (ENC n (FOV (FLess m m')))\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2 u' u3.\n        \\<lbrakk>x = u1 @ u @ u2 @ u' @ u3;\n         u \\<in> {[x] |x.\n                  lookup (Arbitrary_Except m True) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n};\n         u' \\<in> {[x] |x.\n                   lookup (Arbitrary_Except m' True) x \\<and>\n                   x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using concE"], ["proof (prove)\nusing this:\n  x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) @@\n          {[x] |x.\n           lookup (Arbitrary_Except m True) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) @@\n          {[x] |x.\n           lookup (Arbitrary_Except m' True) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) \\<inter>\n          lang n (ENC n (FOV (FLess m m')))\n  \\<lbrakk>?w \\<in> ?A @@ ?B;\n   \\<And>u v.\n      \\<lbrakk>u \\<in> ?A; v \\<in> ?B; ?w = u @ v\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2 u' u3.\n        \\<lbrakk>x = u1 @ u @ u2 @ u' @ u3;\n         u \\<in> {[x] |x.\n                  lookup (Arbitrary_Except m True) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n};\n         u' \\<in> {[x] |x.\n                   lookup (Arbitrary_Except m' True) x \\<and>\n                   x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x = u1 @ u @ u2 @ u' @ u3\n  u \\<in> lang n (Atom (Arbitrary_Except m True))\n  u' \\<in> lang n (Atom (Arbitrary_Except m' True))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "with FLess(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FLess m m')\n  x = u1 @ u @ u2 @ u' @ u3\n  u \\<in> lang n (Atom (Arbitrary_Except m True))\n  u' \\<in> lang n (Atom (Arbitrary_Except m' True))", "obtain v v' where v: \"x = u1 @ [v] @ u2 @ [v'] @ u3\"\n         \"snd v ! m\" \"snd v' ! m'\" \"fst v \\<in> set \\<Sigma>\" \"fst v' \\<in> set \\<Sigma>\""], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x = u1 @ u @ u2 @ u' @ u3\n  u \\<in> lang n (Atom (Arbitrary_Except m True))\n  u' \\<in> lang n (Atom (Arbitrary_Except m' True))\n\ngoal (1 subgoal):\n 1. (\\<And>v v'.\n        \\<lbrakk>x = u1 @ [v] @ u2 @ [v'] @ u3; snd v ! m; snd v' ! m';\n         fst v \\<in> set \\<Sigma>; fst v' \\<in> set \\<Sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Arbitrary_ExceptD[of u n m True] Arbitrary_ExceptD[of u' n m' True]"], ["proof (prove)\nusing this:\n  wf_formula n (FLess m m')\n  x = u1 @ u @ u2 @ u' @ u3\n  u \\<in> lang n (Atom (Arbitrary_Except m True))\n  u' \\<in> lang n (Atom (Arbitrary_Except m' True))\n  \\<lbrakk>u \\<in> lang n (Atom (Arbitrary_Except m True)); m < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. u = [x] \\<and> snd x ! m = True\n  \\<lbrakk>u' \\<in> lang n (Atom (Arbitrary_Except m' True));\n   m' < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. u' = [x] \\<and> snd x ! m' = True\n\ngoal (1 subgoal):\n 1. (\\<And>v v'.\n        \\<lbrakk>x = u1 @ [v] @ u2 @ [v'] @ u3; snd v ! m; snd v' ! m';\n         fst v \\<in> set \\<Sigma>; fst v' \\<in> set \\<Sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp (auto simp: \\<sigma>_def)"], ["proof (state)\nthis:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n  fst v \\<in> set \\<Sigma>\n  fst v' \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "hence u: \"length u1 < length x\" and u': \"Suc (length u1 + length u2) < length x\" (is \"?u' < _\")"], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n  fst v \\<in> set \\<Sigma>\n  fst v' \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. length u1 < length x &&& Suc (length u1 + length u2) < length x", "by auto"], ["proof (state)\nthis:\n  length u1 < length x\n  Suc (length u1 + length u2) < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "{"], ["proof (state)\nthis:\n  length u1 < length x\n  Suc (length u1 + length u2) < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n  fst v \\<in> set \\<Sigma>\n  fst v' \\<in> set \\<Sigma>", "have \"snd (x ! length u1) ! m\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n  fst v \\<in> set \\<Sigma>\n  fst v' \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. snd (x ! length u1) ! m", "by auto"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have \"p < length x\" \"snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. p < length x &&& snd (x ! p) ! m", "by (auto dest: enc_Inl simp del: enc.simps)"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have ex1: \"\\<exists>!p. snd (stream_enc (w, I) !! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (stream_enc (w, I) !! p) ! m", "by (intro stream_enc_unique) auto"], ["proof (state)\nthis:\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "ultimately"], ["proof (chain)\npicking this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m", "have \"p = length u1\""], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "unfolding stream_enc"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "using u I(3)"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m\n  length u1 < length x\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. p = length u1", "by auto"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "}"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "{"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n  fst v \\<in> set \\<Sigma>\n  fst v' \\<in> set \\<Sigma>", "have \"snd (x ! ?u') ! m'\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2 @ [v'] @ u3\n  snd v ! m\n  snd v' ! m'\n  fst v \\<in> set \\<Sigma>\n  fst v' \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. snd (x ! Suc (length u1 + length u2)) ! m'", "by (auto simp: nth_append)"], ["proof (state)\nthis:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have \"p' < length x\" \"snd (x ! p') ! m'\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. p' < length x &&& snd (x ! p') ! m'", "by (auto dest: enc_Inl simp del: enc.simps)"], ["proof (state)\nthis:\n  p' < length x\n  snd (x ! p') ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  p' < length x\n  snd (x ! p') ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have ex1: \"\\<exists>!p. snd (stream_enc (w, I) !! p) ! m'\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (stream_enc (w, I) !! p) ! m'", "unfolding I(1)"], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (stream_enc (w, I) !! p) ! m'", "by (intro stream_enc_unique) auto"], ["proof (state)\nthis:\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "ultimately"], ["proof (chain)\npicking this:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n  p' < length x\n  snd (x ! p') ! m'\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m'", "have \"p' = ?u'\""], ["proof (prove)\nusing this:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n  p' < length x\n  snd (x ! p') ! m'\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m'\n\ngoal (1 subgoal):\n 1. p' = Suc (length u1 + length u2)", "unfolding stream_enc"], ["proof (prove)\nusing this:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n  p' < length x\n  snd (x ! p') ! m'\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m'\n\ngoal (1 subgoal):\n 1. p' = Suc (length u1 + length u2)", "using u' I(3)"], ["proof (prove)\nusing this:\n  snd (x ! Suc (length u1 + length u2)) ! m'\n  p' < length x\n  snd (x ! p') ! m'\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m'\n  Suc (length u1 + length u2) < length x\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. p' = Suc (length u1 + length u2)", "by auto (metis shift_snth_less)"], ["proof (state)\nthis:\n  p' = Suc (length u1 + length u2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "}"], ["proof (state)\nthis:\n  p' = Suc (length u1 + length u2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "note * = this \\<open>p = length u1\\<close>"], ["proof (state)\nthis:\n  p' = Suc (length u1 + length u2)\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "with m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  p' = Suc (length u1 + length u2)\n  p = length u1", "have \"(dec_word ?x, stream_dec n {m, m'} ?x) \\<Turnstile> FLess m m'\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  p' = Suc (length u1 + length u2)\n  p = length u1\n\ngoal (1 subgoal):\n 1. (dec_word (x @- sconst (any, replicate n False)),\n     stream_dec n {m, m'}\n      (x @- sconst (any, replicate n False))) \\<Turnstile>\n    FLess m m'", "using stream_enc_enc[OF _ I(1), symmetric]"], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n  p' = Suc (length u1 + length u2)\n  p = length u1\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  x @- sconst (any, replicate (length I) False) = stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. (dec_word (x @- sconst (any, replicate n False)),\n     stream_dec n {m, m'}\n      (x @- sconst (any, replicate n False))) \\<Turnstile>\n    FLess m m'", "by (auto dest: stream_dec_not_Inr stream_dec_enc_Inl split: sum.splits simp del: stream_enc.simps)"], ["proof (state)\nthis:\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m, m'} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FLess m m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m, m'} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FLess m m'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from m I(2)"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  length I = n", "have stream_enc_dec: \"stream_enc (dec_word (stream_enc (w, I)), stream_dec n {m, m'} (stream_enc (w, I))) = stream_enc (w, I)\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  length I = n\n\ngoal (1 subgoal):\n 1. stream_enc\n     (dec_word (stream_enc (w, I)),\n      stream_dec n {m, m'} (stream_enc (w, I))) =\n    stream_enc (w, I)", "by (intro stream_enc_dec)\n          (auto simp: smap2_alt sdrop_snth shift_snth intro: stream_enc_unique,\n           auto simp: smap2_szip stream.set_map)"], ["proof (state)\nthis:\n  stream_enc\n   (dec_word (stream_enc (w, I)),\n    stream_dec n {m, m'} (stream_enc (w, I))) =\n  stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "moreover"], ["proof (state)\nthis:\n  stream_enc\n   (dec_word (stream_enc (w, I)),\n    stream_dec n {m, m'} (stream_enc (w, I))) =\n  stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "from I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')", "have \"wf_word n x\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. wf_word n x", "unfolding wf_word"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n)", "by (auto elim: enc_set_\\<sigma> simp del: enc.simps)"], ["proof (state)\nthis:\n  wf_word n x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>m \\<noteq> m';\n        x \\<in> lang n (rexp_of n (FLess m m'))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                                  (FLess m m')", "ultimately"], ["proof (chain)\npicking this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n   (FLess m m')\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m, m'} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FLess m m'\n  stream_enc\n   (dec_word (stream_enc (w, I)),\n    stream_dec n {m, m'} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x", "show \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n   (FLess m m')\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m, m'} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FLess m m'\n  stream_enc\n   (dec_word (stream_enc (w, I)),\n    stream_dec n {m, m'} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n   (FLess m m')\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m, m'} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FLess m m'\n  stream_enc\n   (dec_word (stream_enc (w, I)),\n    stream_dec n {m, m'} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FLess m m') \\<and>\n              (w, I) \\<Turnstile> FLess m m'}", "using m I(1,3)"], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m, m'} (x @- sconst (any, replicate n False)))\n   (FLess m m')\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m, m'} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FLess m m'\n  stream_enc\n   (dec_word (stream_enc (w, I)),\n    stream_dec n {m, m'} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n  I ! m = Inl p\n  m < length I\n  I ! m' = Inl p'\n  m' < length I\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FLess m m')\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FLess m m') \\<and>\n              (w, I) \\<Turnstile> FLess m m'}", "by (auto simp del: enc.simps stream_enc.simps intro!: exI[of _ \"enc (dec_word ?x, stream_dec n {m, m'} ?x)\"],\n          fastforce simp del: enc.simps stream_enc.simps,\n          auto simp del: stream_enc.simps simp: stream_enc[symmetric] I(2))"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n  lang n (rexp_of n (FLess m m'))\n\ngoal (1 subgoal):\n 1. m = m' \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n    lang n (rexp_of n (FLess m m'))", "qed (simp add: lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def del: o_apply)"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FLess m m') =\n  lang n (rexp_of n (FLess m m'))\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "case (FIn m M)"], ["proof (state)\nthis:\n  wf_formula n (FIn m M)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn x1 x2) =\n       lang n (rexp_of n (FIn x1 x2))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M) =\n    lang n (rexp_of n (FIn m M))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "obtain w I where\n      *: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FIn m M)\" \"length I = n\" \"(w, I) \\<Turnstile> FIn m M\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); wf_interp_for_formula (w, I) (FIn m M);\n         length I = n; (w, I) \\<Turnstile> FIn m M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) (FIn m M) \\<and>\n            (w, I) \\<Turnstile> FIn m M}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); wf_interp_for_formula (w, I) (FIn m M);\n         length I = n; (w, I) \\<Turnstile> FIn m M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n  (w, I) \\<Turnstile> FIn m M\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "hence x_alt: \"x = map (case_prod (enc_atom I)) (zip [0 ..< length x] (stake (length x) (w @- sconst any)))\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n  (w, I) \\<Turnstile> FIn m M\n\ngoal (1 subgoal):\n 1. x =\n    map2 (enc_atom I) [0..<length x] (stake (length x) (w @- sconst any))", "by (intro encD) auto"], ["proof (state)\nthis:\n  x = map2 (enc_atom I) [0..<length x] (stake (length x) (w @- sconst any))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from FIn(1) *(2,4)"], ["proof (chain)\npicking this:\n  wf_formula n (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n  (w, I) \\<Turnstile> FIn m M", "obtain p P where p: \"I ! m = Inl p\" \"I ! M = Inr P\" \"p \\<in> P\""], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  wf_interp_for_formula (w, I) (FIn m M)\n  (w, I) \\<Turnstile> FIn m M\n\ngoal (1 subgoal):\n 1. (\\<And>p P.\n        \\<lbrakk>I ! m = Inl p; I ! M = Inr P; p \\<in> P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: all_set_conv_all_nth split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "with FIn(1) *(1,2,3)"], ["proof (chain)\npicking this:\n  wf_formula n (FIn m M)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P", "have p_less: \"p < length x\" \"\\<forall>p \\<in> P. p < length x\""], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. p < length x &&& \\<forall>p\\<in>P. p < length x", "by (auto simp del: stream_enc.simps intro: trans_less_add1[OF less_length_cut_same_Inl]\n        trans_less_add1[OF bspec[OF less_length_cut_same_Inr]])"], ["proof (state)\nthis:\n  p < length x\n  \\<forall>p\\<in>P. p < length x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "hence enc_atom: \"x ! p = enc_atom I p ((w @- sconst any) !! p)\" (is \"_ = enc_atom _ _ ?p\")\n            \"\\<forall>p \\<in> P. x ! p = enc_atom I p ((w @- sconst any) !! p)\" (is \"Ball _ (\\<lambda>p. _ = enc_atom _ _ (?P p))\")"], ["proof (prove)\nusing this:\n  p < length x\n  \\<forall>p\\<in>P. p < length x\n\ngoal (1 subgoal):\n 1. x ! p = enc_atom I p ((w @- sconst any) !! p) &&&\n    \\<forall>p\\<in>P. x ! p = enc_atom I p ((w @- sconst any) !! p)", "by (subst x_alt, simp)+"], ["proof (state)\nthis:\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  \\<forall>p\\<in>P. x ! p = enc_atom I p ((w @- sconst any) !! p)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "with *(1) p_less(1)"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  \\<forall>p\\<in>P. x ! p = enc_atom I p ((w @- sconst any) !! p)", "have \"x = take p x @ [enc_atom I p ?p] @ drop (p + 1) x\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  \\<forall>p\\<in>P. x ! p = enc_atom I p ((w @- sconst any) !! p)\n\ngoal (1 subgoal):\n 1. x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x", "using id_take_nth_drop[of p x]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  p < length x\n  x ! p = enc_atom I p ((w @- sconst any) !! p)\n  \\<forall>p\\<in>P. x ! p = enc_atom I p ((w @- sconst any) !! p)\n  p < length x \\<Longrightarrow> x = take p x @ x ! p # drop (Suc p) x\n\ngoal (1 subgoal):\n 1. x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x", "by auto"], ["proof (state)\nthis:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from *(2,3) FIn(1) p"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n  wf_formula n (FIn m M)\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P", "have \"[enc_atom I p ?p] \\<in> lang n (Atom (Arbitrary_Except2 m M))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n  wf_formula n (FIn m M)\n  I ! m = Inl p\n  I ! M = Inr P\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. [enc_atom I p ((w @- sconst any) !! p)]\n    \\<in> lang n (Atom (Arbitrary_Except2 m M))", "by (intro enc_atom_lang_Arbitrary_Except2) (auto simp: shift_snth)"], ["proof (state)\nthis:\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except2 m M))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except2 m M))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from *(2,3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n", "have \"take p x \\<in> lang n (rexp.Not Zero)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n\ngoal (1 subgoal):\n 1. take p x \\<in> lang n (rexp.Not Zero)", "by (subst x_alt) (auto simp: in_set_zip shift_snth intro!: enc_atom_\\<sigma> dest!: in_set_takeD)"], ["proof (state)\nthis:\n  take p x \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  take p x \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from *(2,3)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n", "have \"drop (Suc p) x \\<in> lang n (rexp.Not Zero)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n\ngoal (1 subgoal):\n 1. drop (Suc p) x \\<in> lang n (rexp.Not Zero)", "by (subst x_alt) (auto simp: in_set_zip shift_snth intro!: enc_atom_\\<sigma> dest!: in_set_dropD)"], ["proof (state)\nthis:\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FIn m M) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FIn m M))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "ultimately"], ["proof (chain)\npicking this:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  take p x \\<in> lang n (rexp.Not Zero)\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)", "show \"x \\<in> ?L n (FIn m M)\""], ["proof (prove)\nusing this:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  take p x \\<in> lang n (rexp.Not Zero)\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FIn m M))", "using *(1,2,3)"], ["proof (prove)\nusing this:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  take p x \\<in> lang n (rexp.Not Zero)\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FIn m M))", "unfolding rexp_of.simps lang.simps(6,9) rexp_of_list.simps Int_Diff lang_ENC_formula[OF FIn]"], ["proof (prove)\nusing this:\n  x = take p x @ [enc_atom I p ((w @- sconst any) !! p)] @ drop (p + 1) x\n  [enc_atom I p ((w @- sconst any) !! p)]\n  \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  take p x \\<in> lang n (rexp.Not Zero)\n  drop (Suc p) x \\<in> lang n (rexp.Not Zero)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp.Not Zero) @@\n            lang n (Atom (Arbitrary_Except2 m M)) @@\n            lang n (rexp.Not Zero) \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and> wf_interp_for_formula (w, I) (FIn m M)}", "by (auto elim: ssubst simp del: o_apply append.simps lang.simps enc.simps)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FIn m M))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "let ?x = \"x @- sconst (any, replicate n False)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "assume x: \"x \\<in> ?L n (FIn m M)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FIn m M))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "with FIn"], ["proof (chain)\npicking this:\n  wf_formula n (FIn m M)\n  x \\<in> lang n (rexp_of n (FIn m M))", "obtain w I where\n      I: \"x \\<in> enc (w, I)\" \"length I = n\" \"wf_interp_for_formula (w, I) (FIn m M)\""], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x \\<in> lang n (rexp_of n (FIn m M))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FIn m M)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps lang_ENC_formula[OF FIn]"], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x \\<in> lang n\n           (TIMES\n             [rexp.Not Zero, Atom (Arbitrary_Except2 m M),\n              rexp.Not Zero]) \\<inter>\n          \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and> wf_interp_for_formula (w, I) (FIn m M)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I) (FIn m M)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "hence stream_enc: \"stream_enc (w, I) = ?x\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = x @- sconst (any, replicate n False)", "using stream_enc_enc"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  \\<lbrakk>\\<forall>x\\<in>set ?I.\n              case x of Inl a \\<Rightarrow> True\n              | Inr P \\<Rightarrow> finite P;\n   ?v \\<in> enc (?w, ?I)\\<rbrakk>\n  \\<Longrightarrow> stream_enc (?w, ?I) =\n                    ?v @- sconst (any, replicate (length ?I) False)\n\ngoal (1 subgoal):\n 1. stream_enc (w, I) = x @- sconst (any, replicate n False)", "by auto"], ["proof (state)\nthis:\n  stream_enc (w, I) = x @- sconst (any, replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from I FIn"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  wf_formula n (FIn m M)", "obtain p P where m: \"I ! m = Inl p\" \"m < length I\" \"I ! M = Inr P\" \"M < length I\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  wf_formula n (FIn m M)\n\ngoal (1 subgoal):\n 1. (\\<And>p P.\n        \\<lbrakk>I ! m = Inl p; m < length I; I ! M = Inr P;\n         M < length I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: sum.splits)"], ["proof (state)\nthis:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "with I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I", "have \"wf_interp_for_formula (dec_word ?x, stream_dec n {m} ?x) (FIn m M)\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m} (x @- sconst (any, replicate n False)))\n     (FIn m M)", "unfolding I(1)"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m} (x @- sconst (any, replicate n False)))\n     (FIn m M)", "using enc_wf_interp[OF FIn(1)[folded I(2)]]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  \\<lbrakk>wf_interp_for_formula (?w, I) (FIn m M);\n   ?x \\<in> enc (?w, I)\\<rbrakk>\n  \\<Longrightarrow> wf_interp_for_formula\n                     (dec_word\n                       (?x @- sconst (any, replicate (length I) False)),\n                      stream_dec (length I) (FOV (FIn m M))\n                       (?x @- sconst (any, replicate (length I) False)))\n                     (FIn m M)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula\n     (dec_word (x @- sconst (any, replicate n False)),\n      stream_dec n {m} (x @- sconst (any, replicate n False)))\n     (FIn m M)", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FIn m M))", "obtain u1 u u2 where \"x = u1 @ u @ u2\"\n      \"u \\<in> lang n (Atom (Arbitrary_Except2 m M))\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FIn m M))\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> lang n (Atom (Arbitrary_Except2 m M))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rexp_of.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) @@\n          {[x] |x.\n           lookup (Arbitrary_Except2 m M) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) \\<inter>\n          lang n (ENC n (FOV (FIn m M)))\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> {[x] |x.\n                  lookup (Arbitrary_Except2 m M) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using concE"], ["proof (prove)\nusing this:\n  x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) @@\n          {[x] |x.\n           lookup (Arbitrary_Except2 m M) x \\<and>\n           x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n} @@\n          (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) - {}) \\<inter>\n          lang n (ENC n (FOV (FIn m M)))\n  \\<lbrakk>?w \\<in> ?A @@ ?B;\n   \\<And>u v.\n      \\<lbrakk>u \\<in> ?A; v \\<in> ?B; ?w = u @ v\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u1 u u2.\n        \\<lbrakk>x = u1 @ u @ u2;\n         u \\<in> {[x] |x.\n                  lookup (Arbitrary_Except2 m M) x \\<and>\n                  x \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (Arbitrary_Except2 m M))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "with FIn(1)"], ["proof (chain)\npicking this:\n  wf_formula n (FIn m M)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (Arbitrary_Except2 m M))", "obtain v where v: \"x = u1 @ [v] @ u2\" \"snd v ! m\" \"snd v ! M\" and \"fst v \\<in> set \\<Sigma>\""], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (Arbitrary_Except2 m M))\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>x = u1 @ [v] @ u2; snd v ! m; snd v ! M;\n         fst v \\<in> set \\<Sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Arbitrary_Except2D[of u n m M]"], ["proof (prove)\nusing this:\n  wf_formula n (FIn m M)\n  x = u1 @ u @ u2\n  u \\<in> lang n (Atom (Arbitrary_Except2 m M))\n  \\<lbrakk>u \\<in> lang n (Atom (Arbitrary_Except2 m M)); m < n;\n   M < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. u = [x] \\<and> snd x ! m \\<and> snd x ! M\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>x = u1 @ [v] @ u2; snd v ! m; snd v ! M;\n         fst v \\<in> set \\<Sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp (auto simp: \\<sigma>_def)"], ["proof (state)\nthis:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n  fst v \\<in> set \\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M", "have u: \"length u1 < length x\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n\ngoal (1 subgoal):\n 1. length u1 < length x", "by auto"], ["proof (state)\nthis:\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "{"], ["proof (state)\nthis:\n  length u1 < length x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M", "have \"snd (x ! length u1) ! m\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n\ngoal (1 subgoal):\n 1. snd (x ! length u1) ! m", "by auto"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  snd (x ! length u1) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)", "have \"p < length x\" \"snd (x ! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. p < length x &&& snd (x ! p) ! m", "by (auto dest: enc_Inl simp del: enc.simps)"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  p < length x\n  snd (x ! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from m I"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)", "have ex1: \"\\<exists>!p. snd (stream_enc (w, I) !! p) ! m\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. \\<exists>!p. snd (stream_enc (w, I) !! p) ! m", "by (intro stream_enc_unique) auto"], ["proof (state)\nthis:\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "ultimately"], ["proof (chain)\npicking this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m", "have \"p = length u1\""], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd (stream_enc (w, I) !! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "unfolding stream_enc"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m\n\ngoal (1 subgoal):\n 1. p = length u1", "using u I(3)"], ["proof (prove)\nusing this:\n  snd (x ! length u1) ! m\n  p < length x\n  snd (x ! p) ! m\n  \\<exists>!p. snd ((x @- sconst (any, replicate n False)) !! p) ! m\n  length u1 < length x\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. p = length u1", "by auto"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "}"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "note * = this"], ["proof (state)\nthis:\n  p = length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from v"], ["proof (chain)\npicking this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M", "have \"v = x ! length u1\""], ["proof (prove)\nusing this:\n  x = u1 @ [v] @ u2\n  snd v ! m\n  snd v ! M\n\ngoal (1 subgoal):\n 1. v = x ! length u1", "by simp"], ["proof (state)\nthis:\n  v = x ! length u1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "with v(3) m(3,4) u I(1,3)"], ["proof (chain)\npicking this:\n  snd v ! M\n  I ! M = Inr P\n  M < length I\n  length u1 < length x\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  v = x ! length u1", "have \"length u1 \\<in> P\""], ["proof (prove)\nusing this:\n  snd v ! M\n  I ! M = Inr P\n  M < length I\n  length u1 < length x\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n  v = x ! length u1\n\ngoal (1 subgoal):\n 1. length u1 \\<in> P", "by (auto dest!: enc_Inr simp del: enc.simps)"], ["proof (state)\nthis:\n  length u1 \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "with * m I"], ["proof (chain)\npicking this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  length u1 \\<in> P", "have \"(dec_word ?x, stream_dec n {m} ?x) \\<Turnstile> FIn m M\""], ["proof (prove)\nusing this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  length u1 \\<in> P\n\ngoal (1 subgoal):\n 1. (dec_word (x @- sconst (any, replicate n False)),\n     stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n    FIn m M", "using stream_enc_enc[OF _ I(1), symmetric]"], ["proof (prove)\nusing this:\n  p = length u1\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n  length u1 \\<in> P\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  x @- sconst (any, replicate (length I) False) = stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. (dec_word (x @- sconst (any, replicate n False)),\n     stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n    FIn m M", "by (auto simp del: stream_enc.simps dest: stream_dec_not_Inr stream_dec_not_Inl\n        stream_dec_enc_Inl stream_dec_enc_Inr split: sum.splits)"], ["proof (state)\nthis:\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FIn m M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FIn m M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from m I(2)"], ["proof (chain)\npicking this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  length I = n", "have stream_enc_dec: \"stream_enc (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) = stream_enc (w, I)\""], ["proof (prove)\nusing this:\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  length I = n\n\ngoal (1 subgoal):\n 1. stream_enc\n     (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n    stream_enc (w, I)", "by (intro stream_enc_dec)\n          (auto simp: smap2_alt sdrop_snth shift_snth intro: stream_enc_unique,\n           auto simp: smap2_szip stream.set_map)"], ["proof (state)\nthis:\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "moreover"], ["proof (state)\nthis:\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "from I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)", "have \"wf_word n x\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. wf_word n x", "unfolding wf_word"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. x \\<in> lists ((set \\<circ> \\<sigma> \\<Sigma>) n)", "by (auto elim: enc_set_\\<sigma> simp del: enc.simps)"], ["proof (state)\nthis:\n  wf_word n x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FIn m M)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "ultimately"], ["proof (chain)\npicking this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FIn m M)\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FIn m M\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x", "show \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FIn m M)\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FIn m M\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FIn m M)\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FIn m M\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FIn m M) \\<and>\n              (w, I) \\<Turnstile> FIn m M}", "using m I(1,3)"], ["proof (prove)\nusing this:\n  wf_interp_for_formula\n   (dec_word (x @- sconst (any, replicate n False)),\n    stream_dec n {m} (x @- sconst (any, replicate n False)))\n   (FIn m M)\n  (dec_word (x @- sconst (any, replicate n False)),\n   stream_dec n {m} (x @- sconst (any, replicate n False))) \\<Turnstile>\n  FIn m M\n  stream_enc\n   (dec_word (stream_enc (w, I)), stream_dec n {m} (stream_enc (w, I))) =\n  stream_enc (w, I)\n  wf_word n x\n  I ! m = Inl p\n  m < length I\n  I ! M = Inr P\n  M < length I\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FIn m M)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FIn m M) \\<and>\n              (w, I) \\<Turnstile> FIn m M}", "by (auto simp del: enc.simps stream_enc.simps intro!: exI[of _ \"enc (dec_word ?x, stream_dec n {m} ?x)\"],\n          fastforce simp del: enc.simps stream_enc.simps,\n          auto simp del: stream_enc.simps simp: stream_enc[symmetric] I(2))"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FIn m M) =\n  lang n (rexp_of n (FIn m M))\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "case (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S ?n2 \\<phi>\\<^sub>1 =\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>1)\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S ?n2 \\<phi>\\<^sub>2 =\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "from FOr(3)"], ["proof (chain)\npicking this:\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have IH1: \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 = lang n (rexp_of n \\<phi>\\<^sub>1)\""], ["proof (prove)\nusing this:\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 =\n    lang n (rexp_of n \\<phi>\\<^sub>1)", "by (intro FOr(1)) auto"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 =\n  lang n (rexp_of n \\<phi>\\<^sub>1)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "from FOr(3)"], ["proof (chain)\npicking this:\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have IH2: \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 = lang n (rexp_of n \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 =\n    lang n (rexp_of n \\<phi>\\<^sub>2)", "by (intro FOr(2)) auto"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 =\n  lang n (rexp_of n \\<phi>\\<^sub>2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FOr \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FOr \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n     (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) =\n    lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n 2. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n 2. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n 2. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "thus \"x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))", "using lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_FOr[OF FOr(3)]"], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  \\<subseteq> (lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                \\<phi>\\<^sub>1 \\<union>\n               lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                \\<phi>\\<^sub>2) \\<inter>\n              \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp_for_formula (w, I)\n                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))", "unfolding lang_ENC_formula[OF FOr(3)] rexp_of.simps lang.simps IH1 IH2"], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  \\<subseteq> (lang n (rexp_of n \\<phi>\\<^sub>1) \\<union>\n               lang n (rexp_of n \\<phi>\\<^sub>2)) \\<inter>\n              \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp_for_formula (w, I)\n                 (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. x \\<in> (lang n (rexp_of n \\<phi>\\<^sub>1) \\<union>\n             lang n (rexp_of n \\<phi>\\<^sub>2)) \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I)\n               (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "assume \"x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))", "obtain w I where or: \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<or> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\" and I: \"x \\<in> enc (w, I)\" \"length I = n\"\n      \"wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          \\<phi>\\<^sub>1 \\<or>\n                 x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          \\<phi>\\<^sub>2;\n         x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I)\n          (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang_ENC_formula[OF FOr(3)] rexp_of.simps lang.simps IH1 IH2 Int_Diff"], ["proof (prove)\nusing this:\n  x \\<in> (lang n (rexp_of n \\<phi>\\<^sub>1) \\<union>\n           lang n (rexp_of n \\<phi>\\<^sub>2)) \\<inter>\n          \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I)\n             (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> lang n (rexp_of n \\<phi>\\<^sub>1) \\<or>\n                 x \\<in> lang n (rexp_of n \\<phi>\\<^sub>2);\n         x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I)\n          (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<or>\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have \"(w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or> (w, I) \\<Turnstile> \\<phi>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "proof (intro mp[OF disj_mono[OF impI impI] or])"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>1 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n 2. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1\n\ngoal (2 subgoals):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>1 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n 2. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "with I FOr(3)"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1", "show \"(w, I) \\<Turnstile> \\<phi>\\<^sub>1\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def I(1) wf_interp_for_formula_FOr"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n            (w, I) \\<Turnstile> \\<phi>\\<^sub>1}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "by (auto dest!: enc_welldef[of x w I _ _ \\<phi>\\<^sub>1] simp del: enc.simps)"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "with I FOr(3)"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2", "show \"(w, I) \\<Turnstile> \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def I(1) wf_interp_for_formula_FOr"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) \\<phi>\\<^sub>2 \\<and>\n            (w, I) \\<Turnstile> \\<phi>\\<^sub>2}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "by (auto dest!: enc_welldef[of x w I _ _ \\<phi>\\<^sub>2] simp del: enc.simps)"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "with I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "show \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<or>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I)\n               (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<and>\n              (w, I) \\<Turnstile> FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2}", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n   (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) =\n  lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "case (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S ?n2 \\<phi>\\<^sub>1 =\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>1)\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S ?n2 \\<phi>\\<^sub>2 =\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "from FAnd(3)"], ["proof (chain)\npicking this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have IH1: \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 = lang n (rexp_of n \\<phi>\\<^sub>1)\""], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 =\n    lang n (rexp_of n \\<phi>\\<^sub>1)", "by (intro FAnd(1)) auto"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 =\n  lang n (rexp_of n \\<phi>\\<^sub>1)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "from FAnd(3)"], ["proof (chain)\npicking this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have IH2: \"lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 = lang n (rexp_of n \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 =\n    lang n (rexp_of n \\<phi>\\<^sub>2)", "by (intro FAnd(2)) auto"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 =\n  lang n (rexp_of n \\<phi>\\<^sub>2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>1 =\n                   lang n (rexp_of n \\<phi>1);\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>2 =\n           lang n (rexp_of n \\<phi>2);\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FAnd \\<phi>1 \\<phi>2) =\n                         lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n     (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) =\n    lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n 2. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n 2. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n 2. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "thus \"x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))", "using lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_FAnd[OF FAnd(3)]"], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n   (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  \\<subseteq> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<inter>\n              lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2 \\<inter>\n              \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp_for_formula (w, I)\n                 (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)}\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))", "unfolding lang_ENC_formula[OF FAnd(3)] rexp_of.simps rexp_of_list.simps lang.simps IH1 IH2 Int_assoc"], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n   (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  \\<subseteq> lang n (rexp_of n \\<phi>\\<^sub>1) \\<inter>\n              (lang n (rexp_of n \\<phi>\\<^sub>2) \\<inter>\n               \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp_for_formula (w, I)\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)})\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n \\<phi>\\<^sub>1) \\<inter>\n            (lang n (rexp_of n \\<phi>\\<^sub>2) \\<inter>\n             \\<Union>\n              {enc (w, I) |w I.\n               length I = n \\<and>\n               wf_interp_for_formula (w, I)\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)})", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "assume \"x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))", "obtain w I where \"and\": \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<and> x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\" and I: \"x \\<in> enc (w, I)\" \"length I = n\"\n      \"wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          \\<phi>\\<^sub>1 \\<and>\n                 x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          \\<phi>\\<^sub>2;\n         x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I)\n          (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang_ENC_formula[OF FAnd(3)] rexp_of.simps rexp_of_list.simps lang.simps IH1 IH2 Int_Diff"], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n \\<phi>\\<^sub>1) \\<inter>\n          (lang n (rexp_of n \\<phi>\\<^sub>2) \\<inter>\n           \\<Union>\n            {enc (w, I) |w I.\n             length I = n \\<and>\n             wf_interp_for_formula (w, I)\n              (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)})\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> lang n (rexp_of n \\<phi>\\<^sub>1) \\<and>\n                 x \\<in> lang n (rexp_of n \\<phi>\\<^sub>2);\n         x \\<in> enc (w, I); length I = n;\n         wf_interp_for_formula (w, I)\n          (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1 \\<and>\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "have \"(w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and> (w, I) \\<Turnstile> \\<phi>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "proof (intro mp[OF conj_mono[OF impI impI] \"and\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>1 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n 2. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1\n\ngoal (2 subgoals):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>1 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n 2. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "with I FAnd(3)"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1", "show \"(w, I) \\<Turnstile> \\<phi>\\<^sub>1\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def I(1) wf_interp_for_formula_FAnd"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n            (w, I) \\<Turnstile> \\<phi>\\<^sub>1}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>1", "by (auto dest!: enc_welldef[of x w I _ _ \\<phi>\\<^sub>1] simp del: enc.simps)"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             \\<phi>\\<^sub>2 \\<Longrightarrow>\n    (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "with I FAnd(3)"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2", "show \"(w, I) \\<Turnstile> \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def I(1) wf_interp_for_formula_FAnd"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>1 \\<and>\n  wf_interp_for_formula (w, I) \\<phi>\\<^sub>2\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) \\<phi>\\<^sub>2 \\<and>\n            (w, I) \\<Turnstile> \\<phi>\\<^sub>2}\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "by (auto dest!: enc_welldef[of x w I _ _ \\<phi>\\<^sub>2] simp del: enc.simps)"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n\n                (rexp_of n\n                  (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "with I"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2", "show \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n             (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  length I = n\n  wf_interp_for_formula (w, I) (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>1 \\<and>\n  (w, I) \\<Turnstile> \\<phi>\\<^sub>2\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I)\n               (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) \\<and>\n              (w, I) \\<Turnstile> FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2}", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n           (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n   (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) =\n  lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "case (FNot \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S ?n2 \\<phi> =\n  lang ?n2 (rexp_of ?n2 \\<phi>)\n  wf_formula n (FNot \\<phi>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "hence IH: \"?L n \\<phi> =  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S ?n2 \\<phi> =\n  lang ?n2 (rexp_of ?n2 \\<phi>)\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n \\<phi>) =\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>", "by simp"], ["proof (state)\nthis:\n  lang n (rexp_of n \\<phi>) = lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n\ngoal (3 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FNot \\<phi>) =\n                         lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 3. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>) =\n    lang n (rexp_of n (FNot \\<phi>))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "obtain w I where\n      *: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) \\<phi>\" \"length I = n\" and unsat: \"\\<not> (w, I) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); wf_interp_for_formula (w, I) \\<phi>;\n         length I = n; \\<not> (w, I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) (FNot \\<phi>) \\<and>\n            (w, I) \\<Turnstile> FNot \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I); wf_interp_for_formula (w, I) \\<phi>;\n         length I = n; \\<not> (w, I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  \\<not> (w, I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "{"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  \\<not> (w, I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "assume \"x \\<in> ?L n \\<phi>\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "hence \"(w, I) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n \\<phi>)\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>", "using enc_welldef[of x w I _ _ \\<phi>, OF *(1) _ _ _ *(2)] FNot(2)"], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n \\<phi>)\n  \\<lbrakk>x \\<in> enc (?w', ?I'); length I = length ?I';\n   wf_formula (length I) \\<phi>;\n   wf_interp_for_formula (?w', ?I') \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                    ((?w', ?I') \\<Turnstile> \\<phi>)\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>", "unfolding *(3) lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def IH"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) \\<phi> \\<and>\n            (w, I) \\<Turnstile> \\<phi>}\n  \\<lbrakk>x \\<in> enc (?w', ?I'); n = length ?I'; wf_formula n \\<phi>;\n   wf_interp_for_formula (?w', ?I') \\<phi>\\<rbrakk>\n  \\<Longrightarrow> ((w, I) \\<Turnstile> \\<phi>) =\n                    ((?w', ?I') \\<Turnstile> \\<phi>)\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. (w, I) \\<Turnstile> \\<phi>", "by auto"], ["proof (state)\nthis:\n  (w, I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "}"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n \\<phi>) \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "with unsat"], ["proof (chain)\npicking this:\n  \\<not> (w, I) \\<Turnstile> \\<phi>\n  x \\<in> lang n (rexp_of n \\<phi>) \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi>", "have \"x \\<notin> ?L n \\<phi>\""], ["proof (prove)\nusing this:\n  \\<not> (w, I) \\<Turnstile> \\<phi>\n  x \\<in> lang n (rexp_of n \\<phi>) \\<Longrightarrow>\n  (w, I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<notin> lang n (rexp_of n \\<phi>)", "by blast"], ["proof (state)\nthis:\n  x \\<notin> lang n (rexp_of n \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FNot \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FNot \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "with *"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  x \\<notin> lang n (rexp_of n \\<phi>)", "show \"x \\<in> ?L n (FNot \\<phi>)\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  x \\<notin> lang n (rexp_of n \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FNot \\<phi>))", "unfolding rexp_of.simps lang.simps"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  x \\<notin> lang n (rexp_of n \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n             lang n (rexp_of n \\<phi>)) \\<inter>\n            lang n (ENC n (FOV (FNot \\<phi>)))", "using lang_ENC_formula[OF FNot(2)]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = n\n  x \\<notin> lang n (rexp_of n \\<phi>)\n  lang n (ENC n (FOV (FNot \\<phi>))) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = n \\<and> wf_interp_for_formula (w, I) (FNot \\<phi>)}\n\ngoal (1 subgoal):\n 1. x \\<in> (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n             lang n (rexp_of n \\<phi>)) \\<inter>\n            lang n (ENC n (FOV (FNot \\<phi>)))", "by (auto simp del: enc.simps simp: comp_def intro: enc_set_\\<sigma>)"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FNot \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "assume \"x \\<in> ?L n (FNot \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FNot \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "with IH"], ["proof (chain)\npicking this:\n  lang n (rexp_of n \\<phi>) = lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n  x \\<in> lang n (rexp_of n (FNot \\<phi>))", "have \"x \\<in> lang n (ENC n (FOV (FNot \\<phi>)))\" and x: \"x \\<notin> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\""], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>) = lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n  x \\<in> lang n (rexp_of n (FNot \\<phi>))\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV (FNot \\<phi>))) &&&\n    x \\<notin> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>", "by (auto simp del: o_apply)"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV (FNot \\<phi>)))\n  x \\<notin> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FNot \\<phi>)))\n  x \\<notin> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>", "obtain w I where *: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FNot \\<phi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FNot \\<phi>)))\n  x \\<notin> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FNot \\<phi>); length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang_ENC_formula[OF FNot(2)]"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and> wf_interp_for_formula (w, I) (FNot \\<phi>)}\n  x \\<notin> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FNot \\<phi>); length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "{"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "assume \"\\<not> (w, I) \\<Turnstile> FNot \\<phi>\""], ["proof (state)\nthis:\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "with *"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi>", "have \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) \\<phi> \\<and>\n              (w, I) \\<Turnstile> \\<phi>}", "by auto"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "}"], ["proof (state)\nthis:\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi> \\<Longrightarrow>\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FNot \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "with x *"], ["proof (chain)\npicking this:\n  x \\<notin> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi> \\<Longrightarrow>\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>", "show \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)\""], ["proof (prove)\nusing this:\n  x \\<notin> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi> \\<Longrightarrow>\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<notin> \\<Union>\n              {enc (w, I) |w I.\n               length I = n \\<and>\n               wf_interp_for_formula (w, I) \\<phi> \\<and>\n               (w, I) \\<Turnstile> \\<phi>}\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FNot \\<phi>)\n  length I = n\n  \\<not> (w, I) \\<Turnstile> FNot \\<phi> \\<Longrightarrow>\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) \\<phi> \\<and>\n            (w, I) \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FNot \\<phi>) \\<and>\n              (w, I) \\<Turnstile> FNot \\<phi>}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FNot \\<phi>) =\n  lang n (rexp_of n (FNot \\<phi>))\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "case (FExists \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S ?n2 \\<phi> =\n  lang ?n2 (rexp_of ?n2 \\<phi>)\n  wf_formula n (FExists \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "have \\<sigma>: \"(any, replicate n False) \\<in> (set o \\<sigma> \\<Sigma>) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (any, replicate n False) \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n", "by (auto simp: \\<sigma>_def set_n_lists image_iff)"], ["proof (state)\nthis:\n  (any, replicate n False) \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "from FExists(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)", "have wf: \"wf n (Pr (rexp_of (Suc n) \\<phi>))\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. local.wf n (Pr (rexp_of (Suc n) \\<phi>))", "by (fastforce intro: wf_rexp_of)"], ["proof (state)\nthis:\n  local.wf n (Pr (rexp_of (Suc n) \\<phi>))\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "note lang_quot = lang_samequot_exec[OF wf \\<sigma>]"], ["proof (state)\nthis:\n  lang n\n   (samequot_exec (any, replicate n False) (Pr (rexp_of (Suc n) \\<phi>))) =\n  SAMEQUOT (any, replicate n False) (lang n (Pr (rexp_of (Suc n) \\<phi>)))\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FExists \\<phi>) =\n                         lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>) =\n    lang n (rexp_of n (FExists \\<phi>))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "obtain w I p where\n      *: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FExists \\<phi>)\" \"length I = n\" \"(w, Inl p # I) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>w I p.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FExists \\<phi>); length I = n;\n         (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) (FExists \\<phi>) \\<and>\n            (w, I) \\<Turnstile> FExists \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I p.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FExists \\<phi>); length I = n;\n         (w, Inl p # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "with FExists(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  (w, Inl p # I) \\<Turnstile> \\<phi>", "have \"enc (w, Inl p # I) \\<subseteq> ?L (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  (w, Inl p # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. enc (w, Inl p # I) \\<subseteq> lang (Suc n) (rexp_of (Suc n) \\<phi>)", "by (subst FExists(1)[of \"Suc n\", symmetric])\n        (fastforce simp del: enc.simps simp: lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def nth_Cons' intro!: exI[of _ \"enc (w, Inl p # I)\"])+"], ["proof (state)\nthis:\n  enc (w, Inl p # I) \\<subseteq> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FExists \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FExists \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "thus \"x \\<in> ?L n (FExists \\<phi>)\""], ["proof (prove)\nusing this:\n  enc (w, Inl p # I) \\<subseteq> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FExists \\<phi>))", "using *(1,2,3)"], ["proof (prove)\nusing this:\n  enc (w, Inl p # I) \\<subseteq> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FExists \\<phi>))", "by (auto simp: lang_quot simp del: o_apply enc.simps elim: subsetD[OF SAMEQUOT_mono[OF image_mono]])"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FExists \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "assume \"x \\<in> ?L n (FExists \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FExists \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FExists \\<phi>))", "obtain x' m where \"x' \\<in> ?L (Suc n) \\<phi>\" and\n      x: \"x = fin_cut_same (any, replicate n False) (map \\<pi> x') @ replicate m (any, replicate n False)\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FExists \\<phi>))\n\ngoal (1 subgoal):\n 1. (\\<And>x' m.\n        \\<lbrakk>x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>);\n         x =\n         fin_cut_same (any, replicate n False) (map \\<pi> x') @\n         replicate m (any, replicate n False)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: lang_quot SAMEQUOT_def simp del: o_apply enc.simps)"], ["proof (state)\nthis:\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n  x =\n  fin_cut_same (any, replicate n False) (map \\<pi> x') @\n  replicate m (any, replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "with FExists(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n  x =\n  fin_cut_same (any, replicate n False) (map \\<pi> x') @\n  replicate m (any, replicate n False)", "have \"x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n  x =\n  fin_cut_same (any, replicate n False) (map \\<pi> x') @\n  replicate m (any, replicate n False)\n\ngoal (1 subgoal):\n 1. x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>", "by (intro subsetD[OF equalityD2[OF FExists(1)], of \"Suc n\" x'])\n        (auto split: if_split_asm sum.splits)"], ["proof (state)\nthis:\n  x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>", "obtain w I' where\n      *: \"x' \\<in> enc (w, I')\" \"wf_interp_for_formula (w, I') \\<phi>\" \"length I' = Suc n\" \"(w, I') \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>w I'.\n        \\<lbrakk>x' \\<in> enc (w, I'); wf_interp_for_formula (w, I') \\<phi>;\n         length I' = Suc n; (w, I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x' \\<in> \\<Union>\n            {enc (w, I) |w I.\n             length I = Suc n \\<and>\n             wf_interp_for_formula (w, I) \\<phi> \\<and>\n             (w, I) \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I'.\n        \\<lbrakk>x' \\<in> enc (w, I'); wf_interp_for_formula (w, I') \\<phi>;\n         length I' = Suc n; (w, I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "moreover"], ["proof (state)\nthis:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>", "obtain I\\<^sub>0 I where \"I' = I\\<^sub>0 # I\""], ["proof (prove)\nusing this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>I\\<^sub>0 I.\n        I' = I\\<^sub>0 # I \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I') auto"], ["proof (state)\nthis:\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "moreover"], ["proof (state)\nthis:\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "with FExists(2) *(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)\n  wf_interp_for_formula (w, I') \\<phi>\n  I' = I\\<^sub>0 # I", "obtain p where \"I\\<^sub>0 = Inl p\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  wf_interp_for_formula (w, I') \\<phi>\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. (\\<And>p. I\\<^sub>0 = Inl p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: nth_Cons' split: sum.splits if_split_asm)"], ["proof (state)\nthis:\n  I\\<^sub>0 = Inl p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inl p", "have \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FExists \\<phi>)\" \"length I = n\"\n      \"(w, I) \\<Turnstile> FExists \\<phi>\""], ["proof (prove)\nusing this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inl p\n\ngoal (1 subgoal):\n 1. (x \\<in> enc (w, I) &&&\n     wf_interp_for_formula (w, I) (FExists \\<phi>)) &&&\n    length I = n &&& (w, I) \\<Turnstile> FExists \\<phi>", "using FExists(2) fin_cut_same_tl[OF ex_Loop_stream_enc, of \"Inl p # I\" w]"], ["proof (prove)\nusing this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inl p\n  wf_formula n (FExists \\<phi>)\n  \\<forall>x\\<in>set (Inl p # I).\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  fin_cut_same (\\<pi> (any, replicate (length (Inl p # I)) False))\n   (map \\<pi>\n     (cut_same (any, replicate (length (Inl p # I)) False)\n       (stream_enc (w, Inl p # I)))) =\n  cut_same (\\<pi> (any, replicate (length (Inl p # I)) False))\n   (smap \\<pi> (stream_enc (w, Inl p # I)))\n\ngoal (1 subgoal):\n 1. (x \\<in> enc (w, I) &&&\n     wf_interp_for_formula (w, I) (FExists \\<phi>)) &&&\n    length I = n &&& (w, I) \\<Turnstile> FExists \\<phi>", "unfolding x"], ["proof (prove)\nusing this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inl p\n  wf_formula n (FExists \\<phi>)\n  \\<forall>x\\<in>set (Inl p # I).\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  fin_cut_same (\\<pi> (any, replicate (length (Inl p # I)) False))\n   (map \\<pi>\n     (cut_same (any, replicate (length (Inl p # I)) False)\n       (stream_enc (w, Inl p # I)))) =\n  cut_same (\\<pi> (any, replicate (length (Inl p # I)) False))\n   (smap \\<pi> (stream_enc (w, Inl p # I)))\n\ngoal (1 subgoal):\n 1. (fin_cut_same (any, replicate n False) (map \\<pi> x') @\n     replicate m (any, replicate n False)\n     \\<in> enc (w, I) &&&\n     wf_interp_for_formula (w, I) (FExists \\<phi>)) &&&\n    length I = n &&& (w, I) \\<Turnstile> FExists \\<phi>", "by (auto simp add: \\<pi>_def nth_Cons' split: if_split_asm)"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FExists \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "thus \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n  (w, I) \\<Turnstile> FExists \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FExists \\<phi>) \\<and>\n              (w, I) \\<Turnstile> FExists \\<phi>}", "by (auto intro!: exI[of _ I])"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FExists \\<phi>) =\n  lang n (rexp_of n (FExists \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "case (FEXISTS \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S ?n2 \\<phi> =\n  lang ?n2 (rexp_of ?n2 \\<phi>)\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "have \\<sigma>: \"(any, replicate n False) \\<in> (set o \\<sigma> \\<Sigma>) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (any, replicate n False) \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n", "by (auto simp: \\<sigma>_def set_n_lists image_iff)"], ["proof (state)\nthis:\n  (any, replicate n False) \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "from FEXISTS(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FEXISTS \\<phi>)", "have wf: \"wf n (Pr (rexp_of (Suc n) \\<phi>))\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. local.wf n (Pr (rexp_of (Suc n) \\<phi>))", "by (fastforce intro: wf_rexp_of)"], ["proof (state)\nthis:\n  local.wf n (Pr (rexp_of (Suc n) \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "note lang_quot = lang_samequot_exec[OF wf \\<sigma>]"], ["proof (state)\nthis:\n  lang n\n   (samequot_exec (any, replicate n False) (Pr (rexp_of (Suc n) \\<phi>))) =\n  SAMEQUOT (any, replicate n False) (lang n (Pr (rexp_of (Suc n) \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n                   lang n (rexp_of n \\<phi>);\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                          (FEXISTS \\<phi>) =\n                         lang n (rexp_of n (FEXISTS \\<phi>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>) =\n    lang n (rexp_of n (FEXISTS \\<phi>))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "assume \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "obtain w I P where\n      *: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\" \"length I = n\" \"finite P\" \"(w, Inr P # I) \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>w I P.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FEXISTS \\<phi>); length I = n;\n         finite P; (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           {enc (w, I) |w I.\n            length I = n \\<and>\n            wf_interp_for_formula (w, I) (FEXISTS \\<phi>) \\<and>\n            (w, I) \\<Turnstile> FEXISTS \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I P.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FEXISTS \\<phi>); length I = n;\n         finite P; (w, Inr P # I) \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "with FEXISTS(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>", "have \"enc (w, Inr P # I) \\<subseteq> ?L (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  finite P\n  (w, Inr P # I) \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. enc (w, Inr P # I) \\<subseteq> lang (Suc n) (rexp_of (Suc n) \\<phi>)", "by (subst FEXISTS(1)[of \"Suc n\", symmetric])\n        (fastforce simp del: enc.simps simp: lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def nth_Cons' intro!: exI[of _ \"enc (w, Inr P # I)\"])+"], ["proof (state)\nthis:\n  enc (w, Inr P # I) \\<subseteq> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n\n                (FEXISTS \\<phi>) \\<Longrightarrow>\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))\n 2. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "thus \"x \\<in> ?L n (FEXISTS \\<phi>)\""], ["proof (prove)\nusing this:\n  enc (w, Inr P # I) \\<subseteq> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))", "using *(1,2,3,4)"], ["proof (prove)\nusing this:\n  enc (w, Inr P # I) \\<subseteq> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  finite P\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))", "by (auto simp: lang_quot simp del: o_apply enc.simps elim: subsetD[OF SAMEQUOT_mono[OF image_mono]])"], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "assume \"x \\<in> ?L n (FEXISTS \\<phi>)\""], ["proof (state)\nthis:\n  x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))", "obtain x' m where \"x' \\<in> ?L (Suc n) \\<phi>\" and\n      x: \"x = fin_cut_same (any, replicate n False) (map \\<pi> x') @ replicate m (any, replicate n False)\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (rexp_of n (FEXISTS \\<phi>))\n\ngoal (1 subgoal):\n 1. (\\<And>x' m.\n        \\<lbrakk>x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>);\n         x =\n         fin_cut_same (any, replicate n False) (map \\<pi> x') @\n         replicate m (any, replicate n False)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: lang_quot SAMEQUOT_def simp del: o_apply enc.simps)"], ["proof (state)\nthis:\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n  x =\n  fin_cut_same (any, replicate n False) (map \\<pi> x') @\n  replicate m (any, replicate n False)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "with FEXISTS(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FEXISTS \\<phi>)\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n  x =\n  fin_cut_same (any, replicate n False) (map \\<pi> x') @\n  replicate m (any, replicate n False)", "have \"x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  x' \\<in> lang (Suc n) (rexp_of (Suc n) \\<phi>)\n  x =\n  fin_cut_same (any, replicate n False) (map \\<pi> x') @\n  replicate m (any, replicate n False)\n\ngoal (1 subgoal):\n 1. x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>", "by (intro subsetD[OF equalityD2[OF FEXISTS(1)], of \"Suc n\" x'])\n        (auto split: if_split_asm sum.splits)"], ["proof (state)\nthis:\n  x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>", "obtain w I' where\n      *: \"x' \\<in> enc (w, I')\" \"wf_interp_for_formula (w, I') \\<phi>\" \"length I' = Suc n\" \"(w, I') \\<Turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  x' \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S (Suc n) \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>w I'.\n        \\<lbrakk>x' \\<in> enc (w, I'); wf_interp_for_formula (w, I') \\<phi>;\n         length I' = Suc n; (w, I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x' \\<in> \\<Union>\n            {enc (w, I) |w I.\n             length I = Suc n \\<and>\n             wf_interp_for_formula (w, I) \\<phi> \\<and>\n             (w, I) \\<Turnstile> \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I'.\n        \\<lbrakk>x' \\<in> enc (w, I'); wf_interp_for_formula (w, I') \\<phi>;\n         length I' = Suc n; (w, I') \\<Turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "moreover"], ["proof (state)\nthis:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "then"], ["proof (chain)\npicking this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>", "obtain I\\<^sub>0 I where \"I' = I\\<^sub>0 # I\""], ["proof (prove)\nusing this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>I\\<^sub>0 I.\n        I' = I\\<^sub>0 # I \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I') auto"], ["proof (state)\nthis:\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "moreover"], ["proof (state)\nthis:\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "with FEXISTS(2) *(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I') \\<phi>\n  I' = I\\<^sub>0 # I", "obtain P where \"I\\<^sub>0 = Inr P\" \"finite P\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  wf_interp_for_formula (w, I') \\<phi>\n  I' = I\\<^sub>0 # I\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>I\\<^sub>0 = Inr P; finite P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: nth_Cons' split: sum.splits if_split_asm)"], ["proof (state)\nthis:\n  I\\<^sub>0 = Inr P\n  finite P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "ultimately"], ["proof (chain)\npicking this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inr P\n  finite P", "have \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\" \"length I = n\"\n      \"(w, I) \\<Turnstile> FEXISTS \\<phi>\""], ["proof (prove)\nusing this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inr P\n  finite P\n\ngoal (1 subgoal):\n 1. (x \\<in> enc (w, I) &&&\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>)) &&&\n    length I = n &&& (w, I) \\<Turnstile> FEXISTS \\<phi>", "using FEXISTS(2) fin_cut_same_tl[OF ex_Loop_stream_enc, of \"Inr P # I\"]"], ["proof (prove)\nusing this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inr P\n  finite P\n  wf_formula n (FEXISTS \\<phi>)\n  \\<forall>x\\<in>set (Inr P # I).\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  fin_cut_same (\\<pi> (any, replicate (length (Inr P # I)) False))\n   (map \\<pi>\n     (cut_same (any, replicate (length (Inr P # I)) False)\n       (stream_enc (?w2, Inr P # I)))) =\n  cut_same (\\<pi> (any, replicate (length (Inr P # I)) False))\n   (smap \\<pi> (stream_enc (?w2, Inr P # I)))\n\ngoal (1 subgoal):\n 1. (x \\<in> enc (w, I) &&&\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>)) &&&\n    length I = n &&& (w, I) \\<Turnstile> FEXISTS \\<phi>", "unfolding x"], ["proof (prove)\nusing this:\n  x' \\<in> enc (w, I')\n  wf_interp_for_formula (w, I') \\<phi>\n  length I' = Suc n\n  (w, I') \\<Turnstile> \\<phi>\n  I' = I\\<^sub>0 # I\n  I\\<^sub>0 = Inr P\n  finite P\n  wf_formula n (FEXISTS \\<phi>)\n  \\<forall>x\\<in>set (Inr P # I).\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  fin_cut_same (\\<pi> (any, replicate (length (Inr P # I)) False))\n   (map \\<pi>\n     (cut_same (any, replicate (length (Inr P # I)) False)\n       (stream_enc (?w2, Inr P # I)))) =\n  cut_same (\\<pi> (any, replicate (length (Inr P # I)) False))\n   (smap \\<pi> (stream_enc (?w2, Inr P # I)))\n\ngoal (1 subgoal):\n 1. (fin_cut_same (any, replicate n False) (map \\<pi> x') @\n     replicate m (any, replicate n False)\n     \\<in> enc (w, I) &&&\n     wf_interp_for_formula (w, I) (FEXISTS \\<phi>)) &&&\n    length I = n &&& (w, I) \\<Turnstile> FEXISTS \\<phi>", "by (auto simp: nth_Cons' \\<pi>_def split: if_split_asm)"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lang n (rexp_of n (FEXISTS \\<phi>)) \\<Longrightarrow>\n       x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "thus \"x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_def"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n  (w, I) \\<Turnstile> FEXISTS \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FEXISTS \\<phi>) \\<and>\n              (w, I) \\<Turnstile> FEXISTS \\<phi>}", "by (auto intro!: exI[of _ I])"], ["proof (state)\nthis:\n  x \\<in> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n (FEXISTS \\<phi>) =\n  lang n (rexp_of n (FEXISTS \\<phi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_rexp_of_alt: \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of_alt n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of_alt n \\<phi>)", "by (induct \\<phi> arbitrary: n)\n    (auto intro!: wf_samequot_exec wf_rexp_ENC,\n     auto simp: max_idx_vars finite_FOV)"], ["", "lemma wf_rexp_of': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of' n \\<phi>)", "unfolding rexp_of'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    local.wf n (rexp.Inter (rexp_of_alt n \\<phi>) (ENC n (FOV \\<phi>)))", "by (auto simp: max_idx_vars intro: wf_rexp_of_alt wf_rexp_ENC[OF finite_FOV])"], ["", "lemma wf_rexp_of_alt': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of_alt' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of_alt' n \\<phi>)", "by (induct \\<phi> arbitrary: n)\n    (auto intro!: wf_samequot_exec wf_rexp_ENC,\n     auto simp: max_idx_vars finite_FOV)"], ["", "lemma wf_rexp_of'': \"wf_formula n \\<phi> \\<Longrightarrow> wf n (rexp_of'' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow> local.wf n (rexp_of'' n \\<phi>)", "unfolding rexp_of''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    local.wf n (rexp.Inter (rexp_of_alt' n \\<phi>) (ENC n (FOV \\<phi>)))", "by (auto simp: wf_rexp_ENC wf_rexp_of_alt' finite_FOV max_idx_vars)"], ["", "lemma ENC_FNot: \"ENC n (FOV (FNot \\<phi>)) = ENC n (FOV \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ENC n (FOV (FNot \\<phi>)) = ENC n (FOV \\<phi>)", "unfolding ENC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. INTERSECT (sorted_list_of_set (valid_ENC n ` FOV (FNot \\<phi>))) =\n    INTERSECT (sorted_list_of_set (valid_ENC n ` FOV \\<phi>))", "by auto"], ["", "lemma ENC_FAnd:\n  \"wf_formula n (FAnd \\<phi> \\<psi>) \\<Longrightarrow> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n (FAnd \\<phi> \\<psi>) \\<Longrightarrow>\n    lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\n    \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                lang n (ENC n (FOV \\<psi>))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "assume wf: \"wf_formula n (FAnd \\<phi> \\<psi>)\" and x: \"x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\""], ["proof (state)\nthis:\n  wf_formula n (FAnd \\<phi> \\<psi>)\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "hence wf1: \"wf_formula n \\<phi>\" and wf2: \"wf_formula n \\<psi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FAnd \\<phi> \\<psi>)\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> &&& wf_formula n \\<psi>", "by auto"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\n  wf_formula n \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))", "obtain w I where I: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\n  lang n (ENC n (FOV (FAnd \\<phi> \\<psi>))) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = n \\<and> wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "hence \"wf_interp_for_formula (w, I) \\<phi>\" \"wf_interp_for_formula (w, I) \\<psi>\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) \\<phi> &&&\n    wf_interp_for_formula (w, I) \\<psi>", "using wf_interp_for_formula_FAnd"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\n  length I = n\n  wf_interp_for_formula (?w, ?I) (FAnd ?\\<phi>1.0 ?\\<phi>2.0) =\n  (wf_interp_for_formula (?w, ?I) ?\\<phi>1.0 \\<and>\n   wf_interp_for_formula (?w, ?I) ?\\<phi>2.0)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) \\<phi> &&&\n    wf_interp_for_formula (w, I) \\<psi>", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FAnd \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FAnd \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "thus \"x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))", "unfolding lang_ENC_formula[OF wf1] lang_ENC_formula[OF wf2]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) \\<phi>} \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and> wf_interp_for_formula (w, I) \\<psi>}", "using I"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FAnd \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) \\<phi>} \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and> wf_interp_for_formula (w, I) \\<psi>}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ENC_FOr:\n  \"wf_formula n (FOr \\<phi> \\<psi>) \\<Longrightarrow> lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n (FOr \\<phi> \\<psi>) \\<Longrightarrow>\n    lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\n    \\<subseteq> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                lang n (ENC n (FOV \\<psi>))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "assume wf: \"wf_formula n (FOr \\<phi> \\<psi>)\" and x: \"x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\""], ["proof (state)\nthis:\n  wf_formula n (FOr \\<phi> \\<psi>)\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "hence wf1: \"wf_formula n \\<phi>\" and wf2: \"wf_formula n \\<psi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FOr \\<phi> \\<psi>)\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> &&& wf_formula n \\<psi>", "by auto"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\n  wf_formula n \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))", "obtain w I where I: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\n  lang n (ENC n (FOV (FOr \\<phi> \\<psi>))) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = n \\<and> wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "hence \"wf_interp_for_formula (w, I) \\<phi>\" \"wf_interp_for_formula (w, I) \\<psi>\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) \\<phi> &&&\n    wf_interp_for_formula (w, I) \\<psi>", "using wf_interp_for_formula_FOr"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\n  length I = n\n  wf_interp_for_formula (?w, ?I) (FOr ?\\<phi>1.0 ?\\<phi>2.0) =\n  (wf_interp_for_formula (?w, ?I) ?\\<phi>1.0 \\<and>\n   wf_interp_for_formula (?w, ?I) ?\\<phi>2.0)\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I) \\<phi> &&&\n    wf_interp_for_formula (w, I) \\<psi>", "by auto"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FOr \\<phi> \\<psi>);\n        x \\<in> lang n (ENC n (FOV (FOr \\<phi> \\<psi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter>\n                                 lang n (ENC n (FOV \\<psi>))", "thus \"x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))", "unfolding lang_ENC_formula[OF wf1] lang_ENC_formula[OF wf2]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) \\<phi>} \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and> wf_interp_for_formula (w, I) \\<psi>}", "using I"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) \\<phi>\n  wf_interp_for_formula (w, I) \\<psi>\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FOr \\<phi> \\<psi>)\n  length I = n\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) \\<phi>} \\<inter>\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and> wf_interp_for_formula (w, I) \\<psi>}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV \\<phi>)) \\<inter> lang n (ENC n (FOV \\<psi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ENC_FExists:\n  \"wf_formula n (FExists \\<phi>) \\<Longrightarrow> lang n (ENC n (FOV (FExists \\<phi>))) =\n  SAMEQUOT (any, replicate n False) (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\" (is \"_ \\<Longrightarrow> ?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n (FExists \\<phi>) \\<Longrightarrow>\n    lang n (ENC n (FOV (FExists \\<phi>))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "assume wf: \"wf_formula n (FExists \\<phi>)\" and x: \"x \\<in> ?L\""], ["proof (state)\nthis:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "hence wf1: \"wf_formula (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\n\ngoal (1 subgoal):\n 1. wf_formula (Suc n) \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (Suc n) \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "obtain w I where I: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FExists \\<phi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FExists \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\n  lang n (ENC n (FOV (FExists \\<phi>))) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = n \\<and> wf_interp_for_formula (w, I) (FExists \\<phi>)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FExists \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "from I(2)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)", "obtain p where \"wf_interp_for_formula (w, Inl p # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        wf_interp_for_formula (w, Inl p # I) \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using wf_interp_for_formula_FExists[OF wf[folded I(3)]]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FExists \\<phi>)\n  wf_interp_for_formula (?w, I) (FExists \\<phi>) =\n  (\\<forall>p. wf_interp_for_formula (?w, Inl p # I) \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        wf_interp_for_formula (w, Inl p # I) \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "with I(3)"], ["proof (chain)\npicking this:\n  length I = n\n  wf_interp_for_formula (w, Inl p # I) \\<phi>", "show \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> SAMEQUOT (any, replicate n False)\n             (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))", "unfolding lang_ENC_formula[OF wf1]"], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> SAMEQUOT (any, replicate n False)\n             (map \\<pi> `\n              \\<Union>\n               {enc (w, I) |w I.\n                length I = Suc n \\<and>\n                wf_interp_for_formula (w, I) \\<phi>})", "using I(1) tl_enc[of \"Inl p\" I, symmetric]"], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, Inl p # I) \\<phi>\n  x \\<in> enc (w, I)\n  \\<forall>x\\<in>set (Inl p # I).\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  enc (?w, I) =\n  SAMEQUOT (any, replicate (length I) False)\n   (map \\<pi> ` enc (?w, Inl p # I))\n\ngoal (1 subgoal):\n 1. x \\<in> SAMEQUOT (any, replicate n False)\n             (map \\<pi> `\n              \\<Union>\n               {enc (w, I) |w I.\n                length I = Suc n \\<and>\n                wf_interp_for_formula (w, I) \\<phi>})", "by (simp del: enc.simps) \n      (fastforce simp del: enc.simps elim!: rev_subsetD[OF _ SAMEQUOT_mono[OF image_mono]]\n        intro: exI[of _ \"enc (w, Inl p # I)\"])"], ["proof (state)\nthis:\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "assume wf: \"wf_formula n (FExists \\<phi>)\" and x: \"x \\<in> ?R\""], ["proof (state)\nthis:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "hence wf1: \"wf_formula (Suc n) \\<phi>\" and \"0 \\<in> FOV \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n\ngoal (1 subgoal):\n 1. wf_formula (Suc n) \\<phi> &&& 0 \\<in> FOV \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (Suc n) \\<phi>\n  0 \\<in> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "from x"], ["proof (chain)\npicking this:\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))", "obtain w I where I: \"x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\"\n    \"wf_interp_for_formula (w, I) \\<phi>\" \"length I = Suc n\""], ["proof (prove)\nusing this:\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> SAMEQUOT (any, replicate n False)\n                          (map \\<pi> ` enc (w, I));\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf1]"], ["proof (prove)\nusing this:\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = Suc n \\<and> wf_interp_for_formula (w, I) \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> SAMEQUOT (any, replicate n False)\n                          (map \\<pi> ` enc (w, I));\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding SAMEQUOT_def"], ["proof (prove)\nusing this:\n  x \\<in> {fin_cut_same (any, replicate n False) x @\n           replicate m (any, replicate n False) |\n           x m. x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>))}\n  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = Suc n \\<and> wf_interp_for_formula (w, I) \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> {fin_cut_same (any, replicate n False) x @\n                          replicate m (any, replicate n False) |\n                          x m. x \\<in> map \\<pi> ` enc (w, I)};\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "with \\<open>0 \\<in> FOV \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  0 \\<in> FOV \\<phi>\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n", "obtain p I' where I': \"I = Inl p # I'\""], ["proof (prove)\nusing this:\n  0 \\<in> FOV \\<phi>\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>p I'. I = Inl p # I' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I) (fastforce split: sum.splits)+"], ["proof (state)\nthis:\n  I = Inl p # I'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "with I"], ["proof (chain)\npicking this:\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inl p # I'", "have wtlI: \"x \\<in> enc (w, I')\" \"length I' = n\""], ["proof (prove)\nusing this:\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inl p # I'\n\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I') &&& length I' = n", "using tl_enc[of \"Inl p\" I' w]"], ["proof (prove)\nusing this:\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inl p # I'\n  \\<forall>x\\<in>set (Inl p # I').\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  SAMEQUOT (any, replicate (length I') False)\n   (map \\<pi> ` enc (w, Inl p # I')) =\n  enc (w, I')\n\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I') &&& length I' = n", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I')\n  length I' = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "have \"wf_interp_for_formula (w, I') (FExists \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I') (FExists \\<phi>)", "using wf_interp_for_formula_FExists[OF wf[folded wtlI(2)]]\n          wf_interp_for_formula_any_Inl[OF I(2)[unfolded I']]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (?w, I') (FExists \\<phi>) =\n  (\\<forall>p. wf_interp_for_formula (?w, Inl p # I') \\<phi>)\n  \\<forall>p. wf_interp_for_formula (w, Inl p # I') \\<phi>\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I') (FExists \\<phi>)", ".."], ["proof (state)\nthis:\n  wf_interp_for_formula (w, I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FExists \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "with wtlI"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FExists \\<phi>)", "show \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))", "unfolding lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FExists \\<phi>)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV (FExists \\<phi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ENC_FEXISTS:\n  \"wf_formula n (FEXISTS \\<phi>) \\<Longrightarrow> lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n  SAMEQUOT (any, replicate n False) (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\" (is \"_ \\<Longrightarrow> ?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n (FEXISTS \\<phi>) \\<Longrightarrow>\n    lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "assume wf: \"wf_formula n (FEXISTS \\<phi>)\" and x: \"x \\<in> ?L\""], ["proof (state)\nthis:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "hence wf1: \"wf_formula (Suc n) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\n\ngoal (1 subgoal):\n 1. wf_formula (Suc n) \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (Suc n) \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "from x"], ["proof (chain)\npicking this:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "obtain w I where I: \"x \\<in> enc (w, I)\" \"wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\" \"length I = n\""], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\n  lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = n \\<and> wf_interp_for_formula (w, I) (FEXISTS \\<phi>)}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> enc (w, I);\n         wf_interp_for_formula (w, I) (FEXISTS \\<phi>);\n         length I = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I)\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  length I = n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "from I(2)"], ["proof (chain)\npicking this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)", "obtain P where \"wf_interp_for_formula (w, Inr P # I) \\<phi>\""], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        wf_interp_for_formula (w, Inr P # I) \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using wf_interp_for_formula_FEXISTS[OF wf[folded I(3)]]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (w, I) (FEXISTS \\<phi>)\n  wf_interp_for_formula (?w, I) (FEXISTS \\<phi>) =\n  (\\<forall>P.\n      finite P \\<longrightarrow>\n      wf_interp_for_formula (?w, Inr P # I) \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        wf_interp_for_formula (w, Inr P # I) \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT (any, replicate n False)\n                                  (map \\<pi> `\n                                   lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n 2. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "with I(3)"], ["proof (chain)\npicking this:\n  length I = n\n  wf_interp_for_formula (w, Inr P # I) \\<phi>", "show \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> SAMEQUOT (any, replicate n False)\n             (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))", "unfolding lang_ENC_formula[OF wf1]"], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n\ngoal (1 subgoal):\n 1. x \\<in> SAMEQUOT (any, replicate n False)\n             (map \\<pi> `\n              \\<Union>\n               {enc (w, I) |w I.\n                length I = Suc n \\<and>\n                wf_interp_for_formula (w, I) \\<phi>})", "using I(1) tl_enc[of \"Inr P\" I, symmetric]"], ["proof (prove)\nusing this:\n  length I = n\n  wf_interp_for_formula (w, Inr P # I) \\<phi>\n  x \\<in> enc (w, I)\n  \\<forall>x\\<in>set (Inr P # I).\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  enc (?w, I) =\n  SAMEQUOT (any, replicate (length I) False)\n   (map \\<pi> ` enc (?w, Inr P # I))\n\ngoal (1 subgoal):\n 1. x \\<in> SAMEQUOT (any, replicate n False)\n             (map \\<pi> `\n              \\<Union>\n               {enc (w, I) |w I.\n                length I = Suc n \\<and>\n                wf_interp_for_formula (w, I) \\<phi>})", "by (simp del: enc.simps) \n      (fastforce simp del: enc.simps elim!: rev_subsetD[OF _ SAMEQUOT_mono[OF image_mono]]\n        intro: exI[of _ \"enc (w, Inr P # I)\"])"], ["proof (state)\nthis:\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "assume wf: \"wf_formula n (FEXISTS \\<phi>)\" and x: \"x \\<in> ?R\""], ["proof (state)\nthis:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "hence wf1: \"wf_formula (Suc n) \\<phi>\" and \"0 \\<in> SOV \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n\ngoal (1 subgoal):\n 1. wf_formula (Suc n) \\<phi> &&& 0 \\<in> SOV \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (Suc n) \\<phi>\n  0 \\<in> SOV \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "from x"], ["proof (chain)\npicking this:\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))", "obtain w I where I: \"x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\"\n    \"wf_interp_for_formula (w, I) \\<phi>\" \"length I = Suc n\""], ["proof (prove)\nusing this:\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> SAMEQUOT (any, replicate n False)\n                          (map \\<pi> ` enc (w, I));\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lang_ENC_formula[OF wf1]"], ["proof (prove)\nusing this:\n  x \\<in> SAMEQUOT (any, replicate n False)\n           (map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\n  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = Suc n \\<and> wf_interp_for_formula (w, I) \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> SAMEQUOT (any, replicate n False)\n                          (map \\<pi> ` enc (w, I));\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding SAMEQUOT_def"], ["proof (prove)\nusing this:\n  x \\<in> {fin_cut_same (any, replicate n False) x @\n           replicate m (any, replicate n False) |\n           x m. x \\<in> map \\<pi> ` lang (Suc n) (ENC (Suc n) (FOV \\<phi>))}\n  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)) =\n  \\<Union>\n   {enc (w, I) |w I.\n    length I = Suc n \\<and> wf_interp_for_formula (w, I) \\<phi>}\n\ngoal (1 subgoal):\n 1. (\\<And>w I.\n        \\<lbrakk>x \\<in> {fin_cut_same (any, replicate n False) x @\n                          replicate m (any, replicate n False) |\n                          x m. x \\<in> map \\<pi> ` enc (w, I)};\n         wf_interp_for_formula (w, I) \\<phi>; length I = Suc n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "with \\<open>0 \\<in> SOV \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  0 \\<in> SOV \\<phi>\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n", "obtain P I' where I': \"I = Inr P # I'\""], ["proof (prove)\nusing this:\n  0 \\<in> SOV \\<phi>\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>P I'. I = Inr P # I' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases I) (fastforce split: sum.splits)+"], ["proof (state)\nthis:\n  I = Inr P # I'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "with I"], ["proof (chain)\npicking this:\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inr P # I'", "have wtlI: \"x \\<in> enc (w, I')\" \"length I' = n\""], ["proof (prove)\nusing this:\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inr P # I'\n\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I') &&& length I' = n", "using tl_enc[of \"Inr P\" I' w]"], ["proof (prove)\nusing this:\n  x \\<in> SAMEQUOT (any, replicate n False) (map \\<pi> ` enc (w, I))\n  wf_interp_for_formula (w, I) \\<phi>\n  length I = Suc n\n  I = Inr P # I'\n  \\<forall>x\\<in>set (Inr P # I').\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  SAMEQUOT (any, replicate (length I') False)\n   (map \\<pi> ` enc (w, Inr P # I')) =\n  enc (w, I')\n\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I') &&& length I' = n", "by auto"], ["proof (state)\nthis:\n  x \\<in> enc (w, I')\n  length I' = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "have \"wf_interp_for_formula (w, I') (FEXISTS \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I') (FEXISTS \\<phi>)", "using wf_interp_for_formula_FEXISTS[OF wf[folded wtlI(2)]]\n          wf_interp_for_formula_any_Inr[OF I(2)[unfolded I']]"], ["proof (prove)\nusing this:\n  wf_interp_for_formula (?w, I') (FEXISTS \\<phi>) =\n  (\\<forall>P.\n      finite P \\<longrightarrow>\n      wf_interp_for_formula (?w, Inr P # I') \\<phi>)\n  \\<forall>P.\n     finite P \\<longrightarrow> wf_interp_for_formula (w, Inr P # I') \\<phi>\n\ngoal (1 subgoal):\n 1. wf_interp_for_formula (w, I') (FEXISTS \\<phi>)", ".."], ["proof (state)\nthis:\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_formula n (FEXISTS \\<phi>);\n        x \\<in> SAMEQUOT (any, replicate n False)\n                 (map \\<pi> `\n                  lang (Suc n) (ENC (Suc n) (FOV \\<phi>)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "with wtlI"], ["proof (chain)\npicking this:\n  x \\<in> enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>)", "show \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))", "unfolding lang_ENC_formula[OF wf]"], ["proof (prove)\nusing this:\n  x \\<in> enc (w, I')\n  length I' = n\n  wf_interp_for_formula (w, I') (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp_for_formula (w, I) (FEXISTS \\<phi>)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> lang n (ENC n (FOV (FEXISTS \\<phi>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of_rexp_of':\n  \"wf_formula n \\<phi> \\<Longrightarrow> lang n (rexp_of n \\<phi>) = lang n (rexp_of' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang n (rexp_of n \\<phi>) = lang n (rexp_of' n \\<phi>)", "unfolding rexp_of'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang n (rexp_of n \\<phi>) =\n    lang n (rexp.Inter (rexp_of_alt n \\<phi>) (ENC n (FOV \\<phi>)))", "proof (induction \\<phi> arbitrary: n)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FNot \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FNot \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>) =\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FNot \\<phi>)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FNot \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "hence \"wf_formula n \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>) =\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>", "by simp"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FNot \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "with FNot.IH"], ["proof (chain)\npicking this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>) =\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>) =\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n \\<phi>\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FNot \\<phi>)) =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FNot \\<phi>)) (ENC n (FOV (FNot \\<phi>))))", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps ENC_FNot"], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>) =\n  lang ?n2 (rexp_of_alt ?n2 \\<phi>) \\<inter> lang ?n2 (ENC ?n2 (FOV \\<phi>))\n  wf_formula n \\<phi>\n\ngoal (1 subgoal):\n 1. (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n     lang n (rexp_of n \\<phi>)) \\<inter>\n    lang n (ENC n (FOV \\<phi>)) =\n    (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n     lang n (rexp_of_alt n \\<phi>)) \\<inter>\n    lang n (ENC n (FOV \\<phi>))", "by blast"], ["proof (state)\nthis:\n  lang n (rexp_of n (FNot \\<phi>)) =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FNot \\<phi>)) (ENC n (FOV (FNot \\<phi>))))\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>1) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1)))\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>2) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2)))\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "hence wf1: \"wf_formula n \\<phi>\\<^sub>1\" and wf2: \"wf_formula n \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>1) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1)))\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>2) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2)))\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>\\<^sub>1 &&& wf_formula n \\<phi>\\<^sub>2", "by force+"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\\<^sub>1\n  wf_formula n \\<phi>\\<^sub>2\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FAnd \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "from FAnd.IH(1)[OF wf1] FAnd.IH(2)[OF wf2]"], ["proof (chain)\npicking this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n (rexp_of n \\<phi>\\<^sub>2) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))", "show ?case"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n (rexp_of n \\<phi>\\<^sub>2) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))", "using ENC_FAnd[OF FAnd.prems]"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n (rexp_of n \\<phi>\\<^sub>2) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))\n  lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) =\n  lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1))\n  lang n (rexp_of n \\<phi>\\<^sub>2) =\n  lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2))\n  lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n \\<phi>\\<^sub>1) \\<inter>\n    (lang n (rexp_of n \\<phi>\\<^sub>2) \\<inter>\n     lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) =\n    lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n    lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n    lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))", "by blast"], ["proof (state)\nthis:\n  lang n (rexp_of n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>1) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1)))\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>2) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2)))\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "hence wf1: \"wf_formula n \\<phi>\\<^sub>1\" and wf2: \"wf_formula n \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>1) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1)))\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>\\<^sub>2) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2)))\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>\\<^sub>1 &&& wf_formula n \\<phi>\\<^sub>2", "by force+"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\\<^sub>1\n  wf_formula n \\<phi>\\<^sub>2\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>1) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n (rexp_of n \\<phi>2) =\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FOr \\<phi>1 \\<phi>2)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "from FOr.IH(1)[OF wf1] FOr.IH(2)[OF wf2]"], ["proof (chain)\npicking this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n (rexp_of n \\<phi>\\<^sub>2) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))", "show ?case"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n (rexp_of n \\<phi>\\<^sub>2) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))", "using ENC_FOr[OF FOr.prems]"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n (rexp_of n \\<phi>\\<^sub>2) =\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))\n  lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps"], ["proof (prove)\nusing this:\n  lang n (rexp_of n \\<phi>\\<^sub>1) =\n  lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1))\n  lang n (rexp_of n \\<phi>\\<^sub>2) =\n  lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2))\n  lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (lang n (rexp_of n \\<phi>\\<^sub>1) \\<union>\n     lang n (rexp_of n \\<phi>\\<^sub>2)) \\<inter>\n    lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) =\n    (lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<union>\n     lang n (rexp_of_alt n \\<phi>\\<^sub>2)) \\<inter>\n    lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))", "by blast"], ["proof (state)\nthis:\n  lang n (rexp_of n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)) =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FExists \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>) =\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FExists \\<phi>)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "from FExists(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)", "have IH: \"lang (n + 1) (rexp_of (n + 1) \\<phi>) =\n    lang (n + 1) (Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>)))\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. lang (n + 1) (rexp_of (n + 1) \\<phi>) =\n    lang (n + 1)\n     (rexp.Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>)))", "by (intro FExists.IH) auto"], ["proof (state)\nthis:\n  lang (n + 1) (rexp_of (n + 1) \\<phi>) =\n  lang (n + 1)\n   (rexp.Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>)))\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "have \\<sigma>: \"(any, replicate n False) \\<in> (set o \\<sigma> \\<Sigma>) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (any, replicate n False) \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n", "by (auto simp: \\<sigma>_def set_n_lists image_iff)"], ["proof (state)\nthis:\n  (any, replicate n False) \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "from FExists(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FExists \\<phi>)", "have wf: \"wf n (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>))))\"\n    \"wf n (Pr (rexp_of (n + 1) \\<phi>))\""], ["proof (prove)\nusing this:\n  wf_formula n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. local.wf n\n     (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n           (ENC (n + 1) (FOV \\<phi>)))) &&&\n    local.wf n (Pr (rexp_of (n + 1) \\<phi>))", "by (fastforce simp: max_idx_vars intro!: wf_rexp_of wf_rexp_of_alt wf_rexp_ENC[OF finite_FOV])+"], ["proof (state)\nthis:\n  local.wf n\n   (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>))))\n  local.wf n (Pr (rexp_of (n + 1) \\<phi>))\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "note lang_quot = lang_samequot_exec[OF wf(1) \\<sigma>] lang_samequot_exec[OF wf(2) \\<sigma>]"], ["proof (state)\nthis:\n  lang n\n   (samequot_exec (any, replicate n False)\n     (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n           (ENC (n + 1) (FOV \\<phi>))))) =\n  SAMEQUOT (any, replicate n False)\n   (lang n\n     (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n           (ENC (n + 1) (FOV \\<phi>)))))\n  lang n\n   (samequot_exec (any, replicate n False) (Pr (rexp_of (n + 1) \\<phi>))) =\n  SAMEQUOT (any, replicate n False) (lang n (Pr (rexp_of (n + 1) \\<phi>)))\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FExists \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FExists \\<phi>)) =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>))))", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps IH lang_quot Suc_eq_plus1\n    ENC_FExists[OF FExists.prems, unfolded Suc_eq_plus1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n       lang (n + 1) (ENC (n + 1) (FOV \\<phi>)))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n       lang (n + 1) (ENC (n + 1) (FOV \\<phi>)))) \\<inter>\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` lang (n + 1) (ENC (n + 1) (FOV \\<phi>)))", "by (auto simp add: SAMEQUOT_def)"], ["proof (state)\nthis:\n  lang n (rexp_of n (FExists \\<phi>)) =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n     (ENC n (FOV (FExists \\<phi>))))\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FEXISTS \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp_of ?n2 \\<phi>) =\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "from FEXISTS(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FEXISTS \\<phi>)", "have IH: \"lang (n + 1) (rexp_of (n + 1) \\<phi>) =\n    lang (n + 1) (Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>)))\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. lang (n + 1) (rexp_of (n + 1) \\<phi>) =\n    lang (n + 1)\n     (rexp.Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>)))", "by (intro FEXISTS.IH) auto"], ["proof (state)\nthis:\n  lang (n + 1) (rexp_of (n + 1) \\<phi>) =\n  lang (n + 1)\n   (rexp.Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>)))\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "have \\<sigma>: \"(any, replicate n False) \\<in> (set o \\<sigma> \\<Sigma>) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (any, replicate n False) \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n", "by (auto simp: \\<sigma>_def set_n_lists image_iff)"], ["proof (state)\nthis:\n  (any, replicate n False) \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "from FEXISTS(2)"], ["proof (chain)\npicking this:\n  wf_formula n (FEXISTS \\<phi>)", "have wf: \"wf n (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>))))\"\n    \"wf n (Pr (rexp_of (n + 1) \\<phi>))\""], ["proof (prove)\nusing this:\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. local.wf n\n     (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n           (ENC (n + 1) (FOV \\<phi>)))) &&&\n    local.wf n (Pr (rexp_of (n + 1) \\<phi>))", "by (fastforce simp: max_idx_vars intro: wf_rexp_of wf_rexp_of_alt wf_rexp_ENC[OF finite_FOV])+"], ["proof (state)\nthis:\n  local.wf n\n   (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>))))\n  local.wf n (Pr (rexp_of (n + 1) \\<phi>))\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "note lang_quot = lang_samequot_exec[OF wf(1) \\<sigma>] lang_samequot_exec[OF wf(2) \\<sigma>]"], ["proof (state)\nthis:\n  lang n\n   (samequot_exec (any, replicate n False)\n     (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n           (ENC (n + 1) (FOV \\<phi>))))) =\n  SAMEQUOT (any, replicate n False)\n   (lang n\n     (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n           (ENC (n + 1) (FOV \\<phi>)))))\n  lang n\n   (samequot_exec (any, replicate n False) (Pr (rexp_of (n + 1) \\<phi>))) =\n  SAMEQUOT (any, replicate n False) (lang n (Pr (rexp_of (n + 1) \\<phi>)))\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n (rexp_of n \\<phi>) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n (rexp_of n (FEXISTS \\<phi>)) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (rexp_of n (FEXISTS \\<phi>)) =\n    lang n\n     (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>))))", "unfolding rexp_of.simps rexp_of_alt.simps lang.simps IH lang_quot Suc_eq_plus1\n    ENC_FEXISTS[OF FEXISTS.prems, unfolded Suc_eq_plus1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n       lang (n + 1) (ENC (n + 1) (FOV \\<phi>)))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (lang (n + 1) (rexp_of_alt (n + 1) \\<phi>) \\<inter>\n       lang (n + 1) (ENC (n + 1) (FOV \\<phi>)))) \\<inter>\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` lang (n + 1) (ENC (n + 1) (FOV \\<phi>)))", "by (auto simp add: SAMEQUOT_def)"], ["proof (state)\nthis:\n  lang n (rexp_of n (FEXISTS \\<phi>)) =\n  lang n\n   (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n     (ENC n (FOV (FEXISTS \\<phi>))))\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FQ x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FLess x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n (rexp_of n (FIn x1 x2)) =\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))", "qed auto"], ["", "lemma SAMEQUTO_UN[simp]: \"SAMEQUOT x (\\<Union>y \\<in> A. B y) = (\\<Union>y \\<in> A. SAMEQUOT x (B y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT x (\\<Union> (B ` A)) = (\\<Union>y\\<in>A. SAMEQUOT x (B y))", "unfolding SAMEQUOT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {fin_cut_same x xa @ replicate m x |xa m. xa \\<in> \\<Union> (B ` A)} =\n    (\\<Union>y\\<in>A.\n        {fin_cut_same x xa @ replicate m x |xa m. xa \\<in> B y})", "by auto"], ["", "lemma finite_positions_in_row[simp]:\n  \"n > 0 \\<Longrightarrow> finite (positions_in_row (x @- sconst (any, replicate n False)) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    finite (positions_in_row (x @- sconst (any, replicate n False)) 0)", "unfolding positions_in_row shift_snth"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    finite\n     {p. snd (if p < length x then x ! p\n              else sconst (any, replicate n False) !! (p - length x)) !\n         0}", "by auto"], ["", "lemma fin_cut_same_snoc: \"fin_cut_same x (xs @ [y]) = (if x = y then fin_cut_same x xs else xs @ [y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_cut_same x (xs @ [y]) =\n    (if x = y then fin_cut_same x xs else xs @ [y])", "by (induct xs) auto"], ["", "lemma fin_cut_same_idem: \"fin_cut_same x (fin_cut_same x xs) = fin_cut_same x xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_cut_same x (fin_cut_same x xs) = fin_cut_same x xs", "by (induct xs) auto"], ["", "lemma cut_same_sconst: \"cut_same x (xs @- sconst x) = fin_cut_same x xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cut_same x (xs @- sconst x) = fin_cut_same x xs", "proof (induct xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. cut_same x ([] @- sconst x) = fin_cut_same x []\n 2. \\<And>xa xs.\n       cut_same x (xs @- sconst x) = fin_cut_same x xs \\<Longrightarrow>\n       cut_same x ((xs @ [xa]) @- sconst x) = fin_cut_same x (xs @ [xa])", "case (snoc y ys)"], ["proof (state)\nthis:\n  cut_same x (ys @- sconst x) = fin_cut_same x ys\n\ngoal (2 subgoals):\n 1. cut_same x ([] @- sconst x) = fin_cut_same x []\n 2. \\<And>xa xs.\n       cut_same x (xs @- sconst x) = fin_cut_same x xs \\<Longrightarrow>\n       cut_same x ((xs @ [xa]) @- sconst x) = fin_cut_same x (xs @ [xa])", "then"], ["proof (chain)\npicking this:\n  cut_same x (ys @- sconst x) = fin_cut_same x ys", "show ?case"], ["proof (prove)\nusing this:\n  cut_same x (ys @- sconst x) = fin_cut_same x ys\n\ngoal (1 subgoal):\n 1. cut_same x ((ys @ [y]) @- sconst x) = fin_cut_same x (ys @ [y])", "by (auto simp del: id_apply simp add: fin_cut_same_snoc sconst_collapse)"], ["proof (state)\nthis:\n  cut_same x ((ys @ [y]) @- sconst x) = fin_cut_same x (ys @ [y])\n\ngoal (1 subgoal):\n 1. cut_same x ([] @- sconst x) = fin_cut_same x []", "qed (simp del: id_apply)"], ["", "lemma length_cut_same: \"length (cut_same x s) = (LEAST n. sdrop n s = sconst x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (cut_same x s) = (LEAST n. sdrop n s = sconst x)", "unfolding cut_same_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (stake (LEAST n. sdrop n s = sconst x) s) =\n    (LEAST n. sdrop n s = sconst x)", "by simp"], ["", "lemma enc_alt: \"wf_interp w I \\<Longrightarrow>\n  x \\<in> enc (w, I) \\<longleftrightarrow> x @- sconst ((any, replicate (length I) False)) = stream_enc (w, I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp w I \\<Longrightarrow>\n    (x \\<in> enc (w, I)) =\n    (x @- sconst (any, replicate (length I) False) = stream_enc (w, I))", "unfolding enc.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp w I \\<Longrightarrow>\n    (x \\<in> {x. \\<exists>n.\n                    x =\n                    cut_same (any, replicate (length I) False)\n                     (stream_enc (w, I)) @\n                    replicate n (any, replicate (length I) False)}) =\n    (x @- sconst (any, replicate (length I) False) = stream_enc (w, I))", "by (force simp only: shift_append shift_replicate_sconst stream_enc_cut_same[symmetric]\n    length_append length_replicate length_cut_same sdrop_shift drop_all diff_self_eq_0\n    shift.simps sdrop.simps\n    dest: sym[of _ \"stream_enc (w, I)\"]\n    intro: shift_sconst_inj[rotated, of _ \"(any, replicate (length I) False)\"] Least_le\n      exI[of _ \"length x - length (cut_same (any, replicate (length I) False) (stream_enc (w, I)))\"]\n      le_add_diff_inverse[symmetric] )"], ["", "lemma stream_stream_eqI: \"\\<lbrakk>\\<forall>(_, x) \\<in> sset xs. x \\<noteq> []; \\<forall>(_, x) \\<in> sset ys. x \\<noteq> [];\n  smap (\\<lambda>(_, x). hd x) xs = smap (\\<lambda>(_, x). hd x) ys; smap \\<pi> xs = smap \\<pi> ys\\<rbrakk> \\<Longrightarrow> xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(uu_, x)\\<in>sset xs. x \\<noteq> [];\n     \\<forall>(uu_, x)\\<in>sset ys. x \\<noteq> [];\n     smap (\\<lambda>(uu_, x). hd x) xs = smap (\\<lambda>(uu_, x). hd x) ys;\n     smap \\<pi> xs = smap \\<pi> ys\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "proof (coinduction arbitrary: xs ys)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> sset xs \\<longrightarrow>\n                   (case x of (uu_, x) \\<Rightarrow> x \\<noteq> []);\n        \\<forall>x.\n           x \\<in> sset ys \\<longrightarrow>\n           (case x of (uu_, x) \\<Rightarrow> x \\<noteq> []);\n        smap (\\<lambda>(uu_, y). hd y) xs =\n        smap (\\<lambda>(uu_, y). hd y) ys;\n        smap \\<pi> xs = smap \\<pi> ys\\<rbrakk>\n       \\<Longrightarrow> shd xs = shd ys \\<and>\n                         (\\<exists>xsa ysa.\n                             stl xs = xsa \\<and>\n                             stl ys = ysa \\<and>\n                             (\\<forall>x.\n                                 x \\<in> sset xsa \\<longrightarrow>\n                                 (case x of\n                                  (uu_, x) \\<Rightarrow>\n                                    x \\<noteq> [])) \\<and>\n                             (\\<forall>x.\n                                 x \\<in> sset ysa \\<longrightarrow>\n                                 (case x of\n                                  (uu_, x) \\<Rightarrow>\n                                    x \\<noteq> [])) \\<and>\n                             smap (\\<lambda>(uu_, y). hd y) xsa =\n                             smap (\\<lambda>(uu_, y). hd y) ysa \\<and>\n                             smap \\<pi> xsa = smap \\<pi> ysa)", "case Eq_stream"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> sset xs \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  \\<forall>x.\n     x \\<in> sset ys \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  smap (\\<lambda>(uu_, y). hd y) xs = smap (\\<lambda>(uu_, y). hd y) ys\n  smap \\<pi> xs = smap \\<pi> ys\n\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> sset xs \\<longrightarrow>\n                   (case x of (uu_, x) \\<Rightarrow> x \\<noteq> []);\n        \\<forall>x.\n           x \\<in> sset ys \\<longrightarrow>\n           (case x of (uu_, x) \\<Rightarrow> x \\<noteq> []);\n        smap (\\<lambda>(uu_, y). hd y) xs =\n        smap (\\<lambda>(uu_, y). hd y) ys;\n        smap \\<pi> xs = smap \\<pi> ys\\<rbrakk>\n       \\<Longrightarrow> shd xs = shd ys \\<and>\n                         (\\<exists>xsa ysa.\n                             stl xs = xsa \\<and>\n                             stl ys = ysa \\<and>\n                             (\\<forall>x.\n                                 x \\<in> sset xsa \\<longrightarrow>\n                                 (case x of\n                                  (uu_, x) \\<Rightarrow>\n                                    x \\<noteq> [])) \\<and>\n                             (\\<forall>x.\n                                 x \\<in> sset ysa \\<longrightarrow>\n                                 (case x of\n                                  (uu_, x) \\<Rightarrow>\n                                    x \\<noteq> [])) \\<and>\n                             smap (\\<lambda>(uu_, y). hd y) xsa =\n                             smap (\\<lambda>(uu_, y). hd y) ysa \\<and>\n                             smap \\<pi> xsa = smap \\<pi> ysa)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> sset xs \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  \\<forall>x.\n     x \\<in> sset ys \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  smap (\\<lambda>(uu_, y). hd y) xs = smap (\\<lambda>(uu_, y). hd y) ys\n  smap \\<pi> xs = smap \\<pi> ys", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> sset xs \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  \\<forall>x.\n     x \\<in> sset ys \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  smap (\\<lambda>(uu_, y). hd y) xs = smap (\\<lambda>(uu_, y). hd y) ys\n  smap \\<pi> xs = smap \\<pi> ys\n\ngoal (1 subgoal):\n 1. shd xs = shd ys \\<and>\n    (\\<exists>xs ys.\n        stl xs = xs \\<and>\n        stl ys = ys \\<and>\n        (\\<forall>x.\n            x \\<in> sset xs \\<longrightarrow>\n            (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])) \\<and>\n        (\\<forall>x.\n            x \\<in> sset ys \\<longrightarrow>\n            (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])) \\<and>\n        smap (\\<lambda>(uu_, y). hd y) xs =\n        smap (\\<lambda>(uu_, y). hd y) ys \\<and>\n        smap \\<pi> xs = smap \\<pi> ys)", "proof (cases xs ys rule: stream.exhaust[case_product stream.exhaust])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1__ x2__ x1a__ x2a__.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> sset xs \\<longrightarrow>\n                   (case x of (uu_, x) \\<Rightarrow> x \\<noteq> []);\n        \\<forall>x.\n           x \\<in> sset ys \\<longrightarrow>\n           (case x of (uu_, x) \\<Rightarrow> x \\<noteq> []);\n        smap (\\<lambda>(uu_, y). hd y) xs =\n        smap (\\<lambda>(uu_, y). hd y) ys;\n        smap \\<pi> xs = smap \\<pi> ys; xs = x1__ ## x2__;\n        ys = x1a__ ## x2a__\\<rbrakk>\n       \\<Longrightarrow> shd xs = shd ys \\<and>\n                         (\\<exists>xs ys.\n                             stl xs = xs \\<and>\n                             stl ys = ys \\<and>\n                             (\\<forall>x.\n                                 x \\<in> sset xs \\<longrightarrow>\n                                 (case x of\n                                  (uu_, x) \\<Rightarrow>\n                                    x \\<noteq> [])) \\<and>\n                             (\\<forall>x.\n                                 x \\<in> sset ys \\<longrightarrow>\n                                 (case x of\n                                  (uu_, x) \\<Rightarrow>\n                                    x \\<noteq> [])) \\<and>\n                             smap (\\<lambda>(uu_, y). hd y) xs =\n                             smap (\\<lambda>(uu_, y). hd y) ys \\<and>\n                             smap \\<pi> xs = smap \\<pi> ys)", "case (SCons_SCons h1 t1 h2 t2)"], ["proof (state)\nthis:\n  xs = h1 ## t1\n  ys = h2 ## t2\n\ngoal (1 subgoal):\n 1. \\<And>x1__ x2__ x1a__ x2a__.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> sset xs \\<longrightarrow>\n                   (case x of (uu_, x) \\<Rightarrow> x \\<noteq> []);\n        \\<forall>x.\n           x \\<in> sset ys \\<longrightarrow>\n           (case x of (uu_, x) \\<Rightarrow> x \\<noteq> []);\n        smap (\\<lambda>(uu_, y). hd y) xs =\n        smap (\\<lambda>(uu_, y). hd y) ys;\n        smap \\<pi> xs = smap \\<pi> ys; xs = x1__ ## x2__;\n        ys = x1a__ ## x2a__\\<rbrakk>\n       \\<Longrightarrow> shd xs = shd ys \\<and>\n                         (\\<exists>xs ys.\n                             stl xs = xs \\<and>\n                             stl ys = ys \\<and>\n                             (\\<forall>x.\n                                 x \\<in> sset xs \\<longrightarrow>\n                                 (case x of\n                                  (uu_, x) \\<Rightarrow>\n                                    x \\<noteq> [])) \\<and>\n                             (\\<forall>x.\n                                 x \\<in> sset ys \\<longrightarrow>\n                                 (case x of\n                                  (uu_, x) \\<Rightarrow>\n                                    x \\<noteq> [])) \\<and>\n                             smap (\\<lambda>(uu_, y). hd y) xs =\n                             smap (\\<lambda>(uu_, y). hd y) ys \\<and>\n                             smap \\<pi> xs = smap \\<pi> ys)", "with Eq_stream"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> sset xs \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  \\<forall>x.\n     x \\<in> sset ys \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  smap (\\<lambda>(uu_, y). hd y) xs = smap (\\<lambda>(uu_, y). hd y) ys\n  smap \\<pi> xs = smap \\<pi> ys\n  xs = h1 ## t1\n  ys = h2 ## t2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> sset xs \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  \\<forall>x.\n     x \\<in> sset ys \\<longrightarrow>\n     (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])\n  smap (\\<lambda>(uu_, y). hd y) xs = smap (\\<lambda>(uu_, y). hd y) ys\n  smap \\<pi> xs = smap \\<pi> ys\n  xs = h1 ## t1\n  ys = h2 ## t2\n\ngoal (1 subgoal):\n 1. shd xs = shd ys \\<and>\n    (\\<exists>xs ys.\n        stl xs = xs \\<and>\n        stl ys = ys \\<and>\n        (\\<forall>x.\n            x \\<in> sset xs \\<longrightarrow>\n            (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])) \\<and>\n        (\\<forall>x.\n            x \\<in> sset ys \\<longrightarrow>\n            (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])) \\<and>\n        smap (\\<lambda>(uu_, y). hd y) xs =\n        smap (\\<lambda>(uu_, y). hd y) ys \\<and>\n        smap \\<pi> xs = smap \\<pi> ys)", "by (cases \"snd h1\" \"snd h2\" rule: list.exhaust[case_product list.exhaust])\n        (auto simp: \\<pi>_def split: prod.splits)"], ["proof (state)\nthis:\n  shd xs = shd ys \\<and>\n  (\\<exists>xs ys.\n      stl xs = xs \\<and>\n      stl ys = ys \\<and>\n      (\\<forall>x.\n          x \\<in> sset xs \\<longrightarrow>\n          (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])) \\<and>\n      (\\<forall>x.\n          x \\<in> sset ys \\<longrightarrow>\n          (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])) \\<and>\n      smap (\\<lambda>(uu_, y). hd y) xs =\n      smap (\\<lambda>(uu_, y). hd y) ys \\<and>\n      smap \\<pi> xs = smap \\<pi> ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  shd xs = shd ys \\<and>\n  (\\<exists>xs ys.\n      stl xs = xs \\<and>\n      stl ys = ys \\<and>\n      (\\<forall>x.\n          x \\<in> sset xs \\<longrightarrow>\n          (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])) \\<and>\n      (\\<forall>x.\n          x \\<in> sset ys \\<longrightarrow>\n          (case x of (uu_, x) \\<Rightarrow> x \\<noteq> [])) \\<and>\n      smap (\\<lambda>(uu_, y). hd y) xs =\n      smap (\\<lambda>(uu_, y). hd y) ys \\<and>\n      smap \\<pi> xs = smap \\<pi> ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma project_enc_extend:\n  fixes x I\n  defines \"n \\<equiv> length I\"\n  defines \"z \\<equiv> \\<lambda>n. (any, replicate n False)\"\n  defines \"I' \\<equiv> Inr (positions_in_row (x @- sconst (z (Suc n))) 0) # I\"\n  assumes wf: \"wf_interp w I\"\n  assumes enc: \"fin_cut_same (z n) (map \\<pi> x) @ replicate m (z n) \\<in> enc (w, I)\"\n  assumes nonempty: \"\\<forall>(_, x) \\<in> set x. x \\<noteq> []\"\n  shows \"x \\<in> enc (w, I')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I')", "have [simp]: \"\\<pi> (z (Suc n)) = z n\"\n    and z_def: \"\\<And>n. z n = (any, replicate n False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (z (Suc n)) = z n &&& (\\<And>n. z n = (any, replicate n False))", "unfolding \\<pi>_def z_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (any, replicate (Suc n) False) of\n     (a, bs) \\<Rightarrow> (a, tl bs)) =\n    (any, replicate n False) &&&\n    (\\<And>n. (any, replicate n False) = (any, replicate n False))", "by auto"], ["proof (state)\nthis:\n  \\<pi> (z (Suc n)) = z n\n  z ?n2 = (any, replicate ?n2 False)\n\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I')", "have wf': \"wf_interp w I'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_interp w I'", "by (simp add: wf I'_def z_def del: replicate_Suc)"], ["proof (state)\nthis:\n  wf_interp w I'\n\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I')", "note simps[simp del] = stream_enc.simps"], ["proof (state)\nthis:\n  stream_enc (?w, ?I) = smap2 (enc_atom ?I) nats (?w @- sconst any)\n\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> enc (w, I')", "unfolding enc_alt[OF wf']"], ["proof (prove)\ngoal (1 subgoal):\n 1. x @- sconst (any, replicate (length I') False) = stream_enc (w, I')", "proof (rule stream_stream_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<forall>(uu_, x)\n             \\<in>sset (x @- sconst (any, replicate (length I') False)).\n       x \\<noteq> []\n 2. \\<forall>(uu_, x)\\<in>sset (stream_enc (w, I')). x \\<noteq> []\n 3. smap (\\<lambda>(uu_, x). hd x)\n     (x @- sconst (any, replicate (length I') False)) =\n    smap (\\<lambda>(uu_, x). hd x) (stream_enc (w, I'))\n 4. smap \\<pi> (x @- sconst (any, replicate (length I') False)) =\n    smap \\<pi> (stream_enc (w, I'))", "from nonempty stream_smap_nats[of \"map (\\<lambda>(_, y). hd y) x @- sconst False\"]\n      smap_szip_fst"], ["proof (chain)\npicking this:\n  \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n  map (\\<lambda>(uu_, y). hd y) x @- sconst False =\n  smap ((!!) (map (\\<lambda>(uu_, y). hd y) x @- sconst False)) nats\n  smap (\\<lambda>x. ?f (fst x)) (szip ?s1.0 ?s2.0) = smap ?f ?s1.0", "show \"smap (\\<lambda>(_, x). hd x) (x @- sconst (any, replicate (length I') False)) =\n      smap (\\<lambda>(_, x). hd x) (stream_enc (w, I'))\""], ["proof (prove)\nusing this:\n  \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n  map (\\<lambda>(uu_, y). hd y) x @- sconst False =\n  smap ((!!) (map (\\<lambda>(uu_, y). hd y) x @- sconst False)) nats\n  smap (\\<lambda>x. ?f (fst x)) (szip ?s1.0 ?s2.0) = smap ?f ?s1.0\n\ngoal (1 subgoal):\n 1. smap (\\<lambda>(uu_, x). hd x)\n     (x @- sconst (any, replicate (length I') False)) =\n    smap (\\<lambda>(uu_, x). hd x) (stream_enc (w, I'))", "by (auto simp add: stream_enc.simps I'_def z_def smap2_szip stream.map_comp o_def split_def\n        positions_in_row shift_snth hd_conv_nth intro: smap_szip_fst[symmetric]\n        cong: stream.map_cong)"], ["proof (state)\nthis:\n  smap (\\<lambda>(uu_, x). hd x)\n   (x @- sconst (any, replicate (length I') False)) =\n  smap (\\<lambda>(uu_, x). hd x) (stream_enc (w, I'))\n\ngoal (3 subgoals):\n 1. \\<forall>(uu_, x)\n             \\<in>sset (x @- sconst (any, replicate (length I') False)).\n       x \\<noteq> []\n 2. \\<forall>(uu_, x)\\<in>sset (stream_enc (w, I')). x \\<noteq> []\n 3. smap \\<pi> (x @- sconst (any, replicate (length I') False)) =\n    smap \\<pi> (stream_enc (w, I'))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>(uu_, x)\n             \\<in>sset (x @- sconst (any, replicate (length I') False)).\n       x \\<noteq> []\n 2. \\<forall>(uu_, x)\\<in>sset (stream_enc (w, I')). x \\<noteq> []\n 3. smap \\<pi> (x @- sconst (any, replicate (length I') False)) =\n    smap \\<pi> (stream_enc (w, I'))", "from wf"], ["proof (chain)\npicking this:\n  wf_interp w I", "have \"fin_cut_same (z n) (map \\<pi> x) = cut_same (z n) (stream_enc (w, I))\""], ["proof (prove)\nusing this:\n  wf_interp w I\n\ngoal (1 subgoal):\n 1. fin_cut_same (z n) (map \\<pi> x) = cut_same (z n) (stream_enc (w, I))", "using stream_enc_enc[OF _ enc]"], ["proof (prove)\nusing this:\n  wf_interp w I\n  \\<forall>x\\<in>set I.\n     case x of Inl a \\<Rightarrow> True\n     | Inr P \\<Rightarrow> finite P \\<Longrightarrow>\n  stream_enc (w, I) =\n  (fin_cut_same (z n) (map \\<pi> x) @ replicate m (z n)) @-\n  sconst (any, replicate (length I) False)\n\ngoal (1 subgoal):\n 1. fin_cut_same (z n) (map \\<pi> x) = cut_same (z n) (stream_enc (w, I))", "by (auto simp add: cut_same_sconst z_def n_def fin_cut_same_idem)"], ["proof (state)\nthis:\n  fin_cut_same (z n) (map \\<pi> x) = cut_same (z n) (stream_enc (w, I))\n\ngoal (3 subgoals):\n 1. \\<forall>(uu_, x)\n             \\<in>sset (x @- sconst (any, replicate (length I') False)).\n       x \\<noteq> []\n 2. \\<forall>(uu_, x)\\<in>sset (stream_enc (w, I')). x \\<noteq> []\n 3. smap \\<pi> (x @- sconst (any, replicate (length I') False)) =\n    smap \\<pi> (stream_enc (w, I'))", "then"], ["proof (chain)\npicking this:\n  fin_cut_same (z n) (map \\<pi> x) = cut_same (z n) (stream_enc (w, I))", "obtain m' where \\<pi>x: \"map \\<pi> x = cut_same (z n) (stream_enc (w, I)) @ replicate m' (z n)\""], ["proof (prove)\nusing this:\n  fin_cut_same (z n) (map \\<pi> x) = cut_same (z n) (stream_enc (w, I))\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        map \\<pi> x =\n        cut_same (z n) (stream_enc (w, I)) @\n        replicate m' (z n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: fin_cut_sameE)"], ["proof (state)\nthis:\n  map \\<pi> x = cut_same (z n) (stream_enc (w, I)) @ replicate m' (z n)\n\ngoal (3 subgoals):\n 1. \\<forall>(uu_, x)\n             \\<in>sset (x @- sconst (any, replicate (length I') False)).\n       x \\<noteq> []\n 2. \\<forall>(uu_, x)\\<in>sset (stream_enc (w, I')). x \\<noteq> []\n 3. smap \\<pi> (x @- sconst (any, replicate (length I') False)) =\n    smap \\<pi> (stream_enc (w, I'))", "with wf"], ["proof (chain)\npicking this:\n  wf_interp w I\n  map \\<pi> x = cut_same (z n) (stream_enc (w, I)) @ replicate m' (z n)", "show \"smap \\<pi> (x @- sconst (any, replicate (length I') False)) =\n      smap \\<pi> (stream_enc (w, I'))\""], ["proof (prove)\nusing this:\n  wf_interp w I\n  map \\<pi> x = cut_same (z n) (stream_enc (w, I)) @ replicate m' (z n)\n\ngoal (1 subgoal):\n 1. smap \\<pi> (x @- sconst (any, replicate (length I') False)) =\n    smap \\<pi> (stream_enc (w, I'))", "by (simp del: replicate_Suc add: n_def[symmetric] z_def[symmetric] I'_def\n        stream_enc_cut_same[of I, symmetric, folded n_def z_def])"], ["proof (state)\nthis:\n  smap \\<pi> (x @- sconst (any, replicate (length I') False)) =\n  smap \\<pi> (stream_enc (w, I'))\n\ngoal (2 subgoals):\n 1. \\<forall>(uu_, x)\n             \\<in>sset (x @- sconst (any, replicate (length I') False)).\n       x \\<noteq> []\n 2. \\<forall>(uu_, x)\\<in>sset (stream_enc (w, I')). x \\<noteq> []", "qed (insert nonempty, simp_all add: stream_enc.simps I'_def split_beta smap2_szip stream.set_map)"], ["proof (state)\nthis:\n  x \\<in> enc (w, I')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pred_case_conv: \"x - Suc 0 = (case x of 0 \\<Rightarrow> 0 | Suc m \\<Rightarrow> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x - Suc 0 = (case x of 0 \\<Rightarrow> 0 | Suc m \\<Rightarrow> m)", "by (cases x) auto"], ["", "lemma in_pred_image_iff: \"0 \\<notin> X \\<Longrightarrow> (x \\<in> (\\<lambda>x. x - Suc 0) ` X) = (Suc x \\<in> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> X \\<Longrightarrow>\n    (x \\<in> (\\<lambda>x. x - Suc 0) ` X) = (Suc x \\<in> X)", "by (auto simp: pred_case_conv split: nat.splits)"], ["", "lemma map_project_Int_ENC:\n  fixes X Z n\n  defines \"z \\<equiv> (any, replicate n False)\"\n  assumes \"0 \\<notin> X\" \"X \\<subseteq> {0 ..< n + 1}\" \"Z \\<subseteq> lists ((set o \\<sigma> \\<Sigma>) (n + 1))\"\n  shows \"SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "let ?Y = \"{0 ..< n + 1} - X\""], ["proof (state)\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "let ?fX = \"(\\<lambda>x. x - 1) ` X\""], ["proof (state)\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "let ?fY = \"{0 ..< n} - (\\<lambda>x. x - 1) ` X\""], ["proof (state)\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "from assms"], ["proof (chain)\npicking this:\n  z \\<equiv> (any, replicate n False)\n  0 \\<notin> X\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))", "have *: \"(\\<lambda>x. x - 1) ` X \\<subseteq> {0 ..< n}\""], ["proof (prove)\nusing this:\n  z \\<equiv> (any, replicate n False)\n  0 \\<notin> X\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x - 1) ` X \\<subseteq> {0..<n}", "by (cases n) auto"], ["proof (state)\nthis:\n  (\\<lambda>x. x - 1) ` X \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "proof (safe elim!: subsetD[OF SAMEQUOT_mono[OF subset_trans[OF image_Int_subset Int_lower1]]])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> SAMEQUOT z\n                (map \\<pi> `\n                 (Z \\<inter>\n                  lang (n + 1) (ENC (n + 1) X))) \\<Longrightarrow>\n       x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> SAMEQUOT z (map \\<pi> ` Z);\n        x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT z\n                                  (map \\<pi> `\n                                   (Z \\<inter>\n                                    lang (n + 1) (ENC (n + 1) X)))", "fix w"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> SAMEQUOT z\n                (map \\<pi> `\n                 (Z \\<inter>\n                  lang (n + 1) (ENC (n + 1) X))) \\<Longrightarrow>\n       x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> SAMEQUOT z (map \\<pi> ` Z);\n        x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT z\n                                  (map \\<pi> `\n                                   (Z \\<inter>\n                                    lang (n + 1) (ENC (n + 1) X)))", "assume \"w \\<in> SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X)))\""], ["proof (state)\nthis:\n  w \\<in> SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> SAMEQUOT z\n                (map \\<pi> `\n                 (Z \\<inter>\n                  lang (n + 1) (ENC (n + 1) X))) \\<Longrightarrow>\n       x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> SAMEQUOT z (map \\<pi> ` Z);\n        x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT z\n                                  (map \\<pi> `\n                                   (Z \\<inter>\n                                    lang (n + 1) (ENC (n + 1) X)))", "then"], ["proof (chain)\npicking this:\n  w \\<in> SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X)))", "have \"w \\<in> SAMEQUOT z (map \\<pi> ` lang (n + 1) (ENC (n + 1) X))\""], ["proof (prove)\nusing this:\n  w \\<in> SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X)))\n\ngoal (1 subgoal):\n 1. w \\<in> SAMEQUOT z (map \\<pi> ` lang (n + 1) (ENC (n + 1) X))", "by (rule rev_subsetD[OF _ SAMEQUOT_mono]) auto"], ["proof (state)\nthis:\n  w \\<in> SAMEQUOT z (map \\<pi> ` lang (n + 1) (ENC (n + 1) X))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> SAMEQUOT z\n                (map \\<pi> `\n                 (Z \\<inter>\n                  lang (n + 1) (ENC (n + 1) X))) \\<Longrightarrow>\n       x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> SAMEQUOT z (map \\<pi> ` Z);\n        x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT z\n                                  (map \\<pi> `\n                                   (Z \\<inter>\n                                    lang (n + 1) (ENC (n + 1) X)))", "with assms(2)"], ["proof (chain)\npicking this:\n  0 \\<notin> X\n  w \\<in> SAMEQUOT z (map \\<pi> ` lang (n + 1) (ENC (n + 1) X))", "show \"w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\""], ["proof (prove)\nusing this:\n  0 \\<notin> X\n  w \\<in> SAMEQUOT z (map \\<pi> ` lang (n + 1) (ENC (n + 1) X))\n\ngoal (1 subgoal):\n 1. w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "unfolding lang_ENC[OF assms(3) subset_refl] lang_ENC[OF * subset_refl]"], ["proof (prove)\nusing this:\n  0 \\<notin> X\n  w \\<in> SAMEQUOT z\n           (map \\<pi> `\n            \\<Union>\n             {enc (w, I) |w I.\n              length I = n + 1 \\<and>\n              wf_interp w I \\<and>\n              (\\<forall>i\\<in>X.\n                  case I ! i of Inl x \\<Rightarrow> True\n                  | Inr x \\<Rightarrow> False) \\<and>\n              (\\<forall>i\\<in>{0..<n + 1} - X.\n                  case I ! i of Inl x \\<Rightarrow> False\n                  | Inr x \\<Rightarrow> True)})\n\ngoal (1 subgoal):\n 1. w \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n \\<and>\n              wf_interp w I \\<and>\n              (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                  case I ! i of Inl x \\<Rightarrow> True\n                  | Inr x \\<Rightarrow> False) \\<and>\n              (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                  case I ! i of Inl x \\<Rightarrow> False\n                  | Inr x \\<Rightarrow> True)}", "by (auto simp: image_Union z_def length_Suc_conv simp del: enc.simps\n        intro!: exI[of _ \"enc (w, I)\" for w I, OF conjI[of _ \"x \\<in> A\" for x A]])\n        (fastforce simp: nth_Cons image_iff split: nat.splits sum.splits)"], ["proof (state)\nthis:\n  w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> SAMEQUOT z (map \\<pi> ` Z);\n        x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT z\n                                  (map \\<pi> `\n                                   (Z \\<inter>\n                                    lang (n + 1) (ENC (n + 1) X)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> SAMEQUOT z (map \\<pi> ` Z);\n        x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT z\n                                  (map \\<pi> `\n                                   (Z \\<inter>\n                                    lang (n + 1) (ENC (n + 1) X)))", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> SAMEQUOT z (map \\<pi> ` Z);\n        x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT z\n                                  (map \\<pi> `\n                                   (Z \\<inter>\n                                    lang (n + 1) (ENC (n + 1) X)))", "assume \"w \\<in> SAMEQUOT z (map \\<pi> ` Z)\" \"w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\""], ["proof (state)\nthis:\n  w \\<in> SAMEQUOT z (map \\<pi> ` Z)\n  w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> SAMEQUOT z (map \\<pi> ` Z);\n        x \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAMEQUOT z\n                                  (map \\<pi> `\n                                   (Z \\<inter>\n                                    lang (n + 1) (ENC (n + 1) X)))", "then"], ["proof (chain)\npicking this:\n  w \\<in> SAMEQUOT z (map \\<pi> ` Z)\n  w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))", "show \"w \\<in> SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X)))\""], ["proof (prove)\nusing this:\n  w \\<in> SAMEQUOT z (map \\<pi> ` Z)\n  w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n\ngoal (1 subgoal):\n 1. w \\<in> SAMEQUOT z\n             (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X)))", "unfolding  z_def SAMEQUOT_def"], ["proof (prove)\nusing this:\n  w \\<in> {fin_cut_same (any, replicate n False) x @\n           replicate m (any, replicate n False) |\n           x m. x \\<in> map \\<pi> ` Z}\n  w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n\ngoal (1 subgoal):\n 1. w \\<in> {fin_cut_same (any, replicate n False) x @\n             replicate m (any, replicate n False) |\n             x m.\n             x \\<in> map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))}", "proof (safe, intro exI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x m xa.\n       \\<lbrakk>fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n                replicate m (any, replicate n False)\n                \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X));\n        w =\n        fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n        replicate m (any, replicate n False);\n        xa \\<in> Z;\n        w \\<in> {fin_cut_same (any, replicate n False) x @\n                 replicate m (any, replicate n False) |\n                 x m. x \\<in> map \\<pi> ` Z};\n        w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> fin_cut_same (any, replicate n False)\n                          (map \\<pi> xa) @\n                         replicate m (any, replicate n False) =\n                         fin_cut_same (any, replicate n False)\n                          (?x13 x m xa) @\n                         replicate (?m14 x m xa) (any, replicate n False)\n 2. \\<And>x m xa.\n       \\<lbrakk>fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n                replicate m (any, replicate n False)\n                \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X));\n        w =\n        fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n        replicate m (any, replicate n False);\n        xa \\<in> Z;\n        w \\<in> {fin_cut_same (any, replicate n False) x @\n                 replicate m (any, replicate n False) |\n                 x m. x \\<in> map \\<pi> ` Z};\n        w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> ?x13 x m xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter> lang (n + 1) (ENC (n + 1) X))", "fix m x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x m xa.\n       \\<lbrakk>fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n                replicate m (any, replicate n False)\n                \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X));\n        w =\n        fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n        replicate m (any, replicate n False);\n        xa \\<in> Z;\n        w \\<in> {fin_cut_same (any, replicate n False) x @\n                 replicate m (any, replicate n False) |\n                 x m. x \\<in> map \\<pi> ` Z};\n        w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> fin_cut_same (any, replicate n False)\n                          (map \\<pi> xa) @\n                         replicate m (any, replicate n False) =\n                         fin_cut_same (any, replicate n False)\n                          (?x13 x m xa) @\n                         replicate (?m14 x m xa) (any, replicate n False)\n 2. \\<And>x m xa.\n       \\<lbrakk>fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n                replicate m (any, replicate n False)\n                \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X));\n        w =\n        fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n        replicate m (any, replicate n False);\n        xa \\<in> Z;\n        w \\<in> {fin_cut_same (any, replicate n False) x @\n                 replicate m (any, replicate n False) |\n                 x m. x \\<in> map \\<pi> ` Z};\n        w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> ?x13 x m xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter> lang (n + 1) (ENC (n + 1) X))", "assume \\<pi>x: \"fin_cut_same (any, replicate n False) (map \\<pi> x) @\n       replicate m (any, replicate n False) \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\" and \"x \\<in> Z\""], ["proof (state)\nthis:\n  fin_cut_same (any, replicate n False) (map \\<pi> x) @\n  replicate m (any, replicate n False)\n  \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n  x \\<in> Z\n\ngoal (2 subgoals):\n 1. \\<And>x m xa.\n       \\<lbrakk>fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n                replicate m (any, replicate n False)\n                \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X));\n        w =\n        fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n        replicate m (any, replicate n False);\n        xa \\<in> Z;\n        w \\<in> {fin_cut_same (any, replicate n False) x @\n                 replicate m (any, replicate n False) |\n                 x m. x \\<in> map \\<pi> ` Z};\n        w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> fin_cut_same (any, replicate n False)\n                          (map \\<pi> xa) @\n                         replicate m (any, replicate n False) =\n                         fin_cut_same (any, replicate n False)\n                          (?x13 x m xa) @\n                         replicate (?m14 x m xa) (any, replicate n False)\n 2. \\<And>x m xa.\n       \\<lbrakk>fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n                replicate m (any, replicate n False)\n                \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X));\n        w =\n        fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n        replicate m (any, replicate n False);\n        xa \\<in> Z;\n        w \\<in> {fin_cut_same (any, replicate n False) x @\n                 replicate m (any, replicate n False) |\n                 x m. x \\<in> map \\<pi> ` Z};\n        w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> ?x13 x m xa\n                         \\<in> map \\<pi> `\n                               (Z \\<inter> lang (n + 1) (ENC (n + 1) X))", "show \"map \\<pi> x \\<in> map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> x \\<in> map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))", "proof (intro imageI IntI)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> Z\n 2. x \\<in> lang (n + 1) (ENC (n + 1) X)", "from \\<open>x \\<in> Z\\<close> assms(4)"], ["proof (chain)\npicking this:\n  x \\<in> Z\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))", "have \"\\<forall>(_, x)\\<in>set x. x \\<noteq> []\""], ["proof (prove)\nusing this:\n  x \\<in> Z\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []", "by (auto simp: \\<sigma>_def)"], ["proof (state)\nthis:\n  \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n\ngoal (2 subgoals):\n 1. x \\<in> Z\n 2. x \\<in> lang (n + 1) (ENC (n + 1) X)", "with \\<pi>x assms(2)"], ["proof (chain)\npicking this:\n  fin_cut_same (any, replicate n False) (map \\<pi> x) @\n  replicate m (any, replicate n False)\n  \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n  0 \\<notin> X\n  \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []", "show \"x \\<in> lang (n + 1) (ENC (n + 1) X)\""], ["proof (prove)\nusing this:\n  fin_cut_same (any, replicate n False) (map \\<pi> x) @\n  replicate m (any, replicate n False)\n  \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n  0 \\<notin> X\n  \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n\ngoal (1 subgoal):\n 1. x \\<in> lang (n + 1) (ENC (n + 1) X)", "unfolding lang_ENC[OF assms(3) subset_refl] lang_ENC[OF * subset_refl]"], ["proof (prove)\nusing this:\n  fin_cut_same (any, replicate n False) (map \\<pi> x) @\n  replicate m (any, replicate n False)\n  \\<in> \\<Union>\n         {enc (w, I) |w I.\n          length I = n \\<and>\n          wf_interp w I \\<and>\n          (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n              case I ! i of Inl x \\<Rightarrow> True\n              | Inr x \\<Rightarrow> False) \\<and>\n          (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n              case I ! i of Inl x \\<Rightarrow> False\n              | Inr x \\<Rightarrow> True)}\n  0 \\<notin> X\n  \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {enc (w, I) |w I.\n              length I = n + 1 \\<and>\n              wf_interp w I \\<and>\n              (\\<forall>i\\<in>X.\n                  case I ! i of Inl x \\<Rightarrow> True\n                  | Inr x \\<Rightarrow> False) \\<and>\n              (\\<forall>i\\<in>{0..<n + 1} - X.\n                  case I ! i of Inl x \\<Rightarrow> False\n                  | Inr x \\<Rightarrow> True)}", "proof (safe, intro UnionI[OF _ project_enc_extend[rotated]] CollectI exI conjI)"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> enc (?w26 Xa w I,\n                              Inr (positions_in_row\n                                    (x @-\n                                     sconst\n(any, replicate (Suc (length (?I26 Xa w I))) False))\n                                    0) #\n                              ?I26 Xa w I) =\n                         enc (?w30 Xa w I, ?I31 Xa w I)\n 2. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> length (?I31 Xa w I) = length I + 1\n 3. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?w30 Xa w I).\n                            a \\<in> set \\<Sigma>\n 4. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Ball (set (?I31 Xa w I))\n                          (case_sum (\\<lambda>a. True) finite)\n 5. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>X.\n                            case ?I31 Xa w I ! i of Inl x \\<Rightarrow> True\n                            | Inr x \\<Rightarrow> False\n 6. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>{0..<length I + 1} - X.\n                            case ?I31 Xa w I ! i of\n                            Inl x \\<Rightarrow> False\n                            | Inr x \\<Rightarrow> True\n 7. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> fin_cut_same\n                          (any, replicate (length (?I26 Xa w I)) False)\n                          (map \\<pi> x) @\n                         replicate (?m26 Xa w I)\n                          (any, replicate (length (?I26 Xa w I)) False)\n                         \\<in> enc (?w26 Xa w I, ?I26 Xa w I)\n 8. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n 9. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?w26 Xa w I).\n                            a \\<in> set \\<Sigma>\n 10. \\<And>Xa w I.\n        \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n         fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n         replicate m (any, replicate (length I) False)\n         \\<in> enc (w, I);\n         n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n         Ball (set I) (case_sum (\\<lambda>a. True) finite);\n         \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n            case I ! i of Inl x \\<Rightarrow> True\n            | Inr x \\<Rightarrow> False;\n         \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n            case I ! i of Inl x \\<Rightarrow> False\n            | Inr x \\<Rightarrow> True;\n         fin_cut_same (any, replicate n False) (map \\<pi> x) @\n         replicate m (any, replicate n False)\n         \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)};\n         0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (?I26 Xa w I).\n                             case x of Inl a \\<Rightarrow> True\n                             | Inr P \\<Rightarrow> finite P", "fix w and I :: \"(nat + nat set) list\""], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> enc (?w26 Xa w I,\n                              Inr (positions_in_row\n                                    (x @-\n                                     sconst\n(any, replicate (Suc (length (?I26 Xa w I))) False))\n                                    0) #\n                              ?I26 Xa w I) =\n                         enc (?w30 Xa w I, ?I31 Xa w I)\n 2. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> length (?I31 Xa w I) = length I + 1\n 3. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?w30 Xa w I).\n                            a \\<in> set \\<Sigma>\n 4. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Ball (set (?I31 Xa w I))\n                          (case_sum (\\<lambda>a. True) finite)\n 5. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>X.\n                            case ?I31 Xa w I ! i of Inl x \\<Rightarrow> True\n                            | Inr x \\<Rightarrow> False\n 6. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>{0..<length I + 1} - X.\n                            case ?I31 Xa w I ! i of\n                            Inl x \\<Rightarrow> False\n                            | Inr x \\<Rightarrow> True\n 7. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> fin_cut_same\n                          (any, replicate (length (?I26 Xa w I)) False)\n                          (map \\<pi> x) @\n                         replicate (?m26 Xa w I)\n                          (any, replicate (length (?I26 Xa w I)) False)\n                         \\<in> enc (?w26 Xa w I, ?I26 Xa w I)\n 8. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n 9. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?w26 Xa w I).\n                            a \\<in> set \\<Sigma>\n 10. \\<And>Xa w I.\n        \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n         fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n         replicate m (any, replicate (length I) False)\n         \\<in> enc (w, I);\n         n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n         Ball (set I) (case_sum (\\<lambda>a. True) finite);\n         \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n            case I ! i of Inl x \\<Rightarrow> True\n            | Inr x \\<Rightarrow> False;\n         \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n            case I ! i of Inl x \\<Rightarrow> False\n            | Inr x \\<Rightarrow> True;\n         fin_cut_same (any, replicate n False) (map \\<pi> x) @\n         replicate m (any, replicate n False)\n         \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)};\n         0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (?I26 Xa w I).\n                             case x of Inl a \\<Rightarrow> True\n                             | Inr P \\<Rightarrow> finite P", "assume \"Ball (set I) (case_sum (\\<lambda>a. True) finite)\""], ["proof (state)\nthis:\n  Ball (set I) (case_sum (\\<lambda>a. True) finite)\n\ngoal (10 subgoals):\n 1. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> enc (?w26 Xa w I,\n                              Inr (positions_in_row\n                                    (x @-\n                                     sconst\n(any, replicate (Suc (length (?I26 Xa w I))) False))\n                                    0) #\n                              ?I26 Xa w I) =\n                         enc (?w30 Xa w I, ?I31 Xa w I)\n 2. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> length (?I31 Xa w I) = length I + 1\n 3. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?w30 Xa w I).\n                            a \\<in> set \\<Sigma>\n 4. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Ball (set (?I31 Xa w I))\n                          (case_sum (\\<lambda>a. True) finite)\n 5. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>X.\n                            case ?I31 Xa w I ! i of Inl x \\<Rightarrow> True\n                            | Inr x \\<Rightarrow> False\n 6. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>{0..<length I + 1} - X.\n                            case ?I31 Xa w I ! i of\n                            Inl x \\<Rightarrow> False\n                            | Inr x \\<Rightarrow> True\n 7. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> fin_cut_same\n                          (any, replicate (length (?I26 Xa w I)) False)\n                          (map \\<pi> x) @\n                         replicate (?m26 Xa w I)\n                          (any, replicate (length (?I26 Xa w I)) False)\n                         \\<in> enc (?w26 Xa w I, ?I26 Xa w I)\n 8. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n 9. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?w26 Xa w I).\n                            a \\<in> set \\<Sigma>\n 10. \\<And>Xa w I.\n        \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n         fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n         replicate m (any, replicate (length I) False)\n         \\<in> enc (w, I);\n         n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n         Ball (set I) (case_sum (\\<lambda>a. True) finite);\n         \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n            case I ! i of Inl x \\<Rightarrow> True\n            | Inr x \\<Rightarrow> False;\n         \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n            case I ! i of Inl x \\<Rightarrow> False\n            | Inr x \\<Rightarrow> True;\n         fin_cut_same (any, replicate n False) (map \\<pi> x) @\n         replicate m (any, replicate n False)\n         \\<in> \\<Union>\n                {enc (w, I) |w I.\n                 length I = n \\<and>\n                 wf_interp w I \\<and>\n                 (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                     case I ! i of Inl x \\<Rightarrow> True\n                     | Inr x \\<Rightarrow> False) \\<and>\n                 (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                     case I ! i of Inl x \\<Rightarrow> False\n                     | Inr x \\<Rightarrow> True)};\n         0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> \\<forall>x\\<in>set (?I26 Xa w I).\n                             case x of Inl a \\<Rightarrow> True\n                             | Inr P \\<Rightarrow> finite P", "then"], ["proof (chain)\npicking this:\n  Ball (set I) (case_sum (\\<lambda>a. True) finite)", "show \"Ball (set\n             (Inr (positions_in_row (x @- sconst (any, replicate (Suc (length I)) False)) 0) #I))\n           (case_sum (\\<lambda>a. True) finite)\""], ["proof (prove)\nusing this:\n  Ball (set I) (case_sum (\\<lambda>a. True) finite)\n\ngoal (1 subgoal):\n 1. Ball\n     (set (Inr (positions_in_row\n                 (x @- sconst (any, replicate (Suc (length I)) False)) 0) #\n           I))\n     (case_sum (\\<lambda>a. True) finite)", "by (auto simp del: replicate_Suc)"], ["proof (state)\nthis:\n  Ball\n   (set (Inr (positions_in_row\n               (x @- sconst (any, replicate (Suc (length I)) False)) 0) #\n         I))\n   (case_sum (\\<lambda>a. True) finite)\n\ngoal (9 subgoals):\n 1. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> enc (?w26 Xa w I,\n                              Inr (positions_in_row\n                                    (x @-\n                                     sconst\n(any, replicate (Suc (length (?I26 Xa w I))) False))\n                                    0) #\n                              ?I26 Xa w I) =\n                         enc (?w30 Xa w I,\n                              Inr (positions_in_row\n                                    (x @-\n                                     sconst\n(any, replicate (Suc (length I)) False))\n                                    0) #\n                              I)\n 2. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> length\n                          (Inr (positions_in_row\n                                 (x @-\n                                  sconst\n                                   (any, replicate (Suc (length I)) False))\n                                 0) #\n                           I) =\n                         length I + 1\n 3. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?w30 Xa w I).\n                            a \\<in> set \\<Sigma>\n 4. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>X.\n                            case (Inr (positions_in_row\n  (x @- sconst (any, replicate (Suc (length I)) False)) 0) #\n                                  I) !\n                                 i of\n                            Inl x \\<Rightarrow> True\n                            | Inr x \\<Rightarrow> False\n 5. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>{0..<length I + 1} - X.\n                            case (Inr (positions_in_row\n  (x @- sconst (any, replicate (Suc (length I)) False)) 0) #\n                                  I) !\n                                 i of\n                            Inl x \\<Rightarrow> False\n                            | Inr x \\<Rightarrow> True\n 6. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> fin_cut_same\n                          (any, replicate (length (?I26 Xa w I)) False)\n                          (map \\<pi> x) @\n                         replicate (?m26 Xa w I)\n                          (any, replicate (length (?I26 Xa w I)) False)\n                         \\<in> enc (?w26 Xa w I, ?I26 Xa w I)\n 7. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\n 8. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?w26 Xa w I).\n                            a \\<in> set \\<Sigma>\n 9. \\<And>Xa w I.\n       \\<lbrakk>0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> [];\n        fin_cut_same (any, replicate (length I) False) (map \\<pi> x) @\n        replicate m (any, replicate (length I) False)\n        \\<in> enc (w, I);\n        n = length I; \\<forall>a\\<in>set w. a \\<in> set \\<Sigma>;\n        Ball (set I) (case_sum (\\<lambda>a. True) finite);\n        \\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> True\n           | Inr x \\<Rightarrow> False;\n        \\<forall>i\\<in>{0..<length I} - (\\<lambda>x. x - 1) ` X.\n           case I ! i of Inl x \\<Rightarrow> False\n           | Inr x \\<Rightarrow> True;\n        fin_cut_same (any, replicate n False) (map \\<pi> x) @\n        replicate m (any, replicate n False)\n        \\<in> \\<Union>\n               {enc (w, I) |w I.\n                length I = n \\<and>\n                wf_interp w I \\<and>\n                (\\<forall>i\\<in>(\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> True\n                    | Inr x \\<Rightarrow> False) \\<and>\n                (\\<forall>i\\<in>{0..<n} - (\\<lambda>x. x - 1) ` X.\n                    case I ! i of Inl x \\<Rightarrow> False\n                    | Inr x \\<Rightarrow> True)};\n        0 \\<notin> X; \\<forall>(uu_, x)\\<in>set x. x \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (?I26 Xa w I).\n                            case x of Inl a \\<Rightarrow> True\n                            | Inr P \\<Rightarrow> finite P", "qed (auto simp add: nth_Cons' Ball_def in_pred_image_iff)"], ["proof (state)\nthis:\n  x \\<in> lang (n + 1) (ENC (n + 1) X)\n\ngoal (1 subgoal):\n 1. x \\<in> Z", "qed (rule \\<open>x \\<in> Z\\<close>)"], ["proof (state)\nthis:\n  map \\<pi> x \\<in> map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))\n\ngoal (1 subgoal):\n 1. \\<And>x m xa.\n       \\<lbrakk>fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n                replicate m (any, replicate n False)\n                \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X));\n        w =\n        fin_cut_same (any, replicate n False) (map \\<pi> xa) @\n        replicate m (any, replicate n False);\n        xa \\<in> Z;\n        w \\<in> {fin_cut_same (any, replicate n False) x @\n                 replicate m (any, replicate n False) |\n                 x m. x \\<in> map \\<pi> ` Z};\n        w \\<in> lang n (ENC n ((\\<lambda>x. x - 1) ` X))\\<rbrakk>\n       \\<Longrightarrow> fin_cut_same (any, replicate n False)\n                          (map \\<pi> xa) @\n                         replicate m (any, replicate n False) =\n                         fin_cut_same (any, replicate n False)\n                          (map \\<pi> xa) @\n                         replicate (?m14 x m xa) (any, replicate n False)", "qed (rule refl)"], ["proof (state)\nthis:\n  w \\<in> SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang_ENC_split:\n  assumes \"finite X\" \"X = Y1 \\<union> Y2\" \"n = 0 \\<or> (\\<forall>p \\<in> X. p < n)\"\n  shows \"lang n (ENC n X) = lang n (ENC n Y1) \\<inter> lang n (ENC n Y2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n (ENC n X) = lang n (ENC n Y1) \\<inter> lang n (ENC n Y2)", "unfolding ENC_def lang_INTERSECT"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if sorted_list_of_set (valid_ENC n ` X) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter> (lang n ` set (sorted_list_of_set (valid_ENC n ` X)))) =\n    (if sorted_list_of_set (valid_ENC n ` Y1) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter>\n           (lang n ` set (sorted_list_of_set (valid_ENC n ` Y1)))) \\<inter>\n    (if sorted_list_of_set (valid_ENC n ` Y2) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter> (lang n ` set (sorted_list_of_set (valid_ENC n ` Y2))))", "using assms lang_subset_lists[OF wf_rexp_valid_ENC, of n]"], ["proof (prove)\nusing this:\n  finite X\n  X = Y1 \\<union> Y2\n  n = 0 \\<or> (\\<forall>p\\<in>X. p < n)\n  n = 0 \\<or> ?p1 < n \\<Longrightarrow>\n  lang n (valid_ENC n ?p1)\n  \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n\ngoal (1 subgoal):\n 1. (if sorted_list_of_set (valid_ENC n ` X) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter> (lang n ` set (sorted_list_of_set (valid_ENC n ` X)))) =\n    (if sorted_list_of_set (valid_ENC n ` Y1) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter>\n           (lang n ` set (sorted_list_of_set (valid_ENC n ` Y1)))) \\<inter>\n    (if sorted_list_of_set (valid_ENC n ` Y2) = []\n     then lists ((set \\<circ> \\<sigma> \\<Sigma>) n)\n     else \\<Inter> (lang n ` set (sorted_list_of_set (valid_ENC n ` Y2))))", "by auto"], ["", "lemma map_project_ENC:\n  fixes n\n  assumes \"X \\<subseteq> {0 ..< n + 1}\" \"Z \\<subseteq> lists ((set o \\<sigma> \\<Sigma>) (n + 1))\"\n  defines \"z \\<equiv> (any, replicate n False)\"\n  shows \"SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    (if 0 \\<in> X\n    then SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n    else SAMEQUOT z (map \\<pi> ` Z) \\<inter> lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))))\"\n    (is \"?L = (if _ then ?R1 else ?R2)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    (if 0 \\<in> X\n     then SAMEQUOT z\n           (map \\<pi> `\n            (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n          lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n     else SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n          lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0}))))", "proof (split if_splits, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n 2. 0 \\<notin> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "assume 0: \"0 \\<notin> X\""], ["proof (state)\nthis:\n  0 \\<notin> X\n\ngoal (2 subgoals):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n 2. 0 \\<notin> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "from assms"], ["proof (chain)\npicking this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n  z \\<equiv> (any, replicate n False)", "have fin: \"finite X\" \"finite ((\\<lambda>x. x - 1) ` X)\""], ["proof (prove)\nusing this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n  z \\<equiv> (any, replicate n False)\n\ngoal (1 subgoal):\n 1. finite X &&& finite ((\\<lambda>x. x - 1) ` X)", "by (auto elim: finite_subset intro!: finite_imageI[of \"X\"])"], ["proof (state)\nthis:\n  finite X\n  finite ((\\<lambda>x. x - 1) ` X)\n\ngoal (2 subgoals):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n 2. 0 \\<notin> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "from 0"], ["proof (chain)\npicking this:\n  0 \\<notin> X", "show \"?L = ?R2\""], ["proof (prove)\nusing this:\n  0 \\<notin> X\n\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "using map_project_Int_ENC[OF 0 assms(1,2)]"], ["proof (prove)\nusing this:\n  0 \\<notin> X\n  SAMEQUOT (any, replicate n False)\n   (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT (any, replicate n False) (map \\<pi> ` Z) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "unfolding lists_image[symmetric] \\<pi>_\\<sigma>\n      Int_absorb1[OF lang_subset_lists[OF wf_rexp_ENC[OF fin(1)]], of \"n + 1\"]\n      Int_absorb1[OF lang_subset_lists[OF wf_rexp_ENC[OF fin(2)]], of n]"], ["proof (prove)\nusing this:\n  0 \\<notin> X\n  SAMEQUOT (any, replicate n False)\n   (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT (any, replicate n False) (map \\<pi> ` Z) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "unfolding z_def"], ["proof (prove)\nusing this:\n  0 \\<notin> X\n  SAMEQUOT (any, replicate n False)\n   (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT (any, replicate n False) (map \\<pi> ` Z) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` X))\n\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT (any, replicate n False) (map \\<pi> ` Z) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "by auto"], ["proof (state)\nthis:\n  SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT z (map \\<pi> ` Z) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "assume \"0 \\<in> X\""], ["proof (state)\nthis:\n  0 \\<in> X\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "hence 0: \"0 \\<notin> X - {0}\" and X: \"X = {0} \\<union> (X - {0})\""], ["proof (prove)\nusing this:\n  0 \\<in> X\n\ngoal (1 subgoal):\n 1. 0 \\<notin> X - {0} &&& X = {0} \\<union> (X - {0})", "by auto"], ["proof (state)\nthis:\n  0 \\<notin> X - {0}\n  X = {0} \\<union> (X - {0})\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "from assms"], ["proof (chain)\npicking this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n  z \\<equiv> (any, replicate n False)", "have fin: \"finite X\""], ["proof (prove)\nusing this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n  z \\<equiv> (any, replicate n False)\n\ngoal (1 subgoal):\n 1. finite X", "by (auto elim: finite_subset intro!: finite_imageI[of \"X\"])"], ["proof (state)\nthis:\n  finite X\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "have \"?L = SAMEQUOT z (map \\<pi> ` ((Z \\<inter> lang (n + 1) (ENC (n + 1) {0})) \\<inter> lang (n + 1) (ENC (n + 1) (X - {0}))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> `\n      (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n       lang (n + 1) (ENC (n + 1) (X - {0}))))", "unfolding Int_assoc z_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (Z \\<inter>\n       (lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n        lang (n + 1) (ENC (n + 1) (X - {0})))))", "using assms"], ["proof (prove)\nusing this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n  z \\<equiv> (any, replicate n False)\n\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (Z \\<inter>\n       (lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n        lang (n + 1) (ENC (n + 1) (X - {0})))))", "by (subst lang_ENC_split[OF fin X, of \"n + 1\"]) auto"], ["proof (state)\nthis:\n  SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT z\n   (map \\<pi> `\n    (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n     lang (n + 1) (ENC (n + 1) (X - {0}))))\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "also"], ["proof (state)\nthis:\n  SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT z\n   (map \\<pi> `\n    (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n     lang (n + 1) (ENC (n + 1) (X - {0}))))\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "have \"\\<dots> = ?R1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT z\n     (map \\<pi> `\n      (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n       lang (n + 1) (ENC (n + 1) (X - {0})))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "unfolding z_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n       lang (n + 1) (ENC (n + 1) (X - {0})))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "using assms(1,2)"], ["proof (prove)\nusing this:\n  X \\<subseteq> {0..<n + 1}\n  Z \\<subseteq> lists ((set \\<circ> \\<sigma> \\<Sigma>) (n + 1))\n\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n       lang (n + 1) (ENC (n + 1) (X - {0})))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "by (intro map_project_Int_ENC) auto"], ["proof (state)\nthis:\n  SAMEQUOT z\n   (map \\<pi> `\n    (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}) \\<inter>\n     lang (n + 1) (ENC (n + 1) (X - {0})))) =\n  SAMEQUOT z\n   (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n\ngoal (1 subgoal):\n 1. 0 \\<in> X \\<Longrightarrow>\n    SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "finally"], ["proof (chain)\npicking this:\n  SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT z\n   (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "show \"?L = ?R1\""], ["proof (prove)\nusing this:\n  SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT z\n   (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n\ngoal (1 subgoal):\n 1. SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n    SAMEQUOT z\n     (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))", "."], ["proof (state)\nthis:\n  SAMEQUOT z (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) X))) =\n  SAMEQUOT z\n   (map \\<pi> ` (Z \\<inter> lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n  lang n (ENC n ((\\<lambda>x. x - 1) ` (X - {0})))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of'_rexp_of'':\n  \"wf_formula n \\<phi> \\<Longrightarrow> lang n (rexp_of' n \\<phi>) = lang n (rexp_of'' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang n (rexp_of' n \\<phi>) = lang n (rexp_of'' n \\<phi>)", "unfolding rexp_of'_def rexp_of''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang n (rexp.Inter (rexp_of_alt n \\<phi>) (ENC n (FOV \\<phi>))) =\n    lang n (rexp.Inter (rexp_of_alt' n \\<phi>) (ENC n (FOV \\<phi>)))", "proof (induction \\<phi> arbitrary: n)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FNot \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>))) =\n  lang ?n2 (rexp.Inter (rexp_of_alt' ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FNot \\<phi>)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "hence \"wf_formula n \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>))) =\n  lang ?n2 (rexp.Inter (rexp_of_alt' ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FNot \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>", "by simp"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FNot \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FNot \\<phi>))\n                            (ENC n (FOV (FNot \\<phi>))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 8. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "with FNot.IH"], ["proof (chain)\npicking this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>))) =\n  lang ?n2 (rexp.Inter (rexp_of_alt' ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>))) =\n  lang ?n2 (rexp.Inter (rexp_of_alt' ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n \\<phi>\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FNot \\<phi>))\n       (ENC n (FOV (FNot \\<phi>)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FNot \\<phi>)) (ENC n (FOV (FNot \\<phi>))))", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps ENC_FNot"], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp_of_alt ?n2 \\<phi>) \\<inter>\n  lang ?n2 (ENC ?n2 (FOV \\<phi>)) =\n  lang ?n2 (rexp_of_alt' ?n2 \\<phi>) \\<inter>\n  lang ?n2 (ENC ?n2 (FOV \\<phi>))\n  wf_formula n \\<phi>\n\ngoal (1 subgoal):\n 1. (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n     lang n (rexp_of_alt n \\<phi>)) \\<inter>\n    lang n (ENC n (FOV \\<phi>)) =\n    (lists ((set \\<circ> \\<sigma> \\<Sigma>) n) -\n     lang n (rexp_of_alt' n \\<phi>)) \\<inter>\n    lang n (ENC n (FOV \\<phi>))", "by blast"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FNot \\<phi>)) (ENC n (FOV (FNot \\<phi>)))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FNot \\<phi>)) (ENC n (FOV (FNot \\<phi>))))\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1))) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt' ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1)))\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2))) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt' ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2)))\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "hence wf1: \"wf_formula n \\<phi>\\<^sub>1\" and wf2: \"wf_formula n \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1))) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt' ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1)))\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2))) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt' ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2)))\n  wf_formula n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>\\<^sub>1 &&& wf_formula n \\<phi>\\<^sub>2", "by force+"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\\<^sub>1\n  wf_formula n \\<phi>\\<^sub>2\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FAnd \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter\n                            (rexp_of_alt' n (FAnd \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FAnd \\<phi>1 \\<phi>2))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 7. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "from FAnd.IH(1)[OF wf1] FAnd.IH(2)[OF wf2]"], ["proof (chain)\npicking this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))", "show ?case"], ["proof (prove)\nusing this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))", "using ENC_FAnd[OF FAnd.prems]"], ["proof (prove)\nusing this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))\n  lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1)) =\n  lang n (rexp_of_alt' n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1))\n  lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2)) =\n  lang n (rexp_of_alt' n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2))\n  lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n    lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n    lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) =\n    lang n (rexp_of_alt' n \\<phi>\\<^sub>1) \\<inter>\n    lang n (rexp_of_alt' n \\<phi>\\<^sub>2) \\<inter>\n    lang n (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))", "by blast"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FAnd \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1))) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt' ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1)))\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2))) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt' ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2)))\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "hence wf1: \"wf_formula n \\<phi>\\<^sub>1\" and wf2: \"wf_formula n \\<phi>\\<^sub>2\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi>\\<^sub>1 \\<Longrightarrow>\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1))) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt' ?n2 \\<phi>\\<^sub>1)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>1)))\n  wf_formula ?n2 \\<phi>\\<^sub>2 \\<Longrightarrow>\n  lang ?n2\n   (rexp.Inter (rexp_of_alt ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2))) =\n  lang ?n2\n   (rexp.Inter (rexp_of_alt' ?n2 \\<phi>\\<^sub>2)\n     (ENC ?n2 (FOV \\<phi>\\<^sub>2)))\n  wf_formula n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. wf_formula n \\<phi>\\<^sub>1 &&& wf_formula n \\<phi>\\<^sub>2", "by force+"], ["proof (state)\nthis:\n  wf_formula n \\<phi>\\<^sub>1\n  wf_formula n \\<phi>\\<^sub>2\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi>1 \\<phi>2 n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi>1 \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>1)\n                      (ENC n (FOV \\<phi>1))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>1)\n                      (ENC n (FOV \\<phi>1)));\n        \\<And>n.\n           wf_formula n \\<phi>2 \\<Longrightarrow>\n           lang n\n            (rexp.Inter (rexp_of_alt n \\<phi>2) (ENC n (FOV \\<phi>2))) =\n           lang n\n            (rexp.Inter (rexp_of_alt' n \\<phi>2) (ENC n (FOV \\<phi>2)));\n        wf_formula n (FOr \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FOr \\<phi>1 \\<phi>2))\n                            (ENC n (FOV (FOr \\<phi>1 \\<phi>2))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 6. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "from FOr.IH(1)[OF wf1] FOr.IH(2)[OF wf2]"], ["proof (chain)\npicking this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))", "show ?case"], ["proof (prove)\nusing this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))", "using ENC_FOr[OF FOr.prems]"], ["proof (prove)\nusing this:\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>1)\n     (ENC n (FOV \\<phi>\\<^sub>1))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>1) (ENC n (FOV \\<phi>\\<^sub>1)))\n  lang n\n   (rexp.Inter (rexp_of_alt n \\<phi>\\<^sub>2)\n     (ENC n (FOV \\<phi>\\<^sub>2))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n \\<phi>\\<^sub>2) (ENC n (FOV \\<phi>\\<^sub>2)))\n  lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n       (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps rexp_of_list.simps"], ["proof (prove)\nusing this:\n  lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1)) =\n  lang n (rexp_of_alt' n \\<phi>\\<^sub>1) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>1))\n  lang n (rexp_of_alt n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2)) =\n  lang n (rexp_of_alt' n \\<phi>\\<^sub>2) \\<inter>\n  lang n (ENC n (FOV \\<phi>\\<^sub>2))\n  lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))\n  \\<subseteq> lang n (ENC n (FOV \\<phi>\\<^sub>1)) \\<inter>\n              lang n (ENC n (FOV \\<phi>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (lang n (rexp_of_alt n \\<phi>\\<^sub>1) \\<union>\n     lang n (rexp_of_alt n \\<phi>\\<^sub>2)) \\<inter>\n    lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))) =\n    (lang n (rexp_of_alt' n \\<phi>\\<^sub>1) \\<union>\n     lang n (rexp_of_alt' n \\<phi>\\<^sub>2)) \\<inter>\n    lang n (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))", "by blast"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2)))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))\n     (ENC n (FOV (FOr \\<phi>\\<^sub>1 \\<phi>\\<^sub>2))))\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FExists \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>))) =\n  lang ?n2 (rexp.Inter (rexp_of_alt' ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FExists \\<phi>)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "hence wf: \"wf_formula (n + 1) \\<phi>\" and 0: \"0 \\<in> FOV \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>))) =\n  lang ?n2 (rexp.Inter (rexp_of_alt' ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FExists \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula (n + 1) \\<phi> &&& 0 \\<in> FOV \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FExists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n                            (ENC n (FOV (FExists \\<phi>))))\n 5. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "then"], ["proof (chain)\npicking this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>))))", "using max_idx_vars[of \"n + 1\" \\<phi>] wf_rexp_of_alt'[OF wf]"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n       (ENC n (FOV (FExists \\<phi>))))", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps Suc_eq_plus1"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n\ngoal (1 subgoal):\n 1. lang n\n     (samequot_exec (any, replicate n False)\n       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n             (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>))) =\n    lang n\n     (samequot_exec (any, replicate n False)\n       (Pr (rexp.Inter (rexp_of_alt' (n + 1) \\<phi>)\n             (ENC (n + 1) {0})))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>)))", "proof (subst (1 2) lang_samequot_exec)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<in> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> local.wf n\n                       (Pr (rexp.Inter (rexp_of_alt' (n + 1) \\<phi>)\n                             (ENC (n + 1) {0})))\n 2. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<in> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (any, replicate n False)\n                      \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n\n 3. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<in> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> local.wf n\n                       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n                             (ENC (n + 1) (FOV \\<phi>))))\n 4. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<in> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> SAMEQUOT (any, replicate n False)\n                       (lang n\n                         (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n                               (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n                      lang n (ENC n (FOV (FExists \\<phi>))) =\n                      SAMEQUOT (any, replicate n False)\n                       (lang n\n                         (Pr (rexp.Inter (rexp_of_alt' (n + 1) \\<phi>)\n                               (ENC (n + 1) {0})))) \\<inter>\n                      lang n (ENC n (FOV (FExists \\<phi>)))", "show \"SAMEQUOT (any, replicate n False)\n          (lang n (Pr (Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n          lang n (ENC n (FOV (FExists \\<phi>))) =\n        SAMEQUOT (any, replicate n False)\n          (lang n (Pr (Inter (rexp_of_alt' (n + 1) \\<phi>) (ENC (n + 1) {0})))) \\<inter>\n          lang n (ENC n (FOV (FExists \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (lang n\n       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n             (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>))) =\n    SAMEQUOT (any, replicate n False)\n     (lang n\n       (Pr (rexp.Inter (rexp_of_alt' (n + 1) \\<phi>)\n             (ENC (n + 1) {0})))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>)))", "using wf 0 max_idx_vars[of \"n + 1\" \\<phi>] wf_rexp_of_alt'[OF wf]"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (lang n\n       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n             (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>))) =\n    SAMEQUOT (any, replicate n False)\n     (lang n\n       (Pr (rexp.Inter (rexp_of_alt' (n + 1) \\<phi>)\n             (ENC (n + 1) {0})))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>)))", "unfolding lang.simps FExists.IH[OF wf, unfolded lang.simps]"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<in> FOV \\<phi>\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) \\<inter>\n       lang (n + 1) (ENC (n + 1) (FOV \\<phi>)))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) \\<inter>\n       lang (n + 1) (ENC (n + 1) {0}))) \\<inter>\n    lang n (ENC n (FOV (FExists \\<phi>)))", "by (subst (1) map_project_ENC) (auto dest: subsetD[OF lang_subset_lists])"], ["proof (state)\nthis:\n  SAMEQUOT (any, replicate n False)\n   (lang n\n     (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n           (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n  lang n (ENC n (FOV (FExists \\<phi>))) =\n  SAMEQUOT (any, replicate n False)\n   (lang n\n     (Pr (rexp.Inter (rexp_of_alt' (n + 1) \\<phi>)\n           (ENC (n + 1) {0})))) \\<inter>\n  lang n (ENC n (FOV (FExists \\<phi>)))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<in> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> local.wf n\n                       (Pr (rexp.Inter (rexp_of_alt' (n + 1) \\<phi>)\n                             (ENC (n + 1) {0})))\n 2. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<in> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (any, replicate n False)\n                      \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n\n 3. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<in> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> local.wf n\n                       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n                             (ENC (n + 1) (FOV \\<phi>))))", "qed (auto simp add: wf_rexp_of_alt finite_FOV wf_rexp_ENC)"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FExists \\<phi>))\n     (ENC n (FOV (FExists \\<phi>)))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FExists \\<phi>))\n     (ENC n (FOV (FExists \\<phi>))))\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "case (FEXISTS \\<phi>)"], ["proof (state)\nthis:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>))) =\n  lang ?n2 (rexp.Inter (rexp_of_alt' ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "hence wf: \"wf_formula (n + 1) \\<phi>\" and 0: \"0 \\<notin> FOV \\<phi>\""], ["proof (prove)\nusing this:\n  wf_formula ?n2 \\<phi> \\<Longrightarrow>\n  lang ?n2 (rexp.Inter (rexp_of_alt ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>))) =\n  lang ?n2 (rexp.Inter (rexp_of_alt' ?n2 \\<phi>) (ENC ?n2 (FOV \\<phi>)))\n  wf_formula n (FEXISTS \\<phi>)\n\ngoal (1 subgoal):\n 1. wf_formula (n + 1) \\<phi> &&& 0 \\<notin> FOV \\<phi>", "by auto"], ["proof (state)\nthis:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))\n 4. \\<And>\\<phi> n.\n       \\<lbrakk>\\<And>n.\n                   wf_formula n \\<phi> \\<Longrightarrow>\n                   lang n\n                    (rexp.Inter (rexp_of_alt n \\<phi>)\n                      (ENC n (FOV \\<phi>))) =\n                   lang n\n                    (rexp.Inter (rexp_of_alt' n \\<phi>)\n                      (ENC n (FOV \\<phi>)));\n        wf_formula n (FEXISTS \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> lang n\n                          (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>)))) =\n                         lang n\n                          (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n                            (ENC n (FOV (FEXISTS \\<phi>))))", "then"], ["proof (chain)\npicking this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>))))", "using max_idx_vars[of \"n + 1\" \\<phi>] wf_rexp_of_alt'[OF wf]"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n\ngoal (1 subgoal):\n 1. lang n\n     (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>)))) =\n    lang n\n     (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n       (ENC n (FOV (FEXISTS \\<phi>))))", "unfolding rexp_of_alt.simps rexp_of_alt'.simps lang.simps Suc_eq_plus1"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n\ngoal (1 subgoal):\n 1. lang n\n     (samequot_exec (any, replicate n False)\n       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n             (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n    lang n\n     (samequot_exec (any, replicate n False)\n       (Pr (rexp_of_alt' (n + 1) \\<phi>))) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>)))", "proof (subst (1 2) lang_samequot_exec)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<notin> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> local.wf n (Pr (rexp_of_alt' (n + 1) \\<phi>))\n 2. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<notin> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (any, replicate n False)\n                      \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n\n 3. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<notin> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> local.wf n\n                       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n                             (ENC (n + 1) (FOV \\<phi>))))\n 4. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<notin> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> SAMEQUOT (any, replicate n False)\n                       (lang n\n                         (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n                               (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n                      lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n                      SAMEQUOT (any, replicate n False)\n                       (lang n (Pr (rexp_of_alt' (n + 1) \\<phi>))) \\<inter>\n                      lang n (ENC n (FOV (FEXISTS \\<phi>)))", "show \"SAMEQUOT (any, replicate n False)\n          (lang n (Pr (Inter (rexp_of_alt (n + 1) \\<phi>) (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n          lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n        SAMEQUOT (any, replicate n False)\n          (lang n (Pr (rexp_of_alt' (n + 1) \\<phi>))) \\<inter>\n          lang n (ENC n (FOV (FEXISTS \\<phi>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (lang n\n       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n             (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n    SAMEQUOT (any, replicate n False)\n     (lang n (Pr (rexp_of_alt' (n + 1) \\<phi>))) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>)))", "using wf 0 max_idx_vars[of \"n + 1\" \\<phi>] wf_rexp_of_alt'[OF wf]"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (lang n\n       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n             (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n    SAMEQUOT (any, replicate n False)\n     (lang n (Pr (rexp_of_alt' (n + 1) \\<phi>))) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>)))", "unfolding lang.simps FEXISTS.IH[OF wf, unfolded lang.simps]"], ["proof (prove)\nusing this:\n  wf_formula (n + 1) \\<phi>\n  0 \\<notin> FOV \\<phi>\n  pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n  \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1\n  local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\n\ngoal (1 subgoal):\n 1. SAMEQUOT (any, replicate n False)\n     (map \\<pi> `\n      (lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>) \\<inter>\n       lang (n + 1) (ENC (n + 1) (FOV \\<phi>)))) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n    SAMEQUOT (any, replicate n False)\n     (map \\<pi> ` lang (n + 1) (rexp_of_alt' (n + 1) \\<phi>)) \\<inter>\n    lang n (ENC n (FOV (FEXISTS \\<phi>)))", "by (subst (1) map_project_ENC) (auto dest: subsetD[OF lang_subset_lists])"], ["proof (state)\nthis:\n  SAMEQUOT (any, replicate n False)\n   (lang n\n     (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n           (ENC (n + 1) (FOV \\<phi>))))) \\<inter>\n  lang n (ENC n (FOV (FEXISTS \\<phi>))) =\n  SAMEQUOT (any, replicate n False)\n   (lang n (Pr (rexp_of_alt' (n + 1) \\<phi>))) \\<inter>\n  lang n (ENC n (FOV (FEXISTS \\<phi>)))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<notin> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> local.wf n (Pr (rexp_of_alt' (n + 1) \\<phi>))\n 2. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<notin> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> (any, replicate n False)\n                      \\<in> (set \\<circ> \\<sigma> \\<Sigma>) n\n 3. \\<lbrakk>wf_formula (n + 1) \\<phi>; 0 \\<notin> FOV \\<phi>;\n     pre_wf_formula (n + 1) \\<phi> \\<Longrightarrow>\n     \\<forall>p\\<in>FOV \\<phi> \\<union> SOV \\<phi>. p < n + 1;\n     local.wf (n + 1) (rexp_of_alt' (n + 1) \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> local.wf n\n                       (Pr (rexp.Inter (rexp_of_alt (n + 1) \\<phi>)\n                             (ENC (n + 1) (FOV \\<phi>))))", "qed (auto simp add: wf_rexp_of_alt finite_FOV wf_rexp_ENC)"], ["proof (state)\nthis:\n  lang n\n   (rexp.Inter (rexp_of_alt n (FEXISTS \\<phi>))\n     (ENC n (FOV (FEXISTS \\<phi>)))) =\n  lang n\n   (rexp.Inter (rexp_of_alt' n (FEXISTS \\<phi>))\n     (ENC n (FOV (FEXISTS \\<phi>))))\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2 n.\n       wf_formula n (FQ x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FQ x1 x2)) (ENC n (FOV (FQ x1 x2))))\n 2. \\<And>x1 x2 n.\n       wf_formula n (FLess x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FLess x1 x2))\n          (ENC n (FOV (FLess x1 x2))))\n 3. \\<And>x1 x2 n.\n       wf_formula n (FIn x1 x2) \\<Longrightarrow>\n       lang n\n        (rexp.Inter (rexp_of_alt n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2)))) =\n       lang n\n        (rexp.Inter (rexp_of_alt' n (FIn x1 x2)) (ENC n (FOV (FIn x1 x2))))", "qed simp_all"], ["", "theorem lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of': \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> = lang n (rexp_of' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n    lang n (rexp_of' n \\<phi>)", "unfolding lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of_rexp_of'[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n    lang n (rexp_of n \\<phi>)", "by (rule lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of)"], ["", "theorem lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of'': \"wf_formula n \\<phi> \\<Longrightarrow> lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> = lang n (rexp_of'' n \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n    lang n (rexp_of'' n \\<phi>)", "unfolding lang\\<^sub>M\\<^sub>2\\<^sub>L_rexp_of'_rexp_of''[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_formula n \\<phi> \\<Longrightarrow>\n    lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S n \\<phi> =\n    lang n (rexp_of' n \\<phi>)", "by (rule lang\\<^sub>W\\<^sub>S\\<^sub>1\\<^sub>S_rexp_of')"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}