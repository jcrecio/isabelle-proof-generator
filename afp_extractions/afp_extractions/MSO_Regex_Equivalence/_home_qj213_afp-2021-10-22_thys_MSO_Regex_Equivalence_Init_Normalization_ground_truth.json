{"file_name": "/home/qj213/afp-2021-10-22/thys/MSO_Regex_Equivalence/Init_Normalization.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MSO_Regex_Equivalence", "problem_names": ["lemma toplevel_inters_nonempty[simp]:\n  \"toplevel_inters r \\<noteq> {}\"", "lemma toplevel_inters_finite[simp]:\n  \"finite (toplevel_inters r)\"", "lemma toplevel_inters_wf:\n  \"wf n s = (\\<forall>r\\<in>toplevel_inters s. wf n r)\"", "lemma toplevel_inters_lang:\n  \"r \\<in> toplevel_inters s \\<Longrightarrow> lang n s \\<subseteq> lang n r\"", "lemma toplevel_inters_lang_INT:\n  \"lang n s = (\\<Inter>r\\<in>toplevel_inters s. lang n r)\"", "lemma toplevel_inters_in_lang:\n  \"w \\<in> lang n s = (\\<forall>r\\<in>toplevel_inters s. w \\<in> lang n r)\"", "lemma lang_flatten_INTERSECT_finite[simp]:\n  \"finite X \\<Longrightarrow> w \\<in> lang n (flatten INTERSECT X) = \n    (if X = {} then w \\<in> lists (\\<Sigma> n) else (\\<forall>r \\<in> X. w \\<in> lang n r))\"", "lemma set_merge_distinct[simp]: \"set (merge_distinct xs ys) = set xs \\<union> set ys\"", "lemma sorted_merge_distinct[simp]: \"\\<lbrakk>sorted xs; sorted ys\\<rbrakk> \\<Longrightarrow> sorted (merge_distinct xs ys)\"", "lemma distinct_merge_distinct[simp]: \"\\<lbrakk>sorted xs; distinct xs; sorted ys; distinct ys\\<rbrakk> \\<Longrightarrow>\n  distinct (merge_distinct xs ys)\"", "lemma sorted_list_of_set_merge_distinct[simp]: \"\\<lbrakk>sorted xs; distinct xs; sorted ys; distinct ys\\<rbrakk> \\<Longrightarrow>\n  merge_distinct xs ys = sorted_list_of_set (set xs \\<union> set ys)\"", "lemma zip_with_option_eq_Some[simp]:\n  \"zip_with_option f x y = Some z \\<longleftrightarrow> (\\<exists>a b. z = f a b \\<and> x = Some a \\<and> y = Some b)\"", "lemma Pluss_None[symmetric]: \"Pluss r = None \\<longleftrightarrow> Full \\<in> toplevel_summands r\"", "lemma Pluss_Some: \"Pluss r = Some xs \\<longleftrightarrow>\n  (Full \\<notin> set xs \\<and> xs = sorted_list_of_set (toplevel_summands r - {Zero}))\"", "lemma Inters_None[symmetric]: \"Inters r = None \\<longleftrightarrow> Zero \\<in> toplevel_inters r\"", "lemma Inters_Some: \"Inters r = Some xs \\<longleftrightarrow>\n  (Zero \\<notin> set xs \\<and> xs = sorted_list_of_set (toplevel_inters r - {Full}))\"", "lemma inPlus_alt: \"inPlus r s = (let X = toplevel_summands (Plus r s) - {Zero} in\n  flatten PLUS (if Full \\<in> X then {Full} else X))\"", "lemma inInter_alt: \"inInter r s = (let X = toplevel_inters (Inter r s) - {Full} in\n  flatten INTERSECT (if Zero \\<in> X then {Zero} else X))\"", "lemma wf_inPlus[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> wf n (inPlus r s)\"", "lemma wf_inTimes[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> wf n (inTimes r s)\"", "lemma wf_inStar[simp]: \"wf n r \\<Longrightarrow> wf n (inStar r)\"", "lemma wf_inInter[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> wf n (inInter r s)\"", "lemma wf_inNot[simp]: \"wf n r \\<Longrightarrow> wf n (inNot r)\"", "lemma wf_inPr[simp]: \"wf (Suc n) r \\<Longrightarrow> wf n (inPr r)\"", "lemma wf_inorm[simp]: \"wf n r \\<Longrightarrow> wf n (inorm r)\"", "lemma lang_inPlus[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> lang n (inPlus r s) = lang n (Plus r s)\"", "lemma lang_inTimes[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> lang n (inTimes r s) = lang n (Times r s)\"", "lemma lang_inStar[simp]: \"wf n r \\<Longrightarrow> lang n (inStar r) = lang n (Star r)\"", "lemma Zero_toplevel_inters[dest]: \"Zero \\<in> toplevel_inters r \\<Longrightarrow> lang n r = {}\"", "lemma toplevel_inters_Full: \"\\<lbrakk>toplevel_inters r = {Full}; wf n r\\<rbrakk> \\<Longrightarrow> lang n r = lists (\\<Sigma> n)\"", "lemma toplevel_inters_subset_singleton[simp]: \"toplevel_inters r \\<subseteq> {s} \\<longleftrightarrow> toplevel_inters r = {s}\"", "lemma lang_inInter[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> lang n (inInter r s) = lang n (Inter r s)\"", "lemma lang_inNot[simp]: \"wf n r \\<Longrightarrow> lang n (inNot r) = lang n (Not r)\"", "lemma lang_inPr[simp]: \"wf (Suc n) r \\<Longrightarrow> lang n (inPr r) = lang n (Pr r)\"", "lemma lang_inorm[simp]: \"wf n r \\<Longrightarrow> lang n (inorm r) = lang n r\""], "translations": [["", "lemma toplevel_inters_nonempty[simp]:\n  \"toplevel_inters r \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toplevel_inters r \\<noteq> {}", "by (induct r) auto"], ["", "lemma toplevel_inters_finite[simp]:\n  \"finite (toplevel_inters r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (toplevel_inters r)", "by (induct r) auto"], ["", "context alphabet\nbegin"], ["", "lemma toplevel_inters_wf:\n  \"wf n s = (\\<forall>r\\<in>toplevel_inters s. wf n r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf n s = (\\<forall>r\\<in>toplevel_inters s. local.wf n r)", "by (induct s) auto"], ["", "end"], ["", "context project\nbegin"], ["", "lemma toplevel_inters_lang:\n  \"r \\<in> toplevel_inters s \\<Longrightarrow> lang n s \\<subseteq> lang n r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> toplevel_inters s \\<Longrightarrow>\n    lang n s \\<subseteq> lang n r", "by (induct s) auto"], ["", "lemma toplevel_inters_lang_INT:\n  \"lang n s = (\\<Inter>r\\<in>toplevel_inters s. lang n r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang n s = \\<Inter> (lang n ` toplevel_inters s)", "by (induct s) auto"], ["", "lemma toplevel_inters_in_lang:\n  \"w \\<in> lang n s = (\\<forall>r\\<in>toplevel_inters s. w \\<in> lang n r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<in> lang n s) =\n    (\\<forall>r\\<in>toplevel_inters s. w \\<in> lang n r)", "by (induct s) auto"], ["", "lemma lang_flatten_INTERSECT_finite[simp]:\n  \"finite X \\<Longrightarrow> w \\<in> lang n (flatten INTERSECT X) = \n    (if X = {} then w \\<in> lists (\\<Sigma> n) else (\\<forall>r \\<in> X. w \\<in> lang n r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X \\<Longrightarrow>\n    (w \\<in> lang n (INTERSECT (sorted_list_of_set X))) =\n    (if X = {} then w \\<in> lists (\\<Sigma> n)\n     else \\<forall>r\\<in>X. w \\<in> lang n r)", "unfolding lang_INTERSECT"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X \\<Longrightarrow>\n    (w \\<in> (if sorted_list_of_set X = [] then lists (\\<Sigma> n)\n              else \\<Inter> (lang n ` set (sorted_list_of_set X)))) =\n    (if X = {} then w \\<in> lists (\\<Sigma> n)\n     else \\<forall>r\\<in>X. w \\<in> lang n r)", "by auto"], ["", "end"], ["", "fun merge_distinct where\n  \"merge_distinct [] xs = xs\"\n| \"merge_distinct xs [] = xs\"\n| \"merge_distinct (a # xs) (b # ys) =\n    (if a = b then merge_distinct xs (b # ys)\n    else if a < b then a # merge_distinct xs (b # ys)\n    else b # merge_distinct (a # xs) ys)\""], ["", "lemma set_merge_distinct[simp]: \"set (merge_distinct xs ys) = set xs \\<union> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (merge_distinct xs ys) = set xs \\<union> set ys", "by (induct xs ys rule: merge_distinct.induct) auto"], ["", "lemma sorted_merge_distinct[simp]: \"\\<lbrakk>sorted xs; sorted ys\\<rbrakk> \\<Longrightarrow> sorted (merge_distinct xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted xs; sorted ys\\<rbrakk>\n    \\<Longrightarrow> sorted (merge_distinct xs ys)", "by (induct xs ys rule: merge_distinct.induct) (auto)"], ["", "lemma distinct_merge_distinct[simp]: \"\\<lbrakk>sorted xs; distinct xs; sorted ys; distinct ys\\<rbrakk> \\<Longrightarrow>\n  distinct (merge_distinct xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted xs; distinct xs; sorted ys; distinct ys\\<rbrakk>\n    \\<Longrightarrow> distinct (merge_distinct xs ys)", "by (induct xs ys rule: merge_distinct.induct) (auto)"], ["", "lemma sorted_list_of_set_merge_distinct[simp]: \"\\<lbrakk>sorted xs; distinct xs; sorted ys; distinct ys\\<rbrakk> \\<Longrightarrow>\n  merge_distinct xs ys = sorted_list_of_set (set xs \\<union> set ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted xs; distinct xs; sorted ys; distinct ys\\<rbrakk>\n    \\<Longrightarrow> merge_distinct xs ys =\n                      sorted_list_of_set (set xs \\<union> set ys)", "by (auto intro: sorted_distinct_set_unique)"], ["", "fun zip_with_option where\n  \"zip_with_option f (Some a) (Some b) = Some (f a b)\"\n| \"zip_with_option _ _ _ = None\""], ["", "lemma zip_with_option_eq_Some[simp]:\n  \"zip_with_option f x y = Some z \\<longleftrightarrow> (\\<exists>a b. z = f a b \\<and> x = Some a \\<and> y = Some b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zip_with_option f x y = Some z) =\n    (\\<exists>a b. z = f a b \\<and> x = Some a \\<and> y = Some b)", "by (induct f x y rule: zip_with_option.induct) auto"], ["", "fun Pluss where\n  \"Pluss (Plus r s) = zip_with_option merge_distinct (Pluss r) (Pluss s)\"\n| \"Pluss Zero = Some []\"\n| \"Pluss Full = None\"\n| \"Pluss r = Some [r]\""], ["", "lemma Pluss_None[symmetric]: \"Pluss r = None \\<longleftrightarrow> Full \\<in> toplevel_summands r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Pluss r = None) = (Full \\<in> toplevel_summands r)", "by (induct r) auto"], ["", "lemma Pluss_Some: \"Pluss r = Some xs \\<longleftrightarrow>\n  (Full \\<notin> set xs \\<and> xs = sorted_list_of_set (toplevel_summands r - {Zero}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Pluss r = Some xs) =\n    (Full \\<notin> set xs \\<and>\n     xs = sorted_list_of_set (toplevel_summands r - {Zero}))", "proof (induct r arbitrary: xs)"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>xs.\n       (Pluss Zero = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands Zero - {Zero}))\n 2. \\<And>xs.\n       (Pluss Full = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands Full - {Zero}))\n 3. \\<And>xs.\n       (Pluss One = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands One - {Zero}))\n 4. \\<And>x xs.\n       (Pluss (Atom x) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (Atom x) - {Zero}))\n 5. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Pluss r1 = Some xs) =\n                   (Full \\<notin> set xs \\<and>\n                    xs =\n                    sorted_list_of_set (toplevel_summands r1 - {Zero}));\n        \\<And>xs.\n           (Pluss r2 = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set (toplevel_summands r2 - {Zero}))\\<rbrakk>\n       \\<Longrightarrow> (Pluss (Plus r1 r2) = Some xs) =\n                         (Full \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_summands (Plus r1 r2) - {Zero}))\n 6. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Pluss r1 = Some xs) =\n                   (Full \\<notin> set xs \\<and>\n                    xs =\n                    sorted_list_of_set (toplevel_summands r1 - {Zero}));\n        \\<And>xs.\n           (Pluss r2 = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set (toplevel_summands r2 - {Zero}))\\<rbrakk>\n       \\<Longrightarrow> (Pluss (Times r1 r2) = Some xs) =\n                         (Full \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_summands (Times r1 r2) - {Zero}))\n 7. \\<And>r xs.\n       (\\<And>xs.\n           (Pluss r = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n       (Pluss (Star r) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (Star r) - {Zero}))\n 8. \\<And>r xs.\n       (\\<And>xs.\n           (Pluss r = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n       (Pluss (rexp.Not r) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (rexp.Not r) - {Zero}))\n 9. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Pluss r1 = Some xs) =\n                   (Full \\<notin> set xs \\<and>\n                    xs =\n                    sorted_list_of_set (toplevel_summands r1 - {Zero}));\n        \\<And>xs.\n           (Pluss r2 = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set (toplevel_summands r2 - {Zero}))\\<rbrakk>\n       \\<Longrightarrow> (Pluss (rexp.Inter r1 r2) = Some xs) =\n                         (Full \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_summands (rexp.Inter r1 r2) - {Zero}))\n 10. \\<And>r xs.\n        (\\<And>xs.\n            (Pluss r = Some xs) =\n            (Full \\<notin> set xs \\<and>\n             xs =\n             sorted_list_of_set\n              (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n        (Pluss (Pr r) = Some xs) =\n        (Full \\<notin> set xs \\<and>\n         xs = sorted_list_of_set (toplevel_summands (Pr r) - {Zero}))", "case (Plus r s)"], ["proof (state)\nthis:\n  (Pluss r = Some ?xs) =\n  (Full \\<notin> set ?xs \\<and>\n   ?xs = sorted_list_of_set (toplevel_summands r - {Zero}))\n  (Pluss s = Some ?xs) =\n  (Full \\<notin> set ?xs \\<and>\n   ?xs = sorted_list_of_set (toplevel_summands s - {Zero}))\n\ngoal (10 subgoals):\n 1. \\<And>xs.\n       (Pluss Zero = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands Zero - {Zero}))\n 2. \\<And>xs.\n       (Pluss Full = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands Full - {Zero}))\n 3. \\<And>xs.\n       (Pluss One = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands One - {Zero}))\n 4. \\<And>x xs.\n       (Pluss (Atom x) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (Atom x) - {Zero}))\n 5. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Pluss r1 = Some xs) =\n                   (Full \\<notin> set xs \\<and>\n                    xs =\n                    sorted_list_of_set (toplevel_summands r1 - {Zero}));\n        \\<And>xs.\n           (Pluss r2 = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set (toplevel_summands r2 - {Zero}))\\<rbrakk>\n       \\<Longrightarrow> (Pluss (Plus r1 r2) = Some xs) =\n                         (Full \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_summands (Plus r1 r2) - {Zero}))\n 6. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Pluss r1 = Some xs) =\n                   (Full \\<notin> set xs \\<and>\n                    xs =\n                    sorted_list_of_set (toplevel_summands r1 - {Zero}));\n        \\<And>xs.\n           (Pluss r2 = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set (toplevel_summands r2 - {Zero}))\\<rbrakk>\n       \\<Longrightarrow> (Pluss (Times r1 r2) = Some xs) =\n                         (Full \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_summands (Times r1 r2) - {Zero}))\n 7. \\<And>r xs.\n       (\\<And>xs.\n           (Pluss r = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n       (Pluss (Star r) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (Star r) - {Zero}))\n 8. \\<And>r xs.\n       (\\<And>xs.\n           (Pluss r = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n       (Pluss (rexp.Not r) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (rexp.Not r) - {Zero}))\n 9. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Pluss r1 = Some xs) =\n                   (Full \\<notin> set xs \\<and>\n                    xs =\n                    sorted_list_of_set (toplevel_summands r1 - {Zero}));\n        \\<And>xs.\n           (Pluss r2 = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set (toplevel_summands r2 - {Zero}))\\<rbrakk>\n       \\<Longrightarrow> (Pluss (rexp.Inter r1 r2) = Some xs) =\n                         (Full \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_summands (rexp.Inter r1 r2) - {Zero}))\n 10. \\<And>r xs.\n        (\\<And>xs.\n            (Pluss r = Some xs) =\n            (Full \\<notin> set xs \\<and>\n             xs =\n             sorted_list_of_set\n              (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n        (Pluss (Pr r) = Some xs) =\n        (Full \\<notin> set xs \\<and>\n         xs = sorted_list_of_set (toplevel_summands (Pr r) - {Zero}))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Pluss (Plus r s) = Some xs) =\n    (Full \\<notin> set xs \\<and>\n     xs = sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>Pluss (Plus r s) = Some xs; Full \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. Pluss (Plus r s) = Some xs \\<Longrightarrow>\n    xs = sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\n 3. \\<lbrakk>Full\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_summands (Plus r s) - {Zero}));\n     xs =\n     sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\\<rbrakk>\n    \\<Longrightarrow> Pluss (Plus r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_summands (Plus r s) - {Zero}))", "assume \"Pluss (Plus r s) = Some xs\""], ["proof (state)\nthis:\n  Pluss (Plus r s) = Some xs\n\ngoal (3 subgoals):\n 1. \\<lbrakk>Pluss (Plus r s) = Some xs; Full \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. Pluss (Plus r s) = Some xs \\<Longrightarrow>\n    xs = sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\n 3. \\<lbrakk>Full\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_summands (Plus r s) - {Zero}));\n     xs =\n     sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\\<rbrakk>\n    \\<Longrightarrow> Pluss (Plus r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_summands (Plus r s) - {Zero}))", "then"], ["proof (chain)\npicking this:\n  Pluss (Plus r s) = Some xs", "obtain a b where *: \"Pluss r = Some a\" \"Pluss s = Some b\" \"xs = merge_distinct a b\""], ["proof (prove)\nusing this:\n  Pluss (Plus r s) = Some xs\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>Pluss r = Some a; Pluss s = Some b;\n         xs = merge_distinct a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Pluss r = Some a\n  Pluss s = Some b\n  xs = merge_distinct a b\n\ngoal (3 subgoals):\n 1. \\<lbrakk>Pluss (Plus r s) = Some xs; Full \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. Pluss (Plus r s) = Some xs \\<Longrightarrow>\n    xs = sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\n 3. \\<lbrakk>Full\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_summands (Plus r s) - {Zero}));\n     xs =\n     sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\\<rbrakk>\n    \\<Longrightarrow> Pluss (Plus r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_summands (Plus r s) - {Zero}))", "with Plus(1)[of a] Plus(2)[of b]"], ["proof (chain)\npicking this:\n  (Pluss r = Some a) =\n  (Full \\<notin> set a \\<and>\n   a = sorted_list_of_set (toplevel_summands r - {Zero}))\n  (Pluss s = Some b) =\n  (Full \\<notin> set b \\<and>\n   b = sorted_list_of_set (toplevel_summands s - {Zero}))\n  Pluss r = Some a\n  Pluss s = Some b\n  xs = merge_distinct a b", "show \"xs = sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\""], ["proof (prove)\nusing this:\n  (Pluss r = Some a) =\n  (Full \\<notin> set a \\<and>\n   a = sorted_list_of_set (toplevel_summands r - {Zero}))\n  (Pluss s = Some b) =\n  (Full \\<notin> set b \\<and>\n   b = sorted_list_of_set (toplevel_summands s - {Zero}))\n  Pluss r = Some a\n  Pluss s = Some b\n  xs = merge_distinct a b\n\ngoal (1 subgoal):\n 1. xs = sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})", "by (simp add: Un_Diff)"], ["proof (state)\nthis:\n  xs = sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Pluss (Plus r s) = Some xs; Full \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>Full\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_summands (Plus r s) - {Zero}));\n     xs =\n     sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\\<rbrakk>\n    \\<Longrightarrow> Pluss (Plus r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_summands (Plus r s) - {Zero}))", "assume \"Full \\<in> set xs\""], ["proof (state)\nthis:\n  Full \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Pluss (Plus r s) = Some xs; Full \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>Full\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_summands (Plus r s) - {Zero}));\n     xs =\n     sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\\<rbrakk>\n    \\<Longrightarrow> Pluss (Plus r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_summands (Plus r s) - {Zero}))", "with Plus(1)[of a] Plus(2)[of b] *"], ["proof (chain)\npicking this:\n  (Pluss r = Some a) =\n  (Full \\<notin> set a \\<and>\n   a = sorted_list_of_set (toplevel_summands r - {Zero}))\n  (Pluss s = Some b) =\n  (Full \\<notin> set b \\<and>\n   b = sorted_list_of_set (toplevel_summands s - {Zero}))\n  Pluss r = Some a\n  Pluss s = Some b\n  xs = merge_distinct a b\n  Full \\<in> set xs", "show False"], ["proof (prove)\nusing this:\n  (Pluss r = Some a) =\n  (Full \\<notin> set a \\<and>\n   a = sorted_list_of_set (toplevel_summands r - {Zero}))\n  (Pluss s = Some b) =\n  (Full \\<notin> set b \\<and>\n   b = sorted_list_of_set (toplevel_summands s - {Zero}))\n  Pluss r = Some a\n  Pluss s = Some b\n  xs = merge_distinct a b\n  Full \\<in> set xs\n\ngoal (1 subgoal):\n 1. False", "by (simp add: Pluss_None)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Full\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_summands (Plus r s) - {Zero}));\n     xs =\n     sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\\<rbrakk>\n    \\<Longrightarrow> Pluss (Plus r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_summands (Plus r s) - {Zero}))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Full\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_summands (Plus r s) - {Zero}));\n     xs =\n     sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\\<rbrakk>\n    \\<Longrightarrow> Pluss (Plus r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_summands (Plus r s) - {Zero}))", "assume \"Full \\<notin> set (sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))\""], ["proof (state)\nthis:\n  Full\n  \\<notin> set (sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Full\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_summands (Plus r s) - {Zero}));\n     xs =\n     sorted_list_of_set (toplevel_summands (Plus r s) - {Zero})\\<rbrakk>\n    \\<Longrightarrow> Pluss (Plus r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_summands (Plus r s) - {Zero}))", "with Plus(1)[of \"sorted_list_of_set (toplevel_summands r - {Zero})\"]\n      Plus(2)[of \"sorted_list_of_set (toplevel_summands s - {Zero})\"]"], ["proof (chain)\npicking this:\n  (Pluss r = Some (sorted_list_of_set (toplevel_summands r - {Zero}))) =\n  (Full\n   \\<notin> set (sorted_list_of_set (toplevel_summands r - {Zero})) \\<and>\n   sorted_list_of_set (toplevel_summands r - {Zero}) =\n   sorted_list_of_set (toplevel_summands r - {Zero}))\n  (Pluss s = Some (sorted_list_of_set (toplevel_summands s - {Zero}))) =\n  (Full\n   \\<notin> set (sorted_list_of_set (toplevel_summands s - {Zero})) \\<and>\n   sorted_list_of_set (toplevel_summands s - {Zero}) =\n   sorted_list_of_set (toplevel_summands s - {Zero}))\n  Full\n  \\<notin> set (sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))", "show \"Pluss (Plus r s) = Some (sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))\""], ["proof (prove)\nusing this:\n  (Pluss r = Some (sorted_list_of_set (toplevel_summands r - {Zero}))) =\n  (Full\n   \\<notin> set (sorted_list_of_set (toplevel_summands r - {Zero})) \\<and>\n   sorted_list_of_set (toplevel_summands r - {Zero}) =\n   sorted_list_of_set (toplevel_summands r - {Zero}))\n  (Pluss s = Some (sorted_list_of_set (toplevel_summands s - {Zero}))) =\n  (Full\n   \\<notin> set (sorted_list_of_set (toplevel_summands s - {Zero})) \\<and>\n   sorted_list_of_set (toplevel_summands s - {Zero}) =\n   sorted_list_of_set (toplevel_summands s - {Zero}))\n  Full\n  \\<notin> set (sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))\n\ngoal (1 subgoal):\n 1. Pluss (Plus r s) =\n    Some (sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))", "by (simp add: Un_Diff)"], ["proof (state)\nthis:\n  Pluss (Plus r s) =\n  Some (sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Pluss (Plus r s) = Some xs) =\n  (Full \\<notin> set xs \\<and>\n   xs = sorted_list_of_set (toplevel_summands (Plus r s) - {Zero}))\n\ngoal (9 subgoals):\n 1. \\<And>xs.\n       (Pluss Zero = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands Zero - {Zero}))\n 2. \\<And>xs.\n       (Pluss Full = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands Full - {Zero}))\n 3. \\<And>xs.\n       (Pluss One = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands One - {Zero}))\n 4. \\<And>x xs.\n       (Pluss (Atom x) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (Atom x) - {Zero}))\n 5. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Pluss r1 = Some xs) =\n                   (Full \\<notin> set xs \\<and>\n                    xs =\n                    sorted_list_of_set (toplevel_summands r1 - {Zero}));\n        \\<And>xs.\n           (Pluss r2 = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set (toplevel_summands r2 - {Zero}))\\<rbrakk>\n       \\<Longrightarrow> (Pluss (Times r1 r2) = Some xs) =\n                         (Full \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_summands (Times r1 r2) - {Zero}))\n 6. \\<And>r xs.\n       (\\<And>xs.\n           (Pluss r = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n       (Pluss (Star r) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (Star r) - {Zero}))\n 7. \\<And>r xs.\n       (\\<And>xs.\n           (Pluss r = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n       (Pluss (rexp.Not r) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (rexp.Not r) - {Zero}))\n 8. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Pluss r1 = Some xs) =\n                   (Full \\<notin> set xs \\<and>\n                    xs =\n                    sorted_list_of_set (toplevel_summands r1 - {Zero}));\n        \\<And>xs.\n           (Pluss r2 = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set (toplevel_summands r2 - {Zero}))\\<rbrakk>\n       \\<Longrightarrow> (Pluss (rexp.Inter r1 r2) = Some xs) =\n                         (Full \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_summands (rexp.Inter r1 r2) - {Zero}))\n 9. \\<And>r xs.\n       (\\<And>xs.\n           (Pluss r = Some xs) =\n           (Full \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_summands r - {Zero}))) \\<Longrightarrow>\n       (Pluss (Pr r) = Some xs) =\n       (Full \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_summands (Pr r) - {Zero}))", "qed force+"], ["", "fun Inters where\n  \"Inters (Inter r s) = zip_with_option merge_distinct (Inters r) (Inters s)\"\n| \"Inters Zero = None\"\n| \"Inters Full = Some []\"\n| \"Inters r = Some [r]\""], ["", "lemma Inters_None[symmetric]: \"Inters r = None \\<longleftrightarrow> Zero \\<in> toplevel_inters r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Inters r = None) = (Zero \\<in> toplevel_inters r)", "by (induct r) auto"], ["", "lemma Inters_Some: \"Inters r = Some xs \\<longleftrightarrow>\n  (Zero \\<notin> set xs \\<and> xs = sorted_list_of_set (toplevel_inters r - {Full}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Inters r = Some xs) =\n    (Zero \\<notin> set xs \\<and>\n     xs = sorted_list_of_set (toplevel_inters r - {Full}))", "proof (induct r arbitrary: xs)"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>xs.\n       (Inters Zero = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters Zero - {Full}))\n 2. \\<And>xs.\n       (Inters Full = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters Full - {Full}))\n 3. \\<And>xs.\n       (Inters One = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters One - {Full}))\n 4. \\<And>x xs.\n       (Inters (Atom x) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (Atom x) - {Full}))\n 5. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Inters r1 = Some xs) =\n                   (Zero \\<notin> set xs \\<and>\n                    xs = sorted_list_of_set (toplevel_inters r1 - {Full}));\n        \\<And>xs.\n           (Inters r2 = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs = sorted_list_of_set (toplevel_inters r2 - {Full}))\\<rbrakk>\n       \\<Longrightarrow> (Inters (Plus r1 r2) = Some xs) =\n                         (Zero \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_inters (Plus r1 r2) - {Full}))\n 6. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Inters r1 = Some xs) =\n                   (Zero \\<notin> set xs \\<and>\n                    xs = sorted_list_of_set (toplevel_inters r1 - {Full}));\n        \\<And>xs.\n           (Inters r2 = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs = sorted_list_of_set (toplevel_inters r2 - {Full}))\\<rbrakk>\n       \\<Longrightarrow> (Inters (Times r1 r2) = Some xs) =\n                         (Zero \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_inters (Times r1 r2) - {Full}))\n 7. \\<And>r xs.\n       (\\<And>xs.\n           (Inters r = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_inters r - {Full}))) \\<Longrightarrow>\n       (Inters (Star r) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (Star r) - {Full}))\n 8. \\<And>r xs.\n       (\\<And>xs.\n           (Inters r = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_inters r - {Full}))) \\<Longrightarrow>\n       (Inters (rexp.Not r) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (rexp.Not r) - {Full}))\n 9. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Inters r1 = Some xs) =\n                   (Zero \\<notin> set xs \\<and>\n                    xs = sorted_list_of_set (toplevel_inters r1 - {Full}));\n        \\<And>xs.\n           (Inters r2 = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs = sorted_list_of_set (toplevel_inters r2 - {Full}))\\<rbrakk>\n       \\<Longrightarrow> (Inters (rexp.Inter r1 r2) = Some xs) =\n                         (Zero \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_inters (rexp.Inter r1 r2) - {Full}))\n 10. \\<And>r xs.\n        (\\<And>xs.\n            (Inters r = Some xs) =\n            (Zero \\<notin> set xs \\<and>\n             xs =\n             sorted_list_of_set\n              (toplevel_inters r - {Full}))) \\<Longrightarrow>\n        (Inters (Pr r) = Some xs) =\n        (Zero \\<notin> set xs \\<and>\n         xs = sorted_list_of_set (toplevel_inters (Pr r) - {Full}))", "case (Inter r s)"], ["proof (state)\nthis:\n  (Inters r = Some ?xs) =\n  (Zero \\<notin> set ?xs \\<and>\n   ?xs = sorted_list_of_set (toplevel_inters r - {Full}))\n  (Inters s = Some ?xs) =\n  (Zero \\<notin> set ?xs \\<and>\n   ?xs = sorted_list_of_set (toplevel_inters s - {Full}))\n\ngoal (10 subgoals):\n 1. \\<And>xs.\n       (Inters Zero = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters Zero - {Full}))\n 2. \\<And>xs.\n       (Inters Full = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters Full - {Full}))\n 3. \\<And>xs.\n       (Inters One = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters One - {Full}))\n 4. \\<And>x xs.\n       (Inters (Atom x) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (Atom x) - {Full}))\n 5. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Inters r1 = Some xs) =\n                   (Zero \\<notin> set xs \\<and>\n                    xs = sorted_list_of_set (toplevel_inters r1 - {Full}));\n        \\<And>xs.\n           (Inters r2 = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs = sorted_list_of_set (toplevel_inters r2 - {Full}))\\<rbrakk>\n       \\<Longrightarrow> (Inters (Plus r1 r2) = Some xs) =\n                         (Zero \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_inters (Plus r1 r2) - {Full}))\n 6. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Inters r1 = Some xs) =\n                   (Zero \\<notin> set xs \\<and>\n                    xs = sorted_list_of_set (toplevel_inters r1 - {Full}));\n        \\<And>xs.\n           (Inters r2 = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs = sorted_list_of_set (toplevel_inters r2 - {Full}))\\<rbrakk>\n       \\<Longrightarrow> (Inters (Times r1 r2) = Some xs) =\n                         (Zero \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_inters (Times r1 r2) - {Full}))\n 7. \\<And>r xs.\n       (\\<And>xs.\n           (Inters r = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_inters r - {Full}))) \\<Longrightarrow>\n       (Inters (Star r) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (Star r) - {Full}))\n 8. \\<And>r xs.\n       (\\<And>xs.\n           (Inters r = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_inters r - {Full}))) \\<Longrightarrow>\n       (Inters (rexp.Not r) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (rexp.Not r) - {Full}))\n 9. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Inters r1 = Some xs) =\n                   (Zero \\<notin> set xs \\<and>\n                    xs = sorted_list_of_set (toplevel_inters r1 - {Full}));\n        \\<And>xs.\n           (Inters r2 = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs = sorted_list_of_set (toplevel_inters r2 - {Full}))\\<rbrakk>\n       \\<Longrightarrow> (Inters (rexp.Inter r1 r2) = Some xs) =\n                         (Zero \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_inters (rexp.Inter r1 r2) - {Full}))\n 10. \\<And>r xs.\n        (\\<And>xs.\n            (Inters r = Some xs) =\n            (Zero \\<notin> set xs \\<and>\n             xs =\n             sorted_list_of_set\n              (toplevel_inters r - {Full}))) \\<Longrightarrow>\n        (Inters (Pr r) = Some xs) =\n        (Zero \\<notin> set xs \\<and>\n         xs = sorted_list_of_set (toplevel_inters (Pr r) - {Full}))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Inters (rexp.Inter r s) = Some xs) =\n    (Zero \\<notin> set xs \\<and>\n     xs = sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full}))", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>Inters (rexp.Inter r s) = Some xs; Zero \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. Inters (rexp.Inter r s) = Some xs \\<Longrightarrow>\n    xs = sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\n 3. \\<lbrakk>Zero\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_inters (rexp.Inter r s) - {Full}));\n     xs =\n     sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\\<rbrakk>\n    \\<Longrightarrow> Inters (rexp.Inter r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_inters (rexp.Inter r s) - {Full}))", "assume \"Inters (Inter r s) = Some xs\""], ["proof (state)\nthis:\n  Inters (rexp.Inter r s) = Some xs\n\ngoal (3 subgoals):\n 1. \\<lbrakk>Inters (rexp.Inter r s) = Some xs; Zero \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. Inters (rexp.Inter r s) = Some xs \\<Longrightarrow>\n    xs = sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\n 3. \\<lbrakk>Zero\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_inters (rexp.Inter r s) - {Full}));\n     xs =\n     sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\\<rbrakk>\n    \\<Longrightarrow> Inters (rexp.Inter r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_inters (rexp.Inter r s) - {Full}))", "then"], ["proof (chain)\npicking this:\n  Inters (rexp.Inter r s) = Some xs", "obtain a b where *: \"Inters r = Some a\" \"Inters s = Some b\" \"xs = merge_distinct a b\""], ["proof (prove)\nusing this:\n  Inters (rexp.Inter r s) = Some xs\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>Inters r = Some a; Inters s = Some b;\n         xs = merge_distinct a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Inters r = Some a\n  Inters s = Some b\n  xs = merge_distinct a b\n\ngoal (3 subgoals):\n 1. \\<lbrakk>Inters (rexp.Inter r s) = Some xs; Zero \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. Inters (rexp.Inter r s) = Some xs \\<Longrightarrow>\n    xs = sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\n 3. \\<lbrakk>Zero\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_inters (rexp.Inter r s) - {Full}));\n     xs =\n     sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\\<rbrakk>\n    \\<Longrightarrow> Inters (rexp.Inter r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_inters (rexp.Inter r s) - {Full}))", "with Inter(1)[of a] Inter(2)[of b]"], ["proof (chain)\npicking this:\n  (Inters r = Some a) =\n  (Zero \\<notin> set a \\<and>\n   a = sorted_list_of_set (toplevel_inters r - {Full}))\n  (Inters s = Some b) =\n  (Zero \\<notin> set b \\<and>\n   b = sorted_list_of_set (toplevel_inters s - {Full}))\n  Inters r = Some a\n  Inters s = Some b\n  xs = merge_distinct a b", "show \"xs = sorted_list_of_set (toplevel_inters (Inter r s) - {Full})\""], ["proof (prove)\nusing this:\n  (Inters r = Some a) =\n  (Zero \\<notin> set a \\<and>\n   a = sorted_list_of_set (toplevel_inters r - {Full}))\n  (Inters s = Some b) =\n  (Zero \\<notin> set b \\<and>\n   b = sorted_list_of_set (toplevel_inters s - {Full}))\n  Inters r = Some a\n  Inters s = Some b\n  xs = merge_distinct a b\n\ngoal (1 subgoal):\n 1. xs = sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})", "by (simp add: Un_Diff)"], ["proof (state)\nthis:\n  xs = sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Inters (rexp.Inter r s) = Some xs; Zero \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>Zero\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_inters (rexp.Inter r s) - {Full}));\n     xs =\n     sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\\<rbrakk>\n    \\<Longrightarrow> Inters (rexp.Inter r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_inters (rexp.Inter r s) - {Full}))", "assume \"Zero \\<in> set xs\""], ["proof (state)\nthis:\n  Zero \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Inters (rexp.Inter r s) = Some xs; Zero \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>Zero\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_inters (rexp.Inter r s) - {Full}));\n     xs =\n     sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\\<rbrakk>\n    \\<Longrightarrow> Inters (rexp.Inter r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_inters (rexp.Inter r s) - {Full}))", "with Inter(1)[of a] Inter(2)[of b] *"], ["proof (chain)\npicking this:\n  (Inters r = Some a) =\n  (Zero \\<notin> set a \\<and>\n   a = sorted_list_of_set (toplevel_inters r - {Full}))\n  (Inters s = Some b) =\n  (Zero \\<notin> set b \\<and>\n   b = sorted_list_of_set (toplevel_inters s - {Full}))\n  Inters r = Some a\n  Inters s = Some b\n  xs = merge_distinct a b\n  Zero \\<in> set xs", "show False"], ["proof (prove)\nusing this:\n  (Inters r = Some a) =\n  (Zero \\<notin> set a \\<and>\n   a = sorted_list_of_set (toplevel_inters r - {Full}))\n  (Inters s = Some b) =\n  (Zero \\<notin> set b \\<and>\n   b = sorted_list_of_set (toplevel_inters s - {Full}))\n  Inters r = Some a\n  Inters s = Some b\n  xs = merge_distinct a b\n  Zero \\<in> set xs\n\ngoal (1 subgoal):\n 1. False", "by (simp add: Inters_None)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Zero\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_inters (rexp.Inter r s) - {Full}));\n     xs =\n     sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\\<rbrakk>\n    \\<Longrightarrow> Inters (rexp.Inter r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_inters (rexp.Inter r s) - {Full}))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Zero\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_inters (rexp.Inter r s) - {Full}));\n     xs =\n     sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\\<rbrakk>\n    \\<Longrightarrow> Inters (rexp.Inter r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_inters (rexp.Inter r s) - {Full}))", "assume \"Zero \\<notin> set (sorted_list_of_set (toplevel_inters (Inter r s) - {Full}))\""], ["proof (state)\nthis:\n  Zero\n  \\<notin> set (sorted_list_of_set\n                 (toplevel_inters (rexp.Inter r s) - {Full}))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Zero\n             \\<notin> set (sorted_list_of_set\n                            (toplevel_inters (rexp.Inter r s) - {Full}));\n     xs =\n     sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full})\\<rbrakk>\n    \\<Longrightarrow> Inters (rexp.Inter r s) =\n                      Some\n                       (sorted_list_of_set\n                         (toplevel_inters (rexp.Inter r s) - {Full}))", "with Inter(1)[of \"sorted_list_of_set (toplevel_inters r - {Full})\"]\n      Inter(2)[of \"sorted_list_of_set (toplevel_inters s - {Full})\"]"], ["proof (chain)\npicking this:\n  (Inters r = Some (sorted_list_of_set (toplevel_inters r - {Full}))) =\n  (Zero\n   \\<notin> set (sorted_list_of_set (toplevel_inters r - {Full})) \\<and>\n   sorted_list_of_set (toplevel_inters r - {Full}) =\n   sorted_list_of_set (toplevel_inters r - {Full}))\n  (Inters s = Some (sorted_list_of_set (toplevel_inters s - {Full}))) =\n  (Zero\n   \\<notin> set (sorted_list_of_set (toplevel_inters s - {Full})) \\<and>\n   sorted_list_of_set (toplevel_inters s - {Full}) =\n   sorted_list_of_set (toplevel_inters s - {Full}))\n  Zero\n  \\<notin> set (sorted_list_of_set\n                 (toplevel_inters (rexp.Inter r s) - {Full}))", "show \"Inters (Inter r s) = Some (sorted_list_of_set (toplevel_inters (Inter r s) - {Full}))\""], ["proof (prove)\nusing this:\n  (Inters r = Some (sorted_list_of_set (toplevel_inters r - {Full}))) =\n  (Zero\n   \\<notin> set (sorted_list_of_set (toplevel_inters r - {Full})) \\<and>\n   sorted_list_of_set (toplevel_inters r - {Full}) =\n   sorted_list_of_set (toplevel_inters r - {Full}))\n  (Inters s = Some (sorted_list_of_set (toplevel_inters s - {Full}))) =\n  (Zero\n   \\<notin> set (sorted_list_of_set (toplevel_inters s - {Full})) \\<and>\n   sorted_list_of_set (toplevel_inters s - {Full}) =\n   sorted_list_of_set (toplevel_inters s - {Full}))\n  Zero\n  \\<notin> set (sorted_list_of_set\n                 (toplevel_inters (rexp.Inter r s) - {Full}))\n\ngoal (1 subgoal):\n 1. Inters (rexp.Inter r s) =\n    Some (sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full}))", "by (simp add: Un_Diff)"], ["proof (state)\nthis:\n  Inters (rexp.Inter r s) =\n  Some (sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Inters (rexp.Inter r s) = Some xs) =\n  (Zero \\<notin> set xs \\<and>\n   xs = sorted_list_of_set (toplevel_inters (rexp.Inter r s) - {Full}))\n\ngoal (9 subgoals):\n 1. \\<And>xs.\n       (Inters Zero = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters Zero - {Full}))\n 2. \\<And>xs.\n       (Inters Full = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters Full - {Full}))\n 3. \\<And>xs.\n       (Inters One = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters One - {Full}))\n 4. \\<And>x xs.\n       (Inters (Atom x) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (Atom x) - {Full}))\n 5. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Inters r1 = Some xs) =\n                   (Zero \\<notin> set xs \\<and>\n                    xs = sorted_list_of_set (toplevel_inters r1 - {Full}));\n        \\<And>xs.\n           (Inters r2 = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs = sorted_list_of_set (toplevel_inters r2 - {Full}))\\<rbrakk>\n       \\<Longrightarrow> (Inters (Plus r1 r2) = Some xs) =\n                         (Zero \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_inters (Plus r1 r2) - {Full}))\n 6. \\<And>r1 r2 xs.\n       \\<lbrakk>\\<And>xs.\n                   (Inters r1 = Some xs) =\n                   (Zero \\<notin> set xs \\<and>\n                    xs = sorted_list_of_set (toplevel_inters r1 - {Full}));\n        \\<And>xs.\n           (Inters r2 = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs = sorted_list_of_set (toplevel_inters r2 - {Full}))\\<rbrakk>\n       \\<Longrightarrow> (Inters (Times r1 r2) = Some xs) =\n                         (Zero \\<notin> set xs \\<and>\n                          xs =\n                          sorted_list_of_set\n                           (toplevel_inters (Times r1 r2) - {Full}))\n 7. \\<And>r xs.\n       (\\<And>xs.\n           (Inters r = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_inters r - {Full}))) \\<Longrightarrow>\n       (Inters (Star r) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (Star r) - {Full}))\n 8. \\<And>r xs.\n       (\\<And>xs.\n           (Inters r = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_inters r - {Full}))) \\<Longrightarrow>\n       (Inters (rexp.Not r) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (rexp.Not r) - {Full}))\n 9. \\<And>r xs.\n       (\\<And>xs.\n           (Inters r = Some xs) =\n           (Zero \\<notin> set xs \\<and>\n            xs =\n            sorted_list_of_set\n             (toplevel_inters r - {Full}))) \\<Longrightarrow>\n       (Inters (Pr r) = Some xs) =\n       (Zero \\<notin> set xs \\<and>\n        xs = sorted_list_of_set (toplevel_inters (Pr r) - {Full}))", "qed force+"], ["", "definition inPlus where\n  \"inPlus r s = (case Pluss (Plus r s) of None \\<Rightarrow> Full | Some rs \\<Rightarrow> PLUS rs)\""], ["", "lemma inPlus_alt: \"inPlus r s = (let X = toplevel_summands (Plus r s) - {Zero} in\n  flatten PLUS (if Full \\<in> X then {Full} else X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inPlus r s =\n    (let X = toplevel_summands (Plus r s) - {Zero}\n     in PLUS (sorted_list_of_set (if Full \\<in> X then {Full} else X)))", "proof (cases \"Pluss r\" \"Pluss s\" rule: option.exhaust[case_product option.exhaust])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>Pluss r = None; Pluss s = None\\<rbrakk>\n    \\<Longrightarrow> inPlus r s =\n                      (let X = toplevel_summands (Plus r s) - {Zero}\n                       in PLUS\n                           (sorted_list_of_set\n                             (if Full \\<in> X then {Full} else X)))\n 2. \\<And>x2__.\n       \\<lbrakk>Pluss r = None; Pluss s = Some x2__\\<rbrakk>\n       \\<Longrightarrow> inPlus r s =\n                         (let X = toplevel_summands (Plus r s) - {Zero}\n                          in PLUS\n                              (sorted_list_of_set\n                                (if Full \\<in> X then {Full} else X)))\n 3. \\<And>x2__.\n       \\<lbrakk>Pluss r = Some x2__; Pluss s = None\\<rbrakk>\n       \\<Longrightarrow> inPlus r s =\n                         (let X = toplevel_summands (Plus r s) - {Zero}\n                          in PLUS\n                              (sorted_list_of_set\n                                (if Full \\<in> X then {Full} else X)))\n 4. \\<And>x2__ x2a__.\n       \\<lbrakk>Pluss r = Some x2__; Pluss s = Some x2a__\\<rbrakk>\n       \\<Longrightarrow> inPlus r s =\n                         (let X = toplevel_summands (Plus r s) - {Zero}\n                          in PLUS\n                              (sorted_list_of_set\n                                (if Full \\<in> X then {Full} else X)))", "case Some_Some"], ["proof (state)\nthis:\n  Pluss r = Some x2_\n  Pluss s = Some x2a_\n\ngoal (4 subgoals):\n 1. \\<lbrakk>Pluss r = None; Pluss s = None\\<rbrakk>\n    \\<Longrightarrow> inPlus r s =\n                      (let X = toplevel_summands (Plus r s) - {Zero}\n                       in PLUS\n                           (sorted_list_of_set\n                             (if Full \\<in> X then {Full} else X)))\n 2. \\<And>x2__.\n       \\<lbrakk>Pluss r = None; Pluss s = Some x2__\\<rbrakk>\n       \\<Longrightarrow> inPlus r s =\n                         (let X = toplevel_summands (Plus r s) - {Zero}\n                          in PLUS\n                              (sorted_list_of_set\n                                (if Full \\<in> X then {Full} else X)))\n 3. \\<And>x2__.\n       \\<lbrakk>Pluss r = Some x2__; Pluss s = None\\<rbrakk>\n       \\<Longrightarrow> inPlus r s =\n                         (let X = toplevel_summands (Plus r s) - {Zero}\n                          in PLUS\n                              (sorted_list_of_set\n                                (if Full \\<in> X then {Full} else X)))\n 4. \\<And>x2__ x2a__.\n       \\<lbrakk>Pluss r = Some x2__; Pluss s = Some x2a__\\<rbrakk>\n       \\<Longrightarrow> inPlus r s =\n                         (let X = toplevel_summands (Plus r s) - {Zero}\n                          in PLUS\n                              (sorted_list_of_set\n                                (if Full \\<in> X then {Full} else X)))", "then"], ["proof (chain)\npicking this:\n  Pluss r = Some x2_\n  Pluss s = Some x2a_", "show ?thesis"], ["proof (prove)\nusing this:\n  Pluss r = Some x2_\n  Pluss s = Some x2a_\n\ngoal (1 subgoal):\n 1. inPlus r s =\n    (let X = toplevel_summands (Plus r s) - {Zero}\n     in PLUS (sorted_list_of_set (if Full \\<in> X then {Full} else X)))", "by (simp add: inPlus_def Pluss_None) (simp add: Pluss_Some Un_Diff)"], ["proof (state)\nthis:\n  inPlus r s =\n  (let X = toplevel_summands (Plus r s) - {Zero}\n   in PLUS (sorted_list_of_set (if Full \\<in> X then {Full} else X)))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>Pluss r = None; Pluss s = None\\<rbrakk>\n    \\<Longrightarrow> inPlus r s =\n                      (let X = toplevel_summands (Plus r s) - {Zero}\n                       in PLUS\n                           (sorted_list_of_set\n                             (if Full \\<in> X then {Full} else X)))\n 2. \\<And>x2__.\n       \\<lbrakk>Pluss r = None; Pluss s = Some x2__\\<rbrakk>\n       \\<Longrightarrow> inPlus r s =\n                         (let X = toplevel_summands (Plus r s) - {Zero}\n                          in PLUS\n                              (sorted_list_of_set\n                                (if Full \\<in> X then {Full} else X)))\n 3. \\<And>x2__.\n       \\<lbrakk>Pluss r = Some x2__; Pluss s = None\\<rbrakk>\n       \\<Longrightarrow> inPlus r s =\n                         (let X = toplevel_summands (Plus r s) - {Zero}\n                          in PLUS\n                              (sorted_list_of_set\n                                (if Full \\<in> X then {Full} else X)))", "qed (simp_all add: inPlus_def Pluss_None)"], ["", "fun inTimes where\n  \"inTimes Zero _ = Zero\"\n| \"inTimes _ Zero = Zero\"\n| \"inTimes One r = r\"\n| \"inTimes r One = r\"\n| \"inTimes (Times r s) t = Times r (inTimes s t)\"\n| \"inTimes r s = Times r s\""], ["", "fun inStar where\n  \"inStar Zero = One\"\n| \"inStar Full = Full\"\n| \"inStar One = One\"\n| \"inStar (Star r) = Star r\"\n| \"inStar r = Star r\""], ["", "definition inInter where\n  \"inInter r s = (case Inters (Inter r s) of None \\<Rightarrow> Zero | Some rs \\<Rightarrow> INTERSECT rs)\""], ["", "lemma inInter_alt: \"inInter r s = (let X = toplevel_inters (Inter r s) - {Full} in\n  flatten INTERSECT (if Zero \\<in> X then {Zero} else X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inInter r s =\n    (let X = toplevel_inters (rexp.Inter r s) - {Full}\n     in INTERSECT (sorted_list_of_set (if Zero \\<in> X then {Zero} else X)))", "proof (cases \"Inters r\" \"Inters s\" rule: option.exhaust[case_product option.exhaust])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>Inters r = None; Inters s = None\\<rbrakk>\n    \\<Longrightarrow> inInter r s =\n                      (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                       in INTERSECT\n                           (sorted_list_of_set\n                             (if Zero \\<in> X then {Zero} else X)))\n 2. \\<And>x2__.\n       \\<lbrakk>Inters r = None; Inters s = Some x2__\\<rbrakk>\n       \\<Longrightarrow> inInter r s =\n                         (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                          in INTERSECT\n                              (sorted_list_of_set\n                                (if Zero \\<in> X then {Zero} else X)))\n 3. \\<And>x2__.\n       \\<lbrakk>Inters r = Some x2__; Inters s = None\\<rbrakk>\n       \\<Longrightarrow> inInter r s =\n                         (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                          in INTERSECT\n                              (sorted_list_of_set\n                                (if Zero \\<in> X then {Zero} else X)))\n 4. \\<And>x2__ x2a__.\n       \\<lbrakk>Inters r = Some x2__; Inters s = Some x2a__\\<rbrakk>\n       \\<Longrightarrow> inInter r s =\n                         (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                          in INTERSECT\n                              (sorted_list_of_set\n                                (if Zero \\<in> X then {Zero} else X)))", "case Some_Some"], ["proof (state)\nthis:\n  Inters r = Some x2_\n  Inters s = Some x2a_\n\ngoal (4 subgoals):\n 1. \\<lbrakk>Inters r = None; Inters s = None\\<rbrakk>\n    \\<Longrightarrow> inInter r s =\n                      (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                       in INTERSECT\n                           (sorted_list_of_set\n                             (if Zero \\<in> X then {Zero} else X)))\n 2. \\<And>x2__.\n       \\<lbrakk>Inters r = None; Inters s = Some x2__\\<rbrakk>\n       \\<Longrightarrow> inInter r s =\n                         (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                          in INTERSECT\n                              (sorted_list_of_set\n                                (if Zero \\<in> X then {Zero} else X)))\n 3. \\<And>x2__.\n       \\<lbrakk>Inters r = Some x2__; Inters s = None\\<rbrakk>\n       \\<Longrightarrow> inInter r s =\n                         (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                          in INTERSECT\n                              (sorted_list_of_set\n                                (if Zero \\<in> X then {Zero} else X)))\n 4. \\<And>x2__ x2a__.\n       \\<lbrakk>Inters r = Some x2__; Inters s = Some x2a__\\<rbrakk>\n       \\<Longrightarrow> inInter r s =\n                         (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                          in INTERSECT\n                              (sorted_list_of_set\n                                (if Zero \\<in> X then {Zero} else X)))", "then"], ["proof (chain)\npicking this:\n  Inters r = Some x2_\n  Inters s = Some x2a_", "show ?thesis"], ["proof (prove)\nusing this:\n  Inters r = Some x2_\n  Inters s = Some x2a_\n\ngoal (1 subgoal):\n 1. inInter r s =\n    (let X = toplevel_inters (rexp.Inter r s) - {Full}\n     in INTERSECT (sorted_list_of_set (if Zero \\<in> X then {Zero} else X)))", "by (simp add: inInter_def Inters_None) (simp add: Inters_Some Un_Diff)"], ["proof (state)\nthis:\n  inInter r s =\n  (let X = toplevel_inters (rexp.Inter r s) - {Full}\n   in INTERSECT (sorted_list_of_set (if Zero \\<in> X then {Zero} else X)))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>Inters r = None; Inters s = None\\<rbrakk>\n    \\<Longrightarrow> inInter r s =\n                      (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                       in INTERSECT\n                           (sorted_list_of_set\n                             (if Zero \\<in> X then {Zero} else X)))\n 2. \\<And>x2__.\n       \\<lbrakk>Inters r = None; Inters s = Some x2__\\<rbrakk>\n       \\<Longrightarrow> inInter r s =\n                         (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                          in INTERSECT\n                              (sorted_list_of_set\n                                (if Zero \\<in> X then {Zero} else X)))\n 3. \\<And>x2__.\n       \\<lbrakk>Inters r = Some x2__; Inters s = None\\<rbrakk>\n       \\<Longrightarrow> inInter r s =\n                         (let X = toplevel_inters (rexp.Inter r s) - {Full}\n                          in INTERSECT\n                              (sorted_list_of_set\n                                (if Zero \\<in> X then {Zero} else X)))", "qed (simp_all add: inInter_def Inters_None)"], ["", "fun inNot where\n  \"inNot Zero = Full\"\n| \"inNot Full = Zero\"\n| \"inNot (Not r) = r\"\n| \"inNot (Plus r s) = Inter (inNot r) (inNot s)\"\n| \"inNot (Inter r s) = Plus (inNot r) (inNot s)\"\n| \"inNot r = Not r\""], ["", "fun inPr where\n  \"inPr Zero = Zero\"\n| \"inPr One = One\"\n| \"inPr (Plus r s) = Plus (inPr r) (inPr s)\"\n| \"inPr r = Pr r\""], ["", "primrec inorm where\n  \"inorm Zero = Zero\"\n| \"inorm Full = Full\"\n| \"inorm One = One\"\n| \"inorm (Atom a) = Atom a\"\n| \"inorm (Plus r s) = Plus (inorm r) (inorm s)\"\n| \"inorm (Times r s) = Times (inorm r) (inorm s)\"\n| \"inorm (Star r) = inStar (inorm r)\"\n| \"inorm (Not r) = inNot (inorm r)\"\n| \"inorm (Inter r s) = inInter (inorm r) (inorm s)\"\n| \"inorm (Pr r) = inPr (inorm r)\""], ["", "context alphabet begin"], ["", "lemma wf_inPlus[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> wf n (inPlus r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wf n r; local.wf n s\\<rbrakk>\n    \\<Longrightarrow> local.wf n (inPlus r s)", "by (subst (asm) (1 2) toplevel_summands_wf) (auto simp: inPlus_alt)"], ["", "lemma wf_inTimes[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> wf n (inTimes r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wf n r; local.wf n s\\<rbrakk>\n    \\<Longrightarrow> local.wf n (inTimes r s)", "by (induct r s rule: inTimes.induct) auto"], ["", "lemma wf_inStar[simp]: \"wf n r \\<Longrightarrow> wf n (inStar r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf n r \\<Longrightarrow> local.wf n (inStar r)", "by (induct r rule: inStar.induct) auto"], ["", "lemma wf_inInter[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> wf n (inInter r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wf n r; local.wf n s\\<rbrakk>\n    \\<Longrightarrow> local.wf n (inInter r s)", "by (subst (asm) (1 2) toplevel_inters_wf) (auto simp: inInter_alt)"], ["", "lemma wf_inNot[simp]: \"wf n r \\<Longrightarrow> wf n (inNot r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf n r \\<Longrightarrow> local.wf n (inNot r)", "by (induct r rule: inNot.induct) auto"], ["", "lemma wf_inPr[simp]: \"wf (Suc n) r \\<Longrightarrow> wf n (inPr r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf (Suc n) r \\<Longrightarrow> local.wf n (inPr r)", "by (induct r rule: inPr.induct) auto"], ["", "lemma wf_inorm[simp]: \"wf n r \\<Longrightarrow> wf n (inorm r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf n r \\<Longrightarrow> local.wf n (inorm r)", "by (induct r arbitrary: n) auto"], ["", "end"], ["", "context project begin"], ["", "lemma lang_inPlus[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> lang n (inPlus r s) = lang n (Plus r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wf n r; local.wf n s\\<rbrakk>\n    \\<Longrightarrow> lang n (inPlus r s) = lang n (Plus r s)", "by (auto 0 3 simp: inPlus_alt toplevel_summands_in_lang[of _ n r] toplevel_summands_in_lang[of _ n s]\n    dest: lang_subset_lists intro: bexI[of _ Full])"], ["", "lemma lang_inTimes[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> lang n (inTimes r s) = lang n (Times r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wf n r; local.wf n s\\<rbrakk>\n    \\<Longrightarrow> lang n (inTimes r s) = lang n (Times r s)", "by (induct r s rule: inTimes.induct) (auto simp: conc_assoc)"], ["", "lemma lang_inStar[simp]: \"wf n r \\<Longrightarrow> lang n (inStar r) = lang n (Star r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf n r \\<Longrightarrow> lang n (inStar r) = lang n (Star r)", "by (induct r rule: inStar.induct)\n    (auto intro: star_if_lang dest: subsetD[OF star_subset_lists, rotated])"], ["", "lemma Zero_toplevel_inters[dest]: \"Zero \\<in> toplevel_inters r \\<Longrightarrow> lang n r = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zero \\<in> toplevel_inters r \\<Longrightarrow> lang n r = {}", "by (metis lang.simps(1) subset_empty toplevel_inters_lang)"], ["", "lemma toplevel_inters_Full: \"\\<lbrakk>toplevel_inters r = {Full}; wf n r\\<rbrakk> \\<Longrightarrow> lang n r = lists (\\<Sigma> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>toplevel_inters r = {Full}; local.wf n r\\<rbrakk>\n    \\<Longrightarrow> lang n r = lists (\\<Sigma> n)", "by (metis antisym lang.simps(2) subsetI toplevel_inters.simps(3) toplevel_inters_in_lang)"], ["", "lemma toplevel_inters_subset_singleton[simp]: \"toplevel_inters r \\<subseteq> {s} \\<longleftrightarrow> toplevel_inters r = {s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (toplevel_inters r \\<subseteq> {s}) = (toplevel_inters r = {s})", "by (metis subset_refl subset_singletonD toplevel_inters_nonempty)"], ["", "lemma lang_inInter[simp]: \"\\<lbrakk>wf n r; wf n s\\<rbrakk> \\<Longrightarrow> lang n (inInter r s) = lang n (Inter r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wf n r; local.wf n s\\<rbrakk>\n    \\<Longrightarrow> lang n (inInter r s) = lang n (rexp.Inter r s)", "using lang_subset_lists[of n, unfolded lang.simps(2)[symmetric]]\n    toplevel_inters_nonempty[of r] toplevel_inters_nonempty[of s]"], ["proof (prove)\nusing this:\n  local.wf n ?r \\<Longrightarrow> lang n ?r \\<subseteq> lang n Full\n  toplevel_inters r \\<noteq> {}\n  toplevel_inters s \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wf n r; local.wf n s\\<rbrakk>\n    \\<Longrightarrow> lang n (inInter r s) = lang n (rexp.Inter r s)", "apply (auto 0 2 simp: inInter_alt toplevel_inters_in_lang[of _ n r] toplevel_inters_in_lang[of _ n s]\n     toplevel_inters_wf[of n r] toplevel_inters_wf[of n s] Ball_def simp del: toplevel_inters_nonempty\n     dest!: toplevel_inters_Full[of _ n] split: if_splits)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x xa xb xc xd.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           (x \\<in> toplevel_inters r \\<or>\n            x \\<in> toplevel_inters s) \\<and>\n           x \\<noteq> Full \\<longrightarrow>\n           xb \\<in> lang n x;\n        xc \\<in> toplevel_inters r; xb \\<notin> lang n xc;\n        xd \\<in> toplevel_inters r\\<rbrakk>\n       \\<Longrightarrow> xd = Full\n 2. \\<And>x xa xb xc.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           (x \\<in> toplevel_inters r \\<or>\n            x \\<in> toplevel_inters s) \\<and>\n           x \\<noteq> Full \\<longrightarrow>\n           xb \\<in> lang n x;\n        xc \\<in> toplevel_inters r; xb \\<notin> lang n xc\\<rbrakk>\n       \\<Longrightarrow> Full \\<in> toplevel_inters r\n 3. \\<And>x xa xb xc xd.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           (x \\<in> toplevel_inters r \\<or>\n            x \\<in> toplevel_inters s) \\<and>\n           x \\<noteq> Full \\<longrightarrow>\n           xb \\<in> lang n x;\n        xc \\<in> toplevel_inters r; xb \\<notin> lang n xc;\n        xd \\<in> toplevel_inters s\\<rbrakk>\n       \\<Longrightarrow> xd = Full\n 4. \\<And>x xa xb xc.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           (x \\<in> toplevel_inters r \\<or>\n            x \\<in> toplevel_inters s) \\<and>\n           x \\<noteq> Full \\<longrightarrow>\n           xb \\<in> lang n x;\n        xc \\<in> toplevel_inters r; xb \\<notin> lang n xc\\<rbrakk>\n       \\<Longrightarrow> Full \\<in> toplevel_inters s\n 5. \\<And>x xa xb xc xd.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           (x \\<in> toplevel_inters r \\<or>\n            x \\<in> toplevel_inters s) \\<and>\n           x \\<noteq> Full \\<longrightarrow>\n           xb \\<in> lang n x;\n        xc \\<in> toplevel_inters s; xb \\<notin> lang n xc;\n        xd \\<in> toplevel_inters r\\<rbrakk>\n       \\<Longrightarrow> xd = Full\n 6. \\<And>x xa xb xc.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           (x \\<in> toplevel_inters r \\<or>\n            x \\<in> toplevel_inters s) \\<and>\n           x \\<noteq> Full \\<longrightarrow>\n           xb \\<in> lang n x;\n        xc \\<in> toplevel_inters s; xb \\<notin> lang n xc\\<rbrakk>\n       \\<Longrightarrow> Full \\<in> toplevel_inters r\n 7. \\<And>x xa xb xc xd.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           (x \\<in> toplevel_inters r \\<or>\n            x \\<in> toplevel_inters s) \\<and>\n           x \\<noteq> Full \\<longrightarrow>\n           xb \\<in> lang n x;\n        xc \\<in> toplevel_inters s; xb \\<notin> lang n xc;\n        xd \\<in> toplevel_inters s\\<rbrakk>\n       \\<Longrightarrow> xd = Full\n 8. \\<And>x xa xb xc.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           (x \\<in> toplevel_inters r \\<or>\n            x \\<in> toplevel_inters s) \\<and>\n           x \\<noteq> Full \\<longrightarrow>\n           xb \\<in> lang n x;\n        xc \\<in> toplevel_inters s; xb \\<notin> lang n xc\\<rbrakk>\n       \\<Longrightarrow> Full \\<in> toplevel_inters s\n 9. \\<And>x xa xb xc.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> toplevel_inters r \\<longrightarrow> local.wf n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> local.wf n x;\n        \\<And>r.\n           local.wf n r \\<Longrightarrow>\n           lang n r \\<subseteq> lists (\\<Sigma> n);\n        x \\<in> toplevel_inters r; xa \\<in> toplevel_inters s;\n        Zero \\<notin> toplevel_inters r; Zero \\<notin> toplevel_inters s;\n        \\<forall>x.\n           x \\<in> toplevel_inters r \\<longrightarrow> xb \\<in> lang n x;\n        \\<forall>x.\n           x \\<in> toplevel_inters s \\<longrightarrow> xb \\<in> lang n x;\n        xc \\<in> set xb; lang n r = lists (\\<Sigma> n);\n        lang n s = lists (\\<Sigma> n)\\<rbrakk>\n       \\<Longrightarrow> xc \\<in> \\<Sigma> n", "by fastforce+"], ["", "lemma lang_inNot[simp]: \"wf n r \\<Longrightarrow> lang n (inNot r) = lang n (Not r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf n r \\<Longrightarrow> lang n (inNot r) = lang n (rexp.Not r)", "by (induct r rule: inNot.induct) (auto dest: lang_subset_lists)"], ["", "lemma lang_inPr[simp]: \"wf (Suc n) r \\<Longrightarrow> lang n (inPr r) = lang n (Pr r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf (Suc n) r \\<Longrightarrow> lang n (inPr r) = lang n (Pr r)", "by (induct r rule: inPr.induct) auto"], ["", "lemma lang_inorm[simp]: \"wf n r \\<Longrightarrow> lang n (inorm r) = lang n r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wf n r \\<Longrightarrow> lang n (inorm r) = lang n r", "by (induct r arbitrary: n) auto"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}