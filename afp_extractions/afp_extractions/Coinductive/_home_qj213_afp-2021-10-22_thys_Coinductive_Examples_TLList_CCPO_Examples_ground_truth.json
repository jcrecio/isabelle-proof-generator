{"file_name": "/home/qj213/afp-2021-10-22/thys/Coinductive/Examples/TLList_CCPO_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Coinductive", "problem_names": ["lemma is_TNil_tfilter: \"is_TNil (tfilter P xs) \\<longleftrightarrow> (\\<forall>x \\<in> tset xs. \\<not> P x)\" (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma mcont2mcont_tfilter[THEN tllist.mcont2mcont, simp, cont_intro]:\n  shows mcont_tfilter: \"mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b) (tfilter b P)\"", "lemma tfilter_tfilter:\n  \"tfilter b P (tfilter b Q xs) = tfilter b (\\<lambda>x. P x \\<and> Q x) xs\" (is \"?lhs xs = ?rhs xs\")", "lemma tset_tfilter: \"tset (tfilter b P xs) = {x\\<in>tset xs. P x}\""], "translations": [["", "lemma is_TNil_tfilter: \"is_TNil (tfilter P xs) \\<longleftrightarrow> (\\<forall>x \\<in> tset xs. \\<not> P x)\" (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_TNil (local.tfilter P xs) = (\\<forall>x\\<in>tset xs. \\<not> P x)", "proof(rule iffI ballI)+"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>is_TNil (local.tfilter P xs); x \\<in> tset xs\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x\n 2. \\<forall>x\\<in>tset xs. \\<not> P x \\<Longrightarrow>\n    is_TNil (local.tfilter P xs)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>is_TNil (local.tfilter P xs); x \\<in> tset xs\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x\n 2. \\<forall>x\\<in>tset xs. \\<not> P x \\<Longrightarrow>\n    is_TNil (local.tfilter P xs)", "assume \"x \\<in> tset xs\" ?lhs"], ["proof (state)\nthis:\n  x \\<in> tset xs\n  is_TNil (local.tfilter P xs)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>is_TNil (local.tfilter P xs); x \\<in> tset xs\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x\n 2. \\<forall>x\\<in>tset xs. \\<not> P x \\<Longrightarrow>\n    is_TNil (local.tfilter P xs)", "thus \"\\<not> P x\""], ["proof (prove)\nusing this:\n  x \\<in> tset xs\n  is_TNil (local.tfilter P xs)\n\ngoal (1 subgoal):\n 1. \\<not> P x", "proof(induct rule: tllist_set_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>\\<not> is_TNil xs; is_TNil (local.tfilter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (thd xs)\n 2. \\<And>xs y.\n       \\<lbrakk>\\<not> is_TNil xs; y \\<in> tset (ttl xs);\n        is_TNil (local.tfilter P (ttl xs)) \\<Longrightarrow> \\<not> P y;\n        is_TNil (local.tfilter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P y", "case (find xs)"], ["proof (state)\nthis:\n  \\<not> is_TNil xs\n  is_TNil (local.tfilter P xs)\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>\\<not> is_TNil xs; is_TNil (local.tfilter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (thd xs)\n 2. \\<And>xs y.\n       \\<lbrakk>\\<not> is_TNil xs; y \\<in> tset (ttl xs);\n        is_TNil (local.tfilter P (ttl xs)) \\<Longrightarrow> \\<not> P y;\n        is_TNil (local.tfilter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P y", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> is_TNil xs\n  is_TNil (local.tfilter P xs)\n\ngoal (1 subgoal):\n 1. \\<not> P (thd xs)", "by(cases xs)(simp_all split: if_split_asm)"], ["proof (state)\nthis:\n  \\<not> P (thd xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs y.\n       \\<lbrakk>\\<not> is_TNil xs; y \\<in> tset (ttl xs);\n        is_TNil (local.tfilter P (ttl xs)) \\<Longrightarrow> \\<not> P y;\n        is_TNil (local.tfilter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y.\n       \\<lbrakk>\\<not> is_TNil xs; y \\<in> tset (ttl xs);\n        is_TNil (local.tfilter P (ttl xs)) \\<Longrightarrow> \\<not> P y;\n        is_TNil (local.tfilter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P y", "case (step xs x)"], ["proof (state)\nthis:\n  \\<not> is_TNil xs\n  x \\<in> tset (ttl xs)\n  is_TNil (local.tfilter P (ttl xs)) \\<Longrightarrow> \\<not> P x\n  is_TNil (local.tfilter P xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs y.\n       \\<lbrakk>\\<not> is_TNil xs; y \\<in> tset (ttl xs);\n        is_TNil (local.tfilter P (ttl xs)) \\<Longrightarrow> \\<not> P y;\n        is_TNil (local.tfilter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P y", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> is_TNil xs\n  x \\<in> tset (ttl xs)\n  is_TNil (local.tfilter P (ttl xs)) \\<Longrightarrow> \\<not> P x\n  is_TNil (local.tfilter P xs)\n\ngoal (1 subgoal):\n 1. \\<not> P x", "by(cases xs)(simp_all split: if_split_asm)"], ["proof (state)\nthis:\n  \\<not> P x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> P x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>tset xs. \\<not> P x \\<Longrightarrow>\n    is_TNil (local.tfilter P xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>tset xs. \\<not> P x \\<Longrightarrow>\n    is_TNil (local.tfilter P xs)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<forall>x\\<in>tset xs. \\<not> P x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>tset xs. \\<not> P x \\<Longrightarrow>\n    is_TNil (local.tfilter P xs)", "thus ?lhs"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>tset xs. \\<not> P x\n\ngoal (1 subgoal):\n 1. is_TNil (local.tfilter P xs)", "by(induct arbitrary: xs rule: tfilter.fixp_induct)(simp_all split: tllist.split)"], ["proof (state)\nthis:\n  is_TNil (local.tfilter P xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma mcont2mcont_tfilter[THEN tllist.mcont2mcont, simp, cont_intro]:\n  shows mcont_tfilter: \"mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b) (tfilter b P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b)\n     (TLList_CCPO_Examples.tfilter b P)", "apply(rule tllist.fixp_preserves_mcont1[OF tfilter.mono tfilter_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b)\n        f \\<Longrightarrow>\n       mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b)\n        (\\<lambda>xs.\n            case xs of TNil b' \\<Rightarrow> TNil b'\n            | TCons x xs' \\<Rightarrow>\n                if P x then TCons x (f xs') else f xs')", "apply(rule mcont_lprefix_case_aux)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f x.\n       mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b)\n        f \\<Longrightarrow>\n       mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b)\n        (\\<lambda>xs. if P x then TCons x (f xs) else f xs)\n 2. \\<And>f.\n       mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b)\n        f \\<Longrightarrow>\n       class.ccpo (tSup b) (tllist_ord b) (mk_less (tllist_ord b))\n 3. \\<And>f x.\n       mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b)\n        f \\<Longrightarrow>\n       tllist_ord b (TNil b) x\n 4. \\<And>f.\n       mcont (tSup b) (tllist_ord b) (tSup b) (tllist_ord b)\n        f \\<Longrightarrow>\n       cont (flat_lub b) (flat_ord b) (tSup b) (tllist_ord b) TNil", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tfilter_tfilter:\n  \"tfilter b P (tfilter b Q xs) = tfilter b (\\<lambda>x. P x \\<and> Q x) xs\" (is \"?lhs xs = ?rhs xs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. TLList_CCPO_Examples.tfilter b P (TLList_CCPO_Examples.tfilter b Q xs) =\n    TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs", "proof(rule tllist.leq_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. tllist_ord ?b\n     (TLList_CCPO_Examples.tfilter b P\n       (TLList_CCPO_Examples.tfilter b Q xs))\n     (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n 2. tllist_ord ?b\n     (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n     (TLList_CCPO_Examples.tfilter b P\n       (TLList_CCPO_Examples.tfilter b Q xs))", "have \"\\<forall>xs. tllist_ord b (?lhs xs) (?rhs xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       tllist_ord b\n        (TLList_CCPO_Examples.tfilter b P\n          (TLList_CCPO_Examples.tfilter b Q xs))\n        (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)", "by(rule tfilter.fixp_induct[where Pa=\"\\<lambda>f. \\<forall>xs. tllist_ord b (tfilter b P (f xs)) (?rhs xs)\"])(auto split: tllist.split)"], ["proof (state)\nthis:\n  \\<forall>xs.\n     tllist_ord b\n      (TLList_CCPO_Examples.tfilter b P\n        (TLList_CCPO_Examples.tfilter b Q xs))\n      (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n\ngoal (2 subgoals):\n 1. tllist_ord ?b\n     (TLList_CCPO_Examples.tfilter b P\n       (TLList_CCPO_Examples.tfilter b Q xs))\n     (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n 2. tllist_ord ?b\n     (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n     (TLList_CCPO_Examples.tfilter b P\n       (TLList_CCPO_Examples.tfilter b Q xs))", "thus \"tllist_ord b (?lhs xs) (?rhs xs)\""], ["proof (prove)\nusing this:\n  \\<forall>xs.\n     tllist_ord b\n      (TLList_CCPO_Examples.tfilter b P\n        (TLList_CCPO_Examples.tfilter b Q xs))\n      (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n\ngoal (1 subgoal):\n 1. tllist_ord b\n     (TLList_CCPO_Examples.tfilter b P\n       (TLList_CCPO_Examples.tfilter b Q xs))\n     (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)", ".."], ["proof (state)\nthis:\n  tllist_ord b\n   (TLList_CCPO_Examples.tfilter b P (TLList_CCPO_Examples.tfilter b Q xs))\n   (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n\ngoal (1 subgoal):\n 1. tllist_ord b\n     (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n     (TLList_CCPO_Examples.tfilter b P\n       (TLList_CCPO_Examples.tfilter b Q xs))", "have \"\\<forall>xs. tllist_ord b (?rhs xs) (?lhs xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       tllist_ord b\n        (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n        (TLList_CCPO_Examples.tfilter b P\n          (TLList_CCPO_Examples.tfilter b Q xs))", "by(rule tfilter.fixp_induct[where Pa=\"\\<lambda>f. \\<forall>xs. tllist_ord b (f xs) (?lhs xs)\"])(auto split: tllist.split)"], ["proof (state)\nthis:\n  \\<forall>xs.\n     tllist_ord b\n      (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n      (TLList_CCPO_Examples.tfilter b P\n        (TLList_CCPO_Examples.tfilter b Q xs))\n\ngoal (1 subgoal):\n 1. tllist_ord b\n     (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n     (TLList_CCPO_Examples.tfilter b P\n       (TLList_CCPO_Examples.tfilter b Q xs))", "thus \"tllist_ord b (?rhs xs) (?lhs xs)\""], ["proof (prove)\nusing this:\n  \\<forall>xs.\n     tllist_ord b\n      (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n      (TLList_CCPO_Examples.tfilter b P\n        (TLList_CCPO_Examples.tfilter b Q xs))\n\ngoal (1 subgoal):\n 1. tllist_ord b\n     (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n     (TLList_CCPO_Examples.tfilter b P\n       (TLList_CCPO_Examples.tfilter b Q xs))", ".."], ["proof (state)\nthis:\n  tllist_ord b\n   (TLList_CCPO_Examples.tfilter b (\\<lambda>x. P x \\<and> Q x) xs)\n   (TLList_CCPO_Examples.tfilter b P (TLList_CCPO_Examples.tfilter b Q xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "declare ccpo.admissible_leI[OF complete_lattice_ccpo, cont_intro, simp]"], ["", "lemma tset_tfilter: \"tset (tfilter b P xs) = {x\\<in>tset xs. P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tset (TLList_CCPO_Examples.tfilter b P xs) = {x \\<in> tset xs. P x}", "proof(rule equalityI[OF _ subsetI])"], ["proof (state)\ngoal (2 subgoals):\n 1. tset (TLList_CCPO_Examples.tfilter b P xs)\n    \\<subseteq> {x \\<in> tset xs. P x}\n 2. \\<And>x.\n       x \\<in> {x \\<in> tset xs. P x} \\<Longrightarrow>\n       x \\<in> tset (TLList_CCPO_Examples.tfilter b P xs)", "show \"tset (tfilter b P xs) \\<subseteq> {x \\<in> tset xs. P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tset (TLList_CCPO_Examples.tfilter b P xs)\n    \\<subseteq> {x \\<in> tset xs. P x}", "by(induct arbitrary: xs rule: tfilter.fixp_induct)(auto split: tllist.split)"], ["proof (state)\nthis:\n  tset (TLList_CCPO_Examples.tfilter b P xs)\n  \\<subseteq> {x \\<in> tset xs. P x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> tset xs. P x} \\<Longrightarrow>\n       x \\<in> tset (TLList_CCPO_Examples.tfilter b P xs)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> tset xs. P x} \\<Longrightarrow>\n       x \\<in> tset (TLList_CCPO_Examples.tfilter b P xs)", "assume \"x \\<in> {x \\<in> tset xs. P x}\""], ["proof (state)\nthis:\n  x \\<in> {x \\<in> tset xs. P x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> tset xs. P x} \\<Longrightarrow>\n       x \\<in> tset (TLList_CCPO_Examples.tfilter b P xs)", "hence \"x \\<in> tset xs\" \"P x\""], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> tset xs. P x}\n\ngoal (1 subgoal):\n 1. x \\<in> tset xs &&& P x", "by simp_all"], ["proof (state)\nthis:\n  x \\<in> tset xs\n  P x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> tset xs. P x} \\<Longrightarrow>\n       x \\<in> tset (TLList_CCPO_Examples.tfilter b P xs)", "thus \"x \\<in> tset (tfilter b P xs)\""], ["proof (prove)\nusing this:\n  x \\<in> tset xs\n  P x\n\ngoal (1 subgoal):\n 1. x \\<in> tset (TLList_CCPO_Examples.tfilter b P xs)", "by(induct rule: tset_induct) simp_all"], ["proof (state)\nthis:\n  x \\<in> tset (TLList_CCPO_Examples.tfilter b P xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "context fixes b :: 'b begin"], ["", "interpretation tllist_pf b"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "partial_function (tllist) tconcat :: \"('a llist, 'b) tllist \\<Rightarrow> ('a, 'b) tllist\"\nwhere\n  \"tconcat xs = (case xs of TNil b \\<Rightarrow> TNil b | TCons x xs' \\<Rightarrow> lappendt x (tconcat xs'))\""], ["", "end"], ["", "simps_of_case tconcat2_simps [simp]: tconcat.simps"], ["", "end"]]}