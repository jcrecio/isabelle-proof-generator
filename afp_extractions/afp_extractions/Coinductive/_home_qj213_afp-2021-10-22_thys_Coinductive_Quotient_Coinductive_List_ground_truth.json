{"file_name": "/home/qj213/afp-2021-10-22/thys/Coinductive/Quotient_Coinductive_List.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Coinductive", "problem_names": ["lemma transpD: \"\\<lbrakk> transp R; R a b; R b c \\<rbrakk> \\<Longrightarrow> R a c\"", "lemma id_respect [quot_respect]:\n  \"(R ===> R) id id\"", "lemma id_preserve [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"(Rep ---> Abs) id = id\"", "lemma reflp_llist_all2: \"reflp R \\<Longrightarrow> reflp (llist_all2 R)\"", "lemma symp_llist_all2: \"symp R \\<Longrightarrow> symp (llist_all2 R)\"", "lemma transp_llist_all2: \"transp R \\<Longrightarrow> transp (llist_all2 R)\"", "lemma llist_equivp [quot_equiv]:\n  \"equivp R \\<Longrightarrow> equivp (llist_all2 R)\"", "lemma unfold_llist_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"((Abs1 ---> id) ---> (Abs1 ---> Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2) unfold_llist = unfold_llist\"\n  (is \"?lhs = ?rhs\")", "lemma Quotient_lmap_Abs_Rep:\n  \"Quotient3 R Abs Rep \\<Longrightarrow> lmap Abs (lmap Rep a) = a\"", "lemma llist_all2_rel:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"llist_all2 R r s \\<longleftrightarrow> llist_all2 R r r \\<and> llist_all2 R s s \\<and> (lmap Abs r = lmap Abs s)\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma Quotient_llist_all2_lmap_Rep:\n  \"Quotient3 R Abs Rep \\<Longrightarrow> llist_all2 R (lmap Rep a) (lmap Rep a)\"", "lemma llist_quotient [quot_thm]:\n  \"Quotient3 R Abs Rep \\<Longrightarrow> Quotient3 (llist_all2 R) (lmap Abs) (lmap Rep)\"", "lemma LCons_preserve [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"(Rep ---> (lmap Rep) ---> (lmap Abs)) LCons = LCons\"", "lemmas LCons_respect [quot_respect] = LCons_transfer", "lemma LNil_preserve [quot_preserve]:\n  \"lmap Abs LNil = LNil\"", "lemmas LNil_respect [quot_respect] = LNil_transfer", "lemma lmap_preserve [quot_preserve]:\n  assumes a: \"Quotient3 R1 abs1 rep1\"\n  and     b: \"Quotient3 R2 abs2 rep2\"\n  shows \"((abs1 ---> rep2) ---> (lmap rep1) ---> (lmap abs2)) lmap = lmap\"\n  and   \"((abs1 ---> id) ---> lmap rep1 ---> id) lmap = lmap\"", "lemma lmap_respect [quot_respect]:\n  shows \"((R1 ===> R2) ===> (llist_all2 R1) ===> llist_all2 R2) lmap lmap\"\n  and   \"((R1 ===> (=)) ===> (llist_all2 R1) ===> (=)) lmap lmap\"", "lemmas llist_all2_respect [quot_respect] = llist_all2_transfer", "lemma llist_all2_preserve [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"((Abs ---> Abs ---> id) ---> lmap Rep ---> lmap Rep ---> id) llist_all2 = llist_all2\"", "lemma llist_all2_preserve2 [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"(llist_all2 ((Rep ---> Rep ---> id) R) l m) = (l = m)\"", "lemma corec_llist_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"((Abs1 ---> id) ---> (Abs1 ---> Rep2) ---> (Abs1 ---> id) ---> \n          (Abs1 ---> lmap Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2) corec_llist = corec_llist\"\n  (is \"?lhs = ?rhs\")"], "translations": [["", "lemma transpD: \"\\<lbrakk> transp R; R a b; R b c \\<rbrakk> \\<Longrightarrow> R a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>transp R; R a b; R b c\\<rbrakk> \\<Longrightarrow> R a c", "by (erule transpE) blast"], ["", "lemma id_respect [quot_respect]:\n  \"(R ===> R) id id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R ===> R) id id", "by (fact id_rsp)"], ["", "lemma id_preserve [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"(Rep ---> Abs) id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Rep ---> Abs) id = id", "using Quotient3_abs_rep [OF assms]"], ["proof (prove)\nusing this:\n  Abs (Rep ?a) = ?a\n\ngoal (1 subgoal):\n 1. (Rep ---> Abs) id = id", "by (simp add: fun_eq_iff)"], ["", "functor lmap: lmap"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f g. lmap f \\<circ> lmap g = lmap (f \\<circ> g)) &&& lmap id = id", "by (simp_all add: fun_eq_iff id_def llist.map_comp)"], ["", "declare llist.map_id0 [id_simps]"], ["", "lemma reflp_llist_all2: \"reflp R \\<Longrightarrow> reflp (llist_all2 R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflp R \\<Longrightarrow> reflp (llist_all2 R)", "by (rule reflpI) (auto simp add: llist_all2_conv_all_lnth elim: reflpE)"], ["", "lemma symp_llist_all2: \"symp R \\<Longrightarrow> symp (llist_all2 R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp R \\<Longrightarrow> symp (llist_all2 R)", "by (rule sympI) (auto simp add: llist_all2_conv_all_lnth elim: sympE)"], ["", "lemma transp_llist_all2: \"transp R \\<Longrightarrow> transp (llist_all2 R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp R \\<Longrightarrow> transp (llist_all2 R)", "by (rule transpI) (rule llist_all2_trans)"], ["", "lemma llist_equivp [quot_equiv]:\n  \"equivp R \\<Longrightarrow> equivp (llist_all2 R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp R \\<Longrightarrow> equivp (llist_all2 R)", "by (simp add: equivp_reflp_symp_transp reflp_llist_all2 symp_llist_all2 transp_llist_all2)"], ["", "lemma unfold_llist_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"((Abs1 ---> id) ---> (Abs1 ---> Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2) unfold_llist = unfold_llist\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> id) --->\n     (Abs1 ---> Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n     unfold_llist =\n    unfold_llist", "proof(intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       ((Abs1 ---> id) --->\n        (Abs1 ---> Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n        unfold_llist x xa xb xc =\n       unfold_llist x xa xb xc", "fix IS_LNIL LHD LTL a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       ((Abs1 ---> id) --->\n        (Abs1 ---> Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n        unfold_llist x xa xb xc =\n       unfold_llist x xa xb xc", "show \"?lhs IS_LNIL LHD LTL a = ?rhs IS_LNIL LHD LTL a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> id) --->\n     (Abs1 ---> Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n     unfold_llist IS_LNIL LHD LTL a =\n    unfold_llist IS_LNIL LHD LTL a", "by(coinduction arbitrary: a)(auto simp add: Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2])"], ["proof (state)\nthis:\n  ((Abs1 ---> id) --->\n   (Abs1 ---> Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n   unfold_llist IS_LNIL LHD LTL a =\n  unfold_llist IS_LNIL LHD LTL a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Quotient_lmap_Abs_Rep:\n  \"Quotient3 R Abs Rep \\<Longrightarrow> lmap Abs (lmap Rep a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Quotient3 R Abs Rep \\<Longrightarrow> lmap Abs (lmap Rep a) = a", "by (drule abs_o_rep) (simp add: llist.map_id0 llist.map_comp)"], ["", "lemma llist_all2_rel:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"llist_all2 R r s \\<longleftrightarrow> llist_all2 R r r \\<and> llist_all2 R s s \\<and> (lmap Abs r = lmap Abs s)\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 R r s =\n    (llist_all2 R r r \\<and>\n     llist_all2 R s s \\<and> lmap Abs r = lmap Abs s)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. llist_all2 R r s \\<Longrightarrow>\n    llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n 2. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "assume \"?lhs\""], ["proof (state)\nthis:\n  llist_all2 R r s\n\ngoal (2 subgoals):\n 1. llist_all2 R r s \\<Longrightarrow>\n    llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n 2. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "hence \"llist_all2 R r r\""], ["proof (prove)\nusing this:\n  llist_all2 R r s\n\ngoal (1 subgoal):\n 1. llist_all2 R r r", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 R r s \\<Longrightarrow> llist_all2 R r r", "apply(rule llist_all2_reflI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>llist_all2 R r s; x \\<in> lset r\\<rbrakk>\n       \\<Longrightarrow> R x x", "apply(clarsimp simp add: lset_conv_lnth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>llist_all2 R r s; enat n < llength r\\<rbrakk>\n       \\<Longrightarrow> R (lnth r n) (lnth r n)", "apply(metis Quotient3_rel[OF assms] llist_all2_lnthD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  llist_all2 R r r\n\ngoal (2 subgoals):\n 1. llist_all2 R r s \\<Longrightarrow>\n    llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n 2. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "moreover"], ["proof (state)\nthis:\n  llist_all2 R r r\n\ngoal (2 subgoals):\n 1. llist_all2 R r s \\<Longrightarrow>\n    llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n 2. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "from \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  llist_all2 R r s", "have \"llist_all2 R s s\""], ["proof (prove)\nusing this:\n  llist_all2 R r s\n\ngoal (1 subgoal):\n 1. llist_all2 R s s", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 R r s \\<Longrightarrow> llist_all2 R s s", "apply(rule llist_all2_reflI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>llist_all2 R r s; x \\<in> lset s\\<rbrakk>\n       \\<Longrightarrow> R x x", "apply(clarsimp simp add: lset_conv_lnth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>llist_all2 R r s; enat n < llength s\\<rbrakk>\n       \\<Longrightarrow> R (lnth s n) (lnth s n)", "apply(metis Quotient3_rel[OF assms] llist_all2_lnthD2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  llist_all2 R s s\n\ngoal (2 subgoals):\n 1. llist_all2 R r s \\<Longrightarrow>\n    llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n 2. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "moreover"], ["proof (state)\nthis:\n  llist_all2 R s s\n\ngoal (2 subgoals):\n 1. llist_all2 R r s \\<Longrightarrow>\n    llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n 2. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "from \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  llist_all2 R r s", "have \"llength r = llength s\""], ["proof (prove)\nusing this:\n  llist_all2 R r s\n\ngoal (1 subgoal):\n 1. llength r = llength s", "by(rule llist_all2_llengthD)"], ["proof (state)\nthis:\n  llength r = llength s\n\ngoal (2 subgoals):\n 1. llist_all2 R r s \\<Longrightarrow>\n    llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n 2. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "hence \"lmap Abs r = lmap Abs s\""], ["proof (prove)\nusing this:\n  llength r = llength s\n\ngoal (1 subgoal):\n 1. lmap Abs r = lmap Abs s", "using \\<open>?lhs\\<close>"], ["proof (prove)\nusing this:\n  llength r = llength s\n  llist_all2 R r s\n\ngoal (1 subgoal):\n 1. lmap Abs r = lmap Abs s", "unfolding lmap_eq_lmap_conv_llist_all2"], ["proof (prove)\nusing this:\n  llength r = llength s\n  llist_all2 R r s\n\ngoal (1 subgoal):\n 1. llist_all2 (\\<lambda>x y. Abs x = Abs y) r s", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>llength r = llength s; llist_all2 R r s\\<rbrakk>\n    \\<Longrightarrow> llist_all2 (\\<lambda>x y. Abs x = Abs y) r s", "apply(erule llist_all2_all_lnthI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>llist_all2 R r s; enat n < llength r\\<rbrakk>\n       \\<Longrightarrow> Abs (lnth r n) = Abs (lnth s n)", "apply(drule (1) llist_all2_lnthD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>enat n < llength r; R (lnth r n) (lnth s n)\\<rbrakk>\n       \\<Longrightarrow> Abs (lnth r n) = Abs (lnth s n)", "apply(metis Quotient3_rel[OF assms])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  lmap Abs r = lmap Abs s\n\ngoal (2 subgoals):\n 1. llist_all2 R r s \\<Longrightarrow>\n    llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n 2. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "ultimately"], ["proof (chain)\npicking this:\n  llist_all2 R r r\n  llist_all2 R s s\n  lmap Abs r = lmap Abs s", "show ?rhs"], ["proof (prove)\nusing this:\n  llist_all2 R r r\n  llist_all2 R s s\n  lmap Abs r = lmap Abs s\n\ngoal (1 subgoal):\n 1. llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s", "by blast"], ["proof (state)\nthis:\n  llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n\ngoal (1 subgoal):\n 1. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "assume ?rhs"], ["proof (state)\nthis:\n  llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n\ngoal (1 subgoal):\n 1. llist_all2 R r r \\<and>\n    llist_all2 R s s \\<and> lmap Abs r = lmap Abs s \\<Longrightarrow>\n    llist_all2 R r s", "thus ?lhs"], ["proof (prove)\nusing this:\n  llist_all2 R r r \\<and> llist_all2 R s s \\<and> lmap Abs r = lmap Abs s\n\ngoal (1 subgoal):\n 1. llist_all2 R r s", "unfolding lmap_eq_lmap_conv_llist_all2"], ["proof (prove)\nusing this:\n  llist_all2 R r r \\<and>\n  llist_all2 R s s \\<and> llist_all2 (\\<lambda>x y. Abs x = Abs y) r s\n\ngoal (1 subgoal):\n 1. llist_all2 R r s", "by(clarsimp simp add: llist_all2_conv_all_lnth simp del: llist_all2_same)(metis Quotient3_rel[OF assms])"], ["proof (state)\nthis:\n  llist_all2 R r s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Quotient_llist_all2_lmap_Rep:\n  \"Quotient3 R Abs Rep \\<Longrightarrow> llist_all2 R (lmap Rep a) (lmap Rep a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Quotient3 R Abs Rep \\<Longrightarrow>\n    llist_all2 R (lmap Rep a) (lmap Rep a)", "by(auto intro!: llist_all2_all_lnthI intro: Quotient3_rep_reflp)"], ["", "lemma llist_quotient [quot_thm]:\n  \"Quotient3 R Abs Rep \\<Longrightarrow> Quotient3 (llist_all2 R) (lmap Abs) (lmap Rep)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Quotient3 R Abs Rep \\<Longrightarrow>\n    Quotient3 (llist_all2 R) (lmap Abs) (lmap Rep)", "by(blast intro: Quotient3I dest: Quotient_lmap_Abs_Rep Quotient_llist_all2_lmap_Rep llist_all2_rel)"], ["", "declare [[mapQ3 llist = (llist_all2, llist_quotient)]]"], ["", "lemma LCons_preserve [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"(Rep ---> (lmap Rep) ---> (lmap Abs)) LCons = LCons\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Rep ---> lmap Rep ---> lmap Abs) LCons = LCons", "using Quotient3_abs_rep[OF assms]"], ["proof (prove)\nusing this:\n  Abs (Rep ?a) = ?a\n\ngoal (1 subgoal):\n 1. (Rep ---> lmap Rep ---> lmap Abs) LCons = LCons", "by(simp add: fun_eq_iff llist.map_comp o_def)"], ["", "lemmas LCons_respect [quot_respect] = LCons_transfer"], ["", "lemma LNil_preserve [quot_preserve]:\n  \"lmap Abs LNil = LNil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lmap Abs LNil = LNil", "by simp"], ["", "lemmas LNil_respect [quot_respect] = LNil_transfer"], ["", "lemma lmap_preserve [quot_preserve]:\n  assumes a: \"Quotient3 R1 abs1 rep1\"\n  and     b: \"Quotient3 R2 abs2 rep2\"\n  shows \"((abs1 ---> rep2) ---> (lmap rep1) ---> (lmap abs2)) lmap = lmap\"\n  and   \"((abs1 ---> id) ---> lmap rep1 ---> id) lmap = lmap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((abs1 ---> rep2) ---> lmap rep1 ---> lmap abs2) lmap = lmap &&&\n    ((abs1 ---> id) ---> lmap rep1 ---> id) lmap = lmap", "using Quotient3_abs_rep[OF a] Quotient3_abs_rep[OF b]"], ["proof (prove)\nusing this:\n  abs1 (rep1 ?a) = ?a\n  abs2 (rep2 ?a) = ?a\n\ngoal (1 subgoal):\n 1. ((abs1 ---> rep2) ---> lmap rep1 ---> lmap abs2) lmap = lmap &&&\n    ((abs1 ---> id) ---> lmap rep1 ---> id) lmap = lmap", "by(simp_all add: fun_eq_iff llist.map_comp o_def)"], ["", "lemma lmap_respect [quot_respect]:\n  shows \"((R1 ===> R2) ===> (llist_all2 R1) ===> llist_all2 R2) lmap lmap\"\n  and   \"((R1 ===> (=)) ===> (llist_all2 R1) ===> (=)) lmap lmap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((R1 ===> R2) ===> llist_all2 R1 ===> llist_all2 R2) lmap lmap &&&\n    ((R1 ===> (=)) ===> llist_all2 R1 ===> (=)) lmap lmap", "by(fact lmap_transfer)(simp add: llist_all2_conv_all_lnth lmap_eq_lmap_conv_llist_all2 rel_fun_def)"], ["", "lemmas llist_all2_respect [quot_respect] = llist_all2_transfer"], ["", "lemma llist_all2_preserve [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"((Abs ---> Abs ---> id) ---> lmap Rep ---> lmap Rep ---> id) llist_all2 = llist_all2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs ---> Abs ---> id) ---> lmap Rep ---> lmap Rep ---> id)\n     llist_all2 =\n    llist_all2", "using Quotient3_abs_rep[OF assms]"], ["proof (prove)\nusing this:\n  Abs (Rep ?a) = ?a\n\ngoal (1 subgoal):\n 1. ((Abs ---> Abs ---> id) ---> lmap Rep ---> lmap Rep ---> id)\n     llist_all2 =\n    llist_all2", "by(simp add: fun_eq_iff llist_all2_lmap1 llist_all2_lmap2)"], ["", "lemma llist_all2_preserve2 [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"(llist_all2 ((Rep ---> Rep ---> id) R) l m) = (l = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_all2 ((Rep ---> Rep ---> id) R) l m = (l = m)", "by (simp add: map_fun_def [abs_def] Quotient3_rel_rep [OF assms] llist.rel_eq comp_def)"], ["", "lemma corec_llist_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"((Abs1 ---> id) ---> (Abs1 ---> Rep2) ---> (Abs1 ---> id) ---> \n          (Abs1 ---> lmap Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2) corec_llist = corec_llist\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> id) --->\n     (Abs1 ---> Rep2) --->\n     (Abs1 ---> id) --->\n     (Abs1 ---> lmap Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n     corec_llist =\n    corec_llist", "proof(intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe.\n       ((Abs1 ---> id) --->\n        (Abs1 ---> Rep2) --->\n        (Abs1 ---> id) --->\n        (Abs1 ---> lmap Rep2) --->\n        (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n        corec_llist x xa xb xc xd xe =\n       corec_llist x xa xb xc xd xe", "fix IS_LNIL LHD endORmore LTL_end LTL_more b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe.\n       ((Abs1 ---> id) --->\n        (Abs1 ---> Rep2) --->\n        (Abs1 ---> id) --->\n        (Abs1 ---> lmap Rep2) --->\n        (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n        corec_llist x xa xb xc xd xe =\n       corec_llist x xa xb xc xd xe", "show \"?lhs IS_LNIL LHD endORmore LTL_end LTL_more b = ?rhs IS_LNIL LHD endORmore LTL_end LTL_more b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> id) --->\n     (Abs1 ---> Rep2) --->\n     (Abs1 ---> id) --->\n     (Abs1 ---> lmap Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n     corec_llist IS_LNIL LHD endORmore LTL_end LTL_more b =\n    corec_llist IS_LNIL LHD endORmore LTL_end LTL_more b", "by(coinduction arbitrary: b rule: llist.coinduct_strong)\n      (auto simp add: Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2] Quotient_lmap_Abs_Rep[OF q2])"], ["proof (state)\nthis:\n  ((Abs1 ---> id) --->\n   (Abs1 ---> Rep2) --->\n   (Abs1 ---> id) --->\n   (Abs1 ---> lmap Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> lmap Abs2)\n   corec_llist IS_LNIL LHD endORmore LTL_end LTL_more b =\n  corec_llist IS_LNIL LHD endORmore LTL_end LTL_more b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}