{"file_name": "/home/qj213/afp-2021-10-22/thys/Coinductive/Examples/Resumption.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Coinductive", "problem_names": ["lemma Lim_mono: \"(\\<And>d. rs d \\<subseteq> rs' d) \\<Longrightarrow> Old_Datatype.Lim rs \\<subseteq> Old_Datatype.Lim rs'\"", "lemma Lim_UN1:  \"Old_Datatype.Lim (\\<lambda>x. \\<Union>y. f x y) = (\\<Union>y. Old_Datatype.Lim (\\<lambda>x. f x y))\"", "lemma DTBranch_Lim [simp]: \"DTBranch f (Old_Datatype.Lim M) = f M\"", "lemma ndepth_Push_Node_Inl_aux:\n     \"case_nat (Inl n) f k = Inr 0 \\<Longrightarrow> Suc (LEAST x. f x = Inr 0) <= k\"", "lemma ndepth_Push_Node_Inl:\n  \"ndepth (Push_Node (Inl a) n) = Suc (ndepth n)\"", "lemma ntrunc_Lim [simp]: \"ntrunc (Suc k) (Old_Datatype.Lim rs) = Old_Datatype.Lim (\\<lambda>x. ntrunc k (rs x))\"", "lemma [iff]:\n  shows TERMINAL_not_LINEAR: \"TERMINAL a \\<noteq> LINEAR b r\"\n  and LINEAR_not_TERMINAL: \"LINEAR b R \\<noteq> TERMINAL a\"\n  and TERMINAL_not_BRANCH: \"TERMINAL a \\<noteq> BRANCH c rs\"\n  and BRANCH_not_TERMINAL: \"BRANCH c rs \\<noteq> TERMINAL a\"\n  and LINEAR_not_BRANCH: \"LINEAR b r \\<noteq> BRANCH c rs\"\n  and BRANCH_not_LINEAR: \"BRANCH c rs \\<noteq> LINEAR b r\"\n  and TERMINAL_inject: \"TERMINAL a = TERMINAL a' \\<longleftrightarrow> a = a'\"\n  and LINEAR_inject: \"LINEAR b r = LINEAR b' r' \\<longleftrightarrow> b = b' \\<and> r = r'\"\n  and BRANCH_inject: \"BRANCH c rs = BRANCH c' rs' \\<longleftrightarrow> c = c' \\<and> rs = rs'\"", "lemma case_RESUMPTION_simps [simp]:\n  shows case_RESUMPTION_TERMINAL: \"case_RESUMPTION t l br (TERMINAL a) = t a\"\n  and case_RESUMPTION_LINEAR: \"case_RESUMPTION t l br (LINEAR b r) = l b r\"\n  and case_RESUMPTION_BRANCH: \"case_RESUMPTION t l br (BRANCH c rs) = br c rs\"", "lemma LINEAR_mono: \"r \\<subseteq> r' \\<Longrightarrow> LINEAR b r \\<subseteq> LINEAR b r'\"", "lemma BRANCH_mono: \"(\\<And>d. rs d \\<subseteq> rs' d) \\<Longrightarrow> BRANCH c rs \\<subseteq> BRANCH c rs'\"", "lemma LINEAR_UN: \"LINEAR b (\\<Union>x. f x) = (\\<Union>x. LINEAR b (f x))\"", "lemma BRANCH_UN: \"BRANCH b (\\<lambda>d. \\<Union>x. f d x) = (\\<Union>x. BRANCH b (\\<lambda>d. f d x))\"", "lemma [iff]:\n  shows Terminal_not_Linear: \"Terminal a \\<noteq> Linear b r\"\n  and Linear_not_Terminal: \"Linear b R \\<noteq> Terminal a\"\n  and Termina_not_Branch: \"Terminal a \\<noteq> Branch c rs\"\n  and Branch_not_Terminal: \"Branch c rs \\<noteq> Terminal a\"\n  and Linear_not_Branch: \"Linear b r \\<noteq> Branch c rs\"\n  and Branch_not_Linear: \"Branch c rs \\<noteq> Linear b r\"\n  and Terminal_inject: \"Terminal a = Terminal a' \\<longleftrightarrow> a = a'\"\n  and Linear_inject: \"Linear b r = Linear b' r' \\<longleftrightarrow> b = b' \\<and> r = r'\"\n  and Branch_inject: \"Branch c rs = Branch c' rs' \\<longleftrightarrow> c = c' \\<and> rs = rs'\"", "lemma Rep_resumption_constructors:\n  shows Rep_resumption_Terminal: \"Rep_resumption (Terminal a) = TERMINAL a\"\n  and Rep_resumption_Linear: \"Rep_resumption (Linear b r) = LINEAR b (Rep_resumption r)\"\n  and Rep_resumption_Branch: \"Rep_resumption (Branch c rs) = BRANCH c (\\<lambda>d. Rep_resumption (rs d))\"", "lemma case_resumption_simps [simp, code]:\n  shows case_resumption_Terminal: \"case_resumption t l br (Terminal a) = t a\"\n  and case_resumption_Linear: \"case_resumption t l br (Linear b r) = l b r\"\n  and case_resumption_Branch: \"case_resumption t l br (Branch c rs) = br c rs\"", "lemma case_resumption_cert:\n  assumes \"CASE \\<equiv> case_resumption t l br\"\n  shows \"(CASE (Terminal a) \\<equiv> t a) &&& (CASE (Linear b r) \\<equiv> l b r) &&& (CASE (Branch c rs) \\<equiv> br c rs)\"", "lemma resumption_exhaust [cases type: resumption]:\n  obtains (Terminal) a where \"x = Terminal a\"\n  | (Linear) b r where \"x = Linear b r\"\n  | (Branch) c rs where \"x = Branch c rs\"", "lemma resumption_split:\n  \"P (case_resumption t l br r) \\<longleftrightarrow> \n  (\\<forall>a. r = Terminal a \\<longrightarrow> P (t a)) \\<and>\n  (\\<forall>b r'. r = Linear b r' \\<longrightarrow> P (l b r')) \\<and>\n  (\\<forall>c rs. r = Branch c rs \\<longrightarrow> P (br c rs))\"", "lemma resumption_split_asm:\n  \"P (case_resumption t l br r) \\<longleftrightarrow>\n  \\<not> ((\\<exists>a. r = Terminal a \\<and> \\<not> P (t a)) \\<or>\n     (\\<exists>b r'. r = Linear b r' \\<and> \\<not> P (l b r')) \\<or>\n     (\\<exists>c rs. r = Branch c rs \\<and> \\<not> P (br c rs)))\"", "lemmas resumption_splits = resumption_split resumption_split_asm", "lemma RESUMPTION_corec [nitpick_simp]:\n  \"RESUMPTION_corec f e =\n  (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n            | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n            | Branch_corec c es \\<Rightarrow> BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n            | Resumption_corec r \\<Rightarrow> Rep_resumption r)\"\n  (is \"?lhs = ?rhs\")", "lemma RESUMPTION_corec_type: \"RESUMPTION_corec f e \\<in> resumption\"", "lemma resumption_corec:\n  \"resumption_corec f e =\n  (case f e of Terminal_corec a \\<Rightarrow> Terminal a\n            | Linear_corec b e' \\<Rightarrow> Linear b (resumption_corec f e')\n            | Branch_corec c es \\<Rightarrow> Branch c (\\<lambda>d. resumption_corec f (es d))\n            | Resumption_corec r \\<Rightarrow> r)\"", "lemma Eq_RESUMPTION_implies_ntrunc_equality:\n  \"Eq_RESUMPTION r r' \\<Longrightarrow> ntrunc k r = ntrunc k r'\"", "lemma Eq_RESUMPTION_refl:\n  assumes \"r \\<in> resumption\"\n  shows \"Eq_RESUMPTION r r\"", "lemma Eq_RESUMPTION_into_resumption:\n  assumes \"Eq_RESUMPTION r r\"\n  shows \"r \\<in> resumption\"", "lemma Eq_RESUMPTION_eq:\n  \"Eq_RESUMPTION r r' \\<longleftrightarrow> r = r' \\<and> r \\<in> resumption\"", "lemma Eq_RESUMPTION_I [consumes 1, case_names Eq_RESUMPTION, case_conclusion Eq_RESUMPTION EqTerminal EqLinear EqBranch]:\n  assumes \"X r r'\"\n  and step: \"\\<And>r r'. X r r' \\<Longrightarrow>\n             (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n             (\\<exists>R R' b. r = LINEAR b R \\<and> r' = LINEAR b R' \\<and> (X R R' \\<or> Eq_RESUMPTION R R')) \\<or>\n             (\\<exists>rs rs' c. r = BRANCH c rs \\<and> r' = BRANCH c rs' \\<and> (\\<forall>d. X (rs d) (rs' d) \\<or> Eq_RESUMPTION (rs d) (rs' d)))\"\n  shows \"r = r'\"", "lemma resumption_equalityI [consumes 1, case_names Eq_resumption, case_conclusion Eq_resumption EqTerminal EqLinear EqBranch]:\n  assumes \"X r r'\"\n  and step: \"\\<And>r r'. X r r' \\<Longrightarrow>\n             (\\<exists>a. r = Terminal a \\<and> r' = Terminal a) \\<or>\n             (\\<exists>R R' b. r = Linear b R \\<and> r' = Linear b R' \\<and> (X R R' \\<or> R = R')) \\<or>\n             (\\<exists>rs rs' c. r = Branch c rs \\<and> r' = Branch c rs' \\<and> (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d))\"\n  shows \"r = r'\"", "lemma equals_RESUMPTION_corec:\n  assumes h: \"\\<And>x. h x = (case f x of Terminal_corec a \\<Rightarrow> TERMINAL a\n                                   | Linear_corec b x' \\<Rightarrow> LINEAR b (h x')\n                                   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h (xs d))\n                                   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\"\n  shows \"h = RESUMPTION_corec f\"", "lemma equals_resumption_corec:\n  assumes h: \"\\<And>x. h x = (case f x of Terminal_corec a \\<Rightarrow> Terminal a\n                                   | Linear_corec b x' \\<Rightarrow> Linear b (h x')\n                                   | Branch_corec c xs \\<Rightarrow> Branch c (\\<lambda>d. h (xs d))\n                                   | Resumption_corec r \\<Rightarrow> r)\"\n  shows \"h = resumption_corec f\""], "translations": [["", "lemma Lim_mono: \"(\\<And>d. rs d \\<subseteq> rs' d) \\<Longrightarrow> Old_Datatype.Lim rs \\<subseteq> Old_Datatype.Lim rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d. rs d \\<subseteq> rs' d) \\<Longrightarrow>\n    Old_Datatype.Lim rs \\<subseteq> Old_Datatype.Lim rs'", "by(simp add: Lim_def) blast"], ["", "lemma Lim_UN1:  \"Old_Datatype.Lim (\\<lambda>x. \\<Union>y. f x y) = (\\<Union>y. Old_Datatype.Lim (\\<lambda>x. f x y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Old_Datatype.Lim (\\<lambda>x. \\<Union> (range (f x))) =\n    (\\<Union>y. Old_Datatype.Lim (\\<lambda>x. f x y))", "by(simp add: Old_Datatype.Lim_def) blast"], ["", "text \\<open>\n  Inverse for @{term \"Old_Datatype.Lim\"} like @{term \"Old_Datatype.Split\"} and @{term \"Old_Datatype.Case\"}\n  for @{term \"Old_Datatype.Scons\"} and @{term \"In0\"}/@{term \"In1\"}\n\\<close>"], ["", "definition DTBranch :: \"(('b \\<Rightarrow> ('a, 'b) Old_Datatype.dtree) \\<Rightarrow> 'c) \\<Rightarrow> ('a, 'b) Old_Datatype.dtree \\<Rightarrow> 'c\"\nwhere \"DTBranch f M = (THE u. \\<exists>x. M = Old_Datatype.Lim x \\<and> u = f x)\""], ["", "lemma DTBranch_Lim [simp]: \"DTBranch f (Old_Datatype.Lim M) = f M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DTBranch f (Old_Datatype.Lim M) = f M", "by(auto simp add: DTBranch_def dest: Lim_inject)"], ["", "text \\<open>Lemmas for @{term Old_Datatype.ntrunc} and @{term \"Old_Datatype.Lim\"}\\<close>"], ["", "lemma ndepth_Push_Node_Inl_aux:\n     \"case_nat (Inl n) f k = Inr 0 \\<Longrightarrow> Suc (LEAST x. f x = Inr 0) <= k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case k of 0 \\<Rightarrow> Inl n | Suc x \\<Rightarrow> f x) =\n    Inr (0::'b) \\<Longrightarrow>\n    Suc (LEAST x. f x = Inr (0::'b)) \\<le> k", "apply (induct \"k\", auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>(case k of 0 \\<Rightarrow> Inl n\n                 | Suc x \\<Rightarrow> f x) =\n                Inr (0::'b) \\<Longrightarrow>\n                Suc (LEAST x. f x = Inr (0::'b)) \\<le> k;\n        f k = Inr (0::'b)\\<rbrakk>\n       \\<Longrightarrow> (LEAST x. f x = Inr (0::'b)) \\<le> k", "apply (erule Least_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ndepth_Push_Node_Inl:\n  \"ndepth (Push_Node (Inl a) n) = Suc (ndepth n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ndepth (Push_Node (Inl a) n) = Suc (ndepth n)", "using Rep_Node[of n, unfolded Node_def]"], ["proof (prove)\nusing this:\n  Rep_Node n \\<in> {p. \\<exists>f x k. p = (f, x) \\<and> f k = Inr 0}\n\ngoal (1 subgoal):\n 1. ndepth (Push_Node (Inl a) n) = Suc (ndepth n)", "apply(simp add: ndepth_def Push_Node_def Abs_Node_inverse[OF Node_Push_I[OF Rep_Node]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       (\\<exists>x. Rep_Node n = (f, x)) \\<and>\n       (\\<exists>k. f k = Inr 0) \\<Longrightarrow>\n    (case apfst (Old_Datatype.Push (Inl a)) (Rep_Node n) of\n     (f, x) \\<Rightarrow> LEAST k. f k = Inr 0) =\n    Suc (case Rep_Node n of (f, x) \\<Rightarrow> LEAST k. f k = Inr 0)", "apply(simp add: Push_def split_beta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       (\\<exists>x. Rep_Node n = (f, x)) \\<and>\n       (\\<exists>k. f k = Inr 0) \\<Longrightarrow>\n    (LEAST k.\n        (case k of 0 \\<Rightarrow> Inl a\n         | Suc x \\<Rightarrow> fst (Rep_Node n) x) =\n        Inr 0) =\n    Suc (LEAST k. fst (Rep_Node n) k = Inr 0)", "apply(rule Least_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>f.\n       (\\<exists>x. Rep_Node n = (f, x)) \\<and>\n       (\\<exists>k. f k = Inr 0) \\<Longrightarrow>\n    (case Suc (LEAST k. fst (Rep_Node n) k = Inr 0) of 0 \\<Rightarrow> Inl a\n     | Suc x \\<Rightarrow> fst (Rep_Node n) x) =\n    Inr 0\n 2. \\<And>y.\n       \\<lbrakk>\\<exists>f.\n                   (\\<exists>x. Rep_Node n = (f, x)) \\<and>\n                   (\\<exists>k. f k = Inr 0);\n        (case y of 0 \\<Rightarrow> Inl a\n         | Suc x \\<Rightarrow> fst (Rep_Node n) x) =\n        Inr 0\\<rbrakk>\n       \\<Longrightarrow> Suc (LEAST k. fst (Rep_Node n) k = Inr 0) \\<le> y", "apply(auto elim: LeastI intro: ndepth_Push_Node_Inl_aux)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ntrunc_Lim [simp]: \"ntrunc (Suc k) (Old_Datatype.Lim rs) = Old_Datatype.Lim (\\<lambda>x. ntrunc k (rs x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ntrunc (Suc k) (Old_Datatype.Lim rs) =\n    Old_Datatype.Lim (\\<lambda>x. ntrunc k (rs x))", "unfolding Lim_def ntrunc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {n \\<in> \\<Union> {z. \\<exists>x. z = Push_Node (Inl x) ` rs x}.\n     ndepth n < Suc k} =\n    \\<Union>\n     {z. \\<exists>x. z = Push_Node (Inl x) ` {n \\<in> rs x. ndepth n < k}}", "apply(rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {n \\<in> \\<Union> {z. \\<exists>x. z = Push_Node (Inl x) ` rs x}.\n     ndepth n < Suc k}\n    \\<subseteq> \\<Union>\n                 {z. \\<exists>x.\n                        z =\n                        Push_Node (Inl x) ` {n \\<in> rs x. ndepth n < k}}\n 2. \\<Union>\n     {z. \\<exists>x. z = Push_Node (Inl x) ` {n \\<in> rs x. ndepth n < k}}\n    \\<subseteq> {n \\<in> \\<Union>\n                          {z. \\<exists>x. z = Push_Node (Inl x) ` rs x}.\n                 ndepth n < Suc k}", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x X xa xb.\n       \\<lbrakk>ndepth (Push_Node (Inl xa) xb) < Suc k;\n        xb \\<in> rs xa\\<rbrakk>\n       \\<Longrightarrow> Push_Node (Inl xa) xb\n                         \\<in> \\<Union>\n                                {z. \\<exists>x.\n z = Push_Node (Inl x) ` {n \\<in> rs x. ndepth n < k}}\n 2. \\<Union>\n     {z. \\<exists>x. z = Push_Node (Inl x) ` {n \\<in> rs x. ndepth n < k}}\n    \\<subseteq> {n \\<in> \\<Union>\n                          {z. \\<exists>x. z = Push_Node (Inl x) ` rs x}.\n                 ndepth n < Suc k}", "apply(auto simp add: ndepth_Push_Node_Inl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Definition for the codatatype universe\\<close>"], ["", "text \\<open>Constructors\\<close>"], ["", "definition TERMINAL :: \"'a \\<Rightarrow> ('c + 'b + 'a, 'd) Old_Datatype.dtree\"\nwhere \"TERMINAL a = In0 (Old_Datatype.Leaf (Inr (Inr a)))\""], ["", "definition LINEAR :: \"'b \\<Rightarrow> ('c + 'b + 'a, 'd) Old_Datatype.dtree \\<Rightarrow> ('c + 'b + 'a, 'd) Old_Datatype.dtree\"\n  where \"LINEAR b r = In1 (In0 (Scons (Old_Datatype.Leaf (Inr (Inl b))) r))\""], ["", "definition BRANCH :: \"'c \\<Rightarrow> ('d \\<Rightarrow> ('c + 'b + 'a, 'd) Old_Datatype.dtree) \\<Rightarrow> ('c + 'b + 'a, 'd) Old_Datatype.dtree\"\n where \"BRANCH c rs = In1 (In1 (Scons (Old_Datatype.Leaf (Inl c)) (Old_Datatype.Lim rs)))\""], ["", "text \\<open>case operator\\<close>"], ["", "definition case_RESUMPTION :: \"('a \\<Rightarrow> 'e) \\<Rightarrow> ('b \\<Rightarrow> (('c + 'b + 'a, 'd) Old_Datatype.dtree) \\<Rightarrow> 'e) \\<Rightarrow> ('c \\<Rightarrow> ('d \\<Rightarrow> ('c + 'b + 'a, 'd) Old_Datatype.dtree) \\<Rightarrow> 'e) \\<Rightarrow> ('c + 'b + 'a, 'd) Old_Datatype.dtree \\<Rightarrow> 'e\"\nwhere \n  \"case_RESUMPTION t l br =\n   Old_Datatype.Case (t o inv (Old_Datatype.Leaf o Inr o Inr))\n                 (Old_Datatype.Case (Old_Datatype.Split (\\<lambda>x. l (inv (Old_Datatype.Leaf o Inr o Inl) x)))\n                                (Old_Datatype.Split (\\<lambda>x. DTBranch (br (inv (Old_Datatype.Leaf o Inl) x)))))\""], ["", "lemma [iff]:\n  shows TERMINAL_not_LINEAR: \"TERMINAL a \\<noteq> LINEAR b r\"\n  and LINEAR_not_TERMINAL: \"LINEAR b R \\<noteq> TERMINAL a\"\n  and TERMINAL_not_BRANCH: \"TERMINAL a \\<noteq> BRANCH c rs\"\n  and BRANCH_not_TERMINAL: \"BRANCH c rs \\<noteq> TERMINAL a\"\n  and LINEAR_not_BRANCH: \"LINEAR b r \\<noteq> BRANCH c rs\"\n  and BRANCH_not_LINEAR: \"BRANCH c rs \\<noteq> LINEAR b r\"\n  and TERMINAL_inject: \"TERMINAL a = TERMINAL a' \\<longleftrightarrow> a = a'\"\n  and LINEAR_inject: \"LINEAR b r = LINEAR b' r' \\<longleftrightarrow> b = b' \\<and> r = r'\"\n  and BRANCH_inject: \"BRANCH c rs = BRANCH c' rs' \\<longleftrightarrow> c = c' \\<and> rs = rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((TERMINAL a \\<noteq> LINEAR b r &&& LINEAR b R \\<noteq> TERMINAL a) &&&\n     TERMINAL a \\<noteq> BRANCH c rs &&&\n     BRANCH c rs \\<noteq> TERMINAL a) &&&\n    (LINEAR b r \\<noteq> BRANCH c rs &&&\n     BRANCH c rs \\<noteq> LINEAR b r) &&&\n    (TERMINAL a = TERMINAL a') = (a = a') &&&\n    (LINEAR b r = LINEAR b' r') = (b = b' \\<and> r = r') &&&\n    (BRANCH c rs = BRANCH c' rs') = (c = c' \\<and> rs = rs')", "by(auto simp add: TERMINAL_def LINEAR_def BRANCH_def dest: Lim_inject)"], ["", "lemma case_RESUMPTION_simps [simp]:\n  shows case_RESUMPTION_TERMINAL: \"case_RESUMPTION t l br (TERMINAL a) = t a\"\n  and case_RESUMPTION_LINEAR: \"case_RESUMPTION t l br (LINEAR b r) = l b r\"\n  and case_RESUMPTION_BRANCH: \"case_RESUMPTION t l br (BRANCH c rs) = br c rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case_RESUMPTION t l br (TERMINAL a) = t a &&&\n    case_RESUMPTION t l br (LINEAR b r) = l b r &&&\n    case_RESUMPTION t l br (BRANCH c rs) = br c rs", "apply(simp_all add: case_RESUMPTION_def TERMINAL_def LINEAR_def BRANCH_def o_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. t (inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inr x)))\n        (Old_Datatype.Leaf (Inr (Inr a)))) =\n    t a\n 2. l (inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inl x)))\n        (Old_Datatype.Leaf (Inr (Inl b))))\n     r =\n    l b r\n 3. br (inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n         (Old_Datatype.Leaf (Inl c)))\n     rs =\n    br c rs", "apply(rule arg_cong)"], ["proof (prove)\ngoal (3 subgoals):\n 1. t (inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inr x)))\n        (Old_Datatype.Leaf (Inr (Inr a)))) =\n    t a\n 2. l (inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inl x)))\n        (Old_Datatype.Leaf (Inr (Inl b))))\n     r =\n    l b r\n 3. br (inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n         (Old_Datatype.Leaf (Inl c)))\n     rs =\n    br c rs", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inr x)))\n     (Old_Datatype.Leaf (Inr (Inr a))) =\n    a\n 2. l (inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inl x)))\n        (Old_Datatype.Leaf (Inr (Inl b))))\n     r =\n    l b r\n 3. br (inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n         (Old_Datatype.Leaf (Inl c)))\n     rs =\n    br c rs", "apply(blast intro: injI inv_f_f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. l (inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inl x)))\n        (Old_Datatype.Leaf (Inr (Inl b))))\n     r =\n    l b r\n 2. br (inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n         (Old_Datatype.Leaf (Inl c)))\n     rs =\n    br c rs", "apply(rule arg_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. l (inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inl x)))\n        (Old_Datatype.Leaf (Inr (Inl b))))\n     r =\n    l b r\n 2. br (inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n         (Old_Datatype.Leaf (Inl c)))\n     rs =\n    br c rs", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. inv (\\<lambda>x. Old_Datatype.Leaf (Inr (Inl x)))\n     (Old_Datatype.Leaf (Inr (Inl b))) =\n    b\n 2. br (inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n         (Old_Datatype.Leaf (Inl c)))\n     rs =\n    br c rs", "apply(blast intro: injI inv_f_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. br (inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n         (Old_Datatype.Leaf (Inl c)))\n     rs =\n    br c rs", "apply(rule arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. br (inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n         (Old_Datatype.Leaf (Inl c)))\n     rs =\n    br c rs", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv (\\<lambda>x. Old_Datatype.Leaf (Inl x))\n     (Old_Datatype.Leaf (Inl c)) =\n    c", "apply(blast intro: injI inv_f_f)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma LINEAR_mono: \"r \\<subseteq> r' \\<Longrightarrow> LINEAR b r \\<subseteq> LINEAR b r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<subseteq> r' \\<Longrightarrow> LINEAR b r \\<subseteq> LINEAR b r'", "by(simp add: LINEAR_def In1_mono In0_mono Scons_mono)"], ["", "lemma BRANCH_mono: \"(\\<And>d. rs d \\<subseteq> rs' d) \\<Longrightarrow> BRANCH c rs \\<subseteq> BRANCH c rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d. rs d \\<subseteq> rs' d) \\<Longrightarrow>\n    BRANCH c rs \\<subseteq> BRANCH c rs'", "by(simp add: BRANCH_def In1_mono Scons_mono Lim_mono)"], ["", "lemma LINEAR_UN: \"LINEAR b (\\<Union>x. f x) = (\\<Union>x. LINEAR b (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LINEAR b (\\<Union> (range f)) = (\\<Union>x. LINEAR b (f x))", "by (simp add: LINEAR_def In1_UN1 In0_UN1 Scons_UN1_y)"], ["", "lemma BRANCH_UN: \"BRANCH b (\\<lambda>d. \\<Union>x. f d x) = (\\<Union>x. BRANCH b (\\<lambda>d. f d x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BRANCH b (\\<lambda>d. \\<Union> (range (f d))) =\n    (\\<Union>x. BRANCH b (\\<lambda>d. f d x))", "by (simp add: BRANCH_def Lim_UN1 In1_UN1 In0_UN1 Scons_UN1_y)"], ["", "text \\<open>The codatatype universe\\<close>"], ["", "coinductive_set resumption :: \"('c + 'b + 'a, 'd) Old_Datatype.dtree set\"\nwhere\nresumption_TERMINAL:\n  \"TERMINAL a \\<in> resumption\"\n| resumption_LINEAR:\n  \"r \\<in> resumption \\<Longrightarrow> LINEAR b r \\<in> resumption\"\n| resumption_BRANCH:\n  \"(\\<And>d. rs d \\<in> resumption) \\<Longrightarrow> BRANCH c rs \\<in> resumption\""], ["", "subsection \\<open>Definition of the codatatype as a type\\<close>"], ["", "typedef ('a,'b,'c,'d) resumption = \"resumption :: ('c + 'b + 'a, 'd) Old_Datatype.dtree set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> resumption", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ?x \\<in> resumption", "show \"TERMINAL undefined \\<in> ?resumption\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TERMINAL undefined \\<in> resumption", "by(blast intro: resumption.intros)"], ["proof (state)\nthis:\n  TERMINAL undefined \\<in> resumption\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Constructors\\<close>"], ["", "definition Terminal :: \"'a \\<Rightarrow> ('a,'b,'c,'d) resumption\"\nwhere \"Terminal a = Abs_resumption (TERMINAL a)\""], ["", "definition Linear :: \"'b \\<Rightarrow> ('a,'b,'c,'d) resumption \\<Rightarrow> ('a,'b,'c,'d) resumption\"\nwhere \"Linear b r = Abs_resumption (LINEAR b (Rep_resumption r))\""], ["", "definition Branch :: \"'c \\<Rightarrow> ('d \\<Rightarrow> ('a,'b,'c,'d) resumption) \\<Rightarrow> ('a,'b,'c,'d) resumption\"\nwhere \"Branch c rs = Abs_resumption (BRANCH c (\\<lambda>d. Rep_resumption (rs d)))\""], ["", "lemma [iff]:\n  shows Terminal_not_Linear: \"Terminal a \\<noteq> Linear b r\"\n  and Linear_not_Terminal: \"Linear b R \\<noteq> Terminal a\"\n  and Termina_not_Branch: \"Terminal a \\<noteq> Branch c rs\"\n  and Branch_not_Terminal: \"Branch c rs \\<noteq> Terminal a\"\n  and Linear_not_Branch: \"Linear b r \\<noteq> Branch c rs\"\n  and Branch_not_Linear: \"Branch c rs \\<noteq> Linear b r\"\n  and Terminal_inject: \"Terminal a = Terminal a' \\<longleftrightarrow> a = a'\"\n  and Linear_inject: \"Linear b r = Linear b' r' \\<longleftrightarrow> b = b' \\<and> r = r'\"\n  and Branch_inject: \"Branch c rs = Branch c' rs' \\<longleftrightarrow> c = c' \\<and> rs = rs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Terminal a \\<noteq> Linear b r &&& Linear b R \\<noteq> Terminal a) &&&\n     Terminal a \\<noteq> Branch c rs &&&\n     Branch c rs \\<noteq> Terminal a) &&&\n    (Linear b r \\<noteq> Branch c rs &&&\n     Branch c rs \\<noteq> Linear b r) &&&\n    (Terminal a = Terminal a') = (a = a') &&&\n    (Linear b r = Linear b' r') = (b = b' \\<and> r = r') &&&\n    (Branch c rs = Branch c' rs') = (c = c' \\<and> rs = rs')", "apply(auto simp add: Terminal_def Linear_def Branch_def simp add: Rep_resumption resumption.intros Abs_resumption_inject Rep_resumption_inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<lambda>d. Rep_resumption (rs d)) =\n             (\\<lambda>d. Rep_resumption (rs' d));\n     c = c'\\<rbrakk>\n    \\<Longrightarrow> rs = rs'", "apply(subst (asm) fun_eq_iff, auto simp add: Rep_resumption_inject)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Rep_resumption_constructors:\n  shows Rep_resumption_Terminal: \"Rep_resumption (Terminal a) = TERMINAL a\"\n  and Rep_resumption_Linear: \"Rep_resumption (Linear b r) = LINEAR b (Rep_resumption r)\"\n  and Rep_resumption_Branch: \"Rep_resumption (Branch c rs) = BRANCH c (\\<lambda>d. Rep_resumption (rs d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_resumption (Terminal a) = TERMINAL a &&&\n    Rep_resumption (Linear b r) = LINEAR b (Rep_resumption r) &&&\n    Rep_resumption (Branch c rs) =\n    BRANCH c (\\<lambda>d. Rep_resumption (rs d))", "by(simp_all add: Terminal_def Linear_def Branch_def Abs_resumption_inverse resumption.intros Rep_resumption)"], ["", "text \\<open>Case operator\\<close>"], ["", "definition case_resumption :: \"('a \\<Rightarrow> 'e) \\<Rightarrow> ('b \\<Rightarrow> ('a,'b,'c,'d) resumption \\<Rightarrow> 'e) \\<Rightarrow>\n                            ('c \\<Rightarrow> ('d \\<Rightarrow> ('a,'b,'c,'d) resumption) \\<Rightarrow> 'e) \\<Rightarrow> ('a,'b,'c,'d) resumption \\<Rightarrow> 'e\"\nwhere [code del]:\n  \"case_resumption t l br r =\n   case_RESUMPTION t (\\<lambda>b r. l b (Abs_resumption r)) (\\<lambda>c rs. br c (\\<lambda>d. Abs_resumption (rs d))) (Rep_resumption r)\""], ["", "lemma case_resumption_simps [simp, code]:\n  shows case_resumption_Terminal: \"case_resumption t l br (Terminal a) = t a\"\n  and case_resumption_Linear: \"case_resumption t l br (Linear b r) = l b r\"\n  and case_resumption_Branch: \"case_resumption t l br (Branch c rs) = br c rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case_resumption t l br (Terminal a) = t a &&&\n    case_resumption t l br (Linear b r) = l b r &&&\n    case_resumption t l br (Branch c rs) = br c rs", "by(simp_all add: Terminal_def Linear_def Branch_def case_resumption_def Abs_resumption_inverse resumption.intros Rep_resumption Rep_resumption_inverse)"], ["", "declare [[case_translation case_resumption Terminal Linear Branch]]"], ["", "lemma case_resumption_cert:\n  assumes \"CASE \\<equiv> case_resumption t l br\"\n  shows \"(CASE (Terminal a) \\<equiv> t a) &&& (CASE (Linear b r) \\<equiv> l b r) &&& (CASE (Branch c rs) \\<equiv> br c rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CASE (Terminal a) \\<equiv> t a) &&&\n    (CASE (Linear b r) \\<equiv> l b r) &&&\n    CASE (Branch c rs) \\<equiv> br c rs", "using assms"], ["proof (prove)\nusing this:\n  CASE \\<equiv> case_resumption t l br\n\ngoal (1 subgoal):\n 1. (CASE (Terminal a) \\<equiv> t a) &&&\n    (CASE (Linear b r) \\<equiv> l b r) &&&\n    CASE (Branch c rs) \\<equiv> br c rs", "by simp_all"], ["", "code_datatype Terminal Linear Branch"], ["", "setup \\<open>Code.declare_case_global @{thm case_resumption_cert}\\<close>"], ["", "setup \\<open>\n  Nitpick.register_codatatype @{typ \"('a,'b,'c,'d) resumption\"} @{const_name case_resumption}\n                              (map dest_Const [@{term Terminal}, @{term Linear}, @{term Branch}])\n\\<close>"], ["", "lemma resumption_exhaust [cases type: resumption]:\n  obtains (Terminal) a where \"x = Terminal a\"\n  | (Linear) b r where \"x = Linear b r\"\n  | (Branch) c rs where \"x = Branch c rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a. x = Terminal a \\<Longrightarrow> thesis;\n     \\<And>b r. x = Linear b r \\<Longrightarrow> thesis;\n     \\<And>c rs. x = Branch c rs \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof(cases x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<And>a. x = Terminal a \\<Longrightarrow> thesis;\n        \\<And>b r. x = Linear b r \\<Longrightarrow> thesis;\n        \\<And>c rs. x = Branch c rs \\<Longrightarrow> thesis;\n        x = Abs_resumption y; y \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Abs_resumption y)"], ["proof (state)\nthis:\n  x = Abs_resumption y\n  y \\<in> resumption\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<And>a. x = Terminal a \\<Longrightarrow> thesis;\n        \\<And>b r. x = Linear b r \\<Longrightarrow> thesis;\n        \\<And>c rs. x = Branch c rs \\<Longrightarrow> thesis;\n        x = Abs_resumption y; y \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "note [simp] = \\<open>x = Abs_resumption y\\<close>"], ["proof (state)\nthis:\n  x = Abs_resumption y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<And>a. x = Terminal a \\<Longrightarrow> thesis;\n        \\<And>b r. x = Linear b r \\<Longrightarrow> thesis;\n        \\<And>c rs. x = Branch c rs \\<Longrightarrow> thesis;\n        x = Abs_resumption y; y \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>y \\<in> resumption\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> resumption", "show thesis"], ["proof (prove)\nusing this:\n  y \\<in> resumption\n\ngoal (1 subgoal):\n 1. thesis", "proof(cases rule: resumption.cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a. y = TERMINAL a \\<Longrightarrow> thesis\n 2. \\<And>r b.\n       \\<lbrakk>y = LINEAR b r; r \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "case resumption_TERMINAL"], ["proof (state)\nthis:\n  y = TERMINAL a_\n\ngoal (3 subgoals):\n 1. \\<And>a. y = TERMINAL a \\<Longrightarrow> thesis\n 2. \\<And>r b.\n       \\<lbrakk>y = LINEAR b r; r \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  y = TERMINAL a_\n\ngoal (1 subgoal):\n 1. thesis", "by -(rule Terminal, simp add: Terminal_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (2 subgoals):\n 1. \\<And>r b.\n       \\<lbrakk>y = LINEAR b r; r \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r b.\n       \\<lbrakk>y = LINEAR b r; r \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (resumption_LINEAR r b)"], ["proof (state)\nthis:\n  y = LINEAR b r\n  r \\<in> resumption\n\ngoal (2 subgoals):\n 1. \\<And>r b.\n       \\<lbrakk>y = LINEAR b r; r \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>r \\<in> resumption\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> resumption", "have \"Rep_resumption (Abs_resumption r) = r\""], ["proof (prove)\nusing this:\n  r \\<in> resumption\n\ngoal (1 subgoal):\n 1. Rep_resumption (Abs_resumption r) = r", "by(simp add: Abs_resumption_inverse)"], ["proof (state)\nthis:\n  Rep_resumption (Abs_resumption r) = r\n\ngoal (2 subgoals):\n 1. \\<And>r b.\n       \\<lbrakk>y = LINEAR b r; r \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \"y = LINEAR b (Rep_resumption (Abs_resumption r))\""], ["proof (prove)\nusing this:\n  Rep_resumption (Abs_resumption r) = r\n\ngoal (1 subgoal):\n 1. y = LINEAR b (Rep_resumption (Abs_resumption r))", "using \\<open>y = LINEAR b r\\<close>"], ["proof (prove)\nusing this:\n  Rep_resumption (Abs_resumption r) = r\n  y = LINEAR b r\n\ngoal (1 subgoal):\n 1. y = LINEAR b (Rep_resumption (Abs_resumption r))", "by simp"], ["proof (state)\nthis:\n  y = LINEAR b (Rep_resumption (Abs_resumption r))\n\ngoal (2 subgoals):\n 1. \\<And>r b.\n       \\<lbrakk>y = LINEAR b r; r \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  y = LINEAR b (Rep_resumption (Abs_resumption r))\n\ngoal (1 subgoal):\n 1. thesis", "by -(rule Linear, simp add: Linear_def)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (resumption_BRANCH rs c)"], ["proof (state)\nthis:\n  y = BRANCH c rs\n  rs ?d \\<in> resumption\n\ngoal (1 subgoal):\n 1. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>\\<And>d. rs d \\<in> resumption\\<close>"], ["proof (chain)\npicking this:\n  rs ?d \\<in> resumption", "have eq: \"rs = (\\<lambda>d. Rep_resumption (Abs_resumption (rs d)))\""], ["proof (prove)\nusing this:\n  rs ?d \\<in> resumption\n\ngoal (1 subgoal):\n 1. rs = (\\<lambda>d. Rep_resumption (Abs_resumption (rs d)))", "by(subst Abs_resumption_inverse) blast+"], ["proof (state)\nthis:\n  rs = (\\<lambda>d. Rep_resumption (Abs_resumption (rs d)))\n\ngoal (1 subgoal):\n 1. \\<And>rs c.\n       \\<lbrakk>y = BRANCH c rs; \\<And>d. rs d \\<in> resumption\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using \\<open>y = BRANCH c rs\\<close>"], ["proof (prove)\nusing this:\n  y = BRANCH c rs\n\ngoal (1 subgoal):\n 1. thesis", "by -(rule Branch, simp add: Branch_def, subst eq, simp)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma resumption_split:\n  \"P (case_resumption t l br r) \\<longleftrightarrow> \n  (\\<forall>a. r = Terminal a \\<longrightarrow> P (t a)) \\<and>\n  (\\<forall>b r'. r = Linear b r' \\<longrightarrow> P (l b r')) \\<and>\n  (\\<forall>c rs. r = Branch c rs \\<longrightarrow> P (br c rs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (case r of Terminal x \\<Rightarrow> t x\n       | Linear x xa \\<Rightarrow> l x xa\n       | Branch x xa \\<Rightarrow> br x xa) =\n    ((\\<forall>a. r = Terminal a \\<longrightarrow> P (t a)) \\<and>\n     (\\<forall>b r'. r = Linear b r' \\<longrightarrow> P (l b r')) \\<and>\n     (\\<forall>c rs. r = Branch c rs \\<longrightarrow> P (br c rs)))", "by(cases r) simp_all"], ["", "lemma resumption_split_asm:\n  \"P (case_resumption t l br r) \\<longleftrightarrow>\n  \\<not> ((\\<exists>a. r = Terminal a \\<and> \\<not> P (t a)) \\<or>\n     (\\<exists>b r'. r = Linear b r' \\<and> \\<not> P (l b r')) \\<or>\n     (\\<exists>c rs. r = Branch c rs \\<and> \\<not> P (br c rs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (case r of Terminal x \\<Rightarrow> t x\n       | Linear x xa \\<Rightarrow> l x xa\n       | Branch x xa \\<Rightarrow> br x xa) =\n    (\\<not> ((\\<exists>a. r = Terminal a \\<and> \\<not> P (t a)) \\<or>\n             (\\<exists>b r'. r = Linear b r' \\<and> \\<not> P (l b r')) \\<or>\n             (\\<exists>c rs. r = Branch c rs \\<and> \\<not> P (br c rs))))", "by(cases r) simp_all"], ["", "lemmas resumption_splits = resumption_split resumption_split_asm"], ["", "text \\<open>corecursion operator\\<close>"], ["", "datatype (dead 'a, dead 'b, dead 'c, dead 'd, dead 'e) resumption_corec =\n    Terminal_corec 'a\n  | Linear_corec 'b 'e\n  | Branch_corec 'c \"'d \\<Rightarrow> 'e\"\n  | Resumption_corec \"('a, 'b, 'c, 'd) resumption\""], ["", "primrec RESUMPTION_corec_aux :: \"nat \\<Rightarrow> ('e \\<Rightarrow> ('a,'b,'c,'d,'e) resumption_corec) \\<Rightarrow> 'e \\<Rightarrow> ('c + 'b + 'a,'d) Old_Datatype.dtree\"\nwhere\n  \"RESUMPTION_corec_aux 0 f e = {}\"\n| \"RESUMPTION_corec_aux (Suc n) f e =\n  (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n            | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec_aux n f e')\n            | Branch_corec c es \\<Rightarrow> BRANCH c (\\<lambda>d. RESUMPTION_corec_aux n f (es d))\n            | Resumption_corec r \\<Rightarrow> Rep_resumption r)\""], ["", "definition RESUMPTION_corec :: \"('e \\<Rightarrow> ('a,'b,'c,'d,'e) resumption_corec) \\<Rightarrow> 'e \\<Rightarrow> ('c + 'b + 'a,'d) Old_Datatype.dtree\"\nwhere\n  \"RESUMPTION_corec f e = (\\<Union>n. RESUMPTION_corec_aux n f e)\""], ["", "lemma RESUMPTION_corec [nitpick_simp]:\n  \"RESUMPTION_corec f e =\n  (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n            | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n            | Branch_corec c es \\<Rightarrow> BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n            | Resumption_corec r \\<Rightarrow> Rep_resumption r)\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. RESUMPTION_corec f e =\n    (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n     | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n     | Branch_corec c es \\<Rightarrow>\n         BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n     | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. RESUMPTION_corec f e\n    \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n                 | Linear_corec b e' \\<Rightarrow>\n                     LINEAR b (RESUMPTION_corec f e')\n                 | Branch_corec c es \\<Rightarrow>\n                     BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n                 | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n 2. (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n     | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n     | Branch_corec c es \\<Rightarrow>\n         BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n     | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n    \\<subseteq> RESUMPTION_corec f e", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RESUMPTION_corec f e\n    \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n                 | Linear_corec b e' \\<Rightarrow>\n                     LINEAR b (RESUMPTION_corec f e')\n                 | Branch_corec c es \\<Rightarrow>\n                     BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n                 | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "unfolding RESUMPTION_corec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>n. RESUMPTION_corec_aux n f e)\n    \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n                 | Linear_corec b e' \\<Rightarrow>\n                     LINEAR b (\\<Union>n. RESUMPTION_corec_aux n f e')\n                 | Branch_corec c es \\<Rightarrow>\n                     BRANCH c\n                      (\\<lambda>d.\n                          \\<Union>n. RESUMPTION_corec_aux n f (es d))\n                 | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "proof(rule UN_least)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       RESUMPTION_corec_aux n f e\n       \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n                    | Linear_corec b e' \\<Rightarrow>\n                        LINEAR b (\\<Union>n. RESUMPTION_corec_aux n f e')\n                    | Branch_corec c es \\<Rightarrow>\n                        BRANCH c\n                         (\\<lambda>d.\n                             \\<Union>n. RESUMPTION_corec_aux n f (es d))\n                    | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       RESUMPTION_corec_aux n f e\n       \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n                    | Linear_corec b e' \\<Rightarrow>\n                        LINEAR b (\\<Union>n. RESUMPTION_corec_aux n f e')\n                    | Branch_corec c es \\<Rightarrow>\n                        BRANCH c\n                         (\\<lambda>d.\n                             \\<Union>n. RESUMPTION_corec_aux n f (es d))\n                    | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "show \"RESUMPTION_corec_aux n f e\n        \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n           | Linear_corec b e' \\<Rightarrow> LINEAR b (\\<Union>n. RESUMPTION_corec_aux n f e')\n           | Branch_corec c es \\<Rightarrow> BRANCH c (\\<lambda>d. \\<Union>n. RESUMPTION_corec_aux n f (es d))\n           | Resumption_corec r \\<Rightarrow> Rep_resumption r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RESUMPTION_corec_aux n f e\n    \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n                 | Linear_corec b e' \\<Rightarrow>\n                     LINEAR b (\\<Union>n. RESUMPTION_corec_aux n f e')\n                 | Branch_corec c es \\<Rightarrow>\n                     BRANCH c\n                      (\\<lambda>d.\n                          \\<Union>n. RESUMPTION_corec_aux n f (es d))\n                 | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "apply(cases n, simp_all split: resumption_corec.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<forall>x21 x22.\n           f e = Linear_corec x21 x22 \\<longrightarrow>\n           LINEAR x21 (RESUMPTION_corec_aux nat f x22)\n           \\<subseteq> LINEAR x21\n                        (\\<Union>n. RESUMPTION_corec_aux n f x22)) \\<and>\n       (\\<forall>x31 x32.\n           f e = Branch_corec x31 x32 \\<longrightarrow>\n           BRANCH x31 (\\<lambda>d. RESUMPTION_corec_aux nat f (x32 d))\n           \\<subseteq> BRANCH x31\n                        (\\<lambda>d.\n                            \\<Union>n. RESUMPTION_corec_aux n f (x32 d)))", "by(rule conjI strip LINEAR_mono[OF UN_upper] BRANCH_mono[OF UN_upper] UNIV_I)+"], ["proof (state)\nthis:\n  RESUMPTION_corec_aux n f e\n  \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n               | Linear_corec b e' \\<Rightarrow>\n                   LINEAR b (\\<Union>n. RESUMPTION_corec_aux n f e')\n               | Branch_corec c es \\<Rightarrow>\n                   BRANCH c\n                    (\\<lambda>d. \\<Union>n. RESUMPTION_corec_aux n f (es d))\n               | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  RESUMPTION_corec f e\n  \\<subseteq> (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n               | Linear_corec b e' \\<Rightarrow>\n                   LINEAR b (RESUMPTION_corec f e')\n               | Branch_corec c es \\<Rightarrow>\n                   BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n               | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n\ngoal (1 subgoal):\n 1. (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n     | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n     | Branch_corec c es \\<Rightarrow>\n         BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n     | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n    \\<subseteq> RESUMPTION_corec f e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n     | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n     | Branch_corec c es \\<Rightarrow>\n         BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n     | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n    \\<subseteq> RESUMPTION_corec f e", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n     | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n     | Branch_corec c es \\<Rightarrow>\n         BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n     | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n    \\<subseteq> RESUMPTION_corec f e", "unfolding RESUMPTION_corec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n     | Linear_corec b e' \\<Rightarrow>\n         LINEAR b (\\<Union>n. RESUMPTION_corec_aux n f e')\n     | Branch_corec c es \\<Rightarrow>\n         BRANCH c (\\<lambda>d. \\<Union>n. RESUMPTION_corec_aux n f (es d))\n     | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n    \\<subseteq> (\\<Union>n. RESUMPTION_corec_aux n f e)", "apply(simp split: resumption_corec.split add: LINEAR_UN BRANCH_UN)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x1.\n        f e = Terminal_corec x1 \\<longrightarrow>\n        TERMINAL x1\n        \\<subseteq> (\\<Union>n. RESUMPTION_corec_aux n f e)) \\<and>\n    (\\<forall>x21 x22.\n        f e = Linear_corec x21 x22 \\<longrightarrow>\n        (\\<Union>x. LINEAR x21 (RESUMPTION_corec_aux x f x22))\n        \\<subseteq> (\\<Union>n. RESUMPTION_corec_aux n f e)) \\<and>\n    (\\<forall>x31 x32.\n        f e = Branch_corec x31 x32 \\<longrightarrow>\n        (\\<Union>x.\n            BRANCH x31 (\\<lambda>d. RESUMPTION_corec_aux x f (x32 d)))\n        \\<subseteq> (\\<Union>n. RESUMPTION_corec_aux n f e)) \\<and>\n    (\\<forall>x4.\n        f e = Resumption_corec x4 \\<longrightarrow>\n        Rep_resumption x4\n        \\<subseteq> (\\<Union>n. RESUMPTION_corec_aux n f e))", "by safe(rule_tac a=\"Suc n\" for n in UN_I, rule UNIV_I, simp)+"], ["proof (state)\nthis:\n  (case f e of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n   | Branch_corec c es \\<Rightarrow>\n       BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  \\<subseteq> RESUMPTION_corec f e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma RESUMPTION_corec_type: \"RESUMPTION_corec f e \\<in> resumption\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RESUMPTION_corec f e \\<in> resumption", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. RESUMPTION_corec f e \\<in> resumption", "have \"\\<exists>x. RESUMPTION_corec f e = RESUMPTION_corec f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. RESUMPTION_corec f e = RESUMPTION_corec f x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. RESUMPTION_corec f e = RESUMPTION_corec f x\n\ngoal (1 subgoal):\n 1. RESUMPTION_corec f e \\<in> resumption", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>x. RESUMPTION_corec f e = RESUMPTION_corec f x\n\ngoal (1 subgoal):\n 1. RESUMPTION_corec f e \\<in> resumption", "proof coinduct"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa. x = RESUMPTION_corec f xa \\<Longrightarrow>\n       (\\<exists>a. x = TERMINAL a) \\<or>\n       (\\<exists>r b.\n           x = LINEAR b r \\<and>\n           ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n            r \\<in> resumption)) \\<or>\n       (\\<exists>rs c.\n           x = BRANCH c rs \\<and>\n           (\\<forall>x.\n               (\\<exists>xa. rs x = RESUMPTION_corec f xa) \\<or>\n               rs x \\<in> resumption))", "case (resumption x)"], ["proof (state)\nthis:\n  \\<exists>xa. x = RESUMPTION_corec f xa\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa. x = RESUMPTION_corec f xa \\<Longrightarrow>\n       (\\<exists>a. x = TERMINAL a) \\<or>\n       (\\<exists>r b.\n           x = LINEAR b r \\<and>\n           ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n            r \\<in> resumption)) \\<or>\n       (\\<exists>rs c.\n           x = BRANCH c rs \\<and>\n           (\\<forall>x.\n               (\\<exists>xa. rs x = RESUMPTION_corec f xa) \\<or>\n               rs x \\<in> resumption))", "then"], ["proof (chain)\npicking this:\n  \\<exists>xa. x = RESUMPTION_corec f xa", "obtain e where x: \"x = RESUMPTION_corec f e\""], ["proof (prove)\nusing this:\n  \\<exists>xa. x = RESUMPTION_corec f xa\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        x = RESUMPTION_corec f e \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = RESUMPTION_corec f e\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa. x = RESUMPTION_corec f xa \\<Longrightarrow>\n       (\\<exists>a. x = TERMINAL a) \\<or>\n       (\\<exists>r b.\n           x = LINEAR b r \\<and>\n           ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n            r \\<in> resumption)) \\<or>\n       (\\<exists>rs c.\n           x = BRANCH c rs \\<and>\n           (\\<forall>x.\n               (\\<exists>xa. rs x = RESUMPTION_corec f xa) \\<or>\n               rs x \\<in> resumption))", "thus ?case"], ["proof (prove)\nusing this:\n  x = RESUMPTION_corec f e\n\ngoal (1 subgoal):\n 1. (\\<exists>a. x = TERMINAL a) \\<or>\n    (\\<exists>r b.\n        x = LINEAR b r \\<and>\n        ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n         r \\<in> resumption)) \\<or>\n    (\\<exists>rs c.\n        x = BRANCH c rs \\<and>\n        (\\<forall>x.\n            (\\<exists>xa. rs x = RESUMPTION_corec f xa) \\<or>\n            rs x \\<in> resumption))", "proof(cases \"f e\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>x = RESUMPTION_corec f e; f e = Terminal_corec x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))\n 2. \\<And>x21 x22.\n       \\<lbrakk>x = RESUMPTION_corec f e;\n        f e = Linear_corec x21 x22\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))\n 3. \\<And>x31 x32.\n       \\<lbrakk>x = RESUMPTION_corec f e;\n        f e = Branch_corec x31 x32\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))\n 4. \\<And>x4.\n       \\<lbrakk>x = RESUMPTION_corec f e; f e = Resumption_corec x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))", "case (Resumption_corec r)"], ["proof (state)\nthis:\n  f e = Resumption_corec r\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>x = RESUMPTION_corec f e; f e = Terminal_corec x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))\n 2. \\<And>x21 x22.\n       \\<lbrakk>x = RESUMPTION_corec f e;\n        f e = Linear_corec x21 x22\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))\n 3. \\<And>x31 x32.\n       \\<lbrakk>x = RESUMPTION_corec f e;\n        f e = Branch_corec x31 x32\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))\n 4. \\<And>x4.\n       \\<lbrakk>x = RESUMPTION_corec f e; f e = Resumption_corec x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))", "thus ?thesis"], ["proof (prove)\nusing this:\n  f e = Resumption_corec r\n\ngoal (1 subgoal):\n 1. (\\<exists>a. x = TERMINAL a) \\<or>\n    (\\<exists>r b.\n        x = LINEAR b r \\<and>\n        ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n         r \\<in> resumption)) \\<or>\n    (\\<exists>rs c.\n        x = BRANCH c rs \\<and>\n        (\\<forall>x.\n            (\\<exists>xa. rs x = RESUMPTION_corec f xa) \\<or>\n            rs x \\<in> resumption))", "using x"], ["proof (prove)\nusing this:\n  f e = Resumption_corec r\n  x = RESUMPTION_corec f e\n\ngoal (1 subgoal):\n 1. (\\<exists>a. x = TERMINAL a) \\<or>\n    (\\<exists>r b.\n        x = LINEAR b r \\<and>\n        ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n         r \\<in> resumption)) \\<or>\n    (\\<exists>rs c.\n        x = BRANCH c rs \\<and>\n        (\\<forall>x.\n            (\\<exists>xa. rs x = RESUMPTION_corec f xa) \\<or>\n            rs x \\<in> resumption))", "by(cases r)(simp_all add: RESUMPTION_corec Rep_resumption_constructors Rep_resumption)"], ["proof (state)\nthis:\n  (\\<exists>a. x = TERMINAL a) \\<or>\n  (\\<exists>r b.\n      x = LINEAR b r \\<and>\n      ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n       r \\<in> resumption)) \\<or>\n  (\\<exists>rs c.\n      x = BRANCH c rs \\<and>\n      (\\<forall>x.\n          (\\<exists>xa. rs x = RESUMPTION_corec f xa) \\<or>\n          rs x \\<in> resumption))\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>x = RESUMPTION_corec f e; f e = Terminal_corec x1\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))\n 2. \\<And>x21 x22.\n       \\<lbrakk>x = RESUMPTION_corec f e;\n        f e = Linear_corec x21 x22\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))\n 3. \\<And>x31 x32.\n       \\<lbrakk>x = RESUMPTION_corec f e;\n        f e = Branch_corec x31 x32\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a. x = TERMINAL a) \\<or>\n                         (\\<exists>r b.\n                             x = LINEAR b r \\<and>\n                             ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n                              r \\<in> resumption)) \\<or>\n                         (\\<exists>rs c.\n                             x = BRANCH c rs \\<and>\n                             (\\<forall>x.\n                                 (\\<exists>xa.\n                                     rs x = RESUMPTION_corec f xa) \\<or>\n                                 rs x \\<in> resumption))", "qed(auto simp add: RESUMPTION_corec)"], ["proof (state)\nthis:\n  (\\<exists>a. x = TERMINAL a) \\<or>\n  (\\<exists>r b.\n      x = LINEAR b r \\<and>\n      ((\\<exists>x. r = RESUMPTION_corec f x) \\<or>\n       r \\<in> resumption)) \\<or>\n  (\\<exists>rs c.\n      x = BRANCH c rs \\<and>\n      (\\<forall>x.\n          (\\<exists>xa. rs x = RESUMPTION_corec f xa) \\<or>\n          rs x \\<in> resumption))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  RESUMPTION_corec f e \\<in> resumption\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>corecursion operator for the resumption type\\<close>"], ["", "definition resumption_corec :: \"('e \\<Rightarrow> ('a,'b,'c,'d,'e) resumption_corec) \\<Rightarrow> 'e \\<Rightarrow> ('a,'b,'c,'d) resumption\"\nwhere\n  \"resumption_corec f e = Abs_resumption (RESUMPTION_corec f e)\""], ["", "lemma resumption_corec:\n  \"resumption_corec f e =\n  (case f e of Terminal_corec a \\<Rightarrow> Terminal a\n            | Linear_corec b e' \\<Rightarrow> Linear b (resumption_corec f e')\n            | Branch_corec c es \\<Rightarrow> Branch c (\\<lambda>d. resumption_corec f (es d))\n            | Resumption_corec r \\<Rightarrow> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resumption_corec f e =\n    (case f e of Terminal_corec a \\<Rightarrow> Terminal a\n     | Linear_corec b e' \\<Rightarrow> Linear b (resumption_corec f e')\n     | Branch_corec c es \\<Rightarrow>\n         Branch c (\\<lambda>d. resumption_corec f (es d))\n     | Resumption_corec r \\<Rightarrow> r)", "unfolding resumption_corec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_resumption (RESUMPTION_corec f e) =\n    (case f e of Terminal_corec a \\<Rightarrow> Terminal a\n     | Linear_corec b e' \\<Rightarrow>\n         Linear b (Abs_resumption (RESUMPTION_corec f e'))\n     | Branch_corec c es \\<Rightarrow>\n         Branch c (\\<lambda>d. Abs_resumption (RESUMPTION_corec f (es d)))\n     | Resumption_corec r \\<Rightarrow> r)", "apply(subst RESUMPTION_corec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_resumption\n     (case f e of Terminal_corec x \\<Rightarrow> TERMINAL x\n      | Linear_corec b e' \\<Rightarrow> LINEAR b (RESUMPTION_corec f e')\n      | Branch_corec c es \\<Rightarrow>\n          BRANCH c (\\<lambda>d. RESUMPTION_corec f (es d))\n      | Resumption_corec x \\<Rightarrow> Rep_resumption x) =\n    (case f e of Terminal_corec x \\<Rightarrow> Terminal x\n     | Linear_corec b e' \\<Rightarrow>\n         Linear b (Abs_resumption (RESUMPTION_corec f e'))\n     | Branch_corec c es \\<Rightarrow>\n         Branch c (\\<lambda>d. Abs_resumption (RESUMPTION_corec f (es d)))\n     | Resumption_corec r \\<Rightarrow> r)", "apply(auto split: resumption_corec.splits simp add: Terminal_def Linear_def Branch_def RESUMPTION_corec_type Abs_resumption_inverse Rep_resumption_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Equality as greatest fixpoint\\<close>"], ["", "coinductive Eq_RESUMPTION :: \"('c+'b+'a, 'd) Old_Datatype.dtree \\<Rightarrow> ('c+'b+'a, 'd) Old_Datatype.dtree \\<Rightarrow> bool\"\nwhere\n  EqTERMINAL: \"Eq_RESUMPTION (TERMINAL a) (TERMINAL a)\"\n| EqLINEAR: \"Eq_RESUMPTION r r' \\<Longrightarrow> Eq_RESUMPTION (LINEAR b r) (LINEAR b r')\"\n| EqBRANCH: \"(\\<And>d. Eq_RESUMPTION (rs d) (rs' d)) \\<Longrightarrow> Eq_RESUMPTION (BRANCH c rs) (BRANCH c rs')\""], ["", "lemma Eq_RESUMPTION_implies_ntrunc_equality:\n  \"Eq_RESUMPTION r r' \\<Longrightarrow> ntrunc k r = ntrunc k r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r' \\<Longrightarrow> ntrunc k r = ntrunc k r'", "proof(induct k arbitrary: r r' rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<And>y r r'.\n                   \\<lbrakk>y < x; Eq_RESUMPTION r r'\\<rbrakk>\n                   \\<Longrightarrow> ntrunc y r = ntrunc y r';\n        Eq_RESUMPTION r r'\\<rbrakk>\n       \\<Longrightarrow> ntrunc x r = ntrunc x r'", "case (less k)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < k; Eq_RESUMPTION ?r ?r'\\<rbrakk>\n  \\<Longrightarrow> ntrunc ?y ?r = ntrunc ?y ?r'\n  Eq_RESUMPTION r r'\n\ngoal (1 subgoal):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<And>y r r'.\n                   \\<lbrakk>y < x; Eq_RESUMPTION r r'\\<rbrakk>\n                   \\<Longrightarrow> ntrunc y r = ntrunc y r';\n        Eq_RESUMPTION r r'\\<rbrakk>\n       \\<Longrightarrow> ntrunc x r = ntrunc x r'", "note IH = \\<open>\\<And>k' r r'. \\<lbrakk>k' < k; Eq_RESUMPTION r r'\\<rbrakk> \\<Longrightarrow> ntrunc k' r = ntrunc k' r'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?k' < k; Eq_RESUMPTION ?r ?r'\\<rbrakk>\n  \\<Longrightarrow> ntrunc ?k' ?r = ntrunc ?k' ?r'\n\ngoal (1 subgoal):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<And>y r r'.\n                   \\<lbrakk>y < x; Eq_RESUMPTION r r'\\<rbrakk>\n                   \\<Longrightarrow> ntrunc y r = ntrunc y r';\n        Eq_RESUMPTION r r'\\<rbrakk>\n       \\<Longrightarrow> ntrunc x r = ntrunc x r'", "from \\<open>Eq_RESUMPTION r r'\\<close>"], ["proof (chain)\npicking this:\n  Eq_RESUMPTION r r'", "show ?case"], ["proof (prove)\nusing this:\n  Eq_RESUMPTION r r'\n\ngoal (1 subgoal):\n 1. ntrunc k r = ntrunc k r'", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>r = TERMINAL a; r' = TERMINAL a\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'\n 2. \\<And>r r' b.\n       \\<lbrakk>r = LINEAR b r; r' = LINEAR b r';\n        Eq_RESUMPTION r r'\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'\n 3. \\<And>rs rs' c.\n       \\<lbrakk>r = BRANCH c rs; r' = BRANCH c rs';\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d)\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "case EqTERMINAL"], ["proof (state)\nthis:\n  r = TERMINAL a_\n  r' = TERMINAL a_\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>r = TERMINAL a; r' = TERMINAL a\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'\n 2. \\<And>r r' b.\n       \\<lbrakk>r = LINEAR b r; r' = LINEAR b r';\n        Eq_RESUMPTION r r'\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'\n 3. \\<And>rs rs' c.\n       \\<lbrakk>r = BRANCH c rs; r' = BRANCH c rs';\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d)\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  r = TERMINAL a_\n  r' = TERMINAL a_\n\ngoal (1 subgoal):\n 1. ntrunc k r = ntrunc k r'", "by simp"], ["proof (state)\nthis:\n  ntrunc k r = ntrunc k r'\n\ngoal (2 subgoals):\n 1. \\<And>r r' b.\n       \\<lbrakk>r = LINEAR b r; r' = LINEAR b r';\n        Eq_RESUMPTION r r'\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'\n 2. \\<And>rs rs' c.\n       \\<lbrakk>r = BRANCH c rs; r' = BRANCH c rs';\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d)\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r r' b.\n       \\<lbrakk>r = LINEAR b r; r' = LINEAR b r';\n        Eq_RESUMPTION r r'\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'\n 2. \\<And>rs rs' c.\n       \\<lbrakk>r = BRANCH c rs; r' = BRANCH c rs';\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d)\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "case (EqLINEAR R R' b)"], ["proof (state)\nthis:\n  r = LINEAR b R\n  r' = LINEAR b R'\n  Eq_RESUMPTION R R'\n\ngoal (2 subgoals):\n 1. \\<And>r r' b.\n       \\<lbrakk>r = LINEAR b r; r' = LINEAR b r';\n        Eq_RESUMPTION r r'\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'\n 2. \\<And>rs rs' c.\n       \\<lbrakk>r = BRANCH c rs; r' = BRANCH c rs';\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d)\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  r = LINEAR b R\n  r' = LINEAR b R'\n  Eq_RESUMPTION R R'\n\ngoal (1 subgoal):\n 1. ntrunc k r = ntrunc k r'", "unfolding LINEAR_def"], ["proof (prove)\nusing this:\n  r = In1 (In0 (Scons (Old_Datatype.Leaf (Inr (Inl b))) R))\n  r' = In1 (In0 (Scons (Old_Datatype.Leaf (Inr (Inl b))) R'))\n  Eq_RESUMPTION R R'\n\ngoal (1 subgoal):\n 1. ntrunc k r = ntrunc k r'", "apply(cases k, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>r = In1 (In0 (Scons (Old_Datatype.Leaf (Inr (Inl b))) R));\n        r' = In1 (In0 (Scons (Old_Datatype.Leaf (Inr (Inl b))) R'));\n        Eq_RESUMPTION R R'; k = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "apply(rename_tac k', case_tac k', simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k' nat.\n       \\<lbrakk>r = In1 (In0 (Scons (Old_Datatype.Leaf (Inr (Inl b))) R));\n        r' = In1 (In0 (Scons (Old_Datatype.Leaf (Inr (Inl b))) R'));\n        Eq_RESUMPTION R R'; k = Suc k'; k' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "apply(rename_tac k'', case_tac k'', simp_all add: IH)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ntrunc k r = ntrunc k r'\n\ngoal (1 subgoal):\n 1. \\<And>rs rs' c.\n       \\<lbrakk>r = BRANCH c rs; r' = BRANCH c rs';\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d)\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rs rs' c.\n       \\<lbrakk>r = BRANCH c rs; r' = BRANCH c rs';\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d)\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "case (EqBRANCH rs rs' c)"], ["proof (state)\nthis:\n  r = BRANCH c rs\n  r' = BRANCH c rs'\n  Eq_RESUMPTION (rs ?d) (rs' ?d)\n\ngoal (1 subgoal):\n 1. \\<And>rs rs' c.\n       \\<lbrakk>r = BRANCH c rs; r' = BRANCH c rs';\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d)\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  r = BRANCH c rs\n  r' = BRANCH c rs'\n  Eq_RESUMPTION (rs ?d) (rs' ?d)\n\ngoal (1 subgoal):\n 1. ntrunc k r = ntrunc k r'", "unfolding BRANCH_def"], ["proof (prove)\nusing this:\n  r = In1 (In1 (Scons (Old_Datatype.Leaf (Inl c)) (Old_Datatype.Lim rs)))\n  r' = In1 (In1 (Scons (Old_Datatype.Leaf (Inl c)) (Old_Datatype.Lim rs')))\n  Eq_RESUMPTION (rs ?d) (rs' ?d)\n\ngoal (1 subgoal):\n 1. ntrunc k r = ntrunc k r'", "apply(cases k, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>r =\n                In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                           (Old_Datatype.Lim rs)));\n        r' =\n        In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                   (Old_Datatype.Lim rs')));\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d); k = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "apply(rename_tac k', case_tac k', simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k' nat.\n       \\<lbrakk>r =\n                In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                           (Old_Datatype.Lim rs)));\n        r' =\n        In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                   (Old_Datatype.Lim rs')));\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d); k = Suc k';\n        k' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "apply(rename_tac k'', case_tac k'', simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k' k'' nat.\n       \\<lbrakk>r =\n                In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                           (Old_Datatype.Lim rs)));\n        r' =\n        In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                   (Old_Datatype.Lim rs')));\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d); k = Suc k'; k' = Suc k'';\n        k'' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ntrunc k r = ntrunc k r'", "apply(rename_tac k''', case_tac k''', simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k' k'' k''' nat.\n       \\<lbrakk>r =\n                In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                           (Old_Datatype.Lim rs)));\n        r' =\n        In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                   (Old_Datatype.Lim rs')));\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d);\n        k = Suc (Suc (Suc (Suc nat))); k' = Suc (Suc (Suc nat));\n        k'' = Suc (Suc nat); k''' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> Old_Datatype.Lim (\\<lambda>x. ntrunc nat (rs x)) =\n                         Old_Datatype.Lim (\\<lambda>x. ntrunc nat (rs' x))", "apply(rule arg_cong[where f=Old_Datatype.Lim])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k' k'' k''' nat.\n       \\<lbrakk>r =\n                In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                           (Old_Datatype.Lim rs)));\n        r' =\n        In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                   (Old_Datatype.Lim rs')));\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d);\n        k = Suc (Suc (Suc (Suc nat))); k' = Suc (Suc (Suc nat));\n        k'' = Suc (Suc nat); k''' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. ntrunc nat (rs x)) =\n                         (\\<lambda>x. ntrunc nat (rs' x))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k' k'' k''' nat x.\n       \\<lbrakk>r =\n                In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                           (Old_Datatype.Lim rs)));\n        r' =\n        In1 (In1 (Scons (Old_Datatype.Leaf (Inl c))\n                   (Old_Datatype.Lim rs')));\n        \\<And>d. Eq_RESUMPTION (rs d) (rs' d);\n        k = Suc (Suc (Suc (Suc nat))); k' = Suc (Suc (Suc nat));\n        k'' = Suc (Suc nat); k''' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ntrunc nat (rs x) = ntrunc nat (rs' x)", "apply(simp add: IH)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ntrunc k r = ntrunc k r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ntrunc k r = ntrunc k r'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eq_RESUMPTION_refl:\n  assumes \"r \\<in> resumption\"\n  shows \"Eq_RESUMPTION r r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r", "define r' where \"r' = r\""], ["proof (state)\nthis:\n  r' = r\n\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r", "with assms"], ["proof (chain)\npicking this:\n  r \\<in> resumption\n  r' = r", "have \"r = r' \\<and> r \\<in> resumption\""], ["proof (prove)\nusing this:\n  r \\<in> resumption\n  r' = r\n\ngoal (1 subgoal):\n 1. r = r' \\<and> r \\<in> resumption", "by auto"], ["proof (state)\nthis:\n  r = r' \\<and> r \\<in> resumption\n\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r", "thus \"Eq_RESUMPTION r r'\""], ["proof (prove)\nusing this:\n  r = r' \\<and> r \\<in> resumption\n\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r'", "proof(coinduct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       x1 = x2 \\<and> x1 \\<in> resumption \\<Longrightarrow>\n       (\\<exists>a. x1 = TERMINAL a \\<and> x2 = TERMINAL a) \\<or>\n       (\\<exists>r r' b.\n           x1 = LINEAR b r \\<and>\n           x2 = LINEAR b r' \\<and>\n           (r = r' \\<and> r \\<in> resumption \\<or>\n            Eq_RESUMPTION r r')) \\<or>\n       (\\<exists>rs rs' c.\n           x1 = BRANCH c rs \\<and>\n           x2 = BRANCH c rs' \\<and>\n           (\\<forall>x.\n               rs x = rs' x \\<and> rs x \\<in> resumption \\<or>\n               Eq_RESUMPTION (rs x) (rs' x)))", "case (Eq_RESUMPTION r r')"], ["proof (state)\nthis:\n  r = r' \\<and> r \\<in> resumption\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       x1 = x2 \\<and> x1 \\<in> resumption \\<Longrightarrow>\n       (\\<exists>a. x1 = TERMINAL a \\<and> x2 = TERMINAL a) \\<or>\n       (\\<exists>r r' b.\n           x1 = LINEAR b r \\<and>\n           x2 = LINEAR b r' \\<and>\n           (r = r' \\<and> r \\<in> resumption \\<or>\n            Eq_RESUMPTION r r')) \\<or>\n       (\\<exists>rs rs' c.\n           x1 = BRANCH c rs \\<and>\n           x2 = BRANCH c rs' \\<and>\n           (\\<forall>x.\n               rs x = rs' x \\<and> rs x \\<in> resumption \\<or>\n               Eq_RESUMPTION (rs x) (rs' x)))", "hence [simp]: \"r = r'\" and \"r \\<in> resumption\""], ["proof (prove)\nusing this:\n  r = r' \\<and> r \\<in> resumption\n\ngoal (1 subgoal):\n 1. r = r' &&& r \\<in> resumption", "by auto"], ["proof (state)\nthis:\n  r = r'\n  r \\<in> resumption\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       x1 = x2 \\<and> x1 \\<in> resumption \\<Longrightarrow>\n       (\\<exists>a. x1 = TERMINAL a \\<and> x2 = TERMINAL a) \\<or>\n       (\\<exists>r r' b.\n           x1 = LINEAR b r \\<and>\n           x2 = LINEAR b r' \\<and>\n           (r = r' \\<and> r \\<in> resumption \\<or>\n            Eq_RESUMPTION r r')) \\<or>\n       (\\<exists>rs rs' c.\n           x1 = BRANCH c rs \\<and>\n           x2 = BRANCH c rs' \\<and>\n           (\\<forall>x.\n               rs x = rs' x \\<and> rs x \\<in> resumption \\<or>\n               Eq_RESUMPTION (rs x) (rs' x)))", "from \\<open>r \\<in> resumption\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> resumption", "show ?case"], ["proof (prove)\nusing this:\n  r \\<in> resumption\n\ngoal (1 subgoal):\n 1. (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n    (\\<exists>r r' b.\n        r = LINEAR b r \\<and>\n        r' = LINEAR b r' \\<and>\n        (r = r' \\<and> r \\<in> resumption \\<or> Eq_RESUMPTION r r')) \\<or>\n    (\\<exists>rs rs' c.\n        r = BRANCH c rs \\<and>\n        r' = BRANCH c rs' \\<and>\n        (\\<forall>x.\n            rs x = rs' x \\<and> rs x \\<in> resumption \\<or>\n            Eq_RESUMPTION (rs x) (rs' x)))", "by(cases rule: resumption.cases) auto"], ["proof (state)\nthis:\n  (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n  (\\<exists>r r' b.\n      r = LINEAR b r \\<and>\n      r' = LINEAR b r' \\<and>\n      (r = r' \\<and> r \\<in> resumption \\<or> Eq_RESUMPTION r r')) \\<or>\n  (\\<exists>rs rs' c.\n      r = BRANCH c rs \\<and>\n      r' = BRANCH c rs' \\<and>\n      (\\<forall>x.\n          rs x = rs' x \\<and> rs x \\<in> resumption \\<or>\n          Eq_RESUMPTION (rs x) (rs' x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Eq_RESUMPTION r r'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eq_RESUMPTION_into_resumption:\n  assumes \"Eq_RESUMPTION r r\"\n  shows \"r \\<in> resumption\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> resumption", "using assms"], ["proof (prove)\nusing this:\n  Eq_RESUMPTION r r\n\ngoal (1 subgoal):\n 1. r \\<in> resumption", "proof(coinduct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Eq_RESUMPTION x x \\<Longrightarrow>\n       (\\<exists>a. x = TERMINAL a) \\<or>\n       (\\<exists>r b.\n           x = LINEAR b r \\<and>\n           (Eq_RESUMPTION r r \\<or> r \\<in> resumption)) \\<or>\n       (\\<exists>rs c.\n           x = BRANCH c rs \\<and>\n           (\\<forall>x.\n               Eq_RESUMPTION (rs x) (rs x) \\<or> rs x \\<in> resumption))", "case resumption"], ["proof (state)\nthis:\n  Eq_RESUMPTION x_ x_\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       Eq_RESUMPTION x x \\<Longrightarrow>\n       (\\<exists>a. x = TERMINAL a) \\<or>\n       (\\<exists>r b.\n           x = LINEAR b r \\<and>\n           (Eq_RESUMPTION r r \\<or> r \\<in> resumption)) \\<or>\n       (\\<exists>rs c.\n           x = BRANCH c rs \\<and>\n           (\\<forall>x.\n               Eq_RESUMPTION (rs x) (rs x) \\<or> rs x \\<in> resumption))", "thus ?case"], ["proof (prove)\nusing this:\n  Eq_RESUMPTION x_ x_\n\ngoal (1 subgoal):\n 1. (\\<exists>a. x_ = TERMINAL a) \\<or>\n    (\\<exists>r b.\n        x_ = LINEAR b r \\<and>\n        (Eq_RESUMPTION r r \\<or> r \\<in> resumption)) \\<or>\n    (\\<exists>rs c.\n        x_ = BRANCH c rs \\<and>\n        (\\<forall>x.\n            Eq_RESUMPTION (rs x) (rs x) \\<or> rs x \\<in> resumption))", "by cases auto"], ["proof (state)\nthis:\n  (\\<exists>a. x_ = TERMINAL a) \\<or>\n  (\\<exists>r b.\n      x_ = LINEAR b r \\<and>\n      (Eq_RESUMPTION r r \\<or> r \\<in> resumption)) \\<or>\n  (\\<exists>rs c.\n      x_ = BRANCH c rs \\<and>\n      (\\<forall>x. Eq_RESUMPTION (rs x) (rs x) \\<or> rs x \\<in> resumption))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eq_RESUMPTION_eq:\n  \"Eq_RESUMPTION r r' \\<longleftrightarrow> r = r' \\<and> r \\<in> resumption\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r' = (r = r' \\<and> r \\<in> resumption)", "proof(rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. Eq_RESUMPTION r r' \\<Longrightarrow> r = r' \\<and> r \\<in> resumption\n 2. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "assume \"Eq_RESUMPTION r r'\""], ["proof (state)\nthis:\n  Eq_RESUMPTION r r'\n\ngoal (2 subgoals):\n 1. Eq_RESUMPTION r r' \\<Longrightarrow> r = r' \\<and> r \\<in> resumption\n 2. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "hence \"\\<And>k. ntrunc k r = ntrunc k r'\""], ["proof (prove)\nusing this:\n  Eq_RESUMPTION r r'\n\ngoal (1 subgoal):\n 1. \\<And>k. ntrunc k r = ntrunc k r'", "by(rule Eq_RESUMPTION_implies_ntrunc_equality)"], ["proof (state)\nthis:\n  ntrunc ?k r = ntrunc ?k r'\n\ngoal (2 subgoals):\n 1. Eq_RESUMPTION r r' \\<Longrightarrow> r = r' \\<and> r \\<in> resumption\n 2. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "hence \"r = r'\""], ["proof (prove)\nusing this:\n  ntrunc ?k r = ntrunc ?k r'\n\ngoal (1 subgoal):\n 1. r = r'", "by(rule ntrunc_equality)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (2 subgoals):\n 1. Eq_RESUMPTION r r' \\<Longrightarrow> r = r' \\<and> r \\<in> resumption\n 2. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "moreover"], ["proof (state)\nthis:\n  r = r'\n\ngoal (2 subgoals):\n 1. Eq_RESUMPTION r r' \\<Longrightarrow> r = r' \\<and> r \\<in> resumption\n 2. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "with \\<open>Eq_RESUMPTION r r'\\<close>"], ["proof (chain)\npicking this:\n  Eq_RESUMPTION r r'\n  r = r'", "have \"r \\<in> resumption\""], ["proof (prove)\nusing this:\n  Eq_RESUMPTION r r'\n  r = r'\n\ngoal (1 subgoal):\n 1. r \\<in> resumption", "by(auto intro: Eq_RESUMPTION_into_resumption)"], ["proof (state)\nthis:\n  r \\<in> resumption\n\ngoal (2 subgoals):\n 1. Eq_RESUMPTION r r' \\<Longrightarrow> r = r' \\<and> r \\<in> resumption\n 2. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "ultimately"], ["proof (chain)\npicking this:\n  r = r'\n  r \\<in> resumption", "show \"r = r' \\<and> r \\<in> resumption\""], ["proof (prove)\nusing this:\n  r = r'\n  r \\<in> resumption\n\ngoal (1 subgoal):\n 1. r = r' \\<and> r \\<in> resumption", ".."], ["proof (state)\nthis:\n  r = r' \\<and> r \\<in> resumption\n\ngoal (1 subgoal):\n 1. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "assume \"r = r' \\<and> r \\<in> resumption\""], ["proof (state)\nthis:\n  r = r' \\<and> r \\<in> resumption\n\ngoal (1 subgoal):\n 1. r = r' \\<and> r \\<in> resumption \\<Longrightarrow> Eq_RESUMPTION r r'", "thus \"Eq_RESUMPTION r r'\""], ["proof (prove)\nusing this:\n  r = r' \\<and> r \\<in> resumption\n\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r'", "by(blast intro: Eq_RESUMPTION_refl)"], ["proof (state)\nthis:\n  Eq_RESUMPTION r r'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eq_RESUMPTION_I [consumes 1, case_names Eq_RESUMPTION, case_conclusion Eq_RESUMPTION EqTerminal EqLinear EqBranch]:\n  assumes \"X r r'\"\n  and step: \"\\<And>r r'. X r r' \\<Longrightarrow>\n             (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n             (\\<exists>R R' b. r = LINEAR b R \\<and> r' = LINEAR b R' \\<and> (X R R' \\<or> Eq_RESUMPTION R R')) \\<or>\n             (\\<exists>rs rs' c. r = BRANCH c rs \\<and> r' = BRANCH c rs' \\<and> (\\<forall>d. X (rs d) (rs' d) \\<or> Eq_RESUMPTION (rs d) (rs' d)))\"\n  shows \"r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r = r'", "from \\<open>X r r'\\<close>"], ["proof (chain)\npicking this:\n  X r r'", "have \"Eq_RESUMPTION r r'\""], ["proof (prove)\nusing this:\n  X r r'\n\ngoal (1 subgoal):\n 1. Eq_RESUMPTION r r'", "by(coinduct)(rule step)"], ["proof (state)\nthis:\n  Eq_RESUMPTION r r'\n\ngoal (1 subgoal):\n 1. r = r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  Eq_RESUMPTION r r'\n\ngoal (1 subgoal):\n 1. r = r'", "by(simp add: Eq_RESUMPTION_eq)"], ["proof (state)\nthis:\n  r = r'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma resumption_equalityI [consumes 1, case_names Eq_resumption, case_conclusion Eq_resumption EqTerminal EqLinear EqBranch]:\n  assumes \"X r r'\"\n  and step: \"\\<And>r r'. X r r' \\<Longrightarrow>\n             (\\<exists>a. r = Terminal a \\<and> r' = Terminal a) \\<or>\n             (\\<exists>R R' b. r = Linear b R \\<and> r' = Linear b R' \\<and> (X R R' \\<or> R = R')) \\<or>\n             (\\<exists>rs rs' c. r = Branch c rs \\<and> r' = Branch c rs' \\<and> (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d))\"\n  shows \"r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r = r'", "define M N where \"M = Rep_resumption r\" and \"N = Rep_resumption r'\""], ["proof (state)\nthis:\n  M = Rep_resumption r\n  N = Rep_resumption r'\n\ngoal (1 subgoal):\n 1. r = r'", "with \\<open>X r r'\\<close>"], ["proof (chain)\npicking this:\n  X r r'\n  M = Rep_resumption r\n  N = Rep_resumption r'", "have \"\\<exists>r r'. M = Rep_resumption r \\<and> N = Rep_resumption r' \\<and> X r r'\""], ["proof (prove)\nusing this:\n  X r r'\n  M = Rep_resumption r\n  N = Rep_resumption r'\n\ngoal (1 subgoal):\n 1. \\<exists>r r'.\n       M = Rep_resumption r \\<and> N = Rep_resumption r' \\<and> X r r'", "by blast"], ["proof (state)\nthis:\n  \\<exists>r r'.\n     M = Rep_resumption r \\<and> N = Rep_resumption r' \\<and> X r r'\n\ngoal (1 subgoal):\n 1. r = r'", "hence \"M = N\""], ["proof (prove)\nusing this:\n  \\<exists>r r'.\n     M = Rep_resumption r \\<and> N = Rep_resumption r' \\<and> X r r'\n\ngoal (1 subgoal):\n 1. M = N", "proof(coinduct rule: Eq_RESUMPTION_I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "case (Eq_RESUMPTION M N)"], ["proof (state)\nthis:\n  \\<exists>r r'.\n     M = Rep_resumption r \\<and> N = Rep_resumption r' \\<and> X r r'\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "then"], ["proof (chain)\npicking this:\n  \\<exists>r r'.\n     M = Rep_resumption r \\<and> N = Rep_resumption r' \\<and> X r r'", "obtain r r' where [simp]: \"M = Rep_resumption r\" \"N = Rep_resumption r'\"\n      and \"X r r'\""], ["proof (prove)\nusing this:\n  \\<exists>r r'.\n     M = Rep_resumption r \\<and> N = Rep_resumption r' \\<and> X r r'\n\ngoal (1 subgoal):\n 1. (\\<And>r r'.\n        \\<lbrakk>M = Rep_resumption r; N = Rep_resumption r';\n         X r r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  M = Rep_resumption r\n  N = Rep_resumption r'\n  X r r'\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "{"], ["proof (state)\nthis:\n  M = Rep_resumption r\n  N = Rep_resumption r'\n  X r r'\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "assume \"\\<exists>a. r = Terminal a \\<and> r' = Terminal a\""], ["proof (state)\nthis:\n  \\<exists>a. r = Terminal a \\<and> r' = Terminal a\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "hence ?EqTerminal"], ["proof (prove)\nusing this:\n  \\<exists>a. r = Terminal a \\<and> r' = Terminal a\n\ngoal (1 subgoal):\n 1. \\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a", "by(auto simp add: Rep_resumption_constructors)"], ["proof (state)\nthis:\n  \\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "hence ?case"], ["proof (prove)\nusing this:\n  \\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>r r'.\n             R = Rep_resumption r \\<and>\n             R' = Rep_resumption r' \\<and> X r r') \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>r r'.\n                rs d = Rep_resumption r \\<and>\n                rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", ".."], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "}"], ["proof (state)\nthis:\n  \\<exists>a. r = Terminal a \\<and> r' = Terminal a \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "moreover"], ["proof (state)\nthis:\n  \\<exists>a. r = Terminal a \\<and> r' = Terminal a \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "{"], ["proof (state)\nthis:\n  \\<exists>a. r = Terminal a \\<and> r' = Terminal a \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "assume \"\\<exists>R R' b. r = Linear b R \\<and> r' = Linear b R' \\<and> (X R R' \\<or> R = R')\""], ["proof (state)\nthis:\n  \\<exists>R R' b.\n     r = Linear b R \\<and> r' = Linear b R' \\<and> (X R R' \\<or> R = R')\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "hence ?EqLinear"], ["proof (prove)\nusing this:\n  \\<exists>R R' b.\n     r = Linear b R \\<and> r' = Linear b R' \\<and> (X R R' \\<or> R = R')\n\ngoal (1 subgoal):\n 1. \\<exists>R R' b.\n       M = LINEAR b R \\<and>\n       N = LINEAR b R' \\<and>\n       ((\\<exists>r r'.\n            R = Rep_resumption r \\<and>\n            R' = Rep_resumption r' \\<and> X r r') \\<or>\n        Eq_RESUMPTION R R')", "by(clarsimp simp add: Rep_resumption_constructors Eq_RESUMPTION_eq Rep_resumption_inject Rep_resumption)"], ["proof (state)\nthis:\n  \\<exists>R R' b.\n     M = LINEAR b R \\<and>\n     N = LINEAR b R' \\<and>\n     ((\\<exists>r r'.\n          R = Rep_resumption r \\<and>\n          R' = Rep_resumption r' \\<and> X r r') \\<or>\n      Eq_RESUMPTION R R')\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "hence ?case"], ["proof (prove)\nusing this:\n  \\<exists>R R' b.\n     M = LINEAR b R \\<and>\n     N = LINEAR b R' \\<and>\n     ((\\<exists>r r'.\n          R = Rep_resumption r \\<and>\n          R' = Rep_resumption r' \\<and> X r r') \\<or>\n      Eq_RESUMPTION R R')\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>r r'.\n             R = Rep_resumption r \\<and>\n             R' = Rep_resumption r' \\<and> X r r') \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>r r'.\n                rs d = Rep_resumption r \\<and>\n                rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "}"], ["proof (state)\nthis:\n  \\<exists>R R' b.\n     r = Linear b R \\<and>\n     r' = Linear b R' \\<and> (X R R' \\<or> R = R') \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "moreover"], ["proof (state)\nthis:\n  \\<exists>R R' b.\n     r = Linear b R \\<and>\n     r' = Linear b R' \\<and> (X R R' \\<or> R = R') \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "{"], ["proof (state)\nthis:\n  \\<exists>R R' b.\n     r = Linear b R \\<and>\n     r' = Linear b R' \\<and> (X R R' \\<or> R = R') \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "assume \"\\<exists>rs rs' c. r = Branch c rs \\<and> r' = Branch c rs' \\<and> (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d)\""], ["proof (state)\nthis:\n  \\<exists>rs rs' c.\n     r = Branch c rs \\<and>\n     r' = Branch c rs' \\<and>\n     (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d)\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "hence ?EqBranch"], ["proof (prove)\nusing this:\n  \\<exists>rs rs' c.\n     r = Branch c rs \\<and>\n     r' = Branch c rs' \\<and>\n     (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d)\n\ngoal (1 subgoal):\n 1. \\<exists>rs rs' c.\n       M = BRANCH c rs \\<and>\n       N = BRANCH c rs' \\<and>\n       (\\<forall>d.\n           (\\<exists>r r'.\n               rs d = Rep_resumption r \\<and>\n               rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n           Eq_RESUMPTION (rs d) (rs' d))", "by(clarsimp simp add: Rep_resumption_constructors Eq_RESUMPTION_eq Rep_resumption_inject Rep_resumption)"], ["proof (state)\nthis:\n  \\<exists>rs rs' c.\n     M = BRANCH c rs \\<and>\n     N = BRANCH c rs' \\<and>\n     (\\<forall>d.\n         (\\<exists>r r'.\n             rs d = Rep_resumption r \\<and>\n             rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n         Eq_RESUMPTION (rs d) (rs' d))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "hence ?case"], ["proof (prove)\nusing this:\n  \\<exists>rs rs' c.\n     M = BRANCH c rs \\<and>\n     N = BRANCH c rs' \\<and>\n     (\\<forall>d.\n         (\\<exists>r r'.\n             rs d = Rep_resumption r \\<and>\n             rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n         Eq_RESUMPTION (rs d) (rs' d))\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>r r'.\n             R = Rep_resumption r \\<and>\n             R' = Rep_resumption r' \\<and> X r r') \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>r r'.\n                rs d = Rep_resumption r \\<and>\n                rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "}"], ["proof (state)\nthis:\n  \\<exists>rs rs' c.\n     r = Branch c rs \\<and>\n     r' = Branch c rs' \\<and>\n     (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d) \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>ra r'a.\n          r = Rep_resumption ra \\<and>\n          r' = Rep_resumption r'a \\<and> X ra r'a \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>r r'.\n                R = Rep_resumption r \\<and>\n                R' = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>r r'.\n                   rs d = Rep_resumption r \\<and>\n                   rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>a. r = Terminal a \\<and> r' = Terminal a \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n  \\<exists>R R' b.\n     r = Linear b R \\<and>\n     r' = Linear b R' \\<and> (X R R' \\<or> R = R') \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n  \\<exists>rs rs' c.\n     r = Branch c rs \\<and>\n     r' = Branch c rs' \\<and>\n     (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d) \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>a. r = Terminal a \\<and> r' = Terminal a \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n  \\<exists>R R' b.\n     r = Linear b R \\<and>\n     r' = Linear b R' \\<and> (X R R' \\<or> R = R') \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n  \\<exists>rs rs' c.\n     r = Branch c rs \\<and>\n     r' = Branch c rs' \\<and>\n     (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d) \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>r r'.\n             R = Rep_resumption r \\<and>\n             R' = Rep_resumption r' \\<and> X r r') \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>r r'.\n                rs d = Rep_resumption r \\<and>\n                rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", "using step[OF \\<open>X r r'\\<close>]"], ["proof (prove)\nusing this:\n  \\<exists>a. r = Terminal a \\<and> r' = Terminal a \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n  \\<exists>R R' b.\n     r = Linear b R \\<and>\n     r' = Linear b R' \\<and> (X R R' \\<or> R = R') \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n  \\<exists>rs rs' c.\n     r = Branch c rs \\<and>\n     r' = Branch c rs' \\<and>\n     (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d) \\<Longrightarrow>\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n  (\\<exists>a. r = Terminal a \\<and> r' = Terminal a) \\<or>\n  (\\<exists>R R' b.\n      r = Linear b R \\<and>\n      r' = Linear b R' \\<and> (X R R' \\<or> R = R')) \\<or>\n  (\\<exists>rs rs' c.\n      r = Branch c rs \\<and>\n      r' = Branch c rs' \\<and>\n      (\\<forall>d. X (rs d) (rs' d) \\<or> rs d = rs' d))\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>r r'.\n             R = Rep_resumption r \\<and>\n             R' = Rep_resumption r' \\<and> X r r') \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>r r'.\n                rs d = Rep_resumption r \\<and>\n                rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>r r'.\n           R = Rep_resumption r \\<and>\n           R' = Rep_resumption r' \\<and> X r r') \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>r r'.\n              rs d = Rep_resumption r \\<and>\n              rs' d = Rep_resumption r' \\<and> X r r') \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M = N\n\ngoal (1 subgoal):\n 1. r = r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = N\n\ngoal (1 subgoal):\n 1. r = r'", "unfolding M_def N_def"], ["proof (prove)\nusing this:\n  Rep_resumption r = Rep_resumption r'\n\ngoal (1 subgoal):\n 1. r = r'", "by(simp add: Rep_resumption_inject)"], ["proof (state)\nthis:\n  r = r'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Finality of \\<open>resumption\\<close>: Uniqueness of functions defined by corecursion.\n\\<close>"], ["", "lemma equals_RESUMPTION_corec:\n  assumes h: \"\\<And>x. h x = (case f x of Terminal_corec a \\<Rightarrow> TERMINAL a\n                                   | Linear_corec b x' \\<Rightarrow> LINEAR b (h x')\n                                   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h (xs d))\n                                   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\"\n  shows \"h = RESUMPTION_corec f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = RESUMPTION_corec f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. h x = RESUMPTION_corec f x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. h x = RESUMPTION_corec f x", "define h' where \"h' = RESUMPTION_corec f\""], ["proof (state)\nthis:\n  h' = RESUMPTION_corec f\n\ngoal (1 subgoal):\n 1. \\<And>x. h x = RESUMPTION_corec f x", "have h': \"\\<And>x. h' x = (case f x of Terminal_corec a \\<Rightarrow> TERMINAL a\n                                   | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n                                   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n                                   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       h' x =\n       (case f x of Terminal_corec a \\<Rightarrow> TERMINAL a\n        | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n        | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n        | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "unfolding h'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       RESUMPTION_corec f x =\n       (case f x of Terminal_corec a \\<Rightarrow> TERMINAL a\n        | Linear_corec b x' \\<Rightarrow> LINEAR b (RESUMPTION_corec f x')\n        | Branch_corec c xs \\<Rightarrow>\n            BRANCH c (\\<lambda>d. RESUMPTION_corec f (xs d))\n        | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "by(simp add: RESUMPTION_corec)"], ["proof (state)\nthis:\n  h' ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n\ngoal (1 subgoal):\n 1. \\<And>x. h x = RESUMPTION_corec f x", "define M N where \"M = h x\" and \"N = h' x\""], ["proof (state)\nthis:\n  M = h x\n  N = h' x\n\ngoal (1 subgoal):\n 1. \\<And>x. h x = RESUMPTION_corec f x", "hence \"\\<exists>x. M = h x \\<and> N = h' x\""], ["proof (prove)\nusing this:\n  M = h x\n  N = h' x\n\ngoal (1 subgoal):\n 1. \\<exists>x. M = h x \\<and> N = h' x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. M = h x \\<and> N = h' x\n\ngoal (1 subgoal):\n 1. \\<And>x. h x = RESUMPTION_corec f x", "thus \"M = N\""], ["proof (prove)\nusing this:\n  \\<exists>x. M = h x \\<and> N = h' x\n\ngoal (1 subgoal):\n 1. M = N", "proof(coinduct rule: Eq_RESUMPTION_I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>x. r = h x \\<and> r' = h' x \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "case (Eq_RESUMPTION M N)"], ["proof (state)\nthis:\n  \\<exists>x. M = h x \\<and> N = h' x\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>x. r = h x \\<and> r' = h' x \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. M = h x \\<and> N = h' x", "obtain x where [simp]: \"M = h x\" \"N = h' x\""], ["proof (prove)\nusing this:\n  \\<exists>x. M = h x \\<and> N = h' x\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>M = h x; N = h' x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  M = h x\n  N = h' x\n\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<exists>x. r = h x \\<and> r' = h' x \\<Longrightarrow>\n       (\\<exists>a. r = TERMINAL a \\<and> r' = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           r = LINEAR b R \\<and>\n           r' = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           r = BRANCH c rs \\<and>\n           r' = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", "proof(cases \"f x\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       f x = Terminal_corec x1 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x21 x22.\n       f x = Linear_corec x21 x22 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 3. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 4. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "case (Terminal_corec a)"], ["proof (state)\nthis:\n  f x = Terminal_corec a\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       f x = Terminal_corec x1 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x21 x22.\n       f x = Linear_corec x21 x22 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 3. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 4. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "with h h'"], ["proof (chain)\npicking this:\n  h ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  h' ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  f x = Terminal_corec a", "have ?EqTerminal"], ["proof (prove)\nusing this:\n  h ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  h' ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  f x = Terminal_corec a\n\ngoal (1 subgoal):\n 1. \\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a", "by simp"], ["proof (state)\nthis:\n  \\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       f x = Terminal_corec x1 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x21 x22.\n       f x = Linear_corec x21 x22 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 3. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 4. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", ".."], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       f x = Linear_corec x21 x22 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 3. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       f x = Linear_corec x21 x22 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 3. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "case (Linear_corec b x')"], ["proof (state)\nthis:\n  f x = Linear_corec b x'\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       f x = Linear_corec x21 x22 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 3. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "with h h'"], ["proof (chain)\npicking this:\n  h ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  h' ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  f x = Linear_corec b x'", "have ?EqLinear"], ["proof (prove)\nusing this:\n  h ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  h' ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  f x = Linear_corec b x'\n\ngoal (1 subgoal):\n 1. \\<exists>R R' b.\n       M = LINEAR b R \\<and>\n       N = LINEAR b R' \\<and>\n       ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or> Eq_RESUMPTION R R')", "by auto"], ["proof (state)\nthis:\n  \\<exists>R R' b.\n     M = LINEAR b R \\<and>\n     N = LINEAR b R' \\<and>\n     ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or> Eq_RESUMPTION R R')\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22.\n       f x = Linear_corec x21 x22 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 3. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>R R' b.\n     M = LINEAR b R \\<and>\n     N = LINEAR b R' \\<and>\n     ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or> Eq_RESUMPTION R R')\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "case (Branch_corec c xs)"], ["proof (state)\nthis:\n  f x = Branch_corec c xs\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "with h h'"], ["proof (chain)\npicking this:\n  h ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  h' ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  f x = Branch_corec c xs", "have ?EqBranch"], ["proof (prove)\nusing this:\n  h ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  h' ?x =\n  (case f ?x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (h' x')\n   | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. h' (xs d))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n  f x = Branch_corec c xs\n\ngoal (1 subgoal):\n 1. \\<exists>rs rs' c.\n       M = BRANCH c rs \\<and>\n       N = BRANCH c rs' \\<and>\n       (\\<forall>d.\n           (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n           Eq_RESUMPTION (rs d) (rs' d))", "by auto"], ["proof (state)\nthis:\n  \\<exists>rs rs' c.\n     M = BRANCH c rs \\<and>\n     N = BRANCH c rs' \\<and>\n     (\\<forall>d.\n         (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n         Eq_RESUMPTION (rs d) (rs' d))\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       f x = Branch_corec x31 x32 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))\n 2. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>rs rs' c.\n     M = BRANCH c rs \\<and>\n     N = BRANCH c rs' \\<and>\n     (\\<forall>d.\n         (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n         Eq_RESUMPTION (rs d) (rs' d))\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "case (Resumption_corec r)"], ["proof (state)\nthis:\n  f x = Resumption_corec r\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       f x = Resumption_corec x4 \\<Longrightarrow>\n       (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n       (\\<exists>R R' b.\n           M = LINEAR b R \\<and>\n           N = LINEAR b R' \\<and>\n           ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n            Eq_RESUMPTION R R')) \\<or>\n       (\\<exists>rs rs' c.\n           M = BRANCH c rs \\<and>\n           N = BRANCH c rs' \\<and>\n           (\\<forall>d.\n               (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n               Eq_RESUMPTION (rs d) (rs' d)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  f x = Resumption_corec r\n\ngoal (1 subgoal):\n 1. (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n    (\\<exists>R R' b.\n        M = LINEAR b R \\<and>\n        N = LINEAR b R' \\<and>\n        ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n         Eq_RESUMPTION R R')) \\<or>\n    (\\<exists>rs rs' c.\n        M = BRANCH c rs \\<and>\n        N = BRANCH c rs' \\<and>\n        (\\<forall>d.\n            (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n            Eq_RESUMPTION (rs d) (rs' d)))", "by(cases r)(simp_all add: h h' Rep_resumption_constructors Eq_RESUMPTION_refl Rep_resumption)"], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>a. M = TERMINAL a \\<and> N = TERMINAL a) \\<or>\n  (\\<exists>R R' b.\n      M = LINEAR b R \\<and>\n      N = LINEAR b R' \\<and>\n      ((\\<exists>x. R = h x \\<and> R' = h' x) \\<or>\n       Eq_RESUMPTION R R')) \\<or>\n  (\\<exists>rs rs' c.\n      M = BRANCH c rs \\<and>\n      N = BRANCH c rs' \\<and>\n      (\\<forall>d.\n          (\\<exists>x. rs d = h x \\<and> rs' d = h' x) \\<or>\n          Eq_RESUMPTION (rs d) (rs' d)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M = N\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma equals_resumption_corec:\n  assumes h: \"\\<And>x. h x = (case f x of Terminal_corec a \\<Rightarrow> Terminal a\n                                   | Linear_corec b x' \\<Rightarrow> Linear b (h x')\n                                   | Branch_corec c xs \\<Rightarrow> Branch c (\\<lambda>d. h (xs d))\n                                   | Resumption_corec r \\<Rightarrow> r)\"\n  shows \"h = resumption_corec f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = resumption_corec f", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. h x = resumption_corec f x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. h x = resumption_corec f x", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. h x = resumption_corec f x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. h x = resumption_corec f x", "from h[of x]"], ["proof (chain)\npicking this:\n  h x =\n  (case f x of Terminal_corec a \\<Rightarrow> Terminal a\n   | Linear_corec b x' \\<Rightarrow> Linear b (h x')\n   | Branch_corec c xs \\<Rightarrow> Branch c (\\<lambda>d. h (xs d))\n   | Resumption_corec r \\<Rightarrow> r)", "have \"Rep_resumption (h x) =\n      (case f x of Terminal_corec a \\<Rightarrow> TERMINAL a\n                | Linear_corec b x' \\<Rightarrow> LINEAR b (Rep_resumption (h x'))\n                | Branch_corec c xs \\<Rightarrow> BRANCH c (\\<lambda>d. Rep_resumption (h (xs d)))\n                | Resumption_corec r \\<Rightarrow> Rep_resumption r)\""], ["proof (prove)\nusing this:\n  h x =\n  (case f x of Terminal_corec a \\<Rightarrow> Terminal a\n   | Linear_corec b x' \\<Rightarrow> Linear b (h x')\n   | Branch_corec c xs \\<Rightarrow> Branch c (\\<lambda>d. h (xs d))\n   | Resumption_corec r \\<Rightarrow> r)\n\ngoal (1 subgoal):\n 1. Rep_resumption (h x) =\n    (case f x of Terminal_corec a \\<Rightarrow> TERMINAL a\n     | Linear_corec b x' \\<Rightarrow> LINEAR b (Rep_resumption (h x'))\n     | Branch_corec c xs \\<Rightarrow>\n         BRANCH c (\\<lambda>d. Rep_resumption (h (xs d)))\n     | Resumption_corec r \\<Rightarrow> Rep_resumption r)", "by(auto split: resumption_corec.split simp add: Rep_resumption_constructors)"], ["proof (state)\nthis:\n  Rep_resumption (h x) =\n  (case f x of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (Rep_resumption (h x'))\n   | Branch_corec c xs \\<Rightarrow>\n       BRANCH c (\\<lambda>d. Rep_resumption (h (xs d)))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n\ngoal (1 subgoal):\n 1. \\<And>x. h x = resumption_corec f x", "}"], ["proof (state)\nthis:\n  Rep_resumption (h ?xa2) =\n  (case f ?xa2 of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (Rep_resumption (h x'))\n   | Branch_corec c xs \\<Rightarrow>\n       BRANCH c (\\<lambda>d. Rep_resumption (h (xs d)))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n\ngoal (1 subgoal):\n 1. \\<And>x. h x = resumption_corec f x", "hence eq: \"(\\<lambda>x. Rep_resumption (h x)) = RESUMPTION_corec f\""], ["proof (prove)\nusing this:\n  Rep_resumption (h ?xa2) =\n  (case f ?xa2 of Terminal_corec a \\<Rightarrow> TERMINAL a\n   | Linear_corec b x' \\<Rightarrow> LINEAR b (Rep_resumption (h x'))\n   | Branch_corec c xs \\<Rightarrow>\n       BRANCH c (\\<lambda>d. Rep_resumption (h (xs d)))\n   | Resumption_corec r \\<Rightarrow> Rep_resumption r)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. Rep_resumption (h x)) = RESUMPTION_corec f", "by(rule equals_RESUMPTION_corec)"], ["proof (state)\nthis:\n  (\\<lambda>x. Rep_resumption (h x)) = RESUMPTION_corec f\n\ngoal (1 subgoal):\n 1. \\<And>x. h x = resumption_corec f x", "hence \"Abs_resumption (Rep_resumption (h x)) = Abs_resumption (RESUMPTION_corec f x)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. Rep_resumption (h x)) = RESUMPTION_corec f\n\ngoal (1 subgoal):\n 1. Abs_resumption (Rep_resumption (h x)) =\n    Abs_resumption (RESUMPTION_corec f x)", "by(subst (asm) fun_eq_iff)(auto)"], ["proof (state)\nthis:\n  Abs_resumption (Rep_resumption (h x)) =\n  Abs_resumption (RESUMPTION_corec f x)\n\ngoal (1 subgoal):\n 1. \\<And>x. h x = resumption_corec f x", "from this[symmetric]"], ["proof (chain)\npicking this:\n  Abs_resumption (RESUMPTION_corec f x) =\n  Abs_resumption (Rep_resumption (h x))", "show \"h x = resumption_corec f x\""], ["proof (prove)\nusing this:\n  Abs_resumption (RESUMPTION_corec f x) =\n  Abs_resumption (Rep_resumption (h x))\n\ngoal (1 subgoal):\n 1. h x = resumption_corec f x", "unfolding resumption_corec_def"], ["proof (prove)\nusing this:\n  Abs_resumption (RESUMPTION_corec f x) =\n  Abs_resumption (Rep_resumption (h x))\n\ngoal (1 subgoal):\n 1. h x = Abs_resumption (RESUMPTION_corec f x)", "by(simp add: Rep_resumption_inverse)"], ["proof (state)\nthis:\n  h x = resumption_corec f x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}