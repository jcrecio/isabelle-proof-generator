{"file_name": "/home/qj213/afp-2021-10-22/thys/Coinductive/Examples/Koenigslemma.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Coinductive", "problem_names": ["lemma connectedD: \"connected graph \\<Longrightarrow> \\<exists>xs. llist_of (n # xs @ [n']) \\<in> paths graph\"", "lemma paths_LConsD: \n  assumes \"LCons x xs \\<in> paths graph\"\n  shows \"xs \\<in> paths graph\"", "lemma paths_lappendD1:\n  assumes \"lappend xs ys \\<in> paths graph\"\n  shows \"xs \\<in> paths graph\"", "lemma paths_lappendD2:\n  assumes \"lfinite xs\"\n  and \"lappend xs ys \\<in> paths graph\"\n  shows \"ys \\<in> paths graph\"", "lemma path_avoid_node:\n  assumes path: \"LCons n xs \\<in> paths graph\"\n  and set: \"x \\<in> lset xs\"\n  and n_neq_x: \"n \\<noteq> x\"\n  shows \"\\<exists>xs'. LCons n xs' \\<in> paths graph \\<and> lset xs' \\<subseteq> lset xs \\<and> x \\<in> lset xs' \\<and> n \\<notin> lset xs'\"", "lemma reachable_via_subset_unfold:\n  \"reachable_via graph ns n \\<subseteq> (\\<Union>n' \\<in> {n'. graph n n'} \\<inter> ns. insert n' (reachable_via graph (ns - {n'}) n'))\"\n  (is \"?lhs \\<subseteq> ?rhs\")", "theorem koenigslemma:\n  fixes graph :: \"'node graph\"\n  and n :: 'node\n  assumes connected: \"connected graph\"\n  and infinite: \"infinite (UNIV :: 'node set)\"\n  and finite_branching: \"\\<And>n. finite {n'. graph n n'}\"\n  shows \"\\<exists>xs \\<in> paths graph. n \\<in> lset xs \\<and> \\<not> lfinite xs \\<and> ldistinct xs\""], "translations": [["", "lemma connectedD: \"connected graph \\<Longrightarrow> \\<exists>xs. llist_of (n # xs @ [n']) \\<in> paths graph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Koenigslemma.connected graph \\<Longrightarrow>\n    \\<exists>xs. llist_of (n # xs @ [n']) \\<in> paths graph", "unfolding connected_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n n'.\n       \\<exists>xs.\n          llist_of (n # xs @ [n']) \\<in> paths graph \\<Longrightarrow>\n    \\<exists>xs. llist_of (n # xs @ [n']) \\<in> paths graph", "by blast"], ["", "lemma paths_LConsD: \n  assumes \"LCons x xs \\<in> paths graph\"\n  shows \"xs \\<in> paths graph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> paths graph", "using assms"], ["proof (prove)\nusing this:\n  LCons x xs \\<in> paths graph\n\ngoal (1 subgoal):\n 1. xs \\<in> paths graph", "by(coinduct)(fastforce elim: paths.cases del: disjCI)"], ["", "lemma paths_lappendD1:\n  assumes \"lappend xs ys \\<in> paths graph\"\n  shows \"xs \\<in> paths graph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> paths graph", "using assms"], ["proof (prove)\nusing this:\n  lappend xs ys \\<in> paths graph\n\ngoal (1 subgoal):\n 1. xs \\<in> paths graph", "apply coinduct"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       lappend x ys \\<in> paths graph \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           (lappend (LCons y xs) ys \\<in> paths graph \\<or>\n            LCons y xs \\<in> paths graph))", "apply(erule paths.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       lappend x ys = LNil \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           (lappend (LCons y xs) ys \\<in> paths graph \\<or>\n            LCons y xs \\<in> paths graph))\n 2. \\<And>x xa.\n       lappend x ys = LCons xa LNil \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           (lappend (LCons y xs) ys \\<in> paths graph \\<or>\n            LCons y xs \\<in> paths graph))\n 3. \\<And>x xa y xs.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply(simp add: lappend_eq_LNil_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       lappend x ys = LCons xa LNil \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           (lappend (LCons y xs) ys \\<in> paths graph \\<or>\n            LCons y xs \\<in> paths graph))\n 2. \\<And>x xa y xs.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply(case_tac x)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>lappend x ys = LCons xa LNil; x = LNil\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))\n 2. \\<And>x xa x21 x22.\n       \\<lbrakk>lappend x ys = LCons xa LNil; x = LCons x21 x22\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))\n 3. \\<And>x xa y xs.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa x21 x22.\n       \\<lbrakk>lappend x ys = LCons xa LNil; x = LCons x21 x22\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))\n 2. \\<And>x xa y xs.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply(simp add: lappend_eq_LNil_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa y xs.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply(case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa y xs.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph; x = LNil\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))\n 2. \\<And>x xa y xs x21 x22.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph; x = LCons x21 x22\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa y xs x21 x22.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph; x = LCons x21 x22\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply(case_tac x22)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa y xs x21 x22.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph; x = LCons x21 x22; x22 = LNil\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))\n 2. \\<And>x xa y xs x21 x22 x21a x22a.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph; x = LCons x21 x22;\n        x22 = LCons x21a x22a\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa y xs x21 x22 x21a x22a.\n       \\<lbrakk>lappend x ys = LCons xa (LCons y xs); graph xa y;\n        LCons y xs \\<in> paths graph; x = LCons x21 x22;\n        x22 = LCons x21a x22a\\<rbrakk>\n       \\<Longrightarrow> x = LNil \\<or>\n                         (\\<exists>xa. x = LCons xa LNil) \\<or>\n                         (\\<exists>xa y xs.\n                             x = LCons xa (LCons y xs) \\<and>\n                             graph xa y \\<and>\n                             (lappend (LCons y xs) ys\n                              \\<in> paths graph \\<or>\n                              LCons y xs \\<in> paths graph))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma paths_lappendD2:\n  assumes \"lfinite xs\"\n  and \"lappend xs ys \\<in> paths graph\"\n  shows \"ys \\<in> paths graph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<in> paths graph", "using assms"], ["proof (prove)\nusing this:\n  lfinite xs\n  lappend xs ys \\<in> paths graph\n\ngoal (1 subgoal):\n 1. ys \\<in> paths graph", "by induct(fastforce elim: paths.cases intro: paths.intros)+"], ["", "lemma path_avoid_node:\n  assumes path: \"LCons n xs \\<in> paths graph\"\n  and set: \"x \\<in> lset xs\"\n  and n_neq_x: \"n \\<noteq> x\"\n  shows \"\\<exists>xs'. LCons n xs' \\<in> paths graph \\<and> lset xs' \\<subseteq> lset xs \\<and> x \\<in> lset xs' \\<and> n \\<notin> lset xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "from set"], ["proof (chain)\npicking this:\n  x \\<in> lset xs", "obtain xs' xs'' where \"lfinite xs'\" \n    and xs: \"xs = lappend xs' (LCons x xs'')\" \n    and \"x \\<notin> lset xs'\""], ["proof (prove)\nusing this:\n  x \\<in> lset xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs' xs''.\n        \\<lbrakk>lfinite xs'; xs = lappend xs' (LCons x xs'');\n         x \\<notin> lset xs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: split_llist_first)"], ["proof (state)\nthis:\n  lfinite xs'\n  xs = lappend xs' (LCons x xs'')\n  x \\<notin> lset xs'\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "proof(cases \"n \\<in> lset xs'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n 2. n \\<notin> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "case False"], ["proof (state)\nthis:\n  n \\<notin> lset xs'\n\ngoal (2 subgoals):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n 2. n \\<notin> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "let ?xs' = \"lappend xs' (LCons x LNil)\""], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n 2. n \\<notin> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "from xs path"], ["proof (chain)\npicking this:\n  xs = lappend xs' (LCons x xs'')\n  LCons n xs \\<in> paths graph", "have \"lappend (LCons n (lappend xs' (LCons x LNil))) xs'' \\<in> paths graph\""], ["proof (prove)\nusing this:\n  xs = lappend xs' (LCons x xs'')\n  LCons n xs \\<in> paths graph\n\ngoal (1 subgoal):\n 1. lappend (LCons n (lappend xs' (LCons x LNil))) xs'' \\<in> paths graph", "by(simp add: lappend_assoc)"], ["proof (state)\nthis:\n  lappend (LCons n (lappend xs' (LCons x LNil))) xs'' \\<in> paths graph\n\ngoal (2 subgoals):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n 2. n \\<notin> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "hence \"LCons n ?xs' \\<in> paths graph\""], ["proof (prove)\nusing this:\n  lappend (LCons n (lappend xs' (LCons x LNil))) xs'' \\<in> paths graph\n\ngoal (1 subgoal):\n 1. LCons n (lappend xs' (LCons x LNil)) \\<in> paths graph", "by(rule paths_lappendD1)"], ["proof (state)\nthis:\n  LCons n (lappend xs' (LCons x LNil)) \\<in> paths graph\n\ngoal (2 subgoals):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n 2. n \\<notin> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "moreover"], ["proof (state)\nthis:\n  LCons n (lappend xs' (LCons x LNil)) \\<in> paths graph\n\ngoal (2 subgoals):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n 2. n \\<notin> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "have \"x \\<in> lset ?xs'\" \"lset ?xs' \\<subseteq> lset xs\" \"n \\<notin> lset ?xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> lset (lappend xs' (LCons x LNil)) &&&\n    lset (lappend xs' (LCons x LNil)) \\<subseteq> lset xs &&&\n    n \\<notin> lset (lappend xs' (LCons x LNil))", "using xs False \\<open>lfinite xs'\\<close> n_neq_x"], ["proof (prove)\nusing this:\n  xs = lappend xs' (LCons x xs'')\n  n \\<notin> lset xs'\n  lfinite xs'\n  n \\<noteq> x\n\ngoal (1 subgoal):\n 1. x \\<in> lset (lappend xs' (LCons x LNil)) &&&\n    lset (lappend xs' (LCons x LNil)) \\<subseteq> lset xs &&&\n    n \\<notin> lset (lappend xs' (LCons x LNil))", "by auto"], ["proof (state)\nthis:\n  x \\<in> lset (lappend xs' (LCons x LNil))\n  lset (lappend xs' (LCons x LNil)) \\<subseteq> lset xs\n  n \\<notin> lset (lappend xs' (LCons x LNil))\n\ngoal (2 subgoals):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n 2. n \\<notin> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "ultimately"], ["proof (chain)\npicking this:\n  LCons n (lappend xs' (LCons x LNil)) \\<in> paths graph\n  x \\<in> lset (lappend xs' (LCons x LNil))\n  lset (lappend xs' (LCons x LNil)) \\<subseteq> lset xs\n  n \\<notin> lset (lappend xs' (LCons x LNil))", "show ?thesis"], ["proof (prove)\nusing this:\n  LCons n (lappend xs' (LCons x LNil)) \\<in> paths graph\n  x \\<in> lset (lappend xs' (LCons x LNil))\n  lset (lappend xs' (LCons x LNil)) \\<subseteq> lset xs\n  n \\<notin> lset (lappend xs' (LCons x LNil))\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "by blast"], ["proof (state)\nthis:\n  \\<exists>xs'.\n     LCons n xs' \\<in> paths graph \\<and>\n     lset xs' \\<subseteq> lset xs \\<and>\n     x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "case True"], ["proof (state)\nthis:\n  n \\<in> lset xs'\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "from \\<open>lfinite xs'\\<close>"], ["proof (chain)\npicking this:\n  lfinite xs'", "obtain XS' where xs': \"xs' = llist_of XS'\""], ["proof (prove)\nusing this:\n  lfinite xs'\n\ngoal (1 subgoal):\n 1. (\\<And>XS'.\n        xs' = llist_of XS' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lfinite_eq_range_llist_of"], ["proof (prove)\nusing this:\n  xs' \\<in> range llist_of\n\ngoal (1 subgoal):\n 1. (\\<And>XS'.\n        xs' = llist_of XS' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xs' = llist_of XS'\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "with True"], ["proof (chain)\npicking this:\n  n \\<in> lset xs'\n  xs' = llist_of XS'", "have \"n \\<in> set XS'\""], ["proof (prove)\nusing this:\n  n \\<in> lset xs'\n  xs' = llist_of XS'\n\ngoal (1 subgoal):\n 1. n \\<in> set XS'", "by simp"], ["proof (state)\nthis:\n  n \\<in> set XS'\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "from split_list_last[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>ys zs. XS' = ys @ n # zs \\<and> n \\<notin> set zs", "obtain ys zs where XS': \"XS' = ys @ n # zs\"\n      and \"n \\<notin> set zs\""], ["proof (prove)\nusing this:\n  \\<exists>ys zs. XS' = ys @ n # zs \\<and> n \\<notin> set zs\n\ngoal (1 subgoal):\n 1. (\\<And>ys zs.\n        \\<lbrakk>XS' = ys @ n # zs; n \\<notin> set zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  XS' = ys @ n # zs\n  n \\<notin> set zs\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "let ?xs' = \"lappend (llist_of zs) (LCons x LNil)\""], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "have \"lfinite (LCons n (llist_of ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfinite (LCons n (llist_of ys))", "by simp"], ["proof (state)\nthis:\n  lfinite (LCons n (llist_of ys))\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "moreover"], ["proof (state)\nthis:\n  lfinite (LCons n (llist_of ys))\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "from xs xs' XS' path"], ["proof (chain)\npicking this:\n  xs = lappend xs' (LCons x xs'')\n  xs' = llist_of XS'\n  XS' = ys @ n # zs\n  LCons n xs \\<in> paths graph", "have \"lappend (LCons n (llist_of ys)) (lappend (LCons n ?xs') xs'') \\<in> paths graph\""], ["proof (prove)\nusing this:\n  xs = lappend xs' (LCons x xs'')\n  xs' = llist_of XS'\n  XS' = ys @ n # zs\n  LCons n xs \\<in> paths graph\n\ngoal (1 subgoal):\n 1. lappend (LCons n (llist_of ys))\n     (lappend (LCons n (lappend (llist_of zs) (LCons x LNil))) xs'')\n    \\<in> paths graph", "by(simp add: lappend_assoc)(metis lappend_assoc lappend_llist_of_LCons lappend_llist_of_llist_of llist_of.simps(2))"], ["proof (state)\nthis:\n  lappend (LCons n (llist_of ys))\n   (lappend (LCons n (lappend (llist_of zs) (LCons x LNil))) xs'')\n  \\<in> paths graph\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "ultimately"], ["proof (chain)\npicking this:\n  lfinite (LCons n (llist_of ys))\n  lappend (LCons n (llist_of ys))\n   (lappend (LCons n (lappend (llist_of zs) (LCons x LNil))) xs'')\n  \\<in> paths graph", "have \"lappend (LCons n ?xs') xs'' \\<in> paths graph\""], ["proof (prove)\nusing this:\n  lfinite (LCons n (llist_of ys))\n  lappend (LCons n (llist_of ys))\n   (lappend (LCons n (lappend (llist_of zs) (LCons x LNil))) xs'')\n  \\<in> paths graph\n\ngoal (1 subgoal):\n 1. lappend (LCons n (lappend (llist_of zs) (LCons x LNil))) xs''\n    \\<in> paths graph", "by(rule paths_lappendD2)"], ["proof (state)\nthis:\n  lappend (LCons n (lappend (llist_of zs) (LCons x LNil))) xs''\n  \\<in> paths graph\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "hence \"LCons n ?xs' \\<in> paths graph\""], ["proof (prove)\nusing this:\n  lappend (LCons n (lappend (llist_of zs) (LCons x LNil))) xs''\n  \\<in> paths graph\n\ngoal (1 subgoal):\n 1. LCons n (lappend (llist_of zs) (LCons x LNil)) \\<in> paths graph", "by(rule paths_lappendD1)"], ["proof (state)\nthis:\n  LCons n (lappend (llist_of zs) (LCons x LNil)) \\<in> paths graph\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "moreover"], ["proof (state)\nthis:\n  LCons n (lappend (llist_of zs) (LCons x LNil)) \\<in> paths graph\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "have \"x \\<in> lset ?xs'\" \"lset ?xs' \\<subseteq> lset xs\" \"n \\<notin> lset ?xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> lset (lappend (llist_of zs) (LCons x LNil)) &&&\n    lset (lappend (llist_of zs) (LCons x LNil)) \\<subseteq> lset xs &&&\n    n \\<notin> lset (lappend (llist_of zs) (LCons x LNil))", "using xs xs' XS' \\<open>lfinite xs'\\<close> n_neq_x \\<open>n \\<notin> set zs\\<close>"], ["proof (prove)\nusing this:\n  xs = lappend xs' (LCons x xs'')\n  xs' = llist_of XS'\n  XS' = ys @ n # zs\n  lfinite xs'\n  n \\<noteq> x\n  n \\<notin> set zs\n\ngoal (1 subgoal):\n 1. x \\<in> lset (lappend (llist_of zs) (LCons x LNil)) &&&\n    lset (lappend (llist_of zs) (LCons x LNil)) \\<subseteq> lset xs &&&\n    n \\<notin> lset (lappend (llist_of zs) (LCons x LNil))", "by auto"], ["proof (state)\nthis:\n  x \\<in> lset (lappend (llist_of zs) (LCons x LNil))\n  lset (lappend (llist_of zs) (LCons x LNil)) \\<subseteq> lset xs\n  n \\<notin> lset (lappend (llist_of zs) (LCons x LNil))\n\ngoal (1 subgoal):\n 1. n \\<in> lset xs' \\<Longrightarrow>\n    \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "ultimately"], ["proof (chain)\npicking this:\n  LCons n (lappend (llist_of zs) (LCons x LNil)) \\<in> paths graph\n  x \\<in> lset (lappend (llist_of zs) (LCons x LNil))\n  lset (lappend (llist_of zs) (LCons x LNil)) \\<subseteq> lset xs\n  n \\<notin> lset (lappend (llist_of zs) (LCons x LNil))", "show ?thesis"], ["proof (prove)\nusing this:\n  LCons n (lappend (llist_of zs) (LCons x LNil)) \\<in> paths graph\n  x \\<in> lset (lappend (llist_of zs) (LCons x LNil))\n  lset (lappend (llist_of zs) (LCons x LNil)) \\<subseteq> lset xs\n  n \\<notin> lset (lappend (llist_of zs) (LCons x LNil))\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       LCons n xs' \\<in> paths graph \\<and>\n       lset xs' \\<subseteq> lset xs \\<and>\n       x \\<in> lset xs' \\<and> n \\<notin> lset xs'", "by blast"], ["proof (state)\nthis:\n  \\<exists>xs'.\n     LCons n xs' \\<in> paths graph \\<and>\n     lset xs' \\<subseteq> lset xs \\<and>\n     x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xs'.\n     LCons n xs' \\<in> paths graph \\<and>\n     lset xs' \\<subseteq> lset xs \\<and>\n     x \\<in> lset xs' \\<and> n \\<notin> lset xs'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_via_subset_unfold:\n  \"reachable_via graph ns n \\<subseteq> (\\<Union>n' \\<in> {n'. graph n n'} \\<inter> ns. insert n' (reachable_via graph (ns - {n'}) n'))\"\n  (is \"?lhs \\<subseteq> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable_via graph ns n\n    \\<subseteq> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                    insert n' (reachable_via graph (ns - {n'}) n'))", "proof(rule subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "assume \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> reachable_via graph ns n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "then"], ["proof (chain)\npicking this:\n  x \\<in> reachable_via graph ns n", "obtain xs where path: \"LCons n xs \\<in> paths graph\"\n    and \"x \\<in> lset xs\" \"lset xs \\<subseteq> ns\""], ["proof (prove)\nusing this:\n  x \\<in> reachable_via graph ns n\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>LCons n xs \\<in> paths graph; x \\<in> lset xs;\n         lset xs \\<subseteq> ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases"], ["proof (state)\nthis:\n  LCons n xs \\<in> paths graph\n  x \\<in> lset xs\n  lset xs \\<subseteq> ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "from \\<open>x \\<in> lset xs\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> lset xs", "obtain n' xs' where xs: \"xs = LCons n' xs'\""], ["proof (prove)\nusing this:\n  x \\<in> lset xs\n\ngoal (1 subgoal):\n 1. (\\<And>n' xs'.\n        xs = LCons n' xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases xs) auto"], ["proof (state)\nthis:\n  xs = LCons n' xs'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "with path"], ["proof (chain)\npicking this:\n  LCons n xs \\<in> paths graph\n  xs = LCons n' xs'", "have \"graph n n'\""], ["proof (prove)\nusing this:\n  LCons n xs \\<in> paths graph\n  xs = LCons n' xs'\n\ngoal (1 subgoal):\n 1. graph n n'", "by cases simp_all"], ["proof (state)\nthis:\n  graph n n'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "moreover"], ["proof (state)\nthis:\n  graph n n'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "from \\<open>lset xs \\<subseteq> ns\\<close> xs"], ["proof (chain)\npicking this:\n  lset xs \\<subseteq> ns\n  xs = LCons n' xs'", "have \"n' \\<in> ns\""], ["proof (prove)\nusing this:\n  lset xs \\<subseteq> ns\n  xs = LCons n' xs'\n\ngoal (1 subgoal):\n 1. n' \\<in> ns", "by simp"], ["proof (state)\nthis:\n  n' \\<in> ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "ultimately"], ["proof (chain)\npicking this:\n  graph n n'\n  n' \\<in> ns", "have \"n' \\<in> {n'. graph n n'} \\<inter> ns\""], ["proof (prove)\nusing this:\n  graph n n'\n  n' \\<in> ns\n\ngoal (1 subgoal):\n 1. n' \\<in> {n'. graph n n'} \\<inter> ns", "by simp"], ["proof (state)\nthis:\n  n' \\<in> {n'. graph n n'} \\<inter> ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable_via graph ns n \\<Longrightarrow>\n       x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                   insert n' (reachable_via graph (ns - {n'}) n'))", "thus \"x \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  n' \\<in> {n'. graph n n'} \\<inter> ns\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n                insert n' (reachable_via graph (ns - {n'}) n'))", "proof(rule UN_I)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "show \"x \\<in> insert n' (reachable_via graph (ns - {n'}) n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "proof(cases \"x = n'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')\n 2. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "case True"], ["proof (state)\nthis:\n  x = n'\n\ngoal (2 subgoals):\n 1. x = n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')\n 2. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = n'\n\ngoal (1 subgoal):\n 1. x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "by simp"], ["proof (state)\nthis:\n  x \\<in> insert n' (reachable_via graph (ns - {n'}) n')\n\ngoal (1 subgoal):\n 1. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "case False"], ["proof (state)\nthis:\n  x \\<noteq> n'\n\ngoal (1 subgoal):\n 1. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "with xs \\<open>x \\<in> lset xs\\<close>"], ["proof (chain)\npicking this:\n  xs = LCons n' xs'\n  x \\<in> lset xs\n  x \\<noteq> n'", "have \"x \\<in> lset xs'\""], ["proof (prove)\nusing this:\n  xs = LCons n' xs'\n  x \\<in> lset xs\n  x \\<noteq> n'\n\ngoal (1 subgoal):\n 1. x \\<in> lset xs'", "by simp"], ["proof (state)\nthis:\n  x \\<in> lset xs'\n\ngoal (1 subgoal):\n 1. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "with path xs"], ["proof (chain)\npicking this:\n  LCons n xs \\<in> paths graph\n  xs = LCons n' xs'\n  x \\<in> lset xs'", "have path': \"LCons n' xs' \\<in> paths graph\""], ["proof (prove)\nusing this:\n  LCons n xs \\<in> paths graph\n  xs = LCons n' xs'\n  x \\<in> lset xs'\n\ngoal (1 subgoal):\n 1. LCons n' xs' \\<in> paths graph", "by cases simp_all"], ["proof (state)\nthis:\n  LCons n' xs' \\<in> paths graph\n\ngoal (1 subgoal):\n 1. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "from \\<open>lset xs \\<subseteq> ns\\<close> xs"], ["proof (chain)\npicking this:\n  lset xs \\<subseteq> ns\n  xs = LCons n' xs'", "have \"lset xs' \\<subseteq> ns\""], ["proof (prove)\nusing this:\n  lset xs \\<subseteq> ns\n  xs = LCons n' xs'\n\ngoal (1 subgoal):\n 1. lset xs' \\<subseteq> ns", "by simp"], ["proof (state)\nthis:\n  lset xs' \\<subseteq> ns\n\ngoal (1 subgoal):\n 1. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "from path_avoid_node[OF path' \\<open>x \\<in> lset xs'\\<close>] False"], ["proof (chain)\npicking this:\n  n' \\<noteq> x \\<Longrightarrow>\n  \\<exists>xs'a.\n     LCons n' xs'a \\<in> paths graph \\<and>\n     lset xs'a \\<subseteq> lset xs' \\<and>\n     x \\<in> lset xs'a \\<and> n' \\<notin> lset xs'a\n  x \\<noteq> n'", "obtain xs'' where path'': \"LCons n' xs'' \\<in> paths graph\"\n        and \"lset xs'' \\<subseteq> lset xs'\" \"x \\<in> lset xs''\" \"n' \\<notin> lset xs''\""], ["proof (prove)\nusing this:\n  n' \\<noteq> x \\<Longrightarrow>\n  \\<exists>xs'a.\n     LCons n' xs'a \\<in> paths graph \\<and>\n     lset xs'a \\<subseteq> lset xs' \\<and>\n     x \\<in> lset xs'a \\<and> n' \\<notin> lset xs'a\n  x \\<noteq> n'\n\ngoal (1 subgoal):\n 1. (\\<And>xs''.\n        \\<lbrakk>LCons n' xs'' \\<in> paths graph;\n         lset xs'' \\<subseteq> lset xs'; x \\<in> lset xs'';\n         n' \\<notin> lset xs''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LCons n' xs'' \\<in> paths graph\n  lset xs'' \\<subseteq> lset xs'\n  x \\<in> lset xs''\n  n' \\<notin> lset xs''\n\ngoal (1 subgoal):\n 1. x \\<noteq> n' \\<Longrightarrow>\n    x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "with False \\<open>lset xs \\<subseteq> ns\\<close> xs"], ["proof (chain)\npicking this:\n  x \\<noteq> n'\n  lset xs \\<subseteq> ns\n  xs = LCons n' xs'\n  LCons n' xs'' \\<in> paths graph\n  lset xs'' \\<subseteq> lset xs'\n  x \\<in> lset xs''\n  n' \\<notin> lset xs''", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> n'\n  lset xs \\<subseteq> ns\n  xs = LCons n' xs'\n  LCons n' xs'' \\<in> paths graph\n  lset xs'' \\<subseteq> lset xs'\n  x \\<in> lset xs''\n  n' \\<notin> lset xs''\n\ngoal (1 subgoal):\n 1. x \\<in> insert n' (reachable_via graph (ns - {n'}) n')", "by(auto intro: reachable_via.intros)"], ["proof (state)\nthis:\n  x \\<in> insert n' (reachable_via graph (ns - {n'}) n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> insert n' (reachable_via graph (ns - {n'}) n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> ns.\n              insert n' (reachable_via graph (ns - {n'}) n'))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem koenigslemma:\n  fixes graph :: \"'node graph\"\n  and n :: 'node\n  assumes connected: \"connected graph\"\n  and infinite: \"infinite (UNIV :: 'node set)\"\n  and finite_branching: \"\\<And>n. finite {n'. graph n n'}\"\n  shows \"\\<exists>xs \\<in> paths graph. n \\<in> lset xs \\<and> \\<not> lfinite xs \\<and> ldistinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>paths graph.\n       n \\<in> lset xs \\<and> \\<not> lfinite xs \\<and> ldistinct xs", "proof(intro bexI conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "let ?P = \"\\<lambda>(n, ns) n'. graph n n' \\<and> infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and> n' \\<notin> insert n ns\""], ["proof (state)\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "define LTL where \"LTL = (\\<lambda>(n, ns). let n' = SOME n'. ?P (n, ns) n' in (n', insert n ns))\""], ["proof (state)\nthis:\n  LTL =\n  (\\<lambda>(n, ns).\n      let n' = SOME n'.\n                  (case (n, ns) of\n                   (n, ns) \\<Rightarrow>\n                     \\<lambda>n'.\n                        graph n n' \\<and>\n                        infinite\n                         (reachable_via graph (- insert n (insert n' ns))\n                           n') \\<and>\n                        n' \\<notin> insert n ns)\n                   n'\n      in (n', insert n ns))\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "define f where \"f = unfold_llist (\\<lambda>_. False) fst LTL\""], ["proof (state)\nthis:\n  f = unfold_llist (\\<lambda>_. False) fst LTL\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "define ns :: \"'node set\" where \"ns = {}\""], ["proof (state)\nthis:\n  ns = {}\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "{"], ["proof (state)\nthis:\n  ns = {}\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "fix n ns"], ["proof (state)\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "assume \"infinite (reachable_via graph (- insert n ns) n)\""], ["proof (state)\nthis:\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "hence \"\\<exists>n'. ?P (n, ns) n'\""], ["proof (prove)\nusing this:\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (case (n, ns) of\n        (n, ns) \\<Rightarrow>\n          \\<lambda>n'.\n             graph n n' \\<and>\n             infinite\n              (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n             n' \\<notin> insert n ns)\n        n'", "proof(rule contrapos_np)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>n'.\n       (case (n, ns) of\n        (n, ns) \\<Rightarrow>\n          \\<lambda>n'.\n             graph n n' \\<and>\n             infinite\n              (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n             n' \\<notin> insert n ns)\n        n' \\<Longrightarrow>\n    finite (reachable_via graph (- insert n ns) n)", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<nexists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (1 subgoal):\n 1. \\<nexists>n'.\n       (case (n, ns) of\n        (n, ns) \\<Rightarrow>\n          \\<lambda>n'.\n             graph n n' \\<and>\n             infinite\n              (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n             n' \\<notin> insert n ns)\n        n' \\<Longrightarrow>\n    finite (reachable_via graph (- insert n ns) n)", "hence fin: \"\\<And>n'. \\<lbrakk> graph n n'; n' \\<notin> insert n ns \\<rbrakk> \\<Longrightarrow> finite (reachable_via graph (- insert n (insert n' ns)) n')\""], ["proof (prove)\nusing this:\n  \\<nexists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (1 subgoal):\n 1. \\<And>n'.\n       \\<lbrakk>graph n n'; n' \\<notin> insert n ns\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (reachable_via graph (- insert n (insert n' ns))\n                            n')", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>graph n ?n'; ?n' \\<notin> insert n ns\\<rbrakk>\n  \\<Longrightarrow> finite\n                     (reachable_via graph (- insert n (insert ?n' ns)) ?n')\n\ngoal (1 subgoal):\n 1. \\<nexists>n'.\n       (case (n, ns) of\n        (n, ns) \\<Rightarrow>\n          \\<lambda>n'.\n             graph n n' \\<and>\n             infinite\n              (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n             n' \\<notin> insert n ns)\n        n' \\<Longrightarrow>\n    finite (reachable_via graph (- insert n ns) n)", "from reachable_via_subset_unfold[of graph \"- insert n ns\" n]"], ["proof (chain)\npicking this:\n  reachable_via graph (- insert n ns) n\n  \\<subseteq> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> - insert n ns.\n                  insert n' (reachable_via graph (- insert n ns - {n'}) n'))", "show \"finite (reachable_via graph (- insert n ns) n)\""], ["proof (prove)\nusing this:\n  reachable_via graph (- insert n ns) n\n  \\<subseteq> (\\<Union>n'\\<in>{n'. graph n n'} \\<inter> - insert n ns.\n                  insert n' (reachable_via graph (- insert n ns - {n'}) n'))\n\ngoal (1 subgoal):\n 1. finite (reachable_via graph (- insert n ns) n)", "proof(rule finite_subset[OF _ finite_UN_I])"], ["proof (state)\ngoal (2 subgoals):\n 1. finite ({n'. graph n n'} \\<inter> - insert n ns)\n 2. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "from finite_branching[of n]"], ["proof (chain)\npicking this:\n  finite {n'. graph n n'}", "show \"finite ({n'. graph n n'} \\<inter> - insert n ns)\""], ["proof (prove)\nusing this:\n  finite {n'. graph n n'}\n\ngoal (1 subgoal):\n 1. finite ({n'. graph n n'} \\<inter> - insert n ns)", "by blast"], ["proof (state)\nthis:\n  finite ({n'. graph n n'} \\<inter> - insert n ns)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "fix n'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "assume \"n' \\<in> {n'. graph n n'} \\<inter> - insert n ns\""], ["proof (state)\nthis:\n  n' \\<in> {n'. graph n n'} \\<inter> - insert n ns\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "hence \"graph n n'\" \"n' \\<notin> insert n ns\""], ["proof (prove)\nusing this:\n  n' \\<in> {n'. graph n n'} \\<inter> - insert n ns\n\ngoal (1 subgoal):\n 1. graph n n' &&& n' \\<notin> insert n ns", "by simp_all"], ["proof (state)\nthis:\n  graph n n'\n  n' \\<notin> insert n ns\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "from fin[OF this]"], ["proof (chain)\npicking this:\n  finite (reachable_via graph (- insert n (insert n' ns)) n')", "have \"finite (reachable_via graph (- insert n (insert n' ns)) n')\""], ["proof (prove)\nusing this:\n  finite (reachable_via graph (- insert n (insert n' ns)) n')\n\ngoal (1 subgoal):\n 1. finite (reachable_via graph (- insert n (insert n' ns)) n')", "."], ["proof (state)\nthis:\n  finite (reachable_via graph (- insert n (insert n' ns)) n')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "moreover"], ["proof (state)\nthis:\n  finite (reachable_via graph (- insert n (insert n' ns)) n')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "have \"- insert n (insert n' ns) = - insert n ns - {n'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - insert n (insert n' ns) = - insert n ns - {n'}", "by auto"], ["proof (state)\nthis:\n  - insert n (insert n' ns) = - insert n ns - {n'}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> {n'. graph n n'} \\<inter> - insert n ns \\<Longrightarrow>\n       finite (insert a (reachable_via graph (- insert n ns - {a}) a))", "ultimately"], ["proof (chain)\npicking this:\n  finite (reachable_via graph (- insert n (insert n' ns)) n')\n  - insert n (insert n' ns) = - insert n ns - {n'}", "show \"finite (insert n' (reachable_via graph (- insert n ns - {n'}) n'))\""], ["proof (prove)\nusing this:\n  finite (reachable_via graph (- insert n (insert n' ns)) n')\n  - insert n (insert n' ns) = - insert n ns - {n'}\n\ngoal (1 subgoal):\n 1. finite (insert n' (reachable_via graph (- insert n ns - {n'}) n'))", "by simp"], ["proof (state)\nthis:\n  finite (insert n' (reachable_via graph (- insert n ns - {n'}) n'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (reachable_via graph (- insert n ns) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "}"], ["proof (state)\nthis:\n  infinite\n   (reachable_via graph (- insert ?na2 ?nsa2) ?na2) \\<Longrightarrow>\n  \\<exists>n'.\n     (case (?na2, ?nsa2) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "note ex_P_I = this"], ["proof (state)\nthis:\n  infinite\n   (reachable_via graph (- insert ?na2 ?nsa2) ?na2) \\<Longrightarrow>\n  \\<exists>n'.\n     (case (?na2, ?nsa2) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "{"], ["proof (state)\nthis:\n  infinite\n   (reachable_via graph (- insert ?na2 ?nsa2) ?na2) \\<Longrightarrow>\n  \\<exists>n'.\n     (case (?na2, ?nsa2) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "fix n ns"], ["proof (state)\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "have \"\\<not> lnull (f (n, ns))\"\n      \"lhd (f (n, ns)) = n\"\n      \"ltl (f (n, ns)) = (let n' = SOME n'. ?P (n, ns) n' in f (n', insert n ns))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull (f (n, ns)) &&&\n    lhd (f (n, ns)) = n &&&\n    ltl (f (n, ns)) =\n    (let n' = SOME n'.\n                 (case (n, ns) of\n                  (n, ns) \\<Rightarrow>\n                    \\<lambda>n'.\n                       graph n n' \\<and>\n                       infinite\n                        (reachable_via graph (- insert n (insert n' ns))\n                          n') \\<and>\n                       n' \\<notin> insert n ns)\n                  n'\n     in f (n', insert n ns))", "by(simp_all add: f_def LTL_def)"], ["proof (state)\nthis:\n  \\<not> lnull (f (n, ns))\n  lhd (f (n, ns)) = n\n  ltl (f (n, ns)) =\n  (let n' = SOME n'.\n               (case (n, ns) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns)\n                n'\n   in f (n', insert n ns))\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "}"], ["proof (state)\nthis:\n  \\<not> lnull (f (?na2, ?nsa2))\n  lhd (f (?na2, ?nsa2)) = ?na2\n  ltl (f (?na2, ?nsa2)) =\n  (let n' = SOME n'.\n               (case (?na2, ?nsa2) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns)\n                n'\n   in f (n', insert ?na2 ?nsa2))\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "note f_simps [simp] = this"], ["proof (state)\nthis:\n  \\<not> lnull (f (?na2, ?nsa2))\n  lhd (f (?na2, ?nsa2)) = ?na2\n  ltl (f (?na2, ?nsa2)) =\n  (let n' = SOME n'.\n               (case (?na2, ?nsa2) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns)\n                n'\n   in f (n', insert ?na2 ?nsa2))\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "{"], ["proof (state)\nthis:\n  \\<not> lnull (f (?na2, ?nsa2))\n  lhd (f (?na2, ?nsa2)) = ?na2\n  ltl (f (?na2, ?nsa2)) =\n  (let n' = SOME n'.\n               (case (?na2, ?nsa2) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns)\n                n'\n   in f (n', insert ?na2 ?nsa2))\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "fix n :: 'node and ns :: \"'node set\" and x :: 'node"], ["proof (state)\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "assume \"x \\<in> lset (f (n, ns))\" \"n \\<notin> ns\"\n      and \"finite ns\" \"infinite (reachable_via graph (- insert n ns) n)\""], ["proof (state)\nthis:\n  x \\<in> lset (f (n, ns))\n  n \\<notin> ns\n  finite ns\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "hence \"x \\<notin> ns\""], ["proof (prove)\nusing this:\n  x \\<in> lset (f (n, ns))\n  n \\<notin> ns\n  finite ns\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. x \\<notin> ns", "proof(induct \"f (n, ns)\" arbitrary: n ns rule: lset_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs n ns.\n       \\<lbrakk>LCons x xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns\n 2. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "case find"], ["proof (state)\nthis:\n  LCons x xs_ = f (n, ns)\n  n \\<notin> ns\n  finite ns\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (2 subgoals):\n 1. \\<And>xs n ns.\n       \\<lbrakk>LCons x xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns\n 2. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "thus ?case"], ["proof (prove)\nusing this:\n  LCons x xs_ = f (n, ns)\n  n \\<notin> ns\n  finite ns\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. x \\<notin> ns", "by(auto 4 4 dest: sym eq_LConsD)"], ["proof (state)\nthis:\n  x \\<notin> ns\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "case (step x' xs)"], ["proof (state)\nthis:\n  x \\<in> lset xs\n  x \\<noteq> x'\n  \\<lbrakk>xs = f (?n, ?ns); ?n \\<notin> ?ns; finite ?ns;\n   infinite (reachable_via graph (- insert ?n ?ns) ?n)\\<rbrakk>\n  \\<Longrightarrow> x \\<notin> ?ns\n  LCons x' xs = f (n, ns)\n  n \\<notin> ns\n  finite ns\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "let ?n' = \"Eps (?P (n, ns))\" \n        and ?ns' = \"insert n ns\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "from eq_LConsD[OF \\<open>LCons x' xs = f (n, ns)\\<close>[symmetric]]"], ["proof (chain)\npicking this:\n  f (n, ns) \\<noteq> LNil \\<and>\n  lhd (f (n, ns)) = x' \\<and> ltl (f (n, ns)) = xs", "have [simp]: \"x' = n\" and xs: \"xs = f (?n', ?ns')\""], ["proof (prove)\nusing this:\n  f (n, ns) \\<noteq> LNil \\<and>\n  lhd (f (n, ns)) = x' \\<and> ltl (f (n, ns)) = xs\n\ngoal (1 subgoal):\n 1. x' = n &&&\n    xs =\n    f (Eps (case (n, ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns),\n       insert n ns)", "by auto"], ["proof (state)\nthis:\n  x' = n\n  xs =\n  f (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns),\n     insert n ns)\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "from \\<open>infinite (reachable_via graph (- insert n ns) n)\\<close>"], ["proof (chain)\npicking this:\n  infinite (reachable_via graph (- insert n ns) n)", "have \"\\<exists>n'. ?P (n, ns) n'\""], ["proof (prove)\nusing this:\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (case (n, ns) of\n        (n, ns) \\<Rightarrow>\n          \\<lambda>n'.\n             graph n n' \\<and>\n             infinite\n              (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n             n' \\<notin> insert n ns)\n        n'", "by(rule ex_P_I)"], ["proof (state)\nthis:\n  \\<exists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "hence P: \"?P (n, ns) ?n'\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (1 subgoal):\n 1. (case (n, ns) of\n     (n, ns) \\<Rightarrow>\n       \\<lambda>n'.\n          graph n n' \\<and>\n          infinite\n           (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n          n' \\<notin> insert n ns)\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))", "by(rule someI_ex)"], ["proof (state)\nthis:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "moreover"], ["proof (state)\nthis:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "have \"insert ?n' ?ns' = insert n (insert ?n' ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     (insert n ns) =\n    insert n\n     (insert\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns))\n       ns)", "by auto"], ["proof (state)\nthis:\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "ultimately"], ["proof (chain)\npicking this:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)", "have \"?n' \\<notin> ?ns'\" \"finite ?ns'\" \n        and \"infinite (reachable_via graph (- insert ?n' ?ns') ?n')\""], ["proof (prove)\nusing this:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n\ngoal (1 subgoal):\n 1. (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns)\n     \\<notin> insert n ns &&&\n     finite (insert n ns)) &&&\n    infinite\n     (reachable_via graph\n       (- insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns)))", "using \\<open>finite ns\\<close>"], ["proof (prove)\nusing this:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n  finite ns\n\ngoal (1 subgoal):\n 1. (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns)\n     \\<notin> insert n ns &&&\n     finite (insert n ns)) &&&\n    infinite\n     (reachable_via graph\n       (- insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns)))", "by auto"], ["proof (state)\nthis:\n  Eps (case (n, ns) of\n       (n, ns) \\<Rightarrow>\n         \\<lambda>n'.\n            graph n n' \\<and>\n            infinite\n             (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n            n' \\<notin> insert n ns)\n  \\<notin> insert n ns\n  finite (insert n ns)\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "with xs"], ["proof (chain)\npicking this:\n  xs =\n  f (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns),\n     insert n ns)\n  Eps (case (n, ns) of\n       (n, ns) \\<Rightarrow>\n         \\<lambda>n'.\n            graph n n' \\<and>\n            infinite\n             (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n            n' \\<notin> insert n ns)\n  \\<notin> insert n ns\n  finite (insert n ns)\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))", "have \"x \\<notin> ?ns'\""], ["proof (prove)\nusing this:\n  xs =\n  f (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns),\n     insert n ns)\n  Eps (case (n, ns) of\n       (n, ns) \\<Rightarrow>\n         \\<lambda>n'.\n            graph n n' \\<and>\n            infinite\n             (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n            n' \\<notin> insert n ns)\n  \\<notin> insert n ns\n  finite (insert n ns)\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))\n\ngoal (1 subgoal):\n 1. x \\<notin> insert n ns", "by(rule step)"], ["proof (state)\nthis:\n  x \\<notin> insert n ns\n\ngoal (1 subgoal):\n 1. \\<And>x' xs n ns.\n       \\<lbrakk>x \\<in> lset xs; x \\<noteq> x';\n        \\<And>n ns.\n           \\<lbrakk>xs = f (n, ns); n \\<notin> ns; finite ns;\n            infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n           \\<Longrightarrow> x \\<notin> ns;\n        LCons x' xs = f (n, ns); n \\<notin> ns; finite ns;\n        infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> ns", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<notin> insert n ns\n\ngoal (1 subgoal):\n 1. x \\<notin> ns", "by simp"], ["proof (state)\nthis:\n  x \\<notin> ns\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<notin> ns\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> lset (f (?na2, ?nsa2)); ?na2 \\<notin> ?nsa2;\n   finite ?nsa2;\n   infinite (reachable_via graph (- insert ?na2 ?nsa2) ?na2)\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<notin> ?nsa2\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "note lset = this"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> lset (f (?na2, ?nsa2)); ?na2 \\<notin> ?nsa2;\n   finite ?nsa2;\n   infinite (reachable_via graph (- insert ?na2 ?nsa2) ?na2)\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<notin> ?nsa2\n\ngoal (4 subgoals):\n 1. n \\<in> lset ?xs\n 2. \\<not> lfinite ?xs\n 3. ldistinct ?xs\n 4. ?xs \\<in> paths graph", "show \"n \\<in> lset (f (n, ns))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> lset (f (n, ns))", "using llist.set_sel(1)[OF f_simps(1), of n ns]"], ["proof (prove)\nusing this:\n  lhd (f (n, ns)) \\<in> lset (f (n, ns))\n\ngoal (1 subgoal):\n 1. n \\<in> lset (f (n, ns))", "by(simp del: llist.set_sel(1))"], ["proof (state)\nthis:\n  n \\<in> lset (f (n, ns))\n\ngoal (3 subgoals):\n 1. \\<not> lfinite\n            (unfold_llist (\\<lambda>_. False) fst\n              (\\<lambda>(n, ns).\n                  let n' = Eps (case (n, ns) of\n                                (n, ns) \\<Rightarrow>\n                                  \\<lambda>n'.\n                                     graph n n' \\<and>\n                                     infinite\n(reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                                     n' \\<notin> insert n ns)\n                  in (n', insert n ns))\n              (n, {}))\n 2. ldistinct\n     (unfold_llist (\\<lambda>_. False) fst\n       (\\<lambda>(n, ns).\n           let n' = Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns)\n           in (n', insert n ns))\n       (n, {}))\n 3. unfold_llist (\\<lambda>_. False) fst\n     (\\<lambda>(n, ns).\n         let n' = Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns)\n         in (n', insert n ns))\n     (n, {})\n    \\<in> paths graph", "show \"\\<not> lfinite (f (n, ns))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lfinite (f (n, ns))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lfinite (f (n, ns)) \\<Longrightarrow> False", "assume \"lfinite (f (n, ns))\""], ["proof (state)\nthis:\n  lfinite (f (n, ns))\n\ngoal (1 subgoal):\n 1. lfinite (f (n, ns)) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  lfinite (f (n, ns))\n\ngoal (1 subgoal):\n 1. False", "by(induct \"f (n, ns)\" arbitrary: n ns rule: lfinite_induct) auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> lfinite (f (n, ns))\n\ngoal (2 subgoals):\n 1. ldistinct\n     (unfold_llist (\\<lambda>_. False) fst\n       (\\<lambda>(n, ns).\n           let n' = Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns)\n           in (n', insert n ns))\n       (n, {}))\n 2. unfold_llist (\\<lambda>_. False) fst\n     (\\<lambda>(n, ns).\n         let n' = Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns)\n         in (n', insert n ns))\n     (n, {})\n    \\<in> paths graph", "let ?X = \"\\<lambda>xs. \\<exists>n ns. xs = f (n, ns) \\<and> finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)\""], ["proof (state)\ngoal (2 subgoals):\n 1. ldistinct\n     (unfold_llist (\\<lambda>_. False) fst\n       (\\<lambda>(n, ns).\n           let n' = Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns)\n           in (n', insert n ns))\n       (n, {}))\n 2. unfold_llist (\\<lambda>_. False) fst\n     (\\<lambda>(n, ns).\n         let n' = Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns)\n         in (n', insert n ns))\n     (n, {})\n    \\<in> paths graph", "have \"reachable_via graph (- {n}) n \\<supseteq> - {n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - {n} \\<subseteq> reachable_via graph (- {n}) n", "proof(rule subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> - {n} \\<Longrightarrow> x \\<in> reachable_via graph (- {n}) n", "fix n' :: 'node"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> - {n} \\<Longrightarrow> x \\<in> reachable_via graph (- {n}) n", "assume \"n' \\<in> - {n}\""], ["proof (state)\nthis:\n  n' \\<in> - {n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> - {n} \\<Longrightarrow> x \\<in> reachable_via graph (- {n}) n", "hence \"n \\<noteq> n'\""], ["proof (prove)\nusing this:\n  n' \\<in> - {n}\n\ngoal (1 subgoal):\n 1. n \\<noteq> n'", "by auto"], ["proof (state)\nthis:\n  n \\<noteq> n'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> - {n} \\<Longrightarrow> x \\<in> reachable_via graph (- {n}) n", "from connected"], ["proof (chain)\npicking this:\n  Koenigslemma.connected graph", "obtain xs\n      where \"llist_of (n # xs @ [n']) \\<in> paths graph\""], ["proof (prove)\nusing this:\n  Koenigslemma.connected graph\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        llist_of (n # xs @ [n']) \\<in> paths graph \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: connectedD)"], ["proof (state)\nthis:\n  llist_of (n # xs @ [n']) \\<in> paths graph\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> - {n} \\<Longrightarrow> x \\<in> reachable_via graph (- {n}) n", "hence \"LCons n (llist_of (xs @ [n'])) \\<in> paths graph\"\n      and \"n' \\<in> lset (llist_of (xs @ [n']))\""], ["proof (prove)\nusing this:\n  llist_of (n # xs @ [n']) \\<in> paths graph\n\ngoal (1 subgoal):\n 1. LCons n (llist_of (xs @ [n'])) \\<in> paths graph &&&\n    n' \\<in> lset (llist_of (xs @ [n']))", "by simp_all"], ["proof (state)\nthis:\n  LCons n (llist_of (xs @ [n'])) \\<in> paths graph\n  n' \\<in> lset (llist_of (xs @ [n']))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> - {n} \\<Longrightarrow> x \\<in> reachable_via graph (- {n}) n", "from path_avoid_node[OF this \\<open>n \\<noteq> n'\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>xs'.\n     LCons n xs' \\<in> paths graph \\<and>\n     lset xs' \\<subseteq> lset (llist_of (xs @ [n'])) \\<and>\n     n' \\<in> lset xs' \\<and> n \\<notin> lset xs'", "show \"n' \\<in> reachable_via graph (- {n}) n\""], ["proof (prove)\nusing this:\n  \\<exists>xs'.\n     LCons n xs' \\<in> paths graph \\<and>\n     lset xs' \\<subseteq> lset (llist_of (xs @ [n'])) \\<and>\n     n' \\<in> lset xs' \\<and> n \\<notin> lset xs'\n\ngoal (1 subgoal):\n 1. n' \\<in> reachable_via graph (- {n}) n", "by(auto intro: reachable_via.intros)"], ["proof (state)\nthis:\n  n' \\<in> reachable_via graph (- {n}) n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  - {n} \\<subseteq> reachable_via graph (- {n}) n\n\ngoal (2 subgoals):\n 1. ldistinct\n     (unfold_llist (\\<lambda>_. False) fst\n       (\\<lambda>(n, ns).\n           let n' = Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns)\n           in (n', insert n ns))\n       (n, {}))\n 2. unfold_llist (\\<lambda>_. False) fst\n     (\\<lambda>(n, ns).\n         let n' = Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns)\n         in (n', insert n ns))\n     (n, {})\n    \\<in> paths graph", "hence \"infinite (reachable_via graph (- {n}) n)\""], ["proof (prove)\nusing this:\n  - {n} \\<subseteq> reachable_via graph (- {n}) n\n\ngoal (1 subgoal):\n 1. infinite (reachable_via graph (- {n}) n)", "using infinite"], ["proof (prove)\nusing this:\n  - {n} \\<subseteq> reachable_via graph (- {n}) n\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. infinite (reachable_via graph (- {n}) n)", "by(auto dest: finite_subset)"], ["proof (state)\nthis:\n  infinite (reachable_via graph (- {n}) n)\n\ngoal (2 subgoals):\n 1. ldistinct\n     (unfold_llist (\\<lambda>_. False) fst\n       (\\<lambda>(n, ns).\n           let n' = Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns)\n           in (n', insert n ns))\n       (n, {}))\n 2. unfold_llist (\\<lambda>_. False) fst\n     (\\<lambda>(n, ns).\n         let n' = Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns)\n         in (n', insert n ns))\n     (n, {})\n    \\<in> paths graph", "hence X: \"?X (f (n, {}))\""], ["proof (prove)\nusing this:\n  infinite (reachable_via graph (- {n}) n)\n\ngoal (1 subgoal):\n 1. \\<exists>na ns.\n       f (n, {}) = f (na, ns) \\<and>\n       finite ns \\<and> infinite (reachable_via graph (- insert na ns) na)", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>na ns.\n     f (n, {}) = f (na, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert na ns) na)\n\ngoal (2 subgoals):\n 1. ldistinct\n     (unfold_llist (\\<lambda>_. False) fst\n       (\\<lambda>(n, ns).\n           let n' = Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns)\n           in (n', insert n ns))\n       (n, {}))\n 2. unfold_llist (\\<lambda>_. False) fst\n     (\\<lambda>(n, ns).\n         let n' = Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns)\n         in (n', insert n ns))\n     (n, {})\n    \\<in> paths graph", "thus \"f (n, {}) \\<in> paths graph\""], ["proof (prove)\nusing this:\n  \\<exists>na ns.\n     f (n, {}) = f (na, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert na ns) na)\n\ngoal (1 subgoal):\n 1. f (n, {}) \\<in> paths graph", "proof(coinduct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "case (paths xs)"], ["proof (state)\nthis:\n  \\<exists>n ns.\n     xs = f (n, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "then"], ["proof (chain)\npicking this:\n  \\<exists>n ns.\n     xs = f (n, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)", "obtain n ns where xs_def: \"xs = f (n, ns)\"\n      and \"finite ns\" and \"infinite (reachable_via graph (- insert n ns) n)\""], ["proof (prove)\nusing this:\n  \\<exists>n ns.\n     xs = f (n, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. (\\<And>n ns.\n        \\<lbrakk>xs = f (n, ns); finite ns;\n         infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xs = f (n, ns)\n  finite ns\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "from \\<open>infinite (reachable_via graph (- insert n ns) n)\\<close>"], ["proof (chain)\npicking this:\n  infinite (reachable_via graph (- insert n ns) n)", "have \"\\<exists>n'. ?P (n, ns) n'\""], ["proof (prove)\nusing this:\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (case (n, ns) of\n        (n, ns) \\<Rightarrow>\n          \\<lambda>n'.\n             graph n n' \\<and>\n             infinite\n              (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n             n' \\<notin> insert n ns)\n        n'", "by(rule ex_P_I)"], ["proof (state)\nthis:\n  \\<exists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "hence P: \"?P (n, ns) (Eps (?P (n, ns)))\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (1 subgoal):\n 1. (case (n, ns) of\n     (n, ns) \\<Rightarrow>\n       \\<lambda>n'.\n          graph n n' \\<and>\n          infinite\n           (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n          n' \\<notin> insert n ns)\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))", "by(rule someI_ex)"], ["proof (state)\nthis:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "let ?n' = \"Eps (?P (n, ns))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "let ?ns' = \"insert n ns\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "let ?n'' = \"Eps (?P (?n', ?ns'))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "let ?ns'' = \"insert ?n' ?ns'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "have \"xs = LCons n (LCons ?n' (f (?n'', ?ns'')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs =\n    LCons n\n     (LCons\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns))\n       (f (Eps (case (Eps (case (n, ns) of\n                           (n, ns) \\<Rightarrow>\n                             \\<lambda>n'.\n                                graph n n' \\<and>\n                                infinite\n                                 (reachable_via graph\n                                   (- insert n (insert n' ns)) n') \\<and>\n                                n' \\<notin> insert n ns),\n                      insert n ns) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns),\n           insert\n            (Eps (case (n, ns) of\n                  (n, ns) \\<Rightarrow>\n                    \\<lambda>n'.\n                       graph n n' \\<and>\n                       infinite\n                        (reachable_via graph (- insert n (insert n' ns))\n                          n') \\<and>\n                       n' \\<notin> insert n ns))\n            (insert n ns))))", "unfolding xs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (n, ns) =\n    LCons n\n     (LCons\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns))\n       (f (Eps (case (Eps (case (n, ns) of\n                           (n, ns) \\<Rightarrow>\n                             \\<lambda>n'.\n                                graph n n' \\<and>\n                                infinite\n                                 (reachable_via graph\n                                   (- insert n (insert n' ns)) n') \\<and>\n                                n' \\<notin> insert n ns),\n                      insert n ns) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns),\n           insert\n            (Eps (case (n, ns) of\n                  (n, ns) \\<Rightarrow>\n                    \\<lambda>n'.\n                       graph n n' \\<and>\n                       infinite\n                        (reachable_via graph (- insert n (insert n' ns))\n                          n') \\<and>\n                       n' \\<notin> insert n ns))\n            (insert n ns))))", "by(auto 4 3 intro: llist.expand)"], ["proof (state)\nthis:\n  xs =\n  LCons n\n   (LCons\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     (f (Eps (case (Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns),\n                    insert n ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns),\n         insert\n          (Eps (case (n, ns) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns))\n          (insert n ns))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "moreover"], ["proof (state)\nthis:\n  xs =\n  LCons n\n   (LCons\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     (f (Eps (case (Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns),\n                    insert n ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns),\n         insert\n          (Eps (case (n, ns) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns))\n          (insert n ns))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "from P"], ["proof (chain)\npicking this:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))", "have \"graph n ?n'\""], ["proof (prove)\nusing this:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. graph n\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))", "by simp"], ["proof (state)\nthis:\n  graph n\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "moreover"], ["proof (state)\nthis:\n  graph n\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "{"], ["proof (state)\nthis:\n  graph n\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "have \"LCons ?n' (f (?n'', ?ns'')) = f (?n', ?ns')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LCons\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     (f (Eps (case (Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns),\n                    insert n ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns),\n         insert\n          (Eps (case (n, ns) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns))\n          (insert n ns))) =\n    f (Eps (case (n, ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns),\n       insert n ns)", "by(rule llist.expand) simp_all"], ["proof (state)\nthis:\n  LCons\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (f (Eps (case (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns),\n       insert\n        (Eps (case (n, ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns))\n        (insert n ns))) =\n  f (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns),\n     insert n ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "moreover"], ["proof (state)\nthis:\n  LCons\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (f (Eps (case (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns),\n       insert\n        (Eps (case (n, ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns))\n        (insert n ns))) =\n  f (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns),\n     insert n ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "have \"finite ?ns'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (insert n ns)", "using \\<open>finite ns\\<close>"], ["proof (prove)\nusing this:\n  finite ns\n\ngoal (1 subgoal):\n 1. finite (insert n ns)", "by simp"], ["proof (state)\nthis:\n  finite (insert n ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "moreover"], ["proof (state)\nthis:\n  finite (insert n ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "have \"insert ?n' ?ns' = insert n (insert ?n' ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     (insert n ns) =\n    insert n\n     (insert\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns))\n       ns)", "by auto"], ["proof (state)\nthis:\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "hence \"infinite (reachable_via graph (- insert ?n' ?ns') ?n')\""], ["proof (prove)\nusing this:\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n\ngoal (1 subgoal):\n 1. infinite\n     (reachable_via graph\n       (- insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns)))", "using P"], ["proof (prove)\nusing this:\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. infinite\n     (reachable_via graph\n       (- insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns)))", "by simp"], ["proof (state)\nthis:\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "ultimately"], ["proof (chain)\npicking this:\n  LCons\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (f (Eps (case (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns),\n       insert\n        (Eps (case (n, ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns))\n        (insert n ns))) =\n  f (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns),\n     insert n ns)\n  finite (insert n ns)\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))", "have \"?X (LCons ?n' (f (?n'', ?ns'')))\""], ["proof (prove)\nusing this:\n  LCons\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (f (Eps (case (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns),\n       insert\n        (Eps (case (n, ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns))\n        (insert n ns))) =\n  f (Eps (case (n, ns) of\n          (n, ns) \\<Rightarrow>\n            \\<lambda>n'.\n               graph n n' \\<and>\n               infinite\n                (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n               n' \\<notin> insert n ns),\n     insert n ns)\n  finite (insert n ns)\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))\n\ngoal (1 subgoal):\n 1. \\<exists>n ns.\n       LCons\n        (Eps (case (n, ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns))\n        (f (Eps (case (Eps (case (n, ns) of\n                            (n, ns) \\<Rightarrow>\n                              \\<lambda>n'.\n                                 graph n n' \\<and>\n                                 infinite\n                                  (reachable_via graph\n                                    (- insert n (insert n' ns)) n') \\<and>\n                                 n' \\<notin> insert n ns),\n                       insert n ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns),\n            insert\n             (Eps (case (n, ns) of\n                   (n, ns) \\<Rightarrow>\n                     \\<lambda>n'.\n                        graph n n' \\<and>\n                        infinite\n                         (reachable_via graph (- insert n (insert n' ns))\n                           n') \\<and>\n                        n' \\<notin> insert n ns))\n             (insert n ns))) =\n       f (n, ns) \\<and>\n       finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)", "by blast"], ["proof (state)\nthis:\n  \\<exists>n ns.\n     LCons\n      (Eps (case (n, ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns))\n      (f (Eps (case (Eps (case (n, ns) of\n                          (n, ns) \\<Rightarrow>\n                            \\<lambda>n'.\n                               graph n n' \\<and>\n                               infinite\n                                (reachable_via graph\n                                  (- insert n (insert n' ns)) n') \\<and>\n                               n' \\<notin> insert n ns),\n                     insert n ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns),\n          insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))) =\n     f (n, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "}"], ["proof (state)\nthis:\n  \\<exists>n ns.\n     LCons\n      (Eps (case (n, ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns))\n      (f (Eps (case (Eps (case (n, ns) of\n                          (n, ns) \\<Rightarrow>\n                            \\<lambda>n'.\n                               graph n n' \\<and>\n                               infinite\n                                (reachable_via graph\n                                  (- insert n (insert n' ns)) n') \\<and>\n                               n' \\<notin> insert n ns),\n                     insert n ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns),\n          insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))) =\n     f (n, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "ultimately"], ["proof (chain)\npicking this:\n  xs =\n  LCons n\n   (LCons\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     (f (Eps (case (Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns),\n                    insert n ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns),\n         insert\n          (Eps (case (n, ns) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns))\n          (insert n ns))))\n  graph n\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n  \\<exists>n ns.\n     LCons\n      (Eps (case (n, ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns))\n      (f (Eps (case (Eps (case (n, ns) of\n                          (n, ns) \\<Rightarrow>\n                            \\<lambda>n'.\n                               graph n n' \\<and>\n                               infinite\n                                (reachable_via graph\n                                  (- insert n (insert n' ns)) n') \\<and>\n                               n' \\<notin> insert n ns),\n                     insert n ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns),\n          insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))) =\n     f (n, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)", "have ?LCons"], ["proof (prove)\nusing this:\n  xs =\n  LCons n\n   (LCons\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     (f (Eps (case (Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns),\n                    insert n ns) of\n              (n, ns) \\<Rightarrow>\n                \\<lambda>n'.\n                   graph n n' \\<and>\n                   infinite\n                    (reachable_via graph (- insert n (insert n' ns))\n                      n') \\<and>\n                   n' \\<notin> insert n ns),\n         insert\n          (Eps (case (n, ns) of\n                (n, ns) \\<Rightarrow>\n                  \\<lambda>n'.\n                     graph n n' \\<and>\n                     infinite\n                      (reachable_via graph (- insert n (insert n' ns))\n                        n') \\<and>\n                     n' \\<notin> insert n ns))\n          (insert n ns))))\n  graph n\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n  \\<exists>n ns.\n     LCons\n      (Eps (case (n, ns) of\n            (n, ns) \\<Rightarrow>\n              \\<lambda>n'.\n                 graph n n' \\<and>\n                 infinite\n                  (reachable_via graph (- insert n (insert n' ns))\n                    n') \\<and>\n                 n' \\<notin> insert n ns))\n      (f (Eps (case (Eps (case (n, ns) of\n                          (n, ns) \\<Rightarrow>\n                            \\<lambda>n'.\n                               graph n n' \\<and>\n                               infinite\n                                (reachable_via graph\n                                  (- insert n (insert n' ns)) n') \\<and>\n                               n' \\<notin> insert n ns),\n                     insert n ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns),\n          insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))) =\n     f (n, ns) \\<and>\n     finite ns \\<and> infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<exists>x y xsa.\n       xs = LCons x (LCons y xsa) \\<and>\n       graph x y \\<and>\n       ((\\<exists>n ns.\n            LCons y xsa = f (n, ns) \\<and>\n            finite ns \\<and>\n            infinite (reachable_via graph (- insert n ns) n)) \\<or>\n        LCons y xsa \\<in> paths graph)", "by simp"], ["proof (state)\nthis:\n  \\<exists>x y xsa.\n     xs = LCons x (LCons y xsa) \\<and>\n     graph x y \\<and>\n     ((\\<exists>n ns.\n          LCons y xsa = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n)) \\<or>\n      LCons y xsa \\<in> paths graph)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>n ns.\n          x = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n) \\<Longrightarrow>\n       x = LNil \\<or>\n       (\\<exists>xa. x = LCons xa LNil) \\<or>\n       (\\<exists>xa y xs.\n           x = LCons xa (LCons y xs) \\<and>\n           graph xa y \\<and>\n           ((\\<exists>n ns.\n                LCons y xs = f (n, ns) \\<and>\n                finite ns \\<and>\n                infinite (reachable_via graph (- insert n ns) n)) \\<or>\n            LCons y xs \\<in> paths graph))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<exists>x y xsa.\n     xs = LCons x (LCons y xsa) \\<and>\n     graph x y \\<and>\n     ((\\<exists>n ns.\n          LCons y xsa = f (n, ns) \\<and>\n          finite ns \\<and>\n          infinite (reachable_via graph (- insert n ns) n)) \\<or>\n      LCons y xsa \\<in> paths graph)\n\ngoal (1 subgoal):\n 1. xs = LNil \\<or>\n    (\\<exists>x. xs = LCons x LNil) \\<or>\n    (\\<exists>x y xsa.\n        xs = LCons x (LCons y xsa) \\<and>\n        graph x y \\<and>\n        ((\\<exists>n ns.\n             LCons y xsa = f (n, ns) \\<and>\n             finite ns \\<and>\n             infinite (reachable_via graph (- insert n ns) n)) \\<or>\n         LCons y xsa \\<in> paths graph))", "by simp"], ["proof (state)\nthis:\n  xs = LNil \\<or>\n  (\\<exists>x. xs = LCons x LNil) \\<or>\n  (\\<exists>x y xsa.\n      xs = LCons x (LCons y xsa) \\<and>\n      graph x y \\<and>\n      ((\\<exists>n ns.\n           LCons y xsa = f (n, ns) \\<and>\n           finite ns \\<and>\n           infinite (reachable_via graph (- insert n ns) n)) \\<or>\n       LCons y xsa \\<in> paths graph))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f (n, {}) \\<in> paths graph\n\ngoal (1 subgoal):\n 1. ldistinct\n     (unfold_llist (\\<lambda>_. False) fst\n       (\\<lambda>(n, ns).\n           let n' = Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns)\n           in (n', insert n ns))\n       (n, {}))", "from \\<open>infinite (reachable_via graph (- {n}) n)\\<close>"], ["proof (chain)\npicking this:\n  infinite (reachable_via graph (- {n}) n)", "have \"infinite (reachable_via graph (- insert n ns) n) \\<and> finite ns\""], ["proof (prove)\nusing this:\n  infinite (reachable_via graph (- {n}) n)\n\ngoal (1 subgoal):\n 1. infinite (reachable_via graph (- insert n ns) n) \\<and> finite ns", "by(simp add: ns_def)"], ["proof (state)\nthis:\n  infinite (reachable_via graph (- insert n ns) n) \\<and> finite ns\n\ngoal (1 subgoal):\n 1. ldistinct\n     (unfold_llist (\\<lambda>_. False) fst\n       (\\<lambda>(n, ns).\n           let n' = Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns)\n           in (n', insert n ns))\n       (n, {}))", "thus \"ldistinct (f (n, ns))\""], ["proof (prove)\nusing this:\n  infinite (reachable_via graph (- insert n ns) n) \\<and> finite ns\n\ngoal (1 subgoal):\n 1. ldistinct (f (n, ns))", "proof(coinduction arbitrary: n ns)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "case (ldistinct n ns)"], ["proof (state)\nthis:\n  infinite (reachable_via graph (- insert n ns) n) \\<and> finite ns\n  \\<not> lnull (f (n, ns))\n\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "then"], ["proof (chain)\npicking this:\n  infinite (reachable_via graph (- insert n ns) n) \\<and> finite ns\n  \\<not> lnull (f (n, ns))", "obtain \"finite ns\"\n      and \"infinite (reachable_via graph (- insert n ns) n)\""], ["proof (prove)\nusing this:\n  infinite (reachable_via graph (- insert n ns) n) \\<and> finite ns\n  \\<not> lnull (f (n, ns))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>finite ns;\n      infinite (reachable_via graph (- insert n ns) n)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  finite ns\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "from \\<open>infinite (reachable_via graph (- insert n ns) n)\\<close>"], ["proof (chain)\npicking this:\n  infinite (reachable_via graph (- insert n ns) n)", "have \"\\<exists>n'. ?P (n, ns) n'\""], ["proof (prove)\nusing this:\n  infinite (reachable_via graph (- insert n ns) n)\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (case (n, ns) of\n        (n, ns) \\<Rightarrow>\n          \\<lambda>n'.\n             graph n n' \\<and>\n             infinite\n              (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n             n' \\<notin> insert n ns)\n        n'", "by(rule ex_P_I)"], ["proof (state)\nthis:\n  \\<exists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "hence P: \"?P (n, ns) (Eps (?P (n, ns)))\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (case (n, ns) of\n      (n, ns) \\<Rightarrow>\n        \\<lambda>n'.\n           graph n n' \\<and>\n           infinite\n            (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n           n' \\<notin> insert n ns)\n      n'\n\ngoal (1 subgoal):\n 1. (case (n, ns) of\n     (n, ns) \\<Rightarrow>\n       \\<lambda>n'.\n          graph n n' \\<and>\n          infinite\n           (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n          n' \\<notin> insert n ns)\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))", "by(rule someI_ex)"], ["proof (state)\nthis:\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "let ?n' = \"Eps (?P (n, ns))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "let ?ns' = \"insert n ns\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "have eq: \"insert ?n' ?ns' = insert n (insert ?n' ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     (insert n ns) =\n    insert n\n     (insert\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns))\n       ns)", "by auto"], ["proof (state)\nthis:\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "hence \"n \\<notin> lset (f (?n', ?ns'))\""], ["proof (prove)\nusing this:\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n\ngoal (1 subgoal):\n 1. n \\<notin> lset\n                (f (Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns),\n                    insert n ns))", "using P \\<open>finite ns\\<close>"], ["proof (prove)\nusing this:\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n  finite ns\n\ngoal (1 subgoal):\n 1. n \\<notin> lset\n                (f (Eps (case (n, ns) of\n                         (n, ns) \\<Rightarrow>\n                           \\<lambda>n'.\n                              graph n n' \\<and>\n                              infinite\n                               (reachable_via graph\n                                 (- insert n (insert n' ns)) n') \\<and>\n                              n' \\<notin> insert n ns),\n                    insert n ns))", "by(auto dest: lset)"], ["proof (state)\nthis:\n  n \\<notin> lset\n              (f (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "moreover"], ["proof (state)\nthis:\n  n \\<notin> lset\n              (f (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns))\n\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "from \\<open>finite ns\\<close> P eq"], ["proof (chain)\npicking this:\n  finite ns\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)", "have \"infinite (reachable_via graph (- insert ?n' ?ns') ?n')\""], ["proof (prove)\nusing this:\n  finite ns\n  (case (n, ns) of\n   (n, ns) \\<Rightarrow>\n     \\<lambda>n'.\n        graph n n' \\<and>\n        infinite (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n        n' \\<notin> insert n ns)\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n  insert\n   (Eps (case (n, ns) of\n         (n, ns) \\<Rightarrow>\n           \\<lambda>n'.\n              graph n n' \\<and>\n              infinite\n               (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n              n' \\<notin> insert n ns))\n   (insert n ns) =\n  insert n\n   (insert\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns))\n     ns)\n\ngoal (1 subgoal):\n 1. infinite\n     (reachable_via graph\n       (- insert\n           (Eps (case (n, ns) of\n                 (n, ns) \\<Rightarrow>\n                   \\<lambda>n'.\n                      graph n n' \\<and>\n                      infinite\n                       (reachable_via graph (- insert n (insert n' ns))\n                         n') \\<and>\n                      n' \\<notin> insert n ns))\n           (insert n ns))\n       (Eps (case (n, ns) of\n             (n, ns) \\<Rightarrow>\n               \\<lambda>n'.\n                  graph n n' \\<and>\n                  infinite\n                   (reachable_via graph (- insert n (insert n' ns))\n                     n') \\<and>\n                  n' \\<notin> insert n ns)))", "by simp"], ["proof (state)\nthis:\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))\n\ngoal (1 subgoal):\n 1. \\<And>n ns.\n       \\<lbrakk>infinite (reachable_via graph (- insert n ns) n) \\<and>\n                finite ns;\n        \\<not> lnull (f (n, ns))\\<rbrakk>\n       \\<Longrightarrow> lhd (f (n, ns))\n                         \\<notin> lset (ltl (f (n, ns))) \\<and>\n                         ((\\<exists>na nsa.\n                              ltl (f (n, ns)) = f (na, nsa) \\<and>\n                              infinite\n                               (reachable_via graph (- insert na nsa)\n                                 na) \\<and>\n                              finite nsa) \\<or>\n                          ldistinct (ltl (f (n, ns))))", "ultimately"], ["proof (chain)\npicking this:\n  n \\<notin> lset\n              (f (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns))\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))", "show ?case"], ["proof (prove)\nusing this:\n  n \\<notin> lset\n              (f (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns))\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))\n\ngoal (1 subgoal):\n 1. lhd (f (n, ns)) \\<notin> lset (ltl (f (n, ns))) \\<and>\n    ((\\<exists>n ns.\n         ltl (f (n, ns)) = f (n, ns) \\<and>\n         infinite (reachable_via graph (- insert n ns) n) \\<and>\n         finite ns) \\<or>\n     ldistinct (ltl (f (n, ns))))", "using \\<open>finite ns\\<close>"], ["proof (prove)\nusing this:\n  n \\<notin> lset\n              (f (Eps (case (n, ns) of\n                       (n, ns) \\<Rightarrow>\n                         \\<lambda>n'.\n                            graph n n' \\<and>\n                            infinite\n                             (reachable_via graph\n                               (- insert n (insert n' ns)) n') \\<and>\n                            n' \\<notin> insert n ns),\n                  insert n ns))\n  infinite\n   (reachable_via graph\n     (- insert\n         (Eps (case (n, ns) of\n               (n, ns) \\<Rightarrow>\n                 \\<lambda>n'.\n                    graph n n' \\<and>\n                    infinite\n                     (reachable_via graph (- insert n (insert n' ns))\n                       n') \\<and>\n                    n' \\<notin> insert n ns))\n         (insert n ns))\n     (Eps (case (n, ns) of\n           (n, ns) \\<Rightarrow>\n             \\<lambda>n'.\n                graph n n' \\<and>\n                infinite\n                 (reachable_via graph (- insert n (insert n' ns)) n') \\<and>\n                n' \\<notin> insert n ns)))\n  finite ns\n\ngoal (1 subgoal):\n 1. lhd (f (n, ns)) \\<notin> lset (ltl (f (n, ns))) \\<and>\n    ((\\<exists>n ns.\n         ltl (f (n, ns)) = f (n, ns) \\<and>\n         infinite (reachable_via graph (- insert n ns) n) \\<and>\n         finite ns) \\<or>\n     ldistinct (ltl (f (n, ns))))", "by auto"], ["proof (state)\nthis:\n  lhd (f (n, ns)) \\<notin> lset (ltl (f (n, ns))) \\<and>\n  ((\\<exists>n ns.\n       ltl (f (n, ns)) = f (n, ns) \\<and>\n       infinite (reachable_via graph (- insert n ns) n) \\<and>\n       finite ns) \\<or>\n   ldistinct (ltl (f (n, ns))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ldistinct (f (n, ns))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}