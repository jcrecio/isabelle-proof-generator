{"file_name": "/home/qj213/afp-2021-10-22/thys/Coinductive/Quotient_TLList.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Coinductive", "problem_names": ["lemma tmap_id_id [id_simps]:\n  \"tmap id id = id\"", "lemma case_sum_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  and q3: \"Quotient3 R3 Abs3 Rep3\"\n  shows \"((Abs1 ---> Rep2) ---> (Abs3 ---> Rep2) ---> map_sum Rep1 Rep3 ---> Abs2) case_sum = case_sum\"", "lemma case_sum_preserve2 [quot_preserve]:\n  assumes q: \"Quotient3 R Abs Rep\"\n  shows \"((id ---> Rep) ---> (id ---> Rep) ---> id ---> Abs) case_sum = case_sum\"", "lemma case_prod_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  and q3: \"Quotient3 R3 Abs3 Rep3\"\n  shows \"((Abs1 ---> Abs2 ---> Rep3) ---> map_prod Rep1 Rep2 ---> Abs3) case_prod = case_prod\"", "lemma case_prod_preserve2 [quot_preserve]:\n  assumes q: \"Quotient3 R Abs Rep\"\n  shows \"((id ---> id ---> Rep) ---> id ---> Abs) case_prod = case_prod\"", "lemma id_preserve [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"(Rep ---> Abs) id = id\"", "lemma reflp_tllist_all2:\n  assumes R: \"reflp R\" and Q: \"reflp Q\"\n  shows \"reflp (tllist_all2 R Q)\"", "lemma symp_tllist_all2: \"\\<lbrakk> symp R; symp S \\<rbrakk> \\<Longrightarrow> symp (tllist_all2 R S)\"", "lemma transp_tllist_all2: \"\\<lbrakk> transp R; transp S \\<rbrakk> \\<Longrightarrow> transp (tllist_all2 R S)\"", "lemma tllist_equivp [quot_equiv]:\n  \"\\<lbrakk> equivp R; equivp S \\<rbrakk> \\<Longrightarrow> equivp (tllist_all2 R S)\"", "lemma tmap_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  and q3: \"Quotient3 R3 Abs3 Rep3\"\n  and q4: \"Quotient3 R4 Abs4 Rep4\"\n  shows \"((Abs1 ---> Rep2) ---> (Abs3 ---> Rep4) ---> tmap Rep1 Rep3 ---> tmap Abs2 Abs4) tmap = tmap\"\n  and \"((Abs1 ---> id) ---> (Abs2 ---> id) ---> tmap Rep1 Rep2 ---> id) tmap = tmap\"", "lemmas tmap_respect [quot_respect] = tmap_transfer2", "lemma Quotient3_tmap_Abs_Rep:\n  \"\\<lbrakk>Quotient3 R1 Abs1 Rep1; Quotient3 R2 Abs2 Rep2\\<rbrakk>\n  \\<Longrightarrow> tmap Abs1 Abs2 (tmap Rep1 Rep2 ts) = ts\"", "lemma Quotient3_tllist_all2_tmap_tmapI:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"tllist_all2 R1 R2 (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts)\"", "lemma tllist_all2_rel:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"tllist_all2 R1 R2 r s \\<longleftrightarrow> (tllist_all2 R1 R2 r r \\<and> tllist_all2 R1 R2 s s \\<and> tmap Abs1 Abs2 r = tmap Abs1 Abs2 s)\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma tllist_quotient [quot_thm]:\n  \"\\<lbrakk> Quotient3 R1 Abs1 Rep1; Quotient3 R2 Abs2 Rep2 \\<rbrakk>\n  \\<Longrightarrow> Quotient3 (tllist_all2 R1 R2) (tmap Abs1 Abs2) (tmap Rep1 Rep2)\"", "lemma TCons_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"(Rep1 ---> (tmap Rep1 Rep2) ---> (tmap Abs1 Abs2)) TCons = TCons\"", "lemmas TCons_respect [quot_respect] = TCons_transfer2", "lemma TNil_preserve [quot_preserve]:\n  assumes \"Quotient3 R2 Abs2 Rep2\"\n  shows \"(Rep2 ---> tmap Abs1 Abs2) TNil = TNil\"", "lemmas TNil_respect [quot_respect] = TNil_transfer2", "lemmas tllist_all2_respect [quot_respect] = tllist_all2_transfer", "lemma tllist_all2_prs:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n                     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')\n         \\<longleftrightarrow> tllist_all2 P Q ts ts'\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma tllist_all2_preserve [quot_preserve]:\n  assumes \"Quotient3 R1 Abs1 Rep1\"\n  and \"Quotient3 R2 Abs2 Rep2\"\n  shows \"((Abs1 ---> Abs1 ---> id) ---> (Abs2 ---> Abs2 ---> id) --->\n          tmap Rep1 Rep2 ---> tmap Rep1 Rep2 ---> id) tllist_all2 = tllist_all2\"", "lemma tllist_all2_preserve2 [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"(tllist_all2 ((Rep1 ---> Rep1 ---> id) R1) ((Rep2 ---> Rep2 ---> id) R2)) = (=)\"", "lemma corec_tllist_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  and q3: \"Quotient3 R3 Abs3 Rep3\"\n  shows \"((Abs1 ---> id) ---> (Abs1 ---> Rep2) ---> (Abs1 ---> Rep3) ---> (Abs1 ---> id) ---> (Abs1 ---> tmap Rep3 Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> tmap Abs3 Abs2) corec_tllist = corec_tllist\"\n  (is \"?lhs = ?rhs\")"], "translations": [["", "lemma tmap_id_id [id_simps]:\n  \"tmap id id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tmap id id = id", "by(simp add: fun_eq_iff tllist.map_id)"], ["", "declare tllist_all2_eq[id_simps]"], ["", "lemma case_sum_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  and q3: \"Quotient3 R3 Abs3 Rep3\"\n  shows \"((Abs1 ---> Rep2) ---> (Abs3 ---> Rep2) ---> map_sum Rep1 Rep3 ---> Abs2) case_sum = case_sum\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> Rep2) --->\n     (Abs3 ---> Rep2) ---> map_sum Rep1 Rep3 ---> Abs2)\n     case_sum =\n    case_sum", "using Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2] Quotient3_abs_rep[OF q3]"], ["proof (prove)\nusing this:\n  Abs1 (Rep1 ?a) = ?a\n  Abs2 (Rep2 ?a) = ?a\n  Abs3 (Rep3 ?a) = ?a\n\ngoal (1 subgoal):\n 1. ((Abs1 ---> Rep2) --->\n     (Abs3 ---> Rep2) ---> map_sum Rep1 Rep3 ---> Abs2)\n     case_sum =\n    case_sum", "by(simp add: fun_eq_iff split: sum.split)"], ["", "lemma case_sum_preserve2 [quot_preserve]:\n  assumes q: \"Quotient3 R Abs Rep\"\n  shows \"((id ---> Rep) ---> (id ---> Rep) ---> id ---> Abs) case_sum = case_sum\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((id ---> Rep) ---> (id ---> Rep) ---> id ---> Abs) case_sum = case_sum", "using Quotient3_abs_rep[OF q]"], ["proof (prove)\nusing this:\n  Abs (Rep ?a) = ?a\n\ngoal (1 subgoal):\n 1. ((id ---> Rep) ---> (id ---> Rep) ---> id ---> Abs) case_sum = case_sum", "by(auto intro!: ext split: sum.split)"], ["", "lemma case_prod_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  and q3: \"Quotient3 R3 Abs3 Rep3\"\n  shows \"((Abs1 ---> Abs2 ---> Rep3) ---> map_prod Rep1 Rep2 ---> Abs3) case_prod = case_prod\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> Abs2 ---> Rep3) ---> map_prod Rep1 Rep2 ---> Abs3)\n     case_prod =\n    case_prod", "using Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2] Quotient3_abs_rep[OF q3]"], ["proof (prove)\nusing this:\n  Abs1 (Rep1 ?a) = ?a\n  Abs2 (Rep2 ?a) = ?a\n  Abs3 (Rep3 ?a) = ?a\n\ngoal (1 subgoal):\n 1. ((Abs1 ---> Abs2 ---> Rep3) ---> map_prod Rep1 Rep2 ---> Abs3)\n     case_prod =\n    case_prod", "by(simp add: fun_eq_iff split: prod.split)"], ["", "lemma case_prod_preserve2 [quot_preserve]:\n  assumes q: \"Quotient3 R Abs Rep\"\n  shows \"((id ---> id ---> Rep) ---> id ---> Abs) case_prod = case_prod\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((id ---> id ---> Rep) ---> id ---> Abs) case_prod = case_prod", "using Quotient3_abs_rep[OF q]"], ["proof (prove)\nusing this:\n  Abs (Rep ?a) = ?a\n\ngoal (1 subgoal):\n 1. ((id ---> id ---> Rep) ---> id ---> Abs) case_prod = case_prod", "by(auto intro!: ext)"], ["", "lemma id_preserve [quot_preserve]:\n  assumes \"Quotient3 R Abs Rep\"\n  shows \"(Rep ---> Abs) id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Rep ---> Abs) id = id", "using Quotient3_abs_rep[OF assms]"], ["proof (prove)\nusing this:\n  Abs (Rep ?a) = ?a\n\ngoal (1 subgoal):\n 1. (Rep ---> Abs) id = id", "by(auto intro: ext)"], ["", "functor tmap: tmap"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f g h i.\n        tmap f g \\<circ> tmap h i = tmap (f \\<circ> h) (g \\<circ> i)) &&&\n    tmap id id = id", "by(simp_all add: fun_eq_iff tmap_id_id tllist.map_comp)"], ["", "lemma reflp_tllist_all2:\n  assumes R: \"reflp R\" and Q: \"reflp Q\"\n  shows \"reflp (tllist_all2 R Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflp (tllist_all2 R Q)", "proof(rule reflpI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. tllist_all2 R Q x x", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. tllist_all2 R Q x x", "show \"tllist_all2 R Q xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tllist_all2 R Q xs xs", "apply(coinduction arbitrary: xs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xsa__.\n       is_TNil xsa__ = is_TNil xsa__ \\<and>\n       (is_TNil xsa__ \\<longrightarrow>\n        is_TNil xsa__ \\<longrightarrow>\n        Q (terminal xsa__) (terminal xsa__)) \\<and>\n       (\\<not> is_TNil xsa__ \\<longrightarrow>\n        \\<not> is_TNil xsa__ \\<longrightarrow>\n        R (thd xsa__) (thd xsa__) \\<and>\n        ((\\<exists>xs__. ttl xsa__ = xs__ \\<and> ttl xsa__ = xs__) \\<or>\n         tllist_all2 R Q (ttl xsa__) (ttl xsa__)))", "using assms"], ["proof (prove)\nusing this:\n  reflp R\n  reflp Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa__.\n       is_TNil xsa__ = is_TNil xsa__ \\<and>\n       (is_TNil xsa__ \\<longrightarrow>\n        is_TNil xsa__ \\<longrightarrow>\n        Q (terminal xsa__) (terminal xsa__)) \\<and>\n       (\\<not> is_TNil xsa__ \\<longrightarrow>\n        \\<not> is_TNil xsa__ \\<longrightarrow>\n        R (thd xsa__) (thd xsa__) \\<and>\n        ((\\<exists>xs__. ttl xsa__ = xs__ \\<and> ttl xsa__ = xs__) \\<or>\n         tllist_all2 R Q (ttl xsa__) (ttl xsa__)))", "by(auto elim: reflpE)"], ["proof (state)\nthis:\n  tllist_all2 R Q xs xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma symp_tllist_all2: \"\\<lbrakk> symp R; symp S \\<rbrakk> \\<Longrightarrow> symp (tllist_all2 R S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>symp R; symp S\\<rbrakk>\n    \\<Longrightarrow> symp (tllist_all2 R S)", "by (rule sympI)(auto 4 3 simp add: tllist_all2_conv_all_tnth elim: sympE dest: lfinite_llength_enat not_lfinite_llength)"], ["", "lemma transp_tllist_all2: \"\\<lbrakk> transp R; transp S \\<rbrakk> \\<Longrightarrow> transp (tllist_all2 R S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>transp R; transp S\\<rbrakk>\n    \\<Longrightarrow> transp (tllist_all2 R S)", "by (rule transpI) (rule tllist_all2_trans)"], ["", "lemma tllist_equivp [quot_equiv]:\n  \"\\<lbrakk> equivp R; equivp S \\<rbrakk> \\<Longrightarrow> equivp (tllist_all2 R S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>equivp R; equivp S\\<rbrakk>\n    \\<Longrightarrow> equivp (tllist_all2 R S)", "by (simp add: equivp_reflp_symp_transp reflp_tllist_all2 symp_tllist_all2 transp_tllist_all2)"], ["", "declare tllist_all2_eq [simp, id_simps]"], ["", "lemma tmap_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  and q3: \"Quotient3 R3 Abs3 Rep3\"\n  and q4: \"Quotient3 R4 Abs4 Rep4\"\n  shows \"((Abs1 ---> Rep2) ---> (Abs3 ---> Rep4) ---> tmap Rep1 Rep3 ---> tmap Abs2 Abs4) tmap = tmap\"\n  and \"((Abs1 ---> id) ---> (Abs2 ---> id) ---> tmap Rep1 Rep2 ---> id) tmap = tmap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> Rep2) --->\n     (Abs3 ---> Rep4) ---> tmap Rep1 Rep3 ---> tmap Abs2 Abs4)\n     tmap =\n    tmap &&&\n    ((Abs1 ---> id) ---> (Abs2 ---> id) ---> tmap Rep1 Rep2 ---> id) tmap =\n    tmap", "using Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2] Quotient3_abs_rep[OF q3] Quotient3_abs_rep[OF q4]"], ["proof (prove)\nusing this:\n  Abs1 (Rep1 ?a) = ?a\n  Abs2 (Rep2 ?a) = ?a\n  Abs3 (Rep3 ?a) = ?a\n  Abs4 (Rep4 ?a) = ?a\n\ngoal (1 subgoal):\n 1. ((Abs1 ---> Rep2) --->\n     (Abs3 ---> Rep4) ---> tmap Rep1 Rep3 ---> tmap Abs2 Abs4)\n     tmap =\n    tmap &&&\n    ((Abs1 ---> id) ---> (Abs2 ---> id) ---> tmap Rep1 Rep2 ---> id) tmap =\n    tmap", "by(simp_all add: fun_eq_iff tllist.map_comp o_def)"], ["", "lemmas tmap_respect [quot_respect] = tmap_transfer2"], ["", "lemma Quotient3_tmap_Abs_Rep:\n  \"\\<lbrakk>Quotient3 R1 Abs1 Rep1; Quotient3 R2 Abs2 Rep2\\<rbrakk>\n  \\<Longrightarrow> tmap Abs1 Abs2 (tmap Rep1 Rep2 ts) = ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Quotient3 R1 Abs1 Rep1; Quotient3 R2 Abs2 Rep2\\<rbrakk>\n    \\<Longrightarrow> tmap Abs1 Abs2 (tmap Rep1 Rep2 ts) = ts", "by(drule abs_o_rep)+(simp add: tllist.map_comp tmap_id_id)"], ["", "lemma Quotient3_tllist_all2_tmap_tmapI:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"tllist_all2 R1 R2 (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts)", "by(coinduction arbitrary: ts)(auto simp add: Quotient3_rep_reflp[OF q1] Quotient3_rep_reflp[OF q2])"], ["", "lemma tllist_all2_rel:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"tllist_all2 R1 R2 r s \\<longleftrightarrow> (tllist_all2 R1 R2 r r \\<and> tllist_all2 R1 R2 s s \\<and> tmap Abs1 Abs2 r = tmap Abs1 Abs2 s)\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r s =\n    (tllist_all2 R1 R2 r r \\<and>\n     tllist_all2 R1 R2 s s \\<and> tmap Abs1 Abs2 r = tmap Abs1 Abs2 s)", "proof(intro iffI conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. tllist_all2 R1 R2 r s \\<Longrightarrow> tllist_all2 R1 R2 r r\n 2. tllist_all2 R1 R2 r s \\<Longrightarrow> tllist_all2 R1 R2 s s\n 3. tllist_all2 R1 R2 r s \\<Longrightarrow>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s\n 4. tllist_all2 R1 R2 r r \\<and>\n    tllist_all2 R1 R2 s s \\<and>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s \\<Longrightarrow>\n    tllist_all2 R1 R2 r s", "assume \"?lhs\""], ["proof (state)\nthis:\n  tllist_all2 R1 R2 r s\n\ngoal (4 subgoals):\n 1. tllist_all2 R1 R2 r s \\<Longrightarrow> tllist_all2 R1 R2 r r\n 2. tllist_all2 R1 R2 r s \\<Longrightarrow> tllist_all2 R1 R2 s s\n 3. tllist_all2 R1 R2 r s \\<Longrightarrow>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s\n 4. tllist_all2 R1 R2 r r \\<and>\n    tllist_all2 R1 R2 s s \\<and>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s \\<Longrightarrow>\n    tllist_all2 R1 R2 r s", "thus \"tllist_all2 R1 R2 r r\""], ["proof (prove)\nusing this:\n  tllist_all2 R1 R2 r s\n\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r r", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r s \\<Longrightarrow> tllist_all2 R1 R2 r r", "apply(rule tllist_all2_reflI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>tllist_all2 R1 R2 r s; x \\<in> tset r\\<rbrakk>\n       \\<Longrightarrow> R1 x x\n 2. \\<lbrakk>tllist_all2 R1 R2 r s; tfinite r\\<rbrakk>\n    \\<Longrightarrow> R2 (terminal r) (terminal r)", "apply(clarsimp simp add: in_tset_conv_tnth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>tllist_all2 R1 R2 r s; enat n < tlength r\\<rbrakk>\n       \\<Longrightarrow> R1 (tnth r n) (tnth r n)\n 2. \\<lbrakk>tllist_all2 R1 R2 r s; tfinite r\\<rbrakk>\n    \\<Longrightarrow> R2 (terminal r) (terminal r)", "apply(metis tllist_all2_tnthD Quotient3_rel [OF q1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tllist_all2 R1 R2 r s; tfinite r\\<rbrakk>\n    \\<Longrightarrow> R2 (terminal r) (terminal r)", "apply(metis tllist_all2_tfinite1_terminalD Quotient3_rel [OF q2])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  tllist_all2 R1 R2 r r\n\ngoal (3 subgoals):\n 1. tllist_all2 R1 R2 r s \\<Longrightarrow> tllist_all2 R1 R2 s s\n 2. tllist_all2 R1 R2 r s \\<Longrightarrow>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s\n 3. tllist_all2 R1 R2 r r \\<and>\n    tllist_all2 R1 R2 s s \\<and>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s \\<Longrightarrow>\n    tllist_all2 R1 R2 r s", "from \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  tllist_all2 R1 R2 r s", "show \"tllist_all2 R1 R2 s s\""], ["proof (prove)\nusing this:\n  tllist_all2 R1 R2 r s\n\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 s s", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r s \\<Longrightarrow> tllist_all2 R1 R2 s s", "apply(rule tllist_all2_reflI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>tllist_all2 R1 R2 r s; x \\<in> tset s\\<rbrakk>\n       \\<Longrightarrow> R1 x x\n 2. \\<lbrakk>tllist_all2 R1 R2 r s; tfinite s\\<rbrakk>\n    \\<Longrightarrow> R2 (terminal s) (terminal s)", "apply(clarsimp simp add: in_tset_conv_tnth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>tllist_all2 R1 R2 r s; enat n < tlength s\\<rbrakk>\n       \\<Longrightarrow> R1 (tnth s n) (tnth s n)\n 2. \\<lbrakk>tllist_all2 R1 R2 r s; tfinite s\\<rbrakk>\n    \\<Longrightarrow> R2 (terminal s) (terminal s)", "apply(metis tllist_all2_tnthD2 Quotient3_rel [OF q1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tllist_all2 R1 R2 r s; tfinite s\\<rbrakk>\n    \\<Longrightarrow> R2 (terminal s) (terminal s)", "apply(metis tllist_all2_tfinite2_terminalD Quotient3_rel [OF q2])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  tllist_all2 R1 R2 s s\n\ngoal (2 subgoals):\n 1. tllist_all2 R1 R2 r s \\<Longrightarrow>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s\n 2. tllist_all2 R1 R2 r r \\<and>\n    tllist_all2 R1 R2 s s \\<and>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s \\<Longrightarrow>\n    tllist_all2 R1 R2 r s", "from \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  tllist_all2 R1 R2 r s", "show \"tmap Abs1 Abs2 r = tmap Abs1 Abs2 s\""], ["proof (prove)\nusing this:\n  tllist_all2 R1 R2 r s\n\ngoal (1 subgoal):\n 1. tmap Abs1 Abs2 r = tmap Abs1 Abs2 s", "unfolding tmap_eq_tmap_conv_tllist_all2"], ["proof (prove)\nusing this:\n  tllist_all2 R1 R2 r s\n\ngoal (1 subgoal):\n 1. tllist_all2 (\\<lambda>x y. Abs1 x = Abs1 y)\n     (\\<lambda>x y. Abs2 x = Abs2 y) r s", "by(rule tllist_all2_mono)(metis Quotient3_rel[OF q1] Quotient3_rel[OF q2])+"], ["proof (state)\nthis:\n  tmap Abs1 Abs2 r = tmap Abs1 Abs2 s\n\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r r \\<and>\n    tllist_all2 R1 R2 s s \\<and>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s \\<Longrightarrow>\n    tllist_all2 R1 R2 r s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r r \\<and>\n    tllist_all2 R1 R2 s s \\<and>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s \\<Longrightarrow>\n    tllist_all2 R1 R2 r s", "assume \"?rhs\""], ["proof (state)\nthis:\n  tllist_all2 R1 R2 r r \\<and>\n  tllist_all2 R1 R2 s s \\<and> tmap Abs1 Abs2 r = tmap Abs1 Abs2 s\n\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r r \\<and>\n    tllist_all2 R1 R2 s s \\<and>\n    tmap Abs1 Abs2 r = tmap Abs1 Abs2 s \\<Longrightarrow>\n    tllist_all2 R1 R2 r s", "thus \"?lhs\""], ["proof (prove)\nusing this:\n  tllist_all2 R1 R2 r r \\<and>\n  tllist_all2 R1 R2 s s \\<and> tmap Abs1 Abs2 r = tmap Abs1 Abs2 s\n\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r s", "unfolding tmap_eq_tmap_conv_tllist_all2"], ["proof (prove)\nusing this:\n  tllist_all2 R1 R2 r r \\<and>\n  tllist_all2 R1 R2 s s \\<and>\n  tllist_all2 (\\<lambda>x y. Abs1 x = Abs1 y)\n   (\\<lambda>x y. Abs2 x = Abs2 y) r s\n\ngoal (1 subgoal):\n 1. tllist_all2 R1 R2 r s", "apply(clarsimp simp add: tllist_all2_conv_all_tnth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n.\n                enat n < tlength s \\<longrightarrow>\n                R1 (tnth r n) (tnth r n);\n     tfinite r \\<longrightarrow> R2 (terminal r) (terminal r);\n     \\<forall>n.\n        enat n < tlength s \\<longrightarrow> R1 (tnth s n) (tnth s n);\n     tfinite s \\<longrightarrow> R2 (terminal s) (terminal s);\n     tlength r = tlength s;\n     \\<forall>n.\n        enat n < tlength s \\<longrightarrow>\n        Abs1 (tnth r n) = Abs1 (tnth s n);\n     tfinite r \\<longrightarrow>\n     Abs2 (terminal r) = Abs2 (terminal s)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>n.\n                          enat n < tlength s \\<longrightarrow>\n                          R1 (tnth r n) (tnth s n)) \\<and>\n                      (tfinite r \\<longrightarrow>\n                       R2 (terminal r) (terminal s))", "apply(subst Quotient3_rel[OF q1, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n.\n                enat n < tlength s \\<longrightarrow>\n                R1 (tnth r n) (tnth r n);\n     tfinite r \\<longrightarrow> R2 (terminal r) (terminal r);\n     \\<forall>n.\n        enat n < tlength s \\<longrightarrow> R1 (tnth s n) (tnth s n);\n     tfinite s \\<longrightarrow> R2 (terminal s) (terminal s);\n     tlength r = tlength s;\n     \\<forall>n.\n        enat n < tlength s \\<longrightarrow>\n        Abs1 (tnth r n) = Abs1 (tnth s n);\n     tfinite r \\<longrightarrow>\n     Abs2 (terminal r) = Abs2 (terminal s)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>n.\n                          enat n < tlength s \\<longrightarrow>\n                          R1 (tnth r n) (tnth r n) \\<and>\n                          R1 (tnth s n) (tnth s n) \\<and>\n                          Abs1 (tnth r n) = Abs1 (tnth s n)) \\<and>\n                      (tfinite r \\<longrightarrow>\n                       R2 (terminal r) (terminal s))", "apply(subst Quotient3_rel[OF q2, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n.\n                enat n < tlength s \\<longrightarrow>\n                R1 (tnth r n) (tnth r n);\n     tfinite r \\<longrightarrow> R2 (terminal r) (terminal r);\n     \\<forall>n.\n        enat n < tlength s \\<longrightarrow> R1 (tnth s n) (tnth s n);\n     tfinite s \\<longrightarrow> R2 (terminal s) (terminal s);\n     tlength r = tlength s;\n     \\<forall>n.\n        enat n < tlength s \\<longrightarrow>\n        Abs1 (tnth r n) = Abs1 (tnth s n);\n     tfinite r \\<longrightarrow>\n     Abs2 (terminal r) = Abs2 (terminal s)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>n.\n                          enat n < tlength s \\<longrightarrow>\n                          R1 (tnth r n) (tnth r n) \\<and>\n                          R1 (tnth s n) (tnth s n) \\<and>\n                          Abs1 (tnth r n) = Abs1 (tnth s n)) \\<and>\n                      (tfinite r \\<longrightarrow>\n                       R2 (terminal r) (terminal r) \\<and>\n                       R2 (terminal s) (terminal s) \\<and>\n                       Abs2 (terminal r) = Abs2 (terminal s))", "apply(auto 4 3 dest: lfinite_llength_enat not_lfinite_llength)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  tllist_all2 R1 R2 r s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tllist_quotient [quot_thm]:\n  \"\\<lbrakk> Quotient3 R1 Abs1 Rep1; Quotient3 R2 Abs2 Rep2 \\<rbrakk>\n  \\<Longrightarrow> Quotient3 (tllist_all2 R1 R2) (tmap Abs1 Abs2) (tmap Rep1 Rep2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Quotient3 R1 Abs1 Rep1; Quotient3 R2 Abs2 Rep2\\<rbrakk>\n    \\<Longrightarrow> Quotient3 (tllist_all2 R1 R2) (tmap Abs1 Abs2)\n                       (tmap Rep1 Rep2)", "by(blast intro: Quotient3I dest: Quotient3_tmap_Abs_Rep Quotient3_tllist_all2_tmap_tmapI tllist_all2_rel)"], ["", "declare [[mapQ3 tllist = (tllist_all2, tllist_quotient)]]"], ["", "lemma TCons_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"(Rep1 ---> (tmap Rep1 Rep2) ---> (tmap Abs1 Abs2)) TCons = TCons\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Rep1 ---> tmap Rep1 Rep2 ---> tmap Abs1 Abs2) TCons = TCons", "using Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2]"], ["proof (prove)\nusing this:\n  Abs1 (Rep1 ?a) = ?a\n  Abs2 (Rep2 ?a) = ?a\n\ngoal (1 subgoal):\n 1. (Rep1 ---> tmap Rep1 Rep2 ---> tmap Abs1 Abs2) TCons = TCons", "by(simp add: fun_eq_iff tllist.map_comp o_def tmap_id_id[unfolded id_def])"], ["", "lemmas TCons_respect [quot_respect] = TCons_transfer2"], ["", "lemma TNil_preserve [quot_preserve]:\n  assumes \"Quotient3 R2 Abs2 Rep2\"\n  shows \"(Rep2 ---> tmap Abs1 Abs2) TNil = TNil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Rep2 ---> tmap Abs1 Abs2) TNil = TNil", "using Quotient3_abs_rep[OF assms]"], ["proof (prove)\nusing this:\n  Abs2 (Rep2 ?a) = ?a\n\ngoal (1 subgoal):\n 1. (Rep2 ---> tmap Abs1 Abs2) TNil = TNil", "by(simp add: fun_eq_iff)"], ["", "lemmas TNil_respect [quot_respect] = TNil_transfer2"], ["", "lemmas tllist_all2_respect [quot_respect] = tllist_all2_transfer"], ["", "lemma tllist_all2_prs:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n                     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')\n         \\<longleftrightarrow> tllist_all2 P Q ts ts'\"\n  (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts') =\n    tllist_all2 P Q ts ts'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts') \\<Longrightarrow>\n    tllist_all2 P Q ts ts'\n 2. tllist_all2 P Q ts ts' \\<Longrightarrow>\n    tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')", "assume ?lhs"], ["proof (state)\nthis:\n  tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n   (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')\n\ngoal (2 subgoals):\n 1. tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts') \\<Longrightarrow>\n    tllist_all2 P Q ts ts'\n 2. tllist_all2 P Q ts ts' \\<Longrightarrow>\n    tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')", "thus ?rhs"], ["proof (prove)\nusing this:\n  tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n   (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')\n\ngoal (1 subgoal):\n 1. tllist_all2 P Q ts ts'", "proof(coinduct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n        (tmap Rep1 Rep2 xs) (tmap Rep1 Rep2 ys) \\<Longrightarrow>\n       is_TNil xs = is_TNil ys \\<and>\n       (is_TNil xs \\<longrightarrow>\n        is_TNil ys \\<longrightarrow> Q (terminal xs) (terminal ys)) \\<and>\n       (\\<not> is_TNil xs \\<longrightarrow>\n        \\<not> is_TNil ys \\<longrightarrow>\n        P (thd xs) (thd ys) \\<and>\n        (tllist_all2 ((Abs1 ---> Abs1 ---> id) P)\n          ((Abs2 ---> Abs2 ---> id) Q) (tmap Rep1 Rep2 (ttl xs))\n          (tmap Rep1 Rep2 (ttl ys)) \\<or>\n         tllist_all2 P Q (ttl xs) (ttl ys)))", "case (tllist_all2 ts ts')"], ["proof (state)\nthis:\n  tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n   (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')\n\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n        (tmap Rep1 Rep2 xs) (tmap Rep1 Rep2 ys) \\<Longrightarrow>\n       is_TNil xs = is_TNil ys \\<and>\n       (is_TNil xs \\<longrightarrow>\n        is_TNil ys \\<longrightarrow> Q (terminal xs) (terminal ys)) \\<and>\n       (\\<not> is_TNil xs \\<longrightarrow>\n        \\<not> is_TNil ys \\<longrightarrow>\n        P (thd xs) (thd ys) \\<and>\n        (tllist_all2 ((Abs1 ---> Abs1 ---> id) P)\n          ((Abs2 ---> Abs2 ---> id) Q) (tmap Rep1 Rep2 (ttl xs))\n          (tmap Rep1 Rep2 (ttl ys)) \\<or>\n         tllist_all2 P Q (ttl xs) (ttl ys)))", "thus ?case"], ["proof (prove)\nusing this:\n  tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n   (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')\n\ngoal (1 subgoal):\n 1. is_TNil ts = is_TNil ts' \\<and>\n    (is_TNil ts \\<longrightarrow>\n     is_TNil ts' \\<longrightarrow> Q (terminal ts) (terminal ts')) \\<and>\n    (\\<not> is_TNil ts \\<longrightarrow>\n     \\<not> is_TNil ts' \\<longrightarrow>\n     P (thd ts) (thd ts') \\<and>\n     (tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n       (tmap Rep1 Rep2 (ttl ts)) (tmap Rep1 Rep2 (ttl ts')) \\<or>\n      tllist_all2 P Q (ttl ts) (ttl ts')))", "using Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2]"], ["proof (prove)\nusing this:\n  tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n   (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')\n  Abs1 (Rep1 ?a) = ?a\n  Abs2 (Rep2 ?a) = ?a\n\ngoal (1 subgoal):\n 1. is_TNil ts = is_TNil ts' \\<and>\n    (is_TNil ts \\<longrightarrow>\n     is_TNil ts' \\<longrightarrow> Q (terminal ts) (terminal ts')) \\<and>\n    (\\<not> is_TNil ts \\<longrightarrow>\n     \\<not> is_TNil ts' \\<longrightarrow>\n     P (thd ts) (thd ts') \\<and>\n     (tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n       (tmap Rep1 Rep2 (ttl ts)) (tmap Rep1 Rep2 (ttl ts')) \\<or>\n      tllist_all2 P Q (ttl ts) (ttl ts')))", "by(cases ts)(case_tac [!] ts', auto simp add: tllist_all2_TNil1 tllist_all2_TCons1)"], ["proof (state)\nthis:\n  is_TNil ts = is_TNil ts' \\<and>\n  (is_TNil ts \\<longrightarrow>\n   is_TNil ts' \\<longrightarrow> Q (terminal ts) (terminal ts')) \\<and>\n  (\\<not> is_TNil ts \\<longrightarrow>\n   \\<not> is_TNil ts' \\<longrightarrow>\n   P (thd ts) (thd ts') \\<and>\n   (tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 (ttl ts)) (tmap Rep1 Rep2 (ttl ts')) \\<or>\n    tllist_all2 P Q (ttl ts) (ttl ts')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tllist_all2 P Q ts ts'\n\ngoal (1 subgoal):\n 1. tllist_all2 P Q ts ts' \\<Longrightarrow>\n    tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. tllist_all2 P Q ts ts' \\<Longrightarrow>\n    tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')", "assume ?rhs"], ["proof (state)\nthis:\n  tllist_all2 P Q ts ts'\n\ngoal (1 subgoal):\n 1. tllist_all2 P Q ts ts' \\<Longrightarrow>\n    tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')", "thus ?lhs"], ["proof (prove)\nusing this:\n  tllist_all2 P Q ts ts'\n\ngoal (1 subgoal):\n 1. tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n     (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')", "apply(coinduction arbitrary: ts ts')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ts ts'.\n       tllist_all2 P Q ts ts' \\<Longrightarrow>\n       is_TNil (tmap Rep1 Rep2 ts) = is_TNil (tmap Rep1 Rep2 ts') \\<and>\n       (is_TNil (tmap Rep1 Rep2 ts) \\<longrightarrow>\n        is_TNil (tmap Rep1 Rep2 ts') \\<longrightarrow>\n        (Abs2 ---> Abs2 ---> id) Q (terminal (tmap Rep1 Rep2 ts))\n         (terminal (tmap Rep1 Rep2 ts'))) \\<and>\n       (\\<not> is_TNil (tmap Rep1 Rep2 ts) \\<longrightarrow>\n        \\<not> is_TNil (tmap Rep1 Rep2 ts') \\<longrightarrow>\n        (Abs1 ---> Abs1 ---> id) P (thd (tmap Rep1 Rep2 ts))\n         (thd (tmap Rep1 Rep2 ts')) \\<and>\n        ((\\<exists>tsa ts'a.\n             ttl (tmap Rep1 Rep2 ts) = tmap Rep1 Rep2 tsa \\<and>\n             ttl (tmap Rep1 Rep2 ts') = tmap Rep1 Rep2 ts'a \\<and>\n             tllist_all2 P Q tsa ts'a) \\<or>\n         tllist_all2 ((Abs1 ---> Abs1 ---> id) P)\n          ((Abs2 ---> Abs2 ---> id) Q) (ttl (tmap Rep1 Rep2 ts))\n          (ttl (tmap Rep1 Rep2 ts'))))", "using Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2]"], ["proof (prove)\nusing this:\n  Abs1 (Rep1 ?a) = ?a\n  Abs2 (Rep2 ?a) = ?a\n\ngoal (1 subgoal):\n 1. \\<And>ts ts'.\n       tllist_all2 P Q ts ts' \\<Longrightarrow>\n       is_TNil (tmap Rep1 Rep2 ts) = is_TNil (tmap Rep1 Rep2 ts') \\<and>\n       (is_TNil (tmap Rep1 Rep2 ts) \\<longrightarrow>\n        is_TNil (tmap Rep1 Rep2 ts') \\<longrightarrow>\n        (Abs2 ---> Abs2 ---> id) Q (terminal (tmap Rep1 Rep2 ts))\n         (terminal (tmap Rep1 Rep2 ts'))) \\<and>\n       (\\<not> is_TNil (tmap Rep1 Rep2 ts) \\<longrightarrow>\n        \\<not> is_TNil (tmap Rep1 Rep2 ts') \\<longrightarrow>\n        (Abs1 ---> Abs1 ---> id) P (thd (tmap Rep1 Rep2 ts))\n         (thd (tmap Rep1 Rep2 ts')) \\<and>\n        ((\\<exists>tsa ts'a.\n             ttl (tmap Rep1 Rep2 ts) = tmap Rep1 Rep2 tsa \\<and>\n             ttl (tmap Rep1 Rep2 ts') = tmap Rep1 Rep2 ts'a \\<and>\n             tllist_all2 P Q tsa ts'a) \\<or>\n         tllist_all2 ((Abs1 ---> Abs1 ---> id) P)\n          ((Abs2 ---> Abs2 ---> id) Q) (ttl (tmap Rep1 Rep2 ts))\n          (ttl (tmap Rep1 Rep2 ts'))))", "by(auto dest: tllist_all2_is_TNilD intro: tllist_all2_tfinite1_terminalD tllist_all2_thdD tllist_all2_ttlI)"], ["proof (state)\nthis:\n  tllist_all2 ((Abs1 ---> Abs1 ---> id) P) ((Abs2 ---> Abs2 ---> id) Q)\n   (tmap Rep1 Rep2 ts) (tmap Rep1 Rep2 ts')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tllist_all2_preserve [quot_preserve]:\n  assumes \"Quotient3 R1 Abs1 Rep1\"\n  and \"Quotient3 R2 Abs2 Rep2\"\n  shows \"((Abs1 ---> Abs1 ---> id) ---> (Abs2 ---> Abs2 ---> id) --->\n          tmap Rep1 Rep2 ---> tmap Rep1 Rep2 ---> id) tllist_all2 = tllist_all2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> Abs1 ---> id) --->\n     (Abs2 ---> Abs2 ---> id) --->\n     tmap Rep1 Rep2 ---> tmap Rep1 Rep2 ---> id)\n     tllist_all2 =\n    tllist_all2", "by(simp add: fun_eq_iff tllist_all2_prs[OF assms])"], ["", "lemma tllist_all2_preserve2 [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  shows \"(tllist_all2 ((Rep1 ---> Rep1 ---> id) R1) ((Rep2 ---> Rep2 ---> id) R2)) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tllist_all2 ((Rep1 ---> Rep1 ---> id) R1)\n     ((Rep2 ---> Rep2 ---> id) R2) =\n    (=)", "by (simp add: fun_eq_iff map_fun_def comp_def Quotient3_rel_rep[OF q1] Quotient3_rel_rep[OF q2]\n    tllist_all2_eq)"], ["", "lemma corec_tllist_preserve [quot_preserve]:\n  assumes q1: \"Quotient3 R1 Abs1 Rep1\"\n  and q2: \"Quotient3 R2 Abs2 Rep2\"\n  and q3: \"Quotient3 R3 Abs3 Rep3\"\n  shows \"((Abs1 ---> id) ---> (Abs1 ---> Rep2) ---> (Abs1 ---> Rep3) ---> (Abs1 ---> id) ---> (Abs1 ---> tmap Rep3 Rep2) ---> (Abs1 ---> Rep1) ---> Rep1 ---> tmap Abs3 Abs2) corec_tllist = corec_tllist\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> id) --->\n     (Abs1 ---> Rep2) --->\n     (Abs1 ---> Rep3) --->\n     (Abs1 ---> id) --->\n     (Abs1 ---> tmap Rep3 Rep2) --->\n     (Abs1 ---> Rep1) ---> Rep1 ---> tmap Abs3 Abs2)\n     corec_tllist =\n    corec_tllist", "proof(intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf.\n       ((Abs1 ---> id) --->\n        (Abs1 ---> Rep2) --->\n        (Abs1 ---> Rep3) --->\n        (Abs1 ---> id) --->\n        (Abs1 ---> tmap Rep3 Rep2) --->\n        (Abs1 ---> Rep1) ---> Rep1 ---> tmap Abs3 Abs2)\n        corec_tllist x xa xb xc xd xe xf =\n       corec_tllist x xa xb xc xd xe xf", "fix IS_TNIL TNIL THD endORmore TTL_end TTL_more b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc xd xe xf.\n       ((Abs1 ---> id) --->\n        (Abs1 ---> Rep2) --->\n        (Abs1 ---> Rep3) --->\n        (Abs1 ---> id) --->\n        (Abs1 ---> tmap Rep3 Rep2) --->\n        (Abs1 ---> Rep1) ---> Rep1 ---> tmap Abs3 Abs2)\n        corec_tllist x xa xb xc xd xe xf =\n       corec_tllist x xa xb xc xd xe xf", "show \"?lhs IS_TNIL TNIL THD endORmore TTL_end TTL_more b = ?rhs IS_TNIL TNIL THD endORmore TTL_end TTL_more b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Abs1 ---> id) --->\n     (Abs1 ---> Rep2) --->\n     (Abs1 ---> Rep3) --->\n     (Abs1 ---> id) --->\n     (Abs1 ---> tmap Rep3 Rep2) --->\n     (Abs1 ---> Rep1) ---> Rep1 ---> tmap Abs3 Abs2)\n     corec_tllist IS_TNIL TNIL THD endORmore TTL_end TTL_more b =\n    corec_tllist IS_TNIL TNIL THD endORmore TTL_end TTL_more b", "by(coinduction arbitrary: b rule: tllist.coinduct_strong)(auto simp add: Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2] Quotient3_abs_rep[OF q3] Quotient3_tmap_Abs_Rep[OF q3 q2])"], ["proof (state)\nthis:\n  ((Abs1 ---> id) --->\n   (Abs1 ---> Rep2) --->\n   (Abs1 ---> Rep3) --->\n   (Abs1 ---> id) --->\n   (Abs1 ---> tmap Rep3 Rep2) --->\n   (Abs1 ---> Rep1) ---> Rep1 ---> tmap Abs3 Abs2)\n   corec_tllist IS_TNIL TNIL THD endORmore TTL_end TTL_more b =\n  corec_tllist IS_TNIL TNIL THD endORmore TTL_end TTL_more b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}