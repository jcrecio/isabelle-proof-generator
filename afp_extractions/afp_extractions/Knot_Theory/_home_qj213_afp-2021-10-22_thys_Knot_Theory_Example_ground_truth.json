{"file_name": "/home/qj213/afp-2021-10-22/thys/Knot_Theory/Example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Knot_Theory", "problem_names": ["lemma transitive: assumes \"a~b\" and \"b~c\" shows \"a~c\"", "lemma prelim_cup_compress:\n \" ((basic (cup#[])) \\<circ> (basic (vert # vert # []))) ~\n      ((basic [])\\<circ>(basic (cup#[])))\"", "lemma cup_compress:\n \"(basic (cup#[])) \\<circ> (basic (vert # vert # [])) ~ (basic (cup#[]))\"", "lemma uncross_straighten_left_over:\"left_over ~ straight_line\"", "theorem Example:\n  \"x ~ y\""], "translations": [["", "lemma transitive: assumes \"a~b\" and \"b~c\" shows \"a~c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ~ c", "using Tangle_Equivalence.trans assms(1) assms(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A ~ ?B; ?B ~ ?C\\<rbrakk> \\<Longrightarrow> ?A ~ ?C\n  a ~ b\n  b ~ c\n\ngoal (1 subgoal):\n 1. a ~ c", "by metis"], ["", "lemma prelim_cup_compress:\n \" ((basic (cup#[])) \\<circ> (basic (vert # vert # []))) ~\n      ((basic [])\\<circ>(basic (cup#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "have \"domain_wall (basic (cup # [])) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (basic [cup]) = 0", "by auto"], ["proof (state)\nthis:\n  domain_wall (basic [cup]) = 0\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "moreover"], ["proof (state)\nthis:\n  domain_wall (basic [cup]) = 0\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "have \"codomain_wall (basic (cup # [])) = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic [cup]) = 2", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic [cup]) = 2\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "moreover"], ["proof (state)\nthis:\n  codomain_wall (basic [cup]) = 2\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "have \"make_vert_block (nat (codomain_wall (basic (cup # [])))) \n                                    = (vert # vert # [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. make_vert_block (nat (codomain_wall (basic [cup]))) = [vert, vert]", "unfolding make_vert_block_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_nat [] (\\<lambda>n. (#) vert) (nat (codomain_wall (basic [cup]))) =\n    [vert, vert]", "by auto"], ["proof (state)\nthis:\n  make_vert_block (nat (codomain_wall (basic [cup]))) = [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "moreover"], ["proof (state)\nthis:\n  make_vert_block (nat (codomain_wall (basic [cup]))) = [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "have \"is_tangle_diagram   ((basic (cup#[])) \\<circ> (basic (vert # vert # [])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])", "using is_tangle_diagram.simps"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic ?x) = True\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (basic [cup]) = 0\n  codomain_wall (basic [cup]) = 2\n  make_vert_block (nat (codomain_wall (basic [cup]))) = [vert, vert]\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])", "have \"compress_bottom \n          ((basic (cup#[])) \\<circ> (basic (vert # vert # []))) \n          ((basic []) \\<circ>(basic (cup#[])))\""], ["proof (prove)\nusing this:\n  domain_wall (basic [cup]) = 0\n  codomain_wall (basic [cup]) = 2\n  make_vert_block (nat (codomain_wall (basic [cup]))) = [vert, vert]\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. compress_bottom (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup])", "using compress_bottom_def"], ["proof (prove)\nusing this:\n  domain_wall (basic [cup]) = 0\n  codomain_wall (basic [cup]) = 2\n  make_vert_block (nat (codomain_wall (basic [cup]))) = [vert, vert]\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  compress_bottom ?x ?y \\<equiv>\n  \\<exists>B.\n     ?x = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n     ?y = basic [] \\<circ> B \\<and>\n     domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. compress_bottom (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup])", "by (metis is_tangle_diagram.simps(1))"], ["proof (state)\nthis:\n  compress_bottom (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "then"], ["proof (chain)\npicking this:\n  compress_bottom (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])", "have \"compress  ((basic (cup#[])) \\<circ> (basic (vert # vert # []))) \n      ((basic [])\\<circ>(basic (cup#[])))\""], ["proof (prove)\nusing this:\n  compress_bottom (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. compress (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup])", "using compress_def"], ["proof (prove)\nusing this:\n  compress_bottom (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n  compress ?x ?y = (compress_top ?x ?y \\<or> compress_bottom ?x ?y)\n\ngoal (1 subgoal):\n 1. compress (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup])", "by auto"], ["proof (state)\nthis:\n  compress (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "then"], ["proof (chain)\npicking this:\n  compress (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])", "have \"linkrel ((basic (cup#[])) \\<circ> (basic (vert # vert # []))) \n      ((basic [])\\<circ>(basic (cup#[])))\""], ["proof (prove)\nusing this:\n  compress (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. linkrel (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup])", "unfolding linkrel_def"], ["proof (prove)\nusing this:\n  compress (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. uncross (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup]) \\<or>\n    pull (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup]) \\<or>\n    straighten (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup]) \\<or>\n    swing (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup]) \\<or>\n    Tangle_Moves.rotate (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup]) \\<or>\n    compress (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup]) \\<or>\n    slide (basic [cup] \\<circ> basic [vert, vert])\n     (basic [] \\<circ> basic [cup])", "by auto"], ["proof (state)\nthis:\n  linkrel (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "then"], ["proof (chain)\npicking this:\n  linkrel (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])", "show ?thesis"], ["proof (prove)\nusing this:\n  linkrel (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "using Tangle_Equivalence.equality compress_bottom_def \n           Tangle_Moves.compress_bottom_def Tangle_Moves.compress_def \n           Tangle_Moves.linkrel_def"], ["proof (prove)\nusing this:\n  linkrel (basic [cup] \\<circ> basic [vert, vert])\n   (basic [] \\<circ> basic [cup])\n  linkrel ?a ?b \\<Longrightarrow> ?a ~ ?b\n  compress_bottom ?x ?y \\<equiv>\n  \\<exists>B.\n     ?x = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n     ?y = basic [] \\<circ> B \\<and>\n     domain_wall B = 0 \\<and> is_tangle_diagram B\n  compress_bottom ?x ?y \\<equiv>\n  \\<exists>B.\n     ?x = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n     ?y = basic [] \\<circ> B \\<and>\n     domain_wall B = 0 \\<and> is_tangle_diagram B\n  compress ?x ?y = (compress_top ?x ?y \\<or> compress_bottom ?x ?y)\n  linkrel ?x ?y =\n  (uncross ?x ?y \\<or>\n   pull ?x ?y \\<or>\n   straighten ?x ?y \\<or>\n   swing ?x ?y \\<or>\n   Tangle_Moves.rotate ?x ?y \\<or> compress ?x ?y \\<or> slide ?x ?y)\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cup_compress:\n \"(basic (cup#[])) \\<circ> (basic (vert # vert # [])) ~ (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "have \" ((basic (cup#[])) \\<circ> (basic (vert # vert # []))) ~\n      ((basic [])\\<circ>(basic (cup#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "using prelim_cup_compress"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "moreover"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "have \"((basic [])\\<circ>(basic (cup#[]))) ~  (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] ~ basic [cup]", "using domain_compose refl sym Tangle_Equivalence.domain_compose \n         Tangle_Equivalence.sym domain.simps(2) domain_block.simps \n         domain_wall.simps(1) \n         is_tangle_diagram.simps(1) monoid_add_class.add.right_neutral"], ["proof (prove)\nusing this:\n  domain_wall ?a = 0 \\<and> is_tangle_diagram ?a \\<Longrightarrow>\n  ?a ~f basic [] \\<circ> ?a\n  ?a ~f ?a\n  ?A ~f ?B \\<Longrightarrow> ?B ~f ?A\n  domain_wall ?a = 0 \\<and> is_tangle_diagram ?a \\<Longrightarrow>\n  ?a ~ basic [] \\<circ> ?a\n  ?A ~ ?B \\<Longrightarrow> ?B ~ ?A\n  domain cup = 0\n  domain_block [] = 0\n  domain_block (?x # ?y) = domain ?x + domain_block ?y\n  domain_wall (basic ?x) = domain_block ?x\n  is_tangle_diagram (basic ?x) = True\n  ?a + (0::?'a) = ?a\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] ~ basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "ultimately"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n  basic [] \\<circ> basic [cup] ~ basic [cup]", "show ?thesis"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n  basic [] \\<circ> basic [cup] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "using trans"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n  basic [] \\<circ> basic [cup] ~ basic [cup]\n  \\<lbrakk>?A ~f ?B; ?B ~f ?C\\<rbrakk> \\<Longrightarrow> ?A ~f ?C\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "by (metis Example.transitive)"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation x::\"wall\"\nwhere\n\"x \\<equiv>   (basic [cup,cup])\\<circ>(basic [vert,over,vert]) \\<circ> (basic [cap,cap])\""], ["", "abbreviation y::\"wall\"\nwhere\n\"y \\<equiv>    (basic [cup]) \\<circ> (basic [cap])\""], ["", "lemma uncross_straighten_left_over:\"left_over ~ straight_line\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "have \"uncross right_over left_over\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncross right_over left_over", "using uncross_positive_flip_def uncross_def"], ["proof (prove)\nusing this:\n  uncross_positive_flip ?x ?y \\<equiv> ?x = right_over \\<and> ?y = left_over\n  uncross ?x ?y \\<equiv>\n  uncross_positive_straighten ?x ?y \\<or>\n  uncross_positive_flip ?x ?y \\<or>\n  uncross_negative_straighten ?x ?y \\<or> uncross_negative_flip ?x ?y\n\ngoal (1 subgoal):\n 1. uncross right_over left_over", "by auto"], ["proof (state)\nthis:\n  uncross right_over left_over\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "then"], ["proof (chain)\npicking this:\n  uncross right_over left_over", "have \"linkrel right_over left_over\""], ["proof (prove)\nusing this:\n  uncross right_over left_over\n\ngoal (1 subgoal):\n 1. linkrel right_over left_over", "using linkrel_def"], ["proof (prove)\nusing this:\n  uncross right_over left_over\n  linkrel ?x ?y =\n  (uncross ?x ?y \\<or>\n   pull ?x ?y \\<or>\n   straighten ?x ?y \\<or>\n   swing ?x ?y \\<or>\n   Tangle_Moves.rotate ?x ?y \\<or> compress ?x ?y \\<or> slide ?x ?y)\n\ngoal (1 subgoal):\n 1. linkrel right_over left_over", "by auto"], ["proof (state)\nthis:\n  linkrel right_over left_over\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "then"], ["proof (chain)\npicking this:\n  linkrel right_over left_over", "have \"right_over ~ left_over\""], ["proof (prove)\nusing this:\n  linkrel right_over left_over\n\ngoal (1 subgoal):\n 1. right_over ~ left_over", "using Tangle_Equivalence.equality"], ["proof (prove)\nusing this:\n  linkrel right_over left_over\n  linkrel ?a ?b \\<Longrightarrow> ?a ~ ?b\n\ngoal (1 subgoal):\n 1. right_over ~ left_over", "by auto"], ["proof (state)\nthis:\n  right_over ~ left_over\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "then"], ["proof (chain)\npicking this:\n  right_over ~ left_over", "have 1:\"left_over ~ right_over\""], ["proof (prove)\nusing this:\n  right_over ~ left_over\n\ngoal (1 subgoal):\n 1. left_over ~ right_over", "using Tangle_Equivalence.sym"], ["proof (prove)\nusing this:\n  right_over ~ left_over\n  ?A ~ ?B \\<Longrightarrow> ?B ~ ?A\n\ngoal (1 subgoal):\n 1. left_over ~ right_over", "by auto"], ["proof (state)\nthis:\n  left_over ~ right_over\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "have \"uncross right_over straight_line\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncross right_over straight_line", "using uncross_positive_straighten_def uncross_def"], ["proof (prove)\nusing this:\n  uncross_positive_straighten ?x ?y \\<equiv>\n  ?x = right_over \\<and> ?y = straight_line\n  uncross ?x ?y \\<equiv>\n  uncross_positive_straighten ?x ?y \\<or>\n  uncross_positive_flip ?x ?y \\<or>\n  uncross_negative_straighten ?x ?y \\<or> uncross_negative_flip ?x ?y\n\ngoal (1 subgoal):\n 1. uncross right_over straight_line", "by auto"], ["proof (state)\nthis:\n  uncross right_over straight_line\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "then"], ["proof (chain)\npicking this:\n  uncross right_over straight_line", "have \"linkrel right_over straight_line\""], ["proof (prove)\nusing this:\n  uncross right_over straight_line\n\ngoal (1 subgoal):\n 1. linkrel right_over straight_line", "using linkrel_def"], ["proof (prove)\nusing this:\n  uncross right_over straight_line\n  linkrel ?x ?y =\n  (uncross ?x ?y \\<or>\n   pull ?x ?y \\<or>\n   straighten ?x ?y \\<or>\n   swing ?x ?y \\<or>\n   Tangle_Moves.rotate ?x ?y \\<or> compress ?x ?y \\<or> slide ?x ?y)\n\ngoal (1 subgoal):\n 1. linkrel right_over straight_line", "by auto"], ["proof (state)\nthis:\n  linkrel right_over straight_line\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "then"], ["proof (chain)\npicking this:\n  linkrel right_over straight_line", "have 2:\"right_over ~ straight_line\""], ["proof (prove)\nusing this:\n  linkrel right_over straight_line\n\ngoal (1 subgoal):\n 1. right_over ~ straight_line", "using Tangle_Equivalence.equality"], ["proof (prove)\nusing this:\n  linkrel right_over straight_line\n  linkrel ?a ?b \\<Longrightarrow> ?a ~ ?b\n\ngoal (1 subgoal):\n 1. right_over ~ straight_line", "by auto"], ["proof (state)\nthis:\n  right_over ~ straight_line\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "have \"(left_over ~  straight_line) \\<and> (right_over ~ straight_line)\n         \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_over ~ straight_line \\<and>\n    right_over ~ straight_line \\<Longrightarrow>\n    left_over ~ straight_line", "using transitive"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a ~ ?b; ?b ~ ?c\\<rbrakk> \\<Longrightarrow> ?a ~ ?c\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line \\<and>\n    right_over ~ straight_line \\<Longrightarrow>\n    left_over ~ straight_line", "by auto"], ["proof (state)\nthis:\n  left_over ~ straight_line \\<and>\n  right_over ~ straight_line \\<Longrightarrow>\n  left_over ~ straight_line\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "then"], ["proof (chain)\npicking this:\n  left_over ~ straight_line \\<and>\n  right_over ~ straight_line \\<Longrightarrow>\n  left_over ~ straight_line", "show ?thesis"], ["proof (prove)\nusing this:\n  left_over ~ straight_line \\<and>\n  right_over ~ straight_line \\<Longrightarrow>\n  left_over ~ straight_line\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "using 1 2 transitive"], ["proof (prove)\nusing this:\n  left_over ~ straight_line \\<and>\n  right_over ~ straight_line \\<Longrightarrow>\n  left_over ~ straight_line\n  left_over ~ right_over\n  right_over ~ straight_line\n  \\<lbrakk>?a ~ ?b; ?b ~ ?c\\<rbrakk> \\<Longrightarrow> ?a ~ ?c\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "by blast"], ["proof (state)\nthis:\n  left_over ~ straight_line\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Example:\n  \"x ~ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ~ y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x ~ y", "have 1:\"left_over ~ straight_line\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "using Tangle_Equivalence.equality uncross_straighten_left_over"], ["proof (prove)\nusing this:\n  linkrel ?a ?b \\<Longrightarrow> ?a ~ ?b\n  left_over ~ straight_line\n\ngoal (1 subgoal):\n 1. left_over ~ straight_line", "by auto"], ["proof (state)\nthis:\n  left_over ~ straight_line\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  left_over ~ straight_line\n\ngoal (1 subgoal):\n 1. x ~ y", "have 2:\"straight_line ~ straight_line\""], ["proof (prove)\ngoal (1 subgoal):\n 1. straight_line ~ straight_line", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. straight_line ~ straight_line", "by auto"], ["proof (state)\nthis:\n  straight_line ~ straight_line\n\ngoal (1 subgoal):\n 1. x ~ y", "have 3:\"(left_over \\<otimes> straight_line) ~ (straight_line \\<otimes> straight_line)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line", "have \"is_tangle_diagram (left_over)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram left_over", "unfolding is_tangle_diagram_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall (\\<lambda>x. True)\n     (\\<lambda>x xs xsa.\n         if xsa then codomain_block x = domain_wall xs else False)\n     left_over", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram left_over\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram left_over\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line", "have \"is_tangle_diagram (straight_line)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram straight_line", "unfolding is_tangle_diagram_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall (\\<lambda>x. True)\n     (\\<lambda>x xs xsa.\n         if xsa then codomain_block x = domain_wall xs else False)\n     straight_line", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram straight_line\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram left_over\n  is_tangle_diagram straight_line", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram left_over\n  is_tangle_diagram straight_line\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line", "using 1 2"], ["proof (prove)\nusing this:\n  is_tangle_diagram left_over\n  is_tangle_diagram straight_line\n  left_over ~ straight_line\n  straight_line ~ straight_line\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line", "by (metis Tangle_Equivalence.tensor_eq)"], ["proof (state)\nthis:\n  left_over \\<otimes> straight_line ~ straight_line \\<otimes> straight_line\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left_over \\<otimes> straight_line ~ straight_line \\<otimes> straight_line\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  left_over \\<otimes> straight_line ~ straight_line \\<otimes> straight_line", "have 4:\n  \"((basic (cup#[])) \\<circ> (left_over \\<otimes> straight_line)) \n           ~   ((basic (cup#[])) \\<circ> (straight_line \\<otimes> straight_line))\""], ["proof (prove)\nusing this:\n  left_over \\<otimes> straight_line ~ straight_line \\<otimes> straight_line\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "have \"is_tangle_diagram (left_over \\<otimes> straight_line)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (left_over \\<otimes> straight_line)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (left_over \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (left_over \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "have \"is_tangle_diagram (straight_line \\<otimes> straight_line)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (straight_line \\<otimes> straight_line)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "have \"is_tangle_diagram (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup])\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup])\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "have \"domain_wall (left_over \\<otimes> straight_line) = (codomain_wall (basic (cup#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (left_over \\<otimes> straight_line) =\n    codomain_wall (basic [cup])", "unfolding domain_wall_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x)\n     (left_over \\<otimes> straight_line) =\n    codomain_wall (basic [cup])", "by auto"], ["proof (state)\nthis:\n  domain_wall (left_over \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "moreover"], ["proof (state)\nthis:\n  domain_wall (left_over \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "have \"domain_wall (straight_line \\<otimes> straight_line) = (codomain_wall (basic (cup#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (straight_line \\<otimes> straight_line) =\n    codomain_wall (basic [cup])", "unfolding domain_wall_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x)\n     (straight_line \\<otimes> straight_line) =\n    codomain_wall (basic [cup])", "by auto"], ["proof (state)\nthis:\n  domain_wall (straight_line \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "moreover"], ["proof (state)\nthis:\n  domain_wall (straight_line \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "have \"(basic (cup#[])) ~ (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] ~ basic [cup]", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [cup] ~ basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [cup] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line ~\n    straight_line \\<otimes> straight_line \\<Longrightarrow>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram (left_over \\<otimes> straight_line)\n  is_tangle_diagram (straight_line \\<otimes> straight_line)\n  is_tangle_diagram (basic [cup])\n  domain_wall (left_over \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n  domain_wall (straight_line \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n  basic [cup] ~ basic [cup]", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram (left_over \\<otimes> straight_line)\n  is_tangle_diagram (straight_line \\<otimes> straight_line)\n  is_tangle_diagram (basic [cup])\n  domain_wall (left_over \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n  domain_wall (straight_line \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n  basic [cup] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "using compose_eq 3"], ["proof (prove)\nusing this:\n  is_tangle_diagram (left_over \\<otimes> straight_line)\n  is_tangle_diagram (straight_line \\<otimes> straight_line)\n  is_tangle_diagram (basic [cup])\n  domain_wall (left_over \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n  domain_wall (straight_line \\<otimes> straight_line) =\n  codomain_wall (basic [cup])\n  basic [cup] ~ basic [cup]\n  ?B ~f ?D \\<and>\n  ?A ~f ?C \\<and>\n  is_tangle_diagram ?A \\<and>\n  is_tangle_diagram ?B \\<and>\n  is_tangle_diagram ?C \\<and>\n  is_tangle_diagram ?D \\<and>\n  domain_wall ?B = codomain_wall ?A \\<and>\n  domain_wall ?D = codomain_wall ?C \\<Longrightarrow>\n  ?A \\<circ> ?B ~f ?C \\<circ> ?D\n  left_over \\<otimes> straight_line ~ straight_line \\<otimes> straight_line\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "by (metis Tangle_Equivalence.compose_eq)"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. x ~ y", "have 5:\"  (basic [cup])\\<circ> (straight_line \\<otimes> straight_line) \n                 ~ (basic [cup])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "have 0:\n   \"(basic ([cup])) \\<circ> (straight_line \\<otimes> straight_line) = (basic [cup]) \\<circ>(basic [vert,vert]) \n                                                         \\<circ> (basic [vert,vert])\\<circ>(basic [vert,vert])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) =\n    basic [cup] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "let ?x =\"(basic (cup#[]))\n   \\<circ>(basic (vert#vert#[])) \\<circ> (basic (vert#vert#[]))\n   \\<circ> (basic (vert#vert#[]))\""], ["proof (state)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "let ?x1 = \" (basic (vert#vert#[]))\\<circ> (basic (vert#vert#[]))\""], ["proof (state)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "have 1:\"?x ~ ((basic (cup#[])) \\<circ> ?x1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "have \"(basic (cup#[]))\\<circ>(basic (vert # vert # [])) ~ (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "using cup_compress"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "have \"is_tangle_diagram  (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup])", "using is_tangle_diagram_def"], ["proof (prove)\nusing this:\n  is_tangle_diagram \\<equiv>\n  rec_wall (\\<lambda>x. True)\n   (\\<lambda>x xs xsa.\n       if xsa then codomain_block x = domain_wall xs else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "have \"is_tangle_diagram ((basic (cup#[]))\\<circ>(basic (vert # vert # [])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])", "using is_tangle_diagram_def"], ["proof (prove)\nusing this:\n  is_tangle_diagram \\<equiv>\n  rec_wall (\\<lambda>x. True)\n   (\\<lambda>x xs xsa.\n       if xsa then codomain_block x = domain_wall xs else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "have \"is_tangle_diagram (?x1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [vert, vert] \\<circ> basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "have \"?x1 ~ ?x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [vert, vert] \\<circ> basic [vert, vert]", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [vert, vert] \\<circ> basic [vert, vert]", "by auto"], ["proof (state)\nthis:\n  basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [vert, vert] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [vert, vert] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "have \n     \"codomain_wall (basic (cup#[])) = domain_wall  (basic (vert#vert#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "have \"(basic (cup#[])) ~ (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] ~ basic [cup]", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [cup] ~ basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [cup] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "ultimately"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [vert, vert])\n  basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [vert, vert] \\<circ> basic [vert, vert]\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])\n  basic [cup] ~ basic [cup]", "show ?thesis"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [vert, vert])\n  basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [vert, vert] \\<circ> basic [vert, vert]\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])\n  basic [cup] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "using compose_eq codomain_wall_compose compose_leftassociativity \n               converse_composition_of_tangle_diagrams domain_wall_compose"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [vert, vert])\n  basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [vert, vert] \\<circ> basic [vert, vert]\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])\n  basic [cup] ~ basic [cup]\n  ?B ~f ?D \\<and>\n  ?A ~f ?C \\<and>\n  is_tangle_diagram ?A \\<and>\n  is_tangle_diagram ?B \\<and>\n  is_tangle_diagram ?C \\<and>\n  is_tangle_diagram ?D \\<and>\n  domain_wall ?B = codomain_wall ?A \\<and>\n  domain_wall ?D = codomain_wall ?C \\<Longrightarrow>\n  ?A \\<circ> ?B ~f ?C \\<circ> ?D\n  codomain_wall (?xs \\<circ> ?ys) = codomain_wall ?ys\n  (?x \\<circ> ?y) \\<circ> ?z = ?x \\<circ> ?y \\<circ> ?z\n  is_tangle_diagram (?x \\<circ> ?y) \\<Longrightarrow>\n  domain_wall ?y = codomain_wall ?x\n  domain_wall (?xs \\<circ> ?ys) = domain_wall ?xs\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ>\n    basic [vert, vert] \\<circ>\n    basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]", "by (metis Tangle_Equivalence.compose_eq is_tangle_diagram.simps(1))"], ["proof (state)\nthis:\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "have 2: \" ((basic (cup#[])) \\<circ> ?x1) ~ (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup]", "have \"\n     ((basic (cup # []))\\<circ>(basic (vert # vert # [])))\\<circ>(basic (vert # vert # [])) \n          ~ ((basic(cup#[]))\\<circ>(basic(vert#vert#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "have \"(basic (cup#[]))\\<circ>(basic (vert # vert # [])) ~ (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "using cup_compress"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "have \"(basic(vert#vert#[])) ~ (basic(vert#vert#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [vert, vert] ~ basic [vert, vert]", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [vert, vert] ~ basic [vert, vert]", "by auto"], ["proof (state)\nthis:\n  basic [vert, vert] ~ basic [vert, vert]\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  basic [vert, vert] ~ basic [vert, vert]\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "have \"is_tangle_diagram  (basic (cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup])", "using is_tangle_diagram_def"], ["proof (prove)\nusing this:\n  is_tangle_diagram \\<equiv>\n  rec_wall (\\<lambda>x. True)\n   (\\<lambda>x xs xsa.\n       if xsa then codomain_block x = domain_wall xs else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "have \"is_tangle_diagram ((basic (cup#[]))\\<circ>(basic (vert # vert # [])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])", "using is_tangle_diagram_def"], ["proof (prove)\nusing this:\n  is_tangle_diagram \\<equiv>\n  rec_wall (\\<lambda>x. True)\n   (\\<lambda>x xs xsa.\n       if xsa then codomain_block x = domain_wall xs else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "have \"is_tangle_diagram ((basic(vert#vert#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "have \n         \"codomain_wall ((basic (cup#[]))\\<circ>  (basic(vert#vert#[]))) \n                       = domain_wall  (basic(vert#vert#[]))  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic [cup] \\<circ> basic [vert, vert]) =\n    domain_wall (basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic [cup] \\<circ> basic [vert, vert]) =\n  domain_wall (basic [vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "moreover"], ["proof (state)\nthis:\n  codomain_wall (basic [cup] \\<circ> basic [vert, vert]) =\n  domain_wall (basic [vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "have \"codomain_wall (basic (cup#[])) = domain_wall (basic(vert#vert#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "ultimately"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n  basic [vert, vert] ~ basic [vert, vert]\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [vert, vert])\n  codomain_wall (basic [cup] \\<circ> basic [vert, vert]) =\n  domain_wall (basic [vert, vert])\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])", "show ?thesis"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n  basic [vert, vert] ~ basic [vert, vert]\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [vert, vert])\n  codomain_wall (basic [cup] \\<circ> basic [vert, vert]) =\n  domain_wall (basic [vert, vert])\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "using compose_eq"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n  basic [vert, vert] ~ basic [vert, vert]\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [vert, vert])\n  codomain_wall (basic [cup] \\<circ> basic [vert, vert]) =\n  domain_wall (basic [vert, vert])\n  codomain_wall (basic [cup]) = domain_wall (basic [vert, vert])\n  ?B ~f ?D \\<and>\n  ?A ~f ?C \\<and>\n  is_tangle_diagram ?A \\<and>\n  is_tangle_diagram ?B \\<and>\n  is_tangle_diagram ?C \\<and>\n  is_tangle_diagram ?D \\<and>\n  domain_wall ?B = codomain_wall ?A \\<and>\n  domain_wall ?D = codomain_wall ?C \\<Longrightarrow>\n  ?A \\<circ> ?B ~f ?C \\<circ> ?D\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "by (metis Tangle_Equivalence.compose_eq)"], ["proof (state)\nthis:\n  (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup]", "then"], ["proof (chain)\npicking this:\n  (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert]", "have \"((basic (cup#[])) \\<circ> ?x1) ~\n           ((basic(cup#[]))\\<circ>(basic(vert#vert#[])))\""], ["proof (prove)\nusing this:\n  (basic [cup] \\<circ> basic [vert, vert]) \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup] \\<circ> basic [vert, vert]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup]", "then"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert]", "show ?thesis"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup]", "using cup_compress trans"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert]\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n  \\<lbrakk>?A ~f ?B; ?B ~f ?C\\<rbrakk> \\<Longrightarrow> ?A ~f ?C\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n    basic [cup]", "by (metis (full_types) Example.transitive)"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "from 0 1 2"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup]", "show ?thesis"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "using trans transp_def trans compose_Nil"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n  basic [cup] \\<circ>\n  basic [vert, vert] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert]\n  basic [cup] \\<circ> basic [vert, vert] \\<circ> basic [vert, vert] ~\n  basic [cup]\n  \\<lbrakk>?A ~f ?B; ?B ~f ?C\\<rbrakk> \\<Longrightarrow> ?A ~f ?C\n  transp ?r =\n  (\\<forall>x y z. ?r x y \\<longrightarrow> ?r y z \\<longrightarrow> ?r x z)\n  \\<lbrakk>?A ~f ?B; ?B ~f ?C\\<rbrakk> \\<Longrightarrow> ?A ~f ?C\n  basic ?x \\<circ> ?ys = ?x * ?ys\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~\n    basic [cup]", "by (metis (hide_lams, no_types) Example.transitive)"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~ basic [cup]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~ basic [cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "let ?y = \"((basic ([])) \\<circ> (basic (cup#[])))  \""], ["proof (state)\ngoal (1 subgoal):\n 1. x ~ y", "let ?temp = \"(basic (vert#over#vert#[]))\\<circ>(basic (cap#vert#vert#[])) \""], ["proof (state)\ngoal (1 subgoal):\n 1. x ~ y", "have 45:\"(left_over \\<otimes> straight_line) = \n          ((basic (cup#vert#vert#[])) \\<circ> ?temp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line =\n    basic [cup, vert, vert] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "using tensor.simps"], ["proof (prove)\nusing this:\n  basic ?x \\<otimes> basic ?y = basic (?x \\<otimes> ?y)\n  ?x * ?xs \\<otimes> basic ?y =\n  (if codomain_block ?y = 0 then (?x \\<otimes> ?y) * ?xs\n   else (?x \\<otimes> ?y) *\n        (?xs \\<otimes> basic (make_vert_block (nat (codomain_block ?y)))))\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. left_over \\<otimes> straight_line =\n    basic [cup, vert, vert] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "by (metis compose_Nil concatenates_Cons concatenates_Nil)"], ["proof (state)\nthis:\n  left_over \\<otimes> straight_line =\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  left_over \\<otimes> straight_line =\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "have 55:\"(basic (cup#[])) \\<circ> (left_over \\<otimes> straight_line) \n             =  (basic (cup#[])) \\<circ>  (basic (cup#vert#vert#[])) \\<circ> ?temp\""], ["proof (prove)\nusing this:\n  left_over \\<otimes> straight_line =\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (left_over \\<otimes> straight_line) =\n    basic [cup] \\<circ>\n    basic [cup, vert, vert] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "have \n  \"(basic (cup#[])) \\<circ> (basic (cup#vert#vert#[]))\n      =  (basic (([]) \\<otimes>(cup#[])))\\<circ>(basic ((cup#[])\\<otimes>(vert#vert#[])))\""], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [cup, vert, vert] =\n    basic ([] \\<otimes> [cup]) \\<circ> basic ([cup] \\<otimes> [vert, vert])", "using concatenate.simps"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n  [] \\<otimes> ?ys = ?ys\n  (?x # ?xs) \\<otimes> ?ys = ?x # ?xs \\<otimes> ?ys\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [cup, vert, vert] =\n    basic ([] \\<otimes> [cup]) \\<circ> basic ([cup] \\<otimes> [vert, vert])", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [cup, vert, vert] =\n  basic ([] \\<otimes> [cup]) \\<circ> basic ([cup] \\<otimes> [vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> basic [cup, vert, vert] =\n  basic ([] \\<otimes> [cup]) \\<circ> basic ([cup] \\<otimes> [vert, vert])", "have 6:\n \"(basic (cup#[])) \\<circ> (basic (cup#vert#vert#[]))\n          = ((basic ([]))\\<circ>(basic (cup#[])))\n            \\<otimes>((basic (cup#[])) \\<circ>(basic (vert#vert#[])))\""], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [cup, vert, vert] =\n  basic ([] \\<otimes> [cup]) \\<circ> basic ([cup] \\<otimes> [vert, vert])\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [cup, vert, vert] =\n    basic [] \\<circ> basic [cup] \\<otimes>\n    basic [cup] \\<circ> basic [vert, vert]", "using tensor.simps"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [cup, vert, vert] =\n  basic ([] \\<otimes> [cup]) \\<circ> basic ([cup] \\<otimes> [vert, vert])\n  basic ?x \\<otimes> basic ?y = basic (?x \\<otimes> ?y)\n  ?x * ?xs \\<otimes> basic ?y =\n  (if codomain_block ?y = 0 then (?x \\<otimes> ?y) * ?xs\n   else (?x \\<otimes> ?y) *\n        (?xs \\<otimes> basic (make_vert_block (nat (codomain_block ?y)))))\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [cup, vert, vert] =\n    basic [] \\<circ> basic [cup] \\<otimes>\n    basic [cup] \\<circ> basic [vert, vert]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [cup, vert, vert] =\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> basic [cup, vert, vert] =\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert]", "have \"((basic (cup#[])) \\<circ>(basic (vert#vert#[]))) \n                   ~ (basic ([]))\\<circ>(basic (cup#[]))\""], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [cup, vert, vert] =\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "using prelim_cup_compress"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [cup, vert, vert] =\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert]\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"((basic ([]))\\<circ>(basic (cup#[]))) \n                       ~ ((basic ([]))\\<circ>(basic (cup#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] ~ basic [] \\<circ> basic [cup]", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] ~ basic [] \\<circ> basic [cup]", "by auto"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] ~ basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] ~ basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram ((basic (cup#[])) \\<circ>(basic (vert#vert#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram ((basic ([]))\\<circ>(basic (cup#[]))) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [] \\<circ> basic [cup])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  left_over ~ straight_line\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n  basic [] \\<circ> basic [cup] ~ basic [] \\<circ> basic [cup]\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [] \\<circ> basic [cup])", "have 7:\"?y \\<otimes> ((basic (cup#[])) \\<circ>(basic (vert#vert#[])))~ ((?y) \\<otimes> (?y))\""], ["proof (prove)\nusing this:\n  left_over ~ straight_line\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n  basic [] \\<circ> basic [cup] ~ basic [] \\<circ> basic [cup]\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [] \\<circ> basic [cup])\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes>\n    basic [cup] \\<circ> basic [vert, vert] ~\n    basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup]", "using tensor_eq cup_compress Nil_right_tensor is_tangle_diagram.simps(1) refl"], ["proof (prove)\nusing this:\n  left_over ~ straight_line\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [] \\<circ> basic [cup]\n  basic [] \\<circ> basic [cup] ~ basic [] \\<circ> basic [cup]\n  is_tangle_diagram (basic [cup] \\<circ> basic [vert, vert])\n  is_tangle_diagram (basic [] \\<circ> basic [cup])\n  ?B ~f ?D \\<and>\n  ?A ~f ?C \\<and>\n  is_tangle_diagram ?A \\<and>\n  is_tangle_diagram ?B \\<and>\n  is_tangle_diagram ?C \\<and> is_tangle_diagram ?D \\<Longrightarrow>\n  ?A \\<otimes> ?B ~f ?C \\<otimes> ?D\n  basic [cup] \\<circ> basic [vert, vert] ~ basic [cup]\n  basic [] \\<otimes> ?xs = ?xs\n  is_tangle_diagram (basic ?x) = True\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes>\n    basic [cup] \\<circ> basic [vert, vert] ~\n    basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup]", "by (metis Tangle_Equivalence.tensor_eq)"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup]", "have \" ((?y) \\<otimes> (?y)) = (basic (([]) \\<otimes> ([])))\n                   \\<circ> ((basic (cup#[])) \\<otimes> (basic (cup#[])))\""], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n    basic ([] \\<otimes> []) \\<circ> (basic [cup] \\<otimes> basic [cup])", "using tensor.simps(4)"], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup]\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n    basic ([] \\<otimes> []) \\<circ> (basic [cup] \\<otimes> basic [cup])", "by (metis compose_Nil)"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n  basic ([] \\<otimes> []) \\<circ> (basic [cup] \\<otimes> basic [cup])\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n  basic ([] \\<otimes> []) \\<circ> (basic [cup] \\<otimes> basic [cup])", "have \"  ((?y) \\<otimes> (?y)) = (basic ([])) \\<circ>((basic (cup#cup#[])))\""], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n  basic ([] \\<otimes> []) \\<circ> (basic [cup] \\<otimes> basic [cup])\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n    basic [] \\<circ> basic [cup, cup]", "using tensor.simps(1) concatenate_def"], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n  basic ([] \\<otimes> []) \\<circ> (basic [cup] \\<otimes> basic [cup])\n  basic ?x \\<otimes> basic ?y = basic (?x \\<otimes> ?y)\n  (\\<otimes>) \\<equiv>\n  rec_list (\\<lambda>ys. ys) (\\<lambda>x xs xsa ys. x # xsa ys)\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n    basic [] \\<circ> basic [cup, cup]", "by auto"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n  basic [] \\<circ> basic [cup, cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n  basic [] \\<circ> basic [cup, cup]", "have \"(?y) \\<otimes> ((basic (cup#[])) \\<circ>(basic (vert#vert#[])))\n             ~ (basic ([])) \\<circ>(basic (cup#cup#[]))\""], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n  basic [] \\<circ> basic [cup, cup]\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes>\n    basic [cup] \\<circ> basic [vert, vert] ~\n    basic [] \\<circ> basic [cup, cup]", "using 7"], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup] =\n  basic [] \\<circ> basic [cup, cup]\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup] \\<otimes> basic [] \\<circ> basic [cup]\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes>\n    basic [cup] \\<circ> basic [vert, vert] ~\n    basic [] \\<circ> basic [cup, cup]", "by auto"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup, cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup, cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"(basic ([]))\\<circ>(basic (cup#cup#[]))~(basic (cup#cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]", "have \"domain_wall (basic (cup#cup#[])) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (basic [cup, cup]) = 0", "by auto"], ["proof (state)\nthis:\n  domain_wall (basic [cup, cup]) = 0\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]", "then"], ["proof (chain)\npicking this:\n  domain_wall (basic [cup, cup]) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (basic [cup, cup]) = 0\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]", "using domain_compose sym"], ["proof (prove)\nusing this:\n  domain_wall (basic [cup, cup]) = 0\n  domain_wall ?a = 0 \\<and> is_tangle_diagram ?a \\<Longrightarrow>\n  ?a ~f basic [] \\<circ> ?a\n  ?A ~f ?B \\<Longrightarrow> ?B ~f ?A\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]", "by (metis Tangle_Equivalence.domain_compose Tangle_Equivalence.sym is_tangle_diagram.simps(1))"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup, cup]\n  basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]", "have \"(?y) \\<otimes> ((basic (cup#[])) \\<circ>(basic (vert#vert#[])))\n               ~  (basic (cup#cup#[]))\""], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup, cup]\n  basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes>\n    basic [cup] \\<circ> basic [vert, vert] ~\n    basic [cup, cup]", "using trans"], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [] \\<circ> basic [cup, cup]\n  basic [] \\<circ> basic [cup, cup] ~ basic [cup, cup]\n  \\<lbrakk>?A ~f ?B; ?B ~f ?C\\<rbrakk> \\<Longrightarrow> ?A ~f ?C\n\ngoal (1 subgoal):\n 1. basic [] \\<circ> basic [cup] \\<otimes>\n    basic [cup] \\<circ> basic [vert, vert] ~\n    basic [cup, cup]", "by (metis (full_types) Example.transitive)"], ["proof (state)\nthis:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [cup, cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [cup, cup]", "have \" (basic(cup#[]))\\<circ>(basic(cup#vert#vert#[]))~(basic(cup#cup#[]))\""], ["proof (prove)\nusing this:\n  basic [] \\<circ> basic [cup] \\<otimes>\n  basic [cup] \\<circ> basic [vert, vert] ~\n  basic [cup, cup]\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> basic [cup, vert, vert] ~ basic [cup, cup]", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [cup, vert, vert] ~ basic [cup, cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cup] \\<circ> basic [cup, vert, vert] ~ basic [cup, cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"?temp ~ ?temp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "by auto"], ["proof (state)\nthis:\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram ((basic(cup#[]))\\<circ>(basic(cup#vert#vert#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup] \\<circ> basic [cup, vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [cup, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup] \\<circ> basic [cup, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram (basic(cup#cup#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup, cup])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup, cup])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup, cup])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram  (?temp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram\n     (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram\n   (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram\n   (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"codomain_wall  ((basic(cup#[]))\\<circ>(basic(cup#vert#vert#[])))\n                    = domain_wall ?temp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic [cup] \\<circ> basic [cup, vert, vert]) =\n    domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic [cup] \\<circ> basic [cup, vert, vert]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  codomain_wall (basic [cup] \\<circ> basic [cup, vert, vert]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"codomain_wall (basic(cup#cup#[])) = domain_wall ?temp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic [cup, cup]) =\n    domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic [cup, cup]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  basic [cup] \\<circ> basic [cup, vert, vert] ~ basic [cup, cup]\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n  is_tangle_diagram (basic [cup] \\<circ> basic [cup, vert, vert])\n  is_tangle_diagram (basic [cup, cup])\n  is_tangle_diagram\n   (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  codomain_wall (basic [cup] \\<circ> basic [cup, vert, vert]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  codomain_wall (basic [cup, cup]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])", "have 8:\" ((basic(cup#[]))\\<circ>(basic(cup#vert#vert#[]))) \\<circ>(?temp)\n                       ~ (basic(cup#cup#[])) \\<circ> (?temp)\""], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [cup, vert, vert] ~ basic [cup, cup]\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n  is_tangle_diagram (basic [cup] \\<circ> basic [cup, vert, vert])\n  is_tangle_diagram (basic [cup, cup])\n  is_tangle_diagram\n   (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  codomain_wall (basic [cup] \\<circ> basic [cup, vert, vert]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  codomain_wall (basic [cup, cup]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [cup, vert, vert]) \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "using compose_eq"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> basic [cup, vert, vert] ~ basic [cup, cup]\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n  is_tangle_diagram (basic [cup] \\<circ> basic [cup, vert, vert])\n  is_tangle_diagram (basic [cup, cup])\n  is_tangle_diagram\n   (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  codomain_wall (basic [cup] \\<circ> basic [cup, vert, vert]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  codomain_wall (basic [cup, cup]) =\n  domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  ?B ~f ?D \\<and>\n  ?A ~f ?C \\<and>\n  is_tangle_diagram ?A \\<and>\n  is_tangle_diagram ?B \\<and>\n  is_tangle_diagram ?C \\<and>\n  is_tangle_diagram ?D \\<and>\n  domain_wall ?B = codomain_wall ?A \\<and>\n  domain_wall ?D = codomain_wall ?C \\<Longrightarrow>\n  ?A \\<circ> ?B ~f ?C \\<circ> ?D\n\ngoal (1 subgoal):\n 1. (basic [cup] \\<circ> basic [cup, vert, vert]) \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "by (metis Tangle_Equivalence.compose_eq)"], ["proof (state)\nthis:\n  (basic [cup] \\<circ> basic [cup, vert, vert]) \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  (basic [cup] \\<circ> basic [cup, vert, vert]) \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]", "have \"((basic [cup,cup]) \\<circ> (?temp)) \n                 ~ (basic [cup] \\<circ> (left_over \\<otimes> straight_line))\""], ["proof (prove)\nusing this:\n  (basic [cup] \\<circ> basic [cup, vert, vert]) \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line)", "using 55 compose_leftassociativity sym wall.simps"], ["proof (prove)\nusing this:\n  (basic [cup] \\<circ> basic [cup, vert, vert]) \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n  (?x \\<circ> ?y) \\<circ> ?z = ?x \\<circ> ?y \\<circ> ?z\n  ?A ~f ?B \\<Longrightarrow> ?B ~f ?A\n  (basic ?x1.0 = basic ?y1.0) = (?x1.0 = ?y1.0)\n  (?x21.0 * ?x22.0 = ?y21.0 * ?y22.0) =\n  (?x21.0 = ?y21.0 \\<and> ?x22.0 = ?y22.0)\n  basic ?x1.0 \\<noteq> ?x21.0 * ?x22.0\n  ?x21.0 * ?x22.0 \\<noteq> basic ?x1.0\n  (case basic ?x1.0 of basic x \\<Rightarrow> ?f1.0 x\n   | x * xa \\<Rightarrow> ?f2.0 x xa) =\n  ?f1.0 ?x1.0\n  (case ?x21.0 * ?x22.0 of basic x \\<Rightarrow> ?f1.0 x\n   | x * xa \\<Rightarrow> ?f2.0 x xa) =\n  ?f2.0 ?x21.0 ?x22.0\n  rec_wall ?f1.0 ?f2.0 (basic ?x1.0) = ?f1.0 ?x1.0\n  rec_wall ?f1.0 ?f2.0 (?x21.0 * ?x22.0) =\n  ?f2.0 ?x21.0 ?x22.0 (rec_wall ?f1.0 ?f2.0 ?x22.0)\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line)", "by (metis Tangle_Equivalence.sym compose_Nil)"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"(basic [cup]) \\<circ> (left_over \\<otimes> straight_line) \n                    ~ (basic [cup]) \\<circ> (straight_line \\<otimes> straight_line)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "using 4"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line)\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "have \"((basic [cup,cup]) \\<circ> (?temp)) \n                  ~ (basic [cup]) \\<circ> (straight_line \\<otimes> straight_line)\""], ["proof (prove)\nusing this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line)\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>basic [cup, cup] \\<circ>\n             basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n             basic [cup] \\<circ> (left_over \\<otimes> straight_line);\n     basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n     basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\\<rbrakk>\n    \\<Longrightarrow> basic [cup, cup] \\<circ>\n                      basic [vert, over, vert] \\<circ>\n                      basic [cap, vert, vert] ~\n                      basic [cup] \\<circ>\n                      (straight_line \\<otimes> straight_line)", "have \"((basic [cup,cup]) \\<circ> (?temp)) \n                 ~ (basic [cup] \\<circ> (left_over \\<otimes> straight_line))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line)", "using 8 55 compose_leftassociativity sym wall.simps  Tangle_Equivalence.sym compose_Nil"], ["proof (prove)\nusing this:\n  (basic [cup] \\<circ> basic [cup, vert, vert]) \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) =\n  basic [cup] \\<circ>\n  basic [cup, vert, vert] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert]\n  (?x \\<circ> ?y) \\<circ> ?z = ?x \\<circ> ?y \\<circ> ?z\n  ?A ~f ?B \\<Longrightarrow> ?B ~f ?A\n  (basic ?x1.0 = basic ?y1.0) = (?x1.0 = ?y1.0)\n  (?x21.0 * ?x22.0 = ?y21.0 * ?y22.0) =\n  (?x21.0 = ?y21.0 \\<and> ?x22.0 = ?y22.0)\n  basic ?x1.0 \\<noteq> ?x21.0 * ?x22.0\n  ?x21.0 * ?x22.0 \\<noteq> basic ?x1.0\n  (case basic ?x1.0 of basic x \\<Rightarrow> ?f1.0 x\n   | x * xa \\<Rightarrow> ?f2.0 x xa) =\n  ?f1.0 ?x1.0\n  (case ?x21.0 * ?x22.0 of basic x \\<Rightarrow> ?f1.0 x\n   | x * xa \\<Rightarrow> ?f2.0 x xa) =\n  ?f2.0 ?x21.0 ?x22.0\n  rec_wall ?f1.0 ?f2.0 (basic ?x1.0) = ?f1.0 ?x1.0\n  rec_wall ?f1.0 ?f2.0 (?x21.0 * ?x22.0) =\n  ?f2.0 ?x21.0 ?x22.0 (rec_wall ?f1.0 ?f2.0 ?x22.0)\n  ?A ~ ?B \\<Longrightarrow> ?B ~ ?A\n  basic ?x \\<circ> ?ys = ?x * ?ys\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line)", "by (metis)"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>basic [cup, cup] \\<circ>\n             basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n             basic [cup] \\<circ> (left_over \\<otimes> straight_line);\n     basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n     basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\\<rbrakk>\n    \\<Longrightarrow> basic [cup, cup] \\<circ>\n                      basic [vert, over, vert] \\<circ>\n                      basic [cap, vert, vert] ~\n                      basic [cup] \\<circ>\n                      (straight_line \\<otimes> straight_line)", "moreover"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>basic [cup, cup] \\<circ>\n             basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n             basic [cup] \\<circ> (left_over \\<otimes> straight_line);\n     basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n     basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\\<rbrakk>\n    \\<Longrightarrow> basic [cup, cup] \\<circ>\n                      basic [vert, over, vert] \\<circ>\n                      basic [cap, vert, vert] ~\n                      basic [cup] \\<circ>\n                      (straight_line \\<otimes> straight_line)", "have \"(basic [cup]) \\<circ> (left_over \\<otimes> straight_line) \n                    ~ (basic [cup]) \\<circ> (straight_line \\<otimes> straight_line)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "using 4"], ["proof (prove)\nusing this:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "by auto"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>basic [cup, cup] \\<circ>\n             basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n             basic [cup] \\<circ> (left_over \\<otimes> straight_line);\n     basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n     basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\\<rbrakk>\n    \\<Longrightarrow> basic [cup, cup] \\<circ>\n                      basic [vert, over, vert] \\<circ>\n                      basic [cap, vert, vert] ~\n                      basic [cup] \\<circ>\n                      (straight_line \\<otimes> straight_line)", "moreover"], ["proof (state)\nthis:\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>basic [cup, cup] \\<circ>\n             basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n             basic [cup] \\<circ> (left_over \\<otimes> straight_line);\n     basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n     basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\\<rbrakk>\n    \\<Longrightarrow> basic [cup, cup] \\<circ>\n                      basic [vert, over, vert] \\<circ>\n                      basic [cap, vert, vert] ~\n                      basic [cup] \\<circ>\n                      (straight_line \\<otimes> straight_line)", "have \"(((basic [cup,cup]) \\<circ> (?temp)) \n                 ~ (basic [cup] \\<circ> (left_over \\<otimes> straight_line)))\n        \\<and> ((basic [cup]) \\<circ> (left_over \\<otimes> straight_line) \n                    ~ (basic [cup]) \\<circ> (straight_line \\<otimes> straight_line))\n           \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) \\<and>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ>\n    (straight_line \\<otimes> straight_line) \\<Longrightarrow>\n    basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "using Example.transitive"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a ~ ?b; ?b ~ ?c\\<rbrakk> \\<Longrightarrow> ?a ~ ?c\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) \\<and>\n    basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n    basic [cup] \\<circ>\n    (straight_line \\<otimes> straight_line) \\<Longrightarrow>\n    basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "by auto"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) \\<and>\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ>\n  (straight_line \\<otimes> straight_line) \\<Longrightarrow>\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>basic [cup, cup] \\<circ>\n             basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n             basic [cup] \\<circ> (left_over \\<otimes> straight_line);\n     basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n     basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\\<rbrakk>\n    \\<Longrightarrow> basic [cup, cup] \\<circ>\n                      basic [vert, over, vert] \\<circ>\n                      basic [cap, vert, vert] ~\n                      basic [cup] \\<circ>\n                      (straight_line \\<otimes> straight_line)", "ultimately"], ["proof (chain)\npicking this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line)\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) \\<and>\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ>\n  (straight_line \\<otimes> straight_line) \\<Longrightarrow>\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "show ?thesis"], ["proof (prove)\nusing this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line)\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) \\<and>\n  basic [cup] \\<circ> (left_over \\<otimes> straight_line) ~\n  basic [cup] \\<circ>\n  (straight_line \\<otimes> straight_line) \\<Longrightarrow>\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "by auto"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)", "have \"(basic ([cup,cup])) \\<circ> (?temp)  ~ (basic (cup # []))\""], ["proof (prove)\nusing this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup]", "using trans transp_def 5"], ["proof (prove)\nusing this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line)\n  \\<lbrakk>?A ~f ?B; ?B ~f ?C\\<rbrakk> \\<Longrightarrow> ?A ~f ?C\n  transp ?r =\n  (\\<forall>x y z. ?r x y \\<longrightarrow> ?r y z \\<longrightarrow> ?r x z)\n  basic [cup] \\<circ> (straight_line \\<otimes> straight_line) ~ basic [cup]\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n    basic [cup]", "by (metis Example.transitive)"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"(basic (cap#[])) ~ (basic (cap#[]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cap] ~ basic [cap]", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [cap] ~ basic [cap]", "by auto"], ["proof (state)\nthis:\n  basic [cap] ~ basic [cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cap] ~ basic [cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram ((basic(cup#cup#[])) \\<circ> (?temp))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram\n     (basic [cup, cup] \\<circ>\n      basic [vert, over, vert] \\<circ> basic [cap, vert, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram (basic (cup # []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram (basic (cap # []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cap])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"codomain_wall ((basic(cup#cup#[])) \\<circ> (?temp)) \n                   = domain_wall (basic (cap # []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall\n     (basic [cup, cup] \\<circ>\n      basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) =\n    domain_wall (basic [cap])", "by auto"], ["proof (state)\nthis:\n  codomain_wall\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) =\n  domain_wall (basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  codomain_wall\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) =\n  domain_wall (basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"codomain_wall (basic(cup#[])) = domain_wall (basic (cap # []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic [cup]) = domain_wall (basic [cap])", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic [cup]) = domain_wall (basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup]\n  basic [cap] ~ basic [cap]\n  is_tangle_diagram\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cap])\n  codomain_wall\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) =\n  domain_wall (basic [cap])\n  codomain_wall (basic [cup]) = domain_wall (basic [cap])", "have 9:\"((basic(cup#cup#[])) \\<circ> (?temp)) \\<circ> (basic (cap#[]))\n                     ~ (basic (cup#[])) \\<circ> (basic (cap#[]))\""], ["proof (prove)\nusing this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup]\n  basic [cap] ~ basic [cap]\n  is_tangle_diagram\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cap])\n  codomain_wall\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) =\n  domain_wall (basic [cap])\n  codomain_wall (basic [cup]) = domain_wall (basic [cap])\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ>\n     basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n    basic [cap] ~\n    y", "using Tangle_Equivalence.compose_eq"], ["proof (prove)\nusing this:\n  basic [cup, cup] \\<circ>\n  basic [vert, over, vert] \\<circ> basic [cap, vert, vert] ~\n  basic [cup]\n  basic [cap] ~ basic [cap]\n  is_tangle_diagram\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\n  is_tangle_diagram (basic [cup])\n  is_tangle_diagram (basic [cap])\n  codomain_wall\n   (basic [cup, cup] \\<circ>\n    basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) =\n  domain_wall (basic [cap])\n  codomain_wall (basic [cup]) = domain_wall (basic [cap])\n  ?B ~ ?D \\<and>\n  ?A ~ ?C \\<and>\n  is_tangle_diagram ?A \\<and>\n  is_tangle_diagram ?B \\<and>\n  is_tangle_diagram ?C \\<and>\n  is_tangle_diagram ?D \\<and>\n  domain_wall ?B = codomain_wall ?A \\<and>\n  domain_wall ?D = codomain_wall ?C \\<Longrightarrow>\n  ?A \\<circ> ?B ~ ?C \\<circ> ?D\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ>\n     basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n    basic [cap] ~\n    y", "by metis"], ["proof (state)\nthis:\n  (basic [cup, cup] \\<circ>\n   basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n  basic [cap] ~\n  y\n\ngoal (1 subgoal):\n 1. x ~ y", "let ?z = \"((basic(cup#cup#[])) \\<circ> (basic(vert#over#vert#[])))\""], ["proof (state)\ngoal (1 subgoal):\n 1. x ~ y", "have 10:\"((basic(cup#cup#[])) \\<circ> (?temp)) \\<circ> (basic (cap#[]))\n              = ?z \\<circ> ((basic(cap#vert#vert#[])) \\<circ> (basic (cap#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ>\n     basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n    basic [cap] =\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap]", "by auto"], ["proof (state)\nthis:\n  (basic [cup, cup] \\<circ>\n   basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n  basic [cap] =\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  (basic [cup, cup] \\<circ>\n   basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n  basic [cap] =\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap]", "have 11:\"((basic(cap#vert#vert#[])) \\<circ> (basic (cap#[])))\n                           = ((basic ((cap#[])\\<otimes>(vert#vert#[])))\\<circ>(basic (([]) \\<otimes>(cap#[]))))\""], ["proof (prove)\nusing this:\n  (basic [cup, cup] \\<circ>\n   basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n  basic [cap] =\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap]\n\ngoal (1 subgoal):\n 1. basic [cap, vert, vert] \\<circ> basic [cap] =\n    basic ([cap] \\<otimes> [vert, vert]) \\<circ> basic ([] \\<otimes> [cap])", "unfolding concatenate_def"], ["proof (prove)\nusing this:\n  (basic [cup, cup] \\<circ>\n   basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n  basic [cap] =\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap]\n\ngoal (1 subgoal):\n 1. basic [cap, vert, vert] \\<circ> basic [cap] =\n    basic\n     (rec_list (\\<lambda>ys. ys) (\\<lambda>x xs xsa ys. x # xsa ys) [cap]\n       [vert, vert]) \\<circ>\n    basic\n     (rec_list (\\<lambda>ys. ys) (\\<lambda>x xs xsa ys. x # xsa ys) []\n       [cap])", "by auto"], ["proof (state)\nthis:\n  basic [cap, vert, vert] \\<circ> basic [cap] =\n  basic ([cap] \\<otimes> [vert, vert]) \\<circ> basic ([] \\<otimes> [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [cap, vert, vert] \\<circ> basic [cap] =\n  basic ([cap] \\<otimes> [vert, vert]) \\<circ> basic ([] \\<otimes> [cap])", "have 12:\" ((basic(cap#vert#vert#[])) \\<circ> (basic (cap#[]))) \n                       = ((basic (cap#[]))\\<circ>(basic ([])))\\<otimes>((basic (vert#vert#[]))\\<circ>(basic (cap#[])))\""], ["proof (prove)\nusing this:\n  basic [cap, vert, vert] \\<circ> basic [cap] =\n  basic ([cap] \\<otimes> [vert, vert]) \\<circ> basic ([] \\<otimes> [cap])\n\ngoal (1 subgoal):\n 1. basic [cap, vert, vert] \\<circ> basic [cap] =\n    basic [cap] \\<circ> basic [] \\<otimes>\n    basic [vert, vert] \\<circ> basic [cap]", "using tensor.simps"], ["proof (prove)\nusing this:\n  basic [cap, vert, vert] \\<circ> basic [cap] =\n  basic ([cap] \\<otimes> [vert, vert]) \\<circ> basic ([] \\<otimes> [cap])\n  basic ?x \\<otimes> basic ?y = basic (?x \\<otimes> ?y)\n  ?x * ?xs \\<otimes> basic ?y =\n  (if codomain_block ?y = 0 then (?x \\<otimes> ?y) * ?xs\n   else (?x \\<otimes> ?y) *\n        (?xs \\<otimes> basic (make_vert_block (nat (codomain_block ?y)))))\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. basic [cap, vert, vert] \\<circ> basic [cap] =\n    basic [cap] \\<circ> basic [] \\<otimes>\n    basic [vert, vert] \\<circ> basic [cap]", "by auto"], ["proof (state)\nthis:\n  basic [cap, vert, vert] \\<circ> basic [cap] =\n  basic [cap] \\<circ> basic [] \\<otimes>\n  basic [vert, vert] \\<circ> basic [cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "let ?w = \"((basic (cap#[]))\\<circ>(basic ([])))\""], ["proof (state)\ngoal (1 subgoal):\n 1. x ~ y", "have 13:\"((basic (vert#vert#[]))\\<circ>(basic (cap#[]))) ~ ?w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "have \"codomain_wall (basic (cap#[])) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic [cap]) = 0", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic [cap]) = 0\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "then"], ["proof (chain)\npicking this:\n  codomain_wall (basic [cap]) = 0", "have \"domain_wall (basic (cap#[])) = 2\""], ["proof (prove)\nusing this:\n  codomain_wall (basic [cap]) = 0\n\ngoal (1 subgoal):\n 1. domain_wall (basic [cap]) = 2", "by auto"], ["proof (state)\nthis:\n  domain_wall (basic [cap]) = 2\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "then"], ["proof (chain)\npicking this:\n  domain_wall (basic [cap]) = 2", "have \"(vert#vert#[]) \n                          = make_vert_block (nat (domain_wall (basic (cap#[]))))\""], ["proof (prove)\nusing this:\n  domain_wall (basic [cap]) = 2\n\ngoal (1 subgoal):\n 1. [vert, vert] = make_vert_block (nat (domain_wall (basic [cap])))", "by (simp add: make_vert_block_def)"], ["proof (state)\nthis:\n  [vert, vert] = make_vert_block (nat (domain_wall (basic [cap])))\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "then"], ["proof (chain)\npicking this:\n  [vert, vert] = make_vert_block (nat (domain_wall (basic [cap])))", "have \"compress_top  ((basic (vert#vert#[]))\\<circ>(basic (cap#[]))) ?w\""], ["proof (prove)\nusing this:\n  [vert, vert] = make_vert_block (nat (domain_wall (basic [cap])))\n\ngoal (1 subgoal):\n 1. compress_top (basic [vert, vert] \\<circ> basic [cap])\n     (basic [cap] \\<circ> basic [])", "using compress_top_def"], ["proof (prove)\nusing this:\n  [vert, vert] = make_vert_block (nat (domain_wall (basic [cap])))\n  compress_top ?x ?y \\<equiv>\n  \\<exists>B.\n     ?x = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n     ?y = B \\<circ> basic [] \\<and>\n     codomain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. compress_top (basic [vert, vert] \\<circ> basic [cap])\n     (basic [cap] \\<circ> basic [])", "by auto"], ["proof (state)\nthis:\n  compress_top (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "then"], ["proof (chain)\npicking this:\n  compress_top (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])", "have \"compress ((basic (vert#vert#[]))\\<circ>(basic (cap#[]))) ?w\""], ["proof (prove)\nusing this:\n  compress_top (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. compress (basic [vert, vert] \\<circ> basic [cap])\n     (basic [cap] \\<circ> basic [])", "using compress_def"], ["proof (prove)\nusing this:\n  compress_top (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n  compress ?x ?y = (compress_top ?x ?y \\<or> compress_bottom ?x ?y)\n\ngoal (1 subgoal):\n 1. compress (basic [vert, vert] \\<circ> basic [cap])\n     (basic [cap] \\<circ> basic [])", "by auto"], ["proof (state)\nthis:\n  compress (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "then"], ["proof (chain)\npicking this:\n  compress (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])", "have \"linkrel  ((basic (vert#vert#[]))\\<circ>(basic (cap#[]))) ?w\""], ["proof (prove)\nusing this:\n  compress (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. linkrel (basic [vert, vert] \\<circ> basic [cap])\n     (basic [cap] \\<circ> basic [])", "using linkrel_def"], ["proof (prove)\nusing this:\n  compress (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n  linkrel ?x ?y =\n  (uncross ?x ?y \\<or>\n   pull ?x ?y \\<or>\n   straighten ?x ?y \\<or>\n   swing ?x ?y \\<or>\n   Tangle_Moves.rotate ?x ?y \\<or> compress ?x ?y \\<or> slide ?x ?y)\n\ngoal (1 subgoal):\n 1. linkrel (basic [vert, vert] \\<circ> basic [cap])\n     (basic [cap] \\<circ> basic [])", "by auto"], ["proof (state)\nthis:\n  linkrel (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "then"], ["proof (chain)\npicking this:\n  linkrel (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])", "have \" ((basic (vert#vert#[]))\\<circ>(basic (cap#[]))) ~ ?w\""], ["proof (prove)\nusing this:\n  linkrel (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "using Tangle_Equivalence.equality"], ["proof (prove)\nusing this:\n  linkrel (basic [vert, vert] \\<circ> basic [cap])\n   (basic [cap] \\<circ> basic [])\n  linkrel ?a ?b \\<Longrightarrow> ?a ~ ?b\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "by auto"], ["proof (state)\nthis:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "then"], ["proof (chain)\npicking this:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "show ?thesis"], ["proof (prove)\nusing this:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []", "by simp"], ["proof (state)\nthis:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram ((basic (vert#vert#[]))\\<circ>(basic (cap#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [vert, vert] \\<circ> basic [cap])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram ?w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cap] \\<circ> basic [])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"?w ~ ?w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cap] \\<circ> basic [] ~ basic [cap] \\<circ> basic []", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [cap] \\<circ> basic [] ~ basic [cap] \\<circ> basic []", "by auto"], ["proof (state)\nthis:\n  basic [cap] \\<circ> basic [] ~ basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [cap])\n  is_tangle_diagram (basic [cap] \\<circ> basic [])\n  basic [cap] \\<circ> basic [] ~ basic [cap] \\<circ> basic []", "have 14:\"(?w) \\<otimes> ((basic (vert#vert#[]))\\<circ>(basic (cap#[]))) ~ ((?w)\\<otimes> (?w))\""], ["proof (prove)\nusing this:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [cap])\n  is_tangle_diagram (basic [cap] \\<circ> basic [])\n  basic [cap] \\<circ> basic [] ~ basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. basic [cap] \\<circ> basic [] \\<otimes>\n    basic [vert, vert] \\<circ> basic [cap] ~\n    basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []", "using Tangle_Equivalence.tensor_eq"], ["proof (prove)\nusing this:\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n  is_tangle_diagram (basic [vert, vert] \\<circ> basic [cap])\n  is_tangle_diagram (basic [cap] \\<circ> basic [])\n  basic [cap] \\<circ> basic [] ~ basic [cap] \\<circ> basic []\n  ?B ~ ?D \\<and>\n  ?A ~ ?C \\<and>\n  is_tangle_diagram ?A \\<and>\n  is_tangle_diagram ?B \\<and>\n  is_tangle_diagram ?C \\<and> is_tangle_diagram ?D \\<Longrightarrow>\n  ?A \\<otimes> ?B ~ ?C \\<otimes> ?D\n\ngoal (1 subgoal):\n 1. basic [cap] \\<circ> basic [] \\<otimes>\n    basic [vert, vert] \\<circ> basic [cap] ~\n    basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []", "by metis"], ["proof (state)\nthis:\n  basic [cap] \\<circ> basic [] \\<otimes>\n  basic [vert, vert] \\<circ> basic [cap] ~\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  basic [cap] \\<circ> basic [] \\<otimes>\n  basic [vert, vert] \\<circ> basic [cap] ~\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []", "have \"((basic(cap#vert#vert#[])) \\<circ> (basic (cap#[]))) ~ ((?w)\\<otimes> (?w))\""], ["proof (prove)\nusing this:\n  basic [cap] \\<circ> basic [] \\<otimes>\n  basic [vert, vert] \\<circ> basic [cap] ~\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. basic [cap, vert, vert] \\<circ> basic [cap] ~\n    basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []", "using 13"], ["proof (prove)\nusing this:\n  basic [cap] \\<circ> basic [] \\<otimes>\n  basic [vert, vert] \\<circ> basic [cap] ~\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []\n  basic [vert, vert] \\<circ> basic [cap] ~ basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. basic [cap, vert, vert] \\<circ> basic [cap] ~\n    basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []", "by auto"], ["proof (state)\nthis:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "have \" ((?w)\\<otimes> (?w)) = (basic (cap#cap#[])) \\<circ> (basic ([]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic [] =\n    basic [cap, cap] \\<circ> basic []", "using tensor.simps"], ["proof (prove)\nusing this:\n  basic ?x \\<otimes> basic ?y = basic (?x \\<otimes> ?y)\n  ?x * ?xs \\<otimes> basic ?y =\n  (if codomain_block ?y = 0 then (?x \\<otimes> ?y) * ?xs\n   else (?x \\<otimes> ?y) *\n        (?xs \\<otimes> basic (make_vert_block (nat (codomain_block ?y)))))\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic [] =\n    basic [cap, cap] \\<circ> basic []", "by auto"], ["proof (state)\nthis:\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic [] =\n  basic [cap, cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic [] =\n  basic [cap, cap] \\<circ> basic []", "have \"((basic(cap#vert#vert#[]))\\<circ>(basic (cap#[])))~ (basic (cap#cap#[]))\\<circ>(basic ([]))\""], ["proof (prove)\nusing this:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic []\n  basic [cap] \\<circ> basic [] \\<otimes> basic [cap] \\<circ> basic [] =\n  basic [cap, cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. basic [cap, vert, vert] \\<circ> basic [cap] ~\n    basic [cap, cap] \\<circ> basic []", "by auto"], ["proof (state)\nthis:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap, cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap, cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"?z ~ ?z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ> basic [vert, over, vert] ~\n    basic [cup, cup] \\<circ> basic [vert, over, vert]", "using refl"], ["proof (prove)\nusing this:\n  ?a ~f ?a\n\ngoal (1 subgoal):\n 1. basic [cup, cup] \\<circ> basic [vert, over, vert] ~\n    basic [cup, cup] \\<circ> basic [vert, over, vert]", "by auto"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ> basic [vert, over, vert] ~\n  basic [cup, cup] \\<circ> basic [vert, over, vert]\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  basic [cup, cup] \\<circ> basic [vert, over, vert] ~\n  basic [cup, cup] \\<circ> basic [vert, over, vert]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"domain_wall ((basic(cap#cap#[])) \\<circ> (basic ([])))\n                                = codomain_wall (?z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (basic [cap, cap] \\<circ> basic []) =\n    codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])", "by auto"], ["proof (state)\nthis:\n  domain_wall (basic [cap, cap] \\<circ> basic []) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  domain_wall (basic [cap, cap] \\<circ> basic []) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"domain_wall (((basic(cap#vert#vert#[])) \\<circ> (basic (cap#[]))))\n                                = codomain_wall (?z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (basic [cap, vert, vert] \\<circ> basic [cap]) =\n    codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])", "by auto"], ["proof (state)\nthis:\n  domain_wall (basic [cap, vert, vert] \\<circ> basic [cap]) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  domain_wall (basic [cap, vert, vert] \\<circ> basic [cap]) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram ((basic(cap#vert#vert#[])) \\<circ> (basic (cap#[])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cap, vert, vert] \\<circ> basic [cap])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cap, vert, vert] \\<circ> basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cap, vert, vert] \\<circ> basic [cap])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram (?z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cup, cup] \\<circ> basic [vert, over, vert])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup, cup] \\<circ> basic [vert, over, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cup, cup] \\<circ> basic [vert, over, vert])\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"is_tangle_diagram  ((basic(cap#cap#[])) \\<circ> (basic ([])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic [cap, cap] \\<circ> basic [])", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic [cap, cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap, cap] \\<circ> basic []\n  basic [cup, cup] \\<circ> basic [vert, over, vert] ~\n  basic [cup, cup] \\<circ> basic [vert, over, vert]\n  domain_wall (basic [cap, cap] \\<circ> basic []) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  domain_wall (basic [cap, vert, vert] \\<circ> basic [cap]) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  is_tangle_diagram (basic [cap, vert, vert] \\<circ> basic [cap])\n  is_tangle_diagram (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  is_tangle_diagram (basic [cap, cap] \\<circ> basic [])", "have 14:\" (?z) \\<circ>  ((basic(cap#vert#vert#[])) \\<circ> (basic (cap#[])))\n                      ~ (?z) \\<circ> ((basic(cap#cap#[])) \\<circ> (basic ([])))\" (is \"?aa ~ ?bb\")"], ["proof (prove)\nusing this:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap, cap] \\<circ> basic []\n  basic [cup, cup] \\<circ> basic [vert, over, vert] ~\n  basic [cup, cup] \\<circ> basic [vert, over, vert]\n  domain_wall (basic [cap, cap] \\<circ> basic []) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  domain_wall (basic [cap, vert, vert] \\<circ> basic [cap]) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  is_tangle_diagram (basic [cap, vert, vert] \\<circ> basic [cap])\n  is_tangle_diagram (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  is_tangle_diagram (basic [cap, cap] \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<circ> basic []", "using Tangle_Equivalence.compose_eq"], ["proof (prove)\nusing this:\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  basic [cap, cap] \\<circ> basic []\n  basic [cup, cup] \\<circ> basic [vert, over, vert] ~\n  basic [cup, cup] \\<circ> basic [vert, over, vert]\n  domain_wall (basic [cap, cap] \\<circ> basic []) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  domain_wall (basic [cap, vert, vert] \\<circ> basic [cap]) =\n  codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  is_tangle_diagram (basic [cap, vert, vert] \\<circ> basic [cap])\n  is_tangle_diagram (basic [cup, cup] \\<circ> basic [vert, over, vert])\n  is_tangle_diagram (basic [cap, cap] \\<circ> basic [])\n  ?B ~ ?D \\<and>\n  ?A ~ ?C \\<and>\n  is_tangle_diagram ?A \\<and>\n  is_tangle_diagram ?B \\<and>\n  is_tangle_diagram ?C \\<and>\n  is_tangle_diagram ?D \\<and>\n  domain_wall ?B = codomain_wall ?A \\<and>\n  domain_wall ?D = codomain_wall ?C \\<Longrightarrow>\n  ?A \\<circ> ?B ~ ?C \\<circ> ?D\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<circ> basic []", "by metis"], ["proof (state)\nthis:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "moreover"], ["proof (state)\nthis:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic []\n\ngoal (1 subgoal):\n 1. x ~ y", "have 15: \"((?z) \\<circ> ((basic(cap#cap#[]))) \\<circ> (basic ([]))) \n                ~ ((?z) \\<circ> (basic(cap#cap#[])))\" (is \"?bb ~ ?cc\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<circ> basic [] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "using Tangle_Equivalence.codomain_compose  Tangle_Equivalence.sym \n               \\<open>is_tangle_diagram (basic [cap, cap] \\<circ> basic [])\\<close> codomain_wall_compose \n               compose_leftassociativity converse_composition_of_tangle_diagrams \n               domain_block.simps(1) domain_wall.simps(1)"], ["proof (prove)\nusing this:\n  codomain_wall ?a = 0 \\<and> is_tangle_diagram ?a \\<Longrightarrow>\n  ?a ~ ?a \\<circ> basic []\n  ?A ~ ?B \\<Longrightarrow> ?B ~ ?A\n  is_tangle_diagram (basic [cap, cap] \\<circ> basic [])\n  codomain_wall (?xs \\<circ> ?ys) = codomain_wall ?ys\n  (?x \\<circ> ?y) \\<circ> ?z = ?x \\<circ> ?y \\<circ> ?z\n  is_tangle_diagram (?x \\<circ> ?y) \\<Longrightarrow>\n  domain_wall ?y = codomain_wall ?x\n  domain_block [] = 0\n  domain_wall (basic ?x) = domain_block ?x\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<circ> basic [] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "by (metis (hide_lams, mono_tags) Tangle_Equivalence.compose_eq \n                Tangle_Equivalence.refl \n                \\<open>codomain_wall (basic [cup, cup]) \n                         = domain_wall (basic [vert, over, vert] \\<circ> basic [cap, vert, vert])\\<close> \n                   \\<open>domain_wall (basic [cap, cap] \\<circ> basic []) \n          = codomain_wall (basic [cup, cup] \\<circ> basic [vert, over, vert])\\<close> \n                          comp_of_tangle_dgms domain_wall_compose is_tangle_diagram.simps(1))"], ["proof (state)\nthis:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "ultimately"], ["proof (chain)\npicking this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic []\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]", "have \"(?aa ~ ?bb)\\<and> (?bb ~ ?cc) \\<Longrightarrow>?aa ~ ?cc\""], ["proof (prove)\nusing this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic []\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<circ> basic [] \\<and>\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<circ> basic [] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<Longrightarrow>\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "using transitive"], ["proof (prove)\nusing this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic []\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n  \\<lbrakk>?a ~ ?b; ?b ~ ?c\\<rbrakk> \\<Longrightarrow> ?a ~ ?c\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<circ> basic [] \\<and>\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<circ> basic [] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<Longrightarrow>\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "by auto"], ["proof (state)\nthis:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] \\<and>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<Longrightarrow>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] \\<and>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<Longrightarrow>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]", "have 16:\"?aa ~ ?cc\""], ["proof (prove)\nusing this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] \\<and>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<Longrightarrow>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "using 14 15"], ["proof (prove)\nusing this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] \\<and>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<Longrightarrow>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic []\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<circ> basic [] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "by auto"], ["proof (state)\nthis:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]", "have 17:\" ((basic (cup#[]))\\<circ>(basic (cap#[])))~ ?aa\""], ["proof (prove)\nusing this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. y ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap]", "using 9 10 Tangle_Equivalence.trans  Tangle_Equivalence.sym"], ["proof (prove)\nusing this:\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n  (basic [cup, cup] \\<circ>\n   basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n  basic [cap] ~\n  y\n  (basic [cup, cup] \\<circ>\n   basic [vert, over, vert] \\<circ> basic [cap, vert, vert]) \\<circ>\n  basic [cap] =\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap]\n  \\<lbrakk>?A ~ ?B; ?B ~ ?C\\<rbrakk> \\<Longrightarrow> ?A ~ ?C\n  ?A ~ ?B \\<Longrightarrow> ?B ~ ?A\n\ngoal (1 subgoal):\n 1. y ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap]", "by (metis (hide_lams, no_types))"], ["proof (state)\nthis:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "have \"(((basic (cup#[]))\\<circ>(basic (cap#[])))~ ?aa)\\<and>(?aa ~ ?cc)\n            \\<Longrightarrow> ((basic (cup#[]))\\<circ>(basic (cap#[])))~ ?cc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] \\<and>\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<Longrightarrow>\n    y ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "using transitive"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a ~ ?b; ?b ~ ?c\\<rbrakk> \\<Longrightarrow> ?a ~ ?c\n\ngoal (1 subgoal):\n 1. y ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] \\<and>\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, vert, vert] \\<circ> basic [cap] ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap] \\<Longrightarrow>\n    y ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "by auto"], ["proof (state)\nthis:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] \\<and>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<Longrightarrow>\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] \\<and>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<Longrightarrow>\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]", "have \"((basic (cup#[]))\\<circ>(basic (cap#[])))~ ?cc\""], ["proof (prove)\nusing this:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] \\<and>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<Longrightarrow>\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. y ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "using 17 16"], ["proof (prove)\nusing this:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] \\<and>\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap] \\<Longrightarrow>\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap]\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, vert, vert] \\<circ> basic [cap] ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. y ~\n    (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n    basic [cap, cap]", "by auto"], ["proof (state)\nthis:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "then"], ["proof (chain)\npicking this:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]", "show ?thesis"], ["proof (prove)\nusing this:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n\ngoal (1 subgoal):\n 1. x ~ y", "using Tangle_Equivalence.sym"], ["proof (prove)\nusing this:\n  y ~\n  (basic [cup, cup] \\<circ> basic [vert, over, vert]) \\<circ>\n  basic [cap, cap]\n  ?A ~ ?B \\<Longrightarrow> ?B ~ ?A\n\ngoal (1 subgoal):\n 1. x ~ y", "by auto"], ["proof (state)\nthis:\n  x ~ y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}