{"file_name": "/home/qj213/afp-2021-10-22/thys/Knot_Theory/Kauffman_Invariance.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Knot_Theory", "problem_names": ["theorem kauffman_invariance:\"(w1::wall) ~f w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\"", "lemma \"rat_poly_times A B = 1\"", "lemma \"kauff_mat ([cup]*(basic [cap])) = [[-(A^2) - (B^2)]]\"", "lemma \"kauff_mat ([cup,cup]*(basic [cap,cap]))= [[((A^4)+(B^4)) + 2]]\"", "lemma trefoil:\n\"kauff_mat ([cup,cup]*[vert,over,vert]*[vert,over,vert]*[vert,over,vert]\n              *(basic [cap,cap]))\n          = [[trefoil_polynomial]]\""], "translations": [["", "theorem kauffman_invariance:\"(w1::wall) ~f w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 ~f w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "proof(induction rule:Framed_Tangle_Equivalence.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>a. kauff_mat a = kauff_mat a\n 2. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 3. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 4. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 5. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 6. \\<And>A B C.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B; B ~f C;\n        kauff_mat B = kauff_mat C\\<rbrakk>\n       \\<Longrightarrow> kauff_mat A = kauff_mat C\n 7. \\<And>A B.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B\\<rbrakk>\n       \\<Longrightarrow> kauff_mat B = kauff_mat A\n 8. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "case refl"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. \\<And>a. kauff_mat a = kauff_mat a\n 2. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 3. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 4. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 5. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 6. \\<And>A B C.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B; B ~f C;\n        kauff_mat B = kauff_mat C\\<rbrakk>\n       \\<Longrightarrow> kauff_mat A = kauff_mat C\n 7. \\<And>A B.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B\\<rbrakk>\n       \\<Longrightarrow> kauff_mat B = kauff_mat A\n 8. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat a_ = kauff_mat a_", "using refl"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat a_ = kauff_mat a_", "by auto"], ["proof (state)\nthis:\n  kauff_mat a_ = kauff_mat a_\n\ngoal (7 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>A B C.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B; B ~f C;\n        kauff_mat B = kauff_mat C\\<rbrakk>\n       \\<Longrightarrow> kauff_mat A = kauff_mat C\n 6. \\<And>A B.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B\\<rbrakk>\n       \\<Longrightarrow> kauff_mat B = kauff_mat A\n 7. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>A B C.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B; B ~f C;\n        kauff_mat B = kauff_mat C\\<rbrakk>\n       \\<Longrightarrow> kauff_mat A = kauff_mat C\n 6. \\<And>A B.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B\\<rbrakk>\n       \\<Longrightarrow> kauff_mat B = kauff_mat A\n 7. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "case sym"], ["proof (state)\nthis:\n  A_ ~f B_\n  kauff_mat A_ = kauff_mat B_\n\ngoal (7 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>A B C.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B; B ~f C;\n        kauff_mat B = kauff_mat C\\<rbrakk>\n       \\<Longrightarrow> kauff_mat A = kauff_mat C\n 6. \\<And>A B.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B\\<rbrakk>\n       \\<Longrightarrow> kauff_mat B = kauff_mat A\n 7. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat B_ = kauff_mat A_", "using sym"], ["proof (prove)\nusing this:\n  A_ ~f B_\n  kauff_mat A_ = kauff_mat B_\n\ngoal (1 subgoal):\n 1. kauff_mat B_ = kauff_mat A_", "by auto"], ["proof (state)\nthis:\n  kauff_mat B_ = kauff_mat A_\n\ngoal (6 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>A B C.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B; B ~f C;\n        kauff_mat B = kauff_mat C\\<rbrakk>\n       \\<Longrightarrow> kauff_mat A = kauff_mat C\n 6. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>A B C.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B; B ~f C;\n        kauff_mat B = kauff_mat C\\<rbrakk>\n       \\<Longrightarrow> kauff_mat A = kauff_mat C\n 6. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "case trans"], ["proof (state)\nthis:\n  A_ ~f B_\n  B_ ~f C_\n  kauff_mat A_ = kauff_mat B_\n  kauff_mat B_ = kauff_mat C_\n\ngoal (6 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>A B C.\n       \\<lbrakk>A ~f B; kauff_mat A = kauff_mat B; B ~f C;\n        kauff_mat B = kauff_mat C\\<rbrakk>\n       \\<Longrightarrow> kauff_mat A = kauff_mat C\n 6. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat A_ = kauff_mat C_", "using trans"], ["proof (prove)\nusing this:\n  A_ ~f B_\n  B_ ~f C_\n  kauff_mat A_ = kauff_mat B_\n  kauff_mat B_ = kauff_mat C_\n\ngoal (1 subgoal):\n 1. kauff_mat A_ = kauff_mat C_", "by auto"], ["proof (state)\nthis:\n  kauff_mat A_ = kauff_mat C_\n\ngoal (5 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "case compose_eq"], ["proof (state)\nthis:\n  (B_ ~f D_ \\<and> kauff_mat B_ = kauff_mat D_) \\<and>\n  (A_ ~f C_ \\<and> kauff_mat A_ = kauff_mat C_) \\<and>\n  is_tangle_diagram A_ \\<and>\n  is_tangle_diagram B_ \\<and>\n  is_tangle_diagram C_ \\<and>\n  is_tangle_diagram D_ \\<and>\n  domain_wall B_ = codomain_wall A_ \\<and> domain_wall D_ = codomain_wall C_\n\ngoal (5 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and>\n       is_tangle_diagram D \\<and>\n       domain_wall B = codomain_wall A \\<and>\n       domain_wall D = codomain_wall C \\<Longrightarrow>\n       kauff_mat (A \\<circ> B) = kauff_mat (C \\<circ> D)\n 5. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (A_ \\<circ> B_) = kauff_mat (C_ \\<circ> D_)", "using compose_eq tangle_compose_matrix"], ["proof (prove)\nusing this:\n  (B_ ~f D_ \\<and> kauff_mat B_ = kauff_mat D_) \\<and>\n  (A_ ~f C_ \\<and> kauff_mat A_ = kauff_mat C_) \\<and>\n  is_tangle_diagram A_ \\<and>\n  is_tangle_diagram B_ \\<and>\n  is_tangle_diagram C_ \\<and>\n  is_tangle_diagram D_ \\<and>\n  domain_wall B_ = codomain_wall A_ \\<and> domain_wall D_ = codomain_wall C_\n  is_tangle_diagram ?ws1.0 \\<and>\n  is_tangle_diagram ?ws2.0 \\<and>\n  domain_wall ?ws2.0 = codomain_wall ?ws1.0 \\<Longrightarrow>\n  kauff_mat (?ws1.0 \\<circ> ?ws2.0) =\n  rat_poly.matrix_mult (kauff_mat ?ws1.0) (kauff_mat ?ws2.0)\n\ngoal (1 subgoal):\n 1. kauff_mat (A_ \\<circ> B_) = kauff_mat (C_ \\<circ> D_)", "by auto"], ["proof (state)\nthis:\n  kauff_mat (A_ \\<circ> B_) = kauff_mat (C_ \\<circ> D_)\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "case codomain_compose"], ["proof (state)\nthis:\n  codomain_wall a_ = 0 \\<and> is_tangle_diagram a_\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>a.\n       codomain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (a \\<circ> basic [])\n 4. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat a_ = kauff_mat (a_ \\<circ> basic [])", "using codomain_compose left_mat_compose"], ["proof (prove)\nusing this:\n  codomain_wall a_ = 0 \\<and> is_tangle_diagram a_\n  \\<lbrakk>is_tangle_diagram ?ws; codomain_wall ?ws = 0\\<rbrakk>\n  \\<Longrightarrow> kauff_mat ?ws = kauff_mat (?ws \\<circ> basic [])\n\ngoal (1 subgoal):\n 1. kauff_mat a_ = kauff_mat (a_ \\<circ> basic [])", "by auto"], ["proof (state)\nthis:\n  kauff_mat a_ = kauff_mat (a_ \\<circ> basic [])\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "case domain_compose"], ["proof (state)\nthis:\n  domain_wall a_ = 0 \\<and> is_tangle_diagram a_\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>a.\n       domain_wall a = 0 \\<and> is_tangle_diagram a \\<Longrightarrow>\n       kauff_mat a = kauff_mat (basic [] \\<circ> a)\n 3. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat a_ = kauff_mat (basic [] \\<circ> a_)", "using domain_compose right_mat_compose"], ["proof (prove)\nusing this:\n  domain_wall a_ = 0 \\<and> is_tangle_diagram a_\n  \\<lbrakk>is_tangle_diagram ?ws; domain_wall ?ws = 0\\<rbrakk>\n  \\<Longrightarrow> kauff_mat ?ws = kauff_mat (basic [] \\<circ> ?ws)\n\ngoal (1 subgoal):\n 1. kauff_mat a_ = kauff_mat (basic [] \\<circ> a_)", "by auto"], ["proof (state)\nthis:\n  kauff_mat a_ = kauff_mat (basic [] \\<circ> a_)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "case tensor_eq"], ["proof (state)\nthis:\n  (B_ ~f D_ \\<and> kauff_mat B_ = kauff_mat D_) \\<and>\n  (A_ ~f C_ \\<and> kauff_mat A_ = kauff_mat C_) \\<and>\n  is_tangle_diagram A_ \\<and>\n  is_tangle_diagram B_ \\<and>\n  is_tangle_diagram C_ \\<and> is_tangle_diagram D_\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b\n 2. \\<And>B D A C.\n       (B ~f D \\<and> kauff_mat B = kauff_mat D) \\<and>\n       (A ~f C \\<and> kauff_mat A = kauff_mat C) \\<and>\n       is_tangle_diagram A \\<and>\n       is_tangle_diagram B \\<and>\n       is_tangle_diagram C \\<and> is_tangle_diagram D \\<Longrightarrow>\n       kauff_mat (A \\<otimes> B) = kauff_mat (C \\<otimes> D)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (A_ \\<otimes> B_) = kauff_mat (C_ \\<otimes> D_)", "using  tensor_eq.IH Tensor_Invariance"], ["proof (prove)\nusing this:\n  (B_ ~f D_ \\<and> kauff_mat B_ = kauff_mat D_) \\<and>\n  (A_ ~f C_ \\<and> kauff_mat A_ = kauff_mat C_) \\<and>\n  is_tangle_diagram A_ \\<and>\n  is_tangle_diagram B_ \\<and>\n  is_tangle_diagram C_ \\<and> is_tangle_diagram D_\n  is_tangle_diagram ?ws1.0 \\<and> is_tangle_diagram ?ws2.0 \\<Longrightarrow>\n  kauff_mat (?ws1.0 \\<otimes> ?ws2.0) =\n  kauff_mat ?ws1.0 \\<otimes> kauff_mat ?ws2.0\n\ngoal (1 subgoal):\n 1. kauff_mat (A_ \\<otimes> B_) = kauff_mat (C_ \\<otimes> D_)", "by (metis)"], ["proof (state)\nthis:\n  kauff_mat (A_ \\<otimes> B_) = kauff_mat (C_ \\<otimes> D_)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b", "case equality"], ["proof (state)\nthis:\n  framed_linkrel a_ b_\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       framed_linkrel a b \\<Longrightarrow> kauff_mat a = kauff_mat b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat a_ = kauff_mat b_", "using framed_linkrel_inv equality"], ["proof (prove)\nusing this:\n  framed_linkrel ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  framed_linkrel a_ b_\n\ngoal (1 subgoal):\n 1. kauff_mat a_ = kauff_mat b_", "by auto"], ["proof (state)\nthis:\n  kauff_mat a_ = kauff_mat b_\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"rat_poly_times A B = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_times A B = 1", "using inverse1"], ["proof (prove)\nusing this:\n  rat_poly_times A B = 1\n\ngoal (1 subgoal):\n 1. rat_poly_times A B = 1", "by (metis )"], ["", "text\\<open>we calculate kauffman bracket of a few links\\<close>"], ["", "text\\<open>kauffman bracket of an unknot with zero crossings\\<close>"], ["", "lemma \"kauff_mat ([cup]*(basic [cap])) = [[-(A^2) - (B^2)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat ([cup] * basic [cap]) =\n    [[rat_poly_inv (A\\<^sup>2) - B\\<^sup>2]]", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0]\n       (map2 (#) [A]\n         (map2 (#) [rat_poly_inv B]\n           (map2 (#) [0]\n             (replicate\n               (rat_poly.row_length [[0], [A], [rat_poly_inv B], [0]])\n               [])))))\n     [0, rat_poly_inv A, B, 0] =\n    [rat_poly_inv (A\\<^sup>2) - B\\<^sup>2]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w. scalar_prod w [0, rat_poly_inv A, B, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0]\n       (map2 (#) [A]\n         (map2 (#) [rat_poly_inv B]\n           (map2 (#) [0]\n             (replicate\n               (rat_poly.row_length [[0], [A], [rat_poly_inv B], [0]])\n               []))))) =\n    [rat_poly_inv (A\\<^sup>2) - B\\<^sup>2]", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. scalar_prod [0, A, rat_poly_inv B, 0] [0, rat_poly_inv A, B, 0] =\n    rat_poly_inv (A\\<^sup>2) - B\\<^sup>2", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_inv (rat_poly_times A A) - rat_poly_times B B =\n    rat_poly_inv (A\\<^sup>2) - B\\<^sup>2", "by (simp add: power2_eq_square)"], ["", "text\\<open>kauffman bracket of an a two component unlinked unknot \n    with zero crossings\\<close>"], ["", "lemma \"kauff_mat ([cup,cup]*(basic [cap,cap]))= [[((A^4)+(B^4)) + 2]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat ([cup, cup] * basic [cap, cap]) =\n    [[rat_poly_plus (rat_poly_plus (A ^ 4) (B ^ 4)) 2]]", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0]\n       (map2 (#) [0]\n         (map2 (#) [0]\n           (map2 (#) [0]\n             (map2 (#) [0]\n               (map2 (#) [rat_poly_times A A]\n                 (map2 (#) [rat_poly_inv (rat_poly_times A B)]\n                   (map2 (#) [0]\n                     (map2 (#) [0]\n                       (map2 (#) [rat_poly_inv (rat_poly_times B A)]\n                         (map2 (#) [rat_poly_times B B]\n                           (map2 (#) [0]\n                             (map2 (#) [0]\n                               (map2 (#) [0]\n                                 (map2 (#) [0]\n                                   (map2 (#) [0]\n                                     (replicate\n (rat_poly.row_length\n   [[0], [0], [0], [0], [0], [rat_poly_times A A],\n    [rat_poly_inv (rat_poly_times A B)], [0], [0],\n    [rat_poly_inv (rat_poly_times B A)], [rat_poly_times B B], [0], [0],\n    [0], [0], [0]])\n [])))))))))))))))))\n     [0, 0, 0, 0, 0, rat_poly_times A A, rat_poly_inv (rat_poly_times A B),\n      0, 0, rat_poly_inv (rat_poly_times B A), rat_poly_times B B, 0, 0, 0,\n      0, 0] =\n    [rat_poly_plus (rat_poly_plus (A ^ 4) (B ^ 4)) 2]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w\n              [0, 0, 0, 0, 0, rat_poly_times A A,\n               rat_poly_inv (rat_poly_times A B), 0, 0,\n               rat_poly_inv (rat_poly_times B A), rat_poly_times B B, 0, 0,\n               0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0]\n       (map2 (#) [0]\n         (map2 (#) [0]\n           (map2 (#) [0]\n             (map2 (#) [0]\n               (map2 (#) [rat_poly_times A A]\n                 (map2 (#) [rat_poly_inv (rat_poly_times A B)]\n                   (map2 (#) [0]\n                     (map2 (#) [0]\n                       (map2 (#) [rat_poly_inv (rat_poly_times B A)]\n                         (map2 (#) [rat_poly_times B B]\n                           (map2 (#) [0]\n                             (map2 (#) [0]\n                               (map2 (#) [0]\n                                 (map2 (#) [0]\n                                   (map2 (#) [0]\n                                     (replicate\n (rat_poly.row_length\n   [[0], [0], [0], [0], [0], [rat_poly_times A A],\n    [rat_poly_inv (rat_poly_times A B)], [0], [0],\n    [rat_poly_inv (rat_poly_times B A)], [rat_poly_times B B], [0], [0],\n    [0], [0], [0]])\n []))))))))))))))))) =\n    [rat_poly_plus (rat_poly_plus (A ^ 4) (B ^ 4)) 2]", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. scalar_prod\n     [0, 0, 0, 0, 0, rat_poly_times A A, rat_poly_inv (rat_poly_times A B),\n      0, 0, rat_poly_inv (rat_poly_times B A), rat_poly_times B B, 0, 0, 0,\n      0, 0]\n     [0, 0, 0, 0, 0, rat_poly_times A A, rat_poly_inv (rat_poly_times A B),\n      0, 0, rat_poly_inv (rat_poly_times B A), rat_poly_times B B, 0, 0, 0,\n      0, 0] =\n    rat_poly_plus (rat_poly_plus (A ^ 4) (B ^ 4)) 2", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_plus (rat_poly_times (rat_poly_times A A) (rat_poly_times A A))\n     (rat_poly_plus\n       (rat_poly_times 2\n         (rat_poly_times A (rat_poly_times A (rat_poly_times B B))))\n       (rat_poly_times (rat_poly_times B B) (rat_poly_times B B))) =\n    rat_poly_plus (rat_poly_plus (A ^ 4) (B ^ 4)) 2", "apply(auto simp add:unlink_computation)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition trefoil_polynomial::\"rat_poly\"\nwhere\n\"trefoil_polynomial \\<equiv>\nrat_poly_plus\n     (rat_poly_times (rat_poly_times A A)\n       (rat_poly_plus\n         (rat_poly_times B\n           (rat_poly_times B\n             (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B)\n               (rat_poly_times A A))))\n         (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B)\n           (rat_poly_plus (rat_poly_times B (rat_poly_times B (rat_poly_times A A)))\n             (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B)\n               (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B)\n                 (rat_poly_times A A)))))))\n     (rat_poly_plus\n       (rat_poly_times 2\n         (rat_poly_times A\n           (rat_poly_times A\n             (rat_poly_times A\n               (rat_poly_times A (rat_poly_times A (rat_poly_times B B)))))))\n       (rat_poly_times (rat_poly_times B B)\n         (rat_poly_times B\n           (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B)\n             (rat_poly_times B (rat_poly_times B B))))))\""], ["", "text\\<open>kauffman bracket of trefoil\\<close>"], ["", "lemma trefoil:\n\"kauff_mat ([cup,cup]*[vert,over,vert]*[vert,over,vert]*[vert,over,vert]\n              *(basic [cap,cap]))\n          = [[trefoil_polynomial]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat\n     ([cup, cup] *\n      [vert, over, vert] *\n      [vert, over, vert] * [vert, over, vert] * basic [cap, cap]) =\n    [[trefoil_polynomial]]", "by(simp add: mat_multI_def matT_vec_multI_def rat_poly.row_length_def\n   scalar_prod trefoil_polynomial_def)"], ["", "end"]]}