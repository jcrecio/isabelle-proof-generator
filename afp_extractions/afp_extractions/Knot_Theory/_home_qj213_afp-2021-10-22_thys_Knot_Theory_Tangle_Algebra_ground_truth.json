{"file_name": "/home/qj213/afp-2021-10-22/thys/Knot_Theory/Tangle_Algebra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Knot_Theory", "problem_names": ["lemma domain_make_vert:\"domain_block (make_vert_block n) = int n\"", "lemma codomain_make_vert:\"codomain_block (make_vert_block n) = int n\"", "lemma Nil_left_tensor:\"xs \\<otimes> (basic ([])) = xs\"", "lemma Nil_right_tensor:\"(basic ([])) \\<otimes> xs = xs\"", "lemma \"tensor (basic [vert]) (basic ([vert])) = (basic (([vert]) \\<otimes> ([vert])))\"", "lemma tensor_domain_wall_additivity:\n \"domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\"", "lemma tensor_codomain_wall_additivity:\n \"codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys\"", "theorem is_tangle_make_vert_right:\n \"(is_tangle_diagram xs) \n          \\<Longrightarrow> is_tangle_diagram (xs \\<otimes> (basic (make_vert_block n)))\"", "theorem is_tangle_make_vert_left:\n \"(is_tangle_diagram xs) \\<Longrightarrow> is_tangle_diagram ((basic (make_vert_block n)) \\<otimes> xs)\"", "lemma simp1: \"(codomain_block y) \\<noteq> 0 \\<Longrightarrow>\n       is_tangle_diagram (xs) \n\\<and> is_tangle_diagram ((basic (make_vert_block (nat (codomain_block y))))) \\<longrightarrow>\n               is_tangle_diagram (xs \\<otimes>  ((basic (make_vert_block (nat (codomain_block y)))))) \\<Longrightarrow>\n(is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (basic y) \\<longrightarrow> is_tangle_diagram (x * xs \\<otimes> basic y))\n\"", "lemma simp2: \n \"(codomain_block x) \\<noteq> 0 \n \\<Longrightarrow>\n   is_tangle_diagram  (basic (make_vert_block (nat (codomain_block x)))) \n \\<and> is_tangle_diagram (ys)\n    \\<longrightarrow>\n      is_tangle_diagram ((basic (make_vert_block (nat (codomain_block x)))) \\<otimes> ys) \n     \\<Longrightarrow>\n    (is_tangle_diagram (basic x) \n   \\<and> is_tangle_diagram (y*ys) \n         \\<longrightarrow> is_tangle_diagram ((basic x) \\<otimes> (y*ys)))\"", "lemma simp3: \n \"is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow> is_tangle_diagram (xs \\<otimes> ys) \n \\<Longrightarrow>\n     is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (y * ys) \n     \\<longrightarrow> is_tangle_diagram (x * xs \\<otimes> y * ys)\"", "theorem is_tangle_diagramness:\n shows\"(is_tangle_diagram x)\\<and>(is_tangle_diagram y) \\<longrightarrow>is_tangle_diagram (tensor x y)\"", "theorem tensor_preserves_is_tangle: \n assumes \"is_tangle_diagram x\"\n     and \"is_tangle_diagram y\"\n shows \"is_tangle_diagram (x \\<otimes> y)\"", "theorem well_defined_compose: \n assumes \"is_tangle_diagram x\" \n     and \"is_tangle_diagram y\"\n shows \"(Abs_Tangle_Diagram x) \\<otimes> (Abs_Tangle_Diagram y) = (Abs_Tangle_Diagram (x \\<otimes> y))\""], "translations": [["", "lemma domain_make_vert:\"domain_block (make_vert_block n) = int n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_block (make_vert_block n) = int n", "by (induction n) (auto)"], ["", "lemma codomain_make_vert:\"codomain_block (make_vert_block n) = int n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block n) = int n", "by (induction n) (auto)"], ["", "(*we defined the tensor of wall as described in the standard tangle algebra*)"], ["", "fun tensor::\"wall => wall => wall\" (infixr \"\\<otimes>\" 65)\nwhere\n1:\"tensor (basic x) (basic y) = (basic (x \\<otimes> y))\"\n|2:\"tensor (x*xs) (basic y) = (\n                  if (codomain_block y = 0)\n                  then (x \\<otimes> y)*xs \n                   else \n                    (x \\<otimes> y)\n                     *(xs\\<otimes>(basic (make_vert_block (nat (codomain_block y))))))\"\n|3:\"tensor (basic x) (y*ys) = (\n                  if (codomain_block x = 0) \n                   then (x \\<otimes> y)*ys \n                   else \n                    (x \\<otimes> y)\n                    *((basic (make_vert_block (nat (codomain_block x))))\\<otimes> ys))\"\n|4:\"tensor (x*xs) (y*ys) = (x \\<otimes> y)* (xs \\<otimes> ys)\""], ["", "section\\<open>Properties of tensor product of tangles\\<close>"], ["", "lemma Nil_left_tensor:\"xs \\<otimes> (basic ([])) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<otimes> basic [] = xs", "by (cases xs) (auto simp add:empty_concatenate)"], ["", "lemma Nil_right_tensor:\"(basic ([])) \\<otimes> xs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [] \\<otimes> xs = xs", "by (cases xs) (auto)"], ["", "text\\<open>The definition of tensors is extended to diagrams by using the \nfollowing function\\<close>"], ["", "definition tensor_Tangle ::\"Tangle_Diagram \\<Rightarrow> Tangle_Diagram \\<Rightarrow> Tangle_Diagram\" (infixl \"\\<otimes>\" 65)\nwhere\n\"tensor_Tangle x y = Abs_Tangle_Diagram ((Rep_Tangle_Diagram x) \\<otimes> (Rep_Tangle_Diagram y))\""], ["", "(*some lemmas*)"], ["", "lemma \"tensor (basic [vert]) (basic ([vert])) = (basic (([vert]) \\<otimes> ([vert])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic [vert] \\<otimes> basic [vert] = basic ([vert] \\<otimes> [vert])", "by simp"], ["", "text\\<open>domain\\_wall of a tensor product of two walls is the sum of \nthe domain\\_wall of each of the tensor\n products\\<close>"], ["", "lemma tensor_domain_wall_additivity:\n \"domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       xs = basic x1 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       xs = basic x1 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "assume A:\"xs = basic x\""], ["proof (state)\nthis:\n  xs = basic x\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       xs = basic x1 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  xs = basic x", "have \"domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\""], ["proof (prove)\nusing this:\n  xs = basic x\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "proof(cases ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = basic x; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = basic x; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "assume B:\"ys = basic y\""], ["proof (state)\nthis:\n  ys = basic y\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = basic x; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "have \"domain_block (x \\<otimes> y) = domain_block x + domain_block y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_block (x \\<otimes> y) = domain_block x + domain_block y", "using domain_additive"], ["proof (prove)\nusing this:\n  domain_block (?x \\<otimes> ?y) = domain_block ?x + domain_block ?y\n\ngoal (1 subgoal):\n 1. domain_block (x \\<otimes> y) = domain_block x + domain_block y", "by auto"], ["proof (state)\nthis:\n  domain_block (x \\<otimes> y) = domain_block x + domain_block y\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = basic x; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  domain_block (x \\<otimes> y) = domain_block x + domain_block y", "have \"domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\""], ["proof (prove)\nusing this:\n  domain_block (x \\<otimes> y) = domain_block x + domain_block y\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "using tensor.simps(1) A B"], ["proof (prove)\nusing this:\n  domain_block (x \\<otimes> y) = domain_block x + domain_block y\n  basic ?x \\<otimes> basic ?y = basic (?x \\<otimes> ?y)\n  xs = basic x\n  ys = basic y\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = basic x; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "fix z zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "assume C:\"ys = (z*zs)\""], ["proof (state)\nthis:\n  ys = z * zs\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "have \"domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "proof(cases \"(codomain_block x) = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "assume \"codomain_block x = 0\""], ["proof (state)\nthis:\n  codomain_block x = 0\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  codomain_block x = 0", "have \"(xs \\<otimes> ys) = (x \\<otimes> z)*zs\""], ["proof (prove)\nusing this:\n  codomain_block x = 0\n\ngoal (1 subgoal):\n 1. xs \\<otimes> ys = (x \\<otimes> z) * zs", "using A C tensor.simps(4)"], ["proof (prove)\nusing this:\n  codomain_block x = 0\n  xs = basic x\n  ys = z * zs\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. xs \\<otimes> ys = (x \\<otimes> z) * zs", "by auto"], ["proof (state)\nthis:\n  xs \\<otimes> ys = (x \\<otimes> z) * zs\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  xs \\<otimes> ys = (x \\<otimes> z) * zs", "have \"domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\""], ["proof (prove)\nusing this:\n  xs \\<otimes> ys = (x \\<otimes> z) * zs\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "have \"domain_wall ys = domain_block z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall ys = domain_block z", "unfolding domain_wall_def C"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (z * zs) =\n    domain_block z", "by auto"], ["proof (state)\nthis:\n  domain_wall ys = domain_block z\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall ys = domain_block z\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "have \"domain_wall xs = domain_block x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall xs = domain_block x", "unfolding domain_wall_def A"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (basic x) =\n    domain_block x", "by auto"], ["proof (state)\nthis:\n  domain_wall xs = domain_block x\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall xs = domain_block x\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "have \"domain_block (x \\<otimes> z) = domain_block x + domain_block z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_block (x \\<otimes> z) = domain_block x + domain_block z", "using domain_additive"], ["proof (prove)\nusing this:\n  domain_block (?x \\<otimes> ?y) = domain_block ?x + domain_block ?y\n\ngoal (1 subgoal):\n 1. domain_block (x \\<otimes> z) = domain_block x + domain_block z", "by auto"], ["proof (state)\nthis:\n  domain_block (x \\<otimes> z) = domain_block x + domain_block z\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\n  domain_wall ys = domain_block z\n  domain_wall xs = domain_block x\n  domain_block (x \\<otimes> z) = domain_block x + domain_block z", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\n  domain_wall ys = domain_block z\n  domain_wall xs = domain_block x\n  domain_block (x \\<otimes> z) = domain_block x + domain_block z\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "assume \"codomain_block x \\<noteq> 0\""], ["proof (state)\nthis:\n  codomain_block x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "have \"(xs \\<otimes> ys)  \n                 = (x \\<otimes> z)\n                    *((basic (make_vert_block (nat (codomain_block x))))\\<otimes> zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<otimes> ys =\n    (x \\<otimes> z) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> zs)", "using tensor.simps(3) A C \\<open>codomain_block x \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n  xs = basic x\n  ys = z * zs\n  codomain_block x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. xs \\<otimes> ys =\n    (x \\<otimes> z) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> zs)", "by auto"], ["proof (state)\nthis:\n  xs \\<otimes> ys =\n  (x \\<otimes> z) *\n  (basic (make_vert_block (nat (codomain_block x))) \\<otimes> zs)\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  xs \\<otimes> ys =\n  (x \\<otimes> z) *\n  (basic (make_vert_block (nat (codomain_block x))) \\<otimes> zs)", "have \"domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\""], ["proof (prove)\nusing this:\n  xs \\<otimes> ys =\n  (x \\<otimes> z) *\n  (basic (make_vert_block (nat (codomain_block x))) \\<otimes> zs)\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "have \"domain_wall ys = domain_block z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall ys = domain_block z", "unfolding domain_wall_def C"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (z * zs) =\n    domain_block z", "by auto"], ["proof (state)\nthis:\n  domain_wall ys = domain_block z\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall ys = domain_block z\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "have \"domain_wall xs = domain_block x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall xs = domain_block x", "unfolding domain_wall_def A"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (basic x) =\n    domain_block x", "by auto"], ["proof (state)\nthis:\n  domain_wall xs = domain_block x\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall xs = domain_block x\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "have \"domain_block (x \\<otimes> z) = domain_block x + domain_block z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_block (x \\<otimes> z) = domain_block x + domain_block z", "using domain_additive"], ["proof (prove)\nusing this:\n  domain_block (?x \\<otimes> ?y) = domain_block ?x + domain_block ?y\n\ngoal (1 subgoal):\n 1. domain_block (x \\<otimes> z) = domain_block x + domain_block z", "by auto"], ["proof (state)\nthis:\n  domain_block (x \\<otimes> z) = domain_block x + domain_block z\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\n  domain_wall ys = domain_block z\n  domain_wall xs = domain_block x\n  domain_block (x \\<otimes> z) = domain_block x + domain_block z", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_block (x \\<otimes> z)\n  domain_wall ys = domain_block z\n  domain_wall xs = domain_block x\n  domain_block (x \\<otimes> z) = domain_block x + domain_block z\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = basic x; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       xs = basic x1 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "fix z zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "assume D:\"xs = z * zs\""], ["proof (state)\nthis:\n  xs = z * zs\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  xs = z * zs", "have \"domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\""], ["proof (prove)\nusing this:\n  xs = z * zs\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "proof(cases ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = z * zs; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = z * zs; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "assume E:\"ys = basic y\""], ["proof (state)\nthis:\n  ys = basic y\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = z * zs; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  ys = basic y", "have \"domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\""], ["proof (prove)\nusing this:\n  ys = basic y\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "proof(cases \"codomain_block y = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "assume \"codomain_block y = 0\""], ["proof (state)\nthis:\n  codomain_block y = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "have \"(xs \\<otimes> ys) = (z \\<otimes> y)*zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<otimes> ys = (z \\<otimes> y) * zs", "using tensor.simps(2)  D E \\<open>codomain_block y = 0\\<close>"], ["proof (prove)\nusing this:\n  ?x * ?xs \\<otimes> basic ?y =\n  (if codomain_block ?y = 0 then (?x \\<otimes> ?y) * ?xs\n   else (?x \\<otimes> ?y) *\n        (?xs \\<otimes> basic (make_vert_block (nat (codomain_block ?y)))))\n  xs = z * zs\n  ys = basic y\n  codomain_block y = 0\n\ngoal (1 subgoal):\n 1. xs \\<otimes> ys = (z \\<otimes> y) * zs", "by auto"], ["proof (state)\nthis:\n  xs \\<otimes> ys = (z \\<otimes> y) * zs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  xs \\<otimes> ys = (z \\<otimes> y) * zs", "have \"domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\""], ["proof (prove)\nusing this:\n  xs \\<otimes> ys = (z \\<otimes> y) * zs\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "have \"domain_wall xs = domain_block z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall xs = domain_block z", "unfolding domain_wall_def D"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (z * zs) =\n    domain_block z", "by auto"], ["proof (state)\nthis:\n  domain_wall xs = domain_block z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall xs = domain_block z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "have \"domain_wall ys = domain_block y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall ys = domain_block y", "unfolding domain_wall_def E"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (basic y) =\n    domain_block y", "by auto"], ["proof (state)\nthis:\n  domain_wall ys = domain_block y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall ys = domain_block y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "have \"domain_block (z \\<otimes> y) = domain_block z + domain_block y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_block (z \\<otimes> y) = domain_block z + domain_block y", "using domain_additive"], ["proof (prove)\nusing this:\n  domain_block (?x \\<otimes> ?y) = domain_block ?x + domain_block ?y\n\ngoal (1 subgoal):\n 1. domain_block (z \\<otimes> y) = domain_block z + domain_block y", "by auto"], ["proof (state)\nthis:\n  domain_block (z \\<otimes> y) = domain_block z + domain_block y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys = basic y; codomain_block y = 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys\n 2. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\n  domain_wall xs = domain_block z\n  domain_wall ys = domain_block y\n  domain_block (z \\<otimes> y) = domain_block z + domain_block y", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\n  domain_wall xs = domain_block z\n  domain_wall ys = domain_block y\n  domain_block (z \\<otimes> y) = domain_block z + domain_block y\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "assume \"codomain_block y \\<noteq> 0\""], ["proof (state)\nthis:\n  codomain_block y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "have \"(xs \\<otimes> ys) \n               = \n                (z \\<otimes> y)\n                  *(zs\\<otimes>(basic (make_vert_block (nat (codomain_block y)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<otimes> ys =\n    (z \\<otimes> y) *\n    (zs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "using tensor.simps(3) D E \\<open>codomain_block y \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n  xs = z * zs\n  ys = basic y\n  codomain_block y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. xs \\<otimes> ys =\n    (z \\<otimes> y) *\n    (zs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "by auto"], ["proof (state)\nthis:\n  xs \\<otimes> ys =\n  (z \\<otimes> y) *\n  (zs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  xs \\<otimes> ys =\n  (z \\<otimes> y) *\n  (zs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "have \"domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\""], ["proof (prove)\nusing this:\n  xs \\<otimes> ys =\n  (z \\<otimes> y) *\n  (zs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "have \"domain_wall ys = domain_block y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall ys = domain_block y", "unfolding domain_wall_def E"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (basic y) =\n    domain_block y", "by auto"], ["proof (state)\nthis:\n  domain_wall ys = domain_block y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall ys = domain_block y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "have \"domain_wall xs = domain_block z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall xs = domain_block z", "unfolding domain_wall_def D"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (z * zs) =\n    domain_block z", "by auto"], ["proof (state)\nthis:\n  domain_wall xs = domain_block z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall xs = domain_block z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "have \"domain_block (z \\<otimes> y) = domain_block z + domain_block y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_block (z \\<otimes> y) = domain_block z + domain_block y", "using domain_additive"], ["proof (prove)\nusing this:\n  domain_block (?x \\<otimes> ?y) = domain_block ?x + domain_block ?y\n\ngoal (1 subgoal):\n 1. domain_block (z \\<otimes> y) = domain_block z + domain_block y", "by auto"], ["proof (state)\nthis:\n  domain_block (z \\<otimes> y) = domain_block z + domain_block y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys = basic y; codomain_block y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                      domain_wall xs + domain_wall ys", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\n  domain_wall ys = domain_block y\n  domain_wall xs = domain_block z\n  domain_block (z \\<otimes> y) = domain_block z + domain_block y", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> y)\n  domain_wall ys = domain_block y\n  domain_wall xs = domain_block z\n  domain_block (z \\<otimes> y) = domain_block z + domain_block y\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs = z * zs; ys = basic x1\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "fix w ws"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "assume F:\"ys = w*ws\""], ["proof (state)\nthis:\n  ys = w * ws\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "have \"(xs \\<otimes> ys) = (z \\<otimes> w) * (zs \\<otimes> ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<otimes> ys = (z \\<otimes> w) * (zs \\<otimes> ws)", "using D F"], ["proof (prove)\nusing this:\n  xs = z * zs\n  ys = w * ws\n\ngoal (1 subgoal):\n 1. xs \\<otimes> ys = (z \\<otimes> w) * (zs \\<otimes> ws)", "by auto"], ["proof (state)\nthis:\n  xs \\<otimes> ys = (z \\<otimes> w) * (zs \\<otimes> ws)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  xs \\<otimes> ys = (z \\<otimes> w) * (zs \\<otimes> ws)", "have \"domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> w)\""], ["proof (prove)\nusing this:\n  xs \\<otimes> ys = (z \\<otimes> w) * (zs \\<otimes> ws)\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> w)", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> w)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> w)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "have \"domain_wall ys = domain_block w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall ys = domain_block w", "unfolding domain_wall_def F"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (w * ws) =\n    domain_block w", "by auto"], ["proof (state)\nthis:\n  domain_wall ys = domain_block w\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall ys = domain_block w\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "have \"domain_wall xs = domain_block z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall xs = domain_block z", "unfolding domain_wall_def D"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_wall domain_block (\\<lambda>x ys ysa. domain_block x) (z * zs) =\n    domain_block z", "by auto"], ["proof (state)\nthis:\n  domain_wall xs = domain_block z\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "moreover"], ["proof (state)\nthis:\n  domain_wall xs = domain_block z\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "have \"domain_block (z \\<otimes> w) = domain_block z + domain_block w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_block (z \\<otimes> w) = domain_block z + domain_block w", "using domain_additive"], ["proof (prove)\nusing this:\n  domain_block (?x \\<otimes> ?y) = domain_block ?x + domain_block ?y\n\ngoal (1 subgoal):\n 1. domain_block (z \\<otimes> w) = domain_block z + domain_block w", "by auto"], ["proof (state)\nthis:\n  domain_block (z \\<otimes> w) = domain_block z + domain_block w\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs = z * zs; ys = x21 * x22\\<rbrakk>\n       \\<Longrightarrow> domain_wall (xs \\<otimes> ys) =\n                         domain_wall xs + domain_wall ys", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> w)\n  domain_wall ys = domain_block w\n  domain_wall xs = domain_block z\n  domain_block (z \\<otimes> w) = domain_block z + domain_block w", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_block (z \\<otimes> w)\n  domain_wall ys = domain_block w\n  domain_wall xs = domain_block z\n  domain_block (z \\<otimes> w) = domain_block z + domain_block w\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       xs = x21 * x22 \\<Longrightarrow>\n       domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "then"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> ys) = domain_wall xs + domain_wall ys\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>codomain of tensor of two walls is the sum of the respective\ncodomain's is shown by the following theorem\\<close>"], ["", "lemma tensor_codomain_wall_additivity:\n \"codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys", "proof(induction xs ys  rule:tensor.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       codomain_wall (basic x \\<otimes> basic y) =\n       codomain_wall (basic x) + codomain_wall (basic y)\n 2. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n        codomain_wall xs +\n        codomain_wall\n         (basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> basic y) =\n       codomain_wall (x * xs) + codomain_wall (basic y)\n 3. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 4. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "fix xs ys"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       codomain_wall (basic x \\<otimes> basic y) =\n       codomain_wall (basic x) + codomain_wall (basic y)\n 2. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n        codomain_wall xs +\n        codomain_wall\n         (basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> basic y) =\n       codomain_wall (x * xs) + codomain_wall (basic y)\n 3. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 4. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "let ?case = \"(codomain_wall ((basic xs) \\<otimes> (basic ys)) \n                       = (codomain_wall (basic (xs))) \n                              + (codomain_wall (basic ys)))\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       codomain_wall (basic x \\<otimes> basic y) =\n       codomain_wall (basic x) + codomain_wall (basic y)\n 2. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n        codomain_wall xs +\n        codomain_wall\n         (basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> basic y) =\n       codomain_wall (x * xs) + codomain_wall (basic y)\n 3. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 4. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic xs \\<otimes> basic ys) =\n    codomain_wall (basic xs) + codomain_wall (basic ys)", "using codomain_wall.simps codomain_block.simps tensor.simps"], ["proof (prove)\nusing this:\n  codomain_wall (basic ?x) = codomain_block ?x\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n  codomain_block [] = 0\n  codomain_block (?x # ?y) = codomain ?x + codomain_block ?y\n  basic ?x \\<otimes> basic ?y = basic (?x \\<otimes> ?y)\n  ?x * ?xs \\<otimes> basic ?y =\n  (if codomain_block ?y = 0 then (?x \\<otimes> ?y) * ?xs\n   else (?x \\<otimes> ?y) *\n        (?xs \\<otimes> basic (make_vert_block (nat (codomain_block ?y)))))\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. codomain_wall (basic xs \\<otimes> basic ys) =\n    codomain_wall (basic xs) + codomain_wall (basic ys)", "by (metis codomain_additive)"], ["proof (state)\nthis:\n  codomain_wall (basic xs \\<otimes> basic ys) =\n  codomain_wall (basic xs) + codomain_wall (basic ys)\n\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n        codomain_wall xs +\n        codomain_wall\n         (basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> basic y) =\n       codomain_wall (x * xs) + codomain_wall (basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 3. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n        codomain_wall xs +\n        codomain_wall\n         (basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> basic y) =\n       codomain_wall (x * xs) + codomain_wall (basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 3. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "fix x xs y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n        codomain_wall xs +\n        codomain_wall\n         (basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> basic y) =\n       codomain_wall (x * xs) + codomain_wall (basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 3. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "assume case_2:\n         \"codomain_block y \\<noteq> 0 \n           \\<Longrightarrow> codomain_wall \n                (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) \n                  = codomain_wall xs \n                     + codomain_wall \n                          (basic (make_vert_block (nat (codomain_block y))))\""], ["proof (state)\nthis:\n  codomain_block y \\<noteq> 0 \\<Longrightarrow>\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n        codomain_wall xs +\n        codomain_wall\n         (basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> basic y) =\n       codomain_wall (x * xs) + codomain_wall (basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 3. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "let ?case = \"codomain_wall ((x*xs)\\<otimes> (basic y))\n                  = (codomain_wall (x*xs)) + (codomain_wall (basic y))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n        codomain_wall xs +\n        codomain_wall\n         (basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> basic y) =\n       codomain_wall (x * xs) + codomain_wall (basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 3. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "proof(cases \"(codomain_block y = 0)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. codomain_block y = 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)\n 2. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "case True"], ["proof (state)\nthis:\n  codomain_block y = 0\n\ngoal (2 subgoals):\n 1. codomain_block y = 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)\n 2. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "have \"((x*xs)\\<otimes> (basic y)) =  (x \\<otimes> y)*xs \""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * xs \\<otimes> basic y = (x \\<otimes> y) * xs", "using \"Tangle_Algebra.2\" True"], ["proof (prove)\nusing this:\n  ?x * ?xs \\<otimes> basic ?y =\n  (if codomain_block ?y = 0 then (?x \\<otimes> ?y) * ?xs\n   else (?x \\<otimes> ?y) *\n        (?xs \\<otimes> basic (make_vert_block (nat (codomain_block ?y)))))\n  codomain_block y = 0\n\ngoal (1 subgoal):\n 1. x * xs \\<otimes> basic y = (x \\<otimes> y) * xs", "by auto"], ["proof (state)\nthis:\n  x * xs \\<otimes> basic y = (x \\<otimes> y) * xs\n\ngoal (2 subgoals):\n 1. codomain_block y = 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)\n 2. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "then"], ["proof (chain)\npicking this:\n  x * xs \\<otimes> basic y = (x \\<otimes> y) * xs", "have \"codomain_wall ((x*xs)\\<otimes> (basic y)) \n                                = codomain_wall ((x \\<otimes> y)*xs)\""], ["proof (prove)\nusing this:\n  x * xs \\<otimes> basic y = (x \\<otimes> y) * xs\n\ngoal (1 subgoal):\n 1. codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall ((x \\<otimes> y) * xs)", "by auto"], ["proof (state)\nthis:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall ((x \\<otimes> y) * xs)\n\ngoal (2 subgoals):\n 1. codomain_block y = 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)\n 2. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "then"], ["proof (chain)\npicking this:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall ((x \\<otimes> y) * xs)", "have \"... = codomain_wall xs\""], ["proof (prove)\nusing this:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall ((x \\<otimes> y) * xs)\n\ngoal (1 subgoal):\n 1. codomain_wall ((x \\<otimes> y) * xs) = codomain_wall xs", "using codomain_wall.simps"], ["proof (prove)\nusing this:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall ((x \\<otimes> y) * xs)\n  codomain_wall (basic ?x) = codomain_block ?x\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n\ngoal (1 subgoal):\n 1. codomain_wall ((x \\<otimes> y) * xs) = codomain_wall xs", "by auto"], ["proof (state)\nthis:\n  codomain_wall ((x \\<otimes> y) * xs) = codomain_wall xs\n\ngoal (2 subgoals):\n 1. codomain_block y = 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)\n 2. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "then"], ["proof (chain)\npicking this:\n  codomain_wall ((x \\<otimes> y) * xs) = codomain_wall xs", "have \"... = codomain_wall xs + codomain_wall (basic y)\""], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * xs) = codomain_wall xs\n\ngoal (1 subgoal):\n 1. codomain_wall xs = codomain_wall xs + codomain_wall (basic y)", "using True codomain_wall.simps(1)"], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * xs) = codomain_wall xs\n  codomain_block y = 0\n  codomain_wall (basic ?x) = codomain_block ?x\n\ngoal (1 subgoal):\n 1. codomain_wall xs = codomain_wall xs + codomain_wall (basic y)", "by auto"], ["proof (state)\nthis:\n  codomain_wall xs = codomain_wall xs + codomain_wall (basic y)\n\ngoal (2 subgoals):\n 1. codomain_block y = 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)\n 2. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "then"], ["proof (chain)\npicking this:\n  codomain_wall xs = codomain_wall xs + codomain_wall (basic y)", "show ?thesis"], ["proof (prove)\nusing this:\n  codomain_wall xs = codomain_wall xs + codomain_wall (basic y)\n\ngoal (1 subgoal):\n 1. codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "by auto"], ["proof (state)\nthis:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall (x * xs) + codomain_wall (basic y)\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "case False"], ["proof (state)\nthis:\n  codomain_block y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "have \"(x*xs) \\<otimes> (basic y) \n                 = (x \\<otimes> y)\n                     *(xs\\<otimes>(basic (make_vert_block (nat (codomain_block y)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * xs \\<otimes> basic y =\n    (x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "using False"], ["proof (prove)\nusing this:\n  codomain_block y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x * xs \\<otimes> basic y =\n    (x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "by (metis \"Tangle_Algebra.2\")"], ["proof (state)\nthis:\n  x * xs \\<otimes> basic y =\n  (x \\<otimes> y) *\n  (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "moreover"], ["proof (state)\nthis:\n  x * xs \\<otimes> basic y =\n  (x \\<otimes> y) *\n  (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "then"], ["proof (chain)\npicking this:\n  x * xs \\<otimes> basic y =\n  (x \\<otimes> y) *\n  (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "have \"codomain_wall ((x*xs) \\<otimes> (basic y))\n                      = codomain_wall(...)\""], ["proof (prove)\nusing this:\n  x * xs \\<otimes> basic y =\n  (x \\<otimes> y) *\n  (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall\n     ((x \\<otimes> y) *\n      (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))", "by auto"], ["proof (state)\nthis:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "moreover"], ["proof (state)\nthis:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "have \"... \n                  = codomain_wall \n                      (xs\\<otimes>(basic (make_vert_block (nat (codomain_block y)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall\n     ((x \\<otimes> y) *\n      (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))) =\n    codomain_wall\n     (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "using domain_wall.simps"], ["proof (prove)\nusing this:\n  domain_wall (basic ?x) = domain_block ?x\n  domain_wall (?x * ?ys) = domain_block ?x\n\ngoal (1 subgoal):\n 1. codomain_wall\n     ((x \\<otimes> y) *\n      (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))) =\n    codomain_wall\n     (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "by auto"], ["proof (state)\nthis:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))) =\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "moreover"], ["proof (state)\nthis:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))) =\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "have \"... \n                  = codomain_wall xs \n                     + codomain_wall \n                          (basic (make_vert_block (nat (codomain_block y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall\n     (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n    codomain_wall xs +\n    codomain_wall (basic (make_vert_block (nat (codomain_block y))))", "using case_2 False"], ["proof (prove)\nusing this:\n  codomain_block y \\<noteq> 0 \\<Longrightarrow>\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y))))\n  codomain_block y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. codomain_wall\n     (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n    codomain_wall xs +\n    codomain_wall (basic (make_vert_block (nat (codomain_block y))))", "by auto"], ["proof (state)\nthis:\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "moreover"], ["proof (state)\nthis:\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "have \"... = codomain_wall (x*xs)\n                       + codomain_block y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall xs +\n    codomain_wall (basic (make_vert_block (nat (codomain_block y)))) =\n    codomain_wall (x * xs) + codomain_block y", "using codomain_wall.simps"], ["proof (prove)\nusing this:\n  codomain_wall (basic ?x) = codomain_block ?x\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n\ngoal (1 subgoal):\n 1. codomain_wall xs +\n    codomain_wall (basic (make_vert_block (nat (codomain_block y)))) =\n    codomain_wall (x * xs) + codomain_block y", "by (metis codomain_block_nonnegative   codomain_make_vert int_nat_eq)"], ["proof (state)\nthis:\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall (x * xs) + codomain_block y\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "moreover"], ["proof (state)\nthis:\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall (x * xs) + codomain_block y\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "have \"... = codomain_wall (x*xs) + codomain_wall (basic y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (x * xs) + codomain_block y =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "using codomain_wall.simps(1)"], ["proof (prove)\nusing this:\n  codomain_wall (basic ?x) = codomain_block ?x\n\ngoal (1 subgoal):\n 1. codomain_wall (x * xs) + codomain_block y =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "by auto"], ["proof (state)\nthis:\n  codomain_wall (x * xs) + codomain_block y =\n  codomain_wall (x * xs) + codomain_wall (basic y)\n\ngoal (1 subgoal):\n 1. codomain_block y \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "ultimately"], ["proof (chain)\npicking this:\n  x * xs \\<otimes> basic y =\n  (x \\<otimes> y) *\n  (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))\n  codomain_wall\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))) =\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y))))\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall (x * xs) + codomain_block y\n  codomain_wall (x * xs) + codomain_block y =\n  codomain_wall (x * xs) + codomain_wall (basic y)", "show ?thesis"], ["proof (prove)\nusing this:\n  x * xs \\<otimes> basic y =\n  (x \\<otimes> y) *\n  (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))\n  codomain_wall\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))) =\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n  codomain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y))))\n  codomain_wall xs +\n  codomain_wall (basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_wall (x * xs) + codomain_block y\n  codomain_wall (x * xs) + codomain_block y =\n  codomain_wall (x * xs) + codomain_wall (basic y)\n\ngoal (1 subgoal):\n 1. codomain_wall (x * xs \\<otimes> basic y) =\n    codomain_wall (x * xs) + codomain_wall (basic y)", "by auto"], ["proof (state)\nthis:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall (x * xs) + codomain_wall (basic y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  codomain_wall (x * xs \\<otimes> basic y) =\n  codomain_wall (x * xs) + codomain_wall (basic y)\n\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 2. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 2. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "fix x y ys"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 2. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "assume case_3:\"(codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall \n             (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n            = codomain_wall \n               (basic (make_vert_block (nat (codomain_block x)))) \n                  + codomain_wall ys)\""], ["proof (state)\nthis:\n  codomain_block x \\<noteq> 0 \\<Longrightarrow>\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  codomain_wall ys\n\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 2. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "let ?case = \"codomain_wall ((basic x) \\<otimes> (y*ys))\n                  = codomain_wall (basic x) + codomain_wall (y*ys)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        codomain_wall\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n        codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n        codomain_wall ys) \\<Longrightarrow>\n       codomain_wall (basic x \\<otimes> y * ys) =\n       codomain_wall (basic x) + codomain_wall (y * ys)\n 2. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "proof(cases \"codomain_block x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "case True"], ["proof (state)\nthis:\n  codomain_block x = 0\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "have \"(basic x)\\<otimes>(y*ys) = (x \\<otimes> y)*ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic x \\<otimes> y * ys = (x \\<otimes> y) * ys", "using True 3"], ["proof (prove)\nusing this:\n  codomain_block x = 0\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n\ngoal (1 subgoal):\n 1. basic x \\<otimes> y * ys = (x \\<otimes> y) * ys", "by auto"], ["proof (state)\nthis:\n  basic x \\<otimes> y * ys = (x \\<otimes> y) * ys\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  basic x \\<otimes> y * ys = (x \\<otimes> y) * ys", "have \"codomain_wall (...) = codomain_wall (...)\""], ["proof (prove)\nusing this:\n  basic x \\<otimes> y * ys = (x \\<otimes> y) * ys\n\ngoal (1 subgoal):\n 1. codomain_wall ((x \\<otimes> y) * ys) =\n    codomain_wall ((x \\<otimes> y) * ys)", "by auto"], ["proof (state)\nthis:\n  codomain_wall ((x \\<otimes> y) * ys) =\n  codomain_wall ((x \\<otimes> y) * ys)\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall ((x \\<otimes> y) * ys) =\n  codomain_wall ((x \\<otimes> y) * ys)", "have \"... = codomain_wall ys\""], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * ys) =\n  codomain_wall ((x \\<otimes> y) * ys)\n\ngoal (1 subgoal):\n 1. codomain_wall ((x \\<otimes> y) * ys) = codomain_wall ys", "by auto"], ["proof (state)\nthis:\n  codomain_wall ((x \\<otimes> y) * ys) = codomain_wall ys\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall ((x \\<otimes> y) * ys) = codomain_wall ys", "have \"... = codomain_wall ys + codomain_wall (basic x)\""], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * ys) = codomain_wall ys\n\ngoal (1 subgoal):\n 1. codomain_wall ys = codomain_wall ys + codomain_wall (basic x)", "using codomain_wall.simps(1) True"], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * ys) = codomain_wall ys\n  codomain_wall (basic ?x) = codomain_block ?x\n  codomain_block x = 0\n\ngoal (1 subgoal):\n 1. codomain_wall ys = codomain_wall ys + codomain_wall (basic x)", "by auto"], ["proof (state)\nthis:\n  codomain_wall ys = codomain_wall ys + codomain_wall (basic x)\n\ngoal (2 subgoals):\n 1. codomain_block x = 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)\n 2. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall ys = codomain_wall ys + codomain_wall (basic x)", "show ?thesis"], ["proof (prove)\nusing this:\n  codomain_wall ys = codomain_wall ys + codomain_wall (basic x)\n\ngoal (1 subgoal):\n 1. codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic x \\<otimes> y * ys) =\n  codomain_wall (basic x) + codomain_wall (y * ys)\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "case False"], ["proof (state)\nthis:\n  codomain_block x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "have \"(basic x) \\<otimes> (y*ys) \n                 = (x \\<otimes> y)\n                    *((basic (make_vert_block (nat (codomain_block x))))\\<otimes> ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic x \\<otimes> y * ys =\n    (x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)", "using False 3"], ["proof (prove)\nusing this:\n  codomain_block x \\<noteq> 0\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n\ngoal (1 subgoal):\n 1. basic x \\<otimes> y * ys =\n    (x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)", "by auto"], ["proof (state)\nthis:\n  basic x \\<otimes> y * ys =\n  (x \\<otimes> y) *\n  (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  basic x \\<otimes> y * ys =\n  (x \\<otimes> y) *\n  (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)", "have \"codomain_wall (...) = codomain_wall (...)\""], ["proof (prove)\nusing this:\n  basic x \\<otimes> y * ys =\n  (x \\<otimes> y) *\n  (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. codomain_wall\n     ((x \\<otimes> y) *\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n    codomain_wall\n     ((x \\<otimes> y) *\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))", "by auto"], ["proof (state)\nthis:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))", "have \"... \n                 = codomain_wall \n                     ((basic (make_vert_block (nat (codomain_block x))))\\<otimes> ys)\""], ["proof (prove)\nusing this:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))\n\ngoal (1 subgoal):\n 1. codomain_wall\n     ((x \\<otimes> y) *\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n    codomain_wall\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)", "using codomain_wall.simps(2)"], ["proof (prove)\nusing this:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n\ngoal (1 subgoal):\n 1. codomain_wall\n     ((x \\<otimes> y) *\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n    codomain_wall\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)", "by auto"], ["proof (state)\nthis:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)", "have \"... = codomain_block x + codomain_wall ys\""], ["proof (prove)\nusing this:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. codomain_wall\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n    codomain_block x + codomain_wall ys", "using codomain_wall.simps case_3 False\n                      codomain_block_nonnegative codomain_make_vert int_nat_eq"], ["proof (prove)\nusing this:\n  codomain_wall\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) =\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n  codomain_wall (basic ?x) = codomain_block ?x\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n  codomain_block x \\<noteq> 0 \\<Longrightarrow>\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  codomain_wall ys\n  codomain_block x \\<noteq> 0\n  0 \\<le> codomain_block ?x\n  codomain_block (make_vert_block ?n) = int ?n\n  int (nat ?z) = (if 0 \\<le> ?z then ?z else 0)\n\ngoal (1 subgoal):\n 1. codomain_wall\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n    codomain_block x + codomain_wall ys", "by auto"], ["proof (state)\nthis:\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_block x + codomain_wall ys\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_block x + codomain_wall ys", "have \"... = codomain_wall (basic x) + codomain_wall (y*ys)\""], ["proof (prove)\nusing this:\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_block x + codomain_wall ys\n\ngoal (1 subgoal):\n 1. codomain_block x + codomain_wall ys =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "using codomain_wall.simps"], ["proof (prove)\nusing this:\n  codomain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_block x + codomain_wall ys\n  codomain_wall (basic ?x) = codomain_block ?x\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n\ngoal (1 subgoal):\n 1. codomain_block x + codomain_wall ys =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "by auto"], ["proof (state)\nthis:\n  codomain_block x + codomain_wall ys =\n  codomain_wall (basic x) + codomain_wall (y * ys)\n\ngoal (1 subgoal):\n 1. codomain_block x \\<noteq> 0 \\<Longrightarrow>\n    codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_block x + codomain_wall ys =\n  codomain_wall (basic x) + codomain_wall (y * ys)", "show ?thesis"], ["proof (prove)\nusing this:\n  codomain_block x + codomain_wall ys =\n  codomain_wall (basic x) + codomain_wall (y * ys)\n\ngoal (1 subgoal):\n 1. codomain_wall (basic x \\<otimes> y * ys) =\n    codomain_wall (basic x) + codomain_wall (y * ys)", "by (metis \\<open>basic x \\<otimes> y * ys = (x \\<otimes> y) * (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\\<close> \\<open>codomain_wall ((x \\<otimes> y) * (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)) = codomain_wall (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\\<close> \\<open>codomain_wall (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) = codomain_block x + codomain_wall ys\\<close>)"], ["proof (state)\nthis:\n  codomain_wall (basic x \\<otimes> y * ys) =\n  codomain_wall (basic x) + codomain_wall (y * ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  codomain_wall (basic x \\<otimes> y * ys) =\n  codomain_wall (basic x) + codomain_wall (y * ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "fix x xs y ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "assume case_4:\"codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys \""], ["proof (state)\nthis:\n  codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "let ?case = \"codomain_wall ((x*xs) \\<otimes> (y*ys)) \n                      = codomain_wall (x*xs) + codomain_wall (y*ys)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "have \" ((x*xs) \\<otimes> (y*ys)) = (x \\<otimes> y)*(xs \\<otimes> ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)", "using 4"], ["proof (prove)\nusing this:\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)", "by auto"], ["proof (state)\nthis:\n  x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)", "have \"codomain_wall (...) = codomain_wall (...)\""], ["proof (prove)\nusing this:\n  x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n    codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys))", "by auto"], ["proof (state)\nthis:\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys))", "have \"... = codomain_wall (xs \\<otimes> ys)\""], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys))\n\ngoal (1 subgoal):\n 1. codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n    codomain_wall (xs \\<otimes> ys)", "using codomain_wall.simps(2)"], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys))\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n\ngoal (1 subgoal):\n 1. codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n    codomain_wall (xs \\<otimes> ys)", "by auto"], ["proof (state)\nthis:\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n  codomain_wall (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n  codomain_wall (xs \\<otimes> ys)", "have \"... = codomain_wall xs + codomain_wall ys\""], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n  codomain_wall (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys", "using case_4"], ["proof (prove)\nusing this:\n  codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) =\n  codomain_wall (xs \\<otimes> ys)\n  codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys\n\ngoal (1 subgoal):\n 1. codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys", "by auto"], ["proof (state)\nthis:\n  codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys", "have \"... = codomain_wall (x*xs) + (codomain_wall (y*ys))\""], ["proof (prove)\nusing this:\n  codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys\n\ngoal (1 subgoal):\n 1. codomain_wall xs + codomain_wall ys =\n    codomain_wall (x * xs) + codomain_wall (y * ys)", "using codomain_wall.simps(2)"], ["proof (prove)\nusing this:\n  codomain_wall (xs \\<otimes> ys) = codomain_wall xs + codomain_wall ys\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n\ngoal (1 subgoal):\n 1. codomain_wall xs + codomain_wall ys =\n    codomain_wall (x * xs) + codomain_wall (y * ys)", "by auto"], ["proof (state)\nthis:\n  codomain_wall xs + codomain_wall ys =\n  codomain_wall (x * xs) + codomain_wall (y * ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       codomain_wall (xs \\<otimes> ys) =\n       codomain_wall xs + codomain_wall ys \\<Longrightarrow>\n       codomain_wall (x * xs \\<otimes> y * ys) =\n       codomain_wall (x * xs) + codomain_wall (y * ys)", "then"], ["proof (chain)\npicking this:\n  codomain_wall xs + codomain_wall ys =\n  codomain_wall (x * xs) + codomain_wall (y * ys)", "show ?case"], ["proof (prove)\nusing this:\n  codomain_wall xs + codomain_wall ys =\n  codomain_wall (x * xs) + codomain_wall (y * ys)\n\ngoal (1 subgoal):\n 1. codomain_wall (x * xs \\<otimes> y * ys) =\n    codomain_wall (x * xs) + codomain_wall (y * ys)", "by (metis \\<open>codomain_wall ((x \\<otimes> y) * (xs \\<otimes> ys)) = codomain_wall (xs \\<otimes> ys)\\<close> \\<open>x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)\\<close> case_4)"], ["proof (state)\nthis:\n  codomain_wall (x * xs \\<otimes> y * ys) =\n  codomain_wall (x * xs) + codomain_wall (y * ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*the following theorem tells us that \ngiven a tensor product of a tangle diagram with a block consisting of \nonly vertical strands, it gives a tangle diagram*)"], ["", "theorem is_tangle_make_vert_right:\n \"(is_tangle_diagram xs) \n          \\<Longrightarrow> is_tangle_diagram (xs \\<otimes> (basic (make_vert_block n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<Longrightarrow>\n    is_tangle_diagram (xs \\<otimes> basic (make_vert_block n))", "proof(induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> basic (make_vert_block n))\n 2. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (xs \\<otimes> basic (make_vert_block n));\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (x1a * xs \\<otimes> basic (make_vert_block n))", "case (basic xs)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic xs)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> basic (make_vert_block n))\n 2. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (xs \\<otimes> basic (make_vert_block n));\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (x1a * xs \\<otimes> basic (make_vert_block n))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic xs \\<otimes> basic (make_vert_block n))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic xs \\<otimes> basic (make_vert_block n))\n\ngoal (1 subgoal):\n 1. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (xs \\<otimes> basic (make_vert_block n));\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (x1a * xs \\<otimes> basic (make_vert_block n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (xs \\<otimes> basic (make_vert_block n));\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (x1a * xs \\<otimes> basic (make_vert_block n))", "case (prod x xs)"], ["proof (state)\nthis:\n  is_tangle_diagram xs \\<Longrightarrow>\n  is_tangle_diagram (xs \\<otimes> basic (make_vert_block n))\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (xs \\<otimes> basic (make_vert_block n));\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (x1a * xs \\<otimes> basic (make_vert_block n))", "have ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "proof(cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have \n        \"codomain_block (x \\<otimes> (make_vert_block 0)) \n               = (codomain_block x) + codomain_block(make_vert_block 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> make_vert_block 0) =\n    codomain_block x + codomain_block (make_vert_block 0)", "using  codomain_additive"], ["proof (prove)\nusing this:\n  codomain_block (?x \\<otimes> ?y) = codomain_block ?x + codomain_block ?y\n\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> make_vert_block 0) =\n    codomain_block x + codomain_block (make_vert_block 0)", "by auto"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> make_vert_block 0) =\n  codomain_block x + codomain_block (make_vert_block 0)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "moreover"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> make_vert_block 0) =\n  codomain_block x + codomain_block (make_vert_block 0)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have \"codomain_block (make_vert_block 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block 0) = 0", "by auto"], ["proof (state)\nthis:\n  codomain_block (make_vert_block 0) = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "ultimately"], ["proof (chain)\npicking this:\n  codomain_block (x \\<otimes> make_vert_block 0) =\n  codomain_block x + codomain_block (make_vert_block 0)\n  codomain_block (make_vert_block 0) = 0", "have \"codomain_block (x \\<otimes> (make_vert_block 0)) = codomain_block (x)\""], ["proof (prove)\nusing this:\n  codomain_block (x \\<otimes> make_vert_block 0) =\n  codomain_block x + codomain_block (make_vert_block 0)\n  codomain_block (make_vert_block 0) = 0\n\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> make_vert_block 0) = codomain_block x", "by auto"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> make_vert_block 0) = codomain_block x\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "moreover"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> make_vert_block 0) = codomain_block x\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have \"is_tangle_diagram xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram xs", "using prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs", "by (metis is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  is_tangle_diagram xs\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram xs", "have \"is_tangle_diagram ((x \\<otimes> (make_vert_block 0))*xs)\""], ["proof (prove)\nusing this:\n  is_tangle_diagram xs\n\ngoal (1 subgoal):\n 1. is_tangle_diagram ((x \\<otimes> make_vert_block 0) * xs)", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram xs\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram ((x \\<otimes> make_vert_block 0) * xs)", "by (metis calculation prod.prems)"], ["proof (state)\nthis:\n  is_tangle_diagram ((x \\<otimes> make_vert_block 0) * xs)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram ((x \\<otimes> make_vert_block 0) * xs)", "have \"is_tangle_diagram ((x*xs) \\<otimes> (basic (make_vert_block 0)))\""], ["proof (prove)\nusing this:\n  is_tangle_diagram ((x \\<otimes> make_vert_block 0) * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block 0))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block 0))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block 0))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "using  \"0\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block 0))\n  n = 0\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "by (metis)"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "case (Suc k)"], ["proof (state)\nthis:\n  n = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have \"codomain_block (make_vert_block (k+1)) = int (k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block (k + 1)) = int (k + 1)", "using codomain_make_vert"], ["proof (prove)\nusing this:\n  codomain_block (make_vert_block ?n) = int ?n\n\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block (k + 1)) = int (k + 1)", "by auto"], ["proof (state)\nthis:\n  codomain_block (make_vert_block (k + 1)) = int (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  codomain_block (make_vert_block (k + 1)) = int (k + 1)", "have \"(nat (codomain_block (make_vert_block (k+1)))) = k+1\""], ["proof (prove)\nusing this:\n  codomain_block (make_vert_block (k + 1)) = int (k + 1)\n\ngoal (1 subgoal):\n 1. nat (codomain_block (make_vert_block (k + 1))) = k + 1", "by auto"], ["proof (state)\nthis:\n  nat (codomain_block (make_vert_block (k + 1))) = k + 1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  nat (codomain_block (make_vert_block (k + 1))) = k + 1", "have \"make_vert_block (nat (codomain_block (make_vert_block (k+1)))) \n                             = make_vert_block (k+1)\""], ["proof (prove)\nusing this:\n  nat (codomain_block (make_vert_block (k + 1))) = k + 1\n\ngoal (1 subgoal):\n 1. make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n    make_vert_block (k + 1)", "by auto"], ["proof (state)\nthis:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "moreover"], ["proof (state)\nthis:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have \"codomain_wall (basic (make_vert_block (k+1)))>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < codomain_wall (basic (make_vert_block (k + 1)))", "using make_vert_block.simps codomain_wall.simps  Suc_eq_plus1 \n       codomain_make_vert of_nat_0_less_iff zero_less_Suc"], ["proof (prove)\nusing this:\n  make_vert_block 0 = []\n  make_vert_block (Suc ?n) = vert # make_vert_block ?n\n  codomain_wall (basic ?x) = codomain_block ?x\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n  Suc ?n = ?n + 1\n  codomain_block (make_vert_block ?n) = int ?n\n  ((0::?'a) < of_nat ?n) = (0 < ?n)\n  0 < Suc ?n\n\ngoal (1 subgoal):\n 1. 0 < codomain_wall (basic (make_vert_block (k + 1)))", "by metis"], ["proof (state)\nthis:\n  0 < codomain_wall (basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "ultimately"], ["proof (chain)\npicking this:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n  0 < codomain_wall (basic (make_vert_block (k + 1)))", "have 1: \"(x*xs) \\<otimes> (basic (make_vert_block (k+1))) \n             =  (x\\<otimes>(make_vert_block (k+1)))*(xs\\<otimes>(basic (make_vert_block (k+1))))\""], ["proof (prove)\nusing this:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n  0 < codomain_wall (basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. x * xs \\<otimes> basic (make_vert_block (k + 1)) =\n    (x \\<otimes> make_vert_block (k + 1)) *\n    (xs \\<otimes> basic (make_vert_block (k + 1)))", "using tensor.simps(2)"], ["proof (prove)\nusing this:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n  0 < codomain_wall (basic (make_vert_block (k + 1)))\n  ?x * ?xs \\<otimes> basic ?y =\n  (if codomain_block ?y = 0 then (?x \\<otimes> ?y) * ?xs\n   else (?x \\<otimes> ?y) *\n        (?xs \\<otimes> basic (make_vert_block (nat (codomain_block ?y)))))\n\ngoal (1 subgoal):\n 1. x * xs \\<otimes> basic (make_vert_block (k + 1)) =\n    (x \\<otimes> make_vert_block (k + 1)) *\n    (xs \\<otimes> basic (make_vert_block (k + 1)))", "by simp"], ["proof (state)\nthis:\n  x * xs \\<otimes> basic (make_vert_block (k + 1)) =\n  (x \\<otimes> make_vert_block (k + 1)) *\n  (xs \\<otimes> basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have \"domain_wall (xs\\<otimes>(basic (make_vert_block (k+1)))) \n                 = domain_wall xs + domain_wall (basic (make_vert_block (k+1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n    domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))", "using tensor_domain_wall_additivity"], ["proof (prove)\nusing this:\n  domain_wall (?xs \\<otimes> ?ys) = domain_wall ?xs + domain_wall ?ys\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n    domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))", "have 2: \n          \"domain_wall (xs\\<otimes>(basic (make_vert_block (k+1)))) \n                  = (domain_wall xs) + int (k+1)\""], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n    domain_wall xs + int (k + 1)", "using domain_make_vert domain_wall.simps(1)"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))\n  domain_block (make_vert_block ?n) = int ?n\n  domain_wall (basic ?x) = domain_block ?x\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n    domain_wall xs + int (k + 1)", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + int (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "moreover"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + int (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have 3: \"codomain_block (x \\<otimes> (make_vert_block (k+1))) \n                 = codomain_block x + int (k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> make_vert_block (k + 1)) =\n    codomain_block x + int (k + 1)", "using  codomain_additive codomain_make_vert"], ["proof (prove)\nusing this:\n  codomain_block (?x \\<otimes> ?y) = codomain_block ?x + codomain_block ?y\n  codomain_block (make_vert_block ?n) = int ?n\n\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> make_vert_block (k + 1)) =\n    codomain_block x + int (k + 1)", "by (metis)"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> make_vert_block (k + 1)) =\n  codomain_block x + int (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have \"is_tangle_diagram (x*xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs)", "using prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs)", "have 4:\"codomain_block x = domain_wall xs\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. codomain_block x = domain_wall xs", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs)\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. codomain_block x = domain_wall xs", "by metis"], ["proof (state)\nthis:\n  codomain_block x = domain_wall xs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "from 2 3 4"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + int (k + 1)\n  codomain_block (x \\<otimes> make_vert_block (k + 1)) =\n  codomain_block x + int (k + 1)\n  codomain_block x = domain_wall xs", "have \n       \"domain_wall (xs\\<otimes>(basic (make_vert_block (k+1)))) \n               = codomain_block (x \\<otimes> (make_vert_block (k+1))) \""], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + int (k + 1)\n  codomain_block (x \\<otimes> make_vert_block (k + 1)) =\n  codomain_block x + int (k + 1)\n  codomain_block x = domain_wall xs\n\ngoal (1 subgoal):\n 1. domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n    codomain_block (x \\<otimes> make_vert_block (k + 1))", "by auto"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  codomain_block (x \\<otimes> make_vert_block (k + 1))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "moreover"], ["proof (state)\nthis:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  codomain_block (x \\<otimes> make_vert_block (k + 1))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "have \"is_tangle_diagram (xs\\<otimes>(basic (make_vert_block (k+1))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (xs \\<otimes> basic (make_vert_block (k + 1)))", "using prod.hyps prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram xs \\<Longrightarrow>\n  is_tangle_diagram (xs \\<otimes> basic (make_vert_block n))\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (xs \\<otimes> basic (make_vert_block (k + 1)))", "by (metis Suc Suc_eq_plus1 is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  is_tangle_diagram (xs \\<otimes> basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + int (k + 1)\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  codomain_block (x \\<otimes> make_vert_block (k + 1))\n  is_tangle_diagram (xs \\<otimes> basic (make_vert_block (k + 1)))", "have \"is_tangle_diagram ((x*xs) \\<otimes> (basic (make_vert_block (k+1))))\""], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + int (k + 1)\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  codomain_block (x \\<otimes> make_vert_block (k + 1))\n  is_tangle_diagram (xs \\<otimes> basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block (k + 1)))", "using 1"], ["proof (prove)\nusing this:\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  domain_wall xs + int (k + 1)\n  domain_wall (xs \\<otimes> basic (make_vert_block (k + 1))) =\n  codomain_block (x \\<otimes> make_vert_block (k + 1))\n  is_tangle_diagram (xs \\<otimes> basic (make_vert_block (k + 1)))\n  x * xs \\<otimes> basic (make_vert_block (k + 1)) =\n  (x \\<otimes> make_vert_block (k + 1)) *\n  (xs \\<otimes> basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block (k + 1)))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block (k + 1)))", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "using  Suc Suc_eq_plus1"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block (k + 1)))\n  n = Suc k\n  Suc ?n = ?n + 1\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n\ngoal (1 subgoal):\n 1. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (xs \\<otimes> basic (make_vert_block n));\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (x1a * xs \\<otimes> basic (make_vert_block n))", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs \\<otimes> basic (make_vert_block n))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*the following theorem tells us that given a tensor product of a vertical strand block with a \ntangle diagram, it gives a tangle diagram. If the above result can be treated as right product, \nthis can be treated as the left product*)"], ["", "theorem is_tangle_make_vert_left:\n \"(is_tangle_diagram xs) \\<Longrightarrow> is_tangle_diagram ((basic (make_vert_block n)) \\<otimes> xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs)", "proof(induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> basic x)\n 2. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs);\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (basic (make_vert_block n) \\<otimes> x1a * xs)", "case (basic xs)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic xs)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> basic x)\n 2. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs);\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (basic (make_vert_block n) \\<otimes> x1a * xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block n) \\<otimes> basic xs)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> basic xs)\n\ngoal (1 subgoal):\n 1. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs);\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (basic (make_vert_block n) \\<otimes> x1a * xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs);\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (basic (make_vert_block n) \\<otimes> x1a * xs)", "case (prod x xs)"], ["proof (state)\nthis:\n  is_tangle_diagram xs \\<Longrightarrow>\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs)\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs);\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (basic (make_vert_block n) \\<otimes> x1a * xs)", "have ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "proof(cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have \n        \"codomain_block ( (make_vert_block 0) \\<otimes> x) \n               = (codomain_block x) + codomain_block(make_vert_block 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block 0 \\<otimes> x) =\n    codomain_block x + codomain_block (make_vert_block 0)", "using  codomain_additive"], ["proof (prove)\nusing this:\n  codomain_block (?x \\<otimes> ?y) = codomain_block ?x + codomain_block ?y\n\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block 0 \\<otimes> x) =\n    codomain_block x + codomain_block (make_vert_block 0)", "by auto"], ["proof (state)\nthis:\n  codomain_block (make_vert_block 0 \\<otimes> x) =\n  codomain_block x + codomain_block (make_vert_block 0)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "moreover"], ["proof (state)\nthis:\n  codomain_block (make_vert_block 0 \\<otimes> x) =\n  codomain_block x + codomain_block (make_vert_block 0)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have \"codomain_block (make_vert_block 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block 0) = 0", "by auto"], ["proof (state)\nthis:\n  codomain_block (make_vert_block 0) = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "ultimately"], ["proof (chain)\npicking this:\n  codomain_block (make_vert_block 0 \\<otimes> x) =\n  codomain_block x + codomain_block (make_vert_block 0)\n  codomain_block (make_vert_block 0) = 0", "have \"codomain_block ( (make_vert_block 0) \\<otimes> x) = codomain_block (x)\""], ["proof (prove)\nusing this:\n  codomain_block (make_vert_block 0 \\<otimes> x) =\n  codomain_block x + codomain_block (make_vert_block 0)\n  codomain_block (make_vert_block 0) = 0\n\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block 0 \\<otimes> x) = codomain_block x", "by auto"], ["proof (state)\nthis:\n  codomain_block (make_vert_block 0 \\<otimes> x) = codomain_block x\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "moreover"], ["proof (state)\nthis:\n  codomain_block (make_vert_block 0 \\<otimes> x) = codomain_block x\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have \"is_tangle_diagram xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram xs", "using prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs", "by (metis is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  is_tangle_diagram xs\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram xs", "have \"is_tangle_diagram (( (make_vert_block 0) \\<otimes> x)*xs)\""], ["proof (prove)\nusing this:\n  is_tangle_diagram xs\n\ngoal (1 subgoal):\n 1. is_tangle_diagram ((make_vert_block 0 \\<otimes> x) * xs)", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram xs\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram ((make_vert_block 0 \\<otimes> x) * xs)", "by (metis calculation prod.prems)"], ["proof (state)\nthis:\n  is_tangle_diagram ((make_vert_block 0 \\<otimes> x) * xs)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram ((make_vert_block 0 \\<otimes> x) * xs)", "have \"is_tangle_diagram ((basic (make_vert_block 0)) \\<otimes> (x*xs) )\""], ["proof (prove)\nusing this:\n  is_tangle_diagram ((make_vert_block 0 \\<otimes> x) * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block 0) \\<otimes> x * xs)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block 0) \\<otimes> x * xs)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (basic (make_vert_block 0) \\<otimes> x * xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic (make_vert_block 0) \\<otimes> x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "using  \"0\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic (make_vert_block 0) \\<otimes> x * xs)\n  n = 0\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "by (metis)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "case (Suc k)"], ["proof (state)\nthis:\n  n = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have \"codomain_block (make_vert_block (k+1)) = int (k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block (k + 1)) = int (k + 1)", "using codomain_make_vert"], ["proof (prove)\nusing this:\n  codomain_block (make_vert_block ?n) = int ?n\n\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block (k + 1)) = int (k + 1)", "by auto"], ["proof (state)\nthis:\n  codomain_block (make_vert_block (k + 1)) = int (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "then"], ["proof (chain)\npicking this:\n  codomain_block (make_vert_block (k + 1)) = int (k + 1)", "have \"(nat (codomain_block (make_vert_block (k+1)))) = k+1\""], ["proof (prove)\nusing this:\n  codomain_block (make_vert_block (k + 1)) = int (k + 1)\n\ngoal (1 subgoal):\n 1. nat (codomain_block (make_vert_block (k + 1))) = k + 1", "by auto"], ["proof (state)\nthis:\n  nat (codomain_block (make_vert_block (k + 1))) = k + 1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "then"], ["proof (chain)\npicking this:\n  nat (codomain_block (make_vert_block (k + 1))) = k + 1", "have \"make_vert_block (nat (codomain_block (make_vert_block (k+1)))) \n                             = make_vert_block (k+1)\""], ["proof (prove)\nusing this:\n  nat (codomain_block (make_vert_block (k + 1))) = k + 1\n\ngoal (1 subgoal):\n 1. make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n    make_vert_block (k + 1)", "by auto"], ["proof (state)\nthis:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "moreover"], ["proof (state)\nthis:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have \"codomain_wall (basic (make_vert_block (k+1)))>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < codomain_wall (basic (make_vert_block (k + 1)))", "using make_vert_block.simps codomain_wall.simps  Suc_eq_plus1 \n              codomain_make_vert of_nat_0_less_iff zero_less_Suc"], ["proof (prove)\nusing this:\n  make_vert_block 0 = []\n  make_vert_block (Suc ?n) = vert # make_vert_block ?n\n  codomain_wall (basic ?x) = codomain_block ?x\n  codomain_wall (?x * ?ys) = codomain_wall ?ys\n  Suc ?n = ?n + 1\n  codomain_block (make_vert_block ?n) = int ?n\n  ((0::?'a) < of_nat ?n) = (0 < ?n)\n  0 < Suc ?n\n\ngoal (1 subgoal):\n 1. 0 < codomain_wall (basic (make_vert_block (k + 1)))", "by metis"], ["proof (state)\nthis:\n  0 < codomain_wall (basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "ultimately"], ["proof (chain)\npicking this:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n  0 < codomain_wall (basic (make_vert_block (k + 1)))", "have 1: \"  (basic (make_vert_block (k+1))) \\<otimes> (x*xs)\n             =  ((make_vert_block (k+1)) \\<otimes> x)*((basic (make_vert_block (k+1))) \\<otimes> xs)\""], ["proof (prove)\nusing this:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n  0 < codomain_wall (basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. basic (make_vert_block (k + 1)) \\<otimes> x * xs =\n    (make_vert_block (k + 1) \\<otimes> x) *\n    (basic (make_vert_block (k + 1)) \\<otimes> xs)", "using tensor.simps(3)"], ["proof (prove)\nusing this:\n  make_vert_block (nat (codomain_block (make_vert_block (k + 1)))) =\n  make_vert_block (k + 1)\n  0 < codomain_wall (basic (make_vert_block (k + 1)))\n  basic ?x \\<otimes> ?y * ?ys =\n  (if codomain_block ?x = 0 then (?x \\<otimes> ?y) * ?ys\n   else (?x \\<otimes> ?y) *\n        (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes> ?ys))\n\ngoal (1 subgoal):\n 1. basic (make_vert_block (k + 1)) \\<otimes> x * xs =\n    (make_vert_block (k + 1) \\<otimes> x) *\n    (basic (make_vert_block (k + 1)) \\<otimes> xs)", "by simp"], ["proof (state)\nthis:\n  basic (make_vert_block (k + 1)) \\<otimes> x * xs =\n  (make_vert_block (k + 1) \\<otimes> x) *\n  (basic (make_vert_block (k + 1)) \\<otimes> xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have \"domain_wall ((basic (make_vert_block (k+1))) \\<otimes> xs) \n                 = domain_wall xs + domain_wall (basic (make_vert_block (k+1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n    domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))", "using tensor_domain_wall_additivity"], ["proof (prove)\nusing this:\n  domain_wall (?xs \\<otimes> ?ys) = domain_wall ?xs + domain_wall ?ys\n\ngoal (1 subgoal):\n 1. domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n    domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))", "by auto"], ["proof (state)\nthis:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "then"], ["proof (chain)\npicking this:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))", "have 2: \n          \"domain_wall ((basic (make_vert_block (k+1))) \\<otimes> xs) \n                  = (domain_wall xs) + int (k+1)\""], ["proof (prove)\nusing this:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))\n\ngoal (1 subgoal):\n 1. domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n    domain_wall xs + int (k + 1)", "using domain_make_vert domain_wall.simps(1)"], ["proof (prove)\nusing this:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + domain_wall (basic (make_vert_block (k + 1)))\n  domain_block (make_vert_block ?n) = int ?n\n  domain_wall (basic ?x) = domain_block ?x\n\ngoal (1 subgoal):\n 1. domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n    domain_wall xs + int (k + 1)", "by auto"], ["proof (state)\nthis:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + int (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "moreover"], ["proof (state)\nthis:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + int (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have 3: \"codomain_block ( (make_vert_block (k+1)) \\<otimes> x) \n                 = codomain_block x + int (k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block (k + 1) \\<otimes> x) =\n    codomain_block x + int (k + 1)", "using  codomain_additive codomain_make_vert"], ["proof (prove)\nusing this:\n  codomain_block (?x \\<otimes> ?y) = codomain_block ?x + codomain_block ?y\n  codomain_block (make_vert_block ?n) = int ?n\n\ngoal (1 subgoal):\n 1. codomain_block (make_vert_block (k + 1) \\<otimes> x) =\n    codomain_block x + int (k + 1)", "by (simp add: codomain_additive)"], ["proof (state)\nthis:\n  codomain_block (make_vert_block (k + 1) \\<otimes> x) =\n  codomain_block x + int (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have \"is_tangle_diagram (x*xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs)", "using prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs)", "have 4:\"codomain_block x = domain_wall xs\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. codomain_block x = domain_wall xs", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs)\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. codomain_block x = domain_wall xs", "by metis"], ["proof (state)\nthis:\n  codomain_block x = domain_wall xs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "from 2 3 4"], ["proof (chain)\npicking this:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + int (k + 1)\n  codomain_block (make_vert_block (k + 1) \\<otimes> x) =\n  codomain_block x + int (k + 1)\n  codomain_block x = domain_wall xs", "have \n       \"domain_wall ((basic (make_vert_block (k+1))) \\<otimes> xs) \n               = codomain_block ((make_vert_block (k+1)) \\<otimes> x)\""], ["proof (prove)\nusing this:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + int (k + 1)\n  codomain_block (make_vert_block (k + 1) \\<otimes> x) =\n  codomain_block x + int (k + 1)\n  codomain_block x = domain_wall xs\n\ngoal (1 subgoal):\n 1. domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n    codomain_block (make_vert_block (k + 1) \\<otimes> x)", "by auto"], ["proof (state)\nthis:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  codomain_block (make_vert_block (k + 1) \\<otimes> x)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "moreover"], ["proof (state)\nthis:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  codomain_block (make_vert_block (k + 1) \\<otimes> x)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "have \"is_tangle_diagram ((basic (make_vert_block (k+1))) \\<otimes> xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> xs)", "using prod.hyps prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram xs \\<Longrightarrow>\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs)\n  is_tangle_diagram (x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> xs)", "by (metis Suc Suc_eq_plus1 is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + int (k + 1)\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  codomain_block (make_vert_block (k + 1) \\<otimes> x)\n  is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> xs)", "have \"is_tangle_diagram ((basic (make_vert_block (k+1))) \\<otimes> (x*xs))\""], ["proof (prove)\nusing this:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + int (k + 1)\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  codomain_block (make_vert_block (k + 1) \\<otimes> x)\n  is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> x * xs)", "using 1"], ["proof (prove)\nusing this:\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  domain_wall xs + int (k + 1)\n  domain_wall (basic (make_vert_block (k + 1)) \\<otimes> xs) =\n  codomain_block (make_vert_block (k + 1) \\<otimes> x)\n  is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> xs)\n  basic (make_vert_block (k + 1)) \\<otimes> x * xs =\n  (make_vert_block (k + 1) \\<otimes> x) *\n  (basic (make_vert_block (k + 1)) \\<otimes> xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> x * xs)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> x * xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> x * xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "using  Suc Suc_eq_plus1"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic (make_vert_block (k + 1)) \\<otimes> x * xs)\n  n = Suc k\n  Suc ?n = ?n + 1\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n\ngoal (1 subgoal):\n 1. \\<And>x1a xs.\n       \\<lbrakk>is_tangle_diagram xs \\<Longrightarrow>\n                is_tangle_diagram (basic (make_vert_block n) \\<otimes> xs);\n        is_tangle_diagram (x1a * xs)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram\n                          (basic (make_vert_block n) \\<otimes> x1a * xs)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block n) \\<otimes> x * xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*We prove that tensor product of two tangle diagrams is a tangle diagram . \nThe following lemmas are used in the process of proving each of the \ninductive cases*)"], ["", "lemma simp1: \"(codomain_block y) \\<noteq> 0 \\<Longrightarrow>\n       is_tangle_diagram (xs) \n\\<and> is_tangle_diagram ((basic (make_vert_block (nat (codomain_block y))))) \\<longrightarrow>\n               is_tangle_diagram (xs \\<otimes>  ((basic (make_vert_block (nat (codomain_block y)))))) \\<Longrightarrow>\n(is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (basic y) \\<longrightarrow> is_tangle_diagram (x * xs \\<otimes> basic y))\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "assume A: \"(codomain_block y) \\<noteq> 0\""], ["proof (state)\nthis:\n  codomain_block y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "assume B: \n     \" is_tangle_diagram (xs) \n     \\<and> is_tangle_diagram ((basic (make_vert_block (nat (codomain_block y))))) \n      \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes>  ((basic (make_vert_block (nat (codomain_block y))))))\""], ["proof (state)\nthis:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "have \" is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (basic y) \\<longrightarrow> is_tangle_diagram xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    is_tangle_diagram xs", "by (metis is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "have \"(is_tangle_diagram (basic (make_vert_block (nat (codomain_block y))))) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (nat (codomain_block y))))", "using is_tangle_diagram.simps(1)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic ?x) = True\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (nat (codomain_block y))))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram xs\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_block y))))", "have \n   \" ((is_tangle_diagram xs)\n   \\<and>(is_tangle_diagram (basic (make_vert_block (nat (codomain_block y))))) \n    \\<longrightarrow> is_tangle_diagram (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))\n      \\<Longrightarrow>     \n       is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram xs\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n    is_tangle_diagram\n     (xs \\<otimes>\n      basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    is_tangle_diagram\n     (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes>\n    basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes>\n    basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "have 1:\"codomain_block y = domain_wall (basic (make_vert_block (nat (codomain_block y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block y =\n    domain_wall (basic (make_vert_block (nat (codomain_block y))))", "using codomain_block_nonnegative domain_make_vert domain_wall.simps(1) int_nat_eq"], ["proof (prove)\nusing this:\n  0 \\<le> codomain_block ?x\n  domain_block (make_vert_block ?n) = int ?n\n  domain_wall (basic ?x) = domain_block ?x\n  int (nat ?z) = (if 0 \\<le> ?z then ?z else 0)\n\ngoal (1 subgoal):\n 1. codomain_block y =\n    domain_wall (basic (make_vert_block (nat (codomain_block y))))", "by auto"], ["proof (state)\nthis:\n  codomain_block y =\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "moreover"], ["proof (state)\nthis:\n  codomain_block y =\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "have 2:\"is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (basic y) \\<longrightarrow>\n                 codomain_block x = domain_wall xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    codomain_block x = domain_wall xs", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    codomain_block x = domain_wall xs", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "have \"codomain_block (x \\<otimes> y) = codomain_block x +codomain_block y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y", "using codomain_additive"], ["proof (prove)\nusing this:\n  codomain_block (?x \\<otimes> ?y) = codomain_block ?x + codomain_block ?y\n\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y", "by auto"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "moreover"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "have \"domain_wall (xs \\<otimes> (basic (make_vert_block (nat (codomain_block y)))))\n                 = domain_wall xs + domain_wall (basic (make_vert_block (nat (codomain_block y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall\n     (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n    domain_wall xs +\n    domain_wall (basic (make_vert_block (nat (codomain_block y))))", "using tensor_domain_wall_additivity"], ["proof (prove)\nusing this:\n  domain_wall (?xs \\<otimes> ?ys) = domain_wall ?xs + domain_wall ?ys\n\ngoal (1 subgoal):\n 1. domain_wall\n     (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n    domain_wall xs +\n    domain_wall (basic (make_vert_block (nat (codomain_block y))))", "by auto"], ["proof (state)\nthis:\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  domain_wall xs +\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "moreover"], ["proof (state)\nthis:\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  domain_wall xs +\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "then"], ["proof (chain)\npicking this:\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  domain_wall xs +\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))", "have \" is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (basic y) \\<longrightarrow>\n          domain_wall (xs \\<otimes> (basic (make_vert_block (nat (codomain_block y)))))\n                   = codomain_block (x \\<otimes> y)\""], ["proof (prove)\nusing this:\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  domain_wall xs +\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    domain_wall\n     (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n    codomain_block (x \\<otimes> y)", "by (metis \"1\" \"2\" calculation(4))"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_block (x \\<otimes> y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes>\n    basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n  codomain_block y =\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  domain_wall xs +\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_block (x \\<otimes> y)", "have \n      \"(is_tangle_diagram xs)\n      \\<and> (is_tangle_diagram (basic (make_vert_block (nat (codomain_block y))))) \n       \\<longrightarrow> is_tangle_diagram (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n       \\<Longrightarrow> \n         is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (basic y) \\<longrightarrow>\n         is_tangle_diagram ((x \\<otimes> y)* (xs \\<otimes> (basic (make_vert_block (nat (codomain_block y))))))\""], ["proof (prove)\nusing this:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes>\n    basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n  codomain_block y =\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  domain_wall xs +\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_block (x \\<otimes> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n    is_tangle_diagram\n     (xs \\<otimes>\n      basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    is_tangle_diagram\n     ((x \\<otimes> y) *\n      (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes>\n    basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y))))\n  codomain_block y =\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  domain_wall xs +\n  domain_wall (basic (make_vert_block (nat (codomain_block y))))\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  domain_wall\n   (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))) =\n  codomain_block (x \\<otimes> y)\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n    is_tangle_diagram\n     (xs \\<otimes>\n      basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    is_tangle_diagram\n     ((x \\<otimes> y) *\n      (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes>\n    basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes>\n    basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))", "have \"\n       is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (basic y) \\<longrightarrow>\n               is_tangle_diagram ((x*xs) \\<otimes> (basic y))\""], ["proof (prove)\nusing this:\n  is_tangle_diagram xs \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n  is_tangle_diagram\n   (xs \\<otimes>\n    basic (make_vert_block (nat (codomain_block y)))) \\<Longrightarrow>\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram\n   ((x \\<otimes> y) *\n    (xs \\<otimes> basic (make_vert_block (nat (codomain_block y)))))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic y)", "by (metis \"Tangle_Algebra.2\" \\<open>\n        codomain_block y \\<noteq> 0\\<close> is_tangle_make_vert_right)"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> basic y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block y \\<noteq> 0;\n     is_tangle_diagram xs \\<and>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n     is_tangle_diagram\n      (xs \\<otimes>\n       basic (make_vert_block (nat (codomain_block y))))\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (x * xs) \\<and>\n                      is_tangle_diagram (basic y) \\<longrightarrow>\n                      is_tangle_diagram (x * xs \\<otimes> basic y)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> basic y)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> basic y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic y)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> basic y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simp2: \n \"(codomain_block x) \\<noteq> 0 \n \\<Longrightarrow>\n   is_tangle_diagram  (basic (make_vert_block (nat (codomain_block x)))) \n \\<and> is_tangle_diagram (ys)\n    \\<longrightarrow>\n      is_tangle_diagram ((basic (make_vert_block (nat (codomain_block x)))) \\<otimes> ys) \n     \\<Longrightarrow>\n    (is_tangle_diagram (basic x) \n   \\<and> is_tangle_diagram (y*ys) \n         \\<longrightarrow> is_tangle_diagram ((basic x) \\<otimes> (y*ys)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "assume A: \"(codomain_block x) \\<noteq> 0\""], ["proof (state)\nthis:\n  codomain_block x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "assume B: \"is_tangle_diagram  (basic (make_vert_block (nat (codomain_block x)))) \n            \\<and> is_tangle_diagram (ys) \\<longrightarrow>\n              is_tangle_diagram \n                            ((basic (make_vert_block (nat (codomain_block x)))) \\<otimes> ys)\""], ["proof (state)\nthis:\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n  is_tangle_diagram ys \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "have \" is_tangle_diagram (basic x) \\<and> is_tangle_diagram (y*ys) \n                                               \\<longrightarrow> is_tangle_diagram ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram ys", "by (metis is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "have \"(is_tangle_diagram \n                          (basic (make_vert_block (nat (codomain_block x))))) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (nat (codomain_block x))))", "using is_tangle_diagram.simps(1)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic ?x) = True\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (nat (codomain_block x))))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_block x))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram ys\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_block x))))", "have \n      \" ((is_tangle_diagram ys)\n               \\<and>(is_tangle_diagram (basic (make_vert_block (nat (codomain_block x))))) \n    \\<longrightarrow> is_tangle_diagram ((basic (make_vert_block (nat (codomain_block x)))) \\<otimes> ys))\n    \\<Longrightarrow>     \n     is_tangle_diagram (basic x) \\<and> is_tangle_diagram (y*ys) \\<longrightarrow>\n                is_tangle_diagram \n                        (( basic (make_vert_block (nat (codomain_block x)))) \\<otimes> ys)\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram ys\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_block x))))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram ys \\<and>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n      ys) \\<Longrightarrow>\n    is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram ys \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n    ys) \\<Longrightarrow>\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram ys \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n    ys) \\<Longrightarrow>\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "have 1:\"codomain_block x \n                         = domain_wall (basic (make_vert_block (nat (codomain_block x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block x =\n    domain_wall (basic (make_vert_block (nat (codomain_block x))))", "using codomain_block_nonnegative domain_make_vert domain_wall.simps(1) \n              int_nat_eq"], ["proof (prove)\nusing this:\n  0 \\<le> codomain_block ?x\n  domain_block (make_vert_block ?n) = int ?n\n  domain_wall (basic ?x) = domain_block ?x\n  int (nat ?z) = (if 0 \\<le> ?z then ?z else 0)\n\ngoal (1 subgoal):\n 1. codomain_block x =\n    domain_wall (basic (make_vert_block (nat (codomain_block x))))", "by auto"], ["proof (state)\nthis:\n  codomain_block x =\n  domain_wall (basic (make_vert_block (nat (codomain_block x))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  codomain_block x =\n  domain_wall (basic (make_vert_block (nat (codomain_block x))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "have 2:\"is_tangle_diagram (basic x) \\<and> is_tangle_diagram (y*ys) \\<longrightarrow>\n                 codomain_block y = domain_wall ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    codomain_block y = domain_wall ys", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    codomain_block y = domain_wall ys", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "have \"codomain_block (x \\<otimes> y) = codomain_block x +codomain_block y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y", "using codomain_additive"], ["proof (prove)\nusing this:\n  codomain_block (?x \\<otimes> ?y) = codomain_block ?x + codomain_block ?y\n\ngoal (1 subgoal):\n 1. codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y", "by auto"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "have \"domain_wall ((basic (make_vert_block (nat (codomain_block x)))) \\<otimes> ys)\n                 = domain_wall (basic (make_vert_block (nat (codomain_block x)))) \n                   + domain_wall ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n    domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n    domain_wall ys", "using tensor_domain_wall_additivity"], ["proof (prove)\nusing this:\n  domain_wall (?xs \\<otimes> ?ys) = domain_wall ?xs + domain_wall ?ys\n\ngoal (1 subgoal):\n 1. domain_wall\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n    domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n    domain_wall ys", "by auto"], ["proof (state)\nthis:\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  domain_wall ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "then"], ["proof (chain)\npicking this:\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  domain_wall ys", "have \" is_tangle_diagram (basic x) \\<and> is_tangle_diagram (y*ys) \\<longrightarrow>\n          domain_wall ((basic (make_vert_block (nat (codomain_block x)))) \\<otimes> ys)\n                   = codomain_block (x \\<otimes> y)\""], ["proof (prove)\nusing this:\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  domain_wall ys\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    domain_wall\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n    codomain_block (x \\<otimes> y)", "by (metis \"1\" \"2\" calculation(4))"], ["proof (state)\nthis:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_block (x \\<otimes> y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram ys \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n    ys) \\<Longrightarrow>\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n  codomain_block x =\n  domain_wall (basic (make_vert_block (nat (codomain_block x))))\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  domain_wall ys\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_block (x \\<otimes> y)", "have \n      \"(is_tangle_diagram ys)\n      \\<and> (is_tangle_diagram (basic (make_vert_block (nat (codomain_block x))))) \n        \\<longrightarrow> is_tangle_diagram ((basic (make_vert_block (nat (codomain_block x))))\\<otimes> ys)\n         \\<Longrightarrow>\n          is_tangle_diagram (basic x) \\<and> is_tangle_diagram (y*ys) \n          \\<longrightarrow>\n          is_tangle_diagram ((x \\<otimes> y)*((basic (make_vert_block (nat (codomain_block x)))) \\<otimes> ys))\""], ["proof (prove)\nusing this:\n  is_tangle_diagram ys \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n    ys) \\<Longrightarrow>\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n  codomain_block x =\n  domain_wall (basic (make_vert_block (nat (codomain_block x))))\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  domain_wall ys\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_block (x \\<otimes> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram ys \\<and>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n      ys) \\<Longrightarrow>\n    is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram\n     ((x \\<otimes> y) *\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram ys \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n    ys) \\<Longrightarrow>\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys)\n  codomain_block x =\n  domain_wall (basic (make_vert_block (nat (codomain_block x))))\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys\n  codomain_block (x \\<otimes> y) = codomain_block x + codomain_block y\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  domain_wall (basic (make_vert_block (nat (codomain_block x)))) +\n  domain_wall ys\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  domain_wall\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys) =\n  codomain_block (x \\<otimes> y)\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram ys \\<and>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n    is_tangle_diagram\n     (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n      ys) \\<Longrightarrow>\n    is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram\n     ((x \\<otimes> y) *\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram ys \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n    ys) \\<Longrightarrow>\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram ys \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n    ys) \\<Longrightarrow>\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))", "have \"\n       is_tangle_diagram (basic x) \\<and> is_tangle_diagram (y*ys) \\<longrightarrow>\n               is_tangle_diagram ((basic x) \\<otimes> (y*ys))\""], ["proof (prove)\nusing this:\n  is_tangle_diagram ys \\<and>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x)))) \\<longrightarrow>\n  is_tangle_diagram\n   (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n    ys) \\<Longrightarrow>\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram\n   ((x \\<otimes> y) *\n    (basic (make_vert_block (nat (codomain_block x))) \\<otimes> ys))\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (basic x \\<otimes> y * ys)", "by (metis \"Tangle_Algebra.3\" A B)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (basic x \\<otimes> y * ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>codomain_block x \\<noteq> 0;\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n     is_tangle_diagram ys \\<longrightarrow>\n     is_tangle_diagram\n      (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n       ys)\\<rbrakk>\n    \\<Longrightarrow> is_tangle_diagram (basic x) \\<and>\n                      is_tangle_diagram (y * ys) \\<longrightarrow>\n                      is_tangle_diagram (basic x \\<otimes> y * ys)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (basic x \\<otimes> y * ys)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (basic x \\<otimes> y * ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (basic x \\<otimes> y * ys)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (basic x \\<otimes> y * ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simp3: \n \"is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow> is_tangle_diagram (xs \\<otimes> ys) \n \\<Longrightarrow>\n     is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (y * ys) \n     \\<longrightarrow> is_tangle_diagram (x * xs \\<otimes> y * ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "assume A: \"is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow> is_tangle_diagram (xs \\<otimes> ys)\""], ["proof (state)\nthis:\n  is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n  is_tangle_diagram (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "have \"is_tangle_diagram (x*xs) \\<longrightarrow> (codomain_block x = domain_wall xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<longrightarrow>\n    codomain_block x = domain_wall xs", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<longrightarrow>\n    codomain_block x = domain_wall xs", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "have \"is_tangle_diagram (y*ys) \\<longrightarrow> (codomain_block y = domain_wall ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (y * ys) \\<longrightarrow>\n    codomain_block y = domain_wall ys", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (y * ys) \\<longrightarrow>\n    codomain_block y = domain_wall ys", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys", "have \"is_tangle_diagram (x*xs)\\<and> is_tangle_diagram (y*ys)\n              \\<longrightarrow> codomain_block (x \\<otimes> y) = domain_wall (xs \\<otimes> ys)\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    codomain_block (x \\<otimes> y) = domain_wall (xs \\<otimes> ys)", "using codomain_additive tensor_domain_wall_additivity"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs) \\<longrightarrow>\n  codomain_block x = domain_wall xs\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block y = domain_wall ys\n  codomain_block (?x \\<otimes> ?y) = codomain_block ?x + codomain_block ?y\n  domain_wall (?xs \\<otimes> ?ys) = domain_wall ?xs + domain_wall ?ys\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    codomain_block (x \\<otimes> y) = domain_wall (xs \\<otimes> ys)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block (x \\<otimes> y) = domain_wall (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block (x \\<otimes> y) = domain_wall (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "have \"is_tangle_diagram (x*xs)\\<and> is_tangle_diagram (y*ys)\n              \\<longrightarrow> is_tangle_diagram (xs \\<otimes> ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys)", "using A is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n  is_tangle_diagram (xs \\<otimes> ys)\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "have \"(x*xs) \\<otimes> (y*ys) = (x \\<otimes> y)*(xs \\<otimes> ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)", "using tensor.simps(4)"], ["proof (prove)\nusing this:\n  ?x * ?xs \\<otimes> ?y * ?ys = (?x \\<otimes> ?y) * (?xs \\<otimes> ?ys)\n\ngoal (1 subgoal):\n 1. x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)", "by auto"], ["proof (state)\nthis:\n  x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block (x \\<otimes> y) = domain_wall (xs \\<otimes> ys)\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (xs \\<otimes> ys)\n  x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)", "have \"is_tangle_diagram (x*xs)\\<and> is_tangle_diagram (y*ys)\n              \\<longrightarrow> is_tangle_diagram ((x*xs) \\<otimes> (y*ys))\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  codomain_block (x \\<otimes> y) = domain_wall (xs \\<otimes> ys)\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (xs \\<otimes> ys)\n  x * xs \\<otimes> y * ys = (x \\<otimes> y) * (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> y * ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n    is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n    is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> y * ys)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> y * ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "by simp"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> y * ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*tensor product of two tangle diagrams is a tangle diagram*)"], ["", "theorem is_tangle_diagramness:\n shows\"(is_tangle_diagram x)\\<and>(is_tangle_diagram y) \\<longrightarrow>is_tangle_diagram (tensor x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram x \\<and> is_tangle_diagram y \\<longrightarrow>\n    is_tangle_diagram (x \\<otimes> y)", "proof(induction x y  rule:tensor.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> basic y)\n 2. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram xs \\<and>\n        is_tangle_diagram\n         (basic\n           (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n        is_tangle_diagram\n         (xs \\<otimes>\n          basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic y)\n 3. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 4. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "fix z w"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> basic y)\n 2. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram xs \\<and>\n        is_tangle_diagram\n         (basic\n           (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n        is_tangle_diagram\n         (xs \\<otimes>\n          basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic y)\n 3. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 4. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "let ?case = \"(is_tangle_diagram (basic z))\\<and>(is_tangle_diagram (basic w))\n                  \\<longrightarrow>is_tangle_diagram ((basic z) \\<otimes> (basic w))\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> basic y)\n 2. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram xs \\<and>\n        is_tangle_diagram\n         (basic\n           (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n        is_tangle_diagram\n         (xs \\<otimes>\n          basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic y)\n 3. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 4. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic z) \\<and>\n    is_tangle_diagram (basic w) \\<longrightarrow>\n    is_tangle_diagram (basic z \\<otimes> basic w)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z) \\<and>\n  is_tangle_diagram (basic w) \\<longrightarrow>\n  is_tangle_diagram (basic z \\<otimes> basic w)\n\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram xs \\<and>\n        is_tangle_diagram\n         (basic\n           (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n        is_tangle_diagram\n         (xs \\<otimes>\n          basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 3. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram xs \\<and>\n        is_tangle_diagram\n         (basic\n           (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n        is_tangle_diagram\n         (xs \\<otimes>\n          basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 3. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "fix x xs y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram xs \\<and>\n        is_tangle_diagram\n         (basic\n           (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n        is_tangle_diagram\n         (xs \\<otimes>\n          basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 3. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "let ?case = \"(is_tangle_diagram (x*xs))\\<and>(is_tangle_diagram (basic y))\n                  \\<longrightarrow>is_tangle_diagram ((x*xs) \\<otimes> (basic y))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xs y.\n       (codomain_block y \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram xs \\<and>\n        is_tangle_diagram\n         (basic\n           (make_vert_block (nat (codomain_block y)))) \\<longrightarrow>\n        is_tangle_diagram\n         (xs \\<otimes>\n          basic\n           (make_vert_block (nat (codomain_block y))))) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (basic y) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> basic y)\n 2. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 3. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "from simp1"], ["proof (chain)\npicking this:\n  \\<lbrakk>codomain_block ?y \\<noteq> 0;\n   is_tangle_diagram ?xs \\<and>\n   is_tangle_diagram\n    (basic (make_vert_block (nat (codomain_block ?y)))) \\<longrightarrow>\n   is_tangle_diagram\n    (?xs \\<otimes>\n     basic (make_vert_block (nat (codomain_block ?y))))\\<rbrakk>\n  \\<Longrightarrow> is_tangle_diagram (?x * ?xs) \\<and>\n                    is_tangle_diagram (basic ?y) \\<longrightarrow>\n                    is_tangle_diagram (?x * ?xs \\<otimes> basic ?y)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>codomain_block ?y \\<noteq> 0;\n   is_tangle_diagram ?xs \\<and>\n   is_tangle_diagram\n    (basic (make_vert_block (nat (codomain_block ?y)))) \\<longrightarrow>\n   is_tangle_diagram\n    (?xs \\<otimes>\n     basic (make_vert_block (nat (codomain_block ?y))))\\<rbrakk>\n  \\<Longrightarrow> is_tangle_diagram (?x * ?xs) \\<and>\n                    is_tangle_diagram (basic ?y) \\<longrightarrow>\n                    is_tangle_diagram (?x * ?xs \\<otimes> basic ?y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (basic y) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> basic y)", "by (metis \"Tangle_Algebra.2\" add.commute codomain_additive comm_monoid_add_class.add_0 \n                is_tangle_diagram.simps(2) is_tangle_make_vert_right)"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (basic y) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> basic y)\n\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 2. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 2. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "fix x y ys"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 2. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "let ?case = \"(is_tangle_diagram (basic x))\\<and>(is_tangle_diagram (y*ys))\n                  \\<longrightarrow>is_tangle_diagram ((basic x) \\<otimes> (y*ys))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y ys.\n       (codomain_block x \\<noteq> 0 \\<Longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x)))) \\<and>\n        is_tangle_diagram ys \\<longrightarrow>\n        is_tangle_diagram\n         (basic (make_vert_block (nat (codomain_block x))) \\<otimes>\n          ys)) \\<Longrightarrow>\n       is_tangle_diagram (basic x) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (basic x \\<otimes> y * ys)\n 2. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "from simp2"], ["proof (chain)\npicking this:\n  \\<lbrakk>codomain_block ?x \\<noteq> 0;\n   is_tangle_diagram\n    (basic (make_vert_block (nat (codomain_block ?x)))) \\<and>\n   is_tangle_diagram ?ys \\<longrightarrow>\n   is_tangle_diagram\n    (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes>\n     ?ys)\\<rbrakk>\n  \\<Longrightarrow> is_tangle_diagram (basic ?x) \\<and>\n                    is_tangle_diagram (?y * ?ys) \\<longrightarrow>\n                    is_tangle_diagram (basic ?x \\<otimes> ?y * ?ys)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>codomain_block ?x \\<noteq> 0;\n   is_tangle_diagram\n    (basic (make_vert_block (nat (codomain_block ?x)))) \\<and>\n   is_tangle_diagram ?ys \\<longrightarrow>\n   is_tangle_diagram\n    (basic (make_vert_block (nat (codomain_block ?x))) \\<otimes>\n     ?ys)\\<rbrakk>\n  \\<Longrightarrow> is_tangle_diagram (basic ?x) \\<and>\n                    is_tangle_diagram (?y * ?ys) \\<longrightarrow>\n                    is_tangle_diagram (basic ?x \\<otimes> ?y * ?ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic x) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (basic x \\<otimes> y * ys)", "by (metis \"Tangle_Algebra.3\" codomain_additive comm_monoid_add_class.add_0 \n                   is_tangle_diagram.simps(2) is_tangle_make_vert_left)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic x) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (basic x \\<otimes> y * ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "fix x y xs ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "assume A:\"  is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow> is_tangle_diagram (xs \\<otimes> ys)\""], ["proof (state)\nthis:\n  is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n  is_tangle_diagram (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "let ?case =    \n    \"is_tangle_diagram (x * xs) \\<and> is_tangle_diagram (y * ys) \\<longrightarrow> is_tangle_diagram (x * xs \\<otimes> y * ys)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n       is_tangle_diagram (xs \\<otimes> ys) \\<Longrightarrow>\n       is_tangle_diagram (x * xs) \\<and>\n       is_tangle_diagram (y * ys) \\<longrightarrow>\n       is_tangle_diagram (x * xs \\<otimes> y * ys)", "from simp3"], ["proof (chain)\npicking this:\n  is_tangle_diagram ?xs \\<and> is_tangle_diagram ?ys \\<longrightarrow>\n  is_tangle_diagram (?xs \\<otimes> ?ys) \\<Longrightarrow>\n  is_tangle_diagram (?x * ?xs) \\<and>\n  is_tangle_diagram (?y * ?ys) \\<longrightarrow>\n  is_tangle_diagram (?x * ?xs \\<otimes> ?y * ?ys)", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram ?xs \\<and> is_tangle_diagram ?ys \\<longrightarrow>\n  is_tangle_diagram (?xs \\<otimes> ?ys) \\<Longrightarrow>\n  is_tangle_diagram (?x * ?xs) \\<and>\n  is_tangle_diagram (?y * ?ys) \\<longrightarrow>\n  is_tangle_diagram (?x * ?xs \\<otimes> ?y * ?ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "using A"], ["proof (prove)\nusing this:\n  is_tangle_diagram ?xs \\<and> is_tangle_diagram ?ys \\<longrightarrow>\n  is_tangle_diagram (?xs \\<otimes> ?ys) \\<Longrightarrow>\n  is_tangle_diagram (?x * ?xs) \\<and>\n  is_tangle_diagram (?y * ?ys) \\<longrightarrow>\n  is_tangle_diagram (?x * ?xs \\<otimes> ?y * ?ys)\n  is_tangle_diagram xs \\<and> is_tangle_diagram ys \\<longrightarrow>\n  is_tangle_diagram (xs \\<otimes> ys)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x * xs) \\<and>\n    is_tangle_diagram (y * ys) \\<longrightarrow>\n    is_tangle_diagram (x * xs \\<otimes> y * ys)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (x * xs) \\<and>\n  is_tangle_diagram (y * ys) \\<longrightarrow>\n  is_tangle_diagram (x * xs \\<otimes> y * ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem tensor_preserves_is_tangle: \n assumes \"is_tangle_diagram x\"\n     and \"is_tangle_diagram y\"\n shows \"is_tangle_diagram (x \\<otimes> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x \\<otimes> y)", "using assms  is_tangle_diagramness"], ["proof (prove)\nusing this:\n  is_tangle_diagram x\n  is_tangle_diagram y\n  is_tangle_diagram ?x \\<and> is_tangle_diagram ?y \\<longrightarrow>\n  is_tangle_diagram (?x \\<otimes> ?y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x \\<otimes> y)", "by auto"], ["", "definition Tensor_Tangle::\"Tangle_Diagram \\<Rightarrow> Tangle_Diagram \\<Rightarrow> Tangle_Diagram\" \n          (infixl \"\\<circ>\" 65)\n where\n\"Tensor_Tangle x y = \n     Abs_Tangle_Diagram ((Rep_Tangle_Diagram x) \\<otimes> (Rep_Tangle_Diagram y))\""], ["", "theorem well_defined_compose: \n assumes \"is_tangle_diagram x\" \n     and \"is_tangle_diagram y\"\n shows \"(Abs_Tangle_Diagram x) \\<otimes> (Abs_Tangle_Diagram y) = (Abs_Tangle_Diagram (x \\<otimes> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Tangle_Diagram x \\<otimes> Abs_Tangle_Diagram y =\n    Abs_Tangle_Diagram (x \\<otimes> y)", "using  Abs_Tangle_Diagram_inverse assms(1) assms(2) \n      mem_Collect_eq tensor_preserves_is_tangle\n     tensor_Tangle_def"], ["proof (prove)\nusing this:\n  ?y \\<in> {x. is_tangle_diagram x} \\<Longrightarrow>\n  Rep_Tangle_Diagram (Abs_Tangle_Diagram ?y) = ?y\n  is_tangle_diagram x\n  is_tangle_diagram y\n  (?a \\<in> Collect ?P) = ?P ?a\n  \\<lbrakk>is_tangle_diagram ?x; is_tangle_diagram ?y\\<rbrakk>\n  \\<Longrightarrow> is_tangle_diagram (?x \\<otimes> ?y)\n  ?x \\<otimes> ?y =\n  Abs_Tangle_Diagram (Rep_Tangle_Diagram ?x \\<otimes> Rep_Tangle_Diagram ?y)\n\ngoal (1 subgoal):\n 1. Abs_Tangle_Diagram x \\<otimes> Abs_Tangle_Diagram y =\n    Abs_Tangle_Diagram (x \\<otimes> y)", "by auto"], ["", "end"]]}