{"file_name": "/home/qj213/afp-2021-10-22/thys/Knot_Theory/Tangles.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Knot_Theory", "problem_names": ["lemma Abs_Rep_well_defined: \n assumes \" is_tangle_diagram x\" \n shows \"Rep_Tangle_Diagram (Abs_Tangle_Diagram x) = x\"", "lemma Rep_Abs_well_defined: \n assumes \"is_tangle_diagram x\"  \n     and \"is_tangle_diagram y\" \n     and  \"(Abs_Tangle_Diagram x) = (Abs_Tangle_Diagram y)\"\n shows \"x = y\"", "lemma is_tangle_left_compose: \n \"is_tangle_diagram (x \\<circ> y) \\<Longrightarrow> is_tangle_diagram x\"", "lemma is_tangle_right_compose: \n \"is_tangle_diagram (x \\<circ> y) \\<Longrightarrow> is_tangle_diagram y\"", "lemma comp_of_tangle_dgms: \n assumes\"is_tangle_diagram y\" \n shows \"((is_tangle_diagram x)\n         \\<and>(codomain_wall x = domain_wall y)) \n              \\<Longrightarrow> is_tangle_diagram (x \\<circ> y)\"", "lemma composition_of_tangle_diagrams:\n assumes \"is_tangle_diagram x\" \n     and \"is_tangle_diagram y\"\n     and \"(domain_wall y = codomain_wall x)\"\n shows \"is_tangle_diagram (x \\<circ> y)\"", "lemma converse_composition_of_tangle_diagrams:\n  \"is_tangle_diagram (x \\<circ> y) \\<Longrightarrow> (domain_wall y) = (codomain_wall x)\"", "theorem well_defined_compose: \n assumes \"is_tangle_diagram x\" \n     and \"is_tangle_diagram y\"\n     and \"domain_wall x = codomain_wall y\"\n shows \"(Abs_Tangle_Diagram x) \\<circ> (Abs_Tangle_Diagram y) \n                          = (Abs_Tangle_Diagram (x \\<circ> y))\""], "translations": [["", "lemma Abs_Rep_well_defined: \n assumes \" is_tangle_diagram x\" \n shows \"Rep_Tangle_Diagram (Abs_Tangle_Diagram x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_Tangle_Diagram (Abs_Tangle_Diagram x) = x", "using Rep_Tangle_Diagram Abs_Tangle_Diagram_inverse assms mem_Collect_eq"], ["proof (prove)\nusing this:\n  Rep_Tangle_Diagram ?x \\<in> {x. is_tangle_diagram x}\n  ?y \\<in> {x. is_tangle_diagram x} \\<Longrightarrow>\n  Rep_Tangle_Diagram (Abs_Tangle_Diagram ?y) = ?y\n  is_tangle_diagram x\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. Rep_Tangle_Diagram (Abs_Tangle_Diagram x) = x", "by auto"], ["", "text\\<open>The map Abs\\_diagram is injective\\<close>"], ["", "lemma Rep_Abs_well_defined: \n assumes \"is_tangle_diagram x\"  \n     and \"is_tangle_diagram y\" \n     and  \"(Abs_Tangle_Diagram x) = (Abs_Tangle_Diagram y)\"\n shows \"x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using Rep_Tangle_Diagram Abs_Tangle_Diagram_inverse assms mem_Collect_eq"], ["proof (prove)\nusing this:\n  Rep_Tangle_Diagram ?x \\<in> {x. is_tangle_diagram x}\n  ?y \\<in> {x. is_tangle_diagram x} \\<Longrightarrow>\n  Rep_Tangle_Diagram (Abs_Tangle_Diagram ?y) = ?y\n  is_tangle_diagram x\n  is_tangle_diagram y\n  Abs_Tangle_Diagram x = Abs_Tangle_Diagram y\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. x = y", "by metis"], ["", "text\\<open>restating the property of well-defined wall in terms of diagram\\<close>"], ["", "text\\<open>In order to locally defined moves, it helps to prove that if composition of two wall is a \nwell defined wall then the number of outgoing strands of the wall below are equal to the number of \nincoming strands of the wall above. The following lemmas prove that for a well defined wall, t\nhe number of incoming and outgoing strands are zero\\<close>"], ["", "(*is-tangle-compose*)"], ["", "lemma is_tangle_left_compose: \n \"is_tangle_diagram (x \\<circ> y) \\<Longrightarrow> is_tangle_diagram x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x \\<circ> y) \\<Longrightarrow> is_tangle_diagram x", "proof (induct x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       is_tangle_diagram (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "case (basic z)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       is_tangle_diagram (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "have \"is_tangle_diagram (basic z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic z)", "using is_tangle_diagram.simps(1)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic ?x) = True\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic z)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       is_tangle_diagram (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (basic z)", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic z)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic z)", "using basic"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic z)\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic z)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "case (prod z zs)"], ["proof (state)\nthis:\n  is_tangle_diagram (zs \\<circ> y) \\<Longrightarrow> is_tangle_diagram zs\n  is_tangle_diagram ((z * zs) \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "have \"(z*zs)\\<circ>y = (z*(zs \\<circ> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z * zs) \\<circ> y = z * zs \\<circ> y", "by auto"], ["proof (state)\nthis:\n  (z * zs) \\<circ> y = z * zs \\<circ> y\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "then"], ["proof (chain)\npicking this:\n  (z * zs) \\<circ> y = z * zs \\<circ> y", "have \" is_tangle_diagram (z*(zs\\<circ>y))\""], ["proof (prove)\nusing this:\n  (z * zs) \\<circ> y = z * zs \\<circ> y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs \\<circ> y)", "using prod"], ["proof (prove)\nusing this:\n  (z * zs) \\<circ> y = z * zs \\<circ> y\n  is_tangle_diagram (zs \\<circ> y) \\<Longrightarrow> is_tangle_diagram zs\n  is_tangle_diagram ((z * zs) \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs \\<circ> y)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (z * zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (z * zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (z * zs \\<circ> y)", "have 1: \"is_tangle_diagram zs\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram zs", "using is_tangle_diagram.simps(2) prod.hyps prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs \\<circ> y)\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n  is_tangle_diagram (zs \\<circ> y) \\<Longrightarrow> is_tangle_diagram zs\n  is_tangle_diagram ((z * zs) \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram zs", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram zs\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram (z * zs \\<circ> y)\n  is_tangle_diagram zs", "have \"domain_wall (zs \\<circ> y) = codomain_block z\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs \\<circ> y)\n  is_tangle_diagram zs\n\ngoal (1 subgoal):\n 1. domain_wall (zs \\<circ> y) = codomain_block z", "by (metis is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  domain_wall (zs \\<circ> y) = codomain_block z\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "moreover"], ["proof (state)\nthis:\n  domain_wall (zs \\<circ> y) = codomain_block z\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "have \"domain_wall (zs \\<circ> y) = domain_wall zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_wall (zs \\<circ> y) = domain_wall zs", "using domain_wall_def domain_wall_compose"], ["proof (prove)\nusing this:\n  domain_wall \\<equiv>\n  rec_wall domain_block (\\<lambda>x ys ysa. domain_block x)\n  domain_wall (?xs \\<circ> ?ys) = domain_wall ?xs\n\ngoal (1 subgoal):\n 1. domain_wall (zs \\<circ> y) = domain_wall zs", "by auto"], ["proof (state)\nthis:\n  domain_wall (zs \\<circ> y) = domain_wall zs\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "ultimately"], ["proof (chain)\npicking this:\n  domain_wall (zs \\<circ> y) = codomain_block z\n  domain_wall (zs \\<circ> y) = domain_wall zs", "have \"domain_wall zs = codomain_block z\""], ["proof (prove)\nusing this:\n  domain_wall (zs \\<circ> y) = codomain_block z\n  domain_wall (zs \\<circ> y) = domain_wall zs\n\ngoal (1 subgoal):\n 1. domain_wall zs = codomain_block z", "by auto"], ["proof (state)\nthis:\n  domain_wall zs = codomain_block z\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "then"], ["proof (chain)\npicking this:\n  domain_wall zs = codomain_block z", "have \"is_tangle_diagram (z*zs)\""], ["proof (prove)\nusing this:\n  domain_wall zs = codomain_block z\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs)", "by (metis \"1\" is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  is_tangle_diagram (z * zs)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram (x1a * x)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (z * zs)", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (z * zs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_tangle_right_compose: \n \"is_tangle_diagram (x \\<circ> y) \\<Longrightarrow> is_tangle_diagram y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x \\<circ> y) \\<Longrightarrow> is_tangle_diagram y", "proof (induct x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       is_tangle_diagram y\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "case (basic z)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       is_tangle_diagram y\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "have \"(basic z) \\<circ> y = (z*y) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic z \\<circ> y = z * y", "using basic"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (1 subgoal):\n 1. basic z \\<circ> y = z * y", "by auto"], ["proof (state)\nthis:\n  basic z \\<circ> y = z * y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       is_tangle_diagram y\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "then"], ["proof (chain)\npicking this:\n  basic z \\<circ> y = z * y", "have \"is_tangle_diagram y\""], ["proof (prove)\nusing this:\n  basic z \\<circ> y = z * y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "unfolding is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  basic z \\<circ> y = z * y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "using basic.prems"], ["proof (prove)\nusing this:\n  basic z \\<circ> y = z * y\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "by (metis is_tangle_diagram.simps(2))"], ["proof (state)\nthis:\n  is_tangle_diagram y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       is_tangle_diagram y\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram y", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "using basic.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram y\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram y\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "case (prod z zs)"], ["proof (state)\nthis:\n  is_tangle_diagram (zs \\<circ> y) \\<Longrightarrow> is_tangle_diagram y\n  is_tangle_diagram ((z * zs) \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "have \"((z*zs) \\<circ> y) = (z *(zs \\<circ> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z * zs) \\<circ> y = z * zs \\<circ> y", "by auto"], ["proof (state)\nthis:\n  (z * zs) \\<circ> y = z * zs \\<circ> y\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "then"], ["proof (chain)\npicking this:\n  (z * zs) \\<circ> y = z * zs \\<circ> y", "have \"is_tangle_diagram (z*(zs \\<circ> y))\""], ["proof (prove)\nusing this:\n  (z * zs) \\<circ> y = z * zs \\<circ> y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs \\<circ> y)", "using prod"], ["proof (prove)\nusing this:\n  (z * zs) \\<circ> y = z * zs \\<circ> y\n  is_tangle_diagram (zs \\<circ> y) \\<Longrightarrow> is_tangle_diagram y\n  is_tangle_diagram ((z * zs) \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs \\<circ> y)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (z * zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (z * zs \\<circ> y)", "have \"is_tangle_diagram (zs \\<circ> y)\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (zs \\<circ> y)", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs \\<circ> y)\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (zs \\<circ> y)", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram (zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (zs \\<circ> y)", "have \"is_tangle_diagram y\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "using prod.hyps"], ["proof (prove)\nusing this:\n  is_tangle_diagram (zs \\<circ> y)\n  is_tangle_diagram (zs \\<circ> y) \\<Longrightarrow> is_tangle_diagram y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram y\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                is_tangle_diagram y;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram y", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram y", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram y\n\ngoal:\nNo subgoals!", "qed"], ["", "(*tangle diagrams using composition*)"], ["", "lemma comp_of_tangle_dgms: \n assumes\"is_tangle_diagram y\" \n shows \"((is_tangle_diagram x)\n         \\<and>(codomain_wall x = domain_wall y)) \n              \\<Longrightarrow> is_tangle_diagram (x \\<circ> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram x \\<and>\n    codomain_wall x = domain_wall y \\<Longrightarrow>\n    is_tangle_diagram (x \\<circ> y)", "proof(induct x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "case (basic z)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z) \\<and> codomain_wall (basic z) = domain_wall y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "have \"codomain_block z = codomain_wall (basic z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_block z = codomain_wall (basic z)", "using domain_wall_def"], ["proof (prove)\nusing this:\n  domain_wall \\<equiv>\n  rec_wall domain_block (\\<lambda>x ys ysa. domain_block x)\n\ngoal (1 subgoal):\n 1. codomain_block z = codomain_wall (basic z)", "by auto"], ["proof (state)\nthis:\n  codomain_block z = codomain_wall (basic z)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "moreover"], ["proof (state)\nthis:\n  codomain_block z = codomain_wall (basic z)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "have \"(basic z)\\<circ>y= z*y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic z \\<circ> y = z * y", "using compose_def"], ["proof (prove)\nusing this:\n  (\\<circ>) \\<equiv> rec_wall (*) (\\<lambda>x xs xsa ys. x * xsa ys)\n\ngoal (1 subgoal):\n 1. basic z \\<circ> y = z * y", "by auto"], ["proof (state)\nthis:\n  basic z \\<circ> y = z * y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "ultimately"], ["proof (chain)\npicking this:\n  codomain_block z = codomain_wall (basic z)\n  basic z \\<circ> y = z * y", "have \"codomain_block z = domain_wall y\""], ["proof (prove)\nusing this:\n  codomain_block z = codomain_wall (basic z)\n  basic z \\<circ> y = z * y\n\ngoal (1 subgoal):\n 1. codomain_block z = domain_wall y", "using basic.prems"], ["proof (prove)\nusing this:\n  codomain_block z = codomain_wall (basic z)\n  basic z \\<circ> y = z * y\n  is_tangle_diagram (basic z) \\<and> codomain_wall (basic z) = domain_wall y\n\ngoal (1 subgoal):\n 1. codomain_block z = domain_wall y", "by auto"], ["proof (state)\nthis:\n  codomain_block z = domain_wall y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "moreover"], ["proof (state)\nthis:\n  codomain_block z = domain_wall y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "have \"is_tangle_diagram y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "using assms"], ["proof (prove)\nusing this:\n  is_tangle_diagram y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram y", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "ultimately"], ["proof (chain)\npicking this:\n  codomain_block z = domain_wall y\n  is_tangle_diagram y", "have \"is_tangle_diagram (z*y)\""], ["proof (prove)\nusing this:\n  codomain_block z = domain_wall y\n  is_tangle_diagram y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * y)", "unfolding is_tangle_diagram_def"], ["proof (prove)\nusing this:\n  codomain_block z = domain_wall y\n  rec_wall (\\<lambda>x. True)\n   (\\<lambda>x xs xsa.\n       if xsa then codomain_block x = domain_wall xs else False)\n   y\n\ngoal (1 subgoal):\n 1. rec_wall (\\<lambda>x. True)\n     (\\<lambda>x xs xsa.\n         if xsa then codomain_block x = domain_wall xs else False)\n     (z * y)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (z * y)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x) \\<and>\n       codomain_wall (basic x) = domain_wall y \\<Longrightarrow>\n       is_tangle_diagram (basic x \\<circ> y)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (z * y)", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic z \\<circ> y)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "case (prod z zs)"], ["proof (state)\nthis:\n  is_tangle_diagram zs \\<and>\n  codomain_wall zs = domain_wall y \\<Longrightarrow>\n  is_tangle_diagram (zs \\<circ> y)\n  is_tangle_diagram (z * zs) \\<and> codomain_wall (z * zs) = domain_wall y\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "have \"is_tangle_diagram (z*zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs)", "using prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs) \\<and> codomain_wall (z * zs) = domain_wall y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs)", "by metis"], ["proof (state)\nthis:\n  is_tangle_diagram (z * zs)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (z * zs)", "have \"codomain_block z = domain_wall zs\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs)\n\ngoal (1 subgoal):\n 1. codomain_block z = domain_wall zs", "using is_tangle_diagram.simps(2) prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs)\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n  is_tangle_diagram (z * zs) \\<and> codomain_wall (z * zs) = domain_wall y\n\ngoal (1 subgoal):\n 1. codomain_block z = domain_wall zs", "by metis"], ["proof (state)\nthis:\n  codomain_block z = domain_wall zs\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "then"], ["proof (chain)\npicking this:\n  codomain_block z = domain_wall zs", "have \"codomain_block z = domain_wall (zs \\<circ> y)\""], ["proof (prove)\nusing this:\n  codomain_block z = domain_wall zs\n\ngoal (1 subgoal):\n 1. codomain_block z = domain_wall (zs \\<circ> y)", "using domain_wall.simps domain_wall_compose"], ["proof (prove)\nusing this:\n  codomain_block z = domain_wall zs\n  domain_wall (basic ?x) = domain_block ?x\n  domain_wall (?x * ?ys) = domain_block ?x\n  domain_wall (?xs \\<circ> ?ys) = domain_wall ?xs\n\ngoal (1 subgoal):\n 1. codomain_block z = domain_wall (zs \\<circ> y)", "by auto"], ["proof (state)\nthis:\n  codomain_block z = domain_wall (zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "moreover"], ["proof (state)\nthis:\n  codomain_block z = domain_wall (zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "have \"is_tangle_diagram (zs \\<circ> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (zs \\<circ> y)", "using prod.hyps"], ["proof (prove)\nusing this:\n  is_tangle_diagram zs \\<and>\n  codomain_wall zs = domain_wall y \\<Longrightarrow>\n  is_tangle_diagram (zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (zs \\<circ> y)", "by (metis codomain_wall.simps(2) is_tangle_diagram.simps(2) prod.prems)"], ["proof (state)\nthis:\n  is_tangle_diagram (zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "ultimately"], ["proof (chain)\npicking this:\n  codomain_block z = domain_wall (zs \\<circ> y)\n  is_tangle_diagram (zs \\<circ> y)", "have \"is_tangle_diagram (z*(zs \\<circ> y))\""], ["proof (prove)\nusing this:\n  codomain_block z = domain_wall (zs \\<circ> y)\n  is_tangle_diagram (zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (z * zs \\<circ> y)", "unfolding is_tangle_diagram_def"], ["proof (prove)\nusing this:\n  codomain_block z = domain_wall (zs \\<circ> y)\n  rec_wall (\\<lambda>x. True)\n   (\\<lambda>x xs xsa.\n       if xsa then codomain_block x = domain_wall xs else False)\n   (zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. rec_wall (\\<lambda>x. True)\n     (\\<lambda>x xs xsa.\n         if xsa then codomain_block x = domain_wall xs else False)\n     (z * zs \\<circ> y)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (z * zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram x \\<and>\n                codomain_wall x = domain_wall y \\<Longrightarrow>\n                is_tangle_diagram (x \\<circ> y);\n        is_tangle_diagram (x1a * x) \\<and>\n        codomain_wall (x1a * x) = domain_wall y\\<rbrakk>\n       \\<Longrightarrow> is_tangle_diagram ((x1a * x) \\<circ> y)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (z * zs \\<circ> y)", "show ?case"], ["proof (prove)\nusing this:\n  is_tangle_diagram (z * zs \\<circ> y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram ((z * zs) \\<circ> y)", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram ((z * zs) \\<circ> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma composition_of_tangle_diagrams:\n assumes \"is_tangle_diagram x\" \n     and \"is_tangle_diagram y\"\n     and \"(domain_wall y = codomain_wall x)\"\n shows \"is_tangle_diagram (x \\<circ> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x \\<circ> y)", "using comp_of_tangle_dgms"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_tangle_diagram ?y;\n   is_tangle_diagram ?x \\<and> codomain_wall ?x = domain_wall ?y\\<rbrakk>\n  \\<Longrightarrow> is_tangle_diagram (?x \\<circ> ?y)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x \\<circ> y)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_tangle_diagram ?y;\n   is_tangle_diagram ?x \\<and> codomain_wall ?x = domain_wall ?y\\<rbrakk>\n  \\<Longrightarrow> is_tangle_diagram (?x \\<circ> ?y)\n  is_tangle_diagram x\n  is_tangle_diagram y\n  domain_wall y = codomain_wall x\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (x \\<circ> y)", "by auto"], ["", "lemma converse_composition_of_tangle_diagrams:\n  \"is_tangle_diagram (x \\<circ> y) \\<Longrightarrow> (domain_wall y) = (codomain_wall x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n    domain_wall y = codomain_wall x", "proof(induct x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       domain_wall y = codomain_wall (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "case (basic z)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       domain_wall y = codomain_wall (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "have \"(basic z) \\<circ> y = z * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basic z \\<circ> y = z * y", "using compose_def basic"], ["proof (prove)\nusing this:\n  (\\<circ>) \\<equiv> rec_wall (*) (\\<lambda>x xs xsa ys. x * xsa ys)\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (1 subgoal):\n 1. basic z \\<circ> y = z * y", "by auto"], ["proof (state)\nthis:\n  basic z \\<circ> y = z * y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       domain_wall y = codomain_wall (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "then"], ["proof (chain)\npicking this:\n  basic z \\<circ> y = z * y", "have \n    \"is_tangle_diagram ((basic z) \\<circ> y) \\<Longrightarrow> \n              (is_tangle_diagram y)\\<and> (codomain_block z = domain_wall y)\""], ["proof (prove)\nusing this:\n  basic z \\<circ> y = z * y\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic z \\<circ> y) \\<Longrightarrow>\n    is_tangle_diagram y \\<and> codomain_block z = domain_wall y", "using is_tangle_diagram.simps(2)"], ["proof (prove)\nusing this:\n  basic z \\<circ> y = z * y\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic z \\<circ> y) \\<Longrightarrow>\n    is_tangle_diagram y \\<and> codomain_block z = domain_wall y", "by (metis)"], ["proof (state)\nthis:\n  is_tangle_diagram (basic z \\<circ> y) \\<Longrightarrow>\n  is_tangle_diagram y \\<and> codomain_block z = domain_wall y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       domain_wall y = codomain_wall (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "then"], ["proof (chain)\npicking this:\n  is_tangle_diagram (basic z \\<circ> y) \\<Longrightarrow>\n  is_tangle_diagram y \\<and> codomain_block z = domain_wall y", "have \"(codomain_block z) = (domain_wall y)\""], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic z \\<circ> y) \\<Longrightarrow>\n  is_tangle_diagram y \\<and> codomain_block z = domain_wall y\n\ngoal (1 subgoal):\n 1. codomain_block z = domain_wall y", "using basic.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic z \\<circ> y) \\<Longrightarrow>\n  is_tangle_diagram y \\<and> codomain_block z = domain_wall y\n  is_tangle_diagram (basic z \\<circ> y)\n\ngoal (1 subgoal):\n 1. codomain_block z = domain_wall y", "by auto"], ["proof (state)\nthis:\n  codomain_block z = domain_wall y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       domain_wall y = codomain_wall (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "moreover"], ["proof (state)\nthis:\n  codomain_block z = domain_wall y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       domain_wall y = codomain_wall (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "have \"codomain_wall (basic z) = codomain_block z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall (basic z) = codomain_block z", "using domain_wall_compose"], ["proof (prove)\nusing this:\n  domain_wall (?xs \\<circ> ?ys) = domain_wall ?xs\n\ngoal (1 subgoal):\n 1. codomain_wall (basic z) = codomain_block z", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic z) = codomain_block z\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       domain_wall y = codomain_wall (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "ultimately"], ["proof (chain)\npicking this:\n  codomain_block z = domain_wall y\n  codomain_wall (basic z) = codomain_block z", "have \"(codomain_wall (basic z)) = (domain_wall y)\""], ["proof (prove)\nusing this:\n  codomain_block z = domain_wall y\n  codomain_wall (basic z) = codomain_block z\n\ngoal (1 subgoal):\n 1. codomain_wall (basic z) = domain_wall y", "by auto"], ["proof (state)\nthis:\n  codomain_wall (basic z) = domain_wall y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       is_tangle_diagram (basic x \\<circ> y) \\<Longrightarrow>\n       domain_wall y = codomain_wall (basic x)\n 2. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "then"], ["proof (chain)\npicking this:\n  codomain_wall (basic z) = domain_wall y", "show ?case"], ["proof (prove)\nusing this:\n  codomain_wall (basic z) = domain_wall y\n\ngoal (1 subgoal):\n 1. domain_wall y = codomain_wall (basic z)", "by simp"], ["proof (state)\nthis:\n  domain_wall y = codomain_wall (basic z)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "case (prod z zs)"], ["proof (state)\nthis:\n  is_tangle_diagram (zs \\<circ> y) \\<Longrightarrow>\n  domain_wall y = codomain_wall zs\n  is_tangle_diagram ((z * zs) \\<circ> y)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "have \"codomain_wall zs = domain_wall y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall zs = domain_wall y", "using prod.hyps prod.prems"], ["proof (prove)\nusing this:\n  is_tangle_diagram (zs \\<circ> y) \\<Longrightarrow>\n  domain_wall y = codomain_wall zs\n  is_tangle_diagram ((z * zs) \\<circ> y)\n\ngoal (1 subgoal):\n 1. codomain_wall zs = domain_wall y", "by (metis compose_Nil compose_leftassociativity is_tangle_right_compose)"], ["proof (state)\nthis:\n  codomain_wall zs = domain_wall y\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "moreover"], ["proof (state)\nthis:\n  codomain_wall zs = domain_wall y\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "have \"codomain_wall zs = codomain_wall (z*zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall zs = codomain_wall (z * zs)", "using domain_wall_compose"], ["proof (prove)\nusing this:\n  domain_wall (?xs \\<circ> ?ys) = domain_wall ?xs\n\ngoal (1 subgoal):\n 1. codomain_wall zs = codomain_wall (z * zs)", "by auto"], ["proof (state)\nthis:\n  codomain_wall zs = codomain_wall (z * zs)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x.\n       \\<lbrakk>is_tangle_diagram (x \\<circ> y) \\<Longrightarrow>\n                domain_wall y = codomain_wall x;\n        is_tangle_diagram ((x1a * x) \\<circ> y)\\<rbrakk>\n       \\<Longrightarrow> domain_wall y = codomain_wall (x1a * x)", "ultimately"], ["proof (chain)\npicking this:\n  codomain_wall zs = domain_wall y\n  codomain_wall zs = codomain_wall (z * zs)", "show ?case"], ["proof (prove)\nusing this:\n  codomain_wall zs = domain_wall y\n  codomain_wall zs = codomain_wall (z * zs)\n\ngoal (1 subgoal):\n 1. domain_wall y = codomain_wall (z * zs)", "by metis"], ["proof (state)\nthis:\n  domain_wall y = codomain_wall (z * zs)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*defining compose for diagrams*)"], ["", "definition compose_Tangle::\"Tangle_Diagram \\<Rightarrow> Tangle_Diagram \\<Rightarrow> Tangle_Diagram\" \n                                                                     (infixl \"\\<circ>\" 65)\n where\n\"compose_Tangle x y = Abs_Tangle_Diagram \n                                  ((Rep_Tangle_Diagram x) \\<circ> (Rep_Tangle_Diagram y))\""], ["", "theorem well_defined_compose: \n assumes \"is_tangle_diagram x\" \n     and \"is_tangle_diagram y\"\n     and \"domain_wall x = codomain_wall y\"\n shows \"(Abs_Tangle_Diagram x) \\<circ> (Abs_Tangle_Diagram y) \n                          = (Abs_Tangle_Diagram (x \\<circ> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Tangle_Diagram x \\<circ> Abs_Tangle_Diagram y =\n    Abs_Tangle_Diagram (x \\<circ> y)", "using  Abs_Tangle_Diagram_inverse assms(1) assms(2) compose_Tangle_def \n        mem_Collect_eq"], ["proof (prove)\nusing this:\n  ?y \\<in> {x. is_tangle_diagram x} \\<Longrightarrow>\n  Rep_Tangle_Diagram (Abs_Tangle_Diagram ?y) = ?y\n  is_tangle_diagram x\n  is_tangle_diagram y\n  ?x \\<circ> ?y =\n  Abs_Tangle_Diagram (Rep_Tangle_Diagram ?x \\<circ> Rep_Tangle_Diagram ?y)\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. Abs_Tangle_Diagram x \\<circ> Abs_Tangle_Diagram y =\n    Abs_Tangle_Diagram (x \\<circ> y)", "by auto"], ["", "(*defining domain and co-domain of tangles*)"], ["", "definition domain_Tangle::\"Tangle_Diagram \\<Rightarrow> int\"\nwhere\n\"domain_Tangle x = domain_wall(Rep_Tangle_Diagram x)\""], ["", "definition codomain_Tangle::\"Tangle_Diagram \\<Rightarrow> int\"\nwhere\n\"codomain_Tangle x = codomain_wall(Rep_Tangle_Diagram x)\""], ["", "end"]]}