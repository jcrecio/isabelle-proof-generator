{"file_name": "/home/qj213/afp-2021-10-22/thys/Knot_Theory/Linkrel_Kauffman.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Knot_Theory", "problem_names": ["lemma mat1_vert_wall_left: \nassumes \"is_tangle_diagram b\"\nshows\n\"rat_poly.matrix_mult  (blockmat (make_vert_block (nat (domain_wall b)))) (kauff_mat b)\n             = (kauff_mat b)\"", "lemma mat1_vert_wall_right: \nassumes \"is_tangle_diagram b\"\nshows\n\"rat_poly.matrix_mult  (kauff_mat b) (blockmat (make_vert_block (nat (codomain_wall b))))\n             = (kauff_mat b)\"", "lemma compress_top_inv:\"(compress_top w1 w2) \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\"", "lemma domain_make_vert_int:\"(n \\<ge> 0) \\<Longrightarrow> (domain_block (make_vert_block (nat n)))\n                      = n\"", "lemma compress_bottom_inv:\"(compress_bottom w1 w2) \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\"", "theorem compress_inv:\"compress w1 w2 \\<Longrightarrow> (kauff_mat w1 = kauff_mat w2)\"", "lemma striaghten_topdown_computation:\"kauff_mat ((basic ([vert,cup]))\\<circ>(basic ([cap,vert])))\n                  =  kauff_mat ((basic ([vert]))\\<circ>(basic ([vert])))\"", "theorem straighten_topdown_inv:\"straighten_topdown w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma striaghten_downtop_computation:\"kauff_mat ((basic ([cup,vert]))\\<circ>(basic ([vert,cap])))\n                  =  kauff_mat ((basic ([vert]))\\<circ>(basic ([vert])))\"", "theorem straighten_downtop_inv:\"straighten_downtop w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "theorem straighten_inv:\"straighten w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma kauff_mat_swingpos:\n \"kauff_mat (r_over_braid) = kauff_mat (l_over_braid)\"", "lemma swing_pos_inv:\"swing_pos w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma kauff_mat_swingneg:\n\"kauff_mat (r_under_braid) = kauff_mat (l_under_braid)\"", "lemma swing_neg_inv:\"swing_neg w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "theorem swing_inv:\n\"swing w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma rotate_toppos_kauff_mat:\"kauff_mat ((basic [vert,over])\\<circ>(basic [cap, vert])) \n                      =  kauff_mat ((basic [under,vert])\\<circ>(basic [vert,cap]))\"", "lemma rotate_toppos_inv:\"rotate_toppos w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma rotate_topneg_kauff_mat:\"kauff_mat ((basic [vert,under])\\<circ>(basic [cap, vert])) \n                      =  kauff_mat ((basic [over,vert])\\<circ>(basic [vert,cap]))\"", "lemma rotate_topneg_inv:\"rotate_topneg w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma rotate_downpos_kauff_mat:\n \"kauff_mat ((basic [cup,vert])\\<circ>(basic [vert,over]))= kauff_mat ((basic [vert,cup])\\<circ>(basic [under,vert]))\"", "lemma rotate_downpos_inv:\"rotate_downpos w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma rotate_downneg_kauff_mat:\n \"kauff_mat ((basic [cup,vert])\\<circ>(basic [vert,under]))= kauff_mat ((basic [vert,cup])\\<circ>(basic [over,vert]))\"", "lemma rotate_downneg_inv:\"rotate_downneg w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "theorem rotate_inv:\"rotate w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma positive_flip_kauff_mat:\n \"kauff_mat (left_over) = kauff_mat (right_over)\"", "lemma uncross_positive_flip_inv: \"uncross_positive_flip w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma negative_flip_kauff_mat: \"kauff_mat (left_under) = kauff_mat (right_under)\"", "lemma uncross_negative_flip_inv: \"uncross_negative_flip w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "theorem framed_uncross_inv:\"(framed_uncross w1 w2) \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma  pos_neg_kauff_mat:\n\"kauff_mat ((basic [over]) \\<circ> (basic [under])) \n                    = kauff_mat ((basic [vert,vert]) \\<circ> (basic [vert,vert])) \"", "lemma pull_posneg_inv: \"pull_posneg w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "lemma  neg_pos_kauff_mat:\"kauff_mat ((basic [under]) \\<circ> (basic [over])) \n   = kauff_mat ((basic [vert,vert]) \\<circ> (basic [vert,vert])) \"", "lemma pull_negpos_inv:\"pull_negpos w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "theorem pull_inv:\"pull w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\"", "theorem slide_inv:\"slide w1 w2 \\<Longrightarrow> (kauff_mat w1 = kauff_mat w2)\"", "theorem framed_linkrel_inv:\"framed_linkrel w1 w2 \\<Longrightarrow> (kauff_mat w1)= (kauff_mat w2)\""], "translations": [["", "lemma mat1_vert_wall_left: \nassumes \"is_tangle_diagram b\"\nshows\n\"rat_poly.matrix_mult  (blockmat (make_vert_block (nat (domain_wall b)))) (kauff_mat b)\n             = (kauff_mat b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall b))))\n     (kauff_mat b) =\n    kauff_mat b", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall b))))\n     (kauff_mat b) =\n    kauff_mat b", "have \"mat (2^(nat (domain_wall b))) (length (kauff_mat b)) (kauff_mat b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (2 ^ nat (domain_wall b)) (length (kauff_mat b)) (kauff_mat b)", "by (metis assms matrix_kauff_mat)"], ["proof (state)\nthis:\n  mat (2 ^ nat (domain_wall b)) (length (kauff_mat b)) (kauff_mat b)\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall b))))\n     (kauff_mat b) =\n    kauff_mat b", "moreover"], ["proof (state)\nthis:\n  mat (2 ^ nat (domain_wall b)) (length (kauff_mat b)) (kauff_mat b)\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall b))))\n     (kauff_mat b) =\n    kauff_mat b", "have \"(blockmat (make_vert_block (nat (domain_wall b))))\n                       = mat1 (2^(nat (domain_wall b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. blockmat (make_vert_block (nat (domain_wall b))) =\n    mat1 (2 ^ nat (domain_wall b))", "using make_vert_block_map_blockmat"], ["proof (prove)\nusing this:\n  blockmat (make_vert_block ?n) = mat1 (2 ^ ?n)\n\ngoal (1 subgoal):\n 1. blockmat (make_vert_block (nat (domain_wall b))) =\n    mat1 (2 ^ nat (domain_wall b))", "by auto"], ["proof (state)\nthis:\n  blockmat (make_vert_block (nat (domain_wall b))) =\n  mat1 (2 ^ nat (domain_wall b))\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall b))))\n     (kauff_mat b) =\n    kauff_mat b", "ultimately"], ["proof (chain)\npicking this:\n  mat (2 ^ nat (domain_wall b)) (length (kauff_mat b)) (kauff_mat b)\n  blockmat (make_vert_block (nat (domain_wall b))) =\n  mat1 (2 ^ nat (domain_wall b))", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (2 ^ nat (domain_wall b)) (length (kauff_mat b)) (kauff_mat b)\n  blockmat (make_vert_block (nat (domain_wall b))) =\n  mat1 (2 ^ nat (domain_wall b))\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall b))))\n     (kauff_mat b) =\n    kauff_mat b", "by (metis blockmat_make_vert mat1_mult_left prop_make_vert_equiv(1))"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall b))))\n   (kauff_mat b) =\n  kauff_mat b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat1_vert_wall_right: \nassumes \"is_tangle_diagram b\"\nshows\n\"rat_poly.matrix_mult  (kauff_mat b) (blockmat (make_vert_block (nat (codomain_wall b))))\n             = (kauff_mat b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat b)\n     (blockmat (make_vert_block (nat (codomain_wall b)))) =\n    kauff_mat b", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat b)\n     (blockmat (make_vert_block (nat (codomain_wall b)))) =\n    kauff_mat b", "have \"mat (rat_poly.row_length (kauff_mat b)) (2^(nat (codomain_wall b))) (kauff_mat b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (rat_poly.row_length (kauff_mat b)) (2 ^ nat (codomain_wall b))\n     (kauff_mat b)", "by (metis assms matrix_kauff_mat)"], ["proof (state)\nthis:\n  mat (rat_poly.row_length (kauff_mat b)) (2 ^ nat (codomain_wall b))\n   (kauff_mat b)\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat b)\n     (blockmat (make_vert_block (nat (codomain_wall b)))) =\n    kauff_mat b", "moreover"], ["proof (state)\nthis:\n  mat (rat_poly.row_length (kauff_mat b)) (2 ^ nat (codomain_wall b))\n   (kauff_mat b)\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat b)\n     (blockmat (make_vert_block (nat (codomain_wall b)))) =\n    kauff_mat b", "have \"(blockmat (make_vert_block (nat (codomain_wall b))))\n                       = mat1 (2^(nat (codomain_wall b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. blockmat (make_vert_block (nat (codomain_wall b))) =\n    mat1 (2 ^ nat (codomain_wall b))", "using make_vert_block_map_blockmat"], ["proof (prove)\nusing this:\n  blockmat (make_vert_block ?n) = mat1 (2 ^ ?n)\n\ngoal (1 subgoal):\n 1. blockmat (make_vert_block (nat (codomain_wall b))) =\n    mat1 (2 ^ nat (codomain_wall b))", "by auto"], ["proof (state)\nthis:\n  blockmat (make_vert_block (nat (codomain_wall b))) =\n  mat1 (2 ^ nat (codomain_wall b))\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat b)\n     (blockmat (make_vert_block (nat (codomain_wall b)))) =\n    kauff_mat b", "ultimately"], ["proof (chain)\npicking this:\n  mat (rat_poly.row_length (kauff_mat b)) (2 ^ nat (codomain_wall b))\n   (kauff_mat b)\n  blockmat (make_vert_block (nat (codomain_wall b))) =\n  mat1 (2 ^ nat (codomain_wall b))", "show ?thesis"], ["proof (prove)\nusing this:\n  mat (rat_poly.row_length (kauff_mat b)) (2 ^ nat (codomain_wall b))\n   (kauff_mat b)\n  blockmat (make_vert_block (nat (codomain_wall b))) =\n  mat1 (2 ^ nat (codomain_wall b))\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat b)\n     (blockmat (make_vert_block (nat (codomain_wall b)))) =\n    kauff_mat b", "by (metis mat1_rt_mult)"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (kauff_mat b)\n   (blockmat (make_vert_block (nat (codomain_wall b)))) =\n  kauff_mat b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compress_top_inv:\"(compress_top w1 w2) \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "assume assm:\"compress_top w1 w2\""], ["proof (state)\nthis:\n  compress_top w1 w2\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "have \" \\<exists>B.((w1 = (basic (make_vert_block (nat (domain_wall B))))\\<circ> B)\n                              \\<and>(w2 = (B \\<circ> (basic ([]))))\\<and>(codomain_wall B = 0)\n          \\<and>(is_tangle_diagram B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B.\n       w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n       w2 = B \\<circ> basic [] \\<and>\n       codomain_wall B = 0 \\<and> is_tangle_diagram B", "using compress_top_def assm"], ["proof (prove)\nusing this:\n  compress_top ?x ?y \\<equiv>\n  \\<exists>B.\n     ?x = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n     ?y = B \\<circ> basic [] \\<and>\n     codomain_wall B = 0 \\<and> is_tangle_diagram B\n  compress_top w1 w2\n\ngoal (1 subgoal):\n 1. \\<exists>B.\n       w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n       w2 = B \\<circ> basic [] \\<and>\n       codomain_wall B = 0 \\<and> is_tangle_diagram B", "by auto"], ["proof (state)\nthis:\n  \\<exists>B.\n     w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n     w2 = B \\<circ> basic [] \\<and>\n     codomain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  \\<exists>B.\n     w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n     w2 = B \\<circ> basic [] \\<and>\n     codomain_wall B = 0 \\<and> is_tangle_diagram B", "obtain B where \"(w1 = (basic (make_vert_block (nat (domain_wall B))))\\<circ> B)\n                              \\<and>(w2 = (B \\<circ> (basic ([]))))\\<and>(codomain_wall B = 0)\\<and>(is_tangle_diagram B)\""], ["proof (prove)\nusing this:\n  \\<exists>B.\n     w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n     w2 = B \\<circ> basic [] \\<and>\n     codomain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n        w2 = B \\<circ> basic [] \\<and>\n        codomain_wall B = 0 \\<and> is_tangle_diagram B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n  w2 = B \\<circ> basic [] \\<and>\n  codomain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n  w2 = B \\<circ> basic [] \\<and>\n  codomain_wall B = 0 \\<and> is_tangle_diagram B", "have 1:\"(w1 = (basic (make_vert_block (nat (domain_wall B))))\\<circ> B)\n                         \\<and>(w2 = (B \\<circ> (basic ([]))))\\<and>(codomain_wall B = 0)\\<and>(is_tangle_diagram B)\""], ["proof (prove)\nusing this:\n  w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n  w2 = B \\<circ> basic [] \\<and>\n  codomain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n    w2 = B \\<circ> basic [] \\<and>\n    codomain_wall B = 0 \\<and> is_tangle_diagram B", "by auto"], ["proof (state)\nthis:\n  w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n  w2 = B \\<circ> basic [] \\<and>\n  codomain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n  w2 = B \\<circ> basic [] \\<and>\n  codomain_wall B = 0 \\<and> is_tangle_diagram B", "have \"kauff_mat(w1) = (kauff_mat ((basic (make_vert_block (nat (domain_wall B))))\\<circ> B))\""], ["proof (prove)\nusing this:\n  w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n  w2 = B \\<circ> basic [] \\<and>\n  codomain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B)", "by auto"], ["proof (state)\nthis:\n  kauff_mat w1 =\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B)\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  kauff_mat w1 =\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B)\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  kauff_mat w1 =\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B)", "have \"... = kauff_mat ((make_vert_block (nat (domain_wall B)))*B)\""], ["proof (prove)\nusing this:\n  kauff_mat w1 =\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B)\n\ngoal (1 subgoal):\n 1. kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B) =\n    kauff_mat (make_vert_block (nat (domain_wall B)) * B)", "by auto"], ["proof (state)\nthis:\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B) =\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B)\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B) =\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B)\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B) =\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B)", "have \"... = rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n                                    (kauff_mat B)\""], ["proof (prove)\nusing this:\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B) =\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B)\n\ngoal (1 subgoal):\n 1. kauff_mat (make_vert_block (nat (domain_wall B)) * B) =\n    rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n     (kauff_mat B)", "by auto"], ["proof (state)\nthis:\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B) =\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B)\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B) =\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B)\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B) =\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B)", "have \"... = (kauff_mat B)\""], ["proof (prove)\nusing this:\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B) =\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B)\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n     (kauff_mat B) =\n    kauff_mat B", "using 1 mat1_vert_wall_left"], ["proof (prove)\nusing this:\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B) =\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B)\n  w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n  w2 = B \\<circ> basic [] \\<and>\n  codomain_wall B = 0 \\<and> is_tangle_diagram B\n  is_tangle_diagram ?b \\<Longrightarrow>\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall ?b))))\n   (kauff_mat ?b) =\n  kauff_mat ?b\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n     (kauff_mat B) =\n    kauff_mat B", "by (metis)"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B) =\n  kauff_mat B\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "ultimately"], ["proof (chain)\npicking this:\n  kauff_mat w1 =\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B)\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B) =\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B)\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B) =\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B)\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B) =\n  kauff_mat B", "have \"kauff_mat(w1) = kauff_mat B\""], ["proof (prove)\nusing this:\n  kauff_mat w1 =\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B)\n  kauff_mat (basic (make_vert_block (nat (domain_wall B))) \\<circ> B) =\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B)\n  kauff_mat (make_vert_block (nat (domain_wall B)) * B) =\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B)\n  rat_poly.matrix_mult (blockmat (make_vert_block (nat (domain_wall B))))\n   (kauff_mat B) =\n  kauff_mat B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat B", "by auto"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat B\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat B\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "have \"kauff_mat w2 = kauff_mat B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat B", "using 1"], ["proof (prove)\nusing this:\n  w1 = basic (make_vert_block (nat (domain_wall B))) \\<circ> B \\<and>\n  w2 = B \\<circ> basic [] \\<and>\n  codomain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat B", "by (metis left_mat_compose)"], ["proof (state)\nthis:\n  kauff_mat w2 = kauff_mat B\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "ultimately"], ["proof (chain)\npicking this:\n  kauff_mat w1 = kauff_mat B\n  kauff_mat w2 = kauff_mat B", "show ?thesis"], ["proof (prove)\nusing this:\n  kauff_mat w1 = kauff_mat B\n  kauff_mat w2 = kauff_mat B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat w2", "by auto"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat w2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma domain_make_vert_int:\"(n \\<ge> 0) \\<Longrightarrow> (domain_block (make_vert_block (nat n)))\n                      = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<Longrightarrow> domain_block (make_vert_block (nat n)) = n", "using domain_make_vert"], ["proof (prove)\nusing this:\n  domain_block (make_vert_block ?n) = int ?n\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<Longrightarrow> domain_block (make_vert_block (nat n)) = n", "by auto"], ["", "lemma compress_bottom_inv:\"(compress_bottom w1 w2) \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "assume assm:\"compress_bottom w1 w2\""], ["proof (state)\nthis:\n  compress_bottom w1 w2\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "have \"\\<exists>B.((w1 = B \\<circ> (basic (make_vert_block (nat (codomain_wall B)))))\n                              \\<and>(w2 = ((basic ([]) \\<circ> B)))\\<and>(domain_wall B = 0)\n                               \\<and>(is_tangle_diagram B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B.\n       w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n       w2 = basic [] \\<circ> B \\<and>\n       domain_wall B = 0 \\<and> is_tangle_diagram B", "using compress_bottom_def assm"], ["proof (prove)\nusing this:\n  compress_bottom ?x ?y \\<equiv>\n  \\<exists>B.\n     ?x = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n     ?y = basic [] \\<circ> B \\<and>\n     domain_wall B = 0 \\<and> is_tangle_diagram B\n  compress_bottom w1 w2\n\ngoal (1 subgoal):\n 1. \\<exists>B.\n       w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n       w2 = basic [] \\<circ> B \\<and>\n       domain_wall B = 0 \\<and> is_tangle_diagram B", "by auto"], ["proof (state)\nthis:\n  \\<exists>B.\n     w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n     w2 = basic [] \\<circ> B \\<and>\n     domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  \\<exists>B.\n     w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n     w2 = basic [] \\<circ> B \\<and>\n     domain_wall B = 0 \\<and> is_tangle_diagram B", "obtain B where \"((w1 = B \\<circ> (basic (make_vert_block (nat (codomain_wall B)))))\n                              \\<and>(w2 = ((basic ([]) \\<circ> B)))\\<and>(domain_wall B = 0)\n                               \\<and>(is_tangle_diagram B))\""], ["proof (prove)\nusing this:\n  \\<exists>B.\n     w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n     w2 = basic [] \\<circ> B \\<and>\n     domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        w1 =\n        B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n        w2 = basic [] \\<circ> B \\<and>\n        domain_wall B = 0 \\<and> is_tangle_diagram B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B", "have 1:\"((w1 = B \\<circ> (basic (make_vert_block (nat (codomain_wall B)))))\n                              \\<and>(w2 = ((basic ([]) \\<circ> B)))\\<and>(domain_wall B = 0)\n                               \\<and>(is_tangle_diagram B))\""], ["proof (prove)\nusing this:\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n    w2 = basic [] \\<circ> B \\<and>\n    domain_wall B = 0 \\<and> is_tangle_diagram B", "by auto"], ["proof (state)\nthis:\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B", "have \"kauff_mat(w1) = (kauff_mat ( B \\<circ> (basic (make_vert_block (nat (codomain_wall B))))))\""], ["proof (prove)\nusing this:\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B))))", "by auto"], ["proof (state)\nthis:\n  kauff_mat w1 =\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  kauff_mat w1 =\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  kauff_mat w1 =\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B))))", "have \"... = rat_poly.matrix_mult (kauff_mat B)\n                                    (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))\""], ["proof (prove)\nusing this:\n  kauff_mat w1 =\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    kauff_mat\n     (B \\<circ>\n      basic (make_vert_block (nat (codomain_wall B)))) \\<Longrightarrow>\n    kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "have \"is_tangle_diagram B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram B", "using 1"], ["proof (prove)\nusing this:\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. is_tangle_diagram B", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    kauff_mat\n     (B \\<circ>\n      basic (make_vert_block (nat (codomain_wall B)))) \\<Longrightarrow>\n    kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    kauff_mat\n     (B \\<circ>\n      basic (make_vert_block (nat (codomain_wall B)))) \\<Longrightarrow>\n    kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "have \"is_tangle_diagram  (basic (make_vert_block (nat (codomain_wall B))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (nat (codomain_wall B))))", "using is_tangle_diagram.simps"], ["proof (prove)\nusing this:\n  is_tangle_diagram (basic ?x) = True\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. is_tangle_diagram (basic (make_vert_block (nat (codomain_wall B))))", "by auto"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    kauff_mat\n     (B \\<circ>\n      basic (make_vert_block (nat (codomain_wall B)))) \\<Longrightarrow>\n    kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "moreover"], ["proof (state)\nthis:\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    kauff_mat\n     (B \\<circ>\n      basic (make_vert_block (nat (codomain_wall B)))) \\<Longrightarrow>\n    kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "have \"codomain_wall B = domain_wall (basic (make_vert_block (nat (codomain_wall B))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomain_wall B =\n    domain_wall (basic (make_vert_block (nat (codomain_wall B))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. codomain_wall B =\n    domain_wall (basic (make_vert_block (nat (codomain_wall B))))", "have \"codomain_wall B \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> codomain_wall B", "apply (induct B)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> codomain_wall (basic x)\n 2. \\<And>x1a B.\n       0 \\<le> codomain_wall B \\<Longrightarrow>\n       0 \\<le> codomain_wall (x1a * B)", "by (auto) (metis codomain_block_nonnegative)"], ["proof (state)\nthis:\n  0 \\<le> codomain_wall B\n\ngoal (1 subgoal):\n 1. codomain_wall B =\n    domain_wall (basic (make_vert_block (nat (codomain_wall B))))", "then"], ["proof (chain)\npicking this:\n  0 \\<le> codomain_wall B", "have \"domain_block (make_vert_block (nat (codomain_wall B)))\n                     = codomain_wall B\""], ["proof (prove)\nusing this:\n  0 \\<le> codomain_wall B\n\ngoal (1 subgoal):\n 1. domain_block (make_vert_block (nat (codomain_wall B))) = codomain_wall B", "using domain_make_vert_int"], ["proof (prove)\nusing this:\n  0 \\<le> codomain_wall B\n  0 \\<le> ?n \\<Longrightarrow> domain_block (make_vert_block (nat ?n)) = ?n\n\ngoal (1 subgoal):\n 1. domain_block (make_vert_block (nat (codomain_wall B))) = codomain_wall B", "by auto"], ["proof (state)\nthis:\n  domain_block (make_vert_block (nat (codomain_wall B))) = codomain_wall B\n\ngoal (1 subgoal):\n 1. codomain_wall B =\n    domain_wall (basic (make_vert_block (nat (codomain_wall B))))", "then"], ["proof (chain)\npicking this:\n  domain_block (make_vert_block (nat (codomain_wall B))) = codomain_wall B", "show ?thesis"], ["proof (prove)\nusing this:\n  domain_block (make_vert_block (nat (codomain_wall B))) = codomain_wall B\n\ngoal (1 subgoal):\n 1. codomain_wall B =\n    domain_wall (basic (make_vert_block (nat (codomain_wall B))))", "unfolding domain_wall.simps(1)"], ["proof (prove)\nusing this:\n  domain_block (make_vert_block (nat (codomain_wall B))) = codomain_wall B\n\ngoal (1 subgoal):\n 1. codomain_wall B = domain_block (make_vert_block (nat (codomain_wall B)))", "by auto"], ["proof (state)\nthis:\n  codomain_wall B =\n  domain_wall (basic (make_vert_block (nat (codomain_wall B))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  codomain_wall B =\n  domain_wall (basic (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    kauff_mat\n     (B \\<circ>\n      basic (make_vert_block (nat (codomain_wall B)))) \\<Longrightarrow>\n    kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "ultimately"], ["proof (chain)\npicking this:\n  is_tangle_diagram B\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_wall B))))\n  codomain_wall B =\n  domain_wall (basic (make_vert_block (nat (codomain_wall B))))", "show ?thesis"], ["proof (prove)\nusing this:\n  is_tangle_diagram B\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_wall B))))\n  codomain_wall B =\n  domain_wall (basic (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "using tangle_compose_matrix"], ["proof (prove)\nusing this:\n  is_tangle_diagram B\n  is_tangle_diagram (basic (make_vert_block (nat (codomain_wall B))))\n  codomain_wall B =\n  domain_wall (basic (make_vert_block (nat (codomain_wall B))))\n  is_tangle_diagram ?ws1.0 \\<and>\n  is_tangle_diagram ?ws2.0 \\<and>\n  domain_wall ?ws2.0 = codomain_wall ?ws1.0 \\<Longrightarrow>\n  kauff_mat (?ws1.0 \\<circ> ?ws2.0) =\n  rat_poly.matrix_mult (kauff_mat ?ws1.0) (kauff_mat ?ws2.0)\n\ngoal (1 subgoal):\n 1. kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "by auto"], ["proof (state)\nthis:\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))", "have  \"... = rat_poly.matrix_mult (kauff_mat B)\n                                    (blockmat (make_vert_block (nat (codomain_wall B))))\""], ["proof (prove)\nusing this:\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (blockmat (make_vert_block (nat (codomain_wall B))))", "using kauff_mat.simps(1) tangle_compose_matrix"], ["proof (prove)\nusing this:\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))\n  kauff_mat (basic ?w) = blockmat ?w\n  is_tangle_diagram ?ws1.0 \\<and>\n  is_tangle_diagram ?ws2.0 \\<and>\n  domain_wall ?ws2.0 = codomain_wall ?ws1.0 \\<Longrightarrow>\n  kauff_mat (?ws1.0 \\<circ> ?ws2.0) =\n  rat_poly.matrix_mult (kauff_mat ?ws1.0) (kauff_mat ?ws2.0)\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat B)\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n    rat_poly.matrix_mult (kauff_mat B)\n     (blockmat (make_vert_block (nat (codomain_wall B))))", "by auto"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B))))", "have \"... = (kauff_mat B)\""], ["proof (prove)\nusing this:\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B))))\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat B)\n     (blockmat (make_vert_block (nat (codomain_wall B)))) =\n    kauff_mat B", "using 1 mat1_vert_wall_right"], ["proof (prove)\nusing this:\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B))))\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B\n  is_tangle_diagram ?b \\<Longrightarrow>\n  rat_poly.matrix_mult (kauff_mat ?b)\n   (blockmat (make_vert_block (nat (codomain_wall ?b)))) =\n  kauff_mat ?b\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat B)\n     (blockmat (make_vert_block (nat (codomain_wall B)))) =\n    kauff_mat B", "by auto"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B)))) =\n  kauff_mat B\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "ultimately"], ["proof (chain)\npicking this:\n  kauff_mat w1 =\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B))))\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B))))\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B)))) =\n  kauff_mat B", "have \"kauff_mat(w1) = kauff_mat B\""], ["proof (prove)\nusing this:\n  kauff_mat w1 =\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B))))\n  kauff_mat (B \\<circ> basic (make_vert_block (nat (codomain_wall B)))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B)))))\n  rat_poly.matrix_mult (kauff_mat B)\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall B))))) =\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B))))\n  rat_poly.matrix_mult (kauff_mat B)\n   (blockmat (make_vert_block (nat (codomain_wall B)))) =\n  kauff_mat B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat B", "by auto"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat B\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat B\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "have \"kauff_mat w2 = kauff_mat B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat B", "using 1"], ["proof (prove)\nusing this:\n  w1 = B \\<circ> basic (make_vert_block (nat (codomain_wall B))) \\<and>\n  w2 = basic [] \\<circ> B \\<and>\n  domain_wall B = 0 \\<and> is_tangle_diagram B\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat B", "by (metis right_mat_compose)"], ["proof (state)\nthis:\n  kauff_mat w2 = kauff_mat B\n\ngoal (1 subgoal):\n 1. compress_bottom w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "ultimately"], ["proof (chain)\npicking this:\n  kauff_mat w1 = kauff_mat B\n  kauff_mat w2 = kauff_mat B", "show ?thesis"], ["proof (prove)\nusing this:\n  kauff_mat w1 = kauff_mat B\n  kauff_mat w2 = kauff_mat B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat w2", "by auto"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat w2\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem compress_inv:\"compress w1 w2 \\<Longrightarrow> (kauff_mat w1 = kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compress w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding compress_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<or> compress_bottom w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using compress_bottom_inv compress_top_inv"], ["proof (prove)\nusing this:\n  compress_bottom ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  compress_top ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n\ngoal (1 subgoal):\n 1. compress_top w1 w2 \\<or> compress_bottom w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma striaghten_topdown_computation:\"kauff_mat ((basic ([vert,cup]))\\<circ>(basic ([cap,vert])))\n                  =  kauff_mat ((basic ([vert]))\\<circ>(basic ([vert])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (basic [vert, cup] \\<circ> basic [cap, vert]) =\n    kauff_mat (basic [vert] \\<circ> basic [vert])", "apply(simp add:kauff_mat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult\n     [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0], [0, 0], [0, A],\n      [0, rat_poly_inv B], [0, 0]]\n     [[0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]] =\n    rat_poly.matrix_mult [[1, 0], [0, 1]] [[1, 0], [0, 1]]", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0]\n       (map2 (#) [0, 1]\n         (replicate (rat_poly.row_length [[1, 0], [0, 1]]) [])))\n     [1, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0]\n       (map2 (#) [0, 1]\n         (replicate (rat_poly.row_length [[1, 0], [0, 1]]) [])))\n     [0, 1]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [1, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0]\n       (map2 (#) [0, 1]\n         (replicate (rat_poly.row_length [[1, 0], [0, 1]]) []))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 1]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0]\n       (map2 (#) [0, 1]\n         (replicate (rat_poly.row_length [[1, 0], [0, 1]]) [])))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [1, 0] [1, 0]\n 2. scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 1] [1, 0]\n 3. scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n    scalar_prod [1, 0] [0, 1]\n 4. scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n    scalar_prod [0, 1] [0, 1]", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rat_poly_times B A = 1\n 2. rat_poly_times A B = 1", "apply (auto simp add:inverse1 inverse2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem straighten_topdown_inv:\"straighten_topdown w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. straighten_topdown w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding straighten_topdown_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = basic [vert, cup] \\<circ> basic [cap, vert] \\<and>\n    w2 = basic [vert] \\<circ> basic [vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using striaghten_topdown_computation"], ["proof (prove)\nusing this:\n  kauff_mat (basic [vert, cup] \\<circ> basic [cap, vert]) =\n  kauff_mat (basic [vert] \\<circ> basic [vert])\n\ngoal (1 subgoal):\n 1. w1 = basic [vert, cup] \\<circ> basic [cap, vert] \\<and>\n    w2 = basic [vert] \\<circ> basic [vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma striaghten_downtop_computation:\"kauff_mat ((basic ([cup,vert]))\\<circ>(basic ([vert,cap])))\n                  =  kauff_mat ((basic ([vert]))\\<circ>(basic ([vert])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (basic [cup, vert] \\<circ> basic [vert, cap]) =\n    kauff_mat (basic [vert] \\<circ> basic [vert])", "apply(simp add:kauff_mat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult\n     [[0, 0], [0, 0], [A, 0], [0, A], [rat_poly_inv B, 0],\n      [0, rat_poly_inv B], [0, 0], [0, 0]]\n     [[0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]] =\n    rat_poly.matrix_mult [[1, 0], [0, 1]] [[1, 0], [0, 1]]", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0]\n       (map2 (#) [0, 1]\n         (replicate (rat_poly.row_length [[1, 0], [0, 1]]) [])))\n     [1, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, rat_poly_inv A, B, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0]\n       (map2 (#) [0, 1]\n         (replicate (rat_poly.row_length [[1, 0], [0, 1]]) [])))\n     [0, 1]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [1, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0]\n       (map2 (#) [0, 1]\n         (replicate (rat_poly.row_length [[1, 0], [0, 1]]) []))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 1]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0]\n       (map2 (#) [0, 1]\n         (replicate (rat_poly.row_length [[1, 0], [0, 1]]) [])))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0] =\n    scalar_prod [1, 0] [1, 0]\n 2. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0] =\n    scalar_prod [0, 1] [1, 0]\n 3. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, 0, 0, 0, 0, rat_poly_inv A, B, 0] =\n    scalar_prod [1, 0] [0, 1]\n 4. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [0, 0, 0, 0, 0, rat_poly_inv A, B, 0] =\n    scalar_prod [0, 1] [0, 1]", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rat_poly_times A B = 1\n 2. rat_poly_times B A = 1", "apply (auto simp add:inverse1 inverse2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem straighten_downtop_inv:\"straighten_downtop w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. straighten_downtop w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding straighten_downtop_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = basic [cup, vert] \\<circ> basic [vert, cap] \\<and>\n    w2 = basic [vert] \\<circ> basic [vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using striaghten_downtop_computation"], ["proof (prove)\nusing this:\n  kauff_mat (basic [cup, vert] \\<circ> basic [vert, cap]) =\n  kauff_mat (basic [vert] \\<circ> basic [vert])\n\ngoal (1 subgoal):\n 1. w1 = basic [cup, vert] \\<circ> basic [vert, cap] \\<and>\n    w2 = basic [vert] \\<circ> basic [vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "theorem straighten_inv:\"straighten w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. straighten w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding straighten_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. straighten_topdown w1 w2 \\<or>\n    straighten_downtop w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using straighten_topdown_inv straighten_downtop_inv"], ["proof (prove)\nusing this:\n  straighten_topdown ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  straighten_downtop ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n\ngoal (1 subgoal):\n 1. straighten_topdown w1 w2 \\<or>\n    straighten_downtop w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "(*swing relations*)"], ["", "lemma kauff_mat_swingpos:\n \"kauff_mat (r_over_braid) = kauff_mat (l_over_braid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat r_over_braid = kauff_mat l_over_braid", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult\n     [[A, 0, 0, 0, 0, 0, 0, 0], [0, A, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, B, 0, 0, 0], [0, 0, 0, 0, 0, B, 0, 0],\n      [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n      [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n      [0, 0, 0, 0, 0, 0, A, 0], [0, 0, 0, 0, 0, 0, 0, A]]\n     (rat_poly.matrix_mult\n       [[A, 0, 0, 0, 0, 0, 0, 0], [0, 0, B, 0, 0, 0, 0, 0],\n        [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n        [0, 0, 0, A, 0, 0, 0, 0], [0, 0, 0, 0, A, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, B, 0],\n        [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n        [0, 0, 0, 0, 0, 0, 0, A]]\n       [[A, 0, 0, 0, 0, 0, 0, 0], [0, A, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, B, 0, 0, 0], [0, 0, 0, 0, 0, B, 0, 0],\n        [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n        [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n        [0, 0, 0, 0, 0, 0, A, 0], [0, 0, 0, 0, 0, 0, 0, A]]) =\n    rat_poly.matrix_mult\n     [[A, 0, 0, 0, 0, 0, 0, 0], [0, 0, B, 0, 0, 0, 0, 0],\n      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n      [0, 0, 0, A, 0, 0, 0, 0], [0, 0, 0, 0, A, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, B, 0],\n      [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n      [0, 0, 0, 0, 0, 0, 0, A]]\n     (rat_poly.matrix_mult\n       [[A, 0, 0, 0, 0, 0, 0, 0], [0, A, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, B, 0, 0, 0], [0, 0, 0, 0, 0, B, 0, 0],\n        [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n        [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n        [0, 0, 0, 0, 0, 0, A, 0], [0, 0, 0, 0, 0, 0, 0, A]]\n       [[A, 0, 0, 0, 0, 0, 0, 0], [0, 0, B, 0, 0, 0, 0, 0],\n        [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n        [0, 0, 0, A, 0, 0, 0, 0], [0, 0, 0, 0, A, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, B, 0],\n        [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n        [0, 0, 0, 0, 0, 0, 0, A]])", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [A, 0, 0, 0, 0, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [A, 0, 0, 0, 0, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, A, 0, 0, 0, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, B, 0, 0, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, B, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n        0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, B, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, A, 0, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, A, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, 0, B, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, 0, A, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B,\n        0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, 0, 0, A]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, 0, 0, A])", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [A, 0, 0, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [A, 0, 0, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, A, 0, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, B, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, B, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                          0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, B, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, A, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, B, 0,\n                          A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                          0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, A, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, 0, B, 0,\n                          A - rat_poly_times (rat_poly_times B B) B, 0,\n                          0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, 0, B, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, 0, A, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, 0, 0, 0, B,\n                          A - rat_poly_times (rat_poly_times B B) B,\n                          0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, 0, 0, A]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, 0, 0, A]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (64 subgoals):\n 1. scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]]\n 2. scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, B, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]]\n 3. scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod\n     [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]]\n 4. scalar_prod [0, 0, 0, 0, 0, B, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]]\n 5. scalar_prod\n     [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, A, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]]\n 6. scalar_prod\n     [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]]\n 7. scalar_prod [0, 0, 0, 0, 0, 0, A, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod\n     [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]]\n 8. scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [A, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [A, 0, 0, 0, 0, 0, 0, 0]]\n 9. scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [0, A, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [0, A, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [0, A, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [0, A, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [0, A, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [0, A, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [0, A, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [0, A, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [0, 0, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [0, 0, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [0, 0, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [0, 0, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [0, 0, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [0, 0, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [0, 0, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [0, 0, B, 0, 0, 0, 0, 0]]\n 10. scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n      [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [0, A, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, B, 0, 0, 0, 0, 0] [0, A, 0, 0, 0, 0, 0, 0],\n       scalar_prod\n        [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n        [0, A, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [0, A, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, A, 0, 0, 0] [0, A, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [0, A, 0, 0, 0, 0, 0, 0],\n       scalar_prod\n        [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n        [0, A, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [0, A, 0, 0, 0, 0, 0, 0]] =\n     scalar_prod [0, 0, B, 0, 0, 0, 0, 0]\n      [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0] [0, 0, B, 0, 0, 0, 0, 0],\n       scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [0, 0, B, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [0, 0, B, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, B, 0, 0] [0, 0, B, 0, 0, 0, 0, 0],\n       scalar_prod\n        [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n        [0, 0, B, 0, 0, 0, 0, 0],\n       scalar_prod\n        [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n        [0, 0, B, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, 0, A, 0] [0, 0, B, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, 0, 0, A] [0, 0, B, 0, 0, 0, 0, 0]]\nA total of 64 subgoals...", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rat_poly_plus\n     (rat_poly_times B\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) B))\n     (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B)\n       (rat_poly_times A (A - rat_poly_times (rat_poly_times B B) B))) =\n    rat_poly_times A\n     (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)\n 2. rat_poly_times A\n     (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A) =\n    rat_poly_plus\n     (rat_poly_times B\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) B))\n     (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B)\n       (rat_poly_times A (A - rat_poly_times (rat_poly_times B B) B)))", "apply(auto simp add:computation_swingpos)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma swing_pos_inv:\"swing_pos w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swing_pos w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding swing_pos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = r_over_braid \\<and> w2 = l_over_braid \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using kauff_mat_swingpos"], ["proof (prove)\nusing this:\n  kauff_mat r_over_braid = kauff_mat l_over_braid\n\ngoal (1 subgoal):\n 1. w1 = r_over_braid \\<and> w2 = l_over_braid \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma kauff_mat_swingneg:\n\"kauff_mat (r_under_braid) = kauff_mat (l_under_braid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat r_under_braid = kauff_mat l_under_braid", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult\n     [[B, 0, 0, 0, 0, 0, 0, 0], [0, B, 0, 0, 0, 0, 0, 0],\n      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n      [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n      [0, 0, A, 0, 0, 0, 0, 0], [0, 0, 0, A, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, B, 0], [0, 0, 0, 0, 0, 0, 0, B]]\n     (rat_poly.matrix_mult\n       [[B, 0, 0, 0, 0, 0, 0, 0],\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n        [0, A, 0, 0, 0, 0, 0, 0], [0, 0, 0, B, 0, 0, 0, 0],\n        [0, 0, 0, 0, B, 0, 0, 0],\n        [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n        [0, 0, 0, 0, 0, A, 0, 0], [0, 0, 0, 0, 0, 0, 0, B]]\n       [[B, 0, 0, 0, 0, 0, 0, 0], [0, B, 0, 0, 0, 0, 0, 0],\n        [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n        [0, 0, A, 0, 0, 0, 0, 0], [0, 0, 0, A, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, B, 0], [0, 0, 0, 0, 0, 0, 0, B]]) =\n    rat_poly.matrix_mult\n     [[B, 0, 0, 0, 0, 0, 0, 0],\n      [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n      [0, A, 0, 0, 0, 0, 0, 0], [0, 0, 0, B, 0, 0, 0, 0],\n      [0, 0, 0, 0, B, 0, 0, 0],\n      [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n      [0, 0, 0, 0, 0, A, 0, 0], [0, 0, 0, 0, 0, 0, 0, B]]\n     (rat_poly.matrix_mult\n       [[B, 0, 0, 0, 0, 0, 0, 0], [0, B, 0, 0, 0, 0, 0, 0],\n        [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n        [0, 0, A, 0, 0, 0, 0, 0], [0, 0, 0, A, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, B, 0], [0, 0, 0, 0, 0, 0, 0, B]]\n       [[B, 0, 0, 0, 0, 0, 0, 0],\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n        [0, A, 0, 0, 0, 0, 0, 0], [0, 0, 0, B, 0, 0, 0, 0],\n        [0, 0, 0, 0, B, 0, 0, 0],\n        [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n        [0, 0, 0, 0, 0, A, 0, 0], [0, 0, 0, 0, 0, 0, 0, B]])", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [B, 0, 0, 0, 0, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [B, 0, 0, 0, 0, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, B, 0, 0, 0, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0,\n        0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, A, 0, 0, 0, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, B, 0, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, A, 0, 0, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, 0, B, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, A, 0, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A,\n        0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, 0, B, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, A, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, 0, 0, B]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, 0, 0, B])", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [B, 0, 0, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [B, 0, 0, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, B, 0, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                          0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                          0, A, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, A, 0, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, 0,\n                          B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                          0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, B, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, A, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, B, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, A, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, 0, 0, 0,\n                          B - rat_poly_times (rat_poly_times A A) A, A,\n                          0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, 0, B, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, A, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, 0, 0, B]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w [0, 0, 0, 0, 0, 0, 0, B]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (64 subgoals):\n 1. scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]]\n 2. scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]]\n 3. scalar_prod\n     [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]]\n 4. scalar_prod\n     [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, B, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]]\n 5. scalar_prod [0, 0, A, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]]\n 6. scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod\n     [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]]\n 7. scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, 0, A, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]]\n 8. scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0] [B, 0, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [B, 0, 0, 0, 0, 0, 0, 0]]\n 9. scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [0, B, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [0, B, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [0, B, 0, 0, 0, 0, 0, 0]] =\n    scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0]\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]]\n 10. scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n      [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n       scalar_prod\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n        [0, B, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, A, 0, 0, 0, 0, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, B, 0, 0, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, B, 0, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n       scalar_prod\n        [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n        [0, B, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, A, 0, 0] [0, B, 0, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, 0, 0, B] [0, B, 0, 0, 0, 0, 0, 0]] =\n     scalar_prod\n      [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n      [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n       scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n       scalar_prod\n        [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n       scalar_prod\n        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, A, 0, 0, 0, 0, 0]\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n       scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n        [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]]\nA total of 64 subgoals...", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rat_poly_times B\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B) =\n    rat_poly_plus\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A)\n       (rat_poly_times B (B - rat_poly_times (rat_poly_times A A) A)))\n     (rat_poly_times A\n       (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) A))\n 2. rat_poly_plus\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A)\n       (rat_poly_times B (B - rat_poly_times (rat_poly_times A A) A)))\n     (rat_poly_times A\n       (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) A)) =\n    rat_poly_times B\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B)", "apply(auto simp add:computation_swingneg)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma swing_neg_inv:\"swing_neg w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swing_neg w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding swing_neg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = r_under_braid \\<and> w2 = l_under_braid \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using kauff_mat_swingneg"], ["proof (prove)\nusing this:\n  kauff_mat r_under_braid = kauff_mat l_under_braid\n\ngoal (1 subgoal):\n 1. w1 = r_under_braid \\<and> w2 = l_under_braid \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "theorem swing_inv:\n\"swing w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swing w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding swing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. swing_pos w1 w2 \\<or> swing_neg w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using swing_pos_inv swing_neg_inv"], ["proof (prove)\nusing this:\n  swing_pos ?w1.0 ?w2.0 \\<Longrightarrow> kauff_mat ?w1.0 = kauff_mat ?w2.0\n  swing_neg ?w1.0 ?w2.0 \\<Longrightarrow> kauff_mat ?w1.0 = kauff_mat ?w2.0\n\ngoal (1 subgoal):\n 1. swing_pos w1 w2 \\<or> swing_neg w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma rotate_toppos_kauff_mat:\"kauff_mat ((basic [vert,over])\\<circ>(basic [cap, vert])) \n                      =  kauff_mat ((basic [under,vert])\\<circ>(basic [vert,cap]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (basic [vert, over] \\<circ> basic [cap, vert]) =\n    kauff_mat (basic [brick.under, vert] \\<circ> basic [vert, cap])", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult\n     [[A, 0, 0, 0, 0, 0, 0, 0], [0, 0, B, 0, 0, 0, 0, 0],\n      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n      [0, 0, 0, A, 0, 0, 0, 0], [0, 0, 0, 0, A, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, B, 0],\n      [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n      [0, 0, 0, 0, 0, 0, 0, A]]\n     [[0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]] =\n    rat_poly.matrix_mult\n     [[B, 0, 0, 0, 0, 0, 0, 0], [0, B, 0, 0, 0, 0, 0, 0],\n      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n      [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n      [0, 0, A, 0, 0, 0, 0, 0], [0, 0, 0, A, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, B, 0], [0, 0, 0, 0, 0, 0, 0, B]]\n     [[0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]]", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0, B,\n                    A - rat_poly_times (rat_poly_times B B) B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B, 0, 0, 0, 0, 0],\n                          [0, B, A - rat_poly_times (rat_poly_times B B) B,\n                           0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, A, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, B,\n                           A - rat_poly_times (rat_poly_times B B) B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n           (map2 (#)\n             [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n              0]\n             (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B, 0, 0, 0, 0, 0, 0],\n                          [0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                           0, A, 0, 0, 0],\n                          [0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, 0, A,\n                           0, 0],\n                          [0, 0, A, 0, 0, 0, 0, 0],\n                          [0, 0, 0, A, 0, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, B, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 2. scalar_prod [0, 0, B, 0, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 3. scalar_prod\n     [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod\n     [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 4. scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod\n     [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 5. scalar_prod [0, 0, 0, 0, A, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 0, A, 0, 0, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 6. scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 7. scalar_prod\n     [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 8. scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 9. scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n     [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n    scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n     [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]\n 10. scalar_prod [0, 0, B, 0, 0, 0, 0, 0]\n      [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n     scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n      [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]\nA total of 16 subgoals...", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_inv\n     (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A) =\n    rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B", "apply(simp add:computation_toppos)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rotate_toppos_inv:\"rotate_toppos w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rotate_toppos w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding rotate_toppos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = basic [vert, over] \\<circ> basic [cap, vert] \\<and>\n    w2 =\n    basic [brick.under, vert] \\<circ> basic [vert, cap] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using rotate_toppos_kauff_mat"], ["proof (prove)\nusing this:\n  kauff_mat (basic [vert, over] \\<circ> basic [cap, vert]) =\n  kauff_mat (basic [brick.under, vert] \\<circ> basic [vert, cap])\n\ngoal (1 subgoal):\n 1. w1 = basic [vert, over] \\<circ> basic [cap, vert] \\<and>\n    w2 =\n    basic [brick.under, vert] \\<circ> basic [vert, cap] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma rotate_topneg_kauff_mat:\"kauff_mat ((basic [vert,under])\\<circ>(basic [cap, vert])) \n                      =  kauff_mat ((basic [over,vert])\\<circ>(basic [vert,cap]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (basic [vert, brick.under] \\<circ> basic [cap, vert]) =\n    kauff_mat (basic [over, vert] \\<circ> basic [vert, cap])", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       [])))))))))\n     [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#)\n         [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n               (map2 (#)\n                 [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                  A, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                     (replicate\n                       (rat_poly.row_length\n                         [[B, 0, 0, 0, 0, 0, 0, 0],\n                          [0, B - rat_poly_times (rat_poly_times A A) A, A,\n                           0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, B, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0,\n                           B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                          [0, 0, 0, 0, 0, A, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, B]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0, 0, 0, 0, 0]\n       (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n             (map2 (#)\n               [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                0]\n               (map2 (#)\n                 [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B,\n                  0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                     (replicate\n                       (rat_poly.row_length\n                         [[A, 0, 0, 0, 0, 0, 0, 0],\n                          [0, A, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 0, 0, B, 0, 0, 0],\n                          [0, 0, 0, 0, 0, B, 0, 0],\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0],\n                          [0, 0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                          [0, 0, 0, 0, 0, 0, A, 0],\n                          [0, 0, 0, 0, 0, 0, 0, A]])\n                       [])))))))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 2. scalar_prod\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 3. scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 4. scalar_prod [0, 0, 0, B, 0, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, B, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 5. scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod\n     [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 6. scalar_prod\n     [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod\n     [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 7. scalar_prod [0, 0, 0, 0, 0, A, 0, 0]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, 0, A, 0]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 8. scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n     [0, 0, rat_poly_inv A, 0, B, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n     [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]\n 9. scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n     [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n    scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n     [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]\n 10. scalar_prod\n      [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n      [0, 0, 0, rat_poly_inv A, 0, B, 0, 0] =\n     scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n      [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]\nA total of 16 subgoals...", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B =\n    rat_poly_inv\n     (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)", "apply(simp add:computation_toppos)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rotate_topneg_inv:\"rotate_topneg w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rotate_topneg w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding rotate_topneg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = basic [vert, brick.under] \\<circ> basic [cap, vert] \\<and>\n    w2 = basic [over, vert] \\<circ> basic [vert, cap] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using rotate_topneg_kauff_mat"], ["proof (prove)\nusing this:\n  kauff_mat (basic [vert, brick.under] \\<circ> basic [cap, vert]) =\n  kauff_mat (basic [over, vert] \\<circ> basic [vert, cap])\n\ngoal (1 subgoal):\n 1. w1 = basic [vert, brick.under] \\<circ> basic [cap, vert] \\<and>\n    w2 = basic [over, vert] \\<circ> basic [vert, cap] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma rotate_downpos_kauff_mat:\n \"kauff_mat ((basic [cup,vert])\\<circ>(basic [vert,over]))= kauff_mat ((basic [vert,cup])\\<circ>(basic [under,vert]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (basic [cup, vert] \\<circ> basic [vert, over]) =\n    kauff_mat (basic [vert, cup] \\<circ> basic [brick.under, vert])", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [A, 0, 0, 0, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [B, 0, 0, 0, 0, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, B, 0, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, B, 0, 0, 0, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, A, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, A, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, A, 0, 0, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, 0, B, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, A, 0, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, 0, B, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, 0, 0, A] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, 0, 0, B]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w. scalar_prod w [A, 0, 0, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [B, 0, 0, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, B, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, B, 0, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n               0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n               0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, A, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n               0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, A, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, A, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, 0, B, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, A, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B,\n               0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, 0, B, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, 0, 0, A]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, 0, 0, B]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [A, 0, 0, 0, 0, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [B, 0, 0, 0, 0, 0, 0, 0]\n 2. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [A, 0, 0, 0, 0, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [B, 0, 0, 0, 0, 0, 0, 0]\n 3. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, 0, B, 0, 0, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, B, 0, 0, 0, 0, 0, 0]\n 4. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [0, 0, B, 0, 0, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [0, B, 0, 0, 0, 0, 0, 0]\n 5. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n 6. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n 7. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, 0, 0, A, 0, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n 8. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [0, 0, 0, A, 0, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n 9. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, 0, 0, 0, A, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, 0, A, 0, 0, 0, 0, 0]\n 10. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n      [0, 0, 0, 0, A, 0, 0, 0] =\n     scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n      [0, 0, A, 0, 0, 0, 0, 0]\nA total of 16 subgoals...", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_times A (A - rat_poly_times (rat_poly_times B B) B) =\n    rat_poly_inv\n     (rat_poly_times B (B - rat_poly_times (rat_poly_times A A) A))", "apply(simp add:computation_downpos)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rotate_downpos_inv:\"rotate_downpos w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rotate_downpos w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding rotate_downpos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = basic [cup, vert] \\<circ> basic [vert, over] \\<and>\n    w2 =\n    basic [vert, cup] \\<circ> basic [brick.under, vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using rotate_downpos_kauff_mat"], ["proof (prove)\nusing this:\n  kauff_mat (basic [cup, vert] \\<circ> basic [vert, over]) =\n  kauff_mat (basic [vert, cup] \\<circ> basic [brick.under, vert])\n\ngoal (1 subgoal):\n 1. w1 = basic [cup, vert] \\<circ> basic [vert, over] \\<and>\n    w2 =\n    basic [vert, cup] \\<circ> basic [brick.under, vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma rotate_downneg_kauff_mat:\n \"kauff_mat ((basic [cup,vert])\\<circ>(basic [vert,under]))= kauff_mat ((basic [vert,cup])\\<circ>(basic [over,vert]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (basic [cup, vert] \\<circ> basic [vert, brick.under]) =\n    kauff_mat (basic [vert, cup] \\<circ> basic [over, vert])", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [B, 0, 0, 0, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [A, 0, 0, 0, 0, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, A, 0, 0, 0, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, A, 0, 0, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, B, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, B, 0, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, B, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, B, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, A, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, 0, A, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, 0, 0, B] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     [0, 0, 0, 0, 0, 0, 0, A]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w. scalar_prod w [B, 0, 0, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [A, 0, 0, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0,\n               0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, A, 0, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, A, 0, 0, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, B, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, B, 0, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, B, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, B, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n               0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A,\n               0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n               0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, A, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, 0, A, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, 0, 0, B]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 0, 0, 0, 0, A]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [B, 0, 0, 0, 0, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [A, 0, 0, 0, 0, 0, 0, 0]\n 2. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [B, 0, 0, 0, 0, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [A, 0, 0, 0, 0, 0, 0, 0]\n 3. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, A, 0, 0, 0, 0, 0, 0]\n 4. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [0, A, 0, 0, 0, 0, 0, 0]\n 5. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, A, 0, 0, 0, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, 0, 0, 0, B, 0, 0, 0]\n 6. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [0, A, 0, 0, 0, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [0, 0, 0, 0, B, 0, 0, 0]\n 7. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, 0, 0, B, 0, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, 0, 0, 0, 0, B, 0, 0]\n 8. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [0, 0, 0, B, 0, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [0, 0, 0, 0, 0, B, 0, 0]\n 9. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [0, 0, 0, 0, B, 0, 0, 0] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n 10. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n      [0, 0, 0, 0, B, 0, 0, 0] =\n     scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n      [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\nA total of 16 subgoals...", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_inv\n     (rat_poly_times B (B - rat_poly_times (rat_poly_times A A) A)) =\n    rat_poly_times A (A - rat_poly_times (rat_poly_times B B) B)", "apply(simp add:computation_downpos)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rotate_downneg_inv:\"rotate_downneg w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rotate_downneg w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding rotate_downneg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = basic [cup, vert] \\<circ> basic [vert, brick.under] \\<and>\n    w2 = basic [vert, cup] \\<circ> basic [over, vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using rotate_downneg_kauff_mat"], ["proof (prove)\nusing this:\n  kauff_mat (basic [cup, vert] \\<circ> basic [vert, brick.under]) =\n  kauff_mat (basic [vert, cup] \\<circ> basic [over, vert])\n\ngoal (1 subgoal):\n 1. w1 = basic [cup, vert] \\<circ> basic [vert, brick.under] \\<and>\n    w2 = basic [vert, cup] \\<circ> basic [over, vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "(*the matrix is an invariant under rotation *)"], ["", "theorem rotate_inv:\"rotate w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tangle_Moves.rotate w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding rotate_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rotate_toppos w1 w2 \\<or>\n    rotate_topneg w1 w2 \\<or>\n    rotate_downpos w1 w2 \\<or> rotate_downneg w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using rotate_downneg_inv rotate_downpos_inv rotate_topneg_inv   \n           rotate_toppos_inv"], ["proof (prove)\nusing this:\n  rotate_downneg ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  rotate_downpos ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  rotate_topneg ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  rotate_toppos ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n\ngoal (1 subgoal):\n 1. rotate_toppos w1 w2 \\<or>\n    rotate_topneg w1 w2 \\<or>\n    rotate_downpos w1 w2 \\<or> rotate_downneg w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "(*framed_uncross begins*)"], ["", "lemma positive_flip_kauff_mat:\n \"kauff_mat (left_over) = kauff_mat (right_over)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat left_over = kauff_mat right_over", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0,\n              0]\n             (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                   (map2 (#)\n                     [0, 0, 0, 0, 0, B,\n                      A - rat_poly_times (rat_poly_times B B) B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, B, 0, 0, 0, 0, 0],\n                            [0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, A, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, B,\n                             A - rat_poly_times (rat_poly_times B B) B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [A, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n           (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n             (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n               (map2 (#)\n                 [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0,\n                  0, 0]\n                 (map2 (#)\n                   [0, 0, 0, B, 0,\n                    A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                       (replicate\n                         (rat_poly.row_length\n                           [[A, 0, 0, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0, B, 0, 0],\n                            [0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0, 0],\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0],\n                            [0, 0, 0, 0, 0, 0, A, 0],\n                            [0, 0, 0, 0, 0, 0, 0, A]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0])", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, 0, B, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0,\n                       0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, A, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                            (map2 (#)\n                              [0, 0, 0, 0, 0, B,\n                               A - rat_poly_times (rat_poly_times B B) B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, B, 0, 0, 0, 0, 0],\n                                     [0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, A, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, B,\nA - rat_poly_times (rat_poly_times B B) B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [A, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                    (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, 0, 0, B, 0, 0]\n                        (map2 (#)\n                          [0, 0, B, 0,\n                           A - rat_poly_times (rat_poly_times B B) B, 0, 0,\n                           0]\n                          (map2 (#)\n                            [0, 0, 0, B, 0,\n                             A - rat_poly_times (rat_poly_times B B) B, 0,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, A, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, A]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[A, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, B, 0, 0],\n                                     [0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0, 0],\n                                     [0, 0, 0, B, 0,\nA - rat_poly_times (rat_poly_times B B) B, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, A, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, A]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]]\n 2. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]]\n 3. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]]\n 4. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, B, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod\n       [0, B, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, A, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [scalar_prod [A, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, B, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod\n       [0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod\n       [0, 0, 0, B, 0, A - rat_poly_times (rat_poly_times B B) B, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, A, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, A]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]]", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rat_poly_inv\n     (rat_poly_times A\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)) -\n    rat_poly_times B (rat_poly_times A B) =\n    rat_poly_inv (rat_poly_times A (rat_poly_times A A))\n 2. rat_poly_inv (rat_poly_times A (rat_poly_times A A)) =\n    rat_poly_inv\n     (rat_poly_times A\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)) -\n    rat_poly_times B (rat_poly_times A B)", "using computatition_positive_flip"], ["proof (prove)\nusing this:\n  rat_poly_plus\n   (rat_poly_inv\n     (rat_poly_times A\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)))\n   (rat_poly_inv (rat_poly_times B (rat_poly_times A B))) =\n  rat_poly_inv (rat_poly_times A (rat_poly_times A A))\n\ngoal (2 subgoals):\n 1. rat_poly_inv\n     (rat_poly_times A\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)) -\n    rat_poly_times B (rat_poly_times A B) =\n    rat_poly_inv (rat_poly_times A (rat_poly_times A A))\n 2. rat_poly_inv (rat_poly_times A (rat_poly_times A A)) =\n    rat_poly_inv\n     (rat_poly_times A\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)) -\n    rat_poly_times B (rat_poly_times A B)", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_inv (rat_poly_times A (rat_poly_times A A)) =\n    rat_poly_inv\n     (rat_poly_times A\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)) -\n    rat_poly_times B (rat_poly_times A B)", "using computatition_positive_flip"], ["proof (prove)\nusing this:\n  rat_poly_plus\n   (rat_poly_inv\n     (rat_poly_times A\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)))\n   (rat_poly_inv (rat_poly_times B (rat_poly_times A B))) =\n  rat_poly_inv (rat_poly_times A (rat_poly_times A A))\n\ngoal (1 subgoal):\n 1. rat_poly_inv (rat_poly_times A (rat_poly_times A A)) =\n    rat_poly_inv\n     (rat_poly_times A\n       (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A)) -\n    rat_poly_times B (rat_poly_times A B)", "by auto"], ["", "lemma uncross_positive_flip_inv: \"uncross_positive_flip w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncross_positive_flip w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "unfolding uncross_positive_flip_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = right_over \\<and> w2 = left_over \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using  positive_flip_kauff_mat"], ["proof (prove)\nusing this:\n  kauff_mat left_over = kauff_mat right_over\n\ngoal (1 subgoal):\n 1. w1 = right_over \\<and> w2 = left_over \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma negative_flip_kauff_mat: \"kauff_mat (left_under) = kauff_mat (right_under)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat left_under = kauff_mat right_under", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]) \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#)\n           [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n           (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n             (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n               (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                 (map2 (#)\n                   [0, 0, 0, 0, 0,\n                    B - rat_poly_times (rat_poly_times A A) A, A, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B - rat_poly_times (rat_poly_times A A) A,\n                             A, 0, 0, 0, 0, 0],\n                            [0, A, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, B, 0, 0, 0, 0],\n                            [0, 0, 0, 0, B, 0, 0, 0],\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0],\n                            [0, 0, 0, 0, 0, A, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]) =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))\n     (matT_vec_multI 0 rat_poly_plus rat_poly_times\n       (map2 (#) [B, 0, 0, 0, 0, 0, 0, 0]\n         (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n           (map2 (#)\n             [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0,\n              0]\n             (map2 (#)\n               [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0,\n                0]\n               (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                 (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                   (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                     (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                       (replicate\n                         (rat_poly.row_length\n                           [[B, 0, 0, 0, 0, 0, 0, 0],\n                            [0, B, 0, 0, 0, 0, 0, 0],\n                            [0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0, 0],\n                            [0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, 0,\n                             A, 0, 0],\n                            [0, 0, A, 0, 0, 0, 0, 0],\n                            [0, 0, 0, A, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, B, 0],\n                            [0, 0, 0, 0, 0, 0, 0, B]])\n                         [])))))))))\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0])", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       []))))))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#)\n                    [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0,\n                     0, 0, 0]\n                    (map2 (#) [0, A, 0, 0, 0, 0, 0, 0]\n                      (map2 (#) [0, 0, 0, B, 0, 0, 0, 0]\n                        (map2 (#) [0, 0, 0, 0, B, 0, 0, 0]\n                          (map2 (#)\n                            [0, 0, 0, 0, 0,\n                             B - rat_poly_times (rat_poly_times A A) A, A,\n                             0]\n                            (map2 (#) [0, 0, 0, 0, 0, A, 0, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0],\n                                     [0, A, 0, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, B, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, B, 0, 0, 0],\n                                     [0, 0, 0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, A, 0],\n                                     [0, 0, 0, 0, 0, A, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [0, 0]\n         (map2 (#) [A, 0]\n           (map2 (#) [0, A]\n             (map2 (#) [rat_poly_inv B, 0]\n               (map2 (#) [0, rat_poly_inv B]\n                 (map2 (#) [0, 0]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [0, 0], [A, 0], [0, A],\n                          [rat_poly_inv B, 0], [0, rat_poly_inv B], [0, 0],\n                          [0, 0]])\n                       []))))))))) =\n    map ((\\<lambda>w.\n             scalar_prod w\n              (map ((\\<lambda>w.\n                        scalar_prod w\n                         [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]) \\<circ>\n                    (\\<lambda>(x, y). x # y))\n                (zip [B, 0, 0, 0, 0, 0, 0, 0]\n                  (map2 (#) [0, B, 0, 0, 0, 0, 0, 0]\n                    (map2 (#)\n                      [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0,\n                       A, 0, 0, 0]\n                      (map2 (#)\n                        [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A,\n                         0, A, 0, 0]\n                        (map2 (#) [0, 0, A, 0, 0, 0, 0, 0]\n                          (map2 (#) [0, 0, 0, A, 0, 0, 0, 0]\n                            (map2 (#) [0, 0, 0, 0, 0, 0, B, 0]\n                              (map2 (#) [0, 0, 0, 0, 0, 0, 0, B]\n                                (replicate\n                                  (rat_poly.row_length\n                                    [[B, 0, 0, 0, 0, 0, 0, 0],\n                                     [0, B, 0, 0, 0, 0, 0, 0],\n                                     [0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0],\n                                     [0, 0, 0,\nB - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0],\n                                     [0, 0, A, 0, 0, 0, 0, 0],\n                                     [0, 0, 0, A, 0, 0, 0, 0],\n                                     [0, 0, 0, 0, 0, 0, B, 0],\n                                     [0, 0, 0, 0, 0, 0, 0, B]])\n                                  []))))))))))) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [0, 0]\n       (map2 (#) [A, 0]\n         (map2 (#) [rat_poly_inv B, 0]\n           (map2 (#) [0, 0]\n             (map2 (#) [0, 0]\n               (map2 (#) [0, A]\n                 (map2 (#) [0, rat_poly_inv B]\n                   (map2 (#) [0, 0]\n                     (replicate\n                       (rat_poly.row_length\n                         [[0, 0], [A, 0], [rat_poly_inv B, 0], [0, 0],\n                          [0, 0], [0, A], [0, rat_poly_inv B], [0, 0]])\n                       [])))))))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]]\n 2. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, 0, rat_poly_inv A, 0, B, 0, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, rat_poly_inv A, B, 0, 0, 0, 0, 0]]\n 3. scalar_prod [0, 0, A, 0, rat_poly_inv B, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]] =\n    scalar_prod [0, A, rat_poly_inv B, 0, 0, 0, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]]\n 4. scalar_prod [0, 0, 0, A, 0, rat_poly_inv B, 0, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod\n       [0, B - rat_poly_times (rat_poly_times A A) A, A, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, A, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, B, 0, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, B, 0, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod\n       [0, 0, 0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, A, 0, 0]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, 0, 0, rat_poly_inv A, 0, B, 0, 0]] =\n    scalar_prod [0, 0, 0, 0, 0, A, rat_poly_inv B, 0]\n     [scalar_prod [B, 0, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, B, 0, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod\n       [0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod\n       [0, 0, 0, B - rat_poly_times (rat_poly_times A A) A, 0, A, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, A, 0, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, A, 0, 0, 0, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, B, 0]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0],\n      scalar_prod [0, 0, 0, 0, 0, 0, 0, B]\n       [0, 0, 0, 0, 0, rat_poly_inv A, B, 0]]", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (2 subgoals):\n 1. rat_poly_inv (rat_poly_times B (rat_poly_times B B)) =\n    rat_poly_inv (rat_poly_times A (rat_poly_times B A)) -\n    rat_poly_times B\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B)\n 2. rat_poly_inv (rat_poly_times A (rat_poly_times B A)) -\n    rat_poly_times B\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B) =\n    rat_poly_inv (rat_poly_times B (rat_poly_times B B))", "using computation_negative_flip"], ["proof (prove)\nusing this:\n  rat_poly_plus\n   (rat_poly_inv\n     (rat_poly_times B\n       (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B)))\n   (rat_poly_inv (rat_poly_times A (rat_poly_times B A))) =\n  rat_poly_inv (rat_poly_times B (rat_poly_times B B))\n\ngoal (2 subgoals):\n 1. rat_poly_inv (rat_poly_times B (rat_poly_times B B)) =\n    rat_poly_inv (rat_poly_times A (rat_poly_times B A)) -\n    rat_poly_times B\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B)\n 2. rat_poly_inv (rat_poly_times A (rat_poly_times B A)) -\n    rat_poly_times B\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B) =\n    rat_poly_inv (rat_poly_times B (rat_poly_times B B))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma uncross_negative_flip_inv: \"uncross_negative_flip w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncross_negative_flip w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "unfolding uncross_negative_flip_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = right_under \\<and> w2 = left_under \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using  negative_flip_kauff_mat"], ["proof (prove)\nusing this:\n  kauff_mat left_under = kauff_mat right_under\n\ngoal (1 subgoal):\n 1. w1 = right_under \\<and> w2 = left_under \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "theorem framed_uncross_inv:\"(framed_uncross w1 w2) \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. framed_uncross w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding framed_uncross_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. uncross_positive_flip w1 w2 \\<or>\n    uncross_negative_flip w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using uncross_negative_flip_inv uncross_positive_flip_inv"], ["proof (prove)\nusing this:\n  uncross_negative_flip ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  uncross_positive_flip ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n\ngoal (1 subgoal):\n 1. uncross_positive_flip w1 w2 \\<or>\n    uncross_negative_flip w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "(*pull begins here*)"], ["", "lemma  pos_neg_kauff_mat:\n\"kauff_mat ((basic [over]) \\<circ> (basic [under])) \n                    = kauff_mat ((basic [vert,vert]) \\<circ> (basic [vert,vert])) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (basic [over] \\<circ> basic [brick.under]) =\n    kauff_mat (basic [vert, vert] \\<circ> basic [vert, vert])", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0]\n         (map2 (#) [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n           (map2 (#) [0, 0, 0, A]\n             (replicate\n               (rat_poly.row_length\n                 [[A, 0, 0, 0], [0, 0, B, 0],\n                  [0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n                  [0, 0, 0, A]])\n               [])))))\n     [B, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))\n     [1, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0]\n         (map2 (#) [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n           (map2 (#) [0, 0, 0, A]\n             (replicate\n               (rat_poly.row_length\n                 [[A, 0, 0, 0], [0, 0, B, 0],\n                  [0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n                  [0, 0, 0, A]])\n               [])))))\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))\n     [0, 1, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0]\n         (map2 (#) [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n           (map2 (#) [0, 0, 0, A]\n             (replicate\n               (rat_poly.row_length\n                 [[A, 0, 0, 0], [0, 0, B, 0],\n                  [0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n                  [0, 0, 0, A]])\n               [])))))\n     [0, A, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))\n     [0, 0, 1, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [A, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0]\n         (map2 (#) [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n           (map2 (#) [0, 0, 0, A]\n             (replicate\n               (rat_poly.row_length\n                 [[A, 0, 0, 0], [0, 0, B, 0],\n                  [0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n                  [0, 0, 0, A]])\n               [])))))\n     [0, 0, 0, B] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))\n     [0, 0, 0, 1]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w. scalar_prod w [B, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0]\n         (map2 (#) [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n           (map2 (#) [0, 0, 0, A]\n             (replicate\n               (rat_poly.row_length\n                 [[A, 0, 0, 0], [0, 0, B, 0],\n                  [0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n                  [0, 0, 0, A]])\n               []))))) =\n    map ((\\<lambda>w. scalar_prod w [1, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               []))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0]\n         (map2 (#) [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n           (map2 (#) [0, 0, 0, A]\n             (replicate\n               (rat_poly.row_length\n                 [[A, 0, 0, 0], [0, 0, B, 0],\n                  [0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n                  [0, 0, 0, A]])\n               []))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 1, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               []))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, A, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0]\n         (map2 (#) [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n           (map2 (#) [0, 0, 0, A]\n             (replicate\n               (rat_poly.row_length\n                 [[A, 0, 0, 0], [0, 0, B, 0],\n                  [0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n                  [0, 0, 0, A]])\n               []))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 1, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               []))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, B]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [A, 0, 0, 0]\n       (map2 (#) [0, 0, B, 0]\n         (map2 (#) [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n           (map2 (#) [0, 0, 0, A]\n             (replicate\n               (rat_poly.row_length\n                 [[A, 0, 0, 0], [0, 0, B, 0],\n                  [0, B, A - rat_poly_times (rat_poly_times B B) B, 0],\n                  [0, 0, 0, A]])\n               []))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 1]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. scalar_prod [A, 0, 0, 0] [B, 0, 0, 0] =\n    scalar_prod [1, 0, 0, 0] [1, 0, 0, 0]\n 2. scalar_prod [0, 0, B, 0] [B, 0, 0, 0] =\n    scalar_prod [0, 1, 0, 0] [1, 0, 0, 0]\n 3. scalar_prod [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n     [B, 0, 0, 0] =\n    scalar_prod [0, 0, 1, 0] [1, 0, 0, 0]\n 4. scalar_prod [0, 0, 0, A] [B, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 1] [1, 0, 0, 0]\n 5. scalar_prod [A, 0, 0, 0]\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0] =\n    scalar_prod [1, 0, 0, 0] [0, 1, 0, 0]\n 6. scalar_prod [0, 0, B, 0]\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0] =\n    scalar_prod [0, 1, 0, 0] [0, 1, 0, 0]\n 7. scalar_prod [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0] =\n    scalar_prod [0, 0, 1, 0] [0, 1, 0, 0]\n 8. scalar_prod [0, 0, 0, A]\n     [0, B - rat_poly_times (rat_poly_times A A) A, A, 0] =\n    scalar_prod [0, 0, 0, 1] [0, 1, 0, 0]\n 9. scalar_prod [A, 0, 0, 0] [0, A, 0, 0] =\n    scalar_prod [1, 0, 0, 0] [0, 0, 1, 0]\n 10. scalar_prod [0, 0, B, 0] [0, A, 0, 0] =\n     scalar_prod [0, 1, 0, 0] [0, 0, 1, 0]\nA total of 16 subgoals...", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (5 subgoals):\n 1. rat_poly_times A B = 1\n 2. rat_poly_times B A = 1\n 3. rat_poly_plus\n     (rat_poly_times B (B - rat_poly_times (rat_poly_times A A) A))\n     (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A) =\n    0\n 4. rat_poly_times B A = 1\n 5. rat_poly_times A B = 1", "apply(auto simp add:inverse1 inverse2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_plus\n     (rat_poly_times B (B - rat_poly_times (rat_poly_times A A) A))\n     (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A) =\n    0", "apply(auto simp add:computation_pull_pos_neg)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pull_posneg_inv: \"pull_posneg w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pull_posneg w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding pull_posneg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = basic [over] \\<circ> basic [brick.under] \\<and>\n    w2 = basic [vert, vert] \\<circ> basic [vert, vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using  pos_neg_kauff_mat"], ["proof (prove)\nusing this:\n  kauff_mat (basic [over] \\<circ> basic [brick.under]) =\n  kauff_mat (basic [vert, vert] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. w1 = basic [over] \\<circ> basic [brick.under] \\<and>\n    w2 = basic [vert, vert] \\<circ> basic [vert, vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "lemma  neg_pos_kauff_mat:\"kauff_mat ((basic [under]) \\<circ> (basic [over])) \n   = kauff_mat ((basic [vert,vert]) \\<circ> (basic [vert,vert])) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat (basic [brick.under] \\<circ> basic [over]) =\n    kauff_mat (basic [vert, vert] \\<circ> basic [vert, vert])", "apply(simp add:mat_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0]\n       (map2 (#) [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n         (map2 (#) [0, A, 0, 0]\n           (map2 (#) [0, 0, 0, B]\n             (replicate\n               (rat_poly.row_length\n                 [[B, 0, 0, 0],\n                  [0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                  [0, A, 0, 0], [0, 0, 0, B]])\n               [])))))\n     [A, 0, 0, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))\n     [1, 0, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0]\n       (map2 (#) [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n         (map2 (#) [0, A, 0, 0]\n           (map2 (#) [0, 0, 0, B]\n             (replicate\n               (rat_poly.row_length\n                 [[B, 0, 0, 0],\n                  [0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                  [0, A, 0, 0], [0, 0, 0, B]])\n               [])))))\n     [0, 0, B, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))\n     [0, 1, 0, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0]\n       (map2 (#) [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n         (map2 (#) [0, A, 0, 0]\n           (map2 (#) [0, 0, 0, B]\n             (replicate\n               (rat_poly.row_length\n                 [[B, 0, 0, 0],\n                  [0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                  [0, A, 0, 0], [0, 0, 0, B]])\n               [])))))\n     [0, B, A - rat_poly_times (rat_poly_times B B) B, 0] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))\n     [0, 0, 1, 0] \\<and>\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [B, 0, 0, 0]\n       (map2 (#) [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n         (map2 (#) [0, A, 0, 0]\n           (map2 (#) [0, 0, 0, B]\n             (replicate\n               (rat_poly.row_length\n                 [[B, 0, 0, 0],\n                  [0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                  [0, A, 0, 0], [0, 0, 0, B]])\n               [])))))\n     [0, 0, 0, A] =\n    matT_vec_multI 0 rat_poly_plus rat_poly_times\n     (map2 (#) [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))\n     [0, 0, 0, 1]", "apply(simp add:matT_vec_multI_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>w. scalar_prod w [A, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0]\n       (map2 (#) [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n         (map2 (#) [0, A, 0, 0]\n           (map2 (#) [0, 0, 0, B]\n             (replicate\n               (rat_poly.row_length\n                 [[B, 0, 0, 0],\n                  [0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                  [0, A, 0, 0], [0, 0, 0, B]])\n               []))))) =\n    map ((\\<lambda>w. scalar_prod w [1, 0, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               []))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, B, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0]\n       (map2 (#) [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n         (map2 (#) [0, A, 0, 0]\n           (map2 (#) [0, 0, 0, B]\n             (replicate\n               (rat_poly.row_length\n                 [[B, 0, 0, 0],\n                  [0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                  [0, A, 0, 0], [0, 0, 0, B]])\n               []))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 1, 0, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               []))))) \\<and>\n    map ((\\<lambda>w.\n             scalar_prod w\n              [0, B, A - rat_poly_times (rat_poly_times B B) B, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0]\n       (map2 (#) [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n         (map2 (#) [0, A, 0, 0]\n           (map2 (#) [0, 0, 0, B]\n             (replicate\n               (rat_poly.row_length\n                 [[B, 0, 0, 0],\n                  [0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                  [0, A, 0, 0], [0, 0, 0, B]])\n               []))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 1, 0]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               []))))) \\<and>\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, A]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [B, 0, 0, 0]\n       (map2 (#) [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n         (map2 (#) [0, A, 0, 0]\n           (map2 (#) [0, 0, 0, B]\n             (replicate\n               (rat_poly.row_length\n                 [[B, 0, 0, 0],\n                  [0, B - rat_poly_times (rat_poly_times A A) A, A, 0],\n                  [0, A, 0, 0], [0, 0, 0, B]])\n               []))))) =\n    map ((\\<lambda>w. scalar_prod w [0, 0, 0, 1]) \\<circ>\n         (\\<lambda>(x, y). x # y))\n     (zip [1, 0, 0, 0]\n       (map2 (#) [0, 1, 0, 0]\n         (map2 (#) [0, 0, 1, 0]\n           (map2 (#) [0, 0, 0, 1]\n             (replicate\n               (rat_poly.row_length\n                 [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n               [])))))", "apply(auto simp add:replicate_def rat_poly.row_length_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. scalar_prod [B, 0, 0, 0] [A, 0, 0, 0] =\n    scalar_prod [1, 0, 0, 0] [1, 0, 0, 0]\n 2. scalar_prod [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n     [A, 0, 0, 0] =\n    scalar_prod [0, 1, 0, 0] [1, 0, 0, 0]\n 3. scalar_prod [0, A, 0, 0] [A, 0, 0, 0] =\n    scalar_prod [0, 0, 1, 0] [1, 0, 0, 0]\n 4. scalar_prod [0, 0, 0, B] [A, 0, 0, 0] =\n    scalar_prod [0, 0, 0, 1] [1, 0, 0, 0]\n 5. scalar_prod [B, 0, 0, 0] [0, 0, B, 0] =\n    scalar_prod [1, 0, 0, 0] [0, 1, 0, 0]\n 6. scalar_prod [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n     [0, 0, B, 0] =\n    scalar_prod [0, 1, 0, 0] [0, 1, 0, 0]\n 7. scalar_prod [0, A, 0, 0] [0, 0, B, 0] =\n    scalar_prod [0, 0, 1, 0] [0, 1, 0, 0]\n 8. scalar_prod [0, 0, 0, B] [0, 0, B, 0] =\n    scalar_prod [0, 0, 0, 1] [0, 1, 0, 0]\n 9. scalar_prod [B, 0, 0, 0]\n     [0, B, A - rat_poly_times (rat_poly_times B B) B, 0] =\n    scalar_prod [1, 0, 0, 0] [0, 0, 1, 0]\n 10. scalar_prod [0, B - rat_poly_times (rat_poly_times A A) A, A, 0]\n      [0, B, A - rat_poly_times (rat_poly_times B B) B, 0] =\n     scalar_prod [0, 1, 0, 0] [0, 0, 1, 0]\nA total of 16 subgoals...", "apply(auto simp add:scalar_prod)"], ["proof (prove)\ngoal (5 subgoals):\n 1. rat_poly_times B A = 1\n 2. rat_poly_times A B = 1\n 3. rat_poly_plus\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B)\n     (rat_poly_times A (A - rat_poly_times (rat_poly_times B B) B)) =\n    0\n 4. rat_poly_times A B = 1\n 5. rat_poly_times B A = 1", "apply(auto simp add:inverse1 inverse2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly_plus\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B)\n     (rat_poly_times A (A - rat_poly_times (rat_poly_times B B) B)) =\n    0", "using computation_pull_pos_neg"], ["proof (prove)\nusing this:\n  rat_poly_plus\n   (rat_poly_times B (B - rat_poly_times (rat_poly_times A A) A))\n   (rat_poly_times (A - rat_poly_times (rat_poly_times B B) B) A) =\n  0\n\ngoal (1 subgoal):\n 1. rat_poly_plus\n     (rat_poly_times (B - rat_poly_times (rat_poly_times A A) A) B)\n     (rat_poly_times A (A - rat_poly_times (rat_poly_times B B) B)) =\n    0", "by (simp add: computation_downpos)"], ["", "lemma pull_negpos_inv:\"pull_negpos w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pull_negpos w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding pull_negpos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 = basic [brick.under] \\<circ> basic [over] \\<and>\n    w2 = basic [vert, vert] \\<circ> basic [vert, vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using neg_pos_kauff_mat"], ["proof (prove)\nusing this:\n  kauff_mat (basic [brick.under] \\<circ> basic [over]) =\n  kauff_mat (basic [vert, vert] \\<circ> basic [vert, vert])\n\ngoal (1 subgoal):\n 1. w1 = basic [brick.under] \\<circ> basic [over] \\<and>\n    w2 = basic [vert, vert] \\<circ> basic [vert, vert] \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "theorem pull_inv:\"pull w1 w2 \\<Longrightarrow> (kauff_mat w1) = (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pull w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding pull_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pull_posneg w1 w2 \\<or> pull_negpos w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "using pull_posneg_inv pull_negpos_inv"], ["proof (prove)\nusing this:\n  pull_posneg ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  pull_negpos ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n\ngoal (1 subgoal):\n 1. pull_posneg w1 w2 \\<or> pull_negpos w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "by auto"], ["", "theorem slide_inv:\"slide w1 w2 \\<Longrightarrow> (kauff_mat w1 = kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "assume assm:\"slide w1 w2\""], ["proof (state)\nthis:\n  slide w1 w2\n\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "have \" \\<exists>B.((w1 = ((basic (make_vert_block (nat (domain_block B))))\\<circ>(basic B)))\n               \\<and>(w2 = ((basic B)\\<circ>(basic (make_vert_block (nat (codomain_block B))))))\n               \\<and> ((domain_block B) \\<noteq> 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B.\n       w1 =\n       basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n       w2 =\n       basic B \\<circ>\n       basic (make_vert_block (nat (codomain_block B))) \\<and>\n       domain_block B \\<noteq> 0", "using slide_def assm"], ["proof (prove)\nusing this:\n  slide ?x ?y \\<equiv>\n  \\<exists>B.\n     ?x =\n     basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n     ?y =\n     basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n     domain_block B \\<noteq> 0\n  slide w1 w2\n\ngoal (1 subgoal):\n 1. \\<exists>B.\n       w1 =\n       basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n       w2 =\n       basic B \\<circ>\n       basic (make_vert_block (nat (codomain_block B))) \\<and>\n       domain_block B \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  \\<exists>B.\n     w1 =\n     basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n     w2 =\n     basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n     domain_block B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  \\<exists>B.\n     w1 =\n     basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n     w2 =\n     basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n     domain_block B \\<noteq> 0", "obtain B where  \"((w1 = ((basic (make_vert_block (nat (domain_block B))))\\<circ>(basic B)))\n               \\<and>(w2 = ((basic B)\\<circ>(basic (make_vert_block (nat (codomain_block B))))))\n               \\<and> ((domain_block B) \\<noteq> 0))\""], ["proof (prove)\nusing this:\n  \\<exists>B.\n     w1 =\n     basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n     w2 =\n     basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n     domain_block B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        w1 =\n        basic (make_vert_block (nat (domain_block B))) \\<circ>\n        basic B \\<and>\n        w2 =\n        basic B \\<circ>\n        basic (make_vert_block (nat (codomain_block B))) \\<and>\n        domain_block B \\<noteq> 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w1 = basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n  domain_block B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "then"], ["proof (chain)\npicking this:\n  w1 = basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n  domain_block B \\<noteq> 0", "have 1:\"((w1 = ((basic (make_vert_block (nat (domain_block B))))\\<circ>(basic B)))\n               \\<and>(w2 = ((basic B)\\<circ>(basic (make_vert_block (nat (codomain_block B))))))\n               \\<and> ((domain_block B) \\<noteq> 0))\""], ["proof (prove)\nusing this:\n  w1 = basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n  domain_block B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. w1 =\n    basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n    w2 =\n    basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n    domain_block B \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  w1 = basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n  domain_block B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "have \"kauff_mat w1 = kauff_mat (basic B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "have s1:\"mat (2^(nat (domain_block B))) (length (blockmat B)) (blockmat B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (2 ^ nat (domain_block B)) (length (blockmat B)) (blockmat B)", "by (metis matrix_blockmat row_length_domain_block)"], ["proof (state)\nthis:\n  mat (2 ^ nat (domain_block B)) (length (blockmat B)) (blockmat B)\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "have \"w1 = ((basic (make_vert_block (nat (domain_wall (basic B))))\\<circ>(basic B)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w1 =\n    basic (make_vert_block (nat (domain_wall (basic B)))) \\<circ> basic B", "using 1 domain_wall.simps"], ["proof (prove)\nusing this:\n  w1 = basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n  domain_block B \\<noteq> 0\n  domain_wall (basic ?x) = domain_block ?x\n  domain_wall (?x * ?ys) = domain_block ?x\n\ngoal (1 subgoal):\n 1. w1 =\n    basic (make_vert_block (nat (domain_wall (basic B)))) \\<circ> basic B", "by auto"], ["proof (state)\nthis:\n  w1 = basic (make_vert_block (nat (domain_wall (basic B)))) \\<circ> basic B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "then"], ["proof (chain)\npicking this:\n  w1 = basic (make_vert_block (nat (domain_wall (basic B)))) \\<circ> basic B", "have \"kauff_mat w1 = rat_poly.matrix_mult \n                                     (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n                                      (kauff_mat (basic B))\""], ["proof (prove)\nusing this:\n  w1 = basic (make_vert_block (nat (domain_wall (basic B)))) \\<circ> basic B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    rat_poly.matrix_mult\n     (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n     (kauff_mat (basic B))", "using tangle_compose_matrix is_tangle_diagram.simps"], ["proof (prove)\nusing this:\n  w1 = basic (make_vert_block (nat (domain_wall (basic B)))) \\<circ> basic B\n  is_tangle_diagram ?ws1.0 \\<and>\n  is_tangle_diagram ?ws2.0 \\<and>\n  domain_wall ?ws2.0 = codomain_wall ?ws1.0 \\<Longrightarrow>\n  kauff_mat (?ws1.0 \\<circ> ?ws2.0) =\n  rat_poly.matrix_mult (kauff_mat ?ws1.0) (kauff_mat ?ws2.0)\n  is_tangle_diagram (basic ?x) = True\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. kauff_mat w1 =\n    rat_poly.matrix_mult\n     (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n     (kauff_mat (basic B))", "by (metis compose_Nil kauff_mat.simps(1) kauff_mat.simps(2))"], ["proof (state)\nthis:\n  kauff_mat w1 =\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B))\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "moreover"], ["proof (state)\nthis:\n  kauff_mat w1 =\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B))\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "then"], ["proof (chain)\npicking this:\n  kauff_mat w1 =\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B))", "have \"... =  rat_poly.matrix_mult  (mat1 (2^(nat (domain_block B)))) (blockmat B)\""], ["proof (prove)\nusing this:\n  kauff_mat w1 =\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B))\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult\n     (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n     (kauff_mat (basic B)) =\n    rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B)", "using kauff_mat.simps(1) domain_wall.simps(1)"], ["proof (prove)\nusing this:\n  kauff_mat w1 =\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B))\n  kauff_mat (basic ?w) = blockmat ?w\n  domain_wall (basic ?x) = domain_block ?x\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult\n     (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n     (kauff_mat (basic B)) =\n    rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B)", "by (metis make_vert_block_map_blockmat)"], ["proof (state)\nthis:\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B)) =\n  rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B)\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "moreover"], ["proof (state)\nthis:\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B)) =\n  rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B)\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "have \"... = (blockmat B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B) =\n    blockmat B", "using s1 mat1_mult_left"], ["proof (prove)\nusing this:\n  mat (2 ^ nat (domain_block B)) (length (blockmat B)) (blockmat B)\n  mat ?nr ?nc ?m \\<Longrightarrow> mat_mult ?nr (mat1 ?nr) ?m = ?m\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B) =\n    blockmat B", "by (metis make_vert_equiv_mat prop_make_vert_equiv(1))"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B) =\n  blockmat B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "ultimately"], ["proof (chain)\npicking this:\n  kauff_mat w1 =\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B))\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B)) =\n  rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B)\n  rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B) =\n  blockmat B", "show ?thesis"], ["proof (prove)\nusing this:\n  kauff_mat w1 =\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B))\n  rat_poly.matrix_mult\n   (kauff_mat (basic (make_vert_block (nat (domain_wall (basic B))))))\n   (kauff_mat (basic B)) =\n  rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B)\n  rat_poly.matrix_mult (mat1 (2 ^ nat (domain_block B))) (blockmat B) =\n  blockmat B\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat (basic B)", "by auto"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat (basic B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat (basic B)\n\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "moreover"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat (basic B)\n\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "have \"kauff_mat w2 = kauff_mat (basic B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "have s1:\"mat (2^(nat (domain_block B))) (2^(nat (codomain_block B))) (blockmat B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (2 ^ nat (domain_block B)) (2 ^ nat (codomain_block B)) (blockmat B)", "by (metis length_codomain_block matrix_blockmat row_length_domain_block)"], ["proof (state)\nthis:\n  mat (2 ^ nat (domain_block B)) (2 ^ nat (codomain_block B)) (blockmat B)\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "have \"w2  = ((basic B) \\<circ>(basic (make_vert_block (nat (codomain_wall (basic B))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w2 =\n    basic B \\<circ> basic (make_vert_block (nat (codomain_wall (basic B))))", "using 1 domain_wall.simps"], ["proof (prove)\nusing this:\n  w1 = basic (make_vert_block (nat (domain_block B))) \\<circ> basic B \\<and>\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_block B))) \\<and>\n  domain_block B \\<noteq> 0\n  domain_wall (basic ?x) = domain_block ?x\n  domain_wall (?x * ?ys) = domain_block ?x\n\ngoal (1 subgoal):\n 1. w2 =\n    basic B \\<circ> basic (make_vert_block (nat (codomain_wall (basic B))))", "by auto"], ["proof (state)\nthis:\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_wall (basic B))))\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "then"], ["proof (chain)\npicking this:\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_wall (basic B))))", "have \"kauff_mat w2 = \n                         rat_poly.matrix_mult \n                            (kauff_mat (basic B)) \n                            (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))\""], ["proof (prove)\nusing this:\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_wall (basic B))))\n\ngoal (1 subgoal):\n 1. kauff_mat w2 =\n    rat_poly.matrix_mult (kauff_mat (basic B))\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))", "using tangle_compose_matrix is_tangle_diagram.simps"], ["proof (prove)\nusing this:\n  w2 =\n  basic B \\<circ> basic (make_vert_block (nat (codomain_wall (basic B))))\n  is_tangle_diagram ?ws1.0 \\<and>\n  is_tangle_diagram ?ws2.0 \\<and>\n  domain_wall ?ws2.0 = codomain_wall ?ws1.0 \\<Longrightarrow>\n  kauff_mat (?ws1.0 \\<circ> ?ws2.0) =\n  rat_poly.matrix_mult (kauff_mat ?ws1.0) (kauff_mat ?ws2.0)\n  is_tangle_diagram (basic ?x) = True\n  is_tangle_diagram (?x * ?xs) =\n  (if is_tangle_diagram ?xs then codomain_block ?x = domain_wall ?xs\n   else False)\n\ngoal (1 subgoal):\n 1. kauff_mat w2 =\n    rat_poly.matrix_mult (kauff_mat (basic B))\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))", "by (metis compose_Nil kauff_mat.simps(1) kauff_mat.simps(2))"], ["proof (state)\nthis:\n  kauff_mat w2 =\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "moreover"], ["proof (state)\nthis:\n  kauff_mat w2 =\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "then"], ["proof (chain)\npicking this:\n  kauff_mat w2 =\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))", "have \"... =  rat_poly.matrix_mult  (blockmat B) (mat1 (2^(nat (codomain_block B)))) \""], ["proof (prove)\nusing this:\n  kauff_mat w2 =\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat (basic B))\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B)))))) =\n    rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B)))", "using kauff_mat.simps(1) domain_wall.simps(1)"], ["proof (prove)\nusing this:\n  kauff_mat w2 =\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))\n  kauff_mat (basic ?w) = blockmat ?w\n  domain_wall (basic ?x) = domain_block ?x\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (kauff_mat (basic B))\n     (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B)))))) =\n    rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B)))", "by (metis blockmat_make_vert codomain_wall.simps(1) make_vert_equiv_mat)"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B)))))) =\n  rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B)))\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "moreover"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B)))))) =\n  rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B)))\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "have \"... = (blockmat B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B))) =\n    blockmat B", "using s1"], ["proof (prove)\nusing this:\n  mat (2 ^ nat (domain_block B)) (2 ^ nat (codomain_block B)) (blockmat B)\n\ngoal (1 subgoal):\n 1. rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B))) =\n    blockmat B", "by (metis mat1_rt_mult)"], ["proof (state)\nthis:\n  rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B))) =\n  blockmat B\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "ultimately"], ["proof (chain)\npicking this:\n  kauff_mat w2 =\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B)))))) =\n  rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B)))\n  rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B))) =\n  blockmat B", "show ?thesis"], ["proof (prove)\nusing this:\n  kauff_mat w2 =\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B))))))\n  rat_poly.matrix_mult (kauff_mat (basic B))\n   (kauff_mat (basic (make_vert_block (nat (codomain_wall (basic B)))))) =\n  rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B)))\n  rat_poly.matrix_mult (blockmat B) (mat1 (2 ^ nat (codomain_block B))) =\n  blockmat B\n\ngoal (1 subgoal):\n 1. kauff_mat w2 = kauff_mat (basic B)", "by auto"], ["proof (state)\nthis:\n  kauff_mat w2 = kauff_mat (basic B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  kauff_mat w2 = kauff_mat (basic B)\n\ngoal (1 subgoal):\n 1. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "ultimately"], ["proof (chain)\npicking this:\n  kauff_mat w1 = kauff_mat (basic B)\n  kauff_mat w2 = kauff_mat (basic B)", "show ?thesis"], ["proof (prove)\nusing this:\n  kauff_mat w1 = kauff_mat (basic B)\n  kauff_mat w2 = kauff_mat (basic B)\n\ngoal (1 subgoal):\n 1. kauff_mat w1 = kauff_mat w2", "by auto"], ["proof (state)\nthis:\n  kauff_mat w1 = kauff_mat w2\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem framed_linkrel_inv:\"framed_linkrel w1 w2 \\<Longrightarrow> (kauff_mat w1)= (kauff_mat w2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. framed_linkrel w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "unfolding framed_linkrel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. framed_uncross w1 w2 \\<or>\n    pull w1 w2 \\<or>\n    straighten w1 w2 \\<or>\n    swing w1 w2 \\<or>\n    Tangle_Moves.rotate w1 w2 \\<or>\n    compress w1 w2 \\<or> slide w1 w2 \\<Longrightarrow>\n    kauff_mat w1 = kauff_mat w2", "apply(auto)"], ["proof (prove)\ngoal (7 subgoals):\n 1. framed_uncross w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 2. pull w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 3. straighten w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 4. swing w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 5. Tangle_Moves.rotate w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 6. compress w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 7. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "using framed_uncross_inv pull_inv straighten_inv  swing_inv rotate_inv compress_inv slide_inv"], ["proof (prove)\nusing this:\n  framed_uncross ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  pull ?w1.0 ?w2.0 \\<Longrightarrow> kauff_mat ?w1.0 = kauff_mat ?w2.0\n  straighten ?w1.0 ?w2.0 \\<Longrightarrow> kauff_mat ?w1.0 = kauff_mat ?w2.0\n  swing ?w1.0 ?w2.0 \\<Longrightarrow> kauff_mat ?w1.0 = kauff_mat ?w2.0\n  Tangle_Moves.rotate ?w1.0 ?w2.0 \\<Longrightarrow>\n  kauff_mat ?w1.0 = kauff_mat ?w2.0\n  compress ?w1.0 ?w2.0 \\<Longrightarrow> kauff_mat ?w1.0 = kauff_mat ?w2.0\n  slide ?w1.0 ?w2.0 \\<Longrightarrow> kauff_mat ?w1.0 = kauff_mat ?w2.0\n\ngoal (7 subgoals):\n 1. framed_uncross w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 2. pull w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 3. straighten w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 4. swing w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 5. Tangle_Moves.rotate w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 6. compress w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2\n 7. slide w1 w2 \\<Longrightarrow> kauff_mat w1 = kauff_mat w2", "by auto"], ["", "end"]]}