{"file_name": "/home/qj213/afp-2021-10-22/thys/LambdaAuth/FMap_Lemmas.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LambdaAuth", "problem_names": ["lemma fmempty_eqvt[eqvt]:\n  shows \"(p \\<bullet> {$$}) = {$$}\"", "lemma fmap_update_eqvt[eqvt]:\n  shows \"(p \\<bullet> f(a $$:= b)) = (p \\<bullet> f)((p \\<bullet> a) $$:= (p \\<bullet> b))\"", "lemma fmap_apply_eqvt[eqvt]:\n  shows \"(p \\<bullet> (f $$ b)) = (p \\<bullet> f) $$ (p \\<bullet> b)\"", "lemma fresh_fmempty[simp]:\n  shows \"a \\<sharp> {$$}\"", "lemma fresh_fmap_update:\n  shows \"\\<lbrakk>a \\<sharp> f; a \\<sharp> x; a \\<sharp> y\\<rbrakk> \\<Longrightarrow> a \\<sharp> f(x $$:= y)\"", "lemma supp_fmempty[simp]:\n  shows \"supp {$$} = {}\"", "lemma supp_fmap_update:\n  shows \"supp (f(x $$:= y)) \\<subseteq> supp(f, x, y)\"", "lemma fresh_transfer[transfer_rule]:\n  \"((=) ===> pcr_fmap (=) (=) ===> (=)) fresh fresh\"", "lemma fmmap_eqvt[eqvt]: \"p \\<bullet> (fmmap f F) = fmmap (p \\<bullet> f) (p \\<bullet> F)\"", "lemma fmap_freshness_lemma:\n  fixes h :: \"('a::at,'b::pt) fmap\"\n  assumes a: \"\\<exists>a. atom a \\<sharp> (h, h $$ a)\"\n  shows  \"\\<exists>x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x\"", "lemma fmap_freshness_lemma_unique:\n  fixes h :: \"('a::at,'b::pt) fmap\"\n  assumes \"\\<exists>a. atom a \\<sharp> (h, h $$ a)\"\n  shows \"\\<exists>!x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x\"", "lemma fmdrop_fset_fmupd[simp]:\n  \"(fmdrop_fset A f)(x $$:= y) = fmdrop_fset (A |-| {|x|}) f(x $$:= y)\"", "lemma fresh_fset_fminus:\n  assumes \"atom x \\<sharp> A\"\n  shows   \"A |-| {|x|} = A\"", "lemma fresh_fun_app:\n  shows \"atom x \\<sharp> F \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> F y = Some a \\<Longrightarrow> atom x \\<sharp> a\"", "lemma fresh_fmap_fresh_Some:\n  \"atom x \\<sharp> F \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> F $$ y = Some a \\<Longrightarrow> atom x \\<sharp> a\"", "lemma fmdrop_eqvt: \"p \\<bullet> fmdrop x F = fmdrop (p \\<bullet> x) (p \\<bullet> F)\"", "lemma fmfilter_eqvt: \"p \\<bullet> fmfilter Q F = fmfilter (p \\<bullet> Q) (p \\<bullet> F)\"", "lemma fmdrop_eq_iff:\n  \"fmdrop x B = fmdrop y B \\<longleftrightarrow> x = y \\<or> (x \\<notin> fmdom' B \\<and> y \\<notin> fmdom' B)\"", "lemma fresh_fun_upd:\n  shows \"\\<lbrakk>a \\<sharp> f; a \\<sharp> x; a \\<sharp> y\\<rbrakk> \\<Longrightarrow> a \\<sharp> f(x := y)\"", "lemma supp_fun_upd:\n  shows \"supp (f(x := y)) \\<subseteq> supp(f, x, y)\"", "lemma map_drop_fun_upd: \"map_drop x F = F(x := None)\"", "lemma fresh_fmdrop_in_fmdom: \"\\<lbrakk> x \\<in> fmdom' B; y \\<sharp> B; y \\<sharp> x \\<rbrakk> \\<Longrightarrow> y \\<sharp> fmdrop x B\"", "lemma fresh_fmdrop:\n  assumes \"x \\<sharp> B\" \"x \\<sharp> y\"\n  shows   \"x \\<sharp> fmdrop y B\"", "lemma fresh_fmdrop_fset:\n  fixes x :: atom and A :: \"(_ :: at_base) fset\"\n  assumes \"x \\<sharp> A\" \"x \\<sharp> B\"\n  shows   \"x \\<sharp> fmdrop_fset A B\""], "translations": [["", "lemma fmempty_eqvt[eqvt]:\n  shows \"(p \\<bullet> {$$}) = {$$}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> {$$} = {$$}", "by transfer simp"], ["", "lemma fmap_update_eqvt[eqvt]:\n  shows \"(p \\<bullet> f(a $$:= b)) = (p \\<bullet> f)((p \\<bullet> a) $$:= (p \\<bullet> b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> f(a $$:= b) =\n    (p \\<bullet> f)(p \\<bullet> a $$:= p \\<bullet> b)", "by transfer (simp add: map_upd_def)"], ["", "lemma fmap_apply_eqvt[eqvt]:\n  shows \"(p \\<bullet> (f $$ b)) = (p \\<bullet> f) $$ (p \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> f $$ b = (p \\<bullet> f) $$ (p \\<bullet> b)", "by transfer simp"], ["", "lemma fresh_fmempty[simp]:\n  shows \"a \\<sharp> {$$}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> {$$}", "unfolding fresh_def supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> {a. infinite\n                    {b. (a \\<rightleftharpoons> b) \\<bullet> {$$} \\<noteq>\n                        {$$}}}", "by transfer simp"], ["", "lemma fresh_fmap_update:\n  shows \"\\<lbrakk>a \\<sharp> f; a \\<sharp> x; a \\<sharp> y\\<rbrakk> \\<Longrightarrow> a \\<sharp> f(x $$:= y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<sharp> f; a \\<sharp> x; a \\<sharp> y\\<rbrakk>\n    \\<Longrightarrow> a \\<sharp> f(x $$:= y)", "unfolding fresh_conv_MOST"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<^sub>\\<infinity>b.\n                (a \\<rightleftharpoons> b) \\<bullet> f = f;\n     \\<forall>\\<^sub>\\<infinity>b.\n        (a \\<rightleftharpoons> b) \\<bullet> x = x;\n     \\<forall>\\<^sub>\\<infinity>b.\n        (a \\<rightleftharpoons> b) \\<bullet> y = y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<^sub>\\<infinity>b.\n                         (a \\<rightleftharpoons> b) \\<bullet> f(x $$:= y) =\n                         f(x $$:= y)", "by (elim MOST_rev_mp) simp"], ["", "lemma supp_fmempty[simp]:\n  shows \"supp {$$} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp {$$} = {}", "by (simp add: supp_def)"], ["", "lemma supp_fmap_update:\n  shows \"supp (f(x $$:= y)) \\<subseteq> supp(f, x, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp f(x $$:= y) \\<subseteq> supp (f, x, y)", "using fresh_fmap_update"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<sharp> ?f; ?a \\<sharp> ?x; ?a \\<sharp> ?y\\<rbrakk>\n  \\<Longrightarrow> ?a \\<sharp> ?f(?x $$:= ?y)\n\ngoal (1 subgoal):\n 1. supp f(x $$:= y) \\<subseteq> supp (f, x, y)", "by (auto simp: fresh_def supp_Pair)"], ["", "instance fmap :: (fs, fs) fs"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) fmap, fs_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "fix x :: \"('a, 'b) fmap\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "show \"finite (supp x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp x)", "by (induct x rule: fmap_induct)\n      (simp_all add: supp_Pair finite_supp finite_subset[OF supp_fmap_update])"], ["proof (state)\nthis:\n  finite (supp x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fresh_transfer[transfer_rule]:\n  \"((=) ===> pcr_fmap (=) (=) ===> (=)) fresh fresh\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=) ===> pcr_fmap (=) (=) ===> (=)) fresh fresh", "unfolding fresh_def supp_def rel_fun_def pcr_fmap_def cr_fmap_def simp_thms\n    option.rel_eq fun_eq_iff[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa y.\n       ((=) OO (\\<lambda>x y. x = ($$) y)) xa y \\<longrightarrow>\n       (x \\<in> {a. infinite\n                     {b. (a \\<rightleftharpoons> b) \\<bullet> xa \\<noteq>\n                         xa}}) =\n       (x \\<in> {a. infinite\n                     {b. (a \\<rightleftharpoons> b) \\<bullet> y \\<noteq>\n                         y}})", "by (auto elim!: finite_subset[rotated] simp: fmap_ext)"], ["", "lemma fmmap_eqvt[eqvt]: \"p \\<bullet> (fmmap f F) = fmmap (p \\<bullet> f) (p \\<bullet> F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> fmmap f F = fmmap (p \\<bullet> f) (p \\<bullet> F)", "by (induct F arbitrary: f rule: fmap_induct) (auto simp add: fmap_update_eqvt fmmap_fmupd)"], ["", "lemma fmap_freshness_lemma:\n  fixes h :: \"('a::at,'b::pt) fmap\"\n  assumes a: \"\\<exists>a. atom a \\<sharp> (h, h $$ a)\"\n  shows  \"\\<exists>x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>a. atom a \\<sharp> (h, h $$ a)\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x", "unfolding fresh_Pair"], ["proof (prove)\nusing this:\n  \\<exists>a. atom a \\<sharp> h \\<and> atom a \\<sharp> h $$ a\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x", "by transfer (simp add: fresh_Pair freshness_lemma)"], ["", "lemma fmap_freshness_lemma_unique:\n  fixes h :: \"('a::at,'b::pt) fmap\"\n  assumes \"\\<exists>a. atom a \\<sharp> (h, h $$ a)\"\n  shows \"\\<exists>!x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>a. atom a \\<sharp> (h, h $$ a)\n\ngoal (1 subgoal):\n 1. \\<exists>!x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x", "unfolding fresh_Pair"], ["proof (prove)\nusing this:\n  \\<exists>a. atom a \\<sharp> h \\<and> atom a \\<sharp> h $$ a\n\ngoal (1 subgoal):\n 1. \\<exists>!x. \\<forall>a. atom a \\<sharp> h \\<longrightarrow> h $$ a = x", "by transfer (rule freshness_lemma_unique, auto simp: fresh_Pair)"], ["", "lemma fmdrop_fset_fmupd[simp]:\n  \"(fmdrop_fset A f)(x $$:= y) = fmdrop_fset (A |-| {|x|}) f(x $$:= y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdrop_fset A f)(x $$:= y) = fmdrop_fset (A |-| {|x|}) f(x $$:= y)", "including fmap.lifting fset.lifting"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdrop_fset A f)(x $$:= y) = fmdrop_fset (A |-| {|x|}) f(x $$:= y)", "by transfer (auto simp: map_drop_set_def map_upd_def map_filter_def)"], ["", "lemma fresh_fset_fminus:\n  assumes \"atom x \\<sharp> A\"\n  shows   \"A |-| {|x|} = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A |-| {|x|} = A", "using assms"], ["proof (prove)\nusing this:\n  atom x \\<sharp> A\n\ngoal (1 subgoal):\n 1. A |-| {|x|} = A", "by (induct A) (simp_all add: finsert_fminus_if fresh_finsert)"], ["", "lemma fresh_fun_app:\n  shows \"atom x \\<sharp> F \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> F y = Some a \\<Longrightarrow> atom x \\<sharp> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom x \\<sharp> F; x \\<noteq> y; F y = Some a\\<rbrakk>\n    \\<Longrightarrow> atom x \\<sharp> a", "using supp_fun_app[of F y]"], ["proof (prove)\nusing this:\n  supp (F y) \\<subseteq> supp F \\<union> supp y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom x \\<sharp> F; x \\<noteq> y; F y = Some a\\<rbrakk>\n    \\<Longrightarrow> atom x \\<sharp> a", "by (auto simp: fresh_def supp_Some atom_not_fresh_eq)"], ["", "lemma fresh_fmap_fresh_Some:\n  \"atom x \\<sharp> F \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> F $$ y = Some a \\<Longrightarrow> atom x \\<sharp> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom x \\<sharp> F; x \\<noteq> y; F $$ y = Some a\\<rbrakk>\n    \\<Longrightarrow> atom x \\<sharp> a", "including fmap.lifting"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom x \\<sharp> F; x \\<noteq> y; F $$ y = Some a\\<rbrakk>\n    \\<Longrightarrow> atom x \\<sharp> a", "by (transfer) (auto elim: fresh_fun_app)"], ["", "lemma fmdrop_eqvt: \"p \\<bullet> fmdrop x F = fmdrop (p \\<bullet> x) (p \\<bullet> F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> fmdrop x F = fmdrop (p \\<bullet> x) (p \\<bullet> F)", "by transfer (auto simp: map_drop_def map_filter_def)"], ["", "lemma fmfilter_eqvt: \"p \\<bullet> fmfilter Q F = fmfilter (p \\<bullet> Q) (p \\<bullet> F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> fmfilter Q F = fmfilter (p \\<bullet> Q) (p \\<bullet> F)", "by transfer (auto simp: map_filter_def)"], ["", "lemma fmdrop_eq_iff:\n  \"fmdrop x B = fmdrop y B \\<longleftrightarrow> x = y \\<or> (x \\<notin> fmdom' B \\<and> y \\<notin> fmdom' B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdrop x B = fmdrop y B) =\n    (x = y \\<or> x \\<notin> fmdom' B \\<and> y \\<notin> fmdom' B)", "by transfer (auto simp: map_drop_def map_filter_def fun_eq_iff, metis)"], ["", "lemma fresh_fun_upd:\n  shows \"\\<lbrakk>a \\<sharp> f; a \\<sharp> x; a \\<sharp> y\\<rbrakk> \\<Longrightarrow> a \\<sharp> f(x := y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<sharp> f; a \\<sharp> x; a \\<sharp> y\\<rbrakk>\n    \\<Longrightarrow> a \\<sharp> f(x := y)", "unfolding fresh_conv_MOST"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<^sub>\\<infinity>b.\n                (a \\<rightleftharpoons> b) \\<bullet> f = f;\n     \\<forall>\\<^sub>\\<infinity>b.\n        (a \\<rightleftharpoons> b) \\<bullet> x = x;\n     \\<forall>\\<^sub>\\<infinity>b.\n        (a \\<rightleftharpoons> b) \\<bullet> y = y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<^sub>\\<infinity>b.\n                         (a \\<rightleftharpoons> b) \\<bullet> f(x := y) = f\n                         (x := y)", "by (elim MOST_rev_mp) simp"], ["", "lemma supp_fun_upd:\n  shows \"supp (f(x := y)) \\<subseteq> supp(f, x, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (f(x := y)) \\<subseteq> supp (f, x, y)", "using fresh_fun_upd"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<sharp> ?f; ?a \\<sharp> ?x; ?a \\<sharp> ?y\\<rbrakk>\n  \\<Longrightarrow> ?a \\<sharp> ?f(?x := ?y)\n\ngoal (1 subgoal):\n 1. supp (f(x := y)) \\<subseteq> supp (f, x, y)", "by (auto simp: fresh_def supp_Pair)"], ["", "lemma map_drop_fun_upd: \"map_drop x F = F(x := None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_drop x F = F(x := None)", "unfolding map_drop_def map_filter_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xa. if xa \\<noteq> x then F xa else None) = F(x := None)", "by auto"], ["", "lemma fresh_fmdrop_in_fmdom: \"\\<lbrakk> x \\<in> fmdom' B; y \\<sharp> B; y \\<sharp> x \\<rbrakk> \\<Longrightarrow> y \\<sharp> fmdrop x B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> fmdom' B; y \\<sharp> B; y \\<sharp> x\\<rbrakk>\n    \\<Longrightarrow> y \\<sharp> fmdrop x B", "by transfer (auto simp: map_drop_fun_upd fresh_None intro!: fresh_fun_upd)"], ["", "lemma fresh_fmdrop:\n  assumes \"x \\<sharp> B\" \"x \\<sharp> y\"\n  shows   \"x \\<sharp> fmdrop y B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> fmdrop y B", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> B\n  x \\<sharp> y\n\ngoal (1 subgoal):\n 1. x \\<sharp> fmdrop y B", "by (cases \"y \\<in> fmdom' B\") (auto dest!: fresh_fmdrop_in_fmdom simp: fmdrop_idle')"], ["", "lemma fresh_fmdrop_fset:\n  fixes x :: atom and A :: \"(_ :: at_base) fset\"\n  assumes \"x \\<sharp> A\" \"x \\<sharp> B\"\n  shows   \"x \\<sharp> fmdrop_fset A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> fmdrop_fset A B", "using assms(1)"], ["proof (prove)\nusing this:\n  x \\<sharp> A\n\ngoal (1 subgoal):\n 1. x \\<sharp> fmdrop_fset A B", "by (induct A) (auto simp: fresh_fmdrop assms(2) fresh_finsert)"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}