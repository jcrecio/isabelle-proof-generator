{"file_name": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_EPO/Embeddings.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_EPO", "problem_names": ["lemma opp_simps[simp]:\n  \"opp Right = Left\" \n  \"opp Left = Right\"", "lemma shallower_pos: \"position_of t (p @ q @ [dq]) \\<Longrightarrow> position_of t (p @ [dp])\"", "lemma no_position_replicate_num_args: \"\\<not> position_of t (replicate (num_args t) Left @ [d])\"", "lemma shorten_position:\"position_of t (p @ q) \\<Longrightarrow> position_of t p\"", "lemmas emb_step_at_induct = emb_step_at.induct[case_names left right left_context right_context head]", "lemma emb_step_at_is_App:\"emb_step_at p d u \\<noteq> u \\<Longrightarrow> is_App u\"", "lemma emb_step_equiv: \"emb_step t s \\<longleftrightarrow> (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\"", "lemma emb_step_fun: \"is_App t \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (fun t)\"", "lemma emb_step_arg: \"is_App t \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (arg t)\"", "lemma emb_step_hsize: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> hsize t > hsize s\"", "lemma emb_step_vars: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> vars s \\<subseteq> vars t\"", "lemma emb_step_equiv': \"emb_step t s \\<longleftrightarrow> (\\<exists>p. p \\<noteq> [] \\<and> emb_step_at' p t = s) \\<and> t \\<noteq> s\"", "lemma position_if_emb_step_at: \"emb_step_at p d t = u \\<Longrightarrow> t \\<noteq> u \\<Longrightarrow> position_of t (p @ [d])\"", "lemma emb_step_at_if_position:\n  assumes\n    \"position_of t (p @ [d])\"\n  shows \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d t\"", "lemma emb_equiv: \"(t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s) = (\\<exists>ps. emb_at ps t = s)\"", "lemma emb_at_trans: \"emb_at ps t = u \\<Longrightarrow> emb_at qs u = s \\<Longrightarrow> emb_at (qs @ ps) t = s\"", "lemma emb_trans: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"", "lemma emb_step_is_emb: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"", "lemma emb_hsize: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> hsize t \\<ge> hsize s\"", "lemma emb_prepend_step: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"", "lemma sub_emb: \"sub s t \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"", "lemma sequence_emb_steps: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<longleftrightarrow> (\\<exists>us. us\\<noteq>[] \\<and> hd us = t \\<and> last us = s \\<and> (\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i))\"", "lemma emb_induct_reverse [consumes 1, case_names refl step]:\n  assumes\nemb: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\" and\nrefl: \"\\<And>t. P t t\" and\nstep: \"\\<And>t u s. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> P u s \\<Longrightarrow> P t s\"\nshows \n\"P t s\"", "lemma emb_cases_reverse [consumes 1, case_names refl step]: \n  \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> (\\<And>t'. t = t' \\<Longrightarrow> s = t' \\<Longrightarrow> P) \\<Longrightarrow> (\\<And>t' u s'. t = t' \\<Longrightarrow> s = s' \\<Longrightarrow> t' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s' \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma emb_vars: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> vars s \\<subseteq> vars t\"", "lemma ground_emb: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> ground t \\<Longrightarrow> ground s\"", "lemma arg_emb: \"s \\<in> set (args t) \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"", "lemma emb_step_at_subst:\n  assumes\n    \"position_of t (p @ [d])\"\n  shows\n    \"emb_step_at p d (subst \\<rho> t) = subst \\<rho> (emb_step_at p d t)\"", "lemma emb_step_subst: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> subst \\<rho> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> s\"", "lemma emb_subst: \"t  \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> s\"", "lemma emb_hsize_neq:\n  assumes\n    \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\" \"t \\<noteq> s\"\n  shows \n    \"hsize t > hsize s\"", "lemma pos_emb_step_at_disjunct:\n  assumes\n\"take (length q) p \\<noteq> q\"\n\"take (length p) q \\<noteq> p\"\nshows\n\"position_of t (p @ [d1]) \\<longleftrightarrow> position_of  (emb_step_at q d2 t) (p @ [d1])\"", "lemma pos_emb_step_at_opp:\n    \"position_of t (p@[d1]) \\<longleftrightarrow> position_of (emb_step_at (p @ [opp d1] @ q) d2 t) (p@[d1])\"", "lemma pos_emb_step_at_nested:\n  shows \"position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) \\<longleftrightarrow> position_of t (p @ [d1])\"", "lemma swap_disjunct_emb_step_at:\n  assumes\n    \"length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p\" \"length q \\<le> length p \\<Longrightarrow>take (length q) p \\<noteq> q\"\n  shows\n    \"emb_step_at q d2 (emb_step_at p d1 t) = emb_step_at p d1 (emb_step_at q d2 t)\"", "lemma merge_emb_step_at:\n  \"emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) = emb_step_at p d1 t\"", "lemma swap_nested_emb_step_at:\n    \"emb_step_at (p @ q) d2 (emb_step_at p d1 t) = emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t)\"", "lemma prio_emb_posI:\n  \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<noteq> s \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and> position_of t (prio_emb_pos prio t s) \\<and> emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"", "lemma prio_emb_pos_le:\n  assumes \"p \\<noteq> []\" \"position_of t p\" \"emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"\n  shows \"prio (prio_emb_pos prio t s) \\<le> prio p\"", "lemma prio_emb_pos_increase:\n  assumes\n    \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\" \"t \\<noteq> s\" \"prio_emb_step prio t s \\<noteq> s\" and\n    valid_prio: \"\\<And>p q dp dq. prio (p @ [dp]) > prio (q @ [dq]) \\<Longrightarrow> take (length p) q \\<noteq> p\" \n  shows\n    \"prio (prio_emb_pos prio t s) \\<le> prio (prio_emb_pos prio (prio_emb_step prio t s) s)\" \n    (is \"prio ?p1 \\<le> prio ?p2\")", "lemma sequence_prio_emb_steps:\n  assumes \n    \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"\n  shows\n    \"\\<exists>us. us\\<noteq>[] \\<and> hd us = t \\<and> last us = s \\<and> \n    (\\<forall>i. Suc i < length us \\<longrightarrow> (prio_emb_step prio (us ! i) s = us ! Suc i \\<and> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i))\"", "lemma emb_step_under_args_head:\n  assumes\n    \"\\<not> list_all (\\<lambda>x. x = Left) p\"\n  shows\n    \"head (emb_step_at p d t) = head t\"", "lemma emb_step_under_args_num_args:\n  assumes\n    \"\\<not> list_all (\\<lambda>x. x = Left) p\"\n  shows\n    \"num_args (emb_step_at p d t) = num_args t\"", "lemma emb_step_under_args_emb_step:\n  assumes\n   \"\\<not> list_all (\\<lambda>x. x = Left) p\"\n   \"position_of t (p @ [d])\"\n obtains i where\n   \"i < num_args t\"\n   \"args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b args (emb_step_at p d t) ! i\" and\n   \"\\<And>j. j < num_args t \\<Longrightarrow> i \\<noteq> j \\<Longrightarrow> args t ! j = args (emb_step_at p d t) ! j\"", "lemma emb_step_under_args_emb:\n  assumes \"\\<not> list_all (\\<lambda>x. x = Left) p\"\n   \"position_of t (p @ [d])\"\n  shows\n    \"\\<forall>i. i < num_args t \\<longrightarrow> args t ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (emb_step_at p d t) ! i\"", "lemma position_Left_only_subst:\n  assumes \"list_all (\\<lambda>x. x = Left) p\" \n    and \"position_of (subst \\<rho> w) (p @ [d])\"\n    and \"num_args (subst \\<rho> w)  = num_args w\"\n  shows \"position_of w (p @ [d])\"", "lemma perform_emb_above_vars0:\n  assumes \n    \"subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n  obtains w where\n    \"s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\"\n    \"subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n    \"\\<forall>w'. w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow> \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"", "lemma emb_only_below_vars:\n  assumes \n    \"subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n    \"s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\"\n    \"is_Sym (head w)\"\n    \"subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n    \"\\<forall>w'. w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow> \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n  obtains ws where\n    \"ws \\<noteq> []\"\n    \"hd ws = subst \\<rho> w\"\n    \"last ws = u\"\n    \"\\<forall>i. Suc i < length ws \\<longrightarrow> \n      (\\<exists>p d. emb_step_at p d (ws ! i) = ws ! Suc i \\<and> \\<not> list_all (\\<lambda>x. x = Left) p)\"\n    \"\\<forall>i. i < length ws \\<longrightarrow> head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w\"\n    \"\\<forall>i. i < length ws \\<longrightarrow> (\\<forall>k. k < num_args w \\<longrightarrow> args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (ws ! i) ! k)\"", "lemma perform_emb_above_vars:\n  assumes \n    \"subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n  obtains w where\n    \"s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\"\n    \"subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n    \"is_Sym (head w) \\<Longrightarrow> head w = head u \\<and> num_args w = num_args u \\<and> (\\<forall>k. k<num_args w \\<longrightarrow> args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args u ! k)\""], "translations": [["", "lemma opp_simps[simp]:\n  \"opp Right = Left\" \n  \"opp Left = Right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opp dir.Right = dir.Left &&& opp dir.Left = dir.Right", "using opp_def"], ["proof (prove)\nusing this:\n  opp ?d = (if ?d = dir.Right then dir.Left else dir.Right)\n\ngoal (1 subgoal):\n 1. opp dir.Right = dir.Left &&& opp dir.Left = dir.Right", "by auto"], ["", "lemma shallower_pos: \"position_of t (p @ q @ [dq]) \\<Longrightarrow> position_of t (p @ [dp])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of t (p @ q @ [dq]) \\<Longrightarrow> position_of t (p @ [dp])", "proof (induct p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ q @ [dq]) \\<Longrightarrow>\n       position_of t ([] @ [dp])\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ q @ [dq]) \\<Longrightarrow>\n                   position_of t (p @ [dp]);\n        position_of t ((a # p) @ q @ [dq])\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [dp])", "case Nil"], ["proof (state)\nthis:\n  position_of t ([] @ q @ [dq])\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ q @ [dq]) \\<Longrightarrow>\n       position_of t ([] @ [dp])\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ q @ [dq]) \\<Longrightarrow>\n                   position_of t (p @ [dp]);\n        position_of t ((a # p) @ q @ [dq])\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [dp])", "then"], ["proof (chain)\npicking this:\n  position_of t ([] @ q @ [dq])", "show ?case"], ["proof (prove)\nusing this:\n  position_of t ([] @ q @ [dq])\n\ngoal (1 subgoal):\n 1. position_of t ([] @ [dp])", "apply (cases t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>position_of t ([] @ q @ [dq]); t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of t ([] @ [dp])\n 2. \\<And>x21 x22.\n       \\<lbrakk>position_of t ([] @ q @ [dq]); t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of t ([] @ [dp])", "apply (metis position_of_Hd Nil_is_append_conv list.exhaust)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>position_of t ([] @ q @ [dq]); t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of t ([] @ [dp])", "by (metis (full_types) position_of_Nil position_of_left\n        position_of_right dir.exhaust self_append_conv2)"], ["proof (state)\nthis:\n  position_of t ([] @ [dp])\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ q @ [dq]) \\<Longrightarrow>\n                   position_of t (p @ [dp]);\n        position_of t ((a # p) @ q @ [dq])\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [dp])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ q @ [dq]) \\<Longrightarrow>\n                   position_of t (p @ [dp]);\n        position_of t ((a # p) @ q @ [dq])\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [dp])", "case (Cons a p)"], ["proof (state)\nthis:\n  position_of ?t (p @ q @ [dq]) \\<Longrightarrow> position_of ?t (p @ [dp])\n  position_of t ((a # p) @ q @ [dq])\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ q @ [dq]) \\<Longrightarrow>\n                   position_of t (p @ [dp]);\n        position_of t ((a # p) @ q @ [dq])\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [dp])", "then"], ["proof (chain)\npicking this:\n  position_of ?t (p @ q @ [dq]) \\<Longrightarrow> position_of ?t (p @ [dp])\n  position_of t ((a # p) @ q @ [dq])", "show ?case"], ["proof (prove)\nusing this:\n  position_of ?t (p @ q @ [dq]) \\<Longrightarrow> position_of ?t (p @ [dp])\n  position_of t ((a # p) @ q @ [dq])\n\ngoal (1 subgoal):\n 1. position_of t ((a # p) @ [dp])", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>t.\n                position_of t (p @ q @ [dq]) \\<Longrightarrow>\n                position_of t (p @ [dp]);\n     position_of t ((a # p) @ q @ [dq]); a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [dp])\n 2. \\<lbrakk>\\<And>t.\n                position_of t (p @ q @ [dq]) \\<Longrightarrow>\n                position_of t (p @ [dp]);\n     position_of t ((a # p) @ q @ [dq]); a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [dp])", "apply (metis position_of_Hd position_of_left append_Cons args.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t.\n                position_of t (p @ q @ [dq]) \\<Longrightarrow>\n                position_of t (p @ [dp]);\n     position_of t ((a # p) @ q @ [dq]); a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [dp])", "by (metis position_of_Hd position_of_right append_Cons args.cases)"], ["proof (state)\nthis:\n  position_of t ((a # p) @ [dp])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_position_replicate_num_args: \"\\<not> position_of t (replicate (num_args t) Left @ [d])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> position_of t (replicate (num_args t) dir.Left @ [d])", "proof (induct \"num_args t\" arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       0 = num_args t \\<Longrightarrow>\n       \\<not> position_of t (replicate (num_args t) dir.Left @ [d])\n 2. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "case 0"], ["proof (state)\nthis:\n  0 = num_args t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       0 = num_args t \\<Longrightarrow>\n       \\<not> position_of t (replicate (num_args t) dir.Left @ [d])\n 2. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "have \"is_Hd t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Hd t", "using \"0.hyps\" args_Nil_iff_is_Hd"], ["proof (prove)\nusing this:\n  0 = num_args t\n  (args ?s = []) = is_Hd ?s\n\ngoal (1 subgoal):\n 1. is_Hd t", "by auto"], ["proof (state)\nthis:\n  is_Hd t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       0 = num_args t \\<Longrightarrow>\n       \\<not> position_of t (replicate (num_args t) dir.Left @ [d])\n 2. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "then"], ["proof (chain)\npicking this:\n  is_Hd t", "show ?case"], ["proof (prove)\nusing this:\n  is_Hd t\n\ngoal (1 subgoal):\n 1. \\<not> position_of t (replicate (num_args t) dir.Left @ [d])", "by (metis position_of.elims(2) snoc_eq_iff_butlast tm.discI(2))"], ["proof (state)\nthis:\n  \\<not> position_of t (replicate (num_args t) dir.Left @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "case (Suc n)"], ["proof (state)\nthis:\n  n = num_args ?t \\<Longrightarrow>\n  \\<not> position_of ?t (replicate (num_args ?t) dir.Left @ [d])\n  Suc n = num_args t\n\ngoal (1 subgoal):\n 1. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "have \"is_App t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_App t", "using Suc.hyps(2) args_Nil_iff_is_Hd"], ["proof (prove)\nusing this:\n  Suc n = num_args t\n  (args ?s = []) = is_Hd ?s\n\ngoal (1 subgoal):\n 1. is_App t", "by force"], ["proof (state)\nthis:\n  is_App t\n\ngoal (1 subgoal):\n 1. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "then"], ["proof (chain)\npicking this:\n  is_App t", "have \"\\<not> position_of (fun t) (replicate (num_args (fun t)) dir.Left @ [d])\""], ["proof (prove)\nusing this:\n  is_App t\n\ngoal (1 subgoal):\n 1. \\<not> position_of (fun t) (replicate (num_args (fun t)) dir.Left @ [d])", "using Suc.hyps(1)[of \"fun t\"]"], ["proof (prove)\nusing this:\n  is_App t\n  n = num_args (fun t) \\<Longrightarrow>\n  \\<not> position_of (fun t) (replicate (num_args (fun t)) dir.Left @ [d])\n\ngoal (1 subgoal):\n 1. \\<not> position_of (fun t) (replicate (num_args (fun t)) dir.Left @ [d])", "by (metis Suc Suc_inject args.elims length_0_conv length_append_singleton nat.distinct(1) tm.sel(4))"], ["proof (state)\nthis:\n  \\<not> position_of (fun t) (replicate (num_args (fun t)) dir.Left @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "have \"\\<And>ds. replicate (num_args t) dir.Left @ [d] \\<noteq> dir.Right # ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ds. replicate (num_args t) dir.Left @ [d] \\<noteq> dir.Right # ds", "by (metis \\<open>is_App t\\<close> args_Nil_iff_is_Hd dir.distinct(1) hd_append hd_replicate length_0_conv list.sel(1) replicate_empty)"], ["proof (state)\nthis:\n  replicate (num_args t) dir.Left @ [d] \\<noteq> dir.Right # ?ds\n\ngoal (1 subgoal):\n 1. \\<And>x t.\n       \\<lbrakk>\\<And>t.\n                   x = num_args t \\<Longrightarrow>\n                   \\<not> position_of t\n                           (replicate (num_args t) dir.Left @ [d]);\n        Suc x = num_args t\\<rbrakk>\n       \\<Longrightarrow> \\<not> position_of t\n                                 (replicate (num_args t) dir.Left @ [d])", "then"], ["proof (chain)\npicking this:\n  replicate (num_args t) dir.Left @ [d] \\<noteq> dir.Right # ?ds", "show ?case"], ["proof (prove)\nusing this:\n  replicate (num_args t) dir.Left @ [d] \\<noteq> dir.Right # ?ds\n\ngoal (1 subgoal):\n 1. \\<not> position_of t (replicate (num_args t) dir.Left @ [d])", "using position_of.elims(2)[of t \"(replicate (num_args t) dir.Left @ [d])\"]"], ["proof (prove)\nusing this:\n  replicate (num_args t) dir.Left @ [d] \\<noteq> dir.Right # ?ds\n  \\<lbrakk>position_of t (replicate (num_args t) dir.Left @ [d]);\n   \\<And>uu_.\n      \\<lbrakk>t = uu_; replicate (num_args t) dir.Left @ [d] = []\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>t s ds.\n      \\<lbrakk>t = App t s;\n       replicate (num_args t) dir.Left @ [d] = dir.Left # ds;\n       position_of t ds\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>t s ds.\n      \\<lbrakk>t = App t s;\n       replicate (num_args t) dir.Left @ [d] = dir.Right # ds;\n       position_of s ds\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<not> position_of t (replicate (num_args t) dir.Left @ [d])", "by (metis position_of_left \\<open>\\<not> position_of (fun t) (replicate (num_args (fun t)) dir.Left @ [d])\\<close> \n    \\<open>is_App t\\<close> append_Cons args.simps(2) length_append_singleton replicate_Suc tm.collapse(2))"], ["proof (state)\nthis:\n  \\<not> position_of t (replicate (num_args t) dir.Left @ [d])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma shorten_position:\"position_of t (p @ q) \\<Longrightarrow> position_of t p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of t (p @ q) \\<Longrightarrow> position_of t p", "proof (induct q rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. position_of t (p @ []) \\<Longrightarrow> position_of t p\n 2. \\<And>x xs.\n       \\<lbrakk>position_of t (p @ xs) \\<Longrightarrow> position_of t p;\n        position_of t (p @ xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> position_of t p", "case Nil"], ["proof (state)\nthis:\n  position_of t (p @ [])\n\ngoal (2 subgoals):\n 1. position_of t (p @ []) \\<Longrightarrow> position_of t p\n 2. \\<And>x xs.\n       \\<lbrakk>position_of t (p @ xs) \\<Longrightarrow> position_of t p;\n        position_of t (p @ xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> position_of t p", "then"], ["proof (chain)\npicking this:\n  position_of t (p @ [])", "show ?case"], ["proof (prove)\nusing this:\n  position_of t (p @ [])\n\ngoal (1 subgoal):\n 1. position_of t p", "by simp"], ["proof (state)\nthis:\n  position_of t p\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>position_of t (p @ xs) \\<Longrightarrow> position_of t p;\n        position_of t (p @ xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> position_of t p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>position_of t (p @ xs) \\<Longrightarrow> position_of t p;\n        position_of t (p @ xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> position_of t p", "case (snoc x xs)"], ["proof (state)\nthis:\n  position_of t (p @ xs) \\<Longrightarrow> position_of t p\n  position_of t (p @ xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>position_of t (p @ xs) \\<Longrightarrow> position_of t p;\n        position_of t (p @ xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> position_of t p", "then"], ["proof (chain)\npicking this:\n  position_of t (p @ xs) \\<Longrightarrow> position_of t p\n  position_of t (p @ xs @ [x])", "show ?case"], ["proof (prove)\nusing this:\n  position_of t (p @ xs) \\<Longrightarrow> position_of t p\n  position_of t (p @ xs @ [x])\n\ngoal (1 subgoal):\n 1. position_of t p", "by (metis position_of_Nil append_assoc append_butlast_last_id shallower_pos)"], ["proof (state)\nthis:\n  position_of t p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Embedding step\\<close>"], ["", "text \\<open>Embedding step at a given position. If the position is not present, default to identity.\\<close>"], ["", "fun emb_step_at :: \"dir list \\<Rightarrow> dir \\<Rightarrow> ('s, 'v) tm  \\<Rightarrow> ('s, 'v) tm\"  where\n  emb_step_at_left:\"emb_step_at [] Left (App t s) = t\"\n| emb_step_at_right:\"emb_step_at [] Right (App t s) = s\"\n| emb_step_at_left_context:\"emb_step_at (Left # p) dir (App t s) = App (emb_step_at p dir t) s\"\n| emb_step_at_right_context:\"emb_step_at (Right # p) dir (App t s) = App t (emb_step_at p dir s)\"\n| emb_step_at_head:\"emb_step_at _ _ (Hd h) = Hd h\""], ["", "abbreviation \"emb_step_at' p t == emb_step_at (butlast p) (last p) t\""], ["", "lemmas emb_step_at_induct = emb_step_at.induct[case_names left right left_context right_context head]"], ["", "lemma emb_step_at_is_App:\"emb_step_at p d u \\<noteq> u \\<Longrightarrow> is_App u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at p d u \\<noteq> u \\<Longrightarrow> is_App u", "by (metis emb_step_at.simps(5) is_Hd_def)"], ["", "text \\<open>Definition of an embedding step without using positions.\\<close>"], ["", "inductive emb_step (infix \"\\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\" 50) where \n  left: \"(App t1 t2) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b t1\" |\n  right: \"(App t1 t2) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b t2\" |\n  context_left: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> (App t u) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (App s u)\" |\n  context_right: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> (App u t) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (App u s)\""], ["", "text \\<open>The two definitions of an embedding step are equivalent:\\<close>"], ["", "lemma emb_step_equiv: \"emb_step t s \\<longleftrightarrow> (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s) =\n    ((\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n 2. (\\<exists>p d. emb_step_at p d t = s) \\<and>\n    t \\<noteq> s \\<Longrightarrow>\n    t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "show \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s", "proof (induct t s rule:emb_step.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       (\\<exists>p d. emb_step_at p d (App t1 t2) = t1) \\<and>\n       App t1 t2 \\<noteq> t1\n 2. \\<And>t1 t2.\n       (\\<exists>p d. emb_step_at p d (App t1 t2) = t2) \\<and>\n       App t1 t2 \\<noteq> t2\n 3. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 4. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "case left"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       (\\<exists>p d. emb_step_at p d (App t1 t2) = t1) \\<and>\n       App t1 t2 \\<noteq> t1\n 2. \\<And>t1 t2.\n       (\\<exists>p d. emb_step_at p d (App t1 t2) = t2) \\<and>\n       App t1 t2 \\<noteq> t2\n 3. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 4. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d (App t1_ t2_) = t1_) \\<and>\n    App t1_ t2_ \\<noteq> t1_", "by (metis add_Suc_right emb_step_at.simps(1) leD le_add_same_cancel1 le_imp_less_Suc tm.size(4) zero_order(1))"], ["proof (state)\nthis:\n  (\\<exists>p d. emb_step_at p d (App t1_ t2_) = t1_) \\<and>\n  App t1_ t2_ \\<noteq> t1_\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       (\\<exists>p d. emb_step_at p d (App t1 t2) = t2) \\<and>\n       App t1 t2 \\<noteq> t2\n 2. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 3. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       (\\<exists>p d. emb_step_at p d (App t1 t2) = t2) \\<and>\n       App t1 t2 \\<noteq> t2\n 2. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 3. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "case right"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       (\\<exists>p d. emb_step_at p d (App t1 t2) = t2) \\<and>\n       App t1 t2 \\<noteq> t2\n 2. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 3. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d (App t1_ t2_) = t2_) \\<and>\n    App t1_ t2_ \\<noteq> t2_", "by (metis add.right_neutral add_le_cancel_left antisym emb_step_at.simps(2) le_add_same_cancel2 le_imp_less_Suc length_greater_0_conv list.size(3) tm.size(4) zero_order(1))"], ["proof (state)\nthis:\n  (\\<exists>p d. emb_step_at p d (App t1_ t2_) = t2_) \\<and>\n  App t1_ t2_ \\<noteq> t2_\n\ngoal (2 subgoals):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 2. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 2. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "case (context_left t s)"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (2 subgoals):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 2. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "obtain p d where \"emb_step_at p d t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p d.\n        emb_step_at p d t = s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using context_left.hyps(2)"], ["proof (prove)\nusing this:\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (1 subgoal):\n 1. (\\<And>p d.\n        emb_step_at p d t = s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  emb_step_at p d t = s\n\ngoal (2 subgoals):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 2. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "then"], ["proof (chain)\npicking this:\n  emb_step_at p d t = s", "have \"\\<And>u. emb_step_at (Left # p) d (App t u) = App s u\""], ["proof (prove)\nusing this:\n  emb_step_at p d t = s\n\ngoal (1 subgoal):\n 1. \\<And>u. emb_step_at (dir.Left # p) d (App t u) = App s u", "by (metis emb_step_at.simps(3))"], ["proof (state)\nthis:\n  emb_step_at (dir.Left # p) d (App t ?u) = App s ?u\n\ngoal (2 subgoals):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App t u) = App s u) \\<and>\n                         App t u \\<noteq> App s u\n 2. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "then"], ["proof (chain)\npicking this:\n  emb_step_at (dir.Left # p) d (App t ?u) = App s ?u", "show ?case"], ["proof (prove)\nusing this:\n  emb_step_at (dir.Left # p) d (App t ?u) = App s ?u\n\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d (App t u_) = App s u_) \\<and>\n    App t u_ \\<noteq> App s u_", "using context_left.hyps(2)"], ["proof (prove)\nusing this:\n  emb_step_at (dir.Left # p) d (App t ?u) = App s ?u\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d (App t u_) = App s u_) \\<and>\n    App t u_ \\<noteq> App s u_", "by blast"], ["proof (state)\nthis:\n  (\\<exists>p d. emb_step_at p d (App t u_) = App s u_) \\<and>\n  App t u_ \\<noteq> App s u_\n\ngoal (1 subgoal):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "case (context_right t s)"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (1 subgoal):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "obtain p d where \"emb_step_at p d t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p d.\n        emb_step_at p d t = s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using context_right.hyps(2)"], ["proof (prove)\nusing this:\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (1 subgoal):\n 1. (\\<And>p d.\n        emb_step_at p d t = s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  emb_step_at p d t = s\n\ngoal (1 subgoal):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "then"], ["proof (chain)\npicking this:\n  emb_step_at p d t = s", "have \"\\<And>u. emb_step_at (Right # p) d (App u t) = App u s\""], ["proof (prove)\nusing this:\n  emb_step_at p d t = s\n\ngoal (1 subgoal):\n 1. \\<And>u. emb_step_at (dir.Right # p) d (App u t) = App u s", "by (metis emb_step_at.simps(4))"], ["proof (state)\nthis:\n  emb_step_at (dir.Right # p) d (App ?u t) = App ?u s\n\ngoal (1 subgoal):\n 1. \\<And>t s u.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p d.\n                             emb_step_at p d (App u t) = App u s) \\<and>\n                         App u t \\<noteq> App u s", "then"], ["proof (chain)\npicking this:\n  emb_step_at (dir.Right # p) d (App ?u t) = App ?u s", "show ?case"], ["proof (prove)\nusing this:\n  emb_step_at (dir.Right # p) d (App ?u t) = App ?u s\n\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d (App u_ t) = App u_ s) \\<and>\n    App u_ t \\<noteq> App u_ s", "using context_right.hyps(2)"], ["proof (prove)\nusing this:\n  emb_step_at (dir.Right # p) d (App ?u t) = App ?u s\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d (App u_ t) = App u_ s) \\<and>\n    App u_ t \\<noteq> App u_ s", "by blast"], ["proof (state)\nthis:\n  (\\<exists>p d. emb_step_at p d (App u_ t) = App u_ s) \\<and>\n  App u_ t \\<noteq> App u_ s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d t = s) \\<and>\n    t \\<noteq> s \\<Longrightarrow>\n    t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "show \"(\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d t = s) \\<and>\n    t \\<noteq> s \\<Longrightarrow>\n    t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d t = s) \\<and>\n    t \\<noteq> s \\<Longrightarrow>\n    t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "assume \"(\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\""], ["proof (state)\nthis:\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d t = s) \\<and>\n    t \\<noteq> s \\<Longrightarrow>\n    t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s", "obtain p d where \"emb_step_at p d t = s\" \"t \\<noteq> s\""], ["proof (prove)\nusing this:\n  (\\<exists>p d. emb_step_at p d t = s) \\<and> t \\<noteq> s\n\ngoal (1 subgoal):\n 1. (\\<And>p d.\n        \\<lbrakk>emb_step_at p d t = s; t \\<noteq> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  emb_step_at p d t = s\n  t \\<noteq> s\n\ngoal (1 subgoal):\n 1. (\\<exists>p d. emb_step_at p d t = s) \\<and>\n    t \\<noteq> s \\<Longrightarrow>\n    t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  emb_step_at p d t = s\n  t \\<noteq> s", "show ?thesis"], ["proof (prove)\nusing this:\n  emb_step_at p d t = s\n  t \\<noteq> s\n\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "proof (induct arbitrary:t rule:emb_step_at_induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>t s ta.\n       \\<lbrakk>emb_step_at [] dir.Left ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>t s ta.\n       \\<lbrakk>emb_step_at [] dir.Right ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 3. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>ta.\n                   \\<lbrakk>emb_step_at p dir ta = t; ta \\<noteq> t\\<rbrakk>\n                   \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     t;\n        emb_step_at (dir.Left # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 4. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 5. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "case (left u1 u2)"], ["proof (state)\nthis:\n  emb_step_at [] dir.Left t = App u1 u2\n  t \\<noteq> App u1 u2\n\ngoal (5 subgoals):\n 1. \\<And>t s ta.\n       \\<lbrakk>emb_step_at [] dir.Left ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>t s ta.\n       \\<lbrakk>emb_step_at [] dir.Right ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 3. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>ta.\n                   \\<lbrakk>emb_step_at p dir ta = t; ta \\<noteq> t\\<rbrakk>\n                   \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     t;\n        emb_step_at (dir.Left # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 4. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 5. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2", "using left(1)"], ["proof (prove)\nusing this:\n  emb_step_at [] dir.Left t = App u1 u2\n\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2", "apply (rule emb_step_at.elims)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>[] = []; dir.Left = dir.Left; t = App t s;\n        App u1 u2 = t\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 2. \\<And>t s.\n       \\<lbrakk>[] = []; dir.Left = dir.Right; t = App t s;\n        App u1 u2 = s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 3. \\<And>p dir t s.\n       \\<lbrakk>[] = dir.Left # p; dir.Left = dir; t = App t s;\n        App u1 u2 = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 4. \\<And>p dir t s.\n       \\<lbrakk>[] = dir.Right # p; dir.Left = dir; t = App t s;\n        App u1 u2 = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 5. \\<And>uu_ uv_ h.\n       \\<lbrakk>[] = uu_; dir.Left = uv_; t = Hd h;\n        App u1 u2 = Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2", "using emb_step.left"], ["proof (prove)\nusing this:\n  App ?t1.0 ?t2.0 \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?t1.0\n\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>[] = []; dir.Left = dir.Left; t = App t s;\n        App u1 u2 = t\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 2. \\<And>t s.\n       \\<lbrakk>[] = []; dir.Left = dir.Right; t = App t s;\n        App u1 u2 = s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 3. \\<And>p dir t s.\n       \\<lbrakk>[] = dir.Left # p; dir.Left = dir; t = App t s;\n        App u1 u2 = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 4. \\<And>p dir t s.\n       \\<lbrakk>[] = dir.Right # p; dir.Left = dir; t = App t s;\n        App u1 u2 = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 5. \\<And>uu_ uv_ h.\n       \\<lbrakk>[] = uu_; dir.Left = uv_; t = Hd h;\n        App u1 u2 = Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2", "by blast+"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n\ngoal (4 subgoals):\n 1. \\<And>t s ta.\n       \\<lbrakk>emb_step_at [] dir.Right ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>ta.\n                   \\<lbrakk>emb_step_at p dir ta = t; ta \\<noteq> t\\<rbrakk>\n                   \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     t;\n        emb_step_at (dir.Left # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 3. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 4. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>t s ta.\n       \\<lbrakk>emb_step_at [] dir.Right ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>ta.\n                   \\<lbrakk>emb_step_at p dir ta = t; ta \\<noteq> t\\<rbrakk>\n                   \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     t;\n        emb_step_at (dir.Left # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 3. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 4. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "case (right u1 u2)"], ["proof (state)\nthis:\n  emb_step_at [] dir.Right t = App u1 u2\n  t \\<noteq> App u1 u2\n\ngoal (4 subgoals):\n 1. \\<And>t s ta.\n       \\<lbrakk>emb_step_at [] dir.Right ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>ta.\n                   \\<lbrakk>emb_step_at p dir ta = t; ta \\<noteq> t\\<rbrakk>\n                   \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     t;\n        emb_step_at (dir.Left # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 3. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 4. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2", "using right(1)"], ["proof (prove)\nusing this:\n  emb_step_at [] dir.Right t = App u1 u2\n\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2", "apply (rule emb_step_at.elims)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>[] = []; dir.Right = dir.Left; t = App t s;\n        App u1 u2 = t\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 2. \\<And>t s.\n       \\<lbrakk>[] = []; dir.Right = dir.Right; t = App t s;\n        App u1 u2 = s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 3. \\<And>p dir t s.\n       \\<lbrakk>[] = dir.Left # p; dir.Right = dir; t = App t s;\n        App u1 u2 = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 4. \\<And>p dir t s.\n       \\<lbrakk>[] = dir.Right # p; dir.Right = dir; t = App t s;\n        App u1 u2 = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 5. \\<And>uu_ uv_ h.\n       \\<lbrakk>[] = uu_; dir.Right = uv_; t = Hd h;\n        App u1 u2 = Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2", "using emb_step.right"], ["proof (prove)\nusing this:\n  App ?t1.0 ?t2.0 \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?t2.0\n\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>[] = []; dir.Right = dir.Left; t = App t s;\n        App u1 u2 = t\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 2. \\<And>t s.\n       \\<lbrakk>[] = []; dir.Right = dir.Right; t = App t s;\n        App u1 u2 = s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 3. \\<And>p dir t s.\n       \\<lbrakk>[] = dir.Left # p; dir.Right = dir; t = App t s;\n        App u1 u2 = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 4. \\<And>p dir t s.\n       \\<lbrakk>[] = dir.Right # p; dir.Right = dir; t = App t s;\n        App u1 u2 = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n 5. \\<And>uu_ uv_ h.\n       \\<lbrakk>[] = uu_; dir.Right = uv_; t = Hd h;\n        App u1 u2 = Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2", "by blast+"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App u1 u2\n\ngoal (3 subgoals):\n 1. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>ta.\n                   \\<lbrakk>emb_step_at p dir ta = t; ta \\<noteq> t\\<rbrakk>\n                   \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     t;\n        emb_step_at (dir.Left # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 3. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>ta.\n                   \\<lbrakk>emb_step_at p dir ta = t; ta \\<noteq> t\\<rbrakk>\n                   \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     t;\n        emb_step_at (dir.Left # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 3. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "case (left_context u1 u2 t' s')"], ["proof (state)\nthis:\n  \\<lbrakk>emb_step_at u1 u2 ?t = t'; ?t \\<noteq> t'\\<rbrakk>\n  \\<Longrightarrow> ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b t'\n  emb_step_at (dir.Left # u1) u2 t = App t' s'\n  t \\<noteq> App t' s'\n\ngoal (3 subgoals):\n 1. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>ta.\n                   \\<lbrakk>emb_step_at p dir ta = t; ta \\<noteq> t\\<rbrakk>\n                   \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     t;\n        emb_step_at (dir.Left # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 3. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t' s'", "by (metis emb_step_at_left_context emb_step.simps emb_step_at_is_App left_context.hyps left_context.prems(1) left_context.prems(2) \n            tm.collapse(2) tm.inject(2))"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t' s'\n\ngoal (2 subgoals):\n 1. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "case (right_context u1 u2 t' s')"], ["proof (state)\nthis:\n  \\<lbrakk>emb_step_at u1 u2 ?t = s'; ?t \\<noteq> s'\\<rbrakk>\n  \\<Longrightarrow> ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s'\n  emb_step_at (dir.Right # u1) u2 t = App t' s'\n  t \\<noteq> App t' s'\n\ngoal (2 subgoals):\n 1. \\<And>p dir t s ta.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>emb_step_at p dir t = s; t \\<noteq> s\\<rbrakk>\n                   \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                     s;\n        emb_step_at (dir.Right # p) dir ta = App t s;\n        ta \\<noteq> App t s\\<rbrakk>\n       \\<Longrightarrow> ta \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t s\n 2. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t' s'", "by (metis emb_step_at_right_context emb_step.simps emb_step_at_is_App right_context.hyps right_context.prems(1) right_context.prems(2) tm.collapse(2) tm.inject(2))"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b App t' s'\n\ngoal (1 subgoal):\n 1. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "case (head uu uv h)"], ["proof (state)\nthis:\n  emb_step_at uu uv t = Hd h\n  t \\<noteq> Hd h\n\ngoal (1 subgoal):\n 1. \\<And>uu_ uv_ h t.\n       \\<lbrakk>emb_step_at uu_ uv_ t = Hd h; t \\<noteq> Hd h\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "using head(1)"], ["proof (prove)\nusing this:\n  emb_step_at uu uv t = Hd h\n\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "apply (rule emb_step_at.elims)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>uu = []; uv = dir.Left; t = App t s; Hd h = t\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 2. \\<And>t s.\n       \\<lbrakk>uu = []; uv = dir.Right; t = App t s; Hd h = s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 3. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Left # p; uv = dir; t = App t s;\n        Hd h = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 4. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Right # p; uv = dir; t = App t s;\n        Hd h = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 5. \\<And>uua_ uva_ ha.\n       \\<lbrakk>uu = uua_; uv = uva_; t = Hd ha; Hd h = Hd ha\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "using emb_step.left"], ["proof (prove)\nusing this:\n  App ?t1.0 ?t2.0 \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?t1.0\n\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>uu = []; uv = dir.Left; t = App t s; Hd h = t\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 2. \\<And>t s.\n       \\<lbrakk>uu = []; uv = dir.Right; t = App t s; Hd h = s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 3. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Left # p; uv = dir; t = App t s;\n        Hd h = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 4. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Right # p; uv = dir; t = App t s;\n        Hd h = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 5. \\<And>uua_ uva_ ha.\n       \\<lbrakk>uu = uua_; uv = uva_; t = Hd ha; Hd h = Hd ha\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>uu = []; uv = dir.Right; t = App t s; Hd h = s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 2. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Left # p; uv = dir; t = App t s;\n        Hd h = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 3. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Right # p; uv = dir; t = App t s;\n        Hd h = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 4. \\<And>uua_ uva_ ha.\n       \\<lbrakk>uu = uua_; uv = uva_; t = Hd ha; Hd h = Hd ha\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "using emb_step.right"], ["proof (prove)\nusing this:\n  App ?t1.0 ?t2.0 \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?t2.0\n\ngoal (4 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>uu = []; uv = dir.Right; t = App t s; Hd h = s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 2. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Left # p; uv = dir; t = App t s;\n        Hd h = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 3. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Right # p; uv = dir; t = App t s;\n        Hd h = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 4. \\<And>uua_ uva_ ha.\n       \\<lbrakk>uu = uua_; uv = uva_; t = Hd ha; Hd h = Hd ha\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Left # p; uv = dir; t = App t s;\n        Hd h = App (emb_step_at p dir t) s\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 2. \\<And>p dir t s.\n       \\<lbrakk>uu = dir.Right # p; uv = dir; t = App t s;\n        Hd h = App t (emb_step_at p dir s)\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n 3. \\<And>uua_ uva_ ha.\n       \\<lbrakk>uu = uua_; uv = uva_; t = Hd ha; Hd h = Hd ha\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>uua_ uva_ ha.\n       \\<lbrakk>uu = uua_; uv = uva_; t = Hd ha; h = ha\\<rbrakk>\n       \\<Longrightarrow> Hd ha \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd ha", "using head.prems(2)"], ["proof (prove)\nusing this:\n  t \\<noteq> Hd h\n\ngoal (1 subgoal):\n 1. \\<And>uua_ uva_ ha.\n       \\<lbrakk>uu = uua_; uv = uva_; t = Hd ha; h = ha\\<rbrakk>\n       \\<Longrightarrow> Hd ha \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd ha", "by blast"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b Hd h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>p d. emb_step_at p d t = s) \\<and>\n  t \\<noteq> s \\<Longrightarrow>\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_step_fun: \"is_App t \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (fun t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_App t \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b fun t", "by (metis emb_step.intros(1) tm.collapse(2))"], ["", "lemma emb_step_arg: \"is_App t \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (arg t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_App t \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b arg t", "by (metis emb_step.intros(2) tm.collapse(2))"], ["", "lemma emb_step_hsize: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> hsize t > hsize s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    hsize s < hsize t", "by (induction rule: emb_step.induct; simp_all)"], ["", "lemma emb_step_vars: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> vars s \\<subseteq> vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    vars s \\<subseteq> vars t", "by (induction rule: emb_step.induct, auto)"], ["", "lemma emb_step_equiv': \"emb_step t s \\<longleftrightarrow> (\\<exists>p. p \\<noteq> [] \\<and> emb_step_at' p t = s) \\<and> t \\<noteq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s) =\n    ((\\<exists>p. p \\<noteq> [] \\<and> emb_step_at' p t = s) \\<and>\n     t \\<noteq> s)", "using butlast_snoc emb_step_equiv last_snoc"], ["proof (prove)\nusing this:\n  butlast (?xs @ [?x]) = ?xs\n  (?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s) =\n  ((\\<exists>p d. emb_step_at p d ?t = ?s) \\<and> ?t \\<noteq> ?s)\n  last (?xs @ [?x]) = ?x\n\ngoal (1 subgoal):\n 1. (t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s) =\n    ((\\<exists>p. p \\<noteq> [] \\<and> emb_step_at' p t = s) \\<and>\n     t \\<noteq> s)", "by (metis snoc_eq_iff_butlast)"], ["", "lemma position_if_emb_step_at: \"emb_step_at p d t = u \\<Longrightarrow> t \\<noteq> u \\<Longrightarrow> position_of t (p @ [d])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d])", "proof (induct p arbitrary:t u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t u.\n       \\<lbrakk>emb_step_at [] d t = u; t \\<noteq> u\\<rbrakk>\n       \\<Longrightarrow> position_of t ([] @ [d])\n 2. \\<And>a p t u.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "case Nil"], ["proof (state)\nthis:\n  emb_step_at [] d t = u\n  t \\<noteq> u\n\ngoal (2 subgoals):\n 1. \\<And>t u.\n       \\<lbrakk>emb_step_at [] d t = u; t \\<noteq> u\\<rbrakk>\n       \\<Longrightarrow> position_of t ([] @ [d])\n 2. \\<And>a p t u.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "then"], ["proof (chain)\npicking this:\n  emb_step_at [] d t = u\n  t \\<noteq> u", "show ?case"], ["proof (prove)\nusing this:\n  emb_step_at [] d t = u\n  t \\<noteq> u\n\ngoal (1 subgoal):\n 1. position_of t ([] @ [d])", "by (metis emb_step_at_head position_of_Nil append_self_conv2 list.sel(3) position_of.elims(3))"], ["proof (state)\nthis:\n  position_of t ([] @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>a p t u.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t u.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "case (Cons a p)"], ["proof (state)\nthis:\n  \\<lbrakk>emb_step_at p d ?t = ?u; ?t \\<noteq> ?u\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (p @ [d])\n  emb_step_at (a # p) d t = u\n  t \\<noteq> u\n\ngoal (1 subgoal):\n 1. \\<And>a p t u.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>emb_step_at p d ?t = ?u; ?t \\<noteq> ?u\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (p @ [d])\n  emb_step_at (a # p) d t = u\n  t \\<noteq> u", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>emb_step_at p d ?t = ?u; ?t \\<noteq> ?u\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (p @ [d])\n  emb_step_at (a # p) d t = u\n  t \\<noteq> u\n\ngoal (1 subgoal):\n 1. position_of t ((a # p) @ [d])", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u; t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u; t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "case (Hd x)"], ["proof (state)\nthis:\n  t = Hd x\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u; t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u; t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "then"], ["proof (chain)\npicking this:\n  t = Hd x", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Hd x\n\ngoal (1 subgoal):\n 1. position_of t ((a # p) @ [d])", "using Cons"], ["proof (prove)\nusing this:\n  t = Hd x\n  \\<lbrakk>emb_step_at p d ?t = ?u; ?t \\<noteq> ?u\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (p @ [d])\n  emb_step_at (a # p) d t = u\n  t \\<noteq> u\n\ngoal (1 subgoal):\n 1. position_of t ((a # p) @ [d])", "by simp"], ["proof (state)\nthis:\n  position_of t ((a # p) @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u; t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u; t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "case (App t1 t2)"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t u.\n                   \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n                   \\<Longrightarrow> position_of t (p @ [d]);\n        emb_step_at (a # p) d t = u; t \\<noteq> u; t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of t ((a # p) @ [d])", "then"], ["proof (chain)\npicking this:\n  t = App t1 t2", "show ?thesis"], ["proof (prove)\nusing this:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. position_of t ((a # p) @ [d])", "using Cons"], ["proof (prove)\nusing this:\n  t = App t1 t2\n  \\<lbrakk>emb_step_at p d ?t = ?u; ?t \\<noteq> ?u\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (p @ [d])\n  emb_step_at (a # p) d t = u\n  t \\<noteq> u\n\ngoal (1 subgoal):\n 1. position_of t ((a # p) @ [d])", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2;\n     \\<And>t u.\n        \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n        \\<Longrightarrow> position_of t (p @ [d]);\n     emb_step_at (a # p) d t = u; t \\<noteq> u; a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [d])\n 2. \\<lbrakk>t = App t1 t2;\n     \\<And>t u.\n        \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n        \\<Longrightarrow> position_of t (p @ [d]);\n     emb_step_at (a # p) d t = u; t \\<noteq> u; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [d])", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2;\n     \\<And>t.\n        t \\<noteq> emb_step_at p d t \\<Longrightarrow>\n        position_of t (p @ [d]);\n     App (emb_step_at p d t1) t2 = u; App t1 t2 \\<noteq> u;\n     a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> position_of t1 (p @ [d])\n 2. \\<lbrakk>t = App t1 t2;\n     \\<And>t u.\n        \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n        \\<Longrightarrow> position_of t (p @ [d]);\n     emb_step_at (a # p) d t = u; t \\<noteq> u; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [d])", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t = App t1 t2;\n     \\<And>t u.\n        \\<lbrakk>emb_step_at p d t = u; t \\<noteq> u\\<rbrakk>\n        \\<Longrightarrow> position_of t (p @ [d]);\n     emb_step_at (a # p) d t = u; t \\<noteq> u; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [d])", "by auto"], ["proof (state)\nthis:\n  position_of t ((a # p) @ [d])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  position_of t ((a # p) @ [d])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_step_at_if_position:\n  assumes\n    \"position_of t (p @ [d])\"\n  shows \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d t", "using assms"], ["proof (prove)\nusing this:\n  position_of t (p @ [d])\n\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d t", "proof (induct p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ [d]) \\<Longrightarrow>\n       t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at [] d t\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (a # p) d t", "case Nil"], ["proof (state)\nthis:\n  position_of t ([] @ [d])\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ [d]) \\<Longrightarrow>\n       t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at [] d t\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (a # p) d t", "then"], ["proof (chain)\npicking this:\n  position_of t ([] @ [d])", "show ?case"], ["proof (prove)\nusing this:\n  position_of t ([] @ [d])\n\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at [] d t", "by (cases d;cases t;simp add: emb_step.left emb_step.right)"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at [] d t\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (a # p) d t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (a # p) d t", "case (Cons a p)"], ["proof (state)\nthis:\n  position_of ?t (p @ [d]) \\<Longrightarrow>\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d ?t\n  position_of t ((a # p) @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (a # p) d t", "then"], ["proof (chain)\npicking this:\n  position_of ?t (p @ [d]) \\<Longrightarrow>\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d ?t\n  position_of t ((a # p) @ [d])", "show ?case"], ["proof (prove)\nusing this:\n  position_of ?t (p @ [d]) \\<Longrightarrow>\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d ?t\n  position_of t ((a # p) @ [d])\n\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at (a # p) d t", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>t.\n                position_of t (p @ [d]) \\<Longrightarrow>\n                t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d t;\n     position_of t ((a # p) @ [d]); a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                      emb_step_at (a # p) d t\n 2. \\<lbrakk>\\<And>t.\n                position_of t (p @ [d]) \\<Longrightarrow>\n                t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d t;\n     position_of t ((a # p) @ [d]); a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                      emb_step_at (a # p) d t", "apply (cases t)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t ((a # p) @ [d]); a = dir.Left; t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (a # p) d t\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t ((a # p) @ [d]); a = dir.Left;\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (a # p) d t\n 3. \\<lbrakk>\\<And>t.\n                position_of t (p @ [d]) \\<Longrightarrow>\n                t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d t;\n     position_of t ((a # p) @ [d]); a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                      emb_step_at (a # p) d t", "apply (simp_all add: context_left context_right)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t.\n                position_of t (p @ [d]) \\<Longrightarrow>\n                t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at p d t;\n     position_of t (dir.Right # p @ [d]); a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                      emb_step_at (dir.Right # p) d t", "apply (cases t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t (dir.Right # p @ [d]); a = dir.Right;\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (dir.Right # p) d t\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                   emb_step_at p d t;\n        position_of t (dir.Right # p @ [d]); a = dir.Right;\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                         emb_step_at (dir.Right # p) d t", "by (simp_all add: context_left context_right)"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at (a # p) d t\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Embedding relation\\<close>"], ["", "text \\<open>Definition of an embedding as a sequence of embedding steps at given positions:\\<close>"], ["", "fun emb_at :: \"(dir list \\<times> dir) list \\<Rightarrow> ('s, 'v) tm  \\<Rightarrow> ('s, 'v) tm\" where\n  emb_at_Nil: \"emb_at [] t = t\" |\n  emb_at_Cons: \"emb_at ((p,d) # ps) t = emb_step_at p d (emb_at ps t)\""], ["", "text \\<open>Definition of an embedding without using positions:\\<close>"], ["", "inductive emb (infix \"\\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\" 50) where\n  refl: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b t\" |\n  step: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["", "abbreviation emb_neq (infix \"\\<rhd>\\<^sub>e\\<^sub>m\\<^sub>b\" 50) where \"emb_neq t s \\<equiv> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<and> t \\<noteq> s\""], ["", "text \\<open>The two definitions coincide:\\<close>"], ["", "lemma emb_equiv: \"(t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s) = (\\<exists>ps. emb_at ps t = s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s) = (\\<exists>ps. emb_at ps t = s)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    \\<exists>ps. emb_at ps t = s\n 2. \\<exists>ps. emb_at ps t = s \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "show \"\\<exists>ps. emb_at ps t = s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ps. emb_at ps t = s \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ps. emb_at ps t = s \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "assume \"\\<exists>ps. emb_at ps t = s\""], ["proof (state)\nthis:\n  \\<exists>ps. emb_at ps t = s\n\ngoal (1 subgoal):\n 1. \\<exists>ps. emb_at ps t = s \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  \\<exists>ps. emb_at ps t = s", "obtain ps where \"emb_at ps t = s\""], ["proof (prove)\nusing this:\n  \\<exists>ps. emb_at ps t = s\n\ngoal (1 subgoal):\n 1. (\\<And>ps. emb_at ps t = s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  emb_at ps t = s\n\ngoal (1 subgoal):\n 1. \\<exists>ps. emb_at ps t = s \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  emb_at ps t = s", "show ?thesis"], ["proof (prove)\nusing this:\n  emb_at ps t = s\n\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "proof (induct ps arbitrary:s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       emb_at [] t = s \\<Longrightarrow>\n       t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>a ps s.\n       \\<lbrakk>\\<And>s.\n                   emb_at ps t = s \\<Longrightarrow>\n                   t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        emb_at (a # ps) t = s\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "case Nil"], ["proof (state)\nthis:\n  emb_at [] t = s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       emb_at [] t = s \\<Longrightarrow>\n       t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>a ps s.\n       \\<lbrakk>\\<And>s.\n                   emb_at ps t = s \\<Longrightarrow>\n                   t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        emb_at (a # ps) t = s\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  emb_at [] t = s", "show ?case"], ["proof (prove)\nusing this:\n  emb_at [] t = s\n\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by (simp add: emb.refl)"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>a ps s.\n       \\<lbrakk>\\<And>s.\n                   emb_at ps t = s \\<Longrightarrow>\n                   t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        emb_at (a # ps) t = s\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps s.\n       \\<lbrakk>\\<And>s.\n                   emb_at ps t = s \\<Longrightarrow>\n                   t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        emb_at (a # ps) t = s\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "case (Cons a ps)"], ["proof (state)\nthis:\n  emb_at ps t = ?s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n  emb_at (a # ps) t = s\n\ngoal (1 subgoal):\n 1. \\<And>a ps s.\n       \\<lbrakk>\\<And>s.\n                   emb_at ps t = s \\<Longrightarrow>\n                   t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        emb_at (a # ps) t = s\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "using Cons(2)"], ["proof (prove)\nusing this:\n  emb_at (a # ps) t = s\n\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "apply (rule emb_at.elims)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>a # ps = []; t = ta; s = ta\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>p d ps ta.\n       \\<lbrakk>a # ps = (p, d) # ps; t = ta;\n        s = emb_step_at p d (emb_at ps ta)\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p d ps ta.\n       \\<lbrakk>a # ps = (p, d) # ps; t = ta;\n        s = emb_step_at p d (emb_at ps ta)\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by (metis Cons.hyps emb.simps emb_step_equiv list.inject)"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ps. emb_at ps t = s \\<Longrightarrow>\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    \\<exists>ps. emb_at ps t = s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    \\<exists>ps. emb_at ps t = s", "show \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> \\<exists>ps. emb_at ps t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    \\<exists>ps. emb_at ps t = s", "proof (induct rule: emb.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t. \\<exists>ps. emb_at ps t = t\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>ps. emb_at ps t = u;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps. emb_at ps t = s", "case (refl t)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>t. \\<exists>ps. emb_at ps t = t\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>ps. emb_at ps t = u;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps. emb_at ps t = s", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ps. emb_at ps t = t", "using emb_at_Nil"], ["proof (prove)\nusing this:\n  emb_at [] ?t = ?t\n\ngoal (1 subgoal):\n 1. \\<exists>ps. emb_at ps t = t", "by blast"], ["proof (state)\nthis:\n  \\<exists>ps. emb_at ps t = t\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>ps. emb_at ps t = u;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps. emb_at ps t = s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>ps. emb_at ps t = u;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps. emb_at ps t = s", "case (step t u s)"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  \\<exists>ps. emb_at ps t = u\n  u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>ps. emb_at ps t = u;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps. emb_at ps t = s", "then"], ["proof (chain)\npicking this:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  \\<exists>ps. emb_at ps t = u\n  u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "show ?case"], ["proof (prove)\nusing this:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  \\<exists>ps. emb_at ps t = u\n  u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<exists>ps. emb_at ps t = s", "by (metis emb_at_Cons emb_step_equiv)"], ["proof (state)\nthis:\n  \\<exists>ps. emb_at ps t = s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n  \\<exists>ps. emb_at ps t = s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_at_trans: \"emb_at ps t = u \\<Longrightarrow> emb_at qs u = s \\<Longrightarrow> emb_at (qs @ ps) t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emb_at ps t = u; emb_at qs u = s\\<rbrakk>\n    \\<Longrightarrow> emb_at (qs @ ps) t = s", "by (induct qs arbitrary:s; auto)"], ["", "lemma emb_trans: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n     u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n    \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by (metis emb_at_trans emb_equiv)"], ["", "lemma emb_step_is_emb: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by (meson emb.simps)"], ["", "lemma emb_hsize: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> hsize t \\<ge> hsize s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    hsize s \\<le> hsize t", "apply (induction rule: emb.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t. hsize t \\<le> hsize t\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u; hsize u \\<le> hsize t;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> hsize s \\<le> hsize t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u; hsize u \\<le> hsize t;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> hsize s \\<le> hsize t", "using emb_step_hsize"], ["proof (prove)\nusing this:\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s \\<Longrightarrow>\n  hsize ?s < hsize ?t\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u; hsize u \\<le> hsize t;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> hsize s \\<le> hsize t", "by fastforce"], ["", "lemma emb_prepend_step: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n     u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n    \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "using emb_step_is_emb emb_trans"], ["proof (prove)\nusing this:\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s \\<Longrightarrow>\n  ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n  \\<lbrakk>?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?u;\n   ?u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n     u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n    \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by blast"], ["", "lemma sub_emb: \"sub s t \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub s t \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "proof (induction rule:sub.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s. s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App u t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 3. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "case (sub_refl s)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>s. s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App u t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 3. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by (simp add: emb.refl)"], ["proof (state)\nthis:\n  s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (2 subgoals):\n 1. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App u t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App u t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "case (sub_fun s t u)"], ["proof (state)\nthis:\n  sub s t\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (2 subgoals):\n 1. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App u t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  sub s t\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "show ?case"], ["proof (prove)\nusing this:\n  sub s t\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. App u t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "using emb_prepend_step right"], ["proof (prove)\nusing this:\n  sub s t\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  \\<lbrakk>?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?u;\n   ?u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n  App ?t1.0 ?t2.0 \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?t2.0\n\ngoal (1 subgoal):\n 1. App u t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by blast"], ["proof (state)\nthis:\n  App u t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "case (sub_arg s t u)"], ["proof (state)\nthis:\n  sub s t\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>s t u.\n       \\<lbrakk>sub s t; t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  sub s t\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "show ?case"], ["proof (prove)\nusing this:\n  sub s t\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "using emb_prepend_step left"], ["proof (prove)\nusing this:\n  sub s t\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  \\<lbrakk>?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?u;\n   ?u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n  App ?t1.0 ?t2.0 \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?t1.0\n\ngoal (1 subgoal):\n 1. App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by blast"], ["proof (state)\nthis:\n  App t u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sequence_emb_steps: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<longleftrightarrow> (\\<exists>us. us\\<noteq>[] \\<and> hd us = t \\<and> last us = s \\<and> (\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s) =\n    (\\<exists>us.\n        us \\<noteq> [] \\<and>\n        hd us = t \\<and>\n        last us = s \\<and>\n        (\\<forall>i.\n            Suc i < length us \\<longrightarrow>\n            us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n 2. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           us ! Suc i) \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "show \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> \\<exists>us. us\\<noteq>[] \\<and> hd us = t \\<and> last us = s \\<and> (\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "proof (induct rule:emb.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<exists>us.\n          us \\<noteq> [] \\<and>\n          hd us = t \\<and>\n          last us = t \\<and>\n          (\\<forall>i.\n              Suc i < length us \\<longrightarrow>\n              us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "case (refl t)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<exists>us.\n          us \\<noteq> [] \\<and>\n          hd us = t \\<and>\n          last us = t \\<and>\n          (\\<forall>i.\n              Suc i < length us \\<longrightarrow>\n              us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = t \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "using Suc_less_eq add.right_neutral add_Suc_right append_Nil last_snoc list.sel(1) list.size(3) list.size(4) not_less_zero"], ["proof (prove)\nusing this:\n  (Suc ?m < Suc ?n) = (?m < ?n)\n  ?a + (0::?'a) = ?a\n  ?m + Suc ?n = Suc (?m + ?n)\n  [] @ ?ys = ?ys\n  last (?xs @ [?x]) = ?x\n  hd (?x21.0 # ?x22.0) = ?x21.0\n  length [] = 0\n  length (?x21.0 # ?x22.0) = length ?x22.0 + Suc 0\n  \\<not> ?n < (0::?'a)\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = t \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = t \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "case (step t u s)"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = u \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n  u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "then"], ["proof (chain)\npicking this:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = u \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n  u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s", "obtain us where \n      \"us \\<noteq> []\" \n      \"hd us = t\" \n      \"last us = u\" \n      \"\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\""], ["proof (prove)\nusing this:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = u \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n  u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. (\\<And>us.\n        \\<lbrakk>us \\<noteq> []; hd us = t; last us = u;\n         \\<forall>i.\n            Suc i < length us \\<longrightarrow>\n            us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  us \\<noteq> []\n  hd us = t\n  last us = u\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "then"], ["proof (chain)\npicking this:\n  us \\<noteq> []\n  hd us = t\n  last us = u\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i", "have \"hd (us @ [s]) = t\" \"last (us @ [s]) = s\""], ["proof (prove)\nusing this:\n  us \\<noteq> []\n  hd us = t\n  last us = u\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n\ngoal (1 subgoal):\n 1. hd (us @ [s]) = t &&& last (us @ [s]) = s", "by simp_all"], ["proof (state)\nthis:\n  hd (us @ [s]) = t\n  last (us @ [s]) = s\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "moreover"], ["proof (state)\nthis:\n  hd (us @ [s]) = t\n  last (us @ [s]) = s\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "have  \"(\\<forall>i. Suc i < length (us @ [s]) \\<longrightarrow> (us @ [s]) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (us @ [s]) ! Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       Suc i < length (us @ [s]) \\<longrightarrow>\n       (us @ [s]) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n       (us @ [s]) ! Suc i", "by (metis (mono_tags, lifting) Suc_less_eq \\<open>\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<close> \\<open>last us = u\\<close> \\<open>us \\<noteq> []\\<close> \n           append_butlast_last_id length_append_singleton less_antisym nth_append nth_append_length step.hyps(3))"], ["proof (state)\nthis:\n  \\<forall>i.\n     Suc i < length (us @ [s]) \\<longrightarrow>\n     (us @ [s]) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (us @ [s]) ! Suc i\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        \\<exists>us.\n           us \\<noteq> [] \\<and>\n           hd us = t \\<and>\n           last us = u \\<and>\n           (\\<forall>i.\n               Suc i < length us \\<longrightarrow>\n               us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = t \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "ultimately"], ["proof (chain)\npicking this:\n  hd (us @ [s]) = t\n  last (us @ [s]) = s\n  \\<forall>i.\n     Suc i < length (us @ [s]) \\<longrightarrow>\n     (us @ [s]) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (us @ [s]) ! Suc i", "show ?case"], ["proof (prove)\nusing this:\n  hd (us @ [s]) = t\n  last (us @ [s]) = s\n  \\<forall>i.\n     Suc i < length (us @ [s]) \\<longrightarrow>\n     (us @ [s]) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (us @ [s]) ! Suc i\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "by blast"], ["proof (state)\nthis:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           us ! Suc i) \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "show \"\\<exists>us. us \\<noteq> [] \\<and> hd us = t \\<and> last us = s \\<and> (\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i) \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           us ! Suc i) \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           us ! Suc i) \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "assume \"\\<exists>us. us \\<noteq> [] \\<and> hd us = t \\<and> last us = s \\<and> (\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\""], ["proof (state)\nthis:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           us ! Suc i) \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "obtain us where \"us \\<noteq> []\" \"hd us = t\" \"last us = s\" \"\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\""], ["proof (prove)\nusing this:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal (1 subgoal):\n 1. (\\<And>us.\n        \\<lbrakk>us \\<noteq> []; hd us = t; last us = s;\n         \\<forall>i.\n            Suc i < length us \\<longrightarrow>\n            us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  us \\<noteq> []\n  hd us = t\n  last us = s\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           us ! Suc i) \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  us \\<noteq> []\n  hd us = t\n  last us = s\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i", "show ?thesis"], ["proof (prove)\nusing this:\n  us \\<noteq> []\n  hd us = t\n  last us = s\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "proof (induct us arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>[] \\<noteq> []; hd [] = t; last [] = s;\n        \\<forall>i.\n           Suc i < length [] \\<longrightarrow>\n           [] ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b [] ! Suc i\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>a us t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>us \\<noteq> []; hd us = t; last us = s;\n                    \\<forall>i.\n                       Suc i < length us \\<longrightarrow>\n                       us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       us ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        a # us \\<noteq> []; hd (a # us) = t; last (a # us) = s;\n        \\<forall>i.\n           Suc i < length (a # us) \\<longrightarrow>\n           (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           (a # us) ! Suc i\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "case Nil"], ["proof (state)\nthis:\n  [] \\<noteq> []\n  hd [] = t\n  last [] = s\n  \\<forall>i.\n     Suc i < length [] \\<longrightarrow>\n     [] ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b [] ! Suc i\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>[] \\<noteq> []; hd [] = t; last [] = s;\n        \\<forall>i.\n           Suc i < length [] \\<longrightarrow>\n           [] ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b [] ! Suc i\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n 2. \\<And>a us t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>us \\<noteq> []; hd us = t; last us = s;\n                    \\<forall>i.\n                       Suc i < length us \\<longrightarrow>\n                       us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       us ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        a # us \\<noteq> []; hd (a # us) = t; last (a # us) = s;\n        \\<forall>i.\n           Suc i < length (a # us) \\<longrightarrow>\n           (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           (a # us) ! Suc i\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  [] \\<noteq> []\n  hd [] = t\n  last [] = s\n  \\<forall>i.\n     Suc i < length [] \\<longrightarrow>\n     [] ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b [] ! Suc i", "show ?case"], ["proof (prove)\nusing this:\n  [] \\<noteq> []\n  hd [] = t\n  last [] = s\n  \\<forall>i.\n     Suc i < length [] \\<longrightarrow>\n     [] ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b [] ! Suc i\n\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by simp"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>a us t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>us \\<noteq> []; hd us = t; last us = s;\n                    \\<forall>i.\n                       Suc i < length us \\<longrightarrow>\n                       us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       us ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        a # us \\<noteq> []; hd (a # us) = t; last (a # us) = s;\n        \\<forall>i.\n           Suc i < length (a # us) \\<longrightarrow>\n           (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           (a # us) ! Suc i\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a us t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>us \\<noteq> []; hd us = t; last us = s;\n                    \\<forall>i.\n                       Suc i < length us \\<longrightarrow>\n                       us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       us ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        a # us \\<noteq> []; hd (a # us) = t; last (a # us) = s;\n        \\<forall>i.\n           Suc i < length (a # us) \\<longrightarrow>\n           (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           (a # us) ! Suc i\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "case (Cons a us)"], ["proof (state)\nthis:\n  \\<lbrakk>us \\<noteq> []; hd us = ?t; last us = s;\n   \\<forall>i.\n      Suc i < length us \\<longrightarrow>\n      us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  a # us \\<noteq> []\n  hd (a # us) = t\n  last (a # us) = s\n  \\<forall>i.\n     Suc i < length (a # us) \\<longrightarrow>\n     (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (a # us) ! Suc i\n\ngoal (1 subgoal):\n 1. \\<And>a us t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>us \\<noteq> []; hd us = t; last us = s;\n                    \\<forall>i.\n                       Suc i < length us \\<longrightarrow>\n                       us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       us ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        a # us \\<noteq> []; hd (a # us) = t; last (a # us) = s;\n        \\<forall>i.\n           Suc i < length (a # us) \\<longrightarrow>\n           (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           (a # us) ! Suc i\\<rbrakk>\n       \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>us \\<noteq> []; hd us = ?t; last us = s;\n   \\<forall>i.\n      Suc i < length us \\<longrightarrow>\n      us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  a # us \\<noteq> []\n  hd (a # us) = t\n  last (a # us) = s\n  \\<forall>i.\n     Suc i < length (a # us) \\<longrightarrow>\n     (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (a # us) ! Suc i", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>us \\<noteq> []; hd us = ?t; last us = s;\n   \\<forall>i.\n      Suc i < length us \\<longrightarrow>\n      us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  a # us \\<noteq> []\n  hd (a # us) = t\n  last (a # us) = s\n  \\<forall>i.\n     Suc i < length (a # us) \\<longrightarrow>\n     (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (a # us) ! Suc i\n\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "using emb.refl emb_step_is_emb emb_trans hd_conv_nth"], ["proof (prove)\nusing this:\n  \\<lbrakk>us \\<noteq> []; hd us = ?t; last us = s;\n   \\<forall>i.\n      Suc i < length us \\<longrightarrow>\n      us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  a # us \\<noteq> []\n  hd (a # us) = t\n  last (a # us) = s\n  \\<forall>i.\n     Suc i < length (a # us) \\<longrightarrow>\n     (a # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (a # us) ! Suc i\n  ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?t\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s \\<Longrightarrow>\n  ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n  \\<lbrakk>?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?u;\n   ?u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by fastforce"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n         us ! Suc i) \\<Longrightarrow>\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_induct_reverse [consumes 1, case_names refl step]:\n  assumes\nemb: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\" and\nrefl: \"\\<And>t. P t t\" and\nstep: \"\\<And>t u s. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> P u s \\<Longrightarrow> P t s\"\nshows \n\"P t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P t s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P t s", "obtain us where \"us\\<noteq>[]\" \"hd us = t\" \"last us = s\" \"\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>us.\n        \\<lbrakk>us \\<noteq> []; hd us = t; last us = s;\n         \\<forall>i.\n            Suc i < length us \\<longrightarrow>\n            us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using emb sequence_emb_steps"], ["proof (prove)\nusing this:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  (?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s) =\n  (\\<exists>us.\n      us \\<noteq> [] \\<and>\n      hd us = ?t \\<and>\n      last us = ?s \\<and>\n      (\\<forall>i.\n          Suc i < length us \\<longrightarrow>\n          us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>us.\n        \\<lbrakk>us \\<noteq> []; hd us = t; last us = s;\n         \\<forall>i.\n            Suc i < length us \\<longrightarrow>\n            us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  us \\<noteq> []\n  hd us = t\n  last us = s\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n\ngoal (1 subgoal):\n 1. P t s", "define us' where \"us' == tl us\""], ["proof (state)\nthis:\n  us' \\<equiv> tl us\n\ngoal (1 subgoal):\n 1. P t s", "then"], ["proof (chain)\npicking this:\n  us' \\<equiv> tl us", "have \"last ([t] @ us') = s\" \"\\<forall>i. i < length us' \\<longrightarrow> ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ([t] @ us') ! Suc i\""], ["proof (prove)\nusing this:\n  us' \\<equiv> tl us\n\ngoal (1 subgoal):\n 1. last ([t] @ us') = s &&&\n    \\<forall>i<length us'.\n       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n       ([t] @ us') ! Suc i", "using \\<open>hd us = t\\<close> \\<open>last us = s\\<close> \\<open>us \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  us' \\<equiv> tl us\n  hd us = t\n  last us = s\n  us \\<noteq> []\n\ngoal (1 subgoal):\n 1. last ([t] @ us') = s &&&\n    \\<forall>i<length us'.\n       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n       ([t] @ us') ! Suc i", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length us'.\n       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n       ([t] @ us') ! Suc i", "using \\<open>\\<forall>i. Suc i < length us \\<longrightarrow> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<close> \\<open>hd us = t\\<close> \\<open>us \\<noteq> []\\<close> us'_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n  hd us = t\n  us \\<noteq> []\n  us' \\<equiv> tl us\n\ngoal (1 subgoal):\n 1. \\<forall>i<length us'.\n       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n       ([t] @ us') ! Suc i", "by force"], ["proof (state)\nthis:\n  last ([t] @ us') = s\n  \\<forall>i<length us'.\n     ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n     ([t] @ us') ! Suc i\n\ngoal (1 subgoal):\n 1. P t s", "then"], ["proof (chain)\npicking this:\n  last ([t] @ us') = s\n  \\<forall>i<length us'.\n     ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n     ([t] @ us') ! Suc i", "show ?thesis"], ["proof (prove)\nusing this:\n  last ([t] @ us') = s\n  \\<forall>i<length us'.\n     ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n     ([t] @ us') ! Suc i\n\ngoal (1 subgoal):\n 1. P t s", "proof (induct us' arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>last ([t] @ []) = s;\n        \\<forall>i<length [].\n           ([t] @ []) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ []) ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s\n 2. \\<And>a us' t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>last ([t] @ us') = s;\n                    \\<forall>i<length us'.\n                       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       ([t] @ us') ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> P t s;\n        last ([t] @ a # us') = s;\n        \\<forall>i<length (a # us').\n           ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ a # us') ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s", "case Nil"], ["proof (state)\nthis:\n  last ([t] @ []) = s\n  \\<forall>i<length [].\n     ([t] @ []) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ([t] @ []) ! Suc i\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>last ([t] @ []) = s;\n        \\<forall>i<length [].\n           ([t] @ []) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ []) ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s\n 2. \\<And>a us' t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>last ([t] @ us') = s;\n                    \\<forall>i<length us'.\n                       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       ([t] @ us') ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> P t s;\n        last ([t] @ a # us') = s;\n        \\<forall>i<length (a # us').\n           ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ a # us') ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s", "then"], ["proof (chain)\npicking this:\n  last ([t] @ []) = s\n  \\<forall>i<length [].\n     ([t] @ []) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ([t] @ []) ! Suc i", "show ?case"], ["proof (prove)\nusing this:\n  last ([t] @ []) = s\n  \\<forall>i<length [].\n     ([t] @ []) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ([t] @ []) ! Suc i\n\ngoal (1 subgoal):\n 1. P t s", "by (simp add: local.refl)"], ["proof (state)\nthis:\n  P t s\n\ngoal (1 subgoal):\n 1. \\<And>a us' t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>last ([t] @ us') = s;\n                    \\<forall>i<length us'.\n                       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       ([t] @ us') ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> P t s;\n        last ([t] @ a # us') = s;\n        \\<forall>i<length (a # us').\n           ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ a # us') ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a us' t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>last ([t] @ us') = s;\n                    \\<forall>i<length us'.\n                       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       ([t] @ us') ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> P t s;\n        last ([t] @ a # us') = s;\n        \\<forall>i<length (a # us').\n           ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ a # us') ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s", "case (Cons a us')"], ["proof (state)\nthis:\n  \\<lbrakk>last ([?t] @ us') = s;\n   \\<forall>i<length us'.\n      ([?t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n      ([?t] @ us') ! Suc i\\<rbrakk>\n  \\<Longrightarrow> P ?t s\n  last ([t] @ a # us') = s\n  \\<forall>i<length (a # us').\n     ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n     ([t] @ a # us') ! Suc i\n\ngoal (1 subgoal):\n 1. \\<And>a us' t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>last ([t] @ us') = s;\n                    \\<forall>i<length us'.\n                       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       ([t] @ us') ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> P t s;\n        last ([t] @ a # us') = s;\n        \\<forall>i<length (a # us').\n           ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ a # us') ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>last ([?t] @ us') = s;\n   \\<forall>i<length us'.\n      ([?t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n      ([?t] @ us') ! Suc i\\<rbrakk>\n  \\<Longrightarrow> P ?t s\n  last ([t] @ a # us') = s\n  \\<forall>i<length (a # us').\n     ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n     ([t] @ a # us') ! Suc i", "have \"P a s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>last ([?t] @ us') = s;\n   \\<forall>i<length us'.\n      ([?t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n      ([?t] @ us') ! Suc i\\<rbrakk>\n  \\<Longrightarrow> P ?t s\n  last ([t] @ a # us') = s\n  \\<forall>i<length (a # us').\n     ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n     ([t] @ a # us') ! Suc i\n\ngoal (1 subgoal):\n 1. P a s", "by (metis Suc_mono append_Cons append_Nil last.simps length_Cons list.discI nth_Cons_Suc)"], ["proof (state)\nthis:\n  P a s\n\ngoal (1 subgoal):\n 1. \\<And>a us' t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>last ([t] @ us') = s;\n                    \\<forall>i<length us'.\n                       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       ([t] @ us') ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> P t s;\n        last ([t] @ a # us') = s;\n        \\<forall>i<length (a # us').\n           ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ a # us') ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s", "have \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b a", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  \\<forall>i<length (a # us').\n     ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n     ([t] @ a # us') ! Suc i\n\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b a", "by auto"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b a\n\ngoal (1 subgoal):\n 1. \\<And>a us' t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>last ([t] @ us') = s;\n                    \\<forall>i<length us'.\n                       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       ([t] @ us') ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> P t s;\n        last ([t] @ a # us') = s;\n        \\<forall>i<length (a # us').\n           ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ a # us') ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s", "have \"a \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "unfolding sequence_emb_steps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = a \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "by (metis append_Cons append_Nil last_append list.sel(1) list.simps(3) local.Cons(2) local.Cons(3) nth_Cons_Suc)"], ["proof (state)\nthis:\n  a \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>a us' t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>last ([t] @ us') = s;\n                    \\<forall>i<length us'.\n                       ([t] @ us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                       ([t] @ us') ! Suc i\\<rbrakk>\n                   \\<Longrightarrow> P t s;\n        last ([t] @ a # us') = s;\n        \\<forall>i<length (a # us').\n           ([t] @ a # us') ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n           ([t] @ a # us') ! Suc i\\<rbrakk>\n       \\<Longrightarrow> P t s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P t s", "using step[OF \\<open>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b a\\<close> \\<open>a \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<close> \\<open>P a s\\<close>]"], ["proof (prove)\nusing this:\n  P t s\n\ngoal (1 subgoal):\n 1. P t s", "."], ["proof (state)\nthis:\n  P t s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P t s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_cases_reverse [consumes 1, case_names refl step]: \n  \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> (\\<And>t'. t = t' \\<Longrightarrow> s = t' \\<Longrightarrow> P) \\<Longrightarrow> (\\<And>t' u s'. t = t' \\<Longrightarrow> s = s' \\<Longrightarrow> t' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<Longrightarrow> u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s' \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n     \\<And>t'. \\<lbrakk>t = t'; s = t'\\<rbrakk> \\<Longrightarrow> P;\n     \\<And>t' u s'.\n        \\<lbrakk>t = t'; s = s'; t' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s'\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (induct rule:emb_induct_reverse; blast+)"], ["", "lemma emb_vars: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> vars s \\<subseteq> vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    vars s \\<subseteq> vars t", "apply (induct rule: emb.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t. vars t \\<subseteq> vars t\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        vars u \\<subseteq> vars t;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> vars s \\<subseteq> vars t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        vars u \\<subseteq> vars t;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> vars s \\<subseteq> vars t", "using emb_step_vars"], ["proof (prove)\nusing this:\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s \\<Longrightarrow>\n  vars ?s \\<subseteq> vars ?t\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        vars u \\<subseteq> vars t;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> vars s \\<subseteq> vars t", "by auto"], ["", "lemma ground_emb: \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> ground t \\<Longrightarrow> ground s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s; ground t\\<rbrakk>\n    \\<Longrightarrow> ground s", "using emb_vars"], ["proof (prove)\nusing this:\n  ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s \\<Longrightarrow>\n  vars ?s \\<subseteq> vars ?t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s; ground t\\<rbrakk>\n    \\<Longrightarrow> ground s", "by blast"], ["", "lemma arg_emb: \"s \\<in> set (args t) \\<Longrightarrow> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> set (args t) \\<Longrightarrow>\n    t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by (simp add: sub_args sub_emb)"], ["", "lemma emb_step_at_subst:\n  assumes\n    \"position_of t (p @ [d])\"\n  shows\n    \"emb_step_at p d (subst \\<rho> t) = subst \\<rho> (emb_step_at p d t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at p d (subst \\<rho> t) = subst \\<rho> (emb_step_at p d t)", "using assms"], ["proof (prove)\nusing this:\n  position_of t (p @ [d])\n\ngoal (1 subgoal):\n 1. emb_step_at p d (subst \\<rho> t) = subst \\<rho> (emb_step_at p d t)", "proof (induction p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ [d]) \\<Longrightarrow>\n       emb_step_at [] d (subst \\<rho> t) = subst \\<rho> (emb_step_at [] d t)\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   emb_step_at p d (subst \\<rho> t) =\n                   subst \\<rho> (emb_step_at p d t);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> emb_step_at (a # p) d (subst \\<rho> t) =\n                         subst \\<rho> (emb_step_at (a # p) d t)", "case Nil"], ["proof (state)\nthis:\n  position_of t ([] @ [d])\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ [d]) \\<Longrightarrow>\n       emb_step_at [] d (subst \\<rho> t) = subst \\<rho> (emb_step_at [] d t)\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   emb_step_at p d (subst \\<rho> t) =\n                   subst \\<rho> (emb_step_at p d t);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> emb_step_at (a # p) d (subst \\<rho> t) =\n                         subst \\<rho> (emb_step_at (a # p) d t)", "then"], ["proof (chain)\npicking this:\n  position_of t ([] @ [d])", "obtain t1 t2 where \"t = App t1 t2\""], ["proof (prove)\nusing this:\n  position_of t ([] @ [d])\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2. t = App t1 t2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using position_of_Hd append_Nil tm.collapse(1)"], ["proof (prove)\nusing this:\n  position_of t ([] @ [d])\n  position_of (Hd ?uv) (?uw # ?ux) = False\n  [] @ ?ys = ?ys\n  is_Hd ?tm \\<Longrightarrow> Hd (head ?tm) = ?tm\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2. t = App t1 t2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis tm.collapse(2))"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ [d]) \\<Longrightarrow>\n       emb_step_at [] d (subst \\<rho> t) = subst \\<rho> (emb_step_at [] d t)\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   emb_step_at p d (subst \\<rho> t) =\n                   subst \\<rho> (emb_step_at p d t);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> emb_step_at (a # p) d (subst \\<rho> t) =\n                         subst \\<rho> (emb_step_at (a # p) d t)", "then"], ["proof (chain)\npicking this:\n  t = App t1 t2", "show ?case"], ["proof (prove)\nusing this:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. emb_step_at [] d (subst \\<rho> t) = subst \\<rho> (emb_step_at [] d t)", "by (cases d; simp add: \\<open>t = App t1 t2\\<close>)"], ["proof (state)\nthis:\n  emb_step_at [] d (subst \\<rho> t) = subst \\<rho> (emb_step_at [] d t)\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   emb_step_at p d (subst \\<rho> t) =\n                   subst \\<rho> (emb_step_at p d t);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> emb_step_at (a # p) d (subst \\<rho> t) =\n                         subst \\<rho> (emb_step_at (a # p) d t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   emb_step_at p d (subst \\<rho> t) =\n                   subst \\<rho> (emb_step_at p d t);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> emb_step_at (a # p) d (subst \\<rho> t) =\n                         subst \\<rho> (emb_step_at (a # p) d t)", "case (Cons a p)"], ["proof (state)\nthis:\n  position_of ?t (p @ [d]) \\<Longrightarrow>\n  emb_step_at p d (subst \\<rho> ?t) = subst \\<rho> (emb_step_at p d ?t)\n  position_of t ((a # p) @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   emb_step_at p d (subst \\<rho> t) =\n                   subst \\<rho> (emb_step_at p d t);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> emb_step_at (a # p) d (subst \\<rho> t) =\n                         subst \\<rho> (emb_step_at (a # p) d t)", "then"], ["proof (chain)\npicking this:\n  position_of ?t (p @ [d]) \\<Longrightarrow>\n  emb_step_at p d (subst \\<rho> ?t) = subst \\<rho> (emb_step_at p d ?t)\n  position_of t ((a # p) @ [d])", "obtain t1 t2 where \"t = App t1 t2\""], ["proof (prove)\nusing this:\n  position_of ?t (p @ [d]) \\<Longrightarrow>\n  emb_step_at p d (subst \\<rho> ?t) = subst \\<rho> (emb_step_at p d ?t)\n  position_of t ((a # p) @ [d])\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2. t = App t1 t2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using position_of.elims(2)"], ["proof (prove)\nusing this:\n  position_of ?t (p @ [d]) \\<Longrightarrow>\n  emb_step_at p d (subst \\<rho> ?t) = subst \\<rho> (emb_step_at p d ?t)\n  position_of t ((a # p) @ [d])\n  \\<lbrakk>position_of ?x ?xa;\n   \\<And>uu_. \\<lbrakk>?x = uu_; ?xa = []\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>t s ds.\n      \\<lbrakk>?x = App t s; ?xa = dir.Left # ds; position_of t ds\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>t s ds.\n      \\<lbrakk>?x = App t s; ?xa = dir.Right # ds; position_of s ds\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2. t = App t1 t2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   position_of t (p @ [d]) \\<Longrightarrow>\n                   emb_step_at p d (subst \\<rho> t) =\n                   subst \\<rho> (emb_step_at p d t);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> emb_step_at (a # p) d (subst \\<rho> t) =\n                         subst \\<rho> (emb_step_at (a # p) d t)", "then"], ["proof (chain)\npicking this:\n  t = App t1 t2", "show ?case"], ["proof (prove)\nusing this:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. emb_step_at (a # p) d (subst \\<rho> t) =\n    subst \\<rho> (emb_step_at (a # p) d t)", "using Cons.IH Cons.prems"], ["proof (prove)\nusing this:\n  t = App t1 t2\n  position_of ?t (p @ [d]) \\<Longrightarrow>\n  emb_step_at p d (subst \\<rho> ?t) = subst \\<rho> (emb_step_at p d ?t)\n  position_of t ((a # p) @ [d])\n\ngoal (1 subgoal):\n 1. emb_step_at (a # p) d (subst \\<rho> t) =\n    subst \\<rho> (emb_step_at (a # p) d t)", "by (cases a;auto)"], ["proof (state)\nthis:\n  emb_step_at (a # p) d (subst \\<rho> t) =\n  subst \\<rho> (emb_step_at (a # p) d t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_step_subst: \"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> subst \\<rho> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    subst \\<rho> t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> s", "by (induct rule:emb_step.induct;\n      simp_all add: emb_step.left emb_step.right context_left context_right)"], ["", "lemma emb_subst: \"t  \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow>\n    subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> s", "apply (induct rule:emb.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t. subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> t\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> u;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         subst \\<rho> s", "apply (simp add: emb.refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> u;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         subst \\<rho> s", "using emb.step emb_step_subst"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?u;\n   ?u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s \\<Longrightarrow>\n  subst ?\\<rho> ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b subst ?\\<rho> ?s\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b subst \\<rho> u;\n        u \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         subst \\<rho> s", "by blast"], ["", "lemma emb_hsize_neq:\n  assumes\n    \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\" \"t \\<noteq> s\"\n  shows \n    \"hsize t > hsize s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hsize s < hsize t", "by (metis assms(1) assms(2) emb_cases_reverse emb_hsize emb_step_hsize leD le_imp_less_or_eq)"], ["", "subsection \\<open>How are positions preserved under embedding steps?\\<close>"], ["", "text \\<open>Disjunct positions are preserved: For example, [L,R] is a position of f a (g b). When performing\nan embedding step at [R,R] to obtain f a b, the position [L,R] still exists. (More precisely, it even\ncontains the same subterm, namely a.)\\<close>"], ["", "lemma pos_emb_step_at_disjunct:\n  assumes\n\"take (length q) p \\<noteq> q\"\n\"take (length p) q \\<noteq> p\"\nshows\n\"position_of t (p @ [d1]) \\<longleftrightarrow> position_of  (emb_step_at q d2 t) (p @ [d1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of t (p @ [d1]) = position_of (emb_step_at q d2 t) (p @ [d1])", "using assms"], ["proof (prove)\nusing this:\n  take (length q) p \\<noteq> q\n  take (length p) q \\<noteq> p\n\ngoal (1 subgoal):\n 1. position_of t (p @ [d1]) = position_of (emb_step_at q d2 t) (p @ [d1])", "proof (induct \"length p + length q\" arbitrary:t p q rule:less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q t.\n       \\<lbrakk>\\<And>pa qa t.\n                   \\<lbrakk>length pa + length qa < length p + length q;\n                    take (length qa) pa \\<noteq> qa;\n                    take (length pa) qa \\<noteq> pa\\<rbrakk>\n                   \\<Longrightarrow> position_of t (pa @ [d1]) =\n                                     position_of (emb_step_at qa d2 t)\n(pa @ [d1]);\n        take (length q) p \\<noteq> q; take (length p) q \\<noteq> p\\<rbrakk>\n       \\<Longrightarrow> position_of t (p @ [d1]) =\n                         position_of (emb_step_at q d2 t) (p @ [d1])", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>length ?p + length ?q < length p + length q;\n   take (length ?q) ?p \\<noteq> ?q; take (length ?p) ?q \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (?p @ [d1]) =\n                    position_of (emb_step_at ?q d2 ?t) (?p @ [d1])\n  take (length q) p \\<noteq> q\n  take (length p) q \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<And>p q t.\n       \\<lbrakk>\\<And>pa qa t.\n                   \\<lbrakk>length pa + length qa < length p + length q;\n                    take (length qa) pa \\<noteq> qa;\n                    take (length pa) qa \\<noteq> pa\\<rbrakk>\n                   \\<Longrightarrow> position_of t (pa @ [d1]) =\n                                     position_of (emb_step_at qa d2 t)\n(pa @ [d1]);\n        take (length q) p \\<noteq> q; take (length p) q \\<noteq> p\\<rbrakk>\n       \\<Longrightarrow> position_of t (p @ [d1]) =\n                         position_of (emb_step_at q d2 t) (p @ [d1])", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length ?p + length ?q < length p + length q;\n   take (length ?q) ?p \\<noteq> ?q; take (length ?p) ?q \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (?p @ [d1]) =\n                    position_of (emb_step_at ?q d2 ?t) (?p @ [d1])\n  take (length q) p \\<noteq> q\n  take (length p) q \\<noteq> p", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?p + length ?q < length p + length q;\n   take (length ?q) ?p \\<noteq> ?q; take (length ?p) ?q \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (?p @ [d1]) =\n                    position_of (emb_step_at ?q d2 ?t) (?p @ [d1])\n  take (length q) p \\<noteq> q\n  take (length p) q \\<noteq> p\n\ngoal (1 subgoal):\n 1. position_of t (p @ [d1]) = position_of (emb_step_at q d2 t) (p @ [d1])", "proof (cases \"is_Hd t \\<or> p = [] \\<or> q = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 take (length q) p \\<noteq> q;\n                 take (length p) q \\<noteq> p\\<rbrakk>\n                \\<Longrightarrow> position_of t (p @ [d1]) =\n                                  position_of (emb_step_at q d2 t)\n                                   (p @ [d1]);\n     take (length q) p \\<noteq> q; take (length p) q \\<noteq> p;\n     is_Hd t \\<or> p = [] \\<or> q = []\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])\n 2. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 take (length q) p \\<noteq> q;\n                 take (length p) q \\<noteq> p\\<rbrakk>\n                \\<Longrightarrow> position_of t (p @ [d1]) =\n                                  position_of (emb_step_at q d2 t)\n                                   (p @ [d1]);\n     take (length q) p \\<noteq> q; take (length p) q \\<noteq> p;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])", "case True"], ["proof (state)\nthis:\n  is_Hd t \\<or> p = [] \\<or> q = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 take (length q) p \\<noteq> q;\n                 take (length p) q \\<noteq> p\\<rbrakk>\n                \\<Longrightarrow> position_of t (p @ [d1]) =\n                                  position_of (emb_step_at q d2 t)\n                                   (p @ [d1]);\n     take (length q) p \\<noteq> q; take (length p) q \\<noteq> p;\n     is_Hd t \\<or> p = [] \\<or> q = []\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])\n 2. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 take (length q) p \\<noteq> q;\n                 take (length p) q \\<noteq> p\\<rbrakk>\n                \\<Longrightarrow> position_of t (p @ [d1]) =\n                                  position_of (emb_step_at q d2 t)\n                                   (p @ [d1]);\n     take (length q) p \\<noteq> q; take (length p) q \\<noteq> p;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])", "then"], ["proof (chain)\npicking this:\n  is_Hd t \\<or> p = [] \\<or> q = []", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Hd t \\<or> p = [] \\<or> q = []\n\ngoal (1 subgoal):\n 1. position_of t (p @ [d1]) = position_of (emb_step_at q d2 t) (p @ [d1])", "by (metis emb_step_at_is_App less.prems(1) less.prems(2) list.size(3) take_eq_Nil)"], ["proof (state)\nthis:\n  position_of t (p @ [d1]) = position_of (emb_step_at q d2 t) (p @ [d1])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 take (length q) p \\<noteq> q;\n                 take (length p) q \\<noteq> p\\<rbrakk>\n                \\<Longrightarrow> position_of t (p @ [d1]) =\n                                  position_of (emb_step_at q d2 t)\n                                   (p @ [d1]);\n     take (length q) p \\<noteq> q; take (length p) q \\<noteq> p;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 take (length q) p \\<noteq> q;\n                 take (length p) q \\<noteq> p\\<rbrakk>\n                \\<Longrightarrow> position_of t (p @ [d1]) =\n                                  position_of (emb_step_at q d2 t)\n                                   (p @ [d1]);\n     take (length q) p \\<noteq> q; take (length p) q \\<noteq> p;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])", "case False"], ["proof (state)\nthis:\n  \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 take (length q) p \\<noteq> q;\n                 take (length p) q \\<noteq> p\\<rbrakk>\n                \\<Longrightarrow> position_of t (p @ [d1]) =\n                                  position_of (emb_step_at q d2 t)\n                                   (p @ [d1]);\n     take (length q) p \\<noteq> q; take (length p) q \\<noteq> p;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])", "then"], ["proof (chain)\npicking this:\n  \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])", "obtain t1 t2 p0 p' q0 q' where \"t = App t1 t2\" \"p = p0 # p'\" \"q = q0 # q'\""], ["proof (prove)\nusing this:\n  \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2 p0 p' q0 q'.\n        \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis list.collapse tm.collapse(2))"], ["proof (state)\nthis:\n  t = App t1 t2\n  p = p0 # p'\n  q = q0 # q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 take (length q) p \\<noteq> q;\n                 take (length p) q \\<noteq> p\\<rbrakk>\n                \\<Longrightarrow> position_of t (p @ [d1]) =\n                                  position_of (emb_step_at q d2 t)\n                                   (p @ [d1]);\n     take (length q) p \\<noteq> q; take (length p) q \\<noteq> p;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])", "then"], ["proof (chain)\npicking this:\n  t = App t1 t2\n  p = p0 # p'\n  q = q0 # q'", "show ?thesis"], ["proof (prove)\nusing this:\n  t = App t1 t2\n  p = p0 # p'\n  q = q0 # q'\n\ngoal (1 subgoal):\n 1. position_of t (p @ [d1]) = position_of (emb_step_at q d2 t) (p @ [d1])", "apply (cases p0; cases q0)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Left;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Left\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])\n 2. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Left;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])\n 3. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Right;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Left\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])\n 4. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Right;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])", "using less.hyps less.prems(1) less.prems(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?p + length ?q < length p + length q;\n   take (length ?q) ?p \\<noteq> ?q; take (length ?p) ?q \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (?p @ [d1]) =\n                    position_of (emb_step_at ?q d2 ?t) (?p @ [d1])\n  take (length q) p \\<noteq> q\n  take (length p) q \\<noteq> p\n\ngoal (4 subgoals):\n 1. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Left;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Left\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])\n 2. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Left;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])\n 3. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Right;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Left\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])\n 4. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Right;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t (p @ [d1]) =\n                      position_of (emb_step_at q d2 t) (p @ [d1])", "by auto"], ["proof (state)\nthis:\n  position_of t (p @ [d1]) = position_of (emb_step_at q d2 t) (p @ [d1])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  position_of t (p @ [d1]) = position_of (emb_step_at q d2 t) (p @ [d1])\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Even if only the last element of a position differs from the position of an embedding step, that\nposition is preserved. For example, [L] is a position of f (g b). After performing an embedding step\nat [R,R] to obtain f b, the position [L] still exists. (More precisely, it even\ncontains the same subterm, namely f.)\\<close>"], ["", "lemma pos_emb_step_at_opp:\n    \"position_of t (p@[d1]) \\<longleftrightarrow> position_of (emb_step_at (p @ [opp d1] @ q) d2 t) (p@[d1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of t (p @ [d1]) =\n    position_of (emb_step_at (p @ [opp d1] @ q) d2 t) (p @ [d1])", "proof (induct p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ [d1]) =\n       position_of (emb_step_at ([] @ [opp d1] @ q) d2 t) ([] @ [d1])\n 2. \\<And>a p t.\n       (\\<And>t.\n           position_of t (p @ [d1]) =\n           position_of (emb_step_at (p @ [opp d1] @ q) d2 t)\n            (p @ [d1])) \\<Longrightarrow>\n       position_of t ((a # p) @ [d1]) =\n       position_of (emb_step_at ((a # p) @ [opp d1] @ q) d2 t)\n        ((a # p) @ [d1])", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of t ([] @ [d1]) =\n       position_of (emb_step_at ([] @ [opp d1] @ q) d2 t) ([] @ [d1])\n 2. \\<And>a p t.\n       (\\<And>t.\n           position_of t (p @ [d1]) =\n           position_of (emb_step_at (p @ [opp d1] @ q) d2 t)\n            (p @ [d1])) \\<Longrightarrow>\n       position_of t ((a # p) @ [d1]) =\n       position_of (emb_step_at ((a # p) @ [opp d1] @ q) d2 t)\n        ((a # p) @ [d1])", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of t ([] @ [d1]) =\n    position_of (emb_step_at ([] @ [opp d1] @ q) d2 t) ([] @ [d1])", "by (cases t, simp, cases d1, simp_all)"], ["proof (state)\nthis:\n  position_of t ([] @ [d1]) =\n  position_of (emb_step_at ([] @ [opp d1] @ q) d2 t) ([] @ [d1])\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           position_of t (p @ [d1]) =\n           position_of (emb_step_at (p @ [opp d1] @ q) d2 t)\n            (p @ [d1])) \\<Longrightarrow>\n       position_of t ((a # p) @ [d1]) =\n       position_of (emb_step_at ((a # p) @ [opp d1] @ q) d2 t)\n        ((a # p) @ [d1])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           position_of t (p @ [d1]) =\n           position_of (emb_step_at (p @ [opp d1] @ q) d2 t)\n            (p @ [d1])) \\<Longrightarrow>\n       position_of t ((a # p) @ [d1]) =\n       position_of (emb_step_at ((a # p) @ [opp d1] @ q) d2 t)\n        ((a # p) @ [d1])", "case (Cons a p)"], ["proof (state)\nthis:\n  position_of ?t (p @ [d1]) =\n  position_of (emb_step_at (p @ [opp d1] @ q) d2 ?t) (p @ [d1])\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           position_of t (p @ [d1]) =\n           position_of (emb_step_at (p @ [opp d1] @ q) d2 t)\n            (p @ [d1])) \\<Longrightarrow>\n       position_of t ((a # p) @ [d1]) =\n       position_of (emb_step_at ((a # p) @ [opp d1] @ q) d2 t)\n        ((a # p) @ [d1])", "then"], ["proof (chain)\npicking this:\n  position_of ?t (p @ [d1]) =\n  position_of (emb_step_at (p @ [opp d1] @ q) d2 ?t) (p @ [d1])", "show ?case"], ["proof (prove)\nusing this:\n  position_of ?t (p @ [d1]) =\n  position_of (emb_step_at (p @ [opp d1] @ q) d2 ?t) (p @ [d1])\n\ngoal (1 subgoal):\n 1. position_of t ((a # p) @ [d1]) =\n    position_of (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) ((a # p) @ [d1])", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>t.\n                position_of t (p @ [d1]) =\n                position_of (emb_step_at (p @ [opp d1] @ q) d2 t)\n                 (p @ [d1]);\n     a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [d1]) =\n                      position_of\n                       (emb_step_at ((a # p) @ [opp d1] @ q) d2 t)\n                       ((a # p) @ [d1])\n 2. \\<lbrakk>\\<And>t.\n                position_of t (p @ [d1]) =\n                position_of (emb_step_at (p @ [opp d1] @ q) d2 t)\n                 (p @ [d1]);\n     a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [d1]) =\n                      position_of\n                       (emb_step_at ((a # p) @ [opp d1] @ q) d2 t)\n                       ((a # p) @ [d1])", "apply (metis emb_step_at_left_context position_of_left append_Cons emb_step_at_is_App tm.collapse(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t.\n                position_of t (p @ [d1]) =\n                position_of (emb_step_at (p @ [opp d1] @ q) d2 t)\n                 (p @ [d1]);\n     a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> position_of t ((a # p) @ [d1]) =\n                      position_of\n                       (emb_step_at ((a # p) @ [opp d1] @ q) d2 t)\n                       ((a # p) @ [d1])", "by (metis emb_step_at_right_context position_of_right append_Cons emb_step_at_is_App tm.collapse(2))"], ["proof (state)\nthis:\n  position_of t ((a # p) @ [d1]) =\n  position_of (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) ((a # p) @ [d1])\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Positions are preserved under embedding steps below them:\\<close>"], ["", "lemma pos_emb_step_at_nested:\n  shows \"position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) \\<longleftrightarrow> position_of t (p @ [d1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n    position_of t (p @ [d1])", "proof (induct p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of (emb_step_at ([] @ [d1] @ q) d2 t) ([] @ [d1]) =\n       position_of t ([] @ [d1])\n 2. \\<And>a p t.\n       (\\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1])) \\<Longrightarrow>\n       position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n        ((a # p) @ [d1]) =\n       position_of t ((a # p) @ [d1])", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>t.\n       position_of (emb_step_at ([] @ [d1] @ q) d2 t) ([] @ [d1]) =\n       position_of t ([] @ [d1])\n 2. \\<And>a p t.\n       (\\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1])) \\<Longrightarrow>\n       position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n        ((a # p) @ [d1]) =\n       position_of t ((a # p) @ [d1])", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of (emb_step_at ([] @ [d1] @ q) d2 t) ([] @ [d1]) =\n    position_of t ([] @ [d1])", "by (cases t, simp, cases d1, simp_all)"], ["proof (state)\nthis:\n  position_of (emb_step_at ([] @ [d1] @ q) d2 t) ([] @ [d1]) =\n  position_of t ([] @ [d1])\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1])) \\<Longrightarrow>\n       position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n        ((a # p) @ [d1]) =\n       position_of t ((a # p) @ [d1])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1])) \\<Longrightarrow>\n       position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n        ((a # p) @ [d1]) =\n       position_of t ((a # p) @ [d1])", "case (Cons a p)"], ["proof (state)\nthis:\n  position_of (emb_step_at (p @ [d1] @ q) d2 ?t) (p @ [d1]) =\n  position_of ?t (p @ [d1])\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1])) \\<Longrightarrow>\n       position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n        ((a # p) @ [d1]) =\n       position_of t ((a # p) @ [d1])", "then"], ["proof (chain)\npicking this:\n  position_of (emb_step_at (p @ [d1] @ q) d2 ?t) (p @ [d1]) =\n  position_of ?t (p @ [d1])", "show ?case"], ["proof (prove)\nusing this:\n  position_of (emb_step_at (p @ [d1] @ q) d2 ?t) (p @ [d1]) =\n  position_of ?t (p @ [d1])\n\ngoal (1 subgoal):\n 1. position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t) ((a # p) @ [d1]) =\n    position_of t ((a # p) @ [d1])", "apply (cases a;cases t)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   position_of (emb_step_at (p @ [d1] @ q) d2 t)\n                    (p @ [d1]) =\n                   position_of t (p @ [d1]);\n        a = dir.Left;\n        \\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1]);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n                          ((a # p) @ [d1]) =\n                         position_of t ((a # p) @ [d1])\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   position_of (emb_step_at (p @ [d1] @ q) d2 t)\n                    (p @ [d1]) =\n                   position_of t (p @ [d1]);\n        a = dir.Left;\n        \\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1]);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n                          ((a # p) @ [d1]) =\n                         position_of t ((a # p) @ [d1])\n 3. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   position_of (emb_step_at (p @ [d1] @ q) d2 t)\n                    (p @ [d1]) =\n                   position_of t (p @ [d1]);\n        a = dir.Right;\n        \\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1]);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n                          ((a # p) @ [d1]) =\n                         position_of t ((a # p) @ [d1])\n 4. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   position_of (emb_step_at (p @ [d1] @ q) d2 t)\n                    (p @ [d1]) =\n                   position_of t (p @ [d1]);\n        a = dir.Right;\n        \\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1]);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n                          ((a # p) @ [d1]) =\n                         position_of t ((a # p) @ [d1])", "using Cons.hyps Cons.prems"], ["proof (prove)\nusing this:\n  position_of (emb_step_at (p @ [d1] @ q) d2 ?t) (p @ [d1]) =\n  position_of ?t (p @ [d1])\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   position_of (emb_step_at (p @ [d1] @ q) d2 t)\n                    (p @ [d1]) =\n                   position_of t (p @ [d1]);\n        a = dir.Left;\n        \\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1]);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n                          ((a # p) @ [d1]) =\n                         position_of t ((a # p) @ [d1])\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   position_of (emb_step_at (p @ [d1] @ q) d2 t)\n                    (p @ [d1]) =\n                   position_of t (p @ [d1]);\n        a = dir.Left;\n        \\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1]);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n                          ((a # p) @ [d1]) =\n                         position_of t ((a # p) @ [d1])\n 3. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   position_of (emb_step_at (p @ [d1] @ q) d2 t)\n                    (p @ [d1]) =\n                   position_of t (p @ [d1]);\n        a = dir.Right;\n        \\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1]);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n                          ((a # p) @ [d1]) =\n                         position_of t ((a # p) @ [d1])\n 4. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   position_of (emb_step_at (p @ [d1] @ q) d2 t)\n                    (p @ [d1]) =\n                   position_of t (p @ [d1]);\n        a = dir.Right;\n        \\<And>t.\n           position_of (emb_step_at (p @ [d1] @ q) d2 t) (p @ [d1]) =\n           position_of t (p @ [d1]);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n                          ((a # p) @ [d1]) =\n                         position_of t ((a # p) @ [d1])", "by auto"], ["proof (state)\nthis:\n  position_of (emb_step_at ((a # p) @ [d1] @ q) d2 t) ((a # p) @ [d1]) =\n  position_of t ((a # p) @ [d1])\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Swapping embedding steps\""], ["", "text \\<open>The order of embedding steps at disjunct position can be changed freely:\\<close>"], ["", "lemma swap_disjunct_emb_step_at:\n  assumes\n    \"length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p\" \"length q \\<le> length p \\<Longrightarrow>take (length q) p \\<noteq> q\"\n  shows\n    \"emb_step_at q d2 (emb_step_at p d1 t) = emb_step_at p d1 (emb_step_at q d2 t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at q d2 (emb_step_at p d1 t) =\n    emb_step_at p d1 (emb_step_at q d2 t)", "using assms"], ["proof (prove)\nusing this:\n  length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p\n  length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q\n\ngoal (1 subgoal):\n 1. emb_step_at q d2 (emb_step_at p d1 t) =\n    emb_step_at p d1 (emb_step_at q d2 t)", "proof (induct \"length p + length q\" arbitrary:t p q rule:less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q t.\n       \\<lbrakk>\\<And>pa qa t.\n                   \\<lbrakk>length pa + length qa < length p + length q;\n                    length pa \\<le> length qa \\<Longrightarrow>\n                    take (length pa) qa \\<noteq> pa;\n                    length qa \\<le> length pa \\<Longrightarrow>\n                    take (length qa) pa \\<noteq> qa\\<rbrakk>\n                   \\<Longrightarrow> emb_step_at qa d2\n(emb_step_at pa d1 t) =\n                                     emb_step_at pa d1\n(emb_step_at qa d2 t);\n        length p \\<le> length q \\<Longrightarrow>\n        take (length p) q \\<noteq> p;\n        length q \\<le> length p \\<Longrightarrow>\n        take (length q) p \\<noteq> q\\<rbrakk>\n       \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                         emb_step_at p d1 (emb_step_at q d2 t)", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>length ?p + length ?q < length p + length q;\n   length ?p \\<le> length ?q \\<Longrightarrow>\n   take (length ?p) ?q \\<noteq> ?p;\n   length ?q \\<le> length ?p \\<Longrightarrow>\n   take (length ?q) ?p \\<noteq> ?q\\<rbrakk>\n  \\<Longrightarrow> emb_step_at ?q d2 (emb_step_at ?p d1 ?t) =\n                    emb_step_at ?p d1 (emb_step_at ?q d2 ?t)\n  length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p\n  length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q\n\ngoal (1 subgoal):\n 1. \\<And>p q t.\n       \\<lbrakk>\\<And>pa qa t.\n                   \\<lbrakk>length pa + length qa < length p + length q;\n                    length pa \\<le> length qa \\<Longrightarrow>\n                    take (length pa) qa \\<noteq> pa;\n                    length qa \\<le> length pa \\<Longrightarrow>\n                    take (length qa) pa \\<noteq> qa\\<rbrakk>\n                   \\<Longrightarrow> emb_step_at qa d2\n(emb_step_at pa d1 t) =\n                                     emb_step_at pa d1\n(emb_step_at qa d2 t);\n        length p \\<le> length q \\<Longrightarrow>\n        take (length p) q \\<noteq> p;\n        length q \\<le> length p \\<Longrightarrow>\n        take (length q) p \\<noteq> q\\<rbrakk>\n       \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                         emb_step_at p d1 (emb_step_at q d2 t)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length ?p + length ?q < length p + length q;\n   length ?p \\<le> length ?q \\<Longrightarrow>\n   take (length ?p) ?q \\<noteq> ?p;\n   length ?q \\<le> length ?p \\<Longrightarrow>\n   take (length ?q) ?p \\<noteq> ?q\\<rbrakk>\n  \\<Longrightarrow> emb_step_at ?q d2 (emb_step_at ?p d1 ?t) =\n                    emb_step_at ?p d1 (emb_step_at ?q d2 ?t)\n  length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p\n  length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?p + length ?q < length p + length q;\n   length ?p \\<le> length ?q \\<Longrightarrow>\n   take (length ?p) ?q \\<noteq> ?p;\n   length ?q \\<le> length ?p \\<Longrightarrow>\n   take (length ?q) ?p \\<noteq> ?q\\<rbrakk>\n  \\<Longrightarrow> emb_step_at ?q d2 (emb_step_at ?p d1 ?t) =\n                    emb_step_at ?p d1 (emb_step_at ?q d2 ?t)\n  length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p\n  length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q\n\ngoal (1 subgoal):\n 1. emb_step_at q d2 (emb_step_at p d1 t) =\n    emb_step_at p d1 (emb_step_at q d2 t)", "proof (cases \"is_Hd t \\<or> p = [] \\<or> q = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 length p \\<le> length q \\<Longrightarrow>\n                 take (length p) q \\<noteq> p;\n                 length q \\<le> length p \\<Longrightarrow>\n                 take (length q) p \\<noteq> q\\<rbrakk>\n                \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                                  emb_step_at p d1 (emb_step_at q d2 t);\n     length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p;\n     length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q;\n     is_Hd t \\<or> p = [] \\<or> q = []\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)\n 2. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 length p \\<le> length q \\<Longrightarrow>\n                 take (length p) q \\<noteq> p;\n                 length q \\<le> length p \\<Longrightarrow>\n                 take (length q) p \\<noteq> q\\<rbrakk>\n                \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                                  emb_step_at p d1 (emb_step_at q d2 t);\n     length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p;\n     length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)", "case True"], ["proof (state)\nthis:\n  is_Hd t \\<or> p = [] \\<or> q = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 length p \\<le> length q \\<Longrightarrow>\n                 take (length p) q \\<noteq> p;\n                 length q \\<le> length p \\<Longrightarrow>\n                 take (length q) p \\<noteq> q\\<rbrakk>\n                \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                                  emb_step_at p d1 (emb_step_at q d2 t);\n     length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p;\n     length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q;\n     is_Hd t \\<or> p = [] \\<or> q = []\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)\n 2. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 length p \\<le> length q \\<Longrightarrow>\n                 take (length p) q \\<noteq> p;\n                 length q \\<le> length p \\<Longrightarrow>\n                 take (length q) p \\<noteq> q\\<rbrakk>\n                \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                                  emb_step_at p d1 (emb_step_at q d2 t);\n     length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p;\n     length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)", "then"], ["proof (chain)\npicking this:\n  is_Hd t \\<or> p = [] \\<or> q = []", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Hd t \\<or> p = [] \\<or> q = []\n\ngoal (1 subgoal):\n 1. emb_step_at q d2 (emb_step_at p d1 t) =\n    emb_step_at p d1 (emb_step_at q d2 t)", "using emb_step_at_is_App less.prems(1) less.prems(2) list.size(3) take_eq_Nil"], ["proof (prove)\nusing this:\n  is_Hd t \\<or> p = [] \\<or> q = []\n  emb_step_at ?p ?d ?u \\<noteq> ?u \\<Longrightarrow> is_App ?u\n  length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p\n  length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q\n  length [] = 0\n  (take ?n ?xs = []) = (?n = 0 \\<or> ?xs = [])\n\ngoal (1 subgoal):\n 1. emb_step_at q d2 (emb_step_at p d1 t) =\n    emb_step_at p d1 (emb_step_at q d2 t)", "by (metis le_zero_eq nat_le_linear)"], ["proof (state)\nthis:\n  emb_step_at q d2 (emb_step_at p d1 t) =\n  emb_step_at p d1 (emb_step_at q d2 t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 length p \\<le> length q \\<Longrightarrow>\n                 take (length p) q \\<noteq> p;\n                 length q \\<le> length p \\<Longrightarrow>\n                 take (length q) p \\<noteq> q\\<rbrakk>\n                \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                                  emb_step_at p d1 (emb_step_at q d2 t);\n     length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p;\n     length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 length p \\<le> length q \\<Longrightarrow>\n                 take (length p) q \\<noteq> p;\n                 length q \\<le> length p \\<Longrightarrow>\n                 take (length q) p \\<noteq> q\\<rbrakk>\n                \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                                  emb_step_at p d1 (emb_step_at q d2 t);\n     length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p;\n     length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)", "case False"], ["proof (state)\nthis:\n  \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 length p \\<le> length q \\<Longrightarrow>\n                 take (length p) q \\<noteq> p;\n                 length q \\<le> length p \\<Longrightarrow>\n                 take (length q) p \\<noteq> q\\<rbrakk>\n                \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                                  emb_step_at p d1 (emb_step_at q d2 t);\n     length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p;\n     length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)", "then"], ["proof (chain)\npicking this:\n  \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])", "obtain t1 t2 p0 p' q0 q' where \"t = App t1 t2\" \"p = p0 # p'\" \"q = q0 # q'\""], ["proof (prove)\nusing this:\n  \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2 p0 p' q0 q'.\n        \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis list.collapse tm.collapse(2))"], ["proof (state)\nthis:\n  t = App t1 t2\n  p = p0 # p'\n  q = q0 # q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p q t.\n                \\<lbrakk>length p + length q < length p + length q;\n                 length p \\<le> length q \\<Longrightarrow>\n                 take (length p) q \\<noteq> p;\n                 length q \\<le> length p \\<Longrightarrow>\n                 take (length q) p \\<noteq> q\\<rbrakk>\n                \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                                  emb_step_at p d1 (emb_step_at q d2 t);\n     length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p;\n     length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q;\n     \\<not> (is_Hd t \\<or> p = [] \\<or> q = [])\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)", "then"], ["proof (chain)\npicking this:\n  t = App t1 t2\n  p = p0 # p'\n  q = q0 # q'", "show ?thesis"], ["proof (prove)\nusing this:\n  t = App t1 t2\n  p = p0 # p'\n  q = q0 # q'\n\ngoal (1 subgoal):\n 1. emb_step_at q d2 (emb_step_at p d1 t) =\n    emb_step_at p d1 (emb_step_at q d2 t)", "apply (cases p0; cases q0)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Left;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Left\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)\n 2. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Left;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Right\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)\n 3. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Right;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Left\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)\n 4. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Right;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Right\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)", "using less.hyps less.prems(1) less.prems(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?p + length ?q < length p + length q;\n   length ?p \\<le> length ?q \\<Longrightarrow>\n   take (length ?p) ?q \\<noteq> ?p;\n   length ?q \\<le> length ?p \\<Longrightarrow>\n   take (length ?q) ?p \\<noteq> ?q\\<rbrakk>\n  \\<Longrightarrow> emb_step_at ?q d2 (emb_step_at ?p d1 ?t) =\n                    emb_step_at ?p d1 (emb_step_at ?q d2 ?t)\n  length p \\<le> length q \\<Longrightarrow> take (length p) q \\<noteq> p\n  length q \\<le> length p \\<Longrightarrow> take (length q) p \\<noteq> q\n\ngoal (4 subgoals):\n 1. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Left;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Left\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)\n 2. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Left;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Right\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)\n 3. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Right;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Left\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)\n 4. \\<lbrakk>t = App t1 t2; p = p0 # p'; q = q0 # q'; p0 = dir.Right;\n     t = App t1 t2; p = p0 # p'; q = q0 # q'; q0 = dir.Right\\<rbrakk>\n    \\<Longrightarrow> emb_step_at q d2 (emb_step_at p d1 t) =\n                      emb_step_at p d1 (emb_step_at q d2 t)", "by auto"], ["proof (state)\nthis:\n  emb_step_at q d2 (emb_step_at p d1 t) =\n  emb_step_at p d1 (emb_step_at q d2 t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  emb_step_at q d2 (emb_step_at p d1 t) =\n  emb_step_at p d1 (emb_step_at q d2 t)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>An embedding step inside the branch that is removed in a second embedding step is useless. \nFor example, the embedding f (g b) ->emb f b ->emb f can achieved using a single step f (g b) ->emb f.\\<close>"], ["", "lemma merge_emb_step_at:\n  \"emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) = emb_step_at p d1 t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n    emb_step_at p d1 t", "proof (induct p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       emb_step_at [] d1 (emb_step_at ([] @ [opp d1] @ q) d2 t) =\n       emb_step_at [] d1 t\n 2. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n           emb_step_at p d1 t) \\<Longrightarrow>\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n       emb_step_at (a # p) d1 t", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>t.\n       emb_step_at [] d1 (emb_step_at ([] @ [opp d1] @ q) d2 t) =\n       emb_step_at [] d1 t\n 2. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n           emb_step_at p d1 t) \\<Longrightarrow>\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n       emb_step_at (a # p) d1 t", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at [] d1 (emb_step_at ([] @ [opp d1] @ q) d2 t) =\n    emb_step_at [] d1 t", "by (cases t, simp, cases d1, simp_all)"], ["proof (state)\nthis:\n  emb_step_at [] d1 (emb_step_at ([] @ [opp d1] @ q) d2 t) =\n  emb_step_at [] d1 t\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n           emb_step_at p d1 t) \\<Longrightarrow>\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n       emb_step_at (a # p) d1 t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n           emb_step_at p d1 t) \\<Longrightarrow>\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n       emb_step_at (a # p) d1 t", "case (Cons a p)"], ["proof (state)\nthis:\n  emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 ?t) =\n  emb_step_at p d1 ?t\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n           emb_step_at p d1 t) \\<Longrightarrow>\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n       emb_step_at (a # p) d1 t", "then"], ["proof (chain)\npicking this:\n  emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 ?t) =\n  emb_step_at p d1 ?t", "show ?case"], ["proof (prove)\nusing this:\n  emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 ?t) =\n  emb_step_at p d1 ?t\n\ngoal (1 subgoal):\n 1. emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n    emb_step_at (a # p) d1 t", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>t.\n                emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n                emb_step_at p d1 t;\n     a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> emb_step_at (a # p) d1\n                       (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n                      emb_step_at (a # p) d1 t\n 2. \\<lbrakk>\\<And>t.\n                emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n                emb_step_at p d1 t;\n     a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> emb_step_at (a # p) d1\n                       (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n                      emb_step_at (a # p) d1 t", "apply (metis (full_types) emb_step_at_left_context append_Cons emb_step_at_is_App tm.collapse(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t.\n                emb_step_at p d1 (emb_step_at (p @ [opp d1] @ q) d2 t) =\n                emb_step_at p d1 t;\n     a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> emb_step_at (a # p) d1\n                       (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n                      emb_step_at (a # p) d1 t", "by (metis (full_types) emb_step_at_right_context append_Cons emb_step_at_is_App tm.collapse(2))"], ["proof (state)\nthis:\n  emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [opp d1] @ q) d2 t) =\n  emb_step_at (a # p) d1 t\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>When swapping two embedding steps of a position below another, one of the positions has to be\nslightly changed:\\<close>"], ["", "lemma swap_nested_emb_step_at:\n    \"emb_step_at (p @ q) d2 (emb_step_at p d1 t) = emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n    emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t)", "proof (induct p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       emb_step_at ([] @ q) d2 (emb_step_at [] d1 t) =\n       emb_step_at [] d1 (emb_step_at ([] @ [d1] @ q) d2 t)\n 2. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1\n            (emb_step_at (p @ [d1] @ q) d2 t)) \\<Longrightarrow>\n       emb_step_at ((a # p) @ q) d2 (emb_step_at (a # p) d1 t) =\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [d1] @ q) d2 t)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>t.\n       emb_step_at ([] @ q) d2 (emb_step_at [] d1 t) =\n       emb_step_at [] d1 (emb_step_at ([] @ [d1] @ q) d2 t)\n 2. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1\n            (emb_step_at (p @ [d1] @ q) d2 t)) \\<Longrightarrow>\n       emb_step_at ((a # p) @ q) d2 (emb_step_at (a # p) d1 t) =\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [d1] @ q) d2 t)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at ([] @ q) d2 (emb_step_at [] d1 t) =\n    emb_step_at [] d1 (emb_step_at ([] @ [d1] @ q) d2 t)", "by (cases t, simp, cases d1, simp_all)"], ["proof (state)\nthis:\n  emb_step_at ([] @ q) d2 (emb_step_at [] d1 t) =\n  emb_step_at [] d1 (emb_step_at ([] @ [d1] @ q) d2 t)\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1\n            (emb_step_at (p @ [d1] @ q) d2 t)) \\<Longrightarrow>\n       emb_step_at ((a # p) @ q) d2 (emb_step_at (a # p) d1 t) =\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [d1] @ q) d2 t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1\n            (emb_step_at (p @ [d1] @ q) d2 t)) \\<Longrightarrow>\n       emb_step_at ((a # p) @ q) d2 (emb_step_at (a # p) d1 t) =\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [d1] @ q) d2 t)", "case (Cons a p)"], ["proof (state)\nthis:\n  emb_step_at (p @ q) d2 (emb_step_at p d1 ?t) =\n  emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 ?t)\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       (\\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1\n            (emb_step_at (p @ [d1] @ q) d2 t)) \\<Longrightarrow>\n       emb_step_at ((a # p) @ q) d2 (emb_step_at (a # p) d1 t) =\n       emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [d1] @ q) d2 t)", "then"], ["proof (chain)\npicking this:\n  emb_step_at (p @ q) d2 (emb_step_at p d1 ?t) =\n  emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 ?t)", "show ?case"], ["proof (prove)\nusing this:\n  emb_step_at (p @ q) d2 (emb_step_at p d1 ?t) =\n  emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 ?t)\n\ngoal (1 subgoal):\n 1. emb_step_at ((a # p) @ q) d2 (emb_step_at (a # p) d1 t) =\n    emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [d1] @ q) d2 t)", "apply (cases a;cases t)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n                   emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        a = dir.Left;\n        \\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> emb_step_at ((a # p) @ q) d2\n                          (emb_step_at (a # p) d1 t) =\n                         emb_step_at (a # p) d1\n                          (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n                   emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        a = dir.Left;\n        \\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> emb_step_at ((a # p) @ q) d2\n                          (emb_step_at (a # p) d1 t) =\n                         emb_step_at (a # p) d1\n                          (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n 3. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n                   emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        a = dir.Right;\n        \\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> emb_step_at ((a # p) @ q) d2\n                          (emb_step_at (a # p) d1 t) =\n                         emb_step_at (a # p) d1\n                          (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n 4. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n                   emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        a = dir.Right;\n        \\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> emb_step_at ((a # p) @ q) d2\n                          (emb_step_at (a # p) d1 t) =\n                         emb_step_at (a # p) d1\n                          (emb_step_at ((a # p) @ [d1] @ q) d2 t)", "using Cons.hyps Cons.prems"], ["proof (prove)\nusing this:\n  emb_step_at (p @ q) d2 (emb_step_at p d1 ?t) =\n  emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 ?t)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n                   emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        a = dir.Left;\n        \\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> emb_step_at ((a # p) @ q) d2\n                          (emb_step_at (a # p) d1 t) =\n                         emb_step_at (a # p) d1\n                          (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n                   emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        a = dir.Left;\n        \\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> emb_step_at ((a # p) @ q) d2\n                          (emb_step_at (a # p) d1 t) =\n                         emb_step_at (a # p) d1\n                          (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n 3. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n                   emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        a = dir.Right;\n        \\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> emb_step_at ((a # p) @ q) d2\n                          (emb_step_at (a # p) d1 t) =\n                         emb_step_at (a # p) d1\n                          (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n 4. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n                   emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        a = dir.Right;\n        \\<And>t.\n           emb_step_at (p @ q) d2 (emb_step_at p d1 t) =\n           emb_step_at p d1 (emb_step_at (p @ [d1] @ q) d2 t);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> emb_step_at ((a # p) @ q) d2\n                          (emb_step_at (a # p) d1 t) =\n                         emb_step_at (a # p) d1\n                          (emb_step_at ((a # p) @ [d1] @ q) d2 t)", "by auto"], ["proof (state)\nthis:\n  emb_step_at ((a # p) @ q) d2 (emb_step_at (a # p) d1 t) =\n  emb_step_at (a # p) d1 (emb_step_at ((a # p) @ [d1] @ q) d2 t)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Performing embedding steps in order of a given priority\""], ["", "text \\<open>We want to perform all embedding steps first that modify the head or the number of arguments\nof a term. To this end we define the function prio\\_emb\\_step that performs the embedding step with\nthe highest priority possible. The priority is given by a function \"prio\" from positions to nats, where \nthe lowest number has the highest priority.\\<close>"], ["", "definition prio_emb_pos :: \"(dir list \\<Rightarrow> nat) \\<Rightarrow> ('s,'v) tm \\<Rightarrow> ('s,'v) tm \\<Rightarrow> dir list\" where\n  \"prio_emb_pos prio t s = (ARG_MIN prio p. p \\<noteq> [] \\<and> position_of t p \\<and> emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s)\""], ["", "definition prio_emb_step :: \"(dir list \\<Rightarrow> nat) \\<Rightarrow> ('s,'v) tm \\<Rightarrow> ('s,'v) tm \\<Rightarrow> ('s,'v) tm\" where\n  \"prio_emb_step prio t s = emb_step_at' (prio_emb_pos prio t s) t\""], ["", "lemma prio_emb_posI:\n  \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s \\<Longrightarrow> t \\<noteq> s \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and> position_of t (prio_emb_pos prio t s) \\<and> emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s; t \\<noteq> s\\<rbrakk>\n    \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and>\n                      position_of t (prio_emb_pos prio t s) \\<and>\n                      emb_step_at' (prio_emb_pos prio t s)\n                       t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                      s", "proof (induct rule:emb_induct_reverse)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<noteq> t \\<Longrightarrow>\n       prio_emb_pos prio t t \\<noteq> [] \\<and>\n       position_of t (prio_emb_pos prio t t) \\<and>\n       emb_step_at' (prio_emb_pos prio t t)\n        t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       t\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        u \\<noteq> s \\<Longrightarrow>\n        prio_emb_pos prio u s \\<noteq> [] \\<and>\n        position_of u (prio_emb_pos prio u s) \\<and>\n        emb_step_at' (prio_emb_pos prio u s)\n         u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s;\n        t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and>\n                         position_of t (prio_emb_pos prio t s) \\<and>\n                         emb_step_at' (prio_emb_pos prio t s)\n                          t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         s", "case (refl t)"], ["proof (state)\nthis:\n  t \\<noteq> t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<noteq> t \\<Longrightarrow>\n       prio_emb_pos prio t t \\<noteq> [] \\<and>\n       position_of t (prio_emb_pos prio t t) \\<and>\n       emb_step_at' (prio_emb_pos prio t t)\n        t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       t\n 2. \\<And>t u s.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        u \\<noteq> s \\<Longrightarrow>\n        prio_emb_pos prio u s \\<noteq> [] \\<and>\n        position_of u (prio_emb_pos prio u s) \\<and>\n        emb_step_at' (prio_emb_pos prio u s)\n         u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s;\n        t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and>\n                         position_of t (prio_emb_pos prio t s) \\<and>\n                         emb_step_at' (prio_emb_pos prio t s)\n                          t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         s", "then"], ["proof (chain)\npicking this:\n  t \\<noteq> t", "show ?case"], ["proof (prove)\nusing this:\n  t \\<noteq> t\n\ngoal (1 subgoal):\n 1. prio_emb_pos prio t t \\<noteq> [] \\<and>\n    position_of t (prio_emb_pos prio t t) \\<and>\n    emb_step_at' (prio_emb_pos prio t t) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n    t", "by simp"], ["proof (state)\nthis:\n  prio_emb_pos prio t t \\<noteq> [] \\<and>\n  position_of t (prio_emb_pos prio t t) \\<and>\n  emb_step_at' (prio_emb_pos prio t t) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b t\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        u \\<noteq> s \\<Longrightarrow>\n        prio_emb_pos prio u s \\<noteq> [] \\<and>\n        position_of u (prio_emb_pos prio u s) \\<and>\n        emb_step_at' (prio_emb_pos prio u s)\n         u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s;\n        t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and>\n                         position_of t (prio_emb_pos prio t s) \\<and>\n                         emb_step_at' (prio_emb_pos prio t s)\n                          t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        u \\<noteq> s \\<Longrightarrow>\n        prio_emb_pos prio u s \\<noteq> [] \\<and>\n        position_of u (prio_emb_pos prio u s) \\<and>\n        emb_step_at' (prio_emb_pos prio u s)\n         u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s;\n        t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and>\n                         position_of t (prio_emb_pos prio t s) \\<and>\n                         emb_step_at' (prio_emb_pos prio t s)\n                          t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         s", "case (step t u s)"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u\n  u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  u \\<noteq> s \\<Longrightarrow>\n  prio_emb_pos prio u s \\<noteq> [] \\<and>\n  position_of u (prio_emb_pos prio u s) \\<and>\n  emb_step_at' (prio_emb_pos prio u s) u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  t \\<noteq> s\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        u \\<noteq> s \\<Longrightarrow>\n        prio_emb_pos prio u s \\<noteq> [] \\<and>\n        position_of u (prio_emb_pos prio u s) \\<and>\n        emb_step_at' (prio_emb_pos prio u s)\n         u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s;\n        t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and>\n                         position_of t (prio_emb_pos prio t s) \\<and>\n                         emb_step_at' (prio_emb_pos prio t s)\n                          t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         s", "obtain p where 0:\"p \\<noteq> [] \\<and> position_of t p \\<and> emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<noteq> [] \\<and>\n        position_of t p \\<and>\n        emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using emb_step_equiv' step.hyps(1) append_butlast_last_id position_if_emb_step_at"], ["proof (prove)\nusing this:\n  (?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s) =\n  ((\\<exists>p. p \\<noteq> [] \\<and> emb_step_at' p ?t = ?s) \\<and>\n   ?t \\<noteq> ?s)\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u\n  ?xs \\<noteq> [] \\<Longrightarrow> butlast ?xs @ [last ?xs] = ?xs\n  \\<lbrakk>emb_step_at ?p ?d ?t = ?u; ?t \\<noteq> ?u\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (?p @ [?d])\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<noteq> [] \\<and>\n        position_of t p \\<and>\n        emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis step.hyps(2))"], ["proof (state)\nthis:\n  p \\<noteq> [] \\<and>\n  position_of t p \\<and> emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        u \\<noteq> s \\<Longrightarrow>\n        prio_emb_pos prio u s \\<noteq> [] \\<and>\n        position_of u (prio_emb_pos prio u s) \\<and>\n        emb_step_at' (prio_emb_pos prio u s)\n         u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s;\n        t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and>\n                         position_of t (prio_emb_pos prio t s) \\<and>\n                         emb_step_at' (prio_emb_pos prio t s)\n                          t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         s", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> [] \\<and>\n  position_of t p \\<and> emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "have \"prio_emb_pos prio t s \\<noteq> [] \\<and> position_of t (prio_emb_pos prio t s) \\<and> emb_step_at' (prio_emb_pos prio t s) t  \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\nusing this:\n  p \\<noteq> [] \\<and>\n  position_of t p \\<and> emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. prio_emb_pos prio t s \\<noteq> [] \\<and>\n    position_of t (prio_emb_pos prio t s) \\<and>\n    emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n    s", "using prio_emb_pos_def step.hyps(2) arg_min_natI"], ["proof (prove)\nusing this:\n  p \\<noteq> [] \\<and>\n  position_of t p \\<and> emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  prio_emb_pos ?prio ?t ?s =\n  (ARG_MIN ?prio p.\n      p \\<noteq> [] \\<and>\n      position_of ?t p \\<and>\n      emb_step_at' p ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s)\n  u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  ?P ?k \\<Longrightarrow> ?P (arg_min ?m ?P)\n\ngoal (1 subgoal):\n 1. prio_emb_pos prio t s \\<noteq> [] \\<and>\n    position_of t (prio_emb_pos prio t s) \\<and>\n    emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n    s", "by (metis (mono_tags, lifting))"], ["proof (state)\nthis:\n  prio_emb_pos prio t s \\<noteq> [] \\<and>\n  position_of t (prio_emb_pos prio t s) \\<and>\n  emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>t u s.\n       \\<lbrakk>t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u;\n        u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s;\n        u \\<noteq> s \\<Longrightarrow>\n        prio_emb_pos prio u s \\<noteq> [] \\<and>\n        position_of u (prio_emb_pos prio u s) \\<and>\n        emb_step_at' (prio_emb_pos prio u s)\n         u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        s;\n        t \\<noteq> s\\<rbrakk>\n       \\<Longrightarrow> prio_emb_pos prio t s \\<noteq> [] \\<and>\n                         position_of t (prio_emb_pos prio t s) \\<and>\n                         emb_step_at' (prio_emb_pos prio t s)\n                          t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         s", "then"], ["proof (chain)\npicking this:\n  prio_emb_pos prio t s \\<noteq> [] \\<and>\n  position_of t (prio_emb_pos prio t s) \\<and>\n  emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "show ?case"], ["proof (prove)\nusing this:\n  prio_emb_pos prio t s \\<noteq> [] \\<and>\n  position_of t (prio_emb_pos prio t s) \\<and>\n  emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. prio_emb_pos prio t s \\<noteq> [] \\<and>\n    position_of t (prio_emb_pos prio t s) \\<and>\n    emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n    s", "by blast"], ["proof (state)\nthis:\n  prio_emb_pos prio t s \\<noteq> [] \\<and>\n  position_of t (prio_emb_pos prio t s) \\<and>\n  emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prio_emb_pos_le:\n  assumes \"p \\<noteq> []\" \"position_of t p\" \"emb_step_at' p t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"\n  shows \"prio (prio_emb_pos prio t s) \\<le> prio p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio (prio_emb_pos prio t s) \\<le> prio p", "by (simp add: arg_min_nat_le assms(1) assms(2) assms(3) prio_emb_pos_def)"], ["", "text \\<open>We want an embedding step sequence in which the priority numbers monotonely increase. We can\nget such a sequence if the priority function assigns greater values to deeper positions.\\<close>"], ["", "lemma prio_emb_pos_increase:\n  assumes\n    \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\" \"t \\<noteq> s\" \"prio_emb_step prio t s \\<noteq> s\" and\n    valid_prio: \"\\<And>p q dp dq. prio (p @ [dp]) > prio (q @ [dq]) \\<Longrightarrow> take (length p) q \\<noteq> p\" \n  shows\n    \"prio (prio_emb_pos prio t s) \\<le> prio (prio_emb_pos prio (prio_emb_step prio t s) s)\" \n    (is \"prio ?p1 \\<le> prio ?p2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. prio (prio_emb_pos prio t s)\n    \\<le> prio (prio_emb_pos prio (prio_emb_step prio t s) s)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "assume contr: \"\\<not> prio ?p1 \\<le> prio ?p2\""], ["proof (state)\nthis:\n  \\<not> prio (prio_emb_pos prio t s)\n         \\<le> prio (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "have \"take (length (butlast ?p1)) (butlast ?p2) \\<noteq> (butlast ?p1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (butlast (prio_emb_pos prio t s)))\n     (butlast (prio_emb_pos prio (prio_emb_step prio t s) s)) \\<noteq>\n    butlast (prio_emb_pos prio t s)", "using contr valid_prio"], ["proof (prove)\nusing this:\n  \\<not> prio (prio_emb_pos prio t s)\n         \\<le> prio (prio_emb_pos prio (prio_emb_step prio t s) s)\n  prio (?q @ [?dq]) < prio (?p @ [?dp]) \\<Longrightarrow>\n  take (length ?p) ?q \\<noteq> ?p\n\ngoal (1 subgoal):\n 1. take (length (butlast (prio_emb_pos prio t s)))\n     (butlast (prio_emb_pos prio (prio_emb_step prio t s) s)) \\<noteq>\n    butlast (prio_emb_pos prio t s)", "by (metis append_butlast_last_id assms(1) assms(2) assms(3) not_le_imp_less prio_emb_posI prio_emb_step_def)"], ["proof (state)\nthis:\n  take (length (butlast (prio_emb_pos prio t s)))\n   (butlast (prio_emb_pos prio (prio_emb_step prio t s) s)) \\<noteq>\n  butlast (prio_emb_pos prio t s)\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  take (length (butlast (prio_emb_pos prio t s)))\n   (butlast (prio_emb_pos prio (prio_emb_step prio t s) s)) \\<noteq>\n  butlast (prio_emb_pos prio t s)", "have butlast_neq: \"butlast ?p2 \\<noteq> butlast ?p1\""], ["proof (prove)\nusing this:\n  take (length (butlast (prio_emb_pos prio t s)))\n   (butlast (prio_emb_pos prio (prio_emb_step prio t s) s)) \\<noteq>\n  butlast (prio_emb_pos prio t s)\n\ngoal (1 subgoal):\n 1. butlast (prio_emb_pos prio (prio_emb_step prio t s) s) \\<noteq>\n    butlast (prio_emb_pos prio t s)", "by auto"], ["proof (state)\nthis:\n  butlast (prio_emb_pos prio (prio_emb_step prio t s) s) \\<noteq>\n  butlast (prio_emb_pos prio t s)\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "define u where \"u = prio_emb_step prio (prio_emb_step prio t s) s\""], ["proof (state)\nthis:\n  u = prio_emb_step prio (prio_emb_step prio t s) s\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  u = prio_emb_step prio (prio_emb_step prio t s) s", "have \"u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\nusing this:\n  u = prio_emb_step prio (prio_emb_step prio t s) s\n\ngoal (1 subgoal):\n 1. u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by (metis assms(1) assms(2) assms(3) prio_emb_posI prio_emb_step_def)"], ["proof (state)\nthis:\n  u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "define p where \"p = butlast ?p2\""], ["proof (state)\nthis:\n  p = butlast (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "define q where \"q = drop (Suc (length (butlast ?p2))) (butlast ?p1)\""], ["proof (state)\nthis:\n  q =\n  drop\n   (Suc (length (butlast (prio_emb_pos prio (prio_emb_step prio t s) s))))\n   (butlast (prio_emb_pos prio t s))\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "define dp where \"dp = last ?p2\""], ["proof (state)\nthis:\n  dp = last (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "define dq where \"dq = last ?p1\""], ["proof (state)\nthis:\n  dq = last (prio_emb_pos prio t s)\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "define f where \"f = butlast ?p1 ! length (butlast ?p2)\""], ["proof (state)\nthis:\n  f =\n  butlast (prio_emb_pos prio t s) !\n  length (butlast (prio_emb_pos prio (prio_emb_step prio t s) s))\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "have position: \"position_of (prio_emb_step prio t s) ?p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of (prio_emb_step prio t s)\n     (prio_emb_pos prio (prio_emb_step prio t s) s)", "by (metis assms(1) assms(2) assms(3) prio_emb_posI prio_emb_step_def)"], ["proof (state)\nthis:\n  position_of (prio_emb_step prio t s)\n   (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. \\<not> prio (prio_emb_pos prio t s)\n           \\<le> prio\n                  (prio_emb_pos prio (prio_emb_step prio t s)\n                    s) \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"take (length p) (butlast ?p1) = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) = p \\<Longrightarrow>\n    False\n 2. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "case True"], ["proof (state)\nthis:\n  take (length p) (butlast (prio_emb_pos prio t s)) = p\n\ngoal (2 subgoals):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) = p \\<Longrightarrow>\n    False\n 2. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "have \"length (butlast ?p1) \\<noteq> length p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (butlast (prio_emb_pos prio t s)) \\<noteq> length p", "using butlast_neq"], ["proof (prove)\nusing this:\n  butlast (prio_emb_pos prio (prio_emb_step prio t s) s) \\<noteq>\n  butlast (prio_emb_pos prio t s)\n\ngoal (1 subgoal):\n 1. length (butlast (prio_emb_pos prio t s)) \\<noteq> length p", "using True p_def"], ["proof (prove)\nusing this:\n  butlast (prio_emb_pos prio (prio_emb_step prio t s) s) \\<noteq>\n  butlast (prio_emb_pos prio t s)\n  take (length p) (butlast (prio_emb_pos prio t s)) = p\n  p = butlast (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. length (butlast (prio_emb_pos prio t s)) \\<noteq> length p", "by auto"], ["proof (state)\nthis:\n  length (butlast (prio_emb_pos prio t s)) \\<noteq> length p\n\ngoal (2 subgoals):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) = p \\<Longrightarrow>\n    False\n 2. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  length (butlast (prio_emb_pos prio t s)) \\<noteq> length p", "have \"length (butlast ?p1) > length p\""], ["proof (prove)\nusing this:\n  length (butlast (prio_emb_pos prio t s)) \\<noteq> length p\n\ngoal (1 subgoal):\n 1. length p < length (butlast (prio_emb_pos prio t s))", "using nat_le_linear True nat_neq_iff"], ["proof (prove)\nusing this:\n  length (butlast (prio_emb_pos prio t s)) \\<noteq> length p\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n  take (length p) (butlast (prio_emb_pos prio t s)) = p\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n\ngoal (1 subgoal):\n 1. length p < length (butlast (prio_emb_pos prio t s))", "by auto"], ["proof (state)\nthis:\n  length p < length (butlast (prio_emb_pos prio t s))\n\ngoal (2 subgoals):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) = p \\<Longrightarrow>\n    False\n 2. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  length p < length (butlast (prio_emb_pos prio t s))", "have 0:\"p @ f # q = butlast ?p1\""], ["proof (prove)\nusing this:\n  length p < length (butlast (prio_emb_pos prio t s))\n\ngoal (1 subgoal):\n 1. p @ f # q = butlast (prio_emb_pos prio t s)", "by (metis True f_def id_take_nth_drop p_def q_def)"], ["proof (state)\nthis:\n  p @ f # q = butlast (prio_emb_pos prio t s)\n\ngoal (2 subgoals):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) = p \\<Longrightarrow>\n    False\n 2. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "have u1: \"u = emb_step_at p dp (emb_step_at (p @ f # q) dq t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = emb_step_at p dp (emb_step_at (p @ f # q) dq t)", "unfolding 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. u =\n    emb_step_at p dp (emb_step_at (butlast (prio_emb_pos prio t s)) dq t)", "unfolding p_def u_def dp_def dq_def prio_emb_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at'\n     (prio_emb_pos prio (emb_step_at' (prio_emb_pos prio t s) t) s)\n     (emb_step_at' (prio_emb_pos prio t s) t) =\n    emb_step_at'\n     (prio_emb_pos prio (emb_step_at' (prio_emb_pos prio t s) t) s)\n     (emb_step_at' (prio_emb_pos prio t s) t)", "by simp"], ["proof (state)\nthis:\n  u = emb_step_at p dp (emb_step_at (p @ f # q) dq t)\n\ngoal (2 subgoals):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) = p \\<Longrightarrow>\n    False\n 2. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"f = dp\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = dp \\<Longrightarrow> False\n 2. f \\<noteq> dp \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  f = dp\n\ngoal (2 subgoals):\n 1. f = dp \\<Longrightarrow> False\n 2. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f = dp", "have \"u = emb_step_at (p @ q) dq (emb_step_at p dp t)\""], ["proof (prove)\nusing this:\n  f = dp\n\ngoal (1 subgoal):\n 1. u = emb_step_at (p @ q) dq (emb_step_at p dp t)", "using swap_nested_emb_step_at[of p q dq dp t] u1"], ["proof (prove)\nusing this:\n  f = dp\n  emb_step_at (p @ q) dq (emb_step_at p dp t) =\n  emb_step_at p dp (emb_step_at (p @ [dp] @ q) dq t)\n  u = emb_step_at p dp (emb_step_at (p @ f # q) dq t)\n\ngoal (1 subgoal):\n 1. u = emb_step_at (p @ q) dq (emb_step_at p dp t)", "by simp"], ["proof (state)\nthis:\n  u = emb_step_at (p @ q) dq (emb_step_at p dp t)\n\ngoal (2 subgoals):\n 1. f = dp \\<Longrightarrow> False\n 2. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  u = emb_step_at (p @ q) dq (emb_step_at p dp t)", "have \"emb_step_at p dp t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<or> emb_step_at p dp t = u\""], ["proof (prove)\nusing this:\n  u = emb_step_at (p @ q) dq (emb_step_at p dp t)\n\ngoal (1 subgoal):\n 1. emb_step_at p dp t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<or>\n    emb_step_at p dp t = u", "using emb_step_equiv[of \"emb_step_at p dp t\" u]"], ["proof (prove)\nusing this:\n  u = emb_step_at (p @ q) dq (emb_step_at p dp t)\n  (emb_step_at p dp t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u) =\n  ((\\<exists>pa d. emb_step_at pa d (emb_step_at p dp t) = u) \\<and>\n   emb_step_at p dp t \\<noteq> u)\n\ngoal (1 subgoal):\n 1. emb_step_at p dp t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<or>\n    emb_step_at p dp t = u", "by blast"], ["proof (state)\nthis:\n  emb_step_at p dp t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<or>\n  emb_step_at p dp t = u\n\ngoal (2 subgoals):\n 1. f = dp \\<Longrightarrow> False\n 2. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  emb_step_at p dp t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<or>\n  emb_step_at p dp t = u", "have \"emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\nusing this:\n  emb_step_at p dp t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<or>\n  emb_step_at p dp t = u\n\ngoal (1 subgoal):\n 1. emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "using \\<open>u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<close> emb_prepend_step"], ["proof (prove)\nusing this:\n  emb_step_at p dp t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b u \\<or>\n  emb_step_at p dp t = u\n  u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  \\<lbrakk>?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?u;\n   ?u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n\ngoal (1 subgoal):\n 1. emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by blast"], ["proof (state)\nthis:\n  emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (2 subgoals):\n 1. f = dp \\<Longrightarrow> False\n 2. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "have \"position_of t ?p2\""], ["proof (prove)\nusing this:\n  emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)", "by (metis position \"0\" position_of_Nil True append_Cons append_Nil2 append_butlast_last_id \n        append_eq_append_conv_if append_eq_conv_conj dp_def dq_def p_def pos_emb_step_at_nested prio_emb_step_def)"], ["proof (state)\nthis:\n  position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (2 subgoals):\n 1. f = dp \\<Longrightarrow> False\n 2. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)", "show ?thesis"], ["proof (prove)\nusing this:\n  position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. False", "using assms(1) assms(2) assms(3) contr dp_def p_def prio_emb_posI \n         prio_emb_pos_le prio_emb_step_def"], ["proof (prove)\nusing this:\n  position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n  t \\<noteq> s\n  prio_emb_step prio t s \\<noteq> s\n  \\<not> prio (prio_emb_pos prio t s)\n         \\<le> prio (prio_emb_pos prio (prio_emb_step prio t s) s)\n  dp = last (prio_emb_pos prio (prio_emb_step prio t s) s)\n  p = butlast (prio_emb_pos prio (prio_emb_step prio t s) s)\n  \\<lbrakk>?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s; ?t \\<noteq> ?s\\<rbrakk>\n  \\<Longrightarrow> prio_emb_pos ?prio ?t ?s \\<noteq> [] \\<and>\n                    position_of ?t (prio_emb_pos ?prio ?t ?s) \\<and>\n                    emb_step_at' (prio_emb_pos ?prio ?t ?s)\n                     ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    ?s\n  \\<lbrakk>?p \\<noteq> []; position_of ?t ?p;\n   emb_step_at' ?p ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\\<rbrakk>\n  \\<Longrightarrow> ?prio (prio_emb_pos ?prio ?t ?s) \\<le> ?prio ?p\n  prio_emb_step ?prio ?t ?s = emb_step_at' (prio_emb_pos ?prio ?t ?s) ?t\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<open>emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<close>)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. f \\<noteq> dp \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> dp \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  f \\<noteq> dp\n\ngoal (1 subgoal):\n 1. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> dp", "have \"opp dp = f\""], ["proof (prove)\nusing this:\n  f \\<noteq> dp\n\ngoal (1 subgoal):\n 1. opp dp = f", "by (metis dir.exhaust opp_def)"], ["proof (state)\nthis:\n  opp dp = f\n\ngoal (1 subgoal):\n 1. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  opp dp = f", "have \"u = emb_step_at p dp t\""], ["proof (prove)\nusing this:\n  opp dp = f\n\ngoal (1 subgoal):\n 1. u = emb_step_at p dp t", "by (subst merge_emb_step_at[of p dp q dq t, symmetric], simp add: u1)"], ["proof (state)\nthis:\n  u = emb_step_at p dp t\n\ngoal (1 subgoal):\n 1. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  u = emb_step_at p dp t", "have \"position_of t ?p2\""], ["proof (prove)\nusing this:\n  u = emb_step_at p dp t\n\ngoal (1 subgoal):\n 1. position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)", "by (metis Cons_nth_drop_Suc position_of_Nil True dp_def \n            \\<open>length p < length (butlast ?p1)\\<close> \\<open>opp dp = f\\<close> append.assoc append_butlast_last_id \n            append_take_drop_id f_def list.sel(1) p_def pos_emb_step_at_opp position take_hd_drop prio_emb_step_def)"], ["proof (state)\nthis:\n  position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. f \\<noteq> dp \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)", "show ?thesis"], ["proof (prove)\nusing this:\n  position_of t (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. False", "by (metis dp_def p_def \\<open>u = emb_step_at p dp t\\<close> \\<open>u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<close> assms(1) assms(2) assms(3) contr \n         prio_emb_posI prio_emb_pos_le prio_emb_step_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "case False"], ["proof (state)\nthis:\n  take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq> p\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "define p' where \"p' = butlast ?p1\""], ["proof (state)\nthis:\n  p' = butlast (prio_emb_pos prio t s)\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "have \"take (length p') p \\<noteq> p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length p') p \\<noteq> p'", "using \\<open>take (length (butlast ?p1)) (butlast ?p2) \\<noteq> butlast ?p1\\<close> p'_def p_def"], ["proof (prove)\nusing this:\n  take (length (butlast (prio_emb_pos prio t s)))\n   (butlast (prio_emb_pos prio (prio_emb_step prio t s) s)) \\<noteq>\n  butlast (prio_emb_pos prio t s)\n  p' = butlast (prio_emb_pos prio t s)\n  p = butlast (prio_emb_pos prio (prio_emb_step prio t s) s)\n\ngoal (1 subgoal):\n 1. take (length p') p \\<noteq> p'", "by blast"], ["proof (state)\nthis:\n  take (length p') p \\<noteq> p'\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "have \"take (length p) p' \\<noteq> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length p) p' \\<noteq> p", "using False p'_def"], ["proof (prove)\nusing this:\n  take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq> p\n  p' = butlast (prio_emb_pos prio t s)\n\ngoal (1 subgoal):\n 1. take (length p) p' \\<noteq> p", "by metis"], ["proof (state)\nthis:\n  take (length p) p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "have \"u = emb_step_at p dp (emb_step_at p' dq t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = emb_step_at p dp (emb_step_at p' dq t)", "unfolding u_def prio_emb_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. emb_step_at'\n     (prio_emb_pos prio (emb_step_at' (prio_emb_pos prio t s) t) s)\n     (emb_step_at' (prio_emb_pos prio t s) t) =\n    emb_step_at p dp (emb_step_at p' dq t)", "by (simp add: dp_def dq_def p'_def p_def prio_emb_step_def)"], ["proof (state)\nthis:\n  u = emb_step_at p dp (emb_step_at p' dq t)\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  u = emb_step_at p dp (emb_step_at p' dq t)", "have \"u = emb_step_at p' dq (emb_step_at p dp t)\""], ["proof (prove)\nusing this:\n  u = emb_step_at p dp (emb_step_at p' dq t)\n\ngoal (1 subgoal):\n 1. u = emb_step_at p' dq (emb_step_at p dp t)", "using swap_disjunct_emb_step_at[of p p' dq dp t]"], ["proof (prove)\nusing this:\n  u = emb_step_at p dp (emb_step_at p' dq t)\n  \\<lbrakk>length p \\<le> length p' \\<Longrightarrow>\n           take (length p) p' \\<noteq> p;\n   length p' \\<le> length p \\<Longrightarrow>\n   take (length p') p \\<noteq> p'\\<rbrakk>\n  \\<Longrightarrow> emb_step_at p' dq (emb_step_at p dp t) =\n                    emb_step_at p dp (emb_step_at p' dq t)\n\ngoal (1 subgoal):\n 1. u = emb_step_at p' dq (emb_step_at p dp t)", "by (simp add: \\<open>take (length p') p \\<noteq> p'\\<close> \\<open>take (length p) p' \\<noteq> p\\<close>)"], ["proof (state)\nthis:\n  u = emb_step_at p' dq (emb_step_at p dp t)\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  u = emb_step_at p' dq (emb_step_at p dp t)", "have \"emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\nusing this:\n  u = emb_step_at p' dq (emb_step_at p dp t)\n\ngoal (1 subgoal):\n 1. emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s", "by (metis \\<open>u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<close> emb_prepend_step emb_step_equiv)"], ["proof (state)\nthis:\n  emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "have \"position_of t (p @ [dp])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of t (p @ [dp])", "using pos_emb_step_at_disjunct"], ["proof (prove)\nusing this:\n  \\<lbrakk>take (length ?q) ?p \\<noteq> ?q;\n   take (length ?p) ?q \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> position_of ?t (?p @ [?d1.0]) =\n                    position_of (emb_step_at ?q ?d2.0 ?t) (?p @ [?d1.0])\n\ngoal (1 subgoal):\n 1. position_of t (p @ [dp])", "by (metis \\<open>take (length p') p \\<noteq> p'\\<close> \\<open>take (length p) p' \\<noteq> p\\<close> append_butlast_last_id butlast.simps(1) \n      dp_def list.size(3) p'_def p_def position take_eq_Nil prio_emb_step_def)"], ["proof (state)\nthis:\n  position_of t (p @ [dp])\n\ngoal (1 subgoal):\n 1. take (length p) (butlast (prio_emb_pos prio t s)) \\<noteq>\n    p \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  position_of t (p @ [dp])", "show ?thesis"], ["proof (prove)\nusing this:\n  position_of t (p @ [dp])\n\ngoal (1 subgoal):\n 1. False", "by (metis False \\<open>emb_step_at p dp t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<close> append_butlast_last_id butlast.simps(1) contr \n      dp_def list.size(3) p_def take_eq_Nil prio_emb_pos_le)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sequence_prio_emb_steps:\n  assumes \n    \"t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\"\n  shows\n    \"\\<exists>us. us\\<noteq>[] \\<and> hd us = t \\<and> last us = s \\<and> \n    (\\<forall>i. Suc i < length us \\<longrightarrow> (prio_emb_step prio (us ! i) s = us ! Suc i \\<and> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "using assms"], ["proof (prove)\nusing this:\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "proof (induct t rule:measure_induct_rule[of hsize])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>hsize y < hsize x;\n                    y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>us.\n  us \\<noteq> [] \\<and>\n  hd us = y \\<and>\n  last us = s \\<and>\n  (\\<forall>i.\n      Suc i < length us \\<longrightarrow>\n      prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n      us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        x \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = x \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                prio_emb_step prio (us ! i) s =\n                                us ! Suc i \\<and>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "case (less t)"], ["proof (state)\nthis:\n  \\<lbrakk>hsize ?y < hsize t;\n   ?y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>us.\n                       us \\<noteq> [] \\<and>\n                       hd us = ?y \\<and>\n                       last us = s \\<and>\n                       (\\<forall>i.\n                           Suc i < length us \\<longrightarrow>\n                           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n                           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                           us ! Suc i)\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>hsize y < hsize x;\n                    y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>us.\n  us \\<noteq> [] \\<and>\n  hd us = y \\<and>\n  last us = s \\<and>\n  (\\<forall>i.\n      Suc i < length us \\<longrightarrow>\n      prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n      us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i);\n        x \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            us \\<noteq> [] \\<and>\n                            hd us = x \\<and>\n                            last us = s \\<and>\n                            (\\<forall>i.\n                                Suc i < length us \\<longrightarrow>\n                                prio_emb_step prio (us ! i) s =\n                                us ! Suc i \\<and>\n                                us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                us ! Suc i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "proof (cases \"t = s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t = s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n 2. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "case True"], ["proof (state)\nthis:\n  t = s\n\ngoal (2 subgoals):\n 1. t = s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n 2. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "then"], ["proof (chain)\npicking this:\n  t = s", "show ?thesis"], ["proof (prove)\nusing this:\n  t = s\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "case False"], ["proof (state)\nthis:\n  t \\<noteq> s\n\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "then"], ["proof (chain)\npicking this:\n  t \\<noteq> s", "have \"prio_emb_pos prio t s \\<noteq> []\" \"emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\""], ["proof (prove)\nusing this:\n  t \\<noteq> s\n\ngoal (1 subgoal):\n 1. prio_emb_pos prio t s \\<noteq> [] &&&\n    emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n    s", "using prio_emb_posI less"], ["proof (prove)\nusing this:\n  t \\<noteq> s\n  \\<lbrakk>?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s; ?t \\<noteq> ?s\\<rbrakk>\n  \\<Longrightarrow> prio_emb_pos ?prio ?t ?s \\<noteq> [] \\<and>\n                    position_of ?t (prio_emb_pos ?prio ?t ?s) \\<and>\n                    emb_step_at' (prio_emb_pos ?prio ?t ?s)\n                     ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    ?s\n  \\<lbrakk>hsize ?y < hsize t;\n   ?y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>us.\n                       us \\<noteq> [] \\<and>\n                       hd us = ?y \\<and>\n                       last us = s \\<and>\n                       (\\<forall>i.\n                           Suc i < length us \\<longrightarrow>\n                           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n                           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                           us ! Suc i)\n  t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. prio_emb_pos prio t s \\<noteq> [] &&&\n    emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n    s", "by blast+"], ["proof (state)\nthis:\n  prio_emb_pos prio t s \\<noteq> []\n  emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "have emb_step1:\"t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at' (prio_emb_pos prio t s) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n    emb_step_at' (prio_emb_pos prio t s) t", "by (simp add: False emb_step_at_if_position less.prems prio_emb_posI)"], ["proof (state)\nthis:\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n  emb_step_at' (prio_emb_pos prio t s) t\n\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "have \"hsize (emb_step_at' (prio_emb_pos prio t s) t) < hsize t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hsize (emb_step_at' (prio_emb_pos prio t s) t) < hsize t", "by (simp add: False emb_step_at_if_position emb_step_hsize less.prems(1) prio_emb_posI)"], ["proof (state)\nthis:\n  hsize (emb_step_at' (prio_emb_pos prio t s) t) < hsize t\n\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "then"], ["proof (chain)\npicking this:\n  hsize (emb_step_at' (prio_emb_pos prio t s) t) < hsize t", "obtain us where us_def:\n      \"us \\<noteq> []\" \n      \"hd us = emb_step_at' (prio_emb_pos prio t s) t\" \n      \"last us = s\" \n      \"\\<forall>i. Suc i < length us \\<longrightarrow> prio_emb_step prio (us ! i) s = us ! Suc i \\<and> us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\""], ["proof (prove)\nusing this:\n  hsize (emb_step_at' (prio_emb_pos prio t s) t) < hsize t\n\ngoal (1 subgoal):\n 1. (\\<And>us.\n        \\<lbrakk>us \\<noteq> [];\n         hd us = emb_step_at' (prio_emb_pos prio t s) t; last us = s;\n         \\<forall>i.\n            Suc i < length us \\<longrightarrow>\n            prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n            us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using less(1)[of \"emb_step_at' (prio_emb_pos prio t s) t\"] emb_step_hsize \n        \\<open>emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\\<close>"], ["proof (prove)\nusing this:\n  hsize (emb_step_at' (prio_emb_pos prio t s) t) < hsize t\n  \\<lbrakk>hsize (emb_step_at' (prio_emb_pos prio t s) t) < hsize t;\n   emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n   s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>us.\n                       us \\<noteq> [] \\<and>\n                       hd us = emb_step_at' (prio_emb_pos prio t s) t \\<and>\n                       last us = s \\<and>\n                       (\\<forall>i.\n                           Suc i < length us \\<longrightarrow>\n                           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n                           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                           us ! Suc i)\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s \\<Longrightarrow>\n  hsize ?s < hsize ?t\n  emb_step_at' (prio_emb_pos prio t s) t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b s\n\ngoal (1 subgoal):\n 1. (\\<And>us.\n        \\<lbrakk>us \\<noteq> [];\n         hd us = emb_step_at' (prio_emb_pos prio t s) t; last us = s;\n         \\<forall>i.\n            Suc i < length us \\<longrightarrow>\n            prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n            us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  us \\<noteq> []\n  hd us = emb_step_at' (prio_emb_pos prio t s) t\n  last us = s\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "have \"t # us \\<noteq> []\" \" hd (t # us) = t\" \"last (t # us) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t # us \\<noteq> [] &&& hd (t # us) = t &&& last (t # us) = s", "using us_def"], ["proof (prove)\nusing this:\n  us \\<noteq> []\n  hd us = emb_step_at' (prio_emb_pos prio t s) t\n  last us = s\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n\ngoal (1 subgoal):\n 1. t # us \\<noteq> [] &&& hd (t # us) = t &&& last (t # us) = s", "by simp_all"], ["proof (state)\nthis:\n  t # us \\<noteq> []\n  hd (t # us) = t\n  last (t # us) = s\n\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "have\n      \"\\<forall>i. Suc i < length (t # us) \\<longrightarrow> (prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and> (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       Suc i < length (t # us) \\<longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length (t # us) \\<Longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length (t # us) \\<Longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "assume \" Suc i < length (t # us)\""], ["proof (state)\nthis:\n  Suc i < length (t # us)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length (t # us) \\<Longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "show \"prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and> (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n    (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n    (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n    (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n    (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "using \"0\" emb_step1 hd_conv_nth prio_emb_step_def us_def(1) us_def(2)"], ["proof (prove)\nusing this:\n  i = 0\n  t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n  emb_step_at' (prio_emb_pos prio t s) t\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  prio_emb_step ?prio ?t ?s = emb_step_at' (prio_emb_pos ?prio ?t ?s) ?t\n  us \\<noteq> []\n  hd us = emb_step_at' (prio_emb_pos prio t s) t\n\ngoal (1 subgoal):\n 1. prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n    (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "by fastforce"], ["proof (state)\nthis:\n  prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n  (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "case (Suc nat)"], ["proof (state)\nthis:\n  i = Suc nat\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n       (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "then"], ["proof (chain)\npicking this:\n  i = Suc nat", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Suc nat\n\ngoal (1 subgoal):\n 1. prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n    (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "using \\<open>Suc i < length (t # us)\\<close> us_def(4)"], ["proof (prove)\nusing this:\n  i = Suc nat\n  Suc i < length (t # us)\n  \\<forall>i.\n     Suc i < length us \\<longrightarrow>\n     prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n     us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i\n\ngoal (1 subgoal):\n 1. prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n    (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "by auto"], ["proof (state)\nthis:\n  prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n  (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n  (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i.\n     Suc i < length (t # us) \\<longrightarrow>\n     prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n     (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\n\ngoal (1 subgoal):\n 1. t \\<noteq> s \\<Longrightarrow>\n    \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "then"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     Suc i < length (t # us) \\<longrightarrow>\n     prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n     (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     Suc i < length (t # us) \\<longrightarrow>\n     prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n     (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "using \\<open>hd (t # us) = t\\<close> \\<open>last (t # us) = s\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     Suc i < length (t # us) \\<longrightarrow>\n     prio_emb_step prio ((t # us) ! i) s = (t # us) ! Suc i \\<and>\n     (t # us) ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b (t # us) ! Suc i\n  hd (t # us) = t\n  last (t # us) = s\n\ngoal (1 subgoal):\n 1. \\<exists>us.\n       us \\<noteq> [] \\<and>\n       hd us = t \\<and>\n       last us = s \\<and>\n       (\\<forall>i.\n           Suc i < length us \\<longrightarrow>\n           prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n           us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)", "by blast"], ["proof (state)\nthis:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = t \\<and>\n     last us = s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         prio_emb_step prio (us ! i) s = us ! Suc i \\<and>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Embedding steps under arguments\""], ["", "text \\<open>We want to perform positions that modify the head and the umber of arguments first. Formally these\npositions can be characterized as \"list\\_all (op = Left) p\". We show here that embeddings at other positions\ndo not modify the head, the number of arguments. Moreover, for each argument, the argument after the step\nis an embedding of the argument before the step. \\<close>"], ["", "lemma emb_step_under_args_head:\n  assumes\n    \"\\<not> list_all (\\<lambda>x. x = Left) p\"\n  shows\n    \"head (emb_step_at p d t) = head t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (emb_step_at p d t) = head t", "using assms"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p\n\ngoal (1 subgoal):\n 1. head (emb_step_at p d t) = head t", "proof(induction p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<not> list_all (\\<lambda>x. x = dir.Left) [] \\<Longrightarrow>\n       head (emb_step_at [] d t) = head t\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "case Nil"], ["proof (state)\nthis:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<not> list_all (\\<lambda>x. x = dir.Left) [] \\<Longrightarrow>\n       head (emb_step_at [] d t) = head t\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "then"], ["proof (chain)\npicking this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []\n\ngoal (1 subgoal):\n 1. head (emb_step_at [] d t) = head t", "by simp"], ["proof (state)\nthis:\n  head (emb_step_at [] d t) = head t\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "case (Cons a p)"], ["proof (state)\nthis:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p \\<Longrightarrow>\n  head (emb_step_at p d ?t) = head ?t\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "then"], ["proof (chain)\npicking this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p \\<Longrightarrow>\n  head (emb_step_at p d ?t) = head ?t\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p \\<Longrightarrow>\n  head (emb_step_at p d ?t) = head ?t\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\n\ngoal (1 subgoal):\n 1. head (emb_step_at (a # p) d t) = head t", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "case (Hd x)"], ["proof (state)\nthis:\n  t = Hd x\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "then"], ["proof (chain)\npicking this:\n  t = Hd x", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Hd x\n\ngoal (1 subgoal):\n 1. head (emb_step_at (a # p) d t) = head t", "by (metis emb_step_at_head)"], ["proof (state)\nthis:\n  head (emb_step_at (a # p) d t) = head t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "case (App t1 t2)"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   head (emb_step_at p d t) = head t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "then"], ["proof (chain)\npicking this:\n  t = App t1 t2", "show ?thesis"], ["proof (prove)\nusing this:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. head (emb_step_at (a # p) d t) = head t", "proof (cases a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "case Left"], ["proof (state)\nthis:\n  a = dir.Left\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "then"], ["proof (chain)\npicking this:\n  a = dir.Left", "show ?thesis"], ["proof (prove)\nusing this:\n  a = dir.Left\n\ngoal (1 subgoal):\n 1. head (emb_step_at (a # p) d t) = head t", "using Cons"], ["proof (prove)\nusing this:\n  a = dir.Left\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p \\<Longrightarrow>\n  head (emb_step_at p d ?t) = head ?t\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\n\ngoal (1 subgoal):\n 1. head (emb_step_at (a # p) d t) = head t", "by (simp add: App)"], ["proof (state)\nthis:\n  head (emb_step_at (a # p) d t) = head t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "case Right"], ["proof (state)\nthis:\n  a = dir.Right\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> head (emb_step_at (a # p) d t) = head t", "then"], ["proof (chain)\npicking this:\n  a = dir.Right", "show ?thesis"], ["proof (prove)\nusing this:\n  a = dir.Right\n\ngoal (1 subgoal):\n 1. head (emb_step_at (a # p) d t) = head t", "by (metis App emb_step_at_right_context head_App)"], ["proof (state)\nthis:\n  head (emb_step_at (a # p) d t) = head t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  head (emb_step_at (a # p) d t) = head t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  head (emb_step_at (a # p) d t) = head t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_step_under_args_num_args:\n  assumes\n    \"\\<not> list_all (\\<lambda>x. x = Left) p\"\n  shows\n    \"num_args (emb_step_at p d t) = num_args t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_args (emb_step_at p d t) = num_args t", "using assms"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p\n\ngoal (1 subgoal):\n 1. num_args (emb_step_at p d t) = num_args t", "proof(induction p arbitrary:t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<not> list_all (\\<lambda>x. x = dir.Left) [] \\<Longrightarrow>\n       num_args (emb_step_at [] d t) = num_args t\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "case Nil"], ["proof (state)\nthis:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<not> list_all (\\<lambda>x. x = dir.Left) [] \\<Longrightarrow>\n       num_args (emb_step_at [] d t) = num_args t\n 2. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "then"], ["proof (chain)\npicking this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []\n\ngoal (1 subgoal):\n 1. num_args (emb_step_at [] d t) = num_args t", "using list_all_simps(2)"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []\n  list_all ?P [] = True\n\ngoal (1 subgoal):\n 1. num_args (emb_step_at [] d t) = num_args t", "by blast"], ["proof (state)\nthis:\n  num_args (emb_step_at [] d t) = num_args t\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "case (Cons a p)"], ["proof (state)\nthis:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p \\<Longrightarrow>\n  num_args (emb_step_at p d ?t) = num_args ?t\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\n\ngoal (1 subgoal):\n 1. \\<And>a p t.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "then"], ["proof (chain)\npicking this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p \\<Longrightarrow>\n  num_args (emb_step_at p d ?t) = num_args ?t\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p \\<Longrightarrow>\n  num_args (emb_step_at p d ?t) = num_args ?t\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\n\ngoal (1 subgoal):\n 1. num_args (emb_step_at (a # p) d t) = num_args t", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "case (Hd x1)"], ["proof (state)\nthis:\n  t = Hd x1\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = Hd x1\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "then"], ["proof (chain)\npicking this:\n  t = Hd x1", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Hd x1\n\ngoal (1 subgoal):\n 1. num_args (emb_step_at (a # p) d t) = num_args t", "by (metis emb_step_at_head)"], ["proof (state)\nthis:\n  num_args (emb_step_at (a # p) d t) = num_args t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "case (App t1 t2)"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>t.\n                   \\<not> list_all (\\<lambda>x. x = dir.Left)\n                           p \\<Longrightarrow>\n                   num_args (emb_step_at p d t) = num_args t;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> num_args (emb_step_at (a # p) d t) = num_args t", "then"], ["proof (chain)\npicking this:\n  t = App t1 t2", "show ?thesis"], ["proof (prove)\nusing this:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. num_args (emb_step_at (a # p) d t) = num_args t", "unfolding App"], ["proof (prove)\nusing this:\n  App t1 t2 = App t1 t2\n\ngoal (1 subgoal):\n 1. num_args (emb_step_at (a # p) d (App t1 t2)) = num_args (App t1 t2)", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>App t1 t2 = App t1 t2; a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> num_args (emb_step_at (a # p) d (App t1 t2)) =\n                      num_args (App t1 t2)\n 2. \\<lbrakk>App t1 t2 = App t1 t2; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> num_args (emb_step_at (a # p) d (App t1 t2)) =\n                      num_args (App t1 t2)", "using App Cons.IH Cons.prems(1)"], ["proof (prove)\nusing this:\n  t = App t1 t2\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p \\<Longrightarrow>\n  num_args (emb_step_at p d ?t) = num_args ?t\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>App t1 t2 = App t1 t2; a = dir.Left\\<rbrakk>\n    \\<Longrightarrow> num_args (emb_step_at (a # p) d (App t1 t2)) =\n                      num_args (App t1 t2)\n 2. \\<lbrakk>App t1 t2 = App t1 t2; a = dir.Right\\<rbrakk>\n    \\<Longrightarrow> num_args (emb_step_at (a # p) d (App t1 t2)) =\n                      num_args (App t1 t2)", "by auto"], ["proof (state)\nthis:\n  num_args (emb_step_at (a # p) d t) = num_args t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  num_args (emb_step_at (a # p) d t) = num_args t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_step_under_args_emb_step:\n  assumes\n   \"\\<not> list_all (\\<lambda>x. x = Left) p\"\n   \"position_of t (p @ [d])\"\n obtains i where\n   \"i < num_args t\"\n   \"args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b args (emb_step_at p d t) ! i\" and\n   \"\\<And>j. j < num_args t \\<Longrightarrow> i \\<noteq> j \\<Longrightarrow> args t ! j = args (emb_step_at p d t) ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < num_args t;\n         args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n         args (emb_step_at p d t) ! i;\n         \\<And>j.\n            \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> args t ! j =\n                              args (emb_step_at p d t) ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p\n  position_of t (p @ [d])\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < num_args t;\n         args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n         args (emb_step_at p d t) ! i;\n         \\<And>j.\n            \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> args t ! j =\n                              args (emb_step_at p d t) ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(induction p arbitrary:t thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t thesis.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < num_args t;\n                    args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (emb_step_at [] d t) ! i;\n                    \\<And>j.\n                       \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n                       \\<Longrightarrow> args t ! j =\n   args (emb_step_at [] d t) ! j\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) [];\n        position_of t ([] @ [d])\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p t thesis.\n       \\<lbrakk>\\<And>t thesis.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i < num_args t;\n                                args t !\n                                i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                args (emb_step_at p d t) ! i;\n                                \\<And>j.\n                                   \\<lbrakk>j < num_args t;\n                                    i \\<noteq> j\\<rbrakk>\n                                   \\<Longrightarrow> args t ! j =\n               args (emb_step_at p d t) ! j\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<not> list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of t (p @ [d])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>i.\n           \\<lbrakk>i < num_args t;\n            args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n            args (emb_step_at (a # p) d t) ! i;\n            \\<And>j.\n               \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n               \\<Longrightarrow> args t ! j =\n                                 args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>?i < num_args t;\n   args t ! ?i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n   args (emb_step_at [] d t) ! ?i;\n   \\<And>j.\n      \\<lbrakk>j < num_args t; ?i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> args t ! j = args (emb_step_at [] d t) ! j\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []\n  position_of t ([] @ [d])\n\ngoal (2 subgoals):\n 1. \\<And>t thesis.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < num_args t;\n                    args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (emb_step_at [] d t) ! i;\n                    \\<And>j.\n                       \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n                       \\<Longrightarrow> args t ! j =\n   args (emb_step_at [] d t) ! j\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) [];\n        position_of t ([] @ [d])\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p t thesis.\n       \\<lbrakk>\\<And>t thesis.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i < num_args t;\n                                args t !\n                                i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                args (emb_step_at p d t) ! i;\n                                \\<And>j.\n                                   \\<lbrakk>j < num_args t;\n                                    i \\<noteq> j\\<rbrakk>\n                                   \\<Longrightarrow> args t ! j =\n               args (emb_step_at p d t) ! j\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<not> list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of t (p @ [d])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>i.\n           \\<lbrakk>i < num_args t;\n            args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n            args (emb_step_at (a # p) d t) ! i;\n            \\<And>j.\n               \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n               \\<Longrightarrow> args t ! j =\n                                 args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i < num_args t;\n   args t ! ?i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n   args (emb_step_at [] d t) ! ?i;\n   \\<And>j.\n      \\<lbrakk>j < num_args t; ?i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> args t ! j = args (emb_step_at [] d t) ! j\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []\n  position_of t ([] @ [d])", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < num_args t;\n   args t ! ?i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n   args (emb_step_at [] d t) ! ?i;\n   \\<And>j.\n      \\<lbrakk>j < num_args t; ?i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> args t ! j = args (emb_step_at [] d t) ! j\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<not> list_all (\\<lambda>x. x = dir.Left) []\n  position_of t ([] @ [d])\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p t thesis.\n       \\<lbrakk>\\<And>t thesis.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i < num_args t;\n                                args t !\n                                i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                args (emb_step_at p d t) ! i;\n                                \\<And>j.\n                                   \\<lbrakk>j < num_args t;\n                                    i \\<noteq> j\\<rbrakk>\n                                   \\<Longrightarrow> args t ! j =\n               args (emb_step_at p d t) ! j\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<not> list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of t (p @ [d])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>i.\n           \\<lbrakk>i < num_args t;\n            args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n            args (emb_step_at (a # p) d t) ! i;\n            \\<And>j.\n               \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n               \\<Longrightarrow> args t ! j =\n                                 args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p t thesis.\n       \\<lbrakk>\\<And>t thesis.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i < num_args t;\n                                args t !\n                                i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                args (emb_step_at p d t) ! i;\n                                \\<And>j.\n                                   \\<lbrakk>j < num_args t;\n                                    i \\<noteq> j\\<rbrakk>\n                                   \\<Longrightarrow> args t ! j =\n               args (emb_step_at p d t) ! j\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<not> list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of t (p @ [d])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>i.\n           \\<lbrakk>i < num_args t;\n            args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n            args (emb_step_at (a # p) d t) ! i;\n            \\<And>j.\n               \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n               \\<Longrightarrow> args t ! j =\n                                 args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons a p)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i < num_args ?t;\n               args ?t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (emb_step_at p d ?t) ! i;\n               \\<And>j.\n                  \\<lbrakk>j < num_args ?t; i \\<noteq> j\\<rbrakk>\n                  \\<Longrightarrow> args ?t ! j =\n                                    args (emb_step_at p d ?t) ! j\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<not> list_all (\\<lambda>x. x = dir.Left) p;\n   position_of ?t (p @ [d])\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?i < num_args t;\n   args t ! ?i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n   args (emb_step_at (a # p) d t) ! ?i;\n   \\<And>j.\n      \\<lbrakk>j < num_args t; ?i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> args t ! j =\n                        args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\n  position_of t ((a # p) @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>a p t thesis.\n       \\<lbrakk>\\<And>t thesis.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i < num_args t;\n                                args t !\n                                i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                args (emb_step_at p d t) ! i;\n                                \\<And>j.\n                                   \\<lbrakk>j < num_args t;\n                                    i \\<noteq> j\\<rbrakk>\n                                   \\<Longrightarrow> args t ! j =\n               args (emb_step_at p d t) ! j\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<not> list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of t (p @ [d])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>i.\n           \\<lbrakk>i < num_args t;\n            args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n            args (emb_step_at (a # p) d t) ! i;\n            \\<And>j.\n               \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n               \\<Longrightarrow> args t ! j =\n                                 args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> thesis", "obtain t1 t2 where App:\"t = App t1 t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t1 t2. t = App t1 t2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Cons.prems(3) emb_step_at_if_position emb_step_at_is_App emb_step_equiv' tm.collapse(2))"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>a p t thesis.\n       \\<lbrakk>\\<And>t thesis.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>i < num_args t;\n                                args t !\n                                i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                                args (emb_step_at p d t) ! i;\n                                \\<And>j.\n                                   \\<lbrakk>j < num_args t;\n                                    i \\<noteq> j\\<rbrakk>\n                                   \\<Longrightarrow> args t ! j =\n               args (emb_step_at p d t) ! j\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<not> list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of t (p @ [d])\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>i.\n           \\<lbrakk>i < num_args t;\n            args t ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n            args (emb_step_at (a # p) d t) ! i;\n            \\<And>j.\n               \\<lbrakk>j < num_args t; i \\<noteq> j\\<rbrakk>\n               \\<Longrightarrow> args t ! j =\n                                 args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of t ((a # p) @ [d])\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  t = App t1 t2", "show ?case"], ["proof (prove)\nusing this:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. thesis", "proof (cases a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "case Left"], ["proof (state)\nthis:\n  a = dir.Left\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "have IH_cond1: \"\\<not> list_all (\\<lambda>x. x = dir.Left) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> list_all (\\<lambda>x. x = dir.Left) p", "using Cons.prems(2) Left"], ["proof (prove)\nusing this:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) (a # p)\n  a = dir.Left\n\ngoal (1 subgoal):\n 1. \\<not> list_all (\\<lambda>x. x = dir.Left) p", "by auto"], ["proof (state)\nthis:\n  \\<not> list_all (\\<lambda>x. x = dir.Left) p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "have IH_cond2: \"position_of t1 (p @ [d])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of t1 (p @ [d])", "using App Cons.prems(3) Left"], ["proof (prove)\nusing this:\n  t = App t1 t2\n  position_of t ((a # p) @ [d])\n  a = dir.Left\n\ngoal (1 subgoal):\n 1. position_of t1 (p @ [d])", "by auto"], ["proof (state)\nthis:\n  position_of t1 (p @ [d])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "obtain i' where i'_def: \n      \"i' < num_args t1\"\n      \"args t1 ! i' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b args (emb_step_at p d t1) ! i'\"\n      \"\\<And>j. j < num_args t1 \\<Longrightarrow> i' \\<noteq> j \\<Longrightarrow> args t1 ! j = args (emb_step_at p d t1) ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>i' < num_args t1;\n         args t1 ! i' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n         args (emb_step_at p d t1) ! i';\n         \\<And>j.\n            \\<lbrakk>j < num_args t1; i' \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> args t1 ! j =\n                              args (emb_step_at p d t1) ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.IH[OF _ IH_cond1 IH_cond2]"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      \\<lbrakk>i < num_args t1;\n       args t1 ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n       args (emb_step_at p d t1) ! i;\n       \\<And>j.\n          \\<lbrakk>j < num_args t1; i \\<noteq> j\\<rbrakk>\n          \\<Longrightarrow> args t1 ! j =\n                            args (emb_step_at p d t1) ! j\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>i' < num_args t1;\n         args t1 ! i' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n         args (emb_step_at p d t1) ! i';\n         \\<And>j.\n            \\<lbrakk>j < num_args t1; i' \\<noteq> j\\<rbrakk>\n            \\<Longrightarrow> args t1 ! j =\n                              args (emb_step_at p d t1) ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i' < num_args t1\n  args t1 ! i' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n  args (emb_step_at p d t1) ! i'\n  \\<lbrakk>?j < num_args t1; i' \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> args t1 ! ?j = args (emb_step_at p d t1) ! ?j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "have num_args:\"num_args (emb_step_at p d t1) = num_args t1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_args (emb_step_at p d t1) = num_args t1", "using App Cons.prems(1) Left emb_step_under_args_num_args"], ["proof (prove)\nusing this:\n  t = App t1 t2\n  \\<lbrakk>?i < num_args t;\n   args t ! ?i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n   args (emb_step_at (a # p) d t) ! ?i;\n   \\<And>j.\n      \\<lbrakk>j < num_args t; ?i \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> args t ! j =\n                        args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n  \\<Longrightarrow> thesis\n  a = dir.Left\n  \\<not> list_all (\\<lambda>x. x = dir.Left) ?p \\<Longrightarrow>\n  num_args (emb_step_at ?p ?d ?t) = num_args ?t\n\ngoal (1 subgoal):\n 1. num_args (emb_step_at p d t1) = num_args t1", "by (simp add: emb_step_under_args_num_args IH_cond1)"], ["proof (state)\nthis:\n  num_args (emb_step_at p d t1) = num_args t1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "have 1:\"i' < num_args t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < num_args t", "by (simp add: App i'_def(1) less_SucI)"], ["proof (state)\nthis:\n  i' < num_args t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "have 2:\"args t ! i' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b args (emb_step_at (a # p) d t) ! i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. args t ! i' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n    args (emb_step_at (a # p) d t) ! i'", "by (simp add: App Left i'_def(1) i'_def(2) nth_append num_args)"], ["proof (state)\nthis:\n  args t ! i' \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n  args (emb_step_at (a # p) d t) ! i'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "have 3:\"\\<And>j. j < num_args t \\<Longrightarrow> i' \\<noteq> j \\<Longrightarrow> args t ! j = args (emb_step_at (a # p) d t) ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < num_args t; i' \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> args t ! j = args (emb_step_at (a # p) d t) ! j", "by (simp add: App Left i'_def(3) nth_append num_args)"], ["proof (state)\nthis:\n  \\<lbrakk>?j < num_args t; i' \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> args t ! ?j = args (emb_step_at (a # p) d t) ! ?j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Left\\<rbrakk> \\<Longrightarrow> thesis\n 2. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using Cons.prems(1)[OF 1 2 3]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>j < num_args t; i' \\<noteq> j\\<rbrakk>\n              \\<Longrightarrow> j < num_args t;\n   \\<And>j.\n      \\<lbrakk>j < num_args t; i' \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> i' \\<noteq> j\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "case Right"], ["proof (state)\nthis:\n  a = dir.Right\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "have 0:\"\\<And>j. j < num_args t \\<Longrightarrow> num_args t - 1 \\<noteq> j \\<Longrightarrow> args t ! j = args (emb_step_at (a # p) d t) ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < num_args t; num_args t - 1 \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> args t ! j = args (emb_step_at (a # p) d t) ! j", "by (metis (no_types, lifting) App Cons.prems(2) emb_step_at_right_context Nitpick.size_list_simp(2) Right args.simps(2) butlast_snoc emb_step_under_args_num_args length_butlast length_tl less_antisym nth_butlast)"], ["proof (state)\nthis:\n  \\<lbrakk>?j < num_args t; num_args t - 1 \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> args t ! ?j = args (emb_step_at (a # p) d t) ! ?j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = App t1 t2; a = dir.Right\\<rbrakk> \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using Cons.prems(1)[of \"num_args t - 1\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>num_args t - 1 < num_args t;\n   args t ! (num_args t - 1) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n   args (emb_step_at (a # p) d t) ! (num_args t - 1);\n   \\<And>j.\n      \\<lbrakk>j < num_args t; num_args t - 1 \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> args t ! j =\n                        args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "using App Cons.prems(3) Right emb_step_at_if_position 0"], ["proof (prove)\nusing this:\n  \\<lbrakk>num_args t - 1 < num_args t;\n   args t ! (num_args t - 1) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n   args (emb_step_at (a # p) d t) ! (num_args t - 1);\n   \\<And>j.\n      \\<lbrakk>j < num_args t; num_args t - 1 \\<noteq> j\\<rbrakk>\n      \\<Longrightarrow> args t ! j =\n                        args (emb_step_at (a # p) d t) ! j\\<rbrakk>\n  \\<Longrightarrow> thesis\n  t = App t1 t2\n  position_of t ((a # p) @ [d])\n  a = dir.Right\n  position_of ?t (?p @ [?d]) \\<Longrightarrow>\n  ?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b emb_step_at ?p ?d ?t\n  \\<lbrakk>?j < num_args t; num_args t - 1 \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> args t ! ?j = args (emb_step_at (a # p) d t) ! ?j\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_step_under_args_emb:\n  assumes \"\\<not> list_all (\\<lambda>x. x = Left) p\"\n   \"position_of t (p @ [d])\"\n  shows\n    \"\\<forall>i. i < num_args t \\<longrightarrow> args t ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (emb_step_at p d t) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<num_args t.\n       args t ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       args (emb_step_at p d t) ! i", "by (metis assms emb.simps emb_step_under_args_emb_step)"], ["", "lemma position_Left_only_subst:\n  assumes \"list_all (\\<lambda>x. x = Left) p\" \n    and \"position_of (subst \\<rho> w) (p @ [d])\"\n    and \"num_args (subst \\<rho> w)  = num_args w\"\n  shows \"position_of w (p @ [d])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position_of w (p @ [d])", "using assms"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>x. x = dir.Left) p\n  position_of (subst \\<rho> w) (p @ [d])\n  num_args (subst \\<rho> w) = num_args w\n\ngoal (1 subgoal):\n 1. position_of w (p @ [d])", "proof (induct p arbitrary:w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>w.\n       \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) [];\n        position_of (subst \\<rho> w) ([] @ [d]);\n        num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n       \\<Longrightarrow> position_of w ([] @ [d])\n 2. \\<And>a p w.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "case Nil"], ["proof (state)\nthis:\n  list_all (\\<lambda>x. x = dir.Left) []\n  position_of (subst \\<rho> w) ([] @ [d])\n  num_args (subst \\<rho> w) = num_args w\n\ngoal (2 subgoals):\n 1. \\<And>w.\n       \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) [];\n        position_of (subst \\<rho> w) ([] @ [d]);\n        num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n       \\<Longrightarrow> position_of w ([] @ [d])\n 2. \\<And>a p w.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "then"], ["proof (chain)\npicking this:\n  list_all (\\<lambda>x. x = dir.Left) []\n  position_of (subst \\<rho> w) ([] @ [d])\n  num_args (subst \\<rho> w) = num_args w", "show ?case"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>x. x = dir.Left) []\n  position_of (subst \\<rho> w) ([] @ [d])\n  num_args (subst \\<rho> w) = num_args w\n\ngoal (1 subgoal):\n 1. position_of w ([] @ [d])", "by (metis position_of_Hd position_of_Nil Hd_head_id append_self_conv2 args.simps(1) length_0_conv list.sel(3) position_of.elims(3))"], ["proof (state)\nthis:\n  position_of w ([] @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>a p w.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p w.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "case (Cons a p)"], ["proof (state)\nthis:\n  \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n   position_of (subst \\<rho> ?w) (p @ [d]);\n   num_args (subst \\<rho> ?w) = num_args ?w\\<rbrakk>\n  \\<Longrightarrow> position_of ?w (p @ [d])\n  list_all (\\<lambda>x. x = dir.Left) (a # p)\n  position_of (subst \\<rho> w) ((a # p) @ [d])\n  num_args (subst \\<rho> w) = num_args w\n\ngoal (1 subgoal):\n 1. \\<And>a p w.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n   position_of (subst \\<rho> ?w) (p @ [d]);\n   num_args (subst \\<rho> ?w) = num_args ?w\\<rbrakk>\n  \\<Longrightarrow> position_of ?w (p @ [d])\n  list_all (\\<lambda>x. x = dir.Left) (a # p)\n  position_of (subst \\<rho> w) ((a # p) @ [d])\n  num_args (subst \\<rho> w) = num_args w", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n   position_of (subst \\<rho> ?w) (p @ [d]);\n   num_args (subst \\<rho> ?w) = num_args ?w\\<rbrakk>\n  \\<Longrightarrow> position_of ?w (p @ [d])\n  list_all (\\<lambda>x. x = dir.Left) (a # p)\n  position_of (subst \\<rho> w) ((a # p) @ [d])\n  num_args (subst \\<rho> w) = num_args w\n\ngoal (1 subgoal):\n 1. position_of w ((a # p) @ [d])", "proof (cases w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w; w = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w; w = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "case (Hd x)"], ["proof (state)\nthis:\n  w = Hd x\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w; w = Hd x1\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w; w = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "then"], ["proof (chain)\npicking this:\n  w = Hd x", "show ?thesis"], ["proof (prove)\nusing this:\n  w = Hd x\n\ngoal (1 subgoal):\n 1. position_of w ((a # p) @ [d])", "by (metis Cons.prems(2) Cons.prems(3) position_of_Hd Hd_head_id append_Cons args.simps(1) list.size(3))"], ["proof (state)\nthis:\n  position_of w ((a # p) @ [d])\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w; w = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w; w = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "case (App w1 w2)"], ["proof (state)\nthis:\n  w = App w1 w2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w; w = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "have \"num_args (subst \\<rho> w1) = num_args w1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_args (subst \\<rho> w1) = num_args w1", "using App Cons.prems(3)"], ["proof (prove)\nusing this:\n  w = App w1 w2\n  num_args (subst \\<rho> w) = num_args w\n\ngoal (1 subgoal):\n 1. num_args (subst \\<rho> w1) = num_args w1", "by auto"], ["proof (state)\nthis:\n  num_args (subst \\<rho> w1) = num_args w1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>\\<And>w.\n                   \\<lbrakk>list_all (\\<lambda>x. x = dir.Left) p;\n                    position_of (subst \\<rho> w) (p @ [d]);\n                    num_args (subst \\<rho> w) = num_args w\\<rbrakk>\n                   \\<Longrightarrow> position_of w (p @ [d]);\n        list_all (\\<lambda>x. x = dir.Left) (a # p);\n        position_of (subst \\<rho> w) ((a # p) @ [d]);\n        num_args (subst \\<rho> w) = num_args w; w = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> position_of w ((a # p) @ [d])", "then"], ["proof (chain)\npicking this:\n  num_args (subst \\<rho> w1) = num_args w1", "show ?thesis"], ["proof (prove)\nusing this:\n  num_args (subst \\<rho> w1) = num_args w1\n\ngoal (1 subgoal):\n 1. position_of w ((a # p) @ [d])", "by (metis (full_types) App Cons.hyps Cons.prems(1) Cons.prems(2) position_of_left \n          append_Cons list.pred_inject(2) subst.simps(2))"], ["proof (state)\nthis:\n  position_of w ((a # p) @ [d])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  position_of w ((a # p) @ [d])\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Rearranging embedding steps: first above, then below arguments\\<close>"], ["", "lemma perform_emb_above_vars0:\n  assumes \n    \"subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n  obtains w where\n    \"s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\"\n    \"subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n    \"\\<forall>w'. w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow> \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         \\<forall>w'.\n            w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n            \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                   u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         \\<forall>w'.\n            w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n            \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                   u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct s rule:measure_induct_rule[of hsize])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>hsize y < hsize x;\n                    \\<And>w.\n                       \\<lbrakk>y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n                        subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n                        \\<forall>w'.\n                           w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                           w' \\<longrightarrow>\n                           \\<not> subst \\<rho>\n                                   w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                                  u\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    subst \\<rho> y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    u\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>w.\n           \\<lbrakk>x \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n            subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n            \\<forall>w'.\n               w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n               \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                      u\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        subst \\<rho> x \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (less s)"], ["proof (state)\nthis:\n  \\<lbrakk>hsize ?y < hsize s;\n   \\<And>w.\n      \\<lbrakk>?y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n       subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n       \\<forall>w'.\n          w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n          \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   subst \\<rho> ?y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?w;\n   subst \\<rho> ?w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n   \\<forall>w'.\n      ?w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n      \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<rbrakk>\n  \\<Longrightarrow> thesis\n  subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>hsize y < hsize x;\n                    \\<And>w.\n                       \\<lbrakk>y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n                        subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n                        \\<forall>w'.\n                           w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n                           w' \\<longrightarrow>\n                           \\<not> subst \\<rho>\n                                   w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                                  u\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    subst \\<rho> y \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    u\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>w.\n           \\<lbrakk>x \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n            subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n            \\<forall>w'.\n               w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n               \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                      u\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        subst \\<rho> x \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"\\<forall>w'. s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow> \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>w'.\n       s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n       \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n              u \\<Longrightarrow>\n    thesis\n 2. \\<not> (\\<forall>w'.\n               s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n               \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                      u) \\<Longrightarrow>\n    thesis", "case True"], ["proof (state)\nthis:\n  \\<forall>w'.\n     s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n     \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (2 subgoals):\n 1. \\<forall>w'.\n       s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n       \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n              u \\<Longrightarrow>\n    thesis\n 2. \\<not> (\\<forall>w'.\n               s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n               \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                      u) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<forall>w'.\n     s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n     \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>w'.\n     s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n     \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. thesis", "using emb.refl less.prems(1)"], ["proof (prove)\nusing this:\n  \\<forall>w'.\n     s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n     \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?t\n  \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?w;\n   subst \\<rho> ?w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n   \\<forall>w'.\n      ?w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n      \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "using less.prems(2)"], ["proof (prove)\nusing this:\n  \\<forall>w'.\n     s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n     \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?t\n  \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?w;\n   subst \\<rho> ?w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n   \\<forall>w'.\n      ?w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n      \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<rbrakk>\n  \\<Longrightarrow> thesis\n  subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>w'.\n               s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n               \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                      u) \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>w'.\n               s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n               \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                      u) \\<Longrightarrow>\n    thesis", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>w'.\n             s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n             \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>w'.\n               s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n               \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                      u) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>w'.\n             s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n             \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>w'.\n             s \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n             \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u)\n\ngoal (1 subgoal):\n 1. thesis", "by (meson emb_step_is_emb emb_step_hsize emb_trans less.hyps less.prems(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emb_only_below_vars:\n  assumes \n    \"subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n    \"s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\"\n    \"is_Sym (head w)\"\n    \"subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n    \"\\<forall>w'. w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow> \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n  obtains ws where\n    \"ws \\<noteq> []\"\n    \"hd ws = subst \\<rho> w\"\n    \"last ws = u\"\n    \"\\<forall>i. Suc i < length ws \\<longrightarrow> \n      (\\<exists>p d. emb_step_at p d (ws ! i) = ws ! Suc i \\<and> \\<not> list_all (\\<lambda>x. x = Left) p)\"\n    \"\\<forall>i. i < length ws \\<longrightarrow> head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w\"\n    \"\\<forall>i. i < length ws \\<longrightarrow> (\\<forall>k. k < num_args w \\<longrightarrow> args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (ws ! i) ! k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define prio :: \"dir list \\<Rightarrow> nat\" where \"prio = (\\<lambda>p. if list_all (\\<lambda>x. x = Left) (butlast p) then 0 else 1)\""], ["proof (state)\nthis:\n  prio =\n  (\\<lambda>p.\n      if list_all (\\<lambda>x. x = dir.Left) (butlast p) then 0 else 1)\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain ws where ws_def:\n    \"ws \\<noteq> []\"\n    \"hd ws = subst \\<rho> w\"\n    \"last ws = u\"\n    \"\\<forall>i. Suc i < length ws \\<longrightarrow> prio_emb_step prio (ws ! i) u = ws ! Suc i \\<and> ws ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ws ! Suc i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            prio_emb_step prio (ws ! i) u = ws ! Suc i \\<and>\n            ws ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ws ! Suc i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<close> sequence_prio_emb_steps"], ["proof (prove)\nusing this:\n  subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s \\<Longrightarrow>\n  \\<exists>us.\n     us \\<noteq> [] \\<and>\n     hd us = ?t \\<and>\n     last us = ?s \\<and>\n     (\\<forall>i.\n         Suc i < length us \\<longrightarrow>\n         prio_emb_step ?prio (us ! i) ?s = us ! Suc i \\<and>\n         us ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b us ! Suc i)\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            prio_emb_step prio (ws ! i) u = ws ! Suc i \\<and>\n            ws ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ws ! Suc i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ws \\<noteq> []\n  hd ws = subst \\<rho> w\n  last ws = u\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     prio_emb_step prio (ws ! i) u = ws ! Suc i \\<and>\n     ws ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ws ! Suc i\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have ws_emb_u:\"\\<forall>i. Suc i < length ws \\<longrightarrow> ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "proof (rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "assume \"Suc j < length ws\""], ["proof (state)\nthis:\n  Suc j < length ws\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "then"], ["proof (chain)\npicking this:\n  Suc j < length ws", "have \"ws ! (length ws - (Suc (Suc j))) \\<noteq> u  \\<and> ws ! (length ws - (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\""], ["proof (prove)\nusing this:\n  Suc j < length ws\n\ngoal (1 subgoal):\n 1. ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n    ws ! (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "proof (induction j)"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc 0 < length ws \\<Longrightarrow>\n    ws ! (length ws - Suc (Suc 0)) \\<noteq> u \\<and>\n    ws ! (length ws - Suc (Suc 0)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n 2. \\<And>j.\n       \\<lbrakk>Suc j < length ws \\<Longrightarrow>\n                ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n                ws !\n                (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                u;\n        Suc (Suc j) < length ws\\<rbrakk>\n       \\<Longrightarrow> ws ! (length ws - Suc (Suc (Suc j))) \\<noteq>\n                         u \\<and>\n                         ws !\n                         (length ws -\n                          Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         u", "case 0"], ["proof (state)\nthis:\n  Suc 0 < length ws\n\ngoal (2 subgoals):\n 1. Suc 0 < length ws \\<Longrightarrow>\n    ws ! (length ws - Suc (Suc 0)) \\<noteq> u \\<and>\n    ws ! (length ws - Suc (Suc 0)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n 2. \\<And>j.\n       \\<lbrakk>Suc j < length ws \\<Longrightarrow>\n                ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n                ws !\n                (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                u;\n        Suc (Suc j) < length ws\\<rbrakk>\n       \\<Longrightarrow> ws ! (length ws - Suc (Suc (Suc j))) \\<noteq>\n                         u \\<and>\n                         ws !\n                         (length ws -\n                          Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         u", "have \"prio_emb_step prio (ws ! (length ws - Suc (Suc 0))) u = ws ! (length ws - (Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_emb_step prio (ws ! (length ws - Suc (Suc 0))) u =\n    ws ! (length ws - Suc 0)", "using \"0.prems\" Suc_diff_Suc ws_def(4)"], ["proof (prove)\nusing this:\n  Suc 0 < length ws\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     prio_emb_step prio (ws ! i) u = ws ! Suc i \\<and>\n     ws ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ws ! Suc i\n\ngoal (1 subgoal):\n 1. prio_emb_step prio (ws ! (length ws - Suc (Suc 0))) u =\n    ws ! (length ws - Suc 0)", "by auto"], ["proof (state)\nthis:\n  prio_emb_step prio (ws ! (length ws - Suc (Suc 0))) u =\n  ws ! (length ws - Suc 0)\n\ngoal (2 subgoals):\n 1. Suc 0 < length ws \\<Longrightarrow>\n    ws ! (length ws - Suc (Suc 0)) \\<noteq> u \\<and>\n    ws ! (length ws - Suc (Suc 0)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n 2. \\<And>j.\n       \\<lbrakk>Suc j < length ws \\<Longrightarrow>\n                ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n                ws !\n                (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                u;\n        Suc (Suc j) < length ws\\<rbrakk>\n       \\<Longrightarrow> ws ! (length ws - Suc (Suc (Suc j))) \\<noteq>\n                         u \\<and>\n                         ws !\n                         (length ws -\n                          Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         u", "then"], ["proof (chain)\npicking this:\n  prio_emb_step prio (ws ! (length ws - Suc (Suc 0))) u =\n  ws ! (length ws - Suc 0)", "show ?case"], ["proof (prove)\nusing this:\n  prio_emb_step prio (ws ! (length ws - Suc (Suc 0))) u =\n  ws ! (length ws - Suc 0)\n\ngoal (1 subgoal):\n 1. ws ! (length ws - Suc (Suc 0)) \\<noteq> u \\<and>\n    ws ! (length ws - Suc (Suc 0)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "using \"0.prems\" One_nat_def Suc_diff_Suc Suc_lessD diff_Suc_less emb_step_equiv last_conv_nth ws_def(1) ws_def(3) ws_def(4)"], ["proof (prove)\nusing this:\n  prio_emb_step prio (ws ! (length ws - Suc (Suc 0))) u =\n  ws ! (length ws - Suc 0)\n  Suc 0 < length ws\n  1 = Suc 0\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  Suc ?m < ?n \\<Longrightarrow> ?m < ?n\n  0 < ?n \\<Longrightarrow> ?n - Suc ?i < ?n\n  (?t \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ?s) =\n  ((\\<exists>p d. emb_step_at p d ?t = ?s) \\<and> ?t \\<noteq> ?s)\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n  ws \\<noteq> []\n  last ws = u\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     prio_emb_step prio (ws ! i) u = ws ! Suc i \\<and>\n     ws ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ws ! Suc i\n\ngoal (1 subgoal):\n 1. ws ! (length ws - Suc (Suc 0)) \\<noteq> u \\<and>\n    ws ! (length ws - Suc (Suc 0)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "by (metis emb_step_is_emb)"], ["proof (state)\nthis:\n  ws ! (length ws - Suc (Suc 0)) \\<noteq> u \\<and>\n  ws ! (length ws - Suc (Suc 0)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>Suc j < length ws \\<Longrightarrow>\n                ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n                ws !\n                (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                u;\n        Suc (Suc j) < length ws\\<rbrakk>\n       \\<Longrightarrow> ws ! (length ws - Suc (Suc (Suc j))) \\<noteq>\n                         u \\<and>\n                         ws !\n                         (length ws -\n                          Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>Suc j < length ws \\<Longrightarrow>\n                ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n                ws !\n                (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                u;\n        Suc (Suc j) < length ws\\<rbrakk>\n       \\<Longrightarrow> ws ! (length ws - Suc (Suc (Suc j))) \\<noteq>\n                         u \\<and>\n                         ws !\n                         (length ws -\n                          Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         u", "case (Suc j)"], ["proof (state)\nthis:\n  Suc j < length ws \\<Longrightarrow>\n  ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n  ws ! (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  Suc (Suc j) < length ws\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>Suc j < length ws \\<Longrightarrow>\n                ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n                ws !\n                (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                u;\n        Suc (Suc j) < length ws\\<rbrakk>\n       \\<Longrightarrow> ws ! (length ws - Suc (Suc (Suc j))) \\<noteq>\n                         u \\<and>\n                         ws !\n                         (length ws -\n                          Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         u", "then"], ["proof (chain)\npicking this:\n  Suc j < length ws \\<Longrightarrow>\n  ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n  ws ! (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  Suc (Suc j) < length ws", "have \"ws ! (length ws - (Suc (Suc (Suc j)))) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ws ! (length ws - Suc (Suc j))\""], ["proof (prove)\nusing this:\n  Suc j < length ws \\<Longrightarrow>\n  ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n  ws ! (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  Suc (Suc j) < length ws\n\ngoal (1 subgoal):\n 1. ws !\n    (length ws - Suc (Suc (Suc j))) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n    ws ! (length ws - Suc (Suc j))", "by (metis Suc_diff_Suc diff_Suc_less length_greater_0_conv ws_def(1) ws_def(4))"], ["proof (state)\nthis:\n  ws ! (length ws - Suc (Suc (Suc j))) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n  ws ! (length ws - Suc (Suc j))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>Suc j < length ws \\<Longrightarrow>\n                ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n                ws !\n                (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                u;\n        Suc (Suc j) < length ws\\<rbrakk>\n       \\<Longrightarrow> ws ! (length ws - Suc (Suc (Suc j))) \\<noteq>\n                         u \\<and>\n                         ws !\n                         (length ws -\n                          Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                         u", "then"], ["proof (chain)\npicking this:\n  ws ! (length ws - Suc (Suc (Suc j))) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n  ws ! (length ws - Suc (Suc j))", "show ?case"], ["proof (prove)\nusing this:\n  ws ! (length ws - Suc (Suc (Suc j))) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n  ws ! (length ws - Suc (Suc j))\n\ngoal (1 subgoal):\n 1. ws ! (length ws - Suc (Suc (Suc j))) \\<noteq> u \\<and>\n    ws ! (length ws - Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "using emb_hsize_neq"], ["proof (prove)\nusing this:\n  ws ! (length ws - Suc (Suc (Suc j))) \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b\n  ws ! (length ws - Suc (Suc j))\n  \\<lbrakk>?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s; ?t \\<noteq> ?s\\<rbrakk>\n  \\<Longrightarrow> hsize ?s < hsize ?t\n\ngoal (1 subgoal):\n 1. ws ! (length ws - Suc (Suc (Suc j))) \\<noteq> u \\<and>\n    ws ! (length ws - Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "by (metis Suc.IH Suc.prems Suc_lessD emb_hsize emb_step_is_emb emb_trans leD)"], ["proof (state)\nthis:\n  ws ! (length ws - Suc (Suc (Suc j))) \\<noteq> u \\<and>\n  ws ! (length ws - Suc (Suc (Suc j))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ws ! (length ws - Suc (Suc j)) \\<noteq> u \\<and>\n  ws ! (length ws - Suc (Suc j)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "}"], ["proof (state)\nthis:\n  Suc ?j2 < length ws \\<Longrightarrow>\n  ws ! (length ws - Suc (Suc ?j2)) \\<noteq> u \\<and>\n  ws ! (length ws - Suc (Suc ?j2)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "note 0 = this"], ["proof (state)\nthis:\n  Suc ?j2 < length ws \\<Longrightarrow>\n  ws ! (length ws - Suc (Suc ?j2)) \\<noteq> u \\<and>\n  ws ! (length ws - Suc (Suc ?j2)) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length ws \\<longrightarrow>\n       ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "show \"Suc i < length ws \\<longrightarrow> ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc i < length ws \\<longrightarrow>\n    ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "using 0[of \"length ws - Suc (Suc i)\"]"], ["proof (prove)\nusing this:\n  Suc (length ws - Suc (Suc i)) < length ws \\<Longrightarrow>\n  ws ! (length ws - Suc (Suc (length ws - Suc (Suc i)))) \\<noteq> u \\<and>\n  ws !\n  (length ws -\n   Suc (Suc (length ws - Suc (Suc i)))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n  u\n\ngoal (1 subgoal):\n 1. Suc i < length ws \\<longrightarrow>\n    ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "using Suc_diff_Suc ws_def(1)"], ["proof (prove)\nusing this:\n  Suc (length ws - Suc (Suc i)) < length ws \\<Longrightarrow>\n  ws ! (length ws - Suc (Suc (length ws - Suc (Suc i)))) \\<noteq> u \\<and>\n  ws !\n  (length ws -\n   Suc (Suc (length ws - Suc (Suc i)))) \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n  u\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  ws \\<noteq> []\n\ngoal (1 subgoal):\n 1. Suc i < length ws \\<longrightarrow>\n    ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u", "by auto"], ["proof (state)\nthis:\n  Suc i < length ws \\<longrightarrow>\n  ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     ws ! i \\<noteq> u \\<and> ws ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"i < length ws\""], ["proof (state)\nthis:\n  i < length ws\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  i < length ws", "have \"head (ws ! i) = head w \n             \\<and> num_args (ws ! i) = num_args w\n             \\<and> (\\<forall>k. k < num_args w \\<longrightarrow> args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (ws ! i) ! k)\n             \\<and> (Suc i < length ws \\<longrightarrow> prio (prio_emb_pos prio (ws ! i) u) = 1)\""], ["proof (prove)\nusing this:\n  i < length ws\n\ngoal (1 subgoal):\n 1. head (ws ! i) = head w \\<and>\n    num_args (ws ! i) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! i) ! k) \\<and>\n    (Suc i < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! i) u) = 1)", "proof (induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < length ws \\<Longrightarrow>\n    head (ws ! 0) = head w \\<and>\n    num_args (ws ! 0) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! 0) ! k) \\<and>\n    (Suc 0 < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! 0) u) = 1)\n 2. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "case 0"], ["proof (state)\nthis:\n  0 < length ws\n\ngoal (2 subgoals):\n 1. 0 < length ws \\<Longrightarrow>\n    head (ws ! 0) = head w \\<and>\n    num_args (ws ! 0) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! 0) ! k) \\<and>\n    (Suc 0 < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! 0) u) = 1)\n 2. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "have 1:\"head (ws ! 0) = head w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (ws ! 0) = head w", "by (metis assms(3) ground_imp_subst_iden hd.collapse(2) hd.simps(18) hd_conv_nth head_subst tm.sel(1) tm.simps(17) ws_def(1) ws_def(2))"], ["proof (state)\nthis:\n  head (ws ! 0) = head w\n\ngoal (2 subgoals):\n 1. 0 < length ws \\<Longrightarrow>\n    head (ws ! 0) = head w \\<and>\n    num_args (ws ! 0) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! 0) ! k) \\<and>\n    (Suc 0 < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! 0) u) = 1)\n 2. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "have 2:\"num_args (ws ! 0) = num_args w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_args (ws ! 0) = num_args w", "by (metis (no_types, lifting) append_self_conv2 args_subst assms(3) hd.case_eq_if hd_conv_nth length_map ws_def(1) ws_def(2))"], ["proof (state)\nthis:\n  num_args (ws ! 0) = num_args w\n\ngoal (2 subgoals):\n 1. 0 < length ws \\<Longrightarrow>\n    head (ws ! 0) = head w \\<and>\n    num_args (ws ! 0) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! 0) ! k) \\<and>\n    (Suc 0 < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! 0) u) = 1)\n 2. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "have 3:\"\\<forall>k. k < num_args w \\<longrightarrow> args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (ws ! 0) ! k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k<num_args w.\n       args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       args (ws ! 0) ! k", "using emb.refl hd_conv_nth ws_def(1) ws_def(2)"], ["proof (prove)\nusing this:\n  ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?t\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  ws \\<noteq> []\n  hd ws = subst \\<rho> w\n\ngoal (1 subgoal):\n 1. \\<forall>k<num_args w.\n       args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       args (ws ! 0) ! k", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>k<num_args w.\n     args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n     args (ws ! 0) ! k\n\ngoal (2 subgoals):\n 1. 0 < length ws \\<Longrightarrow>\n    head (ws ! 0) = head w \\<and>\n    num_args (ws ! 0) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! 0) ! k) \\<and>\n    (Suc 0 < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! 0) u) = 1)\n 2. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "have 4:\"(Suc 0 < length ws \\<longrightarrow> prio (prio_emb_pos prio (ws ! 0) u) = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 < length ws \\<longrightarrow>\n    prio (prio_emb_pos prio (ws ! 0) u) = 1", "by (metis \\<open>num_args (ws ! 0) = num_args w\\<close> prio_def append_butlast_last_id assms(5) emb_step_at_if_position \n        emb_step_at_subst hd_conv_nth position_Left_only_subst prio_emb_posI ws_def(1) ws_def(2) ws_emb_u)"], ["proof (state)\nthis:\n  Suc 0 < length ws \\<longrightarrow>\n  prio (prio_emb_pos prio (ws ! 0) u) = 1\n\ngoal (2 subgoals):\n 1. 0 < length ws \\<Longrightarrow>\n    head (ws ! 0) = head w \\<and>\n    num_args (ws ! 0) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! 0) ! k) \\<and>\n    (Suc 0 < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! 0) u) = 1)\n 2. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. head (ws ! 0) = head w \\<and>\n    num_args (ws ! 0) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! 0) ! k) \\<and>\n    (Suc 0 < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! 0) u) = 1)", "using 1 2 3 4"], ["proof (prove)\nusing this:\n  head (ws ! 0) = head w\n  num_args (ws ! 0) = num_args w\n  \\<forall>k<num_args w.\n     args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n     args (ws ! 0) ! k\n  Suc 0 < length ws \\<longrightarrow>\n  prio (prio_emb_pos prio (ws ! 0) u) = 1\n\ngoal (1 subgoal):\n 1. head (ws ! 0) = head w \\<and>\n    num_args (ws ! 0) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! 0) ! k) \\<and>\n    (Suc 0 < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! 0) u) = 1)", "by blast"], ["proof (state)\nthis:\n  head (ws ! 0) = head w \\<and>\n  num_args (ws ! 0) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! 0) ! k) \\<and>\n  (Suc 0 < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! 0) u) = 1)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "case (Suc i)"], ["proof (state)\nthis:\n  i < length ws \\<Longrightarrow>\n  head (ws ! i) = head w \\<and>\n  num_args (ws ! i) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! i) ! k) \\<and>\n  (Suc i < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! i) u) = 1)\n  Suc i < length ws\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "then"], ["proof (chain)\npicking this:\n  i < length ws \\<Longrightarrow>\n  head (ws ! i) = head w \\<and>\n  num_args (ws ! i) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! i) ! k) \\<and>\n  (Suc i < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! i) u) = 1)\n  Suc i < length ws", "have ih: \n        \"prio (prio_emb_pos prio (ws ! i) u) = 1\" \n        \"head (ws ! i) = head w\" \n        \"num_args (ws ! i) = num_args w\""], ["proof (prove)\nusing this:\n  i < length ws \\<Longrightarrow>\n  head (ws ! i) = head w \\<and>\n  num_args (ws ! i) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! i) ! k) \\<and>\n  (Suc i < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! i) u) = 1)\n  Suc i < length ws\n\ngoal (1 subgoal):\n 1. prio (prio_emb_pos prio (ws ! i) u) = 1 &&&\n    head (ws ! i) = head w &&& num_args (ws ! i) = num_args w", "by simp_all"], ["proof (state)\nthis:\n  prio (prio_emb_pos prio (ws ! i) u) = 1\n  head (ws ! i) = head w\n  num_args (ws ! i) = num_args w\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "have 1:\"head (ws ! Suc i) = head w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (ws ! Suc i) = head w", "by (metis Suc.prems prio_def emb_step_under_args_head ih(1) ih(2) prio_emb_step_def ws_def(4) zero_neq_one)"], ["proof (state)\nthis:\n  head (ws ! Suc i) = head w\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "have 2:\"num_args (ws ! Suc i) = num_args w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_args (ws ! Suc i) = num_args w", "by (metis Suc.prems emb_step_under_args_num_args ih(1) ih(3) prio_def prio_emb_step_def ws_def(4) zero_neq_one)"], ["proof (state)\nthis:\n  num_args (ws ! Suc i) = num_args w\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "have \"\\<forall>k<num_args (ws ! i). args (ws ! i) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (ws ! Suc i) ! k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k<num_args (ws ! i).\n       args (ws ! i) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       args (ws ! Suc i) ! k", "using Suc.prems emb_step_under_args_emb ih(1) prio_def prio_emb_step_def ws_def(4) zero_neq_one"], ["proof (prove)\nusing this:\n  Suc i < length ws\n  \\<lbrakk>\\<not> list_all (\\<lambda>x. x = dir.Left) ?p;\n   position_of ?t (?p @ [?d])\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<num_args ?t.\n                       args ?t ! i \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                       args (emb_step_at ?p ?d ?t) ! i\n  prio (prio_emb_pos prio (ws ! i) u) = 1\n  prio =\n  (\\<lambda>p.\n      if list_all (\\<lambda>x. x = dir.Left) (butlast p) then 0 else 1)\n  prio_emb_step ?prio ?t ?s = emb_step_at' (prio_emb_pos ?prio ?t ?s) ?t\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     prio_emb_step prio (ws ! i) u = ws ! Suc i \\<and>\n     ws ! i \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b ws ! Suc i\n  (0::?'a) \\<noteq> (1::?'a)\n\ngoal (1 subgoal):\n 1. \\<forall>k<num_args (ws ! i).\n       args (ws ! i) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       args (ws ! Suc i) ! k", "by (metis (no_types, lifting) append_butlast_last_id prio_emb_posI ws_emb_u)"], ["proof (state)\nthis:\n  \\<forall>k<num_args (ws ! i).\n     args (ws ! i) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n     args (ws ! Suc i) ! k\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "then"], ["proof (chain)\npicking this:\n  \\<forall>k<num_args (ws ! i).\n     args (ws ! i) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n     args (ws ! Suc i) ! k", "have 3:\"\\<forall>k. k < num_args w \\<longrightarrow> args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (ws ! Suc i) ! k\""], ["proof (prove)\nusing this:\n  \\<forall>k<num_args (ws ! i).\n     args (ws ! i) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n     args (ws ! Suc i) ! k\n\ngoal (1 subgoal):\n 1. \\<forall>k<num_args w.\n       args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       args (ws ! Suc i) ! k", "using Suc.hyps Suc.prems emb_trans"], ["proof (prove)\nusing this:\n  \\<forall>k<num_args (ws ! i).\n     args (ws ! i) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n     args (ws ! Suc i) ! k\n  i < length ws \\<Longrightarrow>\n  head (ws ! i) = head w \\<and>\n  num_args (ws ! i) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! i) ! k) \\<and>\n  (Suc i < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! i) u) = 1)\n  Suc i < length ws\n  \\<lbrakk>?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?u;\n   ?u \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\\<rbrakk>\n  \\<Longrightarrow> ?t \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?s\n\ngoal (1 subgoal):\n 1. \\<forall>k<num_args w.\n       args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       args (ws ! Suc i) ! k", "by force"], ["proof (state)\nthis:\n  \\<forall>k<num_args w.\n     args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n     args (ws ! Suc i) ! k\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "have \"\\<And>p q dp dq. prio (q @ [dq]) < prio (p @ [dp]) \\<Longrightarrow> take (length p) q \\<noteq> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q dp dq.\n       prio (q @ [dq]) < prio (p @ [dp]) \\<Longrightarrow>\n       take (length p) q \\<noteq> p", "unfolding prio_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q dp dq.\n       (if list_all (\\<lambda>x. x = dir.Left) (butlast (q @ [dq])) then 0\n        else 1)\n       < (if list_all (\\<lambda>x. x = dir.Left) (butlast (p @ [dp])) then 0\n          else 1) \\<Longrightarrow>\n       take (length p) q \\<noteq> p", "using append_take_drop_id list_all_append"], ["proof (prove)\nusing this:\n  take ?n ?xs @ drop ?n ?xs = ?xs\n  list_all ?P (?xs @ ?ys) = (list_all ?P ?xs \\<and> list_all ?P ?ys)\n\ngoal (1 subgoal):\n 1. \\<And>p q dp dq.\n       (if list_all (\\<lambda>x. x = dir.Left) (butlast (q @ [dq])) then 0\n        else 1)\n       < (if list_all (\\<lambda>x. x = dir.Left) (butlast (p @ [dp])) then 0\n          else 1) \\<Longrightarrow>\n       take (length p) q \\<noteq> p", "by (metis (mono_tags, lifting) butlast_snoc gr_implies_not0 less_not_refl2)"], ["proof (state)\nthis:\n  prio (?q @ [?dq]) < prio (?p @ [?dp]) \\<Longrightarrow>\n  take (length ?p) ?q \\<noteq> ?p\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "then"], ["proof (chain)\npicking this:\n  prio (?q @ [?dq]) < prio (?p @ [?dp]) \\<Longrightarrow>\n  take (length ?p) ?q \\<noteq> ?p", "have 4:\"Suc (Suc i) < length ws \\<longrightarrow> prio (prio_emb_pos prio (ws ! Suc i) u) = 1\""], ["proof (prove)\nusing this:\n  prio (?q @ [?dq]) < prio (?p @ [?dp]) \\<Longrightarrow>\n  take (length ?p) ?q \\<noteq> ?p\n\ngoal (1 subgoal):\n 1. Suc (Suc i) < length ws \\<longrightarrow>\n    prio (prio_emb_pos prio (ws ! Suc i) u) = 1", "by (metis Suc.prems ih(1) not_one_le_zero prio_def prio_emb_pos_increase ws_def(4) ws_emb_u)"], ["proof (state)\nthis:\n  Suc (Suc i) < length ws \\<longrightarrow>\n  prio (prio_emb_pos prio (ws ! Suc i) u) = 1\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length ws \\<Longrightarrow>\n                head (ws ! i) = head w \\<and>\n                num_args (ws ! i) = num_args w \\<and>\n                (\\<forall>k<num_args w.\n                    args (subst \\<rho> w) !\n                    k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                    args (ws ! i) ! k) \\<and>\n                (Suc i < length ws \\<longrightarrow>\n                 prio (prio_emb_pos prio (ws ! i) u) = 1);\n        Suc i < length ws\\<rbrakk>\n       \\<Longrightarrow> head (ws ! Suc i) = head w \\<and>\n                         num_args (ws ! Suc i) = num_args w \\<and>\n                         (\\<forall>k<num_args w.\n                             args (subst \\<rho> w) !\n                             k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                             args (ws ! Suc i) ! k) \\<and>\n                         (Suc (Suc i) < length ws \\<longrightarrow>\n                          prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "then"], ["proof (chain)\npicking this:\n  Suc (Suc i) < length ws \\<longrightarrow>\n  prio (prio_emb_pos prio (ws ! Suc i) u) = 1", "show ?case"], ["proof (prove)\nusing this:\n  Suc (Suc i) < length ws \\<longrightarrow>\n  prio (prio_emb_pos prio (ws ! Suc i) u) = 1\n\ngoal (1 subgoal):\n 1. head (ws ! Suc i) = head w \\<and>\n    num_args (ws ! Suc i) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! Suc i) ! k) \\<and>\n    (Suc (Suc i) < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "using 1 2 3 4"], ["proof (prove)\nusing this:\n  Suc (Suc i) < length ws \\<longrightarrow>\n  prio (prio_emb_pos prio (ws ! Suc i) u) = 1\n  head (ws ! Suc i) = head w\n  num_args (ws ! Suc i) = num_args w\n  \\<forall>k<num_args w.\n     args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n     args (ws ! Suc i) ! k\n  Suc (Suc i) < length ws \\<longrightarrow>\n  prio (prio_emb_pos prio (ws ! Suc i) u) = 1\n\ngoal (1 subgoal):\n 1. head (ws ! Suc i) = head w \\<and>\n    num_args (ws ! Suc i) = num_args w \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! Suc i) ! k) \\<and>\n    (Suc (Suc i) < length ws \\<longrightarrow>\n     prio (prio_emb_pos prio (ws ! Suc i) u) = 1)", "by auto"], ["proof (state)\nthis:\n  head (ws ! Suc i) = head w \\<and>\n  num_args (ws ! Suc i) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! Suc i) ! k) \\<and>\n  (Suc (Suc i) < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! Suc i) u) = 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  head (ws ! i) = head w \\<and>\n  num_args (ws ! i) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! i) ! k) \\<and>\n  (Suc i < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! i) u) = 1)\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  ?i2 < length ws \\<Longrightarrow>\n  head (ws ! ?i2) = head w \\<and>\n  num_args (ws ! ?i2) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! ?i2) ! k) \\<and>\n  (Suc ?i2 < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! ?i2) u) = 1)\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note 1 = this"], ["proof (state)\nthis:\n  ?i2 < length ws \\<Longrightarrow>\n  head (ws ! ?i2) = head w \\<and>\n  num_args (ws ! ?i2) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! ?i2) ! k) \\<and>\n  (Suc ?i2 < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! ?i2) u) = 1)\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>i. Suc i < length ws \\<longrightarrow> \n      (\\<exists>p d. emb_step_at p d (ws ! i) = ws ! Suc i \\<and> \\<not> list_all (\\<lambda>x. x = Left) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       Suc i < length ws \\<longrightarrow>\n       (\\<exists>p d.\n           emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n           \\<not> list_all (\\<lambda>x. x = dir.Left) p)", "by (metis \"1\" Suc_lessD prio_def prio_emb_step_def ws_def(4) zero_neq_one)"], ["proof (state)\nthis:\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     (\\<exists>p d.\n         emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n         \\<not> list_all (\\<lambda>x. x = dir.Left) p)\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     (\\<exists>p d.\n         emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n         \\<not> list_all (\\<lambda>x. x = dir.Left) p)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     (\\<exists>p d.\n         emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n         \\<not> list_all (\\<lambda>x. x = dir.Left) p)\n\ngoal (1 subgoal):\n 1. thesis", "using that ws_def(1) ws_def(2) ws_def(3)"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     (\\<exists>p d.\n         emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n         \\<not> list_all (\\<lambda>x. x = dir.Left) p)\n  \\<lbrakk>?ws \\<noteq> []; hd ?ws = subst \\<rho> w; last ?ws = u;\n   \\<forall>i.\n      Suc i < length ?ws \\<longrightarrow>\n      (\\<exists>p d.\n          emb_step_at p d (?ws ! i) = ?ws ! Suc i \\<and>\n          \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n   \\<forall>i<length ?ws.\n      head (?ws ! i) = head w \\<and> num_args (?ws ! i) = num_args w;\n   \\<forall>i<length ?ws.\n      \\<forall>k<num_args w.\n         args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n         args (?ws ! i) ! k\\<rbrakk>\n  \\<Longrightarrow> thesis\n  ws \\<noteq> []\n  hd ws = subst \\<rho> w\n  last ws = u\n\ngoal (1 subgoal):\n 1. thesis", "using \"1\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     (\\<exists>p d.\n         emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n         \\<not> list_all (\\<lambda>x. x = dir.Left) p)\n  \\<lbrakk>?ws \\<noteq> []; hd ?ws = subst \\<rho> w; last ?ws = u;\n   \\<forall>i.\n      Suc i < length ?ws \\<longrightarrow>\n      (\\<exists>p d.\n          emb_step_at p d (?ws ! i) = ?ws ! Suc i \\<and>\n          \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n   \\<forall>i<length ?ws.\n      head (?ws ! i) = head w \\<and> num_args (?ws ! i) = num_args w;\n   \\<forall>i<length ?ws.\n      \\<forall>k<num_args w.\n         args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n         args (?ws ! i) ! k\\<rbrakk>\n  \\<Longrightarrow> thesis\n  ws \\<noteq> []\n  hd ws = subst \\<rho> w\n  last ws = u\n  ?i2 < length ws \\<Longrightarrow>\n  head (ws ! ?i2) = head w \\<and>\n  num_args (ws ! ?i2) = num_args w \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n      args (ws ! ?i2) ! k) \\<and>\n  (Suc ?i2 < length ws \\<longrightarrow>\n   prio (prio_emb_pos prio (ws ! ?i2) u) = 1)\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma perform_emb_above_vars:\n  assumes \n    \"subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n  obtains w where\n    \"s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\"\n    \"subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\"\n    \"is_Sym (head w) \\<Longrightarrow> head w = head u \\<and> num_args w = num_args u \\<and> (\\<forall>k. k<num_args w \\<longrightarrow> args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args u ! k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         is_Sym (head w) \\<Longrightarrow>\n         head w = head u \\<and>\n         num_args w = num_args u \\<and>\n         (\\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args u ! k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         is_Sym (head w) \\<Longrightarrow>\n         head w = head u \\<and>\n         num_args w = num_args u \\<and>\n         (\\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args u ! k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain w where w_def:\n    \"s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\" \n    \"subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\" \n    \"\\<forall>w'. w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow> \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         \\<forall>w'.\n            w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n            \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                   u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using perform_emb_above_vars0[OF \\<open>subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<close>]"], ["proof (prove)\nusing this:\n  (\\<And>w.\n      \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n       subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n       \\<forall>w'.\n          w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n          \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         \\<forall>w'.\n            w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n            \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n                   u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\n  subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  \\<forall>w'.\n     w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n     \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         is_Sym (head w) \\<Longrightarrow>\n         head w = head u \\<and>\n         num_args w = num_args u \\<and>\n         (\\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args u ! k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\n  subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n  \\<forall>w'.\n     w \\<rightarrow>\\<^sub>e\\<^sub>m\\<^sub>b w' \\<longrightarrow>\n     \\<not> subst \\<rho> w' \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         is_Sym (head w) \\<Longrightarrow>\n         head w = head u \\<and>\n         num_args w = num_args u \\<and>\n         (\\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args u ! k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"is_Sym (head w)\""], ["proof (state)\nthis:\n  is_Sym (head w)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         is_Sym (head w) \\<Longrightarrow>\n         head w = head u \\<and>\n         num_args w = num_args u \\<and>\n         (\\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args u ! k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain ws where ws_def:\n      \"ws \\<noteq> []\" \n      \"hd ws = subst \\<rho> w\" \n      \"last ws = u\" \n      \"\\<forall>i. Suc i < length ws \\<longrightarrow> (\\<exists>p d. emb_step_at p d (ws ! i) = ws ! Suc i \\<and> \\<not> list_all (\\<lambda>x. x = Left) p)\"\n      \"\\<forall>i<length ws. head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w\"\n      \"\\<forall>i<length ws. \\<forall>k<num_args w. args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args (ws ! i) ! k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using emb_only_below_vars[OF \\<open>subst \\<rho> s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<close> \\<open>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\\<close> \\<open>is_Sym (head w)\\<close> \\<open>subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\\<close> w_def(3)]"], ["proof (prove)\nusing this:\n  (\\<And>ws.\n      \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n       \\<forall>i.\n          Suc i < length ws \\<longrightarrow>\n          (\\<exists>p d.\n              emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n              \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n       \\<forall>i<length ws.\n          head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n       \\<forall>i<length ws.\n          \\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args (ws ! i) ! k\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>ws.\n        \\<lbrakk>ws \\<noteq> []; hd ws = subst \\<rho> w; last ws = u;\n         \\<forall>i.\n            Suc i < length ws \\<longrightarrow>\n            (\\<exists>p d.\n                emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n                \\<not> list_all (\\<lambda>x. x = dir.Left) p);\n         \\<forall>i<length ws.\n            head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w;\n         \\<forall>i<length ws.\n            \\<forall>k<num_args w.\n               args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n               args (ws ! i) ! k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ws \\<noteq> []\n  hd ws = subst \\<rho> w\n  last ws = u\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     (\\<exists>p d.\n         emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n         \\<not> list_all (\\<lambda>x. x = dir.Left) p)\n  \\<forall>i<length ws.\n     head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w\n  \\<forall>i<length ws.\n     \\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! i) ! k\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         is_Sym (head w) \\<Longrightarrow>\n         head w = head u \\<and>\n         num_args w = num_args u \\<and>\n         (\\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args u ! k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  ws \\<noteq> []\n  hd ws = subst \\<rho> w\n  last ws = u\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     (\\<exists>p d.\n         emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n         \\<not> list_all (\\<lambda>x. x = dir.Left) p)\n  \\<forall>i<length ws.\n     head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w\n  \\<forall>i<length ws.\n     \\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! i) ! k", "have \"head w = head u \\<and> num_args w = num_args u \\<and> (\\<forall>k. k<num_args w \\<longrightarrow> args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args u ! k)\""], ["proof (prove)\nusing this:\n  ws \\<noteq> []\n  hd ws = subst \\<rho> w\n  last ws = u\n  \\<forall>i.\n     Suc i < length ws \\<longrightarrow>\n     (\\<exists>p d.\n         emb_step_at p d (ws ! i) = ws ! Suc i \\<and>\n         \\<not> list_all (\\<lambda>x. x = dir.Left) p)\n  \\<forall>i<length ws.\n     head (ws ! i) = head w \\<and> num_args (ws ! i) = num_args w\n  \\<forall>i<length ws.\n     \\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args (ws ! i) ! k\n\ngoal (1 subgoal):\n 1. head w = head u \\<and>\n    num_args w = num_args u \\<and>\n    (\\<forall>k<num_args w.\n        args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n        args u ! k)", "by (metis One_nat_def append_butlast_last_id diff_Suc_1 diff_Suc_less length_append_singleton length_greater_0_conv nth_append_length)"], ["proof (state)\nthis:\n  head w = head u \\<and>\n  num_args w = num_args u \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args u ! k)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         is_Sym (head w) \\<Longrightarrow>\n         head w = head u \\<and>\n         num_args w = num_args u \\<and>\n         (\\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args u ! k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  is_Sym (head w) \\<Longrightarrow>\n  head w = head u \\<and>\n  num_args w = num_args u \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args u ! k)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w;\n         subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n         is_Sym (head w) \\<Longrightarrow>\n         head w = head u \\<and>\n         num_args w = num_args u \\<and>\n         (\\<forall>k<num_args w.\n             args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n             args u ! k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  is_Sym (head w) \\<Longrightarrow>\n  head w = head u \\<and>\n  num_args w = num_args u \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args u ! k)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Sym (head w) \\<Longrightarrow>\n  head w = head u \\<and>\n  num_args w = num_args u \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args u ! k)\n\ngoal (1 subgoal):\n 1. thesis", "using that w_def(1) w_def(2)"], ["proof (prove)\nusing this:\n  is_Sym (head w) \\<Longrightarrow>\n  head w = head u \\<and>\n  num_args w = num_args u \\<and>\n  (\\<forall>k<num_args w.\n      args (subst \\<rho> w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b args u ! k)\n  \\<lbrakk>s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b ?w;\n   subst \\<rho> ?w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u;\n   is_Sym (head ?w) \\<Longrightarrow>\n   head ?w = head u \\<and>\n   num_args ?w = num_args u \\<and>\n   (\\<forall>k<num_args ?w.\n       args (subst \\<rho> ?w) ! k \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b\n       args u ! k)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  s \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b w\n  subst \\<rho> w \\<unrhd>\\<^sub>e\\<^sub>m\\<^sub>b u\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}