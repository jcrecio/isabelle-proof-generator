{"file_name": "/home/qj213/afp-2021-10-22/thys/Tree_Decomposition/TreeDecomposition.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Tree_Decomposition", "problem_names": ["lemma bags_in_V: \"t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> bag t \\<subseteq> V\"", "lemma bag_finite: \"t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> finite (bag t)\"", "lemma bag_bound_V: \"t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> card (bag t) \\<le> card V\"", "lemma bag_bound_V_empty: \"\\<lbrakk> V = {}; t \\<in> V\\<^bsub>T\\<^esub> \\<rbrakk> \\<Longrightarrow> card (bag t) = 0\"", "lemma empty_tree_empty_V: \"V\\<^bsub>T\\<^esub> = {} \\<Longrightarrow> V = {}\"", "lemma bags_exist: \"v \\<in> V \\<Longrightarrow> \\<exists>t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t\"", "lemma bag_cards_finite: \"finite bag_cards\"", "lemma bag_cards_nonempty: \"V \\<noteq> {} \\<Longrightarrow> bag_cards \\<noteq> {}\"", "lemma max_bag_card_in_bag_cards: \"V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<in> bag_cards\"", "lemma max_bag_card_lower_bound_bag: \"t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> max_bag_card \\<ge> card (bag t)\"", "lemma max_bag_card_lower_bound_1: assumes \"V \\<noteq> {}\" shows \"max_bag_card > 0\"", "lemma max_bag_card_upper_bound_V: \"V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<le> card V\"", "lemma width_upper_bound_V: \"V \\<noteq> {} \\<Longrightarrow> width < card V\"", "lemma width_V_empty: \"V = {} \\<Longrightarrow> width = 0\"", "lemma width_bound_V_le: \"width \\<le> card V - 1\"", "lemma width_lower_bound_1:\n  assumes \"v\\<rightarrow>w\"\n  shows \"width \\<ge> 1\"", "lemma treewidth_cards_treewidth:\n  \"\\<exists>(T :: nat Graph) bag. TreeDecomposition G T bag \\<and> treewidth = TreeDecomposition.width T bag\"", "lemma treewidth_upper_bound_ex:\n  \"\\<lbrakk> TreeDecomposition G (T :: nat Graph) bag; TreeDecomposition.width T bag \\<le> n \\<rbrakk> \\<Longrightarrow> treewidth \\<le> n\"", "lemma left_partI [intro]: \"\\<lbrakk> v \\<in> bag u; u \\<in> T.left_tree s t \\<rbrakk> \\<Longrightarrow> v \\<in> left_part s t\"", "lemma left_part_in_V: \"left_part s t \\<subseteq> V\"", "lemma vertex_subtreeI [intro]: \"\\<lbrakk> t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t \\<rbrakk> \\<Longrightarrow> t \\<in> vertex_subtree v\"", "lemma vertex_subtree_connected:\n  assumes v: \"v \\<in> V\" and s: \"s \\<in> vertex_subtree v\" and t: \"t \\<in> vertex_subtree v\"\n    and xs: \"s \\<leadsto>xs\\<leadsto>\\<^bsub>T\\<^esub> t\"\n  shows \"set xs \\<subseteq> vertex_subtree v\"", "lemma vertex_in_separator:\n  assumes st: \"s \\<rightarrow>\\<^bsub>T\\<^esub> t\" and v: \"v \\<in> left_part s t\" \"v \\<in> left_part t s\"\n  shows \"v \\<in> bag s\" \"v \\<in> bag t\"", "theorem bags_separate:\n  assumes st: \"s \\<rightarrow>\\<^bsub>T\\<^esub> t\" and v: \"v \\<in> left_part s t\" and w: \"w \\<in> left_part t s\" and xs: \"v \\<leadsto>xs\\<leadsto> w\"\n  shows \"set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\""], "translations": [["", "lemma bags_in_V: \"t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> bag t \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> bag t \\<subseteq> V", "using bags_union Sup_upper mem_Collect_eq"], ["proof (prove)\nusing this:\n  \\<Union> {bag t |t. t \\<in> V\\<^bsub>T\\<^esub>} = V\n  ?x \\<in> ?A \\<Longrightarrow> ?x \\<le> Sup ?A\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> bag t \\<subseteq> V", "by blast"], ["", "lemma bag_finite: \"t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> finite (bag t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> finite (bag t)", "using bags_in_V finite_subset finite_vertex_set"], ["proof (prove)\nusing this:\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> bag ?t \\<subseteq> V\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  finite V\n\ngoal (1 subgoal):\n 1. t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> finite (bag t)", "by blast"], ["", "lemma bag_bound_V: \"t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> card (bag t) \\<le> card V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> card (bag t) \\<le> card V", "by (simp add: bags_in_V card_mono finite_vertex_set)"], ["", "lemma bag_bound_V_empty: \"\\<lbrakk> V = {}; t \\<in> V\\<^bsub>T\\<^esub> \\<rbrakk> \\<Longrightarrow> card (bag t) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>V = {}; t \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> card (bag t) = 0", "using bag_bound_V"], ["proof (prove)\nusing this:\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> card (bag ?t) \\<le> card V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>V = {}; t \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> card (bag t) = 0", "by auto"], ["", "lemma empty_tree_empty_V: \"V\\<^bsub>T\\<^esub> = {} \\<Longrightarrow> V = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V\\<^bsub>T\\<^esub> = {} \\<Longrightarrow> V = {}", "using bags_union"], ["proof (prove)\nusing this:\n  \\<Union> {bag t |t. t \\<in> V\\<^bsub>T\\<^esub>} = V\n\ngoal (1 subgoal):\n 1. V\\<^bsub>T\\<^esub> = {} \\<Longrightarrow> V = {}", "by simp"], ["", "lemma bags_exist: \"v \\<in> V \\<Longrightarrow> \\<exists>t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t", "using bags_union"], ["proof (prove)\nusing this:\n  \\<Union> {bag t |t. t \\<in> V\\<^bsub>T\\<^esub>} = V\n\ngoal (1 subgoal):\n 1. v \\<in> V \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t", "using UnionE mem_Collect_eq"], ["proof (prove)\nusing this:\n  \\<Union> {bag t |t. t \\<in> V\\<^bsub>T\\<^esub>} = V\n  \\<lbrakk>?A \\<in> \\<Union> ?C;\n   \\<And>X.\n      \\<lbrakk>?A \\<in> X; X \\<in> ?C\\<rbrakk> \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. v \\<in> V \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t", "by auto"], ["", "text \\<open>\n  The width is never larger than the number of vertices, and if there is at least one vertex\n  in the graph, then it is always smaller.  This is trivially true because a bag contains at most\n  all of @{term V}.  However, the proof is not fully trivial because we also need to show that\n  @{const width} is well-defined.\\<close>"], ["", "lemma bag_cards_finite: \"finite bag_cards\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite bag_cards", "using T.finite_vertex_set"], ["proof (prove)\nusing this:\n  finite V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. finite bag_cards", "by simp"], ["", "lemma bag_cards_nonempty: \"V \\<noteq> {} \\<Longrightarrow> bag_cards \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> bag_cards \\<noteq> {}", "using bag_cards_finite empty_tree_empty_V empty_Collect_eq ex_in_conv"], ["proof (prove)\nusing this:\n  finite bag_cards\n  V\\<^bsub>T\\<^esub> = {} \\<Longrightarrow> V = {}\n  ({} = Collect ?P) = (\\<forall>x. \\<not> ?P x)\n  (\\<exists>x. x \\<in> ?A) = (?A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> bag_cards \\<noteq> {}", "by blast"], ["", "lemma max_bag_card_in_bag_cards: \"V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<in> bag_cards\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<in> bag_cards", "unfolding max_bag_card_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> Max bag_cards \\<in> bag_cards", "using Max_in bag_cards_finite bag_cards_nonempty"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max ?A \\<in> ?A\n  finite bag_cards\n  V \\<noteq> {} \\<Longrightarrow> bag_cards \\<noteq> {}\n\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> Max bag_cards \\<in> bag_cards", "by auto"], ["", "lemma max_bag_card_lower_bound_bag: \"t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> max_bag_card \\<ge> card (bag t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow>\n    card (bag t) \\<le> max_bag_card", "by (metis (mono_tags, lifting) Max_ge bag_cards_finite max_bag_card_def mem_Collect_eq)"], ["", "lemma max_bag_card_lower_bound_1: assumes \"V \\<noteq> {}\" shows \"max_bag_card > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < max_bag_card", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < max_bag_card", "have \"\\<exists>v \\<in> V. \\<exists>t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>V. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t", "using \\<open>V \\<noteq> {}\\<close> bags_union"], ["proof (prove)\nusing this:\n  V \\<noteq> {}\n  \\<Union> {bag t |t. t \\<in> V\\<^bsub>T\\<^esub>} = V\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>V. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t", "by blast"], ["proof (state)\nthis:\n  \\<exists>v\\<in>V. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t\n\ngoal (1 subgoal):\n 1. 0 < max_bag_card", "thus \"max_bag_card > 0\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>V. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t\n\ngoal (1 subgoal):\n 1. 0 < max_bag_card", "unfolding max_bag_card_def"], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>V. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t\n\ngoal (1 subgoal):\n 1. 0 < Max bag_cards", "using bag_finite\n    card_gt_0_iff emptyE Max_gr_iff[OF bag_cards_finite bag_cards_nonempty[OF assms]]"], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>V. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. v \\<in> bag t\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> finite (bag ?t)\n  (0 < card ?A) = (?A \\<noteq> {} \\<and> finite ?A)\n  ?a \\<in> {} \\<Longrightarrow> ?P\n  (?x < Max bag_cards) = (\\<exists>a\\<in>bag_cards. ?x < a)\n\ngoal (1 subgoal):\n 1. 0 < Max bag_cards", "by auto"], ["proof (state)\nthis:\n  0 < max_bag_card\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma max_bag_card_upper_bound_V: \"V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<le> card V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<le> card V", "unfolding max_bag_card_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> Max bag_cards \\<le> card V", "using Max_le_iff[OF bag_cards_finite bag_cards_nonempty] bag_bound_V"], ["proof (prove)\nusing this:\n  V \\<noteq> {} \\<Longrightarrow>\n  (Max bag_cards \\<le> ?x) = (\\<forall>a\\<in>bag_cards. a \\<le> ?x)\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> card (bag ?t) \\<le> card V\n\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> Max bag_cards \\<le> card V", "by blast"], ["", "lemma width_upper_bound_V: \"V \\<noteq> {} \\<Longrightarrow> width < card V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow> width < card V", "unfolding width_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow>\n    (if V\\<^bsub>T\\<^esub> = {} then 0 else max_bag_card - 1) < card V", "using max_bag_card_upper_bound_V max_bag_card_lower_bound_1\n    diff_less empty_tree_empty_V le_neq_implies_less less_imp_diff_less zero_less_one"], ["proof (prove)\nusing this:\n  V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<le> card V\n  V \\<noteq> {} \\<Longrightarrow> 0 < max_bag_card\n  \\<lbrakk>0 < ?n; 0 < ?m\\<rbrakk> \\<Longrightarrow> ?m - ?n < ?m\n  V\\<^bsub>T\\<^esub> = {} \\<Longrightarrow> V = {}\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n  ?j < ?k \\<Longrightarrow> ?j - ?n < ?k\n  (0::?'a) < (1::?'a)\n\ngoal (1 subgoal):\n 1. V \\<noteq> {} \\<Longrightarrow>\n    (if V\\<^bsub>T\\<^esub> = {} then 0 else max_bag_card - 1) < card V", "by presburger"], ["", "lemma width_V_empty: \"V = {} \\<Longrightarrow> width = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V = {} \\<Longrightarrow> width = 0", "unfolding width_def max_bag_card_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V = {} \\<Longrightarrow>\n    (if V\\<^bsub>T\\<^esub> = {} then 0 else Max bag_cards - 1) = 0", "using bag_bound_V_empty T.finite_vertex_set"], ["proof (prove)\nusing this:\n  \\<lbrakk>V = {}; ?t \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> card (bag ?t) = 0\n  finite V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. V = {} \\<Longrightarrow>\n    (if V\\<^bsub>T\\<^esub> = {} then 0 else Max bag_cards - 1) = 0", "by (cases \"V\\<^bsub>T\\<^esub> = {}\") auto"], ["", "lemma width_bound_V_le: \"width \\<le> card V - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. width \\<le> card V - 1", "using width_upper_bound_V width_V_empty"], ["proof (prove)\nusing this:\n  V \\<noteq> {} \\<Longrightarrow> width < card V\n  V = {} \\<Longrightarrow> width = 0\n\ngoal (1 subgoal):\n 1. width \\<le> card V - 1", "by (cases \"V = {}\") auto"], ["", "lemma width_lower_bound_1:\n  assumes \"v\\<rightarrow>w\"\n  shows \"width \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> width", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 \\<le> width", "obtain t where t: \"t \\<in> V\\<^bsub>T\\<^esub>\" \"v \\<in> bag t\" \"w \\<in> bag t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t;\n         w \\<in> bag t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bags_edges assms"], ["proof (prove)\nusing this:\n  ?v \\<rightarrow> ?w \\<Longrightarrow>\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. ?v \\<in> bag t \\<and> ?w \\<in> bag t\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t;\n         w \\<in> bag t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n  w \\<in> bag t\n\ngoal (1 subgoal):\n 1. 1 \\<le> width", "have \"card (bag t) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (bag t) \\<noteq> 0", "using t(1,2) bag_finite card_0_eq empty_iff"], ["proof (prove)\nusing this:\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> finite (bag ?t)\n  finite ?A \\<Longrightarrow> (card ?A = 0) = (?A = {})\n  (?c \\<in> {}) = False\n\ngoal (1 subgoal):\n 1. card (bag t) \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  card (bag t) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 \\<le> width", "moreover"], ["proof (state)\nthis:\n  card (bag t) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 \\<le> width", "have \"card (bag t) \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (bag t) \\<noteq> 1", "using t(2,3) assms no_loops"], ["proof (prove)\nusing this:\n  v \\<in> bag t\n  w \\<in> bag t\n  v \\<rightarrow> w\n  (?v, ?v) \\<notin> E\n\ngoal (1 subgoal):\n 1. card (bag t) \\<noteq> 1", "by (metis One_nat_def card_Suc_eq empty_iff insertE)"], ["proof (state)\nthis:\n  card (bag t) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 1 \\<le> width", "ultimately"], ["proof (chain)\npicking this:\n  card (bag t) \\<noteq> 0\n  card (bag t) \\<noteq> 1", "have \"card (bag t) \\<ge> 2\""], ["proof (prove)\nusing this:\n  card (bag t) \\<noteq> 0\n  card (bag t) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (bag t)", "by simp"], ["proof (state)\nthis:\n  2 \\<le> card (bag t)\n\ngoal (1 subgoal):\n 1. 1 \\<le> width", "hence \"max_bag_card > 1\""], ["proof (prove)\nusing this:\n  2 \\<le> card (bag t)\n\ngoal (1 subgoal):\n 1. 1 < max_bag_card", "using t(1) max_bag_card_lower_bound_bag"], ["proof (prove)\nusing this:\n  2 \\<le> card (bag t)\n  t \\<in> V\\<^bsub>T\\<^esub>\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow>\n  card (bag ?t) \\<le> max_bag_card\n\ngoal (1 subgoal):\n 1. 1 < max_bag_card", "by fastforce"], ["proof (state)\nthis:\n  1 < max_bag_card\n\ngoal (1 subgoal):\n 1. 1 \\<le> width", "thus ?thesis"], ["proof (prove)\nusing this:\n  1 < max_bag_card\n\ngoal (1 subgoal):\n 1. 1 \\<le> width", "unfolding width_def"], ["proof (prove)\nusing this:\n  1 < max_bag_card\n\ngoal (1 subgoal):\n 1. 1 \\<le> (if V\\<^bsub>T\\<^esub> = {} then 0 else max_bag_card - 1)", "using t(1)"], ["proof (prove)\nusing this:\n  1 < max_bag_card\n  t \\<in> V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. 1 \\<le> (if V\\<^bsub>T\\<^esub> = {} then 0 else max_bag_card - 1)", "by fastforce"], ["proof (state)\nthis:\n  1 \\<le> width\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>locale TreeDecomposition\\<close>"], ["", "subsection \\<open>Treewidth of a Graph\\<close>"], ["", "context Graph begin"], ["", "text \\<open>The treewidth of a graph is the minimum treewidth over all its tree decompositions.\n  Here we assume without loss of generality that the universe of the vertices of the tree\n  is @{type nat}.  Because trees are finite, @{type nat} always contains enough elements.\\<close>"], ["", "abbreviation treewidth_cards :: \"nat set\" where \"treewidth_cards \\<equiv>\n  { TreeDecomposition.width T bag | (T :: nat Graph) bag. TreeDecomposition G T bag }\""], ["", "definition treewidth :: \"nat\" where \"treewidth \\<equiv> Min treewidth_cards\""], ["", "text \\<open>Every graph has a trivial tree decomposition consisting of a single bag containing all of\n  @{term V}.\\<close>"], ["", "proposition tree_decomposition_exists: \"\\<exists>(T :: 'c Graph) bag. TreeDecomposition G T bag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "obtain x where \"x \\<in> (UNIV :: 'c set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> UNIV \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "define T where [simp]: \"T = \\<lparr> verts = {x}, arcs = {} \\<rparr>\""], ["proof (state)\nthis:\n  T = \\<lparr>verts = {x}, arcs = {}\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "define bag where [simp]: \"bag = (\\<lambda>_ :: 'c. V)\""], ["proof (state)\nthis:\n  bag = (\\<lambda>_. V)\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "have \"Graph T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph T", "by unfold_locales simp_all"], ["proof (state)\nthis:\n  Graph T\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "then"], ["proof (chain)\npicking this:\n  Graph T", "interpret T: Graph T"], ["proof (prove)\nusing this:\n  Graph T\n\ngoal (1 subgoal):\n 1. Graph T", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "have \"\\<And>xs. \\<not>T.cycle xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> T.cycle xs", "using T.cycleE"], ["proof (prove)\nusing this:\n  T.cycle ?xs \\<Longrightarrow>\n  T.path ?xs \\<and>\n  ?xs \\<noteq> [] \\<and>\n  2 < length ?xs \\<and> last ?xs \\<rightarrow>\\<^bsub>T\\<^esub> hd ?xs\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> T.cycle xs", "by auto"], ["proof (state)\nthis:\n  \\<not> T.cycle ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "moreover"], ["proof (state)\nthis:\n  \\<not> T.cycle ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "have \"\\<And>v w. v \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> w \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> T.connected v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V\\<^bsub>T\\<^esub>;\n        w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> T.connected v w", "using T.connected_refl"], ["proof (prove)\nusing this:\n  ?v \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> T.connected ?v ?v\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V\\<^bsub>T\\<^esub>;\n        w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> T.connected v w", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?v \\<in> V\\<^bsub>T\\<^esub>; ?w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> T.connected ?v ?w\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> T.cycle ?xs\n  \\<lbrakk>?v \\<in> V\\<^bsub>T\\<^esub>; ?w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> T.connected ?v ?w", "have \"Tree T\""], ["proof (prove)\nusing this:\n  \\<not> T.cycle ?xs\n  \\<lbrakk>?v \\<in> V\\<^bsub>T\\<^esub>; ?w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> T.connected ?v ?w\n\ngoal (1 subgoal):\n 1. Tree T", "by unfold_locales"], ["proof (state)\nthis:\n  Tree T\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "then"], ["proof (chain)\npicking this:\n  Tree T", "interpret T: Tree T"], ["proof (prove)\nusing this:\n  Tree T\n\ngoal (1 subgoal):\n 1. Tree T", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "have \"TreeDecomposition G T bag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TreeDecomposition G T bag", "by unfold_locales (simp_all add: edges_are_in_V)"], ["proof (state)\nthis:\n  TreeDecomposition G T bag\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "thus ?thesis"], ["proof (prove)\nusing this:\n  TreeDecomposition G T bag\n\ngoal (1 subgoal):\n 1. \\<exists>T bag. TreeDecomposition G T bag", "by blast"], ["proof (state)\nthis:\n  \\<exists>T bag. TreeDecomposition G T bag\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary treewidth_cards_upper_bound_V: \"n \\<in> treewidth_cards \\<Longrightarrow> n \\<le> card V - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> treewidth_cards \\<Longrightarrow> n \\<le> card V - 1", "using TreeDecomposition.width_bound_V_le"], ["proof (prove)\nusing this:\n  TreeDecomposition ?G ?T ?bag \\<Longrightarrow>\n  TreeDecomposition.width ?T ?bag \\<le> card V\\<^bsub>?G\\<^esub> - 1\n\ngoal (1 subgoal):\n 1. n \\<in> treewidth_cards \\<Longrightarrow> n \\<le> card V - 1", "by blast"], ["", "corollary treewidth_cards_finite: \"finite treewidth_cards\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite treewidth_cards", "using treewidth_cards_upper_bound_V finite_nat_set_iff_bounded_le"], ["proof (prove)\nusing this:\n  ?n \\<in> treewidth_cards \\<Longrightarrow> ?n \\<le> card V - 1\n  finite ?N = (\\<exists>m. \\<forall>n\\<in>?N. n \\<le> m)\n\ngoal (1 subgoal):\n 1. finite treewidth_cards", "by auto"], ["", "corollary treewidth_cards_nonempty: \"treewidth_cards \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treewidth_cards \\<noteq> {}", "by (simp add: tree_decomposition_exists)"], ["", "lemma treewidth_cards_treewidth:\n  \"\\<exists>(T :: nat Graph) bag. TreeDecomposition G T bag \\<and> treewidth = TreeDecomposition.width T bag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>T bag.\n       TreeDecomposition G T bag \\<and>\n       treewidth = TreeDecomposition.width T bag", "using Min_in treewidth_cards_finite treewidth_cards_nonempty treewidth_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Min ?A \\<in> ?A\n  finite treewidth_cards\n  treewidth_cards \\<noteq> {}\n  treewidth \\<equiv> Min treewidth_cards\n\ngoal (1 subgoal):\n 1. \\<exists>T bag.\n       TreeDecomposition G T bag \\<and>\n       treewidth = TreeDecomposition.width T bag", "by fastforce"], ["", "corollary treewidth_upper_bound_V: \"treewidth \\<le> card V - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treewidth \\<le> card V - 1", "unfolding treewidth_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Min treewidth_cards \\<le> card V - 1", "using treewidth_cards_nonempty Min_in treewidth_cards_finite treewidth_cards_upper_bound_V"], ["proof (prove)\nusing this:\n  treewidth_cards \\<noteq> {}\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Min ?A \\<in> ?A\n  finite treewidth_cards\n  ?n \\<in> treewidth_cards \\<Longrightarrow> ?n \\<le> card V - 1\n\ngoal (1 subgoal):\n 1. Min treewidth_cards \\<le> card V - 1", "by auto"], ["", "corollary treewidth_upper_bound_0: \"V = {} \\<Longrightarrow> treewidth = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V = {} \\<Longrightarrow> treewidth = 0", "using treewidth_upper_bound_V"], ["proof (prove)\nusing this:\n  treewidth \\<le> card V - 1\n\ngoal (1 subgoal):\n 1. V = {} \\<Longrightarrow> treewidth = 0", "by simp"], ["", "corollary treewidth_upper_bound_1: \"card V = 1 \\<Longrightarrow> treewidth = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card V = 1 \\<Longrightarrow> treewidth = 0", "using treewidth_upper_bound_V"], ["proof (prove)\nusing this:\n  treewidth \\<le> card V - 1\n\ngoal (1 subgoal):\n 1. card V = 1 \\<Longrightarrow> treewidth = 0", "by simp"], ["", "corollary treewidth_lower_bound_1: \"v\\<rightarrow>w \\<Longrightarrow> treewidth \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow> w \\<Longrightarrow> 1 \\<le> treewidth", "using TreeDecomposition.width_lower_bound_1 treewidth_cards_treewidth"], ["proof (prove)\nusing this:\n  \\<lbrakk>TreeDecomposition ?G ?T ?bag;\n   ?v \\<rightarrow>\\<^bsub>?G\\<^esub> ?w\\<rbrakk>\n  \\<Longrightarrow> 1 \\<le> TreeDecomposition.width ?T ?bag\n  \\<exists>T bag.\n     TreeDecomposition G T bag \\<and>\n     treewidth = TreeDecomposition.width T bag\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> w \\<Longrightarrow> 1 \\<le> treewidth", "by fastforce"], ["", "lemma treewidth_upper_bound_ex:\n  \"\\<lbrakk> TreeDecomposition G (T :: nat Graph) bag; TreeDecomposition.width T bag \\<le> n \\<rbrakk> \\<Longrightarrow> treewidth \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TreeDecomposition G T bag;\n     TreeDecomposition.width T bag \\<le> n\\<rbrakk>\n    \\<Longrightarrow> treewidth \\<le> n", "unfolding treewidth_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TreeDecomposition G T bag;\n     TreeDecomposition.width T bag \\<le> n\\<rbrakk>\n    \\<Longrightarrow> Min treewidth_cards \\<le> n", "by (metis (mono_tags, lifting) Min_le dual_order.trans mem_Collect_eq treewidth_cards_finite)"], ["", "end \\<comment> \\<open>locale Graph\\<close>"], ["", "subsection \\<open>Separations\\<close>"], ["", "context TreeDecomposition begin"], ["", "text \\<open>\n  Every edge @{term \"s\\<rightarrow>\\<^bsub>T\\<^esub> t\"} in @{term T} separates @{term T}.  In a tree decomposition,\n  this edge also separates @{term G}.  Proving this is our goal.  First, let us define the set of\n  vertices appearing in the left subtree when separating the tree at @{term \"s \\<rightarrow>\\<^bsub>T\\<^esub> t\"}.\n\\<close>"], ["", "definition left_part :: \"'c \\<Rightarrow> 'c \\<Rightarrow> 'a set\" where\n  \"left_part s t \\<equiv> \\<Union>{ bag u | u. u \\<in> T.left_tree s t }\""], ["", "lemma left_partI [intro]: \"\\<lbrakk> v \\<in> bag u; u \\<in> T.left_tree s t \\<rbrakk> \\<Longrightarrow> v \\<in> left_part s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> bag u; u \\<in> T.left_tree s t\\<rbrakk>\n    \\<Longrightarrow> v \\<in> left_part s t", "unfolding left_part_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> bag u; u \\<in> T.left_tree s t\\<rbrakk>\n    \\<Longrightarrow> v \\<in> \\<Union> {bag u |u. u \\<in> T.left_tree s t}", "by blast"], ["", "lemma left_part_in_V: \"left_part s t \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_part s t \\<subseteq> V", "unfolding left_part_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {bag u |u. u \\<in> T.left_tree s t} \\<subseteq> V", "using T.left_tree_in_V bags_in_V"], ["proof (prove)\nusing this:\n  T.left_tree ?s ?t \\<subseteq> V\\<^bsub>T\\<^esub>\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> bag ?t \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<Union> {bag u |u. u \\<in> T.left_tree s t} \\<subseteq> V", "by blast"], ["", "text \\<open>Let us define the subgraph of @{term T} induced by a vertex of @{term G}.\\<close>"], ["", "definition vertex_subtree :: \"'a \\<Rightarrow> 'c set\" where\n  \"vertex_subtree v \\<equiv> { t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t }\""], ["", "lemma vertex_subtreeI [intro]: \"\\<lbrakk> t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t \\<rbrakk> \\<Longrightarrow> t \\<in> vertex_subtree v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n    \\<Longrightarrow> t \\<in> vertex_subtree v", "unfolding vertex_subtree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n    \\<Longrightarrow> t \\<in> {t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t}", "by blast"], ["", "text \\<open>\n  The suggestive name @{const vertex_subtree} is correct: Because @{term T} is a tree\n  decomposition, @{term \"vertex_subtree v\"} is a subtree (it is connected).\\<close>"], ["", "lemma vertex_subtree_connected:\n  assumes v: \"v \\<in> V\" and s: \"s \\<in> vertex_subtree v\" and t: \"t \\<in> vertex_subtree v\"\n    and xs: \"s \\<leadsto>xs\\<leadsto>\\<^bsub>T\\<^esub> t\"\n  shows \"set xs \\<subseteq> vertex_subtree v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> vertex_subtree v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> V\n  s \\<in> vertex_subtree v\n  t \\<in> vertex_subtree v\n  s \\<leadsto>xs\\<leadsto>\\<^bsub>T\\<^esub> t\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> vertex_subtree v", "proof (induct xs arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>v \\<in> V; s \\<in> vertex_subtree v;\n        t \\<in> vertex_subtree v;\n        s \\<leadsto>[]\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n       \\<Longrightarrow> set [] \\<subseteq> vertex_subtree v\n 2. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>v \\<in> V; s \\<in> vertex_subtree v;\n                    t \\<in> vertex_subtree v;\n                    s \\<leadsto>xs\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n                   \\<Longrightarrow> set xs \\<subseteq> vertex_subtree v;\n        v \\<in> V; s \\<in> vertex_subtree v; t \\<in> vertex_subtree v;\n        s \\<leadsto>(a # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subseteq> vertex_subtree v", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<in> V; ?s \\<in> vertex_subtree v; t \\<in> vertex_subtree v;\n   ?s \\<leadsto>xs\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n  \\<Longrightarrow> set xs \\<subseteq> vertex_subtree v\n  v \\<in> V\n  s \\<in> vertex_subtree v\n  t \\<in> vertex_subtree v\n  s \\<leadsto>(x # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>v \\<in> V; s \\<in> vertex_subtree v;\n        t \\<in> vertex_subtree v;\n        s \\<leadsto>[]\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n       \\<Longrightarrow> set [] \\<subseteq> vertex_subtree v\n 2. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>v \\<in> V; s \\<in> vertex_subtree v;\n                    t \\<in> vertex_subtree v;\n                    s \\<leadsto>xs\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n                   \\<Longrightarrow> set xs \\<subseteq> vertex_subtree v;\n        v \\<in> V; s \\<in> vertex_subtree v; t \\<in> vertex_subtree v;\n        s \\<leadsto>(a # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subseteq> vertex_subtree v", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> vertex_subtree v", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> set (x # xs) \\<subseteq> vertex_subtree v\n 2. \\<not> ?P \\<Longrightarrow> set (x # xs) \\<subseteq> vertex_subtree v", "assume \"xs = []\""], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> set (x # xs) \\<subseteq> vertex_subtree v\n 2. \\<not> ?P \\<Longrightarrow> set (x # xs) \\<subseteq> vertex_subtree v", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> vertex_subtree v", "using Cons.prems(3,4)"], ["proof (prove)\nusing this:\n  xs = []\n  t \\<in> vertex_subtree v\n  s \\<leadsto>(x # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> vertex_subtree v", "by auto"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> vertex_subtree v\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "assume \"xs \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "moreover"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "hence \"last xs = t\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. last xs = t", "using Cons.prems(4) last.simps"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  s \\<leadsto>(x # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\n  last (?x # ?xs) = (if ?xs = [] then ?x else last ?xs)\n\ngoal (1 subgoal):\n 1. last xs = t", "by auto"], ["proof (state)\nthis:\n  last xs = t\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "moreover"], ["proof (state)\nthis:\n  last xs = t\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "have \"T.path xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T.path xs", "using Cons.prems(4) T.walk_tl"], ["proof (prove)\nusing this:\n  s \\<leadsto>(x # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\n  T.walk ?xs \\<Longrightarrow> T.walk (tl ?xs)\n\ngoal (1 subgoal):\n 1. T.path xs", "by fastforce"], ["proof (state)\nthis:\n  T.path xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "moreover"], ["proof (state)\nthis:\n  T.path xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "have \"hd xs \\<in> vertex_subtree v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd xs \\<in> vertex_subtree v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. hd xs \\<in> V\\<^bsub>T\\<^esub>\n 2. v \\<in> bag (hd xs)", "have \"hd xs \\<in> set (s \\<leadsto>\\<^bsub>T\\<^esub> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd xs \\<in> set (s \\<leadsto>\\<^bsub>T\\<^esub> t)", "using T.unique_connecting_path_unique"], ["proof (prove)\nusing this:\n  ?v \\<leadsto>?xs\\<leadsto>\\<^bsub>T\\<^esub> ?w \\<Longrightarrow>\n  ?xs = ?v \\<leadsto>\\<^bsub>T\\<^esub> ?w\n\ngoal (1 subgoal):\n 1. hd xs \\<in> set (s \\<leadsto>\\<^bsub>T\\<^esub> t)", "using Cons.prems(4) \\<open>xs \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<leadsto>?xs\\<leadsto>\\<^bsub>T\\<^esub> ?w \\<Longrightarrow>\n  ?xs = ?v \\<leadsto>\\<^bsub>T\\<^esub> ?w\n  s \\<leadsto>(x # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd xs \\<in> set (s \\<leadsto>\\<^bsub>T\\<^esub> t)", "by auto"], ["proof (state)\nthis:\n  hd xs \\<in> set (s \\<leadsto>\\<^bsub>T\\<^esub> t)\n\ngoal (2 subgoals):\n 1. hd xs \\<in> V\\<^bsub>T\\<^esub>\n 2. v \\<in> bag (hd xs)", "hence \"bag s \\<inter> bag t \\<subseteq> bag (hd xs)\""], ["proof (prove)\nusing this:\n  hd xs \\<in> set (s \\<leadsto>\\<^bsub>T\\<^esub> t)\n\ngoal (1 subgoal):\n 1. bag s \\<inter> bag t \\<subseteq> bag (hd xs)", "using bags_continuous Cons.prems(4) T.connected_in_V"], ["proof (prove)\nusing this:\n  hd xs \\<in> set (s \\<leadsto>\\<^bsub>T\\<^esub> t)\n  \\<lbrakk>?s \\<in> V\\<^bsub>T\\<^esub>; ?u \\<in> V\\<^bsub>T\\<^esub>;\n   ?t \\<in> set (?s \\<leadsto>\\<^bsub>T\\<^esub> ?u)\\<rbrakk>\n  \\<Longrightarrow> bag ?s \\<inter> bag ?u \\<subseteq> bag ?t\n  s \\<leadsto>(x # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\n  T.connected ?v ?w \\<Longrightarrow> ?v \\<in> V\\<^bsub>T\\<^esub>\n  T.connected ?v ?w \\<Longrightarrow> ?w \\<in> V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. bag s \\<inter> bag t \\<subseteq> bag (hd xs)", "by blast"], ["proof (state)\nthis:\n  bag s \\<inter> bag t \\<subseteq> bag (hd xs)\n\ngoal (2 subgoals):\n 1. hd xs \\<in> V\\<^bsub>T\\<^esub>\n 2. v \\<in> bag (hd xs)", "thus \"v \\<in> bag (hd xs)\""], ["proof (prove)\nusing this:\n  bag s \\<inter> bag t \\<subseteq> bag (hd xs)\n\ngoal (1 subgoal):\n 1. v \\<in> bag (hd xs)", "using Cons.prems(2,3)"], ["proof (prove)\nusing this:\n  bag s \\<inter> bag t \\<subseteq> bag (hd xs)\n  s \\<in> vertex_subtree v\n  t \\<in> vertex_subtree v\n\ngoal (1 subgoal):\n 1. v \\<in> bag (hd xs)", "unfolding vertex_subtree_def"], ["proof (prove)\nusing this:\n  bag s \\<inter> bag t \\<subseteq> bag (hd xs)\n  s \\<in> {t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t}\n  t \\<in> {t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t}\n\ngoal (1 subgoal):\n 1. v \\<in> bag (hd xs)", "by blast"], ["proof (state)\nthis:\n  v \\<in> bag (hd xs)\n\ngoal (1 subgoal):\n 1. hd xs \\<in> V\\<^bsub>T\\<^esub>", "show \"hd xs \\<in> V\\<^bsub>T\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd xs \\<in> V\\<^bsub>T\\<^esub>", "using T.connected_in_V(1) \\<open>xs \\<noteq> []\\<close> \\<open>T.path xs\\<close>"], ["proof (prove)\nusing this:\n  T.connected ?v ?w \\<Longrightarrow> ?v \\<in> V\\<^bsub>T\\<^esub>\n  xs \\<noteq> []\n  T.path xs\n\ngoal (1 subgoal):\n 1. hd xs \\<in> V\\<^bsub>T\\<^esub>", "by blast"], ["proof (state)\nthis:\n  hd xs \\<in> V\\<^bsub>T\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd xs \\<in> vertex_subtree v\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  last xs = t\n  T.path xs\n  hd xs \\<in> vertex_subtree v", "have \"set xs \\<subseteq> vertex_subtree v\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  last xs = t\n  T.path xs\n  hd xs \\<in> vertex_subtree v\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> vertex_subtree v", "using Cons.hyps Cons.prems(1,3)"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  last xs = t\n  T.path xs\n  hd xs \\<in> vertex_subtree v\n  \\<lbrakk>v \\<in> V; ?s \\<in> vertex_subtree v; t \\<in> vertex_subtree v;\n   ?s \\<leadsto>xs\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n  \\<Longrightarrow> set xs \\<subseteq> vertex_subtree v\n  v \\<in> V\n  t \\<in> vertex_subtree v\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> vertex_subtree v", "by blast"], ["proof (state)\nthis:\n  set xs \\<subseteq> vertex_subtree v\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    set (x # xs) \\<subseteq> vertex_subtree v", "thus ?thesis"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> vertex_subtree v\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> vertex_subtree v", "using Cons.prems(2,4)"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> vertex_subtree v\n  s \\<in> vertex_subtree v\n  s \\<leadsto>(x # xs)\\<leadsto>\\<^bsub>T\\<^esub> t\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> vertex_subtree v", "by auto"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> vertex_subtree v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> vertex_subtree v\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>v \\<in> V; s \\<in> vertex_subtree v;\n        t \\<in> vertex_subtree v;\n        s \\<leadsto>[]\\<leadsto>\\<^bsub>T\\<^esub> t\\<rbrakk>\n       \\<Longrightarrow> set [] \\<subseteq> vertex_subtree v", "qed simp"], ["", "corollary vertex_subtree_unique_path_connected:\n  assumes \"v \\<in> V\" \"s \\<in> vertex_subtree v\" \"t \\<in> vertex_subtree v\"\n  shows \"set (s \\<leadsto>\\<^bsub>T\\<^esub> t) \\<subseteq> vertex_subtree v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (s \\<leadsto>\\<^bsub>T\\<^esub> t) \\<subseteq> vertex_subtree v", "using assms vertex_subtree_connected T.unique_connecting_path_properties"], ["proof (prove)\nusing this:\n  v \\<in> V\n  s \\<in> vertex_subtree v\n  t \\<in> vertex_subtree v\n  \\<lbrakk>?v \\<in> V; ?s \\<in> vertex_subtree ?v;\n   ?t \\<in> vertex_subtree ?v;\n   ?s \\<leadsto>?xs\\<leadsto>\\<^bsub>T\\<^esub> ?t\\<rbrakk>\n  \\<Longrightarrow> set ?xs \\<subseteq> vertex_subtree ?v\n  \\<lbrakk>?v \\<in> V\\<^bsub>T\\<^esub>; ?w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> T.path (?v \\<leadsto>\\<^bsub>T\\<^esub> ?w)\n  \\<lbrakk>?v \\<in> V\\<^bsub>T\\<^esub>; ?w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?v \\<leadsto>\\<^bsub>T\\<^esub> ?w \\<noteq> []\n  \\<lbrakk>?v \\<in> V\\<^bsub>T\\<^esub>; ?w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> hd (?v \\<leadsto>\\<^bsub>T\\<^esub> ?w) = ?v\n  \\<lbrakk>?v \\<in> V\\<^bsub>T\\<^esub>; ?w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> last (?v \\<leadsto>\\<^bsub>T\\<^esub> ?w) = ?w\n\ngoal (1 subgoal):\n 1. set (s \\<leadsto>\\<^bsub>T\\<^esub> t) \\<subseteq> vertex_subtree v", "by (metis (no_types, lifting) T.unique_connecting_path T.unique_connecting_path_unique\n      mem_Collect_eq vertex_subtree_def)"], ["", "text \\<open>\n  In order to prove that edges in @{term T} are separations in @{term G}, we need one key lemma.\n  If a vertex appears on both sides of a separation, then it also appears in the separation.\n\\<close>"], ["", "lemma vertex_in_separator:\n  assumes st: \"s \\<rightarrow>\\<^bsub>T\\<^esub> t\" and v: \"v \\<in> left_part s t\" \"v \\<in> left_part t s\"\n  shows \"v \\<in> bag s\" \"v \\<in> bag t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> bag s &&& v \\<in> bag t", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> bag s\n 2. v \\<in> bag t", "obtain u u' where u: \"v \\<in> bag u\" \"u \\<in> T.left_tree s t\" \"v \\<in> bag u'\" \"u' \\<in> T.left_tree t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u u'.\n        \\<lbrakk>v \\<in> bag u; u \\<in> T.left_tree s t; v \\<in> bag u';\n         u' \\<in> T.left_tree t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using v"], ["proof (prove)\nusing this:\n  v \\<in> left_part s t\n  v \\<in> left_part t s\n\ngoal (1 subgoal):\n 1. (\\<And>u u'.\n        \\<lbrakk>v \\<in> bag u; u \\<in> T.left_tree s t; v \\<in> bag u';\n         u' \\<in> T.left_tree t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding left_part_def"], ["proof (prove)\nusing this:\n  v \\<in> \\<Union> {bag u |u. u \\<in> T.left_tree s t}\n  v \\<in> \\<Union> {bag u |u. u \\<in> T.left_tree t s}\n\ngoal (1 subgoal):\n 1. (\\<And>u u'.\n        \\<lbrakk>v \\<in> bag u; u \\<in> T.left_tree s t; v \\<in> bag u';\n         u' \\<in> T.left_tree t s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> bag u\n  u \\<in> T.left_tree s t\n  v \\<in> bag u'\n  u' \\<in> T.left_tree t s\n\ngoal (2 subgoals):\n 1. v \\<in> bag s\n 2. v \\<in> bag t", "have \"s \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')", "using T.left_tree_separates st u"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t; ?u \\<in> T.left_tree ?s ?t;\n   ?u' \\<in> T.left_tree ?t ?s\\<rbrakk>\n  \\<Longrightarrow> ?s \\<in> set (?u \\<leadsto>\\<^bsub>T\\<^esub> ?u')\n  s \\<rightarrow>\\<^bsub>T\\<^esub> t\n  v \\<in> bag u\n  u \\<in> T.left_tree s t\n  v \\<in> bag u'\n  u' \\<in> T.left_tree t s\n\ngoal (1 subgoal):\n 1. s \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')", "by blast"], ["proof (state)\nthis:\n  s \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')\n\ngoal (2 subgoals):\n 1. v \\<in> bag s\n 2. v \\<in> bag t", "thus \"v \\<in> bag s\""], ["proof (prove)\nusing this:\n  s \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')\n\ngoal (1 subgoal):\n 1. v \\<in> bag s", "using bags_continuous u"], ["proof (prove)\nusing this:\n  s \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')\n  \\<lbrakk>?s \\<in> V\\<^bsub>T\\<^esub>; ?u \\<in> V\\<^bsub>T\\<^esub>;\n   ?t \\<in> set (?s \\<leadsto>\\<^bsub>T\\<^esub> ?u)\\<rbrakk>\n  \\<Longrightarrow> bag ?s \\<inter> bag ?u \\<subseteq> bag ?t\n  v \\<in> bag u\n  u \\<in> T.left_tree s t\n  v \\<in> bag u'\n  u' \\<in> T.left_tree t s\n\ngoal (1 subgoal):\n 1. v \\<in> bag s", "by (meson IntI T.left_treeE subsetCE)"], ["proof (state)\nthis:\n  v \\<in> bag s\n\ngoal (1 subgoal):\n 1. v \\<in> bag t", "have \"t \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')", "using T.left_tree_separates' st u"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t; ?u \\<in> T.left_tree ?s ?t;\n   ?u' \\<in> T.left_tree ?t ?s\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> set (?u \\<leadsto>\\<^bsub>T\\<^esub> ?u')\n  s \\<rightarrow>\\<^bsub>T\\<^esub> t\n  v \\<in> bag u\n  u \\<in> T.left_tree s t\n  v \\<in> bag u'\n  u' \\<in> T.left_tree t s\n\ngoal (1 subgoal):\n 1. t \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')", "by blast"], ["proof (state)\nthis:\n  t \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')\n\ngoal (1 subgoal):\n 1. v \\<in> bag t", "thus \"v \\<in> bag t\""], ["proof (prove)\nusing this:\n  t \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')\n\ngoal (1 subgoal):\n 1. v \\<in> bag t", "using bags_continuous u"], ["proof (prove)\nusing this:\n  t \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> u')\n  \\<lbrakk>?s \\<in> V\\<^bsub>T\\<^esub>; ?u \\<in> V\\<^bsub>T\\<^esub>;\n   ?t \\<in> set (?s \\<leadsto>\\<^bsub>T\\<^esub> ?u)\\<rbrakk>\n  \\<Longrightarrow> bag ?s \\<inter> bag ?u \\<subseteq> bag ?t\n  v \\<in> bag u\n  u \\<in> T.left_tree s t\n  v \\<in> bag u'\n  u' \\<in> T.left_tree t s\n\ngoal (1 subgoal):\n 1. v \\<in> bag t", "by (meson IntI T.left_treeE subsetCE)"], ["proof (state)\nthis:\n  v \\<in> bag t\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Now we can show the main theorem: For every edge @{term \"s \\<rightarrow>\\<^bsub>T\\<^esub> t\"} in @{term T}, the\n  set @{term \"bag s \\<inter> bag t\"} is a separator of @{term G}.  That is, every path from the left part\n  to the right part goes through @{term \"bag s \\<inter> bag t\"}.\\<close>"], ["", "theorem bags_separate:\n  assumes st: \"s \\<rightarrow>\\<^bsub>T\\<^esub> t\" and v: \"v \\<in> left_part s t\" and w: \"w \\<in> left_part t s\" and xs: \"v \\<leadsto>xs\\<leadsto> w\"\n  shows \"set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "assume \"\\<not>?thesis\""], ["proof (state)\nthis:\n  \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "{"], ["proof (state)\nthis:\n  \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "assume \"u \\<in> set xs\""], ["proof (state)\nthis:\n  u \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "with xs v \\<open>\\<not>?thesis\\<close>"], ["proof (chain)\npicking this:\n  v \\<leadsto>xs\\<leadsto> w\n  v \\<in> left_part s t\n  \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  u \\<in> set xs", "have \"vertex_subtree u \\<subseteq> T.left_tree s t\""], ["proof (prove)\nusing this:\n  v \\<leadsto>xs\\<leadsto> w\n  v \\<in> left_part s t\n  \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  u \\<in> set xs\n\ngoal (1 subgoal):\n 1. vertex_subtree u \\<subseteq> T.left_tree s t", "proof (induct xs arbitrary: v)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "case (Cons x xs v)"], ["proof (state)\nthis:\n  \\<lbrakk>?v \\<leadsto>xs\\<leadsto> w; ?v \\<in> left_part s t;\n   \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n   u \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n  v \\<leadsto>(x # xs)\\<leadsto> w\n  v \\<in> left_part s t\n  \\<not> set (x # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  u \\<in> set (x # xs)\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "hence contra: \"v \\<notin> bag s \\<or> v \\<notin> bag t\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<leadsto>xs\\<leadsto> w; ?v \\<in> left_part s t;\n   \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n   u \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n  v \\<leadsto>(x # xs)\\<leadsto> w\n  v \\<in> left_part s t\n  \\<not> set (x # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  u \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<or> v \\<notin> bag t", "by (metis path_from_toE IntI empty_iff hd_in_set)"], ["proof (state)\nthis:\n  v \\<notin> bag s \\<or> v \\<notin> bag t\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "{"], ["proof (state)\nthis:\n  v \\<notin> bag s \\<or> v \\<notin> bag t\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "assume \"x = u\" \"\\<not>vertex_subtree u \\<subseteq> T.left_tree s t\""], ["proof (state)\nthis:\n  x = u\n  \\<not> vertex_subtree u \\<subseteq> T.left_tree s t\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "then"], ["proof (chain)\npicking this:\n  x = u\n  \\<not> vertex_subtree u \\<subseteq> T.left_tree s t", "obtain z where z: \"z \\<in> vertex_subtree u\" \"z \\<notin> T.left_tree s t\""], ["proof (prove)\nusing this:\n  x = u\n  \\<not> vertex_subtree u \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> vertex_subtree u;\n         z \\<notin> T.left_tree s t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z \\<in> vertex_subtree u\n  z \\<notin> T.left_tree s t\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "hence \"z \\<in> vertex_subtree v\""], ["proof (prove)\nusing this:\n  z \\<in> vertex_subtree u\n  z \\<notin> T.left_tree s t\n\ngoal (1 subgoal):\n 1. z \\<in> vertex_subtree v", "using Cons.prems(1,3) \\<open>x = u\\<close>"], ["proof (prove)\nusing this:\n  z \\<in> vertex_subtree u\n  z \\<notin> T.left_tree s t\n  v \\<leadsto>(x # xs)\\<leadsto> w\n  \\<not> set (x # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  x = u\n\ngoal (1 subgoal):\n 1. z \\<in> vertex_subtree v", "by (metis list.sel(1) path_from_to_def)"], ["proof (state)\nthis:\n  z \\<in> vertex_subtree v\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "hence \"v \\<in> left_part t s\""], ["proof (prove)\nusing this:\n  z \\<in> vertex_subtree v\n\ngoal (1 subgoal):\n 1. v \\<in> left_part t s", "unfolding vertex_subtree_def"], ["proof (prove)\nusing this:\n  z \\<in> {t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t}\n\ngoal (1 subgoal):\n 1. v \\<in> left_part t s", "using T.left_tree_union_V z st"], ["proof (prove)\nusing this:\n  z \\<in> {t \\<in> V\\<^bsub>T\\<^esub>. v \\<in> bag t}\n  ?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t \\<Longrightarrow>\n  T.left_tree ?s ?t \\<union> T.left_tree ?t ?s = V\\<^bsub>T\\<^esub>\n  z \\<in> vertex_subtree u\n  z \\<notin> T.left_tree s t\n  s \\<rightarrow>\\<^bsub>T\\<^esub> t\n\ngoal (1 subgoal):\n 1. v \\<in> left_part t s", "by auto"], ["proof (state)\nthis:\n  v \\<in> left_part t s\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "hence False"], ["proof (prove)\nusing this:\n  v \\<in> left_part t s\n\ngoal (1 subgoal):\n 1. False", "using vertex_in_separator contra st Cons.prems(2)"], ["proof (prove)\nusing this:\n  v \\<in> left_part t s\n  \\<lbrakk>?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t; ?v \\<in> left_part ?s ?t;\n   ?v \\<in> left_part ?t ?s\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> bag ?s\n  \\<lbrakk>?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t; ?v \\<in> left_part ?s ?t;\n   ?v \\<in> left_part ?t ?s\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> bag ?t\n  v \\<notin> bag s \\<or> v \\<notin> bag t\n  s \\<rightarrow>\\<^bsub>T\\<^esub> t\n  v \\<in> left_part s t\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "}"], ["proof (state)\nthis:\n  \\<lbrakk>x = u;\n   \\<not> vertex_subtree u \\<subseteq> T.left_tree s t\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>x = u;\n   \\<not> vertex_subtree u \\<subseteq> T.left_tree s t\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "{"], ["proof (state)\nthis:\n  \\<lbrakk>x = u;\n   \\<not> vertex_subtree u \\<subseteq> T.left_tree s t\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "assume \"x \\<noteq> u\""], ["proof (state)\nthis:\n  x \\<noteq> u\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "hence \"u \\<in> set xs\""], ["proof (prove)\nusing this:\n  x \\<noteq> u\n\ngoal (1 subgoal):\n 1. u \\<in> set xs", "using Cons.prems(4)"], ["proof (prove)\nusing this:\n  x \\<noteq> u\n  u \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. u \\<in> set xs", "by auto"], ["proof (state)\nthis:\n  u \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "moreover"], ["proof (state)\nthis:\n  u \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "hence \"xs \\<noteq> Nil\""], ["proof (prove)\nusing this:\n  u \\<in> set xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> []", "using empty_iff list.set(1)"], ["proof (prove)\nusing this:\n  u \\<in> set xs\n  (?c \\<in> {}) = False\n  set [] = {}\n\ngoal (1 subgoal):\n 1. xs \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "moreover"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "hence \"last xs = w\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. last xs = w", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  v \\<leadsto>(x # xs)\\<leadsto> w\n\ngoal (1 subgoal):\n 1. last xs = w", "by auto"], ["proof (state)\nthis:\n  last xs = w\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "moreover"], ["proof (state)\nthis:\n  last xs = w\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "have \"path xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path xs", "using Cons.prems(1) walk_tl"], ["proof (prove)\nusing this:\n  v \\<leadsto>(x # xs)\\<leadsto> w\n  walk ?xs \\<Longrightarrow> walk (tl ?xs)\n\ngoal (1 subgoal):\n 1. path xs", "by force"], ["proof (state)\nthis:\n  path xs\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "moreover"], ["proof (state)\nthis:\n  path xs\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "have \"hd xs \\<in> left_part s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd xs \\<in> left_part s t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. hd xs \\<in> left_part s t", "have \"v\\<rightarrow>hd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow> hd xs", "using Cons.prems(1,3) \\<open>xs \\<noteq> Nil\\<close> walk_first_edge'"], ["proof (prove)\nusing this:\n  v \\<leadsto>(x # xs)\\<leadsto> w\n  \\<not> set (x # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  xs \\<noteq> []\n  \\<lbrakk>walk (?v # ?xs); ?xs \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?v \\<rightarrow> hd ?xs\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> hd xs", "by auto"], ["proof (state)\nthis:\n  v \\<rightarrow> hd xs\n\ngoal (1 subgoal):\n 1. hd xs \\<in> left_part s t", "then"], ["proof (chain)\npicking this:\n  v \\<rightarrow> hd xs", "obtain u' where u': \"u' \\<in> V\\<^bsub>T\\<^esub>\" \"v \\<in> bag u'\" \"hd xs \\<in> bag u'\""], ["proof (prove)\nusing this:\n  v \\<rightarrow> hd xs\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        \\<lbrakk>u' \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag u';\n         hd xs \\<in> bag u'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bags_edges"], ["proof (prove)\nusing this:\n  v \\<rightarrow> hd xs\n  ?v \\<rightarrow> ?w \\<Longrightarrow>\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. ?v \\<in> bag t \\<and> ?w \\<in> bag t\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        \\<lbrakk>u' \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag u';\n         hd xs \\<in> bag u'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  u' \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag u'\n  hd xs \\<in> bag u'\n\ngoal (1 subgoal):\n 1. hd xs \\<in> left_part s t", "hence \"u' \\<in> T.left_tree s t\""], ["proof (prove)\nusing this:\n  u' \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag u'\n  hd xs \\<in> bag u'\n\ngoal (1 subgoal):\n 1. u' \\<in> T.left_tree s t", "using contra vertex_in_separator st T.left_tree_union_V Cons.prems(2)"], ["proof (prove)\nusing this:\n  u' \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag u'\n  hd xs \\<in> bag u'\n  v \\<notin> bag s \\<or> v \\<notin> bag t\n  \\<lbrakk>?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t; ?v \\<in> left_part ?s ?t;\n   ?v \\<in> left_part ?t ?s\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> bag ?s\n  \\<lbrakk>?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t; ?v \\<in> left_part ?s ?t;\n   ?v \\<in> left_part ?t ?s\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> bag ?t\n  s \\<rightarrow>\\<^bsub>T\\<^esub> t\n  ?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t \\<Longrightarrow>\n  T.left_tree ?s ?t \\<union> T.left_tree ?t ?s = V\\<^bsub>T\\<^esub>\n  v \\<in> left_part s t\n\ngoal (1 subgoal):\n 1. u' \\<in> T.left_tree s t", "by blast"], ["proof (state)\nthis:\n  u' \\<in> T.left_tree s t\n\ngoal (1 subgoal):\n 1. hd xs \\<in> left_part s t", "thus ?thesis"], ["proof (prove)\nusing this:\n  u' \\<in> T.left_tree s t\n\ngoal (1 subgoal):\n 1. hd xs \\<in> left_part s t", "using u'(3)"], ["proof (prove)\nusing this:\n  u' \\<in> T.left_tree s t\n  hd xs \\<in> bag u'\n\ngoal (1 subgoal):\n 1. hd xs \\<in> left_part s t", "unfolding left_part_def"], ["proof (prove)\nusing this:\n  u' \\<in> T.left_tree s t\n  hd xs \\<in> bag u'\n\ngoal (1 subgoal):\n 1. hd xs \\<in> \\<Union> {bag u |u. u \\<in> T.left_tree s t}", "by blast"], ["proof (state)\nthis:\n  hd xs \\<in> left_part s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd xs \\<in> left_part s t\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "moreover"], ["proof (state)\nthis:\n  hd xs \\<in> left_part s t\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "have \"\\<not>set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}", "using Cons.prems(3)\n          IntI disjoint_iff_not_equal inf_le1 inf_le2 set_subset_Cons subsetCE"], ["proof (prove)\nusing this:\n  \\<not> set (x # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  \\<lbrakk>?c \\<in> ?A; ?c \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?A \\<inter> ?B\n  (?A \\<inter> ?B = {}) =\n  (\\<forall>x\\<in>?A. \\<forall>y\\<in>?B. x \\<noteq> y)\n  inf ?x ?y \\<le> ?x\n  inf ?x ?y \\<le> ?y\n  set ?xs \\<subseteq> set (?x # ?xs)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> set xs\n  xs \\<noteq> []\n  last xs = w\n  path xs\n  hd xs \\<in> left_part s t\n  \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}", "have \"vertex_subtree u \\<subseteq> T.left_tree s t\""], ["proof (prove)\nusing this:\n  u \\<in> set xs\n  xs \\<noteq> []\n  last xs = w\n  path xs\n  hd xs \\<in> left_part s t\n  \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\n\ngoal (1 subgoal):\n 1. vertex_subtree u \\<subseteq> T.left_tree s t", "using Cons.hyps"], ["proof (prove)\nusing this:\n  u \\<in> set xs\n  xs \\<noteq> []\n  last xs = w\n  path xs\n  hd xs \\<in> left_part s t\n  \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  \\<lbrakk>?v \\<leadsto>xs\\<leadsto> w; ?v \\<in> left_part s t;\n   \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n   u \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. vertex_subtree u \\<subseteq> T.left_tree s t", "by blast"], ["proof (state)\nthis:\n  vertex_subtree u \\<subseteq> T.left_tree s t\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "}"], ["proof (state)\nthis:\n  x \\<noteq> u \\<Longrightarrow>\n  vertex_subtree u \\<subseteq> T.left_tree s t\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t\n 2. \\<And>a xs v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>v \\<leadsto>xs\\<leadsto> w;\n                    v \\<in> left_part s t;\n                    \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq> {};\n                    u \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> vertex_subtree u\n                                     \\<subseteq> T.left_tree s t;\n        v \\<leadsto>(a # xs)\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set (a # xs) \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>x = u;\n   \\<not> vertex_subtree u \\<subseteq> T.left_tree s t\\<rbrakk>\n  \\<Longrightarrow> False\n  x \\<noteq> u \\<Longrightarrow>\n  vertex_subtree u \\<subseteq> T.left_tree s t", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = u;\n   \\<not> vertex_subtree u \\<subseteq> T.left_tree s t\\<rbrakk>\n  \\<Longrightarrow> False\n  x \\<noteq> u \\<Longrightarrow>\n  vertex_subtree u \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. vertex_subtree u \\<subseteq> T.left_tree s t", "by blast"], ["proof (state)\nthis:\n  vertex_subtree u \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<leadsto>[]\\<leadsto> w; v \\<in> left_part s t;\n        \\<not> set [] \\<inter> bag s \\<inter> bag t \\<noteq> {};\n        u \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> vertex_subtree u \\<subseteq> T.left_tree s t", "qed simp"], ["proof (state)\nthis:\n  vertex_subtree u \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "}"], ["proof (state)\nthis:\n  ?u2 \\<in> set xs \\<Longrightarrow>\n  vertex_subtree ?u2 \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "hence \"vertex_subtree w \\<subseteq> T.left_tree s t\""], ["proof (prove)\nusing this:\n  ?u2 \\<in> set xs \\<Longrightarrow>\n  vertex_subtree ?u2 \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. vertex_subtree w \\<subseteq> T.left_tree s t", "using xs last_in_set"], ["proof (prove)\nusing this:\n  ?u2 \\<in> set xs \\<Longrightarrow>\n  vertex_subtree ?u2 \\<subseteq> T.left_tree s t\n  v \\<leadsto>xs\\<leadsto> w\n  ?as \\<noteq> [] \\<Longrightarrow> last ?as \\<in> set ?as\n\ngoal (1 subgoal):\n 1. vertex_subtree w \\<subseteq> T.left_tree s t", "by blast"], ["proof (state)\nthis:\n  vertex_subtree w \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  vertex_subtree w \\<subseteq> T.left_tree s t\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "have \"vertex_subtree w \\<inter> T.left_tree t s \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex_subtree w \\<inter> T.left_tree t s \\<noteq> {}", "using w"], ["proof (prove)\nusing this:\n  w \\<in> left_part t s\n\ngoal (1 subgoal):\n 1. vertex_subtree w \\<inter> T.left_tree t s \\<noteq> {}", "unfolding left_part_def T.left_tree_def"], ["proof (prove)\nusing this:\n  w \\<in> \\<Union>\n           {bag u |u.\n            u \\<in> {u \\<in> V\\<^bsub>T\\<^esub>.\n                     t \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> s)}}\n\ngoal (1 subgoal):\n 1. vertex_subtree w \\<inter>\n    {u \\<in> V\\<^bsub>T\\<^esub>.\n     t \\<in> set (u \\<leadsto>\\<^bsub>T\\<^esub> s)} \\<noteq>\n    {}", "by blast"], ["proof (state)\nthis:\n  vertex_subtree w \\<inter> T.left_tree t s \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> set xs \\<inter> bag s \\<inter> bag t \\<noteq>\n           {} \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  vertex_subtree w \\<subseteq> T.left_tree s t\n  vertex_subtree w \\<inter> T.left_tree t s \\<noteq> {}", "show False"], ["proof (prove)\nusing this:\n  vertex_subtree w \\<subseteq> T.left_tree s t\n  vertex_subtree w \\<inter> T.left_tree t s \\<noteq> {}\n\ngoal (1 subgoal):\n 1. False", "using T.left_tree_disjoint st"], ["proof (prove)\nusing this:\n  vertex_subtree w \\<subseteq> T.left_tree s t\n  vertex_subtree w \\<inter> T.left_tree t s \\<noteq> {}\n  ?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t \\<Longrightarrow>\n  T.left_tree ?s ?t \\<inter> T.left_tree ?t ?s = {}\n  s \\<rightarrow>\\<^bsub>T\\<^esub> t\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>It follows that vertices cannot be dropped from a bag if they have a neighbor that has\n  not been visited yet (that is, a neighbor that is strictly in the right part of the separation).\\<close>"], ["", "corollary bag_no_drop:\n  assumes st: \"s \\<rightarrow>\\<^bsub>T\\<^esub> t\" and vw: \"v\\<rightarrow>w\" and v: \"v \\<in> bag s\" and w: \"w \\<notin> bag s\" \"w \\<in> left_part t s\"\n  shows \"v \\<in> bag t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> bag t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> bag t", "have \"v \\<leadsto>[v,w]\\<leadsto> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<leadsto>[v, w]\\<leadsto> w", "using v vw w(1)"], ["proof (prove)\nusing this:\n  v \\<in> bag s\n  v \\<rightarrow> w\n  w \\<notin> bag s\n\ngoal (1 subgoal):\n 1. v \\<leadsto>[v, w]\\<leadsto> w", "by auto"], ["proof (state)\nthis:\n  v \\<leadsto>[v, w]\\<leadsto> w\n\ngoal (1 subgoal):\n 1. v \\<in> bag t", "hence \"set [v,w] \\<inter> bag s \\<inter> bag t \\<noteq> {}\""], ["proof (prove)\nusing this:\n  v \\<leadsto>[v, w]\\<leadsto> w\n\ngoal (1 subgoal):\n 1. set [v, w] \\<inter> bag s \\<inter> bag t \\<noteq> {}", "using st v w(2)"], ["proof (prove)\nusing this:\n  v \\<leadsto>[v, w]\\<leadsto> w\n  s \\<rightarrow>\\<^bsub>T\\<^esub> t\n  v \\<in> bag s\n  w \\<in> left_part t s\n\ngoal (1 subgoal):\n 1. set [v, w] \\<inter> bag s \\<inter> bag t \\<noteq> {}", "by (meson T.edges_are_in_V T.left_tree_initial bags_separate left_partI)"], ["proof (state)\nthis:\n  set [v, w] \\<inter> bag s \\<inter> bag t \\<noteq> {}\n\ngoal (1 subgoal):\n 1. v \\<in> bag t", "thus ?thesis"], ["proof (prove)\nusing this:\n  set [v, w] \\<inter> bag s \\<inter> bag t \\<noteq> {}\n\ngoal (1 subgoal):\n 1. v \\<in> bag t", "using w(1)"], ["proof (prove)\nusing this:\n  set [v, w] \\<inter> bag s \\<inter> bag t \\<noteq> {}\n  w \\<notin> bag s\n\ngoal (1 subgoal):\n 1. v \\<in> bag t", "by auto"], ["proof (state)\nthis:\n  v \\<in> bag t\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>locale TreeDecomposition\\<close>"], ["", "end"]]}