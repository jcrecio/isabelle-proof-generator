{"file_name": "/home/qj213/afp-2021-10-22/thys/Tree_Decomposition/TreewidthCompleteGraph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Tree_Decomposition", "problem_names": ["theorem (in Graph) treewidth_complete_graph:\n  assumes \"\\<And>v w. \\<lbrakk> v \\<in> V; w \\<in> V; v \\<noteq> w \\<rbrakk> \\<Longrightarrow> v\\<rightarrow>w\"\n  shows \"treewidth = card V - 1\""], "translations": [["", "theorem (in Graph) treewidth_complete_graph:\n  assumes \"\\<And>v w. \\<lbrakk> v \\<in> V; w \\<in> V; v \\<noteq> w \\<rbrakk> \\<Longrightarrow> v\\<rightarrow>w\"\n  shows \"treewidth = card V - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "assume \"V \\<noteq> {}\""], ["proof (state)\nthis:\n  V \\<noteq> {}\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "obtain T bag where\n      T: \"TreeDecomposition G (T :: nat Graph) bag\" \"treewidth = TreeDecomposition.width T bag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T bag.\n        \\<lbrakk>TreeDecomposition G T bag;\n         treewidth = TreeDecomposition.width T bag\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using treewidth_cards_treewidth"], ["proof (prove)\nusing this:\n  \\<exists>T bag.\n     TreeDecomposition G T bag \\<and>\n     treewidth = TreeDecomposition.width T bag\n\ngoal (1 subgoal):\n 1. (\\<And>T bag.\n        \\<lbrakk>TreeDecomposition G T bag;\n         treewidth = TreeDecomposition.width T bag\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  TreeDecomposition G T bag\n  treewidth = TreeDecomposition.width T bag\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "interpret TreeDecomposition G T bag"], ["proof (prove)\ngoal (1 subgoal):\n 1. TreeDecomposition G T bag", "using T(1)"], ["proof (prove)\nusing this:\n  TreeDecomposition G T bag\n\ngoal (1 subgoal):\n 1. TreeDecomposition G T bag", "."], ["proof (state)\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "assume \"\\<not>?thesis\""], ["proof (state)\nthis:\n  treewidth \\<noteq> card V - 1\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "hence \"width \\<noteq> card V - 1\""], ["proof (prove)\nusing this:\n  treewidth \\<noteq> card V - 1\n\ngoal (1 subgoal):\n 1. width \\<noteq> card V - 1", "by (simp add: T(2))"], ["proof (state)\nthis:\n  width \\<noteq> card V - 1\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "text \\<open>Let @{term s} be a bag of maximal size.\\<close>"], ["proof (state)\nthis:\n  width \\<noteq> card V - 1\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "moreover"], ["proof (state)\nthis:\n  width \\<noteq> card V - 1\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "obtain s where s: \"s \\<in> V\\<^bsub>T\\<^esub>\" \"card (bag s) = max_bag_card\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> V\\<^bsub>T\\<^esub>;\n         card (bag s) = max_bag_card\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using max_bag_card_in_bag_cards \\<open>V \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<in> bag_cards\n  V \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> V\\<^bsub>T\\<^esub>;\n         card (bag s) = max_bag_card\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "text \\<open>The treewidth cannot be larger than @{term \"card V - 1\"}, so due to our assumption\n      @{term \"width \\<noteq> card V - 1\" } it must be smaller, hence @{term \"card (bag s) < card V\"}.\\<close>"], ["proof (state)\nthis:\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "ultimately"], ["proof (chain)\npicking this:\n  width \\<noteq> card V - 1\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card", "have \"card (bag s) < card V\""], ["proof (prove)\nusing this:\n  width \\<noteq> card V - 1\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n\ngoal (1 subgoal):\n 1. card (bag s) < card V", "unfolding width_def"], ["proof (prove)\nusing this:\n  (if V\\<^bsub>T\\<^esub> = {} then 0 else max_bag_card - 1) \\<noteq>\n  card V - 1\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n\ngoal (1 subgoal):\n 1. card (bag s) < card V", "using \\<open>V \\<noteq> {}\\<close> empty_tree_empty_V le_eq_less_or_eq max_bag_card_upper_bound_V"], ["proof (prove)\nusing this:\n  (if V\\<^bsub>T\\<^esub> = {} then 0 else max_bag_card - 1) \\<noteq>\n  card V - 1\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  V \\<noteq> {}\n  V\\<^bsub>T\\<^esub> = {} \\<Longrightarrow> V = {}\n  (?m \\<le> ?n) = (?m < ?n \\<or> ?m = ?n)\n  V \\<noteq> {} \\<Longrightarrow> max_bag_card \\<le> card V\n\ngoal (1 subgoal):\n 1. card (bag s) < card V", "by presburger"], ["proof (state)\nthis:\n  card (bag s) < card V\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "then"], ["proof (chain)\npicking this:\n  card (bag s) < card V", "obtain v where v: \"v \\<in> V\" \"v \\<notin> bag s\""], ["proof (prove)\nusing this:\n  card (bag s) < card V\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> V; v \\<notin> bag s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson bag_finite card_mono not_less s(1) subsetI)"], ["proof (state)\nthis:\n  v \\<in> V\n  v \\<notin> bag s\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "text \\<open>There exists a bag containing @{term v}.  We consider the path from @{term s} to\n      @{term t} and find that somewhere along this path there exists a bag containing\n      @{term \"insert v (bag s)\"}, which is a contradiction because such a bag would be too big.\\<close>"], ["proof (state)\nthis:\n  v \\<in> V\n  v \\<notin> bag s\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "obtain t where t: \"t \\<in> V\\<^bsub>T\\<^esub>\" \"v \\<in> bag t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bags_exist v(1)"], ["proof (prove)\nusing this:\n  ?v \\<in> V \\<Longrightarrow>\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. ?v \\<in> bag t\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "with s"], ["proof (chain)\npicking this:\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t", "have \"\\<exists>t \\<in> V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\""], ["proof (prove)\nusing this:\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "proof (induct \"s \\<leadsto>\\<^bsub>T\\<^esub> t\" arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>[] = s \\<leadsto>\\<^bsub>T\\<^esub> t;\n        s \\<in> V\\<^bsub>T\\<^esub>; card (bag s) = max_bag_card;\n        t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                            insert v (bag s) \\<subseteq> bag t\n 2. \\<And>a x s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>x = s \\<leadsto>\\<^bsub>T\\<^esub> t;\n                    s \\<in> V\\<^bsub>T\\<^esub>; card (bag s) = max_bag_card;\n                    t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n  insert v (bag s) \\<subseteq> bag t;\n        a # x = s \\<leadsto>\\<^bsub>T\\<^esub> t; s \\<in> V\\<^bsub>T\\<^esub>;\n        card (bag s) = max_bag_card; t \\<in> V\\<^bsub>T\\<^esub>;\n        v \\<in> bag t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                            insert v (bag s) \\<subseteq> bag t", "case Nil"], ["proof (state)\nthis:\n  [] = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>[] = s \\<leadsto>\\<^bsub>T\\<^esub> t;\n        s \\<in> V\\<^bsub>T\\<^esub>; card (bag s) = max_bag_card;\n        t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                            insert v (bag s) \\<subseteq> bag t\n 2. \\<And>a x s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>x = s \\<leadsto>\\<^bsub>T\\<^esub> t;\n                    s \\<in> V\\<^bsub>T\\<^esub>; card (bag s) = max_bag_card;\n                    t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n  insert v (bag s) \\<subseteq> bag t;\n        a # x = s \\<leadsto>\\<^bsub>T\\<^esub> t; s \\<in> V\\<^bsub>T\\<^esub>;\n        card (bag s) = max_bag_card; t \\<in> V\\<^bsub>T\\<^esub>;\n        v \\<in> bag t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                            insert v (bag s) \\<subseteq> bag t", "thus ?case"], ["proof (prove)\nusing this:\n  [] = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "using T.unique_connecting_path_properties(2)"], ["proof (prove)\nusing this:\n  [] = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n  \\<lbrakk>?v \\<in> V\\<^bsub>T\\<^esub>; ?w \\<in> V\\<^bsub>T\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?v \\<leadsto>\\<^bsub>T\\<^esub> ?w \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n\ngoal (1 subgoal):\n 1. \\<And>a x s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>x = s \\<leadsto>\\<^bsub>T\\<^esub> t;\n                    s \\<in> V\\<^bsub>T\\<^esub>; card (bag s) = max_bag_card;\n                    t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n  insert v (bag s) \\<subseteq> bag t;\n        a # x = s \\<leadsto>\\<^bsub>T\\<^esub> t; s \\<in> V\\<^bsub>T\\<^esub>;\n        card (bag s) = max_bag_card; t \\<in> V\\<^bsub>T\\<^esub>;\n        v \\<in> bag t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                            insert v (bag s) \\<subseteq> bag t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>x = s \\<leadsto>\\<^bsub>T\\<^esub> t;\n                    s \\<in> V\\<^bsub>T\\<^esub>; card (bag s) = max_bag_card;\n                    t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n  insert v (bag s) \\<subseteq> bag t;\n        a # x = s \\<leadsto>\\<^bsub>T\\<^esub> t; s \\<in> V\\<^bsub>T\\<^esub>;\n        card (bag s) = max_bag_card; t \\<in> V\\<^bsub>T\\<^esub>;\n        v \\<in> bag t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                            insert v (bag s) \\<subseteq> bag t", "case (Cons x xs s)"], ["proof (state)\nthis:\n  \\<lbrakk>xs = ?s \\<leadsto>\\<^bsub>T\\<^esub> t;\n   ?s \\<in> V\\<^bsub>T\\<^esub>; card (bag ?s) = max_bag_card;\n   t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                       insert v (bag ?s) \\<subseteq> bag t\n  x # xs = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n\ngoal (1 subgoal):\n 1. \\<And>a x s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>x = s \\<leadsto>\\<^bsub>T\\<^esub> t;\n                    s \\<in> V\\<^bsub>T\\<^esub>; card (bag s) = max_bag_card;\n                    t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n  insert v (bag s) \\<subseteq> bag t;\n        a # x = s \\<leadsto>\\<^bsub>T\\<^esub> t; s \\<in> V\\<^bsub>T\\<^esub>;\n        card (bag s) = max_bag_card; t \\<in> V\\<^bsub>T\\<^esub>;\n        v \\<in> bag t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                            insert v (bag s) \\<subseteq> bag t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "assume \"v \\<in> bag s\""], ["proof (state)\nthis:\n  v \\<in> bag s\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> bag s\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "using t Cons.prems(1)"], ["proof (prove)\nusing this:\n  v \\<in> bag s\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n  s \\<in> V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "by blast"], ["proof (state)\nthis:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "assume \"v \\<notin> bag s\""], ["proof (state)\nthis:\n  v \\<notin> bag s\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "hence \"s \\<noteq> t\""], ["proof (prove)\nusing this:\n  v \\<notin> bag s\n\ngoal (1 subgoal):\n 1. s \\<noteq> t", "using t(2)"], ["proof (prove)\nusing this:\n  v \\<notin> bag s\n  v \\<in> bag t\n\ngoal (1 subgoal):\n 1. s \\<noteq> t", "by blast"], ["proof (state)\nthis:\n  s \\<noteq> t\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "hence \"xs \\<noteq> Nil\""], ["proof (prove)\nusing this:\n  s \\<noteq> t\n\ngoal (1 subgoal):\n 1. xs \\<noteq> []", "using Cons.hyps(2) Cons.prems(1,3)"], ["proof (prove)\nusing this:\n  s \\<noteq> t\n  x # xs = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  s \\<in> V\\<^bsub>T\\<^esub>\n  t \\<in> V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. xs \\<noteq> []", "by (metis T.unique_connecting_path_properties(3,4) last_ConsL list.sel(1))"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "moreover"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "have \"x = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = s", "using Cons.hyps(2) Cons.prems(1) t(1)"], ["proof (prove)\nusing this:\n  x # xs = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  s \\<in> V\\<^bsub>T\\<^esub>\n  t \\<in> V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. x = s", "by (metis T.unique_connecting_path_properties(3) list.sel(1))"], ["proof (state)\nthis:\n  x = s\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  x = s", "obtain s' xs' where s': \"s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  x = s\n\ngoal (1 subgoal):\n 1. (\\<And>s' xs'.\n        s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Cons.hyps(2) list.exhaust"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  x = s\n  x # xs = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  \\<lbrakk>?y = [] \\<Longrightarrow> ?P;\n   \\<And>x21 x22. ?y = x21 # x22 \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>s' xs'.\n        s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "moreover"], ["proof (state)\nthis:\n  s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "have st_path: \"T.path (s \\<leadsto>\\<^bsub>T\\<^esub> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T.path (s \\<leadsto>\\<^bsub>T\\<^esub> t)", "by (simp add: Cons.prems(1) T.unique_connecting_path_properties(1) t(1))"], ["proof (state)\nthis:\n  T.path (s \\<leadsto>\\<^bsub>T\\<^esub> t)\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "ultimately"], ["proof (chain)\npicking this:\n  s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  T.path (s \\<leadsto>\\<^bsub>T\\<^esub> t)", "have \"s' \\<in> V\\<^bsub>T\\<^esub>\""], ["proof (prove)\nusing this:\n  s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  T.path (s \\<leadsto>\\<^bsub>T\\<^esub> t)\n\ngoal (1 subgoal):\n 1. s' \\<in> V\\<^bsub>T\\<^esub>", "by (metis T.edges_are_in_V(2) T.path_first_edge)"], ["proof (state)\nthis:\n  s' \\<in> V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "text \\<open>Bags can never drop vertices because every vertex has a neighbor in @{term G} which\n          has not yet been visited.\\<close>"], ["proof (state)\nthis:\n  s' \\<in> V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "have s_in_s': \"bag s \\<subseteq> bag s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bag s \\<subseteq> bag s'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> bag s \\<Longrightarrow> x \\<in> bag s'", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> bag s \\<Longrightarrow> x \\<in> bag s'", "assume \"w \\<in> bag s\""], ["proof (state)\nthis:\n  w \\<in> bag s\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> bag s \\<Longrightarrow> x \\<in> bag s'", "moreover"], ["proof (state)\nthis:\n  w \\<in> bag s\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> bag s \\<Longrightarrow> x \\<in> bag s'", "have \"s \\<rightarrow>\\<^bsub>T\\<^esub> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^bsub>T\\<^esub> s'", "using s' st_path"], ["proof (prove)\nusing this:\n  s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  T.path (s \\<leadsto>\\<^bsub>T\\<^esub> t)\n\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^bsub>T\\<^esub> s'", "by (metis T.walk_first_edge)"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^bsub>T\\<^esub> s'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> bag s \\<Longrightarrow> x \\<in> bag s'", "moreover"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^bsub>T\\<^esub> s'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> bag s \\<Longrightarrow> x \\<in> bag s'", "have \"v \\<in> left_part s' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> left_part s' s", "using Cons.prems(1,4) s' t(1)"], ["proof (prove)\nusing this:\n  s \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n  s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  t \\<in> V\\<^bsub>T\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<in> left_part s' s", "by (metis T.left_treeI T.unique_connecting_path_rev insert_subset left_partI\n                list.simps(15) set_rev subsetI)"], ["proof (state)\nthis:\n  v \\<in> left_part s' s\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> bag s \\<Longrightarrow> x \\<in> bag s'", "ultimately"], ["proof (chain)\npicking this:\n  w \\<in> bag s\n  s \\<rightarrow>\\<^bsub>T\\<^esub> s'\n  v \\<in> left_part s' s", "show \"w \\<in> bag s'\""], ["proof (prove)\nusing this:\n  w \\<in> bag s\n  s \\<rightarrow>\\<^bsub>T\\<^esub> s'\n  v \\<in> left_part s' s\n\ngoal (1 subgoal):\n 1. w \\<in> bag s'", "using bag_no_drop Cons.prems(1,4) \\<open>v \\<notin> bag s\\<close> assms bags_in_V v(1)"], ["proof (prove)\nusing this:\n  w \\<in> bag s\n  s \\<rightarrow>\\<^bsub>T\\<^esub> s'\n  v \\<in> left_part s' s\n  \\<lbrakk>?s \\<rightarrow>\\<^bsub>T\\<^esub> ?t; ?v \\<rightarrow> ?w;\n   ?v \\<in> bag ?s; ?w \\<notin> bag ?s; ?w \\<in> left_part ?t ?s\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> bag ?t\n  s \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n  v \\<notin> bag s\n  \\<lbrakk>?v \\<in> V; ?w \\<in> V; ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> ?v \\<rightarrow> ?w\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> bag ?t \\<subseteq> V\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. w \\<in> bag s'", "by blast"], ["proof (state)\nthis:\n  w \\<in> bag s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bag s \\<subseteq> bag s'\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "text \\<open>Bags can never gain vertices because we started with a bag of maximal size.\\<close>"], ["proof (state)\nthis:\n  bag s \\<subseteq> bag s'\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "moreover"], ["proof (state)\nthis:\n  bag s \\<subseteq> bag s'\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "have \"card (bag s') \\<le> card (bag s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (bag s') \\<le> card (bag s)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. card (bag s') \\<le> card (bag s)", "have \"card (bag s') \\<le> max_bag_card\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (bag s') \\<le> max_bag_card", "unfolding max_bag_card_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (bag s') \\<le> Max bag_cards", "using Max_ge \\<open>s' \\<in> V\\<^bsub>T\\<^esub>\\<close> bag_cards_finite"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk> \\<Longrightarrow> ?x \\<le> Max ?A\n  s' \\<in> V\\<^bsub>T\\<^esub>\n  finite bag_cards\n\ngoal (1 subgoal):\n 1. card (bag s') \\<le> Max bag_cards", "by blast"], ["proof (state)\nthis:\n  card (bag s') \\<le> max_bag_card\n\ngoal (1 subgoal):\n 1. card (bag s') \\<le> card (bag s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  card (bag s') \\<le> max_bag_card\n\ngoal (1 subgoal):\n 1. card (bag s') \\<le> card (bag s)", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  card (bag s') \\<le> max_bag_card\n  card (bag s) = max_bag_card\n\ngoal (1 subgoal):\n 1. card (bag s') \\<le> card (bag s)", "by auto"], ["proof (state)\nthis:\n  card (bag s') \\<le> card (bag s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (bag s') \\<le> card (bag s)\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "ultimately"], ["proof (chain)\npicking this:\n  bag s \\<subseteq> bag s'\n  card (bag s') \\<le> card (bag s)", "have \"bag s' = bag s\""], ["proof (prove)\nusing this:\n  bag s \\<subseteq> bag s'\n  card (bag s') \\<le> card (bag s)\n\ngoal (1 subgoal):\n 1. bag s' = bag s", "using \\<open>s' \\<in> V\\<^bsub>T\\<^esub>\\<close> bag_finite card_seteq"], ["proof (prove)\nusing this:\n  bag s \\<subseteq> bag s'\n  card (bag s') \\<le> card (bag s)\n  s' \\<in> V\\<^bsub>T\\<^esub>\n  ?t \\<in> V\\<^bsub>T\\<^esub> \\<Longrightarrow> finite (bag ?t)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B; card ?B \\<le> card ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. bag s' = bag s", "by blast"], ["proof (state)\nthis:\n  bag s' = bag s\n\ngoal (1 subgoal):\n 1. v \\<notin> bag s \\<Longrightarrow>\n    \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "thus ?thesis"], ["proof (prove)\nusing this:\n  bag s' = bag s\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "using Cons.hyps Cons.prems(1,2) \\<open>s' \\<in> V\\<^bsub>T\\<^esub>\\<close> t s' st_path \\<open>xs \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  bag s' = bag s\n  \\<lbrakk>xs = ?s \\<leadsto>\\<^bsub>T\\<^esub> t;\n   ?s \\<in> V\\<^bsub>T\\<^esub>; card (bag ?s) = max_bag_card;\n   t \\<in> V\\<^bsub>T\\<^esub>; v \\<in> bag t\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t\\<in>V\\<^bsub>T\\<^esub>.\n                       insert v (bag ?s) \\<subseteq> bag t\n  x # xs = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  s' \\<in> V\\<^bsub>T\\<^esub>\n  t \\<in> V\\<^bsub>T\\<^esub>\n  v \\<in> bag t\n  s # s' # xs' = s \\<leadsto>\\<^bsub>T\\<^esub> t\n  T.path (s \\<leadsto>\\<^bsub>T\\<^esub> t)\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t", "by (metis T.path_from_toI T.path_tl T.unique_connecting_path_properties(4)\n              T.unique_connecting_path_unique last.simps list.sel(1,3))"], ["proof (state)\nthis:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "hence \"\\<exists>t \\<in> V\\<^bsub>T\\<^esub>. card (bag s) < card (bag t)\""], ["proof (prove)\nusing this:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. card (bag s) < card (bag t)", "using v(2)"], ["proof (prove)\nusing this:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. insert v (bag s) \\<subseteq> bag t\n  v \\<notin> bag s\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. card (bag s) < card (bag t)", "by (metis bag_finite card_seteq insert_subset not_le)"], ["proof (state)\nthis:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. card (bag s) < card (bag t)\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "hence False"], ["proof (prove)\nusing this:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. card (bag s) < card (bag t)\n\ngoal (1 subgoal):\n 1. False", "using s Max.coboundedI bag_cards_finite not_le"], ["proof (prove)\nusing this:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. card (bag s) < card (bag t)\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = max_bag_card\n  \\<lbrakk>finite ?A; ?a \\<in> ?A\\<rbrakk> \\<Longrightarrow> ?a \\<le> Max ?A\n  finite bag_cards\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. False", "unfolding max_bag_card_def"], ["proof (prove)\nusing this:\n  \\<exists>t\\<in>V\\<^bsub>T\\<^esub>. card (bag s) < card (bag t)\n  s \\<in> V\\<^bsub>T\\<^esub>\n  card (bag s) = Max bag_cards\n  \\<lbrakk>finite ?A; ?a \\<in> ?A\\<rbrakk> \\<Longrightarrow> ?a \\<le> Max ?A\n  finite bag_cards\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<noteq> {}; treewidth \\<noteq> card V - 1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>V \\<noteq> {}; treewidth \\<noteq> card V - 1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "using treewidth_upper_bound_V card.empty diff_diff_cancel zero_diff"], ["proof (prove)\nusing this:\n  \\<lbrakk>V \\<noteq> {}; treewidth \\<noteq> card V - 1\\<rbrakk>\n  \\<Longrightarrow> False\n  treewidth \\<le> card V - 1\n  card {} = 0\n  ?i \\<le> ?n \\<Longrightarrow> ?n - (?n - ?i) = ?i\n  (0::?'a) - ?a = (0::?'a)\n\ngoal (1 subgoal):\n 1. treewidth = card V - 1", "by fastforce"], ["proof (state)\nthis:\n  treewidth = card V - 1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}