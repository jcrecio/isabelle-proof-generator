{"file_name": "/home/qj213/afp-2021-10-22/thys/Tree_Decomposition/ExampleInstantiations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Tree_Decomposition", "problem_names": ["lemma Graph_T2: \"Graph T2\"", "lemma Tree_T2: \"Tree T2\"", "lemma T2_complete: \"\\<lbrakk> v \\<in> V\\<^bsub>T2\\<^esub>; w \\<in> V\\<^bsub>T2\\<^esub>; v \\<noteq> w \\<rbrakk> \\<Longrightarrow> v \\<rightarrow>\\<^bsub>T2\\<^esub> w\"", "lemma treewidth_T2: \"Graph.treewidth T2 = 1\"", "lemma Graph_T3: \"Graph T3\"", "lemma Not_Tree_T3: \"\\<not>Tree T3\"", "lemma T3_complete: \"\\<lbrakk> v \\<in> V\\<^bsub>T3\\<^esub>; w \\<in> V\\<^bsub>T3\\<^esub>; v \\<noteq> w \\<rbrakk> \\<Longrightarrow> v \\<rightarrow>\\<^bsub>T3\\<^esub> w\"", "lemma treewidth_T3: \"Graph.treewidth T3 = 2\""], "translations": [["", "lemma Graph_T2: \"Graph T2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph T2", "unfolding T2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph \\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>", "by standard auto"], ["", "lemma Tree_T2: \"Tree T2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree T2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Tree T2", "interpret Graph T2"], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph T2", "using Graph_T2"], ["proof (prove)\nusing this:\n  Graph T2\n\ngoal (1 subgoal):\n 1. Graph T2", "."], ["proof (state)\ngoal (1 subgoal):\n 1. Tree T2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree T2", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V\\<^bsub>T2\\<^esub>;\n        w \\<in> V\\<^bsub>T2\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> connected v w\n 2. \\<And>xs. \\<not> cycle xs", "fix v w"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V\\<^bsub>T2\\<^esub>;\n        w \\<in> V\\<^bsub>T2\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> connected v w\n 2. \\<And>xs. \\<not> cycle xs", "assume \"v \\<in> V\\<^bsub>T2\\<^esub>\" \"w \\<in> V\\<^bsub>T2\\<^esub>\""], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>T2\\<^esub>\n  w \\<in> V\\<^bsub>T2\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V\\<^bsub>T2\\<^esub>;\n        w \\<in> V\\<^bsub>T2\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> connected v w\n 2. \\<And>xs. \\<not> cycle xs", "thus \"connected v w\""], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>T2\\<^esub>\n  w \\<in> V\\<^bsub>T2\\<^esub>\n\ngoal (1 subgoal):\n 1. connected v w", "by (metis T2_def connected_def connected_edge empty_iff insert_iff last.simps list.discI\n          list.sel(1) path_singleton simps(1,2))"], ["proof (state)\nthis:\n  connected v w\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "fix xs :: \"Vertices list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "assume \"cycle xs\" and xy: \"(x = v0 \\<and> y = u0) \\<or> (x = u0 \\<and> y = v0)\" and \"hd xs = x\""], ["proof (state)\nthis:\n  cycle xs\n  x = v0 \\<and> y = u0 \\<or> x = u0 \\<and> y = v0\n  hd xs = x\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "hence \"last xs = y\""], ["proof (prove)\nusing this:\n  cycle xs\n  x = v0 \\<and> y = u0 \\<or> x = u0 \\<and> y = v0\n  hd xs = x\n\ngoal (1 subgoal):\n 1. last xs = y", "by (metis T2_def cycleE distinct.simps(2) distinct_singleton insert_iff list.set(1)\n            prod.inject simps(2))"], ["proof (state)\nthis:\n  last xs = y\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "moreover"], ["proof (state)\nthis:\n  last xs = y\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "have \"\\<And>v. v \\<in> set xs \\<Longrightarrow> v = x \\<or> v = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> set xs \\<Longrightarrow> v = x \\<or> v = y", "using \\<open>cycle xs\\<close> xy"], ["proof (prove)\nusing this:\n  cycle xs\n  x = v0 \\<and> y = u0 \\<or> x = u0 \\<and> y = v0\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> set xs \\<Longrightarrow> v = x \\<or> v = y", "by (metis cycle_def walk_in_V T2_def empty_iff insertE insert_absorb insert_subset\n            select_convs(1))"], ["proof (state)\nthis:\n  ?v \\<in> set xs \\<Longrightarrow> ?v = x \\<or> ?v = y\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "ultimately"], ["proof (chain)\npicking this:\n  last xs = y\n  ?v \\<in> set xs \\<Longrightarrow> ?v = x \\<or> ?v = y", "have \"xs = [x,y]\""], ["proof (prove)\nusing this:\n  last xs = y\n  ?v \\<in> set xs \\<Longrightarrow> ?v = x \\<or> ?v = y\n\ngoal (1 subgoal):\n 1. xs = [x, y]", "using \\<open>cycle xs\\<close> xy"], ["proof (prove)\nusing this:\n  last xs = y\n  ?v \\<in> set xs \\<Longrightarrow> ?v = x \\<or> ?v = y\n  cycle xs\n  x = v0 \\<and> y = u0 \\<or> x = u0 \\<and> y = v0\n\ngoal (1 subgoal):\n 1. xs = [x, y]", "by (metis cycleE distinct_length_2_or_more last.simps list.exhaust_sel list.set_sel(1)\n            list.set_sel(2) no_loops)"], ["proof (state)\nthis:\n  xs = [x, y]\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "hence False"], ["proof (prove)\nusing this:\n  xs = [x, y]\n\ngoal (1 subgoal):\n 1. False", "using \\<open>cycle xs\\<close>"], ["proof (prove)\nusing this:\n  xs = [x, y]\n  cycle xs\n\ngoal (1 subgoal):\n 1. False", "unfolding cycle_def"], ["proof (prove)\nusing this:\n  xs = [x, y]\n  path xs \\<and>\n  2 < length xs \\<and> last xs \\<rightarrow>\\<^bsub>T2\\<^esub> hd xs\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>cycle xs;\n   ?x2 = v0 \\<and> ?y2 = u0 \\<or> ?x2 = u0 \\<and> ?y2 = v0;\n   hd xs = ?x2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>xs. \\<not> cycle xs", "thus \"\\<not>cycle xs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>cycle xs;\n   ?x2 = v0 \\<and> ?y2 = u0 \\<or> ?x2 = u0 \\<and> ?y2 = v0;\n   hd xs = ?x2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> cycle xs", "by (metis T2_def cycleE empty_iff insertE prod.inject simps(2))"], ["proof (state)\nthis:\n  \\<not> cycle xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Tree T2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>As expected, the treewidth of the complete graph with 2 vertices is 1.\n\n  Note that we use \\<open>Graph.treewidth_complete_graph\\<close> here and not \\<open>treewidth_tree\\<close>.\n  This is because \\<open>treewidth_tree\\<close> requires the vertex set of the graph to be a set of\n  natural numbers, which is not the case here.\\<close>"], ["", "lemma T2_complete: \"\\<lbrakk> v \\<in> V\\<^bsub>T2\\<^esub>; w \\<in> V\\<^bsub>T2\\<^esub>; v \\<noteq> w \\<rbrakk> \\<Longrightarrow> v \\<rightarrow>\\<^bsub>T2\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> V\\<^bsub>T2\\<^esub>; w \\<in> V\\<^bsub>T2\\<^esub>;\n     v \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> v \\<rightarrow>\\<^bsub>T2\\<^esub> w", "unfolding T2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>;\n     w \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>;\n     v \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> v \\<rightarrow>\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>\n                      w", "by auto"], ["", "lemma treewidth_T2: \"Graph.treewidth T2 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph.treewidth T2 = 1", "using Graph.treewidth_complete_graph[OF Graph_T2] T2_complete"], ["proof (prove)\nusing this:\n  (\\<And>v w.\n      \\<lbrakk>v \\<in> V\\<^bsub>T2\\<^esub>; w \\<in> V\\<^bsub>T2\\<^esub>;\n       v \\<noteq> w\\<rbrakk>\n      \\<Longrightarrow> v \\<rightarrow>\\<^bsub>T2\\<^esub>\n                        w) \\<Longrightarrow>\n  Graph.treewidth T2 = card V\\<^bsub>T2\\<^esub> - 1\n  \\<lbrakk>?v \\<in> V\\<^bsub>T2\\<^esub>; ?w \\<in> V\\<^bsub>T2\\<^esub>;\n   ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> ?v \\<rightarrow>\\<^bsub>T2\\<^esub> ?w\n\ngoal (1 subgoal):\n 1. Graph.treewidth T2 = 1", "unfolding T2_def"], ["proof (prove)\nusing this:\n  (\\<And>v w.\n      \\<lbrakk>v \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>;\n       w \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>;\n       v \\<noteq> w\\<rbrakk>\n      \\<Longrightarrow> v \\<rightarrow>\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>\n                        w) \\<Longrightarrow>\n  Graph.treewidth\n   \\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr> =\n  card\n   V\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub> -\n  1\n  \\<lbrakk>?v \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>;\n   ?w \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>;\n   ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> ?v \\<rightarrow>\\<^bsub>\\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr>\\<^esub>\n                    ?w\n\ngoal (1 subgoal):\n 1. Graph.treewidth\n     \\<lparr>verts = {u0, v0}, arcs = {(u0, v0), (v0, u0)}\\<rparr> =\n    1", "by simp"], ["", "text \\<open>The complete graph with 3 vertices.\\<close>"], ["", "definition \"T3 \\<equiv> \\<lparr> verts = {u0, v0, w0}, arcs = {(u0,v0),(v0,u0),(v0,w0),(w0,v0),(w0,u0),(u0,w0)} \\<rparr>\""], ["", "lemma Graph_T3: \"Graph T3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph T3", "unfolding T3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph\n     \\<lparr>verts = {u0, v0, w0},\n        arcs =\n          {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0),\n           (u0, w0)}\\<rparr>", "by standard auto"], ["", "text \\<open>@{term \"[u0, v0, w0]\"} is a cycle in @{const \"T3\"}, so @{const \"T3\"} is not a tree.\\<close>"], ["", "lemma Not_Tree_T3: \"\\<not>Tree T3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Tree T3", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. Tree T3 \\<Longrightarrow> False", "assume \"Tree T3\""], ["proof (state)\nthis:\n  Tree T3\n\ngoal (1 subgoal):\n 1. Tree T3 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Tree T3", "interpret Tree T3"], ["proof (prove)\nusing this:\n  Tree T3\n\ngoal (1 subgoal):\n 1. Tree T3", "."], ["proof (state)\ngoal (1 subgoal):\n 1. Tree T3 \\<Longrightarrow> False", "let ?xs = \"[u0, v0, w0]\""], ["proof (state)\ngoal (1 subgoal):\n 1. Tree T3 \\<Longrightarrow> False", "have \"path ?xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path [u0, v0, w0]", "by (metis T3_def Vertices.distinct(1,3,5)\n    distinct_length_2_or_more distinct_singleton insert_iff simps(2) walk.Cons walk_2)"], ["proof (state)\nthis:\n  path [u0, v0, w0]\n\ngoal (1 subgoal):\n 1. Tree T3 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  path [u0, v0, w0]\n\ngoal (1 subgoal):\n 1. Tree T3 \\<Longrightarrow> False", "have \"(hd ?xs, last ?xs) \\<in> arcs T3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd [u0, v0, w0] \\<rightarrow>\\<^bsub>T3\\<^esub> last [u0, v0, w0]", "by (simp add: T3_def)"], ["proof (state)\nthis:\n  hd [u0, v0, w0] \\<rightarrow>\\<^bsub>T3\\<^esub> last [u0, v0, w0]\n\ngoal (1 subgoal):\n 1. Tree T3 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  path [u0, v0, w0]\n  hd [u0, v0, w0] \\<rightarrow>\\<^bsub>T3\\<^esub> last [u0, v0, w0]", "show False"], ["proof (prove)\nusing this:\n  path [u0, v0, w0]\n  hd [u0, v0, w0] \\<rightarrow>\\<^bsub>T3\\<^esub> last [u0, v0, w0]\n\ngoal (1 subgoal):\n 1. False", "using meeting_paths_produce_cycle no_cycles walk_2"], ["proof (prove)\nusing this:\n  path [u0, v0, w0]\n  hd [u0, v0, w0] \\<rightarrow>\\<^bsub>T3\\<^esub> last [u0, v0, w0]\n  \\<lbrakk>path (?v # ?xs); ?xs \\<noteq> []; path (?v # ?ys);\n   ?ys \\<noteq> []; last ?xs = last ?ys; hd ?xs \\<noteq> hd ?ys\\<rbrakk>\n  \\<Longrightarrow> \\<exists>zs. cycle zs \\<and> hd zs = ?v\n  \\<not> cycle ?xs\n  ?v \\<rightarrow>\\<^bsub>T3\\<^esub> ?w \\<Longrightarrow> walk [?v, ?w]\n\ngoal (1 subgoal):\n 1. False", "by (metis distinct_length_2_or_more last_ConsL last_ConsR list.sel(1))"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma T3_complete: \"\\<lbrakk> v \\<in> V\\<^bsub>T3\\<^esub>; w \\<in> V\\<^bsub>T3\\<^esub>; v \\<noteq> w \\<rbrakk> \\<Longrightarrow> v \\<rightarrow>\\<^bsub>T3\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> V\\<^bsub>T3\\<^esub>; w \\<in> V\\<^bsub>T3\\<^esub>;\n     v \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> v \\<rightarrow>\\<^bsub>T3\\<^esub> w", "unfolding T3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>;\n     w \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>;\n     v \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> v \\<rightarrow>\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>\n                      w", "by auto"], ["", "lemma treewidth_T3: \"Graph.treewidth T3 = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph.treewidth T3 = 2", "using Graph.treewidth_complete_graph[OF Graph_T3] T3_complete"], ["proof (prove)\nusing this:\n  (\\<And>v w.\n      \\<lbrakk>v \\<in> V\\<^bsub>T3\\<^esub>; w \\<in> V\\<^bsub>T3\\<^esub>;\n       v \\<noteq> w\\<rbrakk>\n      \\<Longrightarrow> v \\<rightarrow>\\<^bsub>T3\\<^esub>\n                        w) \\<Longrightarrow>\n  Graph.treewidth T3 = card V\\<^bsub>T3\\<^esub> - 1\n  \\<lbrakk>?v \\<in> V\\<^bsub>T3\\<^esub>; ?w \\<in> V\\<^bsub>T3\\<^esub>;\n   ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> ?v \\<rightarrow>\\<^bsub>T3\\<^esub> ?w\n\ngoal (1 subgoal):\n 1. Graph.treewidth T3 = 2", "unfolding T3_def"], ["proof (prove)\nusing this:\n  (\\<And>v w.\n      \\<lbrakk>v \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>;\n       w \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>;\n       v \\<noteq> w\\<rbrakk>\n      \\<Longrightarrow> v \\<rightarrow>\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>\n                        w) \\<Longrightarrow>\n  Graph.treewidth\n   \\<lparr>verts = {u0, v0, w0},\n      arcs =\n        {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0),\n         (u0, w0)}\\<rparr> =\n  card\n   V\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub> -\n  1\n  \\<lbrakk>?v \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>;\n   ?w \\<in> V\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>;\n   ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> ?v \\<rightarrow>\\<^bsub>\\<lparr>verts = {u0, v0, w0}, arcs = {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0), (u0, w0)}\\<rparr>\\<^esub>\n                    ?w\n\ngoal (1 subgoal):\n 1. Graph.treewidth\n     \\<lparr>verts = {u0, v0, w0},\n        arcs =\n          {(u0, v0), (v0, u0), (v0, w0), (w0, v0), (w0, u0),\n           (u0, w0)}\\<rparr> =\n    2", "by simp"], ["", "text \\<open>We omit a concrete example for the \\<open>TreeDecomposition\\<close> locale because\n  \\<open>tree_decomposition_exists\\<close> already shows that it is non-empty.\\<close>"], ["", "end"]]}