{"file_name": "/home/qj213/afp-2021-10-22/thys/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Separation_Logic_Imperative_HOL", "problem_names": ["lemma ufa_invarD: \n  \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow> rep_of_dom (l,i)\" \n  \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow> l!i<length l\"", "lemma rep_of_refl: \"l!i=i \\<Longrightarrow> rep_of l i = i\"", "lemma rep_of_step: \n  \"\\<lbrakk>ufa_invar l; i<length l; l!i\\<noteq>i\\<rbrakk> \\<Longrightarrow> rep_of l i = rep_of l (l!i)\"", "lemmas rep_of_simps = rep_of_refl rep_of_step", "lemma rep_of_iff: \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \n  \\<Longrightarrow> rep_of l i = (if l!i=i then i else rep_of l (l!i))\"", "lemma rep_of_induct[case_names base step, consumes 2]:\n  assumes I: \"ufa_invar l\" \n  assumes L: \"i<length l\"\n  assumes BASE: \"\\<And>i. \\<lbrakk> ufa_invar l; i<length l; l!i=i \\<rbrakk> \\<Longrightarrow> P l i\"\n  assumes STEP: \"\\<And>i. \\<lbrakk> ufa_invar l; i<length l; l!i\\<noteq>i; P l (l!i) \\<rbrakk> \n    \\<Longrightarrow> P l i\"\n  shows \"P l i\"", "lemma rep_of_min: \n  \"\\<lbrakk> ufa_invar l; i<length l \\<rbrakk> \\<Longrightarrow> l!(rep_of l i) = rep_of l i\"", "lemma rep_of_bound: \n  \"\\<lbrakk> ufa_invar l; i<length l \\<rbrakk> \\<Longrightarrow> rep_of l i < length l\"", "lemma rep_of_idem: \n  \"\\<lbrakk> ufa_invar l; i<length l \\<rbrakk> \\<Longrightarrow> rep_of l (rep_of l i) = rep_of l i\"", "lemma rep_of_min_upd: \"\\<lbrakk> ufa_invar l; x<length l; i<length l \\<rbrakk> \\<Longrightarrow> \n  rep_of (l[rep_of l x := rep_of l x]) i = rep_of l i\"", "lemma rep_of_idx: \n  \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow> rep_of l (l!i) = rep_of l i\"", "lemma ufa_\\<alpha>_equiv[simp, intro!]: \"part_equiv (ufa_\\<alpha> l)\"", "lemma ufa_\\<alpha>_lenD: \n  \"(x,y)\\<in>ufa_\\<alpha> l \\<Longrightarrow> x<length l\"\n  \"(x,y)\\<in>ufa_\\<alpha> l \\<Longrightarrow> y<length l\"", "lemma ufa_\\<alpha>_dom[simp]: \"Domain (ufa_\\<alpha> l) = {0..<length l}\"", "lemma ufa_\\<alpha>_refl[simp]: \"(i,i)\\<in>ufa_\\<alpha> l \\<longleftrightarrow> i<length l\"", "lemma ufa_\\<alpha>_len_eq: \n  assumes \"ufa_\\<alpha> l = ufa_\\<alpha> l'\"  \n  shows \"length l = length l'\"", "lemma ufa_init_invar: \"ufa_invar [0..<n]\"", "lemma ufa_init_correct: \"ufa_\\<alpha> [0..<n] = {(x,x) | x. x<n}\"", "lemma ufa_find_correct: \"\\<lbrakk>ufa_invar l; x<length l; y<length l\\<rbrakk> \n  \\<Longrightarrow> rep_of l x = rep_of l y \\<longleftrightarrow> (x,y)\\<in>ufa_\\<alpha> l\"", "lemma ufa_union_invar:\n  assumes I: \"ufa_invar l\"\n  assumes L: \"x<length l\" \"y<length l\"\n  shows \"ufa_invar (ufa_union l x y)\"", "lemma ufa_union_aux:\n  assumes I: \"ufa_invar l\"\n  assumes L: \"x<length l\" \"y<length l\" \n  assumes IL: \"i<length l\"\n  shows \"rep_of (ufa_union l x y) i = \n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\"", "lemma ufa_union_correct: \"\\<lbrakk> ufa_invar l; x<length l; y<length l \\<rbrakk> \n  \\<Longrightarrow> ufa_\\<alpha> (ufa_union l x y) = per_union (ufa_\\<alpha> l) x y\"", "lemma ufa_compress_aux:\n  assumes I: \"ufa_invar l\"\n  assumes L[simp]: \"x<length l\"\n  shows \"ufa_invar (l[x := rep_of l x])\" \n  and \"\\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i\"", "lemma ufa_compress_invar:\n  assumes I: \"ufa_invar l\"\n  assumes L[simp]: \"x<length l\"\n  shows \"ufa_invar (l[x := rep_of l x])\"", "lemma ufa_compress_correct:\n  assumes I: \"ufa_invar l\"\n  assumes L[simp]: \"x<length l\"\n  shows \"ufa_\\<alpha> (l[x := rep_of l x]) = ufa_\\<alpha> l\"", "lemma uf_init_rule[sep_heap_rules]: \n  \"<emp> uf_init n <is_uf {(i,i) |i. i<n}>\"", "lemma uf_rep_of_rule[sep_heap_rules]: \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow>\n  <p\\<mapsto>\\<^sub>al> uf_rep_of p i <\\<lambda>r. p\\<mapsto>\\<^sub>al * \\<up>(r=rep_of l i)>\"", "lemma uf_compress_rule: \"\\<lbrakk> ufa_invar l; i<length l; ci=rep_of l i \\<rbrakk> \\<Longrightarrow>\n  <p\\<mapsto>\\<^sub>al> uf_compress i ci p \n  <\\<lambda>_. \\<exists>\\<^sub>Al'. p\\<mapsto>\\<^sub>al' * \\<up>(ufa_invar l' \\<and> length l' = length l \n     \\<and> (\\<forall>i<length l. rep_of l' i = rep_of l i))>\"", "lemma uf_rep_of_c_rule[sep_heap_rules]: \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow>\n  <p\\<mapsto>\\<^sub>al> uf_rep_of_c p i <\\<lambda>r. \\<exists>\\<^sub>Al'. p\\<mapsto>\\<^sub>al' \n    * \\<up>(r=rep_of l i \\<and> ufa_invar l'\n       \\<and> length l' = length l \n       \\<and> (\\<forall>i<length l. rep_of l' i = rep_of l i))>\"", "lemma cnv_to_ufa_\\<alpha>_eq: \n  \"\\<lbrakk>(\\<forall>i<length l. rep_of l' i = rep_of l i); length l = length l'\\<rbrakk> \n  \\<Longrightarrow> (ufa_\\<alpha> l = ufa_\\<alpha> l')\"", "lemma uf_cmp_rule[sep_heap_rules]:\n  \"<is_uf R u> uf_cmp u i j <\\<lambda>r. is_uf R u * \\<up>(r\\<longleftrightarrow>(i,j)\\<in>R)>\"", "lemma uf_union_rule[sep_heap_rules]: \"\\<lbrakk>i\\<in>Domain R; j\\<in> Domain R\\<rbrakk> \n  \\<Longrightarrow> <is_uf R u> uf_union u i j <is_uf (per_union R i j)>\""], "translations": [["", "lemma ufa_invarD: \n  \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow> rep_of_dom (l,i)\" \n  \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow> l!i<length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n     \\<Longrightarrow> rep_of_dom (l, i)) &&&\n    (\\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n     \\<Longrightarrow> l ! i < length l)", "unfolding ufa_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<forall>i<length l.\n                 rep_of_dom (l, i) \\<and> l ! i < length l;\n      i < length l\\<rbrakk>\n     \\<Longrightarrow> rep_of_dom (l, i)) &&&\n    (\\<lbrakk>\\<forall>i<length l.\n                 rep_of_dom (l, i) \\<and> l ! i < length l;\n      i < length l\\<rbrakk>\n     \\<Longrightarrow> l ! i < length l)", "by auto"], ["", "text \\<open>We derive the following equations for the \\<open>rep-of\\<close> function.\\<close>"], ["", "lemma rep_of_refl: \"l!i=i \\<Longrightarrow> rep_of l i = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l ! i = i \\<Longrightarrow> rep_of l i = i", "apply (subst rep_of.psimps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. l ! i = i \\<Longrightarrow> rep_of_dom (l, i)\n 2. l ! i = i \\<Longrightarrow>\n    (if l ! i = i then i else rep_of l (l ! i)) = i", "apply (rule rep_of.domintros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>l ! i = i; l ! i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (l, l ! i)\n 2. l ! i = i \\<Longrightarrow>\n    (if l ! i = i then i else rep_of l (l ! i)) = i", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rep_of_step: \n  \"\\<lbrakk>ufa_invar l; i<length l; l!i\\<noteq>i\\<rbrakk> \\<Longrightarrow> rep_of l i = rep_of l (l!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of l i = rep_of l (l ! i)", "apply (subst rep_of.psimps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (l, i)\n 2. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> (if l ! i = i then i else rep_of l (l ! i)) =\n                      rep_of l (l ! i)", "apply (auto dest: ufa_invarD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas rep_of_simps = rep_of_refl rep_of_step"], ["", "lemma rep_of_iff: \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \n  \\<Longrightarrow> rep_of l i = (if l!i=i then i else rep_of l (l!i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> rep_of l i =\n                      (if l ! i = i then i else rep_of l (l ! i))", "by (simp add: rep_of_simps)"], ["", "text \\<open>We derive a custom induction rule, that is more suited to\n  our purposes.\\<close>"], ["", "lemma rep_of_induct[case_names base step, consumes 2]:\n  assumes I: \"ufa_invar l\" \n  assumes L: \"i<length l\"\n  assumes BASE: \"\\<And>i. \\<lbrakk> ufa_invar l; i<length l; l!i=i \\<rbrakk> \\<Longrightarrow> P l i\"\n  assumes STEP: \"\\<And>i. \\<lbrakk> ufa_invar l; i<length l; l!i\\<noteq>i; P l (l!i) \\<rbrakk> \n    \\<Longrightarrow> P l i\"\n  shows \"P l i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P l i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P l i", "from ufa_invarD[OF I L]"], ["proof (chain)\npicking this:\n  rep_of_dom (l, i)\n  l ! i < length l", "have \"ufa_invar l \\<and> i<length l \\<longrightarrow> P l i\""], ["proof (prove)\nusing this:\n  rep_of_dom (l, i)\n  l ! i < length l\n\ngoal (1 subgoal):\n 1. ufa_invar l \\<and> i < length l \\<longrightarrow> P l i", "apply (induct l\\<equiv>l i rule: rep_of.pinduct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>rep_of_dom (l, i);\n        \\<lbrakk>l ! i \\<noteq> i; l ! (l ! i) < length l\\<rbrakk>\n        \\<Longrightarrow> ufa_invar l \\<and>\n                          l ! i < length l \\<longrightarrow>\n                          P l (l ! i);\n        l ! i < length l\\<rbrakk>\n       \\<Longrightarrow> ufa_invar l \\<and> i < length l \\<longrightarrow>\n                         P l i", "apply (auto intro: STEP BASE dest: ufa_invarD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ufa_invar l \\<and> i < length l \\<longrightarrow> P l i\n\ngoal (1 subgoal):\n 1. P l i", "thus ?thesis"], ["proof (prove)\nusing this:\n  ufa_invar l \\<and> i < length l \\<longrightarrow> P l i\n\ngoal (1 subgoal):\n 1. P l i", "using I L"], ["proof (prove)\nusing this:\n  ufa_invar l \\<and> i < length l \\<longrightarrow> P l i\n  ufa_invar l\n  i < length l\n\ngoal (1 subgoal):\n 1. P l i", "by simp"], ["proof (state)\nthis:\n  P l i\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>In the following, we define various properties of \\<open>rep_of\\<close>.\\<close>"], ["", "lemma rep_of_min: \n  \"\\<lbrakk> ufa_invar l; i<length l \\<rbrakk> \\<Longrightarrow> l!(rep_of l i) = rep_of l i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> l ! rep_of l i = rep_of l i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> l ! rep_of l i = rep_of l i", "have \"\\<lbrakk>rep_of_dom (l,i) \\<rbrakk> \\<Longrightarrow> l!(rep_of l i) = rep_of l i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of_dom (l, i) \\<Longrightarrow> l ! rep_of l i = rep_of l i", "apply (induct arbitrary:  rule: rep_of.pinduct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l i.\n       \\<lbrakk>rep_of_dom (l, i);\n        l ! i \\<noteq> i \\<Longrightarrow>\n        l ! rep_of l (l ! i) = rep_of l (l ! i)\\<rbrakk>\n       \\<Longrightarrow> l ! rep_of l i = rep_of l i", "apply (subst rep_of.psimps, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l i.\n       \\<lbrakk>rep_of_dom (l, i);\n        l ! i \\<noteq> i \\<Longrightarrow>\n        l ! rep_of l (l ! i) = rep_of l (l ! i)\\<rbrakk>\n       \\<Longrightarrow> l ! (if l ! i = i then i else rep_of l (l ! i)) =\n                         rep_of l i", "apply (subst (2) rep_of.psimps, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l i.\n       \\<lbrakk>rep_of_dom (l, i);\n        l ! i \\<noteq> i \\<Longrightarrow>\n        l ! rep_of l (l ! i) = rep_of l (l ! i)\\<rbrakk>\n       \\<Longrightarrow> l ! (if l ! i = i then i else rep_of l (l ! i)) =\n                         (if l ! i = i then i else rep_of l (l ! i))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rep_of_dom (l, i) \\<Longrightarrow> l ! rep_of l i = rep_of l i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> l ! rep_of l i = rep_of l i", "thus \"\\<lbrakk> ufa_invar l; i<length l \\<rbrakk> \\<Longrightarrow> l!(rep_of l i) = rep_of l i\""], ["proof (prove)\nusing this:\n  rep_of_dom (l, i) \\<Longrightarrow> l ! rep_of l i = rep_of l i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> l ! rep_of l i = rep_of l i", "by (metis ufa_invarD(1))"], ["proof (state)\nthis:\n  \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n  \\<Longrightarrow> l ! rep_of l i = rep_of l i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rep_of_bound: \n  \"\\<lbrakk> ufa_invar l; i<length l \\<rbrakk> \\<Longrightarrow> rep_of l i < length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> rep_of l i < length l", "apply (induct rule: rep_of_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> rep_of l i < length l\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of l (l ! i) < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of l i < length l", "apply (auto simp: rep_of_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rep_of_idem: \n  \"\\<lbrakk> ufa_invar l; i<length l \\<rbrakk> \\<Longrightarrow> rep_of l (rep_of l i) = rep_of l i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> rep_of l (rep_of l i) = rep_of l i", "by (auto simp: rep_of_min rep_of_refl)"], ["", "lemma rep_of_min_upd: \"\\<lbrakk> ufa_invar l; x<length l; i<length l \\<rbrakk> \\<Longrightarrow> \n  rep_of (l[rep_of l x := rep_of l x]) i = rep_of l i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; x < length l; i < length l\\<rbrakk>\n    \\<Longrightarrow> rep_of (l[rep_of l x := rep_of l x]) i = rep_of l i", "by (metis list_update_id rep_of_min)"], ["", "lemma rep_of_idx: \n  \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow> rep_of l (l!i) = rep_of l i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> rep_of l (l ! i) = rep_of l i", "by (metis rep_of_step)"], ["", "subsubsection \\<open>Abstraction to Partial Equivalence Relation\\<close>"], ["", "definition ufa_\\<alpha> :: \"nat list \\<Rightarrow> (nat\\<times>nat) set\" \n  where \"ufa_\\<alpha> l \n    \\<equiv> {(x,y). x<length l \\<and> y<length l \\<and> rep_of l x = rep_of l y}\""], ["", "lemma ufa_\\<alpha>_equiv[simp, intro!]: \"part_equiv (ufa_\\<alpha> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. part_equiv (ufa_\\<alpha> l)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. sym (ufa_\\<alpha> l)\n 2. trans (ufa_\\<alpha> l)", "unfolding ufa_\\<alpha>_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. sym {(x, y).\n         x < length l \\<and> y < length l \\<and> rep_of l x = rep_of l y}\n 2. trans\n     {(x, y).\n      x < length l \\<and> y < length l \\<and> rep_of l x = rep_of l y}", "apply (rule symI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> {(x, y).\n              x < length l \\<and>\n              y < length l \\<and> rep_of l x = rep_of l y} \\<Longrightarrow>\n       (b, a)\n       \\<in> {(x, y).\n              x < length l \\<and>\n              y < length l \\<and> rep_of l x = rep_of l y}\n 2. trans\n     {(x, y).\n      x < length l \\<and> y < length l \\<and> rep_of l x = rep_of l y}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. trans\n     {(x, y).\n      x < length l \\<and> y < length l \\<and> rep_of l x = rep_of l y}", "apply (rule transI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>(x, y)\n                \\<in> {(x, y).\n                       x < length l \\<and>\n                       y < length l \\<and> rep_of l x = rep_of l y};\n        (y, z)\n        \\<in> {(x, y).\n               x < length l \\<and>\n               y < length l \\<and> rep_of l x = rep_of l y}\\<rbrakk>\n       \\<Longrightarrow> (x, z)\n                         \\<in> {(x, y).\n                                x < length l \\<and>\n                                y < length l \\<and> rep_of l x = rep_of l y}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ufa_\\<alpha>_lenD: \n  \"(x,y)\\<in>ufa_\\<alpha> l \\<Longrightarrow> x<length l\"\n  \"(x,y)\\<in>ufa_\\<alpha> l \\<Longrightarrow> y<length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> ufa_\\<alpha> l \\<Longrightarrow> x < length l) &&&\n    ((x, y) \\<in> ufa_\\<alpha> l \\<Longrightarrow> y < length l)", "unfolding ufa_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y)\n     \\<in> {(x, y).\n            x < length l \\<and>\n            y < length l \\<and> rep_of l x = rep_of l y} \\<Longrightarrow>\n     x < length l) &&&\n    ((x, y)\n     \\<in> {(x, y).\n            x < length l \\<and>\n            y < length l \\<and> rep_of l x = rep_of l y} \\<Longrightarrow>\n     y < length l)", "by auto"], ["", "lemma ufa_\\<alpha>_dom[simp]: \"Domain (ufa_\\<alpha> l) = {0..<length l}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (ufa_\\<alpha> l) = {0..<length l}", "unfolding ufa_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain\n     {(x, y).\n      x < length l \\<and> y < length l \\<and> rep_of l x = rep_of l y} =\n    {0..<length l}", "by auto"], ["", "lemma ufa_\\<alpha>_refl[simp]: \"(i,i)\\<in>ufa_\\<alpha> l \\<longleftrightarrow> i<length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((i, i) \\<in> ufa_\\<alpha> l) = (i < length l)", "unfolding ufa_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((i, i)\n     \\<in> {(x, y).\n            x < length l \\<and>\n            y < length l \\<and> rep_of l x = rep_of l y}) =\n    (i < length l)", "by simp"], ["", "lemma ufa_\\<alpha>_len_eq: \n  assumes \"ufa_\\<alpha> l = ufa_\\<alpha> l'\"  \n  shows \"length l = length l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length l = length l'", "by (metis assms le_antisym less_not_refl linorder_le_less_linear ufa_\\<alpha>_refl)"], ["", "subsubsection \\<open>Operations\\<close>"], ["", "lemma ufa_init_invar: \"ufa_invar [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ufa_invar [0..<n]", "unfolding ufa_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length [0..<n].\n       rep_of_dom ([0..<n], i) \\<and> [0..<n] ! i < length [0..<n]", "by (auto intro: rep_of.domintros)"], ["", "lemma ufa_init_correct: \"ufa_\\<alpha> [0..<n] = {(x,x) | x. x<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ufa_\\<alpha> [0..<n] = {(x, x) |x. x < n}", "unfolding ufa_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y).\n     x < length [0..<n] \\<and>\n     y < length [0..<n] \\<and> rep_of [0..<n] x = rep_of [0..<n] y} =\n    {(x, x) |x. x < n}", "using ufa_init_invar[of n]"], ["proof (prove)\nusing this:\n  ufa_invar [0..<n]\n\ngoal (1 subgoal):\n 1. {(x, y).\n     x < length [0..<n] \\<and>\n     y < length [0..<n] \\<and> rep_of [0..<n] x = rep_of [0..<n] y} =\n    {(x, x) |x. x < n}", "apply (auto simp: rep_of_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ufa_find_correct: \"\\<lbrakk>ufa_invar l; x<length l; y<length l\\<rbrakk> \n  \\<Longrightarrow> rep_of l x = rep_of l y \\<longleftrightarrow> (x,y)\\<in>ufa_\\<alpha> l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; x < length l; y < length l\\<rbrakk>\n    \\<Longrightarrow> (rep_of l x = rep_of l y) =\n                      ((x, y) \\<in> ufa_\\<alpha> l)", "unfolding ufa_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; x < length l; y < length l\\<rbrakk>\n    \\<Longrightarrow> (rep_of l x = rep_of l y) =\n                      ((x, y)\n                       \\<in> {(x, y).\n                              x < length l \\<and>\n                              y < length l \\<and> rep_of l x = rep_of l y})", "by auto"], ["", "abbreviation \"ufa_union l x y \\<equiv> l[rep_of l x := rep_of l y]\""], ["", "lemma ufa_union_invar:\n  assumes I: \"ufa_invar l\"\n  assumes L: \"x<length l\" \"y<length l\"\n  shows \"ufa_invar (ufa_union l x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ufa_invar (ufa_union l x y)", "unfolding ufa_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (ufa_union l x y).\n       rep_of_dom (ufa_union l x y, i) \\<and>\n       ufa_union l x y ! i < length (ufa_union l x y)", "proof (intro allI impI, simp only: length_list_update)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length l \\<Longrightarrow>\n       rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length l \\<Longrightarrow>\n       rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l", "assume A: \"i<length l\""], ["proof (state)\nthis:\n  i < length l\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length l \\<Longrightarrow>\n       rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l", "with I"], ["proof (chain)\npicking this:\n  ufa_invar l\n  i < length l", "have \"rep_of_dom (l,i)\""], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n\ngoal (1 subgoal):\n 1. rep_of_dom (l, i)", "by (auto dest: ufa_invarD)"], ["proof (state)\nthis:\n  rep_of_dom (l, i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length l \\<Longrightarrow>\n       rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l", "have \"ufa_union l x y ! i < length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ufa_union l x y ! i < length l", "using I L A"], ["proof (prove)\nusing this:\n  ufa_invar l\n  x < length l\n  y < length l\n  i < length l\n\ngoal (1 subgoal):\n 1. ufa_union l x y ! i < length l", "apply (cases \"i=rep_of l x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ufa_invar l; x < length l; y < length l; i < length l;\n     i = rep_of l x\\<rbrakk>\n    \\<Longrightarrow> ufa_union l x y ! i < length l\n 2. \\<lbrakk>ufa_invar l; x < length l; y < length l; i < length l;\n     i \\<noteq> rep_of l x\\<rbrakk>\n    \\<Longrightarrow> ufa_union l x y ! i < length l", "apply (auto simp: rep_of_bound dest: ufa_invarD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ufa_union l x y ! i < length l\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length l \\<Longrightarrow>\n       rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l", "moreover"], ["proof (state)\nthis:\n  ufa_union l x y ! i < length l\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length l \\<Longrightarrow>\n       rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l", "have \"rep_of_dom (ufa_union l x y, i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of_dom (ufa_union l x y, i)", "using I A L"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n  x < length l\n  y < length l\n\ngoal (1 subgoal):\n 1. rep_of_dom (ufa_union l x y, i)", "proof (induct rule: rep_of_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i; x < length l;\n        y < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        \\<lbrakk>x < length l; y < length l\\<rbrakk>\n        \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i);\n        x < length l; y < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)", "case (base i)"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i = i\n  x < length l\n  y < length l\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i; x < length l;\n        y < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        \\<lbrakk>x < length l; y < length l\\<rbrakk>\n        \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i);\n        x < length l; y < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)", "thus ?case"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n  l ! i = i\n  x < length l\n  y < length l\n\ngoal (1 subgoal):\n 1. rep_of_dom (ufa_union l x y, i)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i = i; x < length l;\n     y < length l\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)", "apply (rule rep_of.domintros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i = i; x < length l;\n     y < length l; ufa_union l x y ! i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (ufa_union l x y, ufa_union l x y ! i)", "apply (cases \"i=rep_of l x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i = i; x < length l;\n     y < length l; ufa_union l x y ! i \\<noteq> i; i = rep_of l x\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (ufa_union l x y, ufa_union l x y ! i)\n 2. \\<lbrakk>ufa_invar l; i < length l; l ! i = i; x < length l;\n     y < length l; ufa_union l x y ! i \\<noteq> i;\n     i \\<noteq> rep_of l x\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (ufa_union l x y, ufa_union l x y ! i)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; rep_of l x < length l;\n     l ! rep_of l x = rep_of l x; x < length l; y < length l;\n     rep_of l y \\<noteq> rep_of l x; i = rep_of l x\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (ufa_union l x y, rep_of l y)", "apply (rule rep_of.domintros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; rep_of l x < length l;\n     l ! rep_of l x = rep_of l x; x < length l; y < length l;\n     rep_of l y \\<noteq> rep_of l x; i = rep_of l x;\n     ufa_union l x y ! rep_of l y \\<noteq> rep_of l y\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom\n                       (ufa_union l x y, ufa_union l x y ! rep_of l y)", "apply (auto simp: rep_of_min)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rep_of_dom (ufa_union l x y, i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        \\<lbrakk>x < length l; y < length l\\<rbrakk>\n        \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i);\n        x < length l; y < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        \\<lbrakk>x < length l; y < length l\\<rbrakk>\n        \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i);\n        x < length l; y < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)", "case (step i)"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  \\<lbrakk>x < length l; y < length l\\<rbrakk>\n  \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i)\n  x < length l\n  y < length l\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        \\<lbrakk>x < length l; y < length l\\<rbrakk>\n        \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i);\n        x < length l; y < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)", "from step.prems \\<open>ufa_invar l\\<close> \\<open>i<length l\\<close> \\<open>l!i\\<noteq>i\\<close>"], ["proof (chain)\npicking this:\n  x < length l\n  y < length l\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i", "have [simp]: \"ufa_union l x y ! i = l!i\""], ["proof (prove)\nusing this:\n  x < length l\n  y < length l\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n\ngoal (1 subgoal):\n 1. ufa_union l x y ! i = l ! i", "apply (auto simp: rep_of_min rep_of_bound nth_list_update)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ufa_union l x y ! i = l ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        \\<lbrakk>x < length l; y < length l\\<rbrakk>\n        \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i);\n        x < length l; y < length l\\<rbrakk>\n       \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)", "from step"], ["proof (chain)\npicking this:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  \\<lbrakk>x < length l; y < length l\\<rbrakk>\n  \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i)\n  x < length l\n  y < length l", "show ?case"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  \\<lbrakk>x < length l; y < length l\\<rbrakk>\n  \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i)\n  x < length l\n  y < length l\n\ngoal (1 subgoal):\n 1. rep_of_dom (ufa_union l x y, i)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n     \\<lbrakk>x < length l; y < length l\\<rbrakk>\n     \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i);\n     x < length l; y < length l\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (ufa_union l x y, i)", "apply (rule rep_of.domintros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n     \\<lbrakk>x < length l; y < length l\\<rbrakk>\n     \\<Longrightarrow> rep_of_dom (ufa_union l x y, l ! i);\n     x < length l; y < length l; ufa_union l x y ! i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (ufa_union l x y, ufa_union l x y ! i)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rep_of_dom (ufa_union l x y, i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rep_of_dom (ufa_union l x y, i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length l \\<Longrightarrow>\n       rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l", "ultimately"], ["proof (chain)\npicking this:\n  ufa_union l x y ! i < length l\n  rep_of_dom (ufa_union l x y, i)", "show \n    \"rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l\""], ["proof (prove)\nusing this:\n  ufa_union l x y ! i < length l\n  rep_of_dom (ufa_union l x y, i)\n\ngoal (1 subgoal):\n 1. rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l", "by blast"], ["proof (state)\nthis:\n  rep_of_dom (ufa_union l x y, i) \\<and> ufa_union l x y ! i < length l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ufa_union_aux:\n  assumes I: \"ufa_invar l\"\n  assumes L: \"x<length l\" \"y<length l\" \n  assumes IL: \"i<length l\"\n  shows \"rep_of (ufa_union l x y) i = \n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "using I IL"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "proof (induct rule: rep_of_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "case (base i)"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i = i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "have [simp]: \"rep_of l i = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of l i = i", "using \\<open>l!i=i\\<close>"], ["proof (prove)\nusing this:\n  l ! i = i\n\ngoal (1 subgoal):\n 1. rep_of l i = i", "by (simp add: rep_of_refl)"], ["proof (state)\nthis:\n  rep_of l i = i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "note [simp] = \\<open>ufa_invar l\\<close> \\<open>i<length l\\<close>"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n 2. \\<not> ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "assume A[simp]: \"rep_of l x = i\""], ["proof (state)\nthis:\n  rep_of l x = i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n 2. \\<not> ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "have [simp]: \"l[i := rep_of l y] ! i = rep_of l y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l[i := rep_of l y] ! i = rep_of l y", "by (auto simp: rep_of_bound)"], ["proof (state)\nthis:\n  l[i := rep_of l y] ! i = rep_of l y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n 2. \\<not> ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n 2. \\<not> ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "assume [simp]: \"rep_of l y = i\""], ["proof (state)\nthis:\n  rep_of l y = i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n 2. \\<not> ?P \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "by (simp add: rep_of_refl)"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i =\n  (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n\ngoal (1 subgoal):\n 1. rep_of l y \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rep_of l y \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "assume A: \"rep_of l y \\<noteq> i\""], ["proof (state)\nthis:\n  rep_of l y \\<noteq> i\n\ngoal (1 subgoal):\n 1. rep_of l y \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "have [simp]: \"rep_of (l[i := rep_of l y]) i = rep_of l y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of (l[i := rep_of l y]) i = rep_of l y", "apply (subst rep_of_step[OF ufa_union_invar[OF I L], simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. i < length l\n 2. l[i := rep_of l y] ! i \\<noteq> i\n 3. rep_of (l[i := rep_of l y]) (l[i := rep_of l y] ! i) = rep_of l y", "using A"], ["proof (prove)\nusing this:\n  rep_of l y \\<noteq> i\n\ngoal (3 subgoals):\n 1. i < length l\n 2. l[i := rep_of l y] ! i \\<noteq> i\n 3. rep_of (l[i := rep_of l y]) (l[i := rep_of l y] ! i) = rep_of l y", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of l y \\<noteq> i \\<Longrightarrow>\n    rep_of (l[i := rep_of l y]) (rep_of l y) = rep_of l y", "apply (subst rep_of_refl[where i=\"rep_of l y\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. rep_of l y \\<noteq> i \\<Longrightarrow>\n    l[i := rep_of l y] ! rep_of l y = rep_of l y\n 2. rep_of l y \\<noteq> i \\<Longrightarrow> rep_of l y = rep_of l y", "using I L"], ["proof (prove)\nusing this:\n  ufa_invar l\n  x < length l\n  y < length l\n\ngoal (2 subgoals):\n 1. rep_of l y \\<noteq> i \\<Longrightarrow>\n    l[i := rep_of l y] ! rep_of l y = rep_of l y\n 2. rep_of l y \\<noteq> i \\<Longrightarrow> rep_of l y = rep_of l y", "apply (simp_all add: rep_of_min)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rep_of (l[i := rep_of l y]) i = rep_of l y\n\ngoal (1 subgoal):\n 1. rep_of l y \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "by (simp add: rep_of_refl)"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i =\n  (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i =\n  (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n\ngoal (1 subgoal):\n 1. rep_of l x \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rep_of l x \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "assume A: \"rep_of l x \\<noteq> i\""], ["proof (state)\nthis:\n  rep_of l x \\<noteq> i\n\ngoal (1 subgoal):\n 1. rep_of l x \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "hence \"ufa_union l x y ! i = l!i\""], ["proof (prove)\nusing this:\n  rep_of l x \\<noteq> i\n\ngoal (1 subgoal):\n 1. ufa_union l x y ! i = l ! i", "by (auto)"], ["proof (state)\nthis:\n  ufa_union l x y ! i = l ! i\n\ngoal (1 subgoal):\n 1. rep_of l x \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "also"], ["proof (state)\nthis:\n  ufa_union l x y ! i = l ! i\n\ngoal (1 subgoal):\n 1. rep_of l x \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "note \\<open>l!i=i\\<close>"], ["proof (state)\nthis:\n  l ! i = i\n\ngoal (1 subgoal):\n 1. rep_of l x \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "finally"], ["proof (chain)\npicking this:\n  ufa_union l x y ! i = i", "have \"rep_of (ufa_union l x y) i = i\""], ["proof (prove)\nusing this:\n  ufa_union l x y ! i = i\n\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i = i", "by (simp add: rep_of_refl)"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i = i\n\ngoal (1 subgoal):\n 1. rep_of l x \\<noteq> i \\<Longrightarrow>\n    rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  rep_of (ufa_union l x y) i = i\n\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "using A"], ["proof (prove)\nusing this:\n  rep_of (ufa_union l x y) i = i\n  rep_of l x \\<noteq> i\n\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "by auto"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i =\n  (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i =\n  (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "case (step i)"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  rep_of (ufa_union l x y) (l ! i) =\n  (if rep_of l (l ! i) = rep_of l x then rep_of l y else rep_of l (l ! i))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "note [simp] = I L \\<open>i<length l\\<close>"], ["proof (state)\nthis:\n  ufa_invar l\n  x < length l\n  y < length l\n  i < length l\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "have \"rep_of l x \\<noteq> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of l x \\<noteq> i", "by (metis I L(1) rep_of_min \\<open>l!i\\<noteq>i\\<close>)"], ["proof (state)\nthis:\n  rep_of l x \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "hence [simp]: \"ufa_union l x y ! i = l!i\""], ["proof (prove)\nusing this:\n  rep_of l x \\<noteq> i\n\ngoal (1 subgoal):\n 1. ufa_union l x y ! i = l ! i", "by (auto simp add: nth_list_update rep_of_bound \\<open>l!i\\<noteq>i\\<close>) []"], ["proof (state)\nthis:\n  ufa_union l x y ! i = l ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "have \"rep_of (ufa_union l x y) i = rep_of (ufa_union l x y) (l!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i = rep_of (ufa_union l x y) (l ! i)", "by (auto simp add: rep_of_iff[OF ufa_union_invar[OF I L]])"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i = rep_of (ufa_union l x y) (l ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "also"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i = rep_of (ufa_union l x y) (l ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "note step.hyps(4)"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) (l ! i) =\n  (if rep_of l (l ! i) = rep_of l x then rep_of l y else rep_of l (l ! i))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (ufa_union l x y) (l ! i) =\n        (if rep_of l (l ! i) = rep_of l x then rep_of l y\n         else rep_of l (l ! i))\\<rbrakk>\n       \\<Longrightarrow> rep_of (ufa_union l x y) i =\n                         (if rep_of l i = rep_of l x then rep_of l y\n                          else rep_of l i)", "finally"], ["proof (chain)\npicking this:\n  rep_of (ufa_union l x y) i =\n  (if rep_of l (l ! i) = rep_of l x then rep_of l y else rep_of l (l ! i))", "show ?case"], ["proof (prove)\nusing this:\n  rep_of (ufa_union l x y) i =\n  (if rep_of l (l ! i) = rep_of l x then rep_of l y else rep_of l (l ! i))\n\ngoal (1 subgoal):\n 1. rep_of (ufa_union l x y) i =\n    (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)", "by (auto simp: rep_of_idx)"], ["proof (state)\nthis:\n  rep_of (ufa_union l x y) i =\n  (if rep_of l i = rep_of l x then rep_of l y else rep_of l i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ufa_union_correct: \"\\<lbrakk> ufa_invar l; x<length l; y<length l \\<rbrakk> \n  \\<Longrightarrow> ufa_\\<alpha> (ufa_union l x y) = per_union (ufa_\\<alpha> l) x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; x < length l; y < length l\\<rbrakk>\n    \\<Longrightarrow> ufa_\\<alpha> (ufa_union l x y) =\n                      per_union (ufa_\\<alpha> l) x y", "unfolding ufa_\\<alpha>_def per_union_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; x < length l; y < length l\\<rbrakk>\n    \\<Longrightarrow> {(xa, ya).\n                       xa < length (ufa_union l x y) \\<and>\n                       ya < length (ufa_union l x y) \\<and>\n                       rep_of (ufa_union l x y) xa =\n                       rep_of (ufa_union l x y) ya} =\n                      {(x, y).\n                       x < length l \\<and>\n                       y < length l \\<and> rep_of l x = rep_of l y} \\<union>\n                      {(xa, ya).\n                       (xa, x)\n                       \\<in> {(x, y).\n                              x < length l \\<and>\n                              y < length l \\<and>\n                              rep_of l x = rep_of l y} \\<and>\n                       (ya, y)\n                       \\<in> {(x, y).\n                              x < length l \\<and>\n                              y < length l \\<and>\n                              rep_of l x = rep_of l y}} \\<union>\n                      {(ya, xa).\n                       (xa, x)\n                       \\<in> {(x, y).\n                              x < length l \\<and>\n                              y < length l \\<and>\n                              rep_of l x = rep_of l y} \\<and>\n                       (ya, y)\n                       \\<in> {(x, y).\n                              x < length l \\<and>\n                              y < length l \\<and> rep_of l x = rep_of l y}}", "by (auto simp: ufa_union_aux\n    split: if_split_asm\n  )"], ["", "lemma ufa_compress_aux:\n  assumes I: \"ufa_invar l\"\n  assumes L[simp]: \"x<length l\"\n  shows \"ufa_invar (l[x := rep_of l x])\" \n  and \"\\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ufa_invar (l[x := rep_of l x]) &&&\n    \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "assume \"i<length (l[x := rep_of l x])\""], ["proof (state)\nthis:\n  i < length (l[x := rep_of l x])\n\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "hence IL: \"i<length l\""], ["proof (prove)\nusing this:\n  i < length (l[x := rep_of l x])\n\ngoal (1 subgoal):\n 1. i < length l", "by simp"], ["proof (state)\nthis:\n  i < length l\n\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "have G1: \"l[x := rep_of l x] ! i < length (l[x := rep_of l x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l[x := rep_of l x] ! i < length (l[x := rep_of l x])", "using I IL"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n\ngoal (1 subgoal):\n 1. l[x := rep_of l x] ! i < length (l[x := rep_of l x])", "by (auto dest: ufa_invarD[OF I] simp: nth_list_update rep_of_bound)"], ["proof (state)\nthis:\n  l[x := rep_of l x] ! i < length (l[x := rep_of l x])\n\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "from I IL"], ["proof (chain)\npicking this:\n  ufa_invar l\n  i < length l", "have G2: \"rep_of (l[x := rep_of l x]) i = rep_of l i \n      \\<and> rep_of_dom (l[x := rep_of l x], i)\""], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n\ngoal (1 subgoal):\n 1. rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n    rep_of_dom (l[x := rep_of l x], i)", "proof (induct rule: rep_of_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                         rep_of_dom (l[x := rep_of l x], i)\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n        rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n       \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                         rep_of_dom (l[x := rep_of l x], i)", "case (base i)"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i = i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                         rep_of_dom (l[x := rep_of l x], i)\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n        rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n       \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                         rep_of_dom (l[x := rep_of l x], i)", "thus ?case"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n  l ! i = i\n\ngoal (1 subgoal):\n 1. rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n    rep_of_dom (l[x := rep_of l x], i)", "apply (cases \"x=i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i = i; x = i\\<rbrakk>\n    \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                      rep_of_dom (l[x := rep_of l x], i)\n 2. \\<lbrakk>ufa_invar l; i < length l; l ! i = i; x \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                      rep_of_dom (l[x := rep_of l x], i)", "apply (auto intro: rep_of.domintros simp: rep_of_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n  rep_of_dom (l[x := rep_of l x], i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n        rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n       \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                         rep_of_dom (l[x := rep_of l x], i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n        rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n       \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                         rep_of_dom (l[x := rep_of l x], i)", "case (step i)"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n  rep_of_dom (l[x := rep_of l x], l ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n        rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n       \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                         rep_of_dom (l[x := rep_of l x], i)", "hence D: \"rep_of_dom (l[x := rep_of l x], i)\""], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n  rep_of_dom (l[x := rep_of l x], l ! i)\n\ngoal (1 subgoal):\n 1. rep_of_dom (l[x := rep_of l x], i)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n     rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n     rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (l[x := rep_of l x], i)", "apply (rule rep_of.domintros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n     rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n     rep_of_dom (l[x := rep_of l x], l ! i);\n     l[x := rep_of l x] ! i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom\n                       (l[x := rep_of l x], l[x := rep_of l x] ! i)", "apply (cases \"x=i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n     rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n     rep_of_dom (l[x := rep_of l x], l ! i);\n     l[x := rep_of l x] ! i \\<noteq> i; x = i\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom\n                       (l[x := rep_of l x], l[x := rep_of l x] ! i)\n 2. \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n     rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n     rep_of_dom (l[x := rep_of l x], l ! i);\n     l[x := rep_of l x] ! i \\<noteq> i; x \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom\n                       (l[x := rep_of l x], l[x := rep_of l x] ! i)", "apply (auto intro: rep_of.domintros simp: rep_of_min)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rep_of_dom (l[x := rep_of l x], i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n        rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n       \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n                         rep_of_dom (l[x := rep_of l x], i)", "thus ?case"], ["proof (prove)\nusing this:\n  rep_of_dom (l[x := rep_of l x], i)\n\ngoal (1 subgoal):\n 1. rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n    rep_of_dom (l[x := rep_of l x], i)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_of_dom (l[x := rep_of l x], i) \\<Longrightarrow>\n    rep_of (l[x := rep_of l x]) i = rep_of l i", "using step"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n  rep_of_dom (l[x := rep_of l x], l ! i)\n\ngoal (1 subgoal):\n 1. rep_of_dom (l[x := rep_of l x], i) \\<Longrightarrow>\n    rep_of (l[x := rep_of l x]) i = rep_of l i", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rep_of_dom (l[x := rep_of l x], i); ufa_invar l; i < length l;\n     l ! i \\<noteq> i;\n     rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n     rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n    \\<Longrightarrow> rep_of (l[x := rep_of l x]) i = rep_of l i", "apply (subst rep_of.psimps[OF D])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rep_of_dom (l[x := rep_of l x], i); ufa_invar l; i < length l;\n     l ! i \\<noteq> i;\n     rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n     rep_of_dom (l[x := rep_of l x], l ! i)\\<rbrakk>\n    \\<Longrightarrow> (if l[x := rep_of l x] ! i = i then i\n                       else rep_of (l[x := rep_of l x])\n                             (l[x := rep_of l x] ! i)) =\n                      rep_of l i", "apply (cases \"x=i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rep_of_dom (l[x := rep_of l x], i); ufa_invar l; i < length l;\n     l ! i \\<noteq> i;\n     rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n     rep_of_dom (l[x := rep_of l x], l ! i);\n     x = i\\<rbrakk>\n    \\<Longrightarrow> (if l[x := rep_of l x] ! i = i then i\n                       else rep_of (l[x := rep_of l x])\n                             (l[x := rep_of l x] ! i)) =\n                      rep_of l i\n 2. \\<lbrakk>rep_of_dom (l[x := rep_of l x], i); ufa_invar l; i < length l;\n     l ! i \\<noteq> i;\n     rep_of (l[x := rep_of l x]) (l ! i) = rep_of l (l ! i) \\<and>\n     rep_of_dom (l[x := rep_of l x], l ! i);\n     x \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> (if l[x := rep_of l x] ! i = i then i\n                       else rep_of (l[x := rep_of l x])\n                             (l[x := rep_of l x] ! i)) =\n                      rep_of l i", "apply (auto simp: rep_of_min rep_of_idx)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rep_of_dom (l[i := rep_of l i], i); ufa_invar l; i < length l;\n     l ! i \\<noteq> i; x = i;\n     rep_of (l[i := rep_of l i]) (l ! i) = rep_of l i;\n     rep_of_dom (l[i := rep_of l i], l ! i); rep_of l i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of (l[i := rep_of l i]) (rep_of l i) = rep_of l i", "apply (subst rep_of.psimps[where i=\"rep_of l i\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rep_of_dom (l[i := rep_of l i], i); ufa_invar l; i < length l;\n     l ! i \\<noteq> i; x = i;\n     rep_of (l[i := rep_of l i]) (l ! i) = rep_of l i;\n     rep_of_dom (l[i := rep_of l i], l ! i); rep_of l i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> rep_of_dom (l[i := rep_of l i], rep_of l i)\n 2. \\<lbrakk>rep_of_dom (l[i := rep_of l i], i); ufa_invar l; i < length l;\n     l ! i \\<noteq> i; x = i;\n     rep_of (l[i := rep_of l i]) (l ! i) = rep_of l i;\n     rep_of_dom (l[i := rep_of l i], l ! i); rep_of l i \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> (if l[i := rep_of l i] ! rep_of l i = rep_of l i\n                       then rep_of l i\n                       else rep_of (l[i := rep_of l i])\n                             (l[i := rep_of l i] ! rep_of l i)) =\n                      rep_of l i", "apply (auto intro: rep_of.domintros simp: rep_of_min)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n  rep_of_dom (l[x := rep_of l x], i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n  rep_of_dom (l[x := rep_of l x], i)\n\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "note G1 G2"], ["proof (state)\nthis:\n  l[x := rep_of l x] ! i < length (l[x := rep_of l x])\n  rep_of (l[x := rep_of l x]) i = rep_of l i \\<and>\n  rep_of_dom (l[x := rep_of l x], i)\n\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "}"], ["proof (state)\nthis:\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  l[x := rep_of l x] ! ?i2 < length (l[x := rep_of l x])\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  rep_of (l[x := rep_of l x]) ?i2 = rep_of l ?i2 \\<and>\n  rep_of_dom (l[x := rep_of l x], ?i2)\n\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "note G=this"], ["proof (state)\nthis:\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  l[x := rep_of l x] ! ?i2 < length (l[x := rep_of l x])\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  rep_of (l[x := rep_of l x]) ?i2 = rep_of l ?i2 \\<and>\n  rep_of_dom (l[x := rep_of l x], ?i2)\n\ngoal (2 subgoals):\n 1. ufa_invar (l[x := rep_of l x])\n 2. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "thus \"\\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i\""], ["proof (prove)\nusing this:\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  l[x := rep_of l x] ! ?i2 < length (l[x := rep_of l x])\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  rep_of (l[x := rep_of l x]) ?i2 = rep_of l ?i2 \\<and>\n  rep_of_dom (l[x := rep_of l x], ?i2)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length l. rep_of (l[x := rep_of l x]) i = rep_of l i\n\ngoal (1 subgoal):\n 1. ufa_invar (l[x := rep_of l x])", "from G"], ["proof (chain)\npicking this:\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  l[x := rep_of l x] ! ?i2 < length (l[x := rep_of l x])\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  rep_of (l[x := rep_of l x]) ?i2 = rep_of l ?i2 \\<and>\n  rep_of_dom (l[x := rep_of l x], ?i2)", "show \"ufa_invar (l[x := rep_of l x])\""], ["proof (prove)\nusing this:\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  l[x := rep_of l x] ! ?i2 < length (l[x := rep_of l x])\n  ?i2 < length (l[x := rep_of l x]) \\<Longrightarrow>\n  rep_of (l[x := rep_of l x]) ?i2 = rep_of l ?i2 \\<and>\n  rep_of_dom (l[x := rep_of l x], ?i2)\n\ngoal (1 subgoal):\n 1. ufa_invar (l[x := rep_of l x])", "by (auto simp: ufa_invar_def)"], ["proof (state)\nthis:\n  ufa_invar (l[x := rep_of l x])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ufa_compress_invar:\n  assumes I: \"ufa_invar l\"\n  assumes L[simp]: \"x<length l\"\n  shows \"ufa_invar (l[x := rep_of l x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ufa_invar (l[x := rep_of l x])", "using assms"], ["proof (prove)\nusing this:\n  ufa_invar l\n  x < length l\n\ngoal (1 subgoal):\n 1. ufa_invar (l[x := rep_of l x])", "by (rule ufa_compress_aux)"], ["", "lemma ufa_compress_correct:\n  assumes I: \"ufa_invar l\"\n  assumes L[simp]: \"x<length l\"\n  shows \"ufa_\\<alpha> (l[x := rep_of l x]) = ufa_\\<alpha> l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ufa_\\<alpha> (l[x := rep_of l x]) = ufa_\\<alpha> l", "by (auto simp: ufa_\\<alpha>_def ufa_compress_aux[OF I])"], ["", "subsection \\<open>Implementation with Imperative/HOL\\<close>"], ["", "text \\<open>In this section, we implement the union-find data-structure with\n  two arrays, one holding the next-pointers, and another one holding the size\n  information. Note that we do not prove that the array for the \n  size information contains any reasonable values, as the correctness of the\n  algorithm is not affected by this. We leave it future work to also estimate\n  the complexity of the algorithm.\n\\<close>"], ["", "type_synonym uf = \"nat array \\<times> nat array\""], ["", "definition is_uf :: \"(nat\\<times>nat) set \\<Rightarrow> uf \\<Rightarrow> assn\" where \n  \"is_uf R u \\<equiv> case u of (s,p) \\<Rightarrow> \n  \\<exists>\\<^sub>Al szl. p\\<mapsto>\\<^sub>al * s\\<mapsto>\\<^sub>aszl \n    * \\<up>(ufa_invar l \\<and> ufa_\\<alpha> l = R \\<and> length szl = length l)\""], ["", "definition uf_init :: \"nat \\<Rightarrow> uf Heap\" where \n  \"uf_init n \\<equiv> do {\n    l \\<leftarrow> Array.of_list [0..<n];\n    szl \\<leftarrow> Array.new n (1::nat);\n    return (szl,l)\n  }\""], ["", "lemma uf_init_rule[sep_heap_rules]: \n  \"<emp> uf_init n <is_uf {(i,i) |i. i<n}>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> uf_init n <is_uf {(i, i) |i. i < n}>", "unfolding uf_init_def is_uf_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp>\n    Array.of_list [0..<n] \\<bind>\n    (\\<lambda>l. Array.new n 1 \\<bind> (\\<lambda>szl. return (szl, l)))\n    <\\<lambda>(s, p).\n        \\<exists>\\<^sub>Al szl.\n           p \\<mapsto>\\<^sub>a l * s \\<mapsto>\\<^sub>a szl *\n           \\<up>\n            (ufa_invar l \\<and>\n             ufa_\\<alpha> l = {(i, i) |i. i < n} \\<and>\n             length szl = length l)>", "by (sep_auto simp: ufa_init_correct ufa_init_invar)"], ["", "partial_function (heap) uf_rep_of :: \"nat array \\<Rightarrow> nat \\<Rightarrow> nat Heap\" \n  where [code]: \n  \"uf_rep_of p i = do {\n    n \\<leftarrow> Array.nth p i;\n    if n=i then return i else uf_rep_of p n\n  }\""], ["", "lemma uf_rep_of_rule[sep_heap_rules]: \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow>\n  <p\\<mapsto>\\<^sub>al> uf_rep_of p i <\\<lambda>r. p\\<mapsto>\\<^sub>al * \\<up>(r=rep_of l i)>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_rep_of p i\n                      <\\<lambda>r.\n                          p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l i)>", "apply (induct rule: rep_of_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_rep_of p i\n                         <\\<lambda>r.\n                             p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l i)>\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        <p \\<mapsto>\\<^sub>a l> uf_rep_of p (l ! i)\n        <\\<lambda>r.\n            p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l (l ! i))>\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_rep_of p i\n                         <\\<lambda>r.\n                             p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l i)>", "apply (subst uf_rep_of.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l>\n                         Array.nth p i \\<bind>\n                         (\\<lambda>n.\n                             if n = i then return i else uf_rep_of p n)\n                         <\\<lambda>r.\n                             p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l i)>\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        <p \\<mapsto>\\<^sub>a l> uf_rep_of p (l ! i)\n        <\\<lambda>r.\n            p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l (l ! i))>\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_rep_of p i\n                         <\\<lambda>r.\n                             p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l i)>", "apply (sep_auto simp: rep_of_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        <p \\<mapsto>\\<^sub>a l> uf_rep_of p (l ! i)\n        <\\<lambda>r.\n            p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l (l ! i))>\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_rep_of p i\n                         <\\<lambda>r.\n                             p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l i)>", "apply (subst uf_rep_of.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        <p \\<mapsto>\\<^sub>a l> uf_rep_of p (l ! i)\n        <\\<lambda>r.\n            p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l (l ! i))>\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l>\n                         Array.nth p i \\<bind>\n                         (\\<lambda>n.\n                             if n = i then return i else uf_rep_of p n)\n                         <\\<lambda>r.\n                             p \\<mapsto>\\<^sub>a l * \\<up> (r = rep_of l i)>", "apply (sep_auto simp: rep_of_step)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>We chose a non tail-recursive version here, as it is easier to prove.\\<close>"], ["", "partial_function (heap) uf_compress :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat array \\<Rightarrow> unit Heap\" \n  where [code]: \n  \"uf_compress i ci p = (\n    if i=ci then return ()\n    else do {\n      ni\\<leftarrow>Array.nth p i;\n      uf_compress ni ci p;\n      Array.upd i ci p;\n      return ()\n    })\""], ["", "lemma uf_compress_rule: \"\\<lbrakk> ufa_invar l; i<length l; ci=rep_of l i \\<rbrakk> \\<Longrightarrow>\n  <p\\<mapsto>\\<^sub>al> uf_compress i ci p \n  <\\<lambda>_. \\<exists>\\<^sub>Al'. p\\<mapsto>\\<^sub>al' * \\<up>(ufa_invar l' \\<and> length l' = length l \n     \\<and> (\\<forall>i<length l. rep_of l' i = rep_of l i))>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; ci = rep_of l i\\<rbrakk>\n    \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                      <\\<lambda>_.\n                          \\<exists>\\<^sub>Al'.\n                             p \\<mapsto>\\<^sub>a l' *\n                             \\<up>\n                              (ufa_invar l' \\<and>\n                               length l' = length l \\<and>\n                               (\\<forall>i<length l.\n                                   rep_of l' i = rep_of l i))>", "proof (induction rule: rep_of_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        ci = rep_of l (l ! i) \\<Longrightarrow>\n        <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n        <\\<lambda>_.\n            \\<exists>\\<^sub>Al'.\n               p \\<mapsto>\\<^sub>a l' *\n               \\<up>\n                (ufa_invar l' \\<and>\n                 length l' = length l \\<and>\n                 (\\<forall>i<length l. rep_of l' i = rep_of l i))>;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>", "case (base i)"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i = i\n  ci = rep_of l i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i = i;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>\n 2. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        ci = rep_of l (l ! i) \\<Longrightarrow>\n        <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n        <\\<lambda>_.\n            \\<exists>\\<^sub>Al'.\n               p \\<mapsto>\\<^sub>a l' *\n               \\<up>\n                (ufa_invar l' \\<and>\n                 length l' = length l \\<and>\n                 (\\<forall>i<length l. rep_of l' i = rep_of l i))>;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>", "thus ?case"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n  l ! i = i\n  ci = rep_of l i\n\ngoal (1 subgoal):\n 1. <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n    <\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l' = length l \\<and>\n             (\\<forall>i<length l. rep_of l' i = rep_of l i))>", "apply (subst uf_compress.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l; l ! i = i; ci = rep_of l i\\<rbrakk>\n    \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l>\n                      if i = ci then return ()\n                      else Array.nth p i \\<bind>\n                           (\\<lambda>ni.\n                               uf_compress ni ci p \\<bind>\n                               (\\<lambda>_.\n                                   Array.upd i ci p \\<bind>\n                                   (\\<lambda>_. return ())))\n                      <\\<lambda>_.\n                          \\<exists>\\<^sub>Al'.\n                             p \\<mapsto>\\<^sub>a l' *\n                             \\<up>\n                              (ufa_invar l' \\<and>\n                               length l' = length l \\<and>\n                               (\\<forall>i<length l.\n                                   rep_of l' i = rep_of l i))>", "apply (sep_auto simp: rep_of_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n  <\\<lambda>_.\n      \\<exists>\\<^sub>Al'.\n         p \\<mapsto>\\<^sub>a l' *\n         \\<up>\n          (ufa_invar l' \\<and>\n           length l' = length l \\<and>\n           (\\<forall>i<length l. rep_of l' i = rep_of l i))>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        ci = rep_of l (l ! i) \\<Longrightarrow>\n        <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n        <\\<lambda>_.\n            \\<exists>\\<^sub>Al'.\n               p \\<mapsto>\\<^sub>a l' *\n               \\<up>\n                (ufa_invar l' \\<and>\n                 length l' = length l \\<and>\n                 (\\<forall>i<length l. rep_of l' i = rep_of l i))>;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        ci = rep_of l (l ! i) \\<Longrightarrow>\n        <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n        <\\<lambda>_.\n            \\<exists>\\<^sub>Al'.\n               p \\<mapsto>\\<^sub>a l' *\n               \\<up>\n                (ufa_invar l' \\<and>\n                 length l' = length l \\<and>\n                 (\\<forall>i<length l. rep_of l' i = rep_of l i))>;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>", "case (step i)"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  ci = rep_of l (l ! i) \\<Longrightarrow>\n  <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n  <\\<lambda>_.\n      \\<exists>\\<^sub>Al'.\n         p \\<mapsto>\\<^sub>a l' *\n         \\<up>\n          (ufa_invar l' \\<and>\n           length l' = length l \\<and>\n           (\\<forall>i<length l. rep_of l' i = rep_of l i))>\n  ci = rep_of l i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        ci = rep_of l (l ! i) \\<Longrightarrow>\n        <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n        <\\<lambda>_.\n            \\<exists>\\<^sub>Al'.\n               p \\<mapsto>\\<^sub>a l' *\n               \\<up>\n                (ufa_invar l' \\<and>\n                 length l' = length l \\<and>\n                 (\\<forall>i<length l. rep_of l' i = rep_of l i))>;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>", "note SS = \\<open>ufa_invar l\\<close> \\<open>i<length l\\<close> \\<open>l!i\\<noteq>i\\<close> \\<open>ci = rep_of l i\\<close>"], ["proof (state)\nthis:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  ci = rep_of l i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        ci = rep_of l (l ! i) \\<Longrightarrow>\n        <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n        <\\<lambda>_.\n            \\<exists>\\<^sub>Al'.\n               p \\<mapsto>\\<^sub>a l' *\n               \\<up>\n                (ufa_invar l' \\<and>\n                 length l' = length l \\<and>\n                 (\\<forall>i<length l. rep_of l' i = rep_of l i))>;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>", "from step.IH"], ["proof (chain)\npicking this:\n  ci = rep_of l (l ! i) \\<Longrightarrow>\n  <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n  <\\<lambda>_.\n      \\<exists>\\<^sub>Al'.\n         p \\<mapsto>\\<^sub>a l' *\n         \\<up>\n          (ufa_invar l' \\<and>\n           length l' = length l \\<and>\n           (\\<forall>i<length l. rep_of l' i = rep_of l i))>", "have IH': \n    \"<p \\<mapsto>\\<^sub>a l> \n       uf_compress (l ! i) (rep_of l i) p\n     <\\<lambda>_. \\<exists>\\<^sub>Al'. p \\<mapsto>\\<^sub>a l' * \n        \\<up> (ufa_invar l' \\<and> length l = length l' \n           \\<and> (\\<forall>i<length l'. rep_of l i = rep_of l' i))\n     >\""], ["proof (prove)\nusing this:\n  ci = rep_of l (l ! i) \\<Longrightarrow>\n  <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n  <\\<lambda>_.\n      \\<exists>\\<^sub>Al'.\n         p \\<mapsto>\\<^sub>a l' *\n         \\<up>\n          (ufa_invar l' \\<and>\n           length l' = length l \\<and>\n           (\\<forall>i<length l. rep_of l' i = rep_of l i))>\n\ngoal (1 subgoal):\n 1. <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) (rep_of l i) p\n    <\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l = length l' \\<and>\n             (\\<forall>i<length l'. rep_of l i = rep_of l' i))>", "apply (simp add: rep_of_idx SS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) (rep_of l i) p\n    <\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l' = length l \\<and>\n             (\\<forall>i<length l.\n                 rep_of l' i = rep_of l i))> \\<Longrightarrow>\n    <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) (rep_of l i) p\n    <\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l = length l' \\<and>\n             (\\<forall>i<length l'. rep_of l i = rep_of l' i))>", "apply (erule \n      back_subst[OF _ cong[OF cong[OF arg_cong[where f=hoare_triple]]]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. p \\<mapsto>\\<^sub>a l = p \\<mapsto>\\<^sub>a l\n 2. uf_compress (l ! i) (rep_of l i) p = uf_compress (l ! i) (rep_of l i) p\n 3. (\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l' = length l \\<and>\n             (\\<forall>i<length l. rep_of l' i = rep_of l i))) =\n    (\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l = length l' \\<and>\n             (\\<forall>i<length l'. rep_of l i = rep_of l' i)))", "apply (auto) [2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l' = length l \\<and>\n             (\\<forall>i<length l. rep_of l' i = rep_of l i))) =\n    (\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l = length l' \\<and>\n             (\\<forall>i<length l'. rep_of l i = rep_of l' i)))", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>_.\n       (\\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l' = length l \\<and>\n             (\\<forall>i<length l. rep_of l' i = rep_of l i))) =\n       (\\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l = length l' \\<and>\n             (\\<forall>i<length l'. rep_of l i = rep_of l' i)))", "apply (rule ent_iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>_.\n       \\<exists>\\<^sub>Al'.\n          p \\<mapsto>\\<^sub>a l' *\n          \\<up>\n           (ufa_invar l' \\<and>\n            length l' = length l \\<and>\n            (\\<forall>i<length l.\n                rep_of l' i = rep_of l i)) \\<Longrightarrow>\\<^sub>A\n       \\<exists>\\<^sub>Al'.\n          p \\<mapsto>\\<^sub>a l' *\n          \\<up>\n           (ufa_invar l' \\<and>\n            length l = length l' \\<and>\n            (\\<forall>i<length l'. rep_of l i = rep_of l' i))\n 2. \\<And>_.\n       \\<exists>\\<^sub>Al'.\n          p \\<mapsto>\\<^sub>a l' *\n          \\<up>\n           (ufa_invar l' \\<and>\n            length l = length l' \\<and>\n            (\\<forall>i<length l'.\n                rep_of l i = rep_of l' i)) \\<Longrightarrow>\\<^sub>A\n       \\<exists>\\<^sub>Al'.\n          p \\<mapsto>\\<^sub>a l' *\n          \\<up>\n           (ufa_invar l' \\<and>\n            length l' = length l \\<and>\n            (\\<forall>i<length l. rep_of l' i = rep_of l i))", "apply sep_auto+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) (rep_of l i) p\n  <\\<lambda>_.\n      \\<exists>\\<^sub>Al'.\n         p \\<mapsto>\\<^sub>a l' *\n         \\<up>\n          (ufa_invar l' \\<and>\n           length l = length l' \\<and>\n           (\\<forall>i<length l'. rep_of l i = rep_of l' i))>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>ufa_invar l; i < length l; l ! i \\<noteq> i;\n        ci = rep_of l (l ! i) \\<Longrightarrow>\n        <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) ci p\n        <\\<lambda>_.\n            \\<exists>\\<^sub>Al'.\n               p \\<mapsto>\\<^sub>a l' *\n               \\<up>\n                (ufa_invar l' \\<and>\n                 length l' = length l \\<and>\n                 (\\<forall>i<length l. rep_of l' i = rep_of l i))>;\n        ci = rep_of l i\\<rbrakk>\n       \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n                         <\\<lambda>_.\n                             \\<exists>\\<^sub>Al'.\n                                p \\<mapsto>\\<^sub>a l' *\n                                \\<up>\n                                 (ufa_invar l' \\<and>\n                                  length l' = length l \\<and>\n                                  (\\<forall>i<length l.\nrep_of l' i = rep_of l i))>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n    <\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l' = length l \\<and>\n             (\\<forall>i<length l. rep_of l' i = rep_of l i))>", "apply (subst uf_compress.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. <p \\<mapsto>\\<^sub>a l>\n    if i = ci then return ()\n    else Array.nth p i \\<bind>\n         (\\<lambda>ni.\n             uf_compress ni ci p \\<bind>\n             (\\<lambda>_. Array.upd i ci p \\<bind> (\\<lambda>_. return ())))\n    <\\<lambda>_.\n        \\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l' = length l \\<and>\n             (\\<forall>i<length l. rep_of l' i = rep_of l i))>", "apply (sep_auto simp: SS)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i \\<noteq> rep_of l i \\<Longrightarrow>\n    <p \\<mapsto>\\<^sub>a l> uf_compress (l ! i) (rep_of l i) p <?R30>\n 2. \\<And>x.\n       i \\<noteq> rep_of l i \\<Longrightarrow>\n       <?R30 x> Array.upd i (rep_of l i) p \\<bind> (\\<lambda>_. return ())\n       <\\<lambda>_.\n           \\<exists>\\<^sub>Al'.\n              p \\<mapsto>\\<^sub>a l' *\n              \\<up>\n               (ufa_invar l' \\<and>\n                length l' = length l \\<and>\n                (\\<forall>i<length l. rep_of l' i = rep_of l i))>", "apply (rule IH')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       i \\<noteq> rep_of l i \\<Longrightarrow>\n       <\\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l = length l' \\<and>\n             (\\<forall>i<length l'. rep_of l i = rep_of l' i))>\n       Array.upd i (rep_of l i) p \\<bind> (\\<lambda>_. return ())\n       <\\<lambda>_.\n           \\<exists>\\<^sub>Al'.\n              p \\<mapsto>\\<^sub>a l' *\n              \\<up>\n               (ufa_invar l' \\<and>\n                length l' = length l \\<and>\n                (\\<forall>i<length l. rep_of l' i = rep_of l i))>", "using SS"], ["proof (prove)\nusing this:\n  ufa_invar l\n  i < length l\n  l ! i \\<noteq> i\n  ci = rep_of l i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       i \\<noteq> rep_of l i \\<Longrightarrow>\n       <\\<exists>\\<^sub>Al'.\n           p \\<mapsto>\\<^sub>a l' *\n           \\<up>\n            (ufa_invar l' \\<and>\n             length l = length l' \\<and>\n             (\\<forall>i<length l'. rep_of l i = rep_of l' i))>\n       Array.upd i (rep_of l i) p \\<bind> (\\<lambda>_. return ())\n       <\\<lambda>_.\n           \\<exists>\\<^sub>Al'.\n              p \\<mapsto>\\<^sub>a l' *\n              \\<up>\n               (ufa_invar l' \\<and>\n                length l' = length l \\<and>\n                (\\<forall>i<length l. rep_of l' i = rep_of l i))>", "apply (sep_auto (plain))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> ufa_invar (l'[i := rep_of l' i])\n 2. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> length (l'[i := rep_of l' i]) = length l'\n 3. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length l'.\n                            rep_of (l'[i := rep_of l' i]) i = rep_of l' i", "using ufa_compress_invar"], ["proof (prove)\nusing this:\n  \\<lbrakk>ufa_invar ?l; ?x < length ?l\\<rbrakk>\n  \\<Longrightarrow> ufa_invar (?l[?x := rep_of ?l ?x])\n\ngoal (3 subgoals):\n 1. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> ufa_invar (l'[i := rep_of l' i])\n 2. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> length (l'[i := rep_of l' i]) = length l'\n 3. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length l'.\n                            rep_of (l'[i := rep_of l' i]) i = rep_of l' i", "apply fastforce []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> length (l'[i := rep_of l' i]) = length l'\n 2. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length l'.\n                            rep_of (l'[i := rep_of l' i]) i = rep_of l' i", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length l'.\n                            rep_of (l'[i := rep_of l' i]) i = rep_of l' i", "using ufa_compress_aux(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>ufa_invar ?l; ?x < length ?l\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<length ?l.\n                       rep_of (?l[?x := rep_of ?l ?x]) i = rep_of ?l i\n\ngoal (1 subgoal):\n 1. \\<And>l' x xa.\n       \\<lbrakk>i \\<noteq> rep_of l' i; ufa_invar l; i < length l';\n        l ! i \\<noteq> i; ci = rep_of l' i;\n        ufa_invar l' \\<and>\n        length l = length l' \\<and>\n        (\\<forall>i<length l'. rep_of l i = rep_of l' i);\n        x = p;\n        \\<exists>h.\n           h \\<Turnstile>\n           p \\<mapsto>\\<^sub>a l'[i := rep_of l' i] *\n           \\<up> (xa = ())\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length l'.\n                            rep_of (l'[i := rep_of l' i]) i = rep_of l' i", "apply fastforce []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  <p \\<mapsto>\\<^sub>a l> uf_compress i ci p\n  <\\<lambda>_.\n      \\<exists>\\<^sub>Al'.\n         p \\<mapsto>\\<^sub>a l' *\n         \\<up>\n          (ufa_invar l' \\<and>\n           length l' = length l \\<and>\n           (\\<forall>i<length l. rep_of l' i = rep_of l i))>\n\ngoal:\nNo subgoals!", "qed"], ["", "definition uf_rep_of_c :: \"nat array \\<Rightarrow> nat \\<Rightarrow> nat Heap\"\n  where \"uf_rep_of_c p i \\<equiv> do {\n    ci\\<leftarrow>uf_rep_of p i;\n    uf_compress i ci p;\n    return ci\n  }\""], ["", "lemma uf_rep_of_c_rule[sep_heap_rules]: \"\\<lbrakk>ufa_invar l; i<length l\\<rbrakk> \\<Longrightarrow>\n  <p\\<mapsto>\\<^sub>al> uf_rep_of_c p i <\\<lambda>r. \\<exists>\\<^sub>Al'. p\\<mapsto>\\<^sub>al' \n    * \\<up>(r=rep_of l i \\<and> ufa_invar l'\n       \\<and> length l' = length l \n       \\<and> (\\<forall>i<length l. rep_of l' i = rep_of l i))>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l> uf_rep_of_c p i\n                      <\\<lambda>r.\n                          \\<exists>\\<^sub>Al'.\n                             p \\<mapsto>\\<^sub>a l' *\n                             \\<up>\n                              (r = rep_of l i \\<and>\n                               ufa_invar l' \\<and>\n                               length l' = length l \\<and>\n                               (\\<forall>i<length l.\n                                   rep_of l' i = rep_of l i))>", "unfolding uf_rep_of_c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ufa_invar l; i < length l\\<rbrakk>\n    \\<Longrightarrow> <p \\<mapsto>\\<^sub>a l>\n                      uf_rep_of p i \\<bind>\n                      (\\<lambda>ci.\n                          uf_compress i ci p \\<bind>\n                          (\\<lambda>_. return ci))\n                      <\\<lambda>r.\n                          \\<exists>\\<^sub>Al'.\n                             p \\<mapsto>\\<^sub>a l' *\n                             \\<up>\n                              (r = rep_of l i \\<and>\n                               ufa_invar l' \\<and>\n                               length l' = length l \\<and>\n                               (\\<forall>i<length l.\n                                   rep_of l' i = rep_of l i))>", "by (sep_auto heap: uf_compress_rule)"], ["", "definition uf_cmp :: \"uf \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool Heap\" where \n  \"uf_cmp u i j \\<equiv> do {\n    let (s,p)=u;\n    n\\<leftarrow>Array.len p;\n    if (i\\<ge>n \\<or> j\\<ge>n) then return False\n    else do {\n      ci\\<leftarrow>uf_rep_of_c p i;\n      cj\\<leftarrow>uf_rep_of_c p j;\n      return (ci=cj)\n    }\n  }\""], ["", "lemma cnv_to_ufa_\\<alpha>_eq: \n  \"\\<lbrakk>(\\<forall>i<length l. rep_of l' i = rep_of l i); length l = length l'\\<rbrakk> \n  \\<Longrightarrow> (ufa_\\<alpha> l = ufa_\\<alpha> l')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<length l. rep_of l' i = rep_of l i;\n     length l = length l'\\<rbrakk>\n    \\<Longrightarrow> ufa_\\<alpha> l = ufa_\\<alpha> l'", "unfolding ufa_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<length l. rep_of l' i = rep_of l i;\n     length l = length l'\\<rbrakk>\n    \\<Longrightarrow> {(x, y).\n                       x < length l \\<and>\n                       y < length l \\<and> rep_of l x = rep_of l y} =\n                      {(x, y).\n                       x < length l' \\<and>\n                       y < length l' \\<and> rep_of l' x = rep_of l' y}", "by auto"], ["", "lemma uf_cmp_rule[sep_heap_rules]:\n  \"<is_uf R u> uf_cmp u i j <\\<lambda>r. is_uf R u * \\<up>(r\\<longleftrightarrow>(i,j)\\<in>R)>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <is_uf R u> uf_cmp u i j\n    <\\<lambda>r. is_uf R u * \\<up> (r = ((i, j) \\<in> R))>", "unfolding uf_cmp_def is_uf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. <case u of\n     (s, p) \\<Rightarrow>\n       \\<exists>\\<^sub>Al szl.\n          p \\<mapsto>\\<^sub>a l * s \\<mapsto>\\<^sub>a szl *\n          \\<up>\n           (ufa_invar l \\<and>\n            ufa_\\<alpha> l = R \\<and> length szl = length l)>\n    let (s, p) = u\n    in Array.len p \\<bind>\n       (\\<lambda>n.\n           if n \\<le> i \\<or> n \\<le> j then return False\n           else uf_rep_of_c p i \\<bind>\n                (\\<lambda>ci.\n                    uf_rep_of_c p j \\<bind>\n                    (\\<lambda>cj. return (ci = cj))))\n    <\\<lambda>r.\n        (case u of\n         (s, p) \\<Rightarrow>\n           \\<exists>\\<^sub>Al szl.\n              p \\<mapsto>\\<^sub>a l * s \\<mapsto>\\<^sub>a szl *\n              \\<up>\n               (ufa_invar l \\<and>\n                ufa_\\<alpha> l = R \\<and> length szl = length l)) *\n        \\<up> (r = ((i, j) \\<in> R))>", "apply (sep_auto dest: ufa_\\<alpha>_lenD simp: not_le split: prod.split)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 l szl l' l'a a b aa ba.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        (a, b) \\<Turnstile>\n        x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        (aa, ba) \\<in> ufa_\\<alpha> l'a\\<rbrakk>\n       \\<Longrightarrow> (aa, ba) \\<in> ufa_\\<alpha> l\n 2. \\<And>x1 x2 l szl l' l'a a b aa ba.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        (a, b) \\<Turnstile>\n        x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        (aa, ba) \\<in> ufa_\\<alpha> l\\<rbrakk>\n       \\<Longrightarrow> (aa, ba) \\<in> ufa_\\<alpha> l'a\n 3. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        \\<exists>h.\n           h \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl\\<rbrakk>\n       \\<Longrightarrow> (rep_of l i = rep_of l j) =\n                         ((i, j) \\<in> ufa_\\<alpha> l)", "apply (drule cnv_to_ufa_\\<alpha>_eq, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 l szl l' l'a a b aa ba.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l'; ufa_invar l';\n        ufa_invar l'a; length l' = length l; length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        (a, b) \\<Turnstile>\n        x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        (aa, ba) \\<in> ufa_\\<alpha> l'a;\n        ufa_\\<alpha> l = ufa_\\<alpha> l'\\<rbrakk>\n       \\<Longrightarrow> (aa, ba) \\<in> ufa_\\<alpha> l'\n 2. \\<And>x1 x2 l szl l' l'a a b aa ba.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        (a, b) \\<Turnstile>\n        x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        (aa, ba) \\<in> ufa_\\<alpha> l\\<rbrakk>\n       \\<Longrightarrow> (aa, ba) \\<in> ufa_\\<alpha> l'a\n 3. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl\\<rbrakk>\n       \\<Longrightarrow> (rep_of l i = rep_of l j) =\n                         ((i, j) \\<in> ufa_\\<alpha> l)", "apply (drule cnv_to_ufa_\\<alpha>_eq, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 l szl l' l'a a b aa ba.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        (a, b) \\<Turnstile>\n        x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        (aa, ba) \\<in> ufa_\\<alpha> l\\<rbrakk>\n       \\<Longrightarrow> (aa, ba) \\<in> ufa_\\<alpha> l'a\n 2. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl\\<rbrakk>\n       \\<Longrightarrow> (rep_of l i = rep_of l j) =\n                         ((i, j) \\<in> ufa_\\<alpha> l)", "apply (drule cnv_to_ufa_\\<alpha>_eq, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 l szl l' l'a a b aa ba.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l'; ufa_invar l';\n        ufa_invar l'a; length l' = length l; length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        (a, b) \\<Turnstile>\n        x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        (aa, ba) \\<in> ufa_\\<alpha> l';\n        ufa_\\<alpha> l = ufa_\\<alpha> l'\\<rbrakk>\n       \\<Longrightarrow> (aa, ba) \\<in> ufa_\\<alpha> l'a\n 2. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl\\<rbrakk>\n       \\<Longrightarrow> (rep_of l i = rep_of l j) =\n                         ((i, j) \\<in> ufa_\\<alpha> l)", "apply (drule cnv_to_ufa_\\<alpha>_eq, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l; ufa_invar l';\n        ufa_invar l'a; length l' = length l;\n        \\<forall>i<length l. rep_of l' i = rep_of l i;\n        length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl\\<rbrakk>\n       \\<Longrightarrow> (rep_of l i = rep_of l j) =\n                         ((i, j) \\<in> ufa_\\<alpha> l)", "apply (drule cnv_to_ufa_\\<alpha>_eq, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l'; ufa_invar l';\n        ufa_invar l'a; length l' = length l; length l'a = length l;\n        \\<forall>i<length l. rep_of l'a i = rep_of l i;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        ufa_\\<alpha> l = ufa_\\<alpha> l'\\<rbrakk>\n       \\<Longrightarrow> (rep_of l i = rep_of l j) =\n                         ((i, j) \\<in> ufa_\\<alpha> l')", "apply (drule cnv_to_ufa_\\<alpha>_eq, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l'; ufa_invar l';\n        ufa_invar l'a; length l' = length l; length l'a = length l;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        ufa_\\<alpha> l'a = ufa_\\<alpha> l';\n        ufa_\\<alpha> l = ufa_\\<alpha> l'\\<rbrakk>\n       \\<Longrightarrow> (rep_of l i = rep_of l j) =\n                         ((i, j) \\<in> ufa_\\<alpha> l')", "apply (subst ufa_find_correct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l'; ufa_invar l';\n        ufa_invar l'a; length l' = length l; length l'a = length l;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        ufa_\\<alpha> l'a = ufa_\\<alpha> l';\n        ufa_\\<alpha> l = ufa_\\<alpha> l'\\<rbrakk>\n       \\<Longrightarrow> ufa_invar l\n 2. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l'; ufa_invar l';\n        ufa_invar l'a; length l' = length l; length l'a = length l;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        ufa_\\<alpha> l'a = ufa_\\<alpha> l';\n        ufa_\\<alpha> l = ufa_\\<alpha> l'\\<rbrakk>\n       \\<Longrightarrow> i < length l\n 3. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l'; ufa_invar l';\n        ufa_invar l'a; length l' = length l; length l'a = length l;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        ufa_\\<alpha> l'a = ufa_\\<alpha> l';\n        ufa_\\<alpha> l = ufa_\\<alpha> l'\\<rbrakk>\n       \\<Longrightarrow> j < length l\n 4. \\<And>x1 x2 l szl l' l'a.\n       \\<lbrakk>u = (x1, x2); ufa_invar l; i < length l; j < length l;\n        length szl = length l; R = ufa_\\<alpha> l'; ufa_invar l';\n        ufa_invar l'a; length l' = length l; length l'a = length l;\n        \\<exists>a b.\n           (a, b) \\<Turnstile>\n           x2 \\<mapsto>\\<^sub>a l'a * x1 \\<mapsto>\\<^sub>a szl;\n        ufa_\\<alpha> l'a = ufa_\\<alpha> l';\n        ufa_\\<alpha> l = ufa_\\<alpha> l'\\<rbrakk>\n       \\<Longrightarrow> ((i, j) \\<in> ufa_\\<alpha> l) =\n                         ((i, j) \\<in> ufa_\\<alpha> l')", "apply (auto simp add: )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition uf_union :: \"uf \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> uf Heap\" where \n  \"uf_union u i j \\<equiv> do {\n    let (s,p)=u;\n    ci \\<leftarrow> uf_rep_of p i;\n    cj \\<leftarrow> uf_rep_of p j;\n    if (ci=cj) then return (s,p) \n    else do {\n      si \\<leftarrow> Array.nth s ci;\n      sj \\<leftarrow> Array.nth s cj;\n      if si<sj then do {\n        Array.upd ci cj p;\n        Array.upd cj (si+sj) s;\n        return (s,p)\n      } else do { \n        Array.upd cj ci p;\n        Array.upd ci (si+sj) s;\n        return (s,p)\n      }\n    }\n  }\""], ["", "lemma uf_union_rule[sep_heap_rules]: \"\\<lbrakk>i\\<in>Domain R; j\\<in> Domain R\\<rbrakk> \n  \\<Longrightarrow> <is_uf R u> uf_union u i j <is_uf (per_union R i j)>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> Domain R; j \\<in> Domain R\\<rbrakk>\n    \\<Longrightarrow> <is_uf R u> uf_union u i j <is_uf (per_union R i j)>", "unfolding uf_union_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> Domain R; j \\<in> Domain R\\<rbrakk>\n    \\<Longrightarrow> <is_uf R u>\n                      let (s, p) = u\n                      in uf_rep_of p i \\<bind>\n                         (\\<lambda>ci.\n                             uf_rep_of p j \\<bind>\n                             (\\<lambda>cj.\n                                 if ci = cj then return (s, p)\n                                 else Array.nth s ci \\<bind>\n(\\<lambda>si.\n    Array.nth s cj \\<bind>\n    (\\<lambda>sj.\n        if si < sj\n        then Array.upd ci cj p \\<bind>\n             (\\<lambda>_.\n                 Array.upd cj (si + sj) s \\<bind>\n                 (\\<lambda>_. return (s, p)))\n        else Array.upd cj ci p \\<bind>\n             (\\<lambda>_.\n                 Array.upd ci (si + sj) s \\<bind>\n                 (\\<lambda>_. return (s, p)))))))\n                      <is_uf (per_union R i j)>", "apply (cases u)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>i \\<in> Domain R; j \\<in> Domain R; u = (a, b)\\<rbrakk>\n       \\<Longrightarrow> <is_uf R u>\n                         let (s, p) = u\n                         in uf_rep_of p i \\<bind>\n                            (\\<lambda>ci.\n                                uf_rep_of p j \\<bind>\n                                (\\<lambda>cj.\n                                    if ci = cj then return (s, p)\n                                    else Array.nth s ci \\<bind>\n   (\\<lambda>si.\n       Array.nth s cj \\<bind>\n       (\\<lambda>sj.\n           if si < sj\n           then Array.upd ci cj p \\<bind>\n                (\\<lambda>_.\n                    Array.upd cj (si + sj) s \\<bind>\n                    (\\<lambda>_. return (s, p)))\n           else Array.upd cj ci p \\<bind>\n                (\\<lambda>_.\n                    Array.upd ci (si + sj) s \\<bind>\n                    (\\<lambda>_. return (s, p)))))))\n                         <is_uf (per_union R i j)>", "apply (simp add: is_uf_def[abs_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>i \\<in> Domain R; j \\<in> Domain R; u = (a, b)\\<rbrakk>\n       \\<Longrightarrow> <\\<exists>\\<^sub>Al szl.\n                             b \\<mapsto>\\<^sub>a l *\n                             a \\<mapsto>\\<^sub>a szl *\n                             \\<up>\n                              (ufa_invar l \\<and>\n                               ufa_\\<alpha> l = R \\<and>\n                               length szl = length l)>\n                         uf_rep_of b i \\<bind>\n                         (\\<lambda>ci.\n                             uf_rep_of b j \\<bind>\n                             (\\<lambda>cj.\n                                 if ci = cj then return (a, b)\n                                 else Array.nth a ci \\<bind>\n(\\<lambda>si.\n    Array.nth a cj \\<bind>\n    (\\<lambda>sj.\n        if si < sj\n        then Array.upd ci cj b \\<bind>\n             (\\<lambda>_.\n                 Array.upd cj (si + sj) a \\<bind>\n                 (\\<lambda>_. return (a, b)))\n        else Array.upd cj ci b \\<bind>\n             (\\<lambda>_.\n                 Array.upd ci (si + sj) a \\<bind>\n                 (\\<lambda>_. return (a, b)))))))\n                         <\\<lambda>(s, p).\n                             \\<exists>\\<^sub>Al szl.\n                                p \\<mapsto>\\<^sub>a l *\n                                s \\<mapsto>\\<^sub>a szl *\n                                \\<up>\n                                 (ufa_invar l \\<and>\n                                  ufa_\\<alpha> l = per_union R i j \\<and>\n                                  length szl = length l)>", "apply (sep_auto \n    simp: per_union_cmp ufa_\\<alpha>_lenD ufa_find_correct\n    rep_of_bound\n    ufa_union_invar\n    ufa_union_correct\n  )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "export_code uf_init uf_cmp uf_union checking SML_imp"], ["", "export_code uf_init uf_cmp uf_union checking Scala_imp"], ["", "(*\nML_val {*\n  val u = @{code uf_init} 10 ();\n\n  val u = @{code uf_union} u 1 2 ();\n  val u = @{code uf_union} u 3 4 ();\n  val u = @{code uf_union} u 5 6 ();\n  val u = @{code uf_union} u 7 8 ();\n\n  val u = @{code uf_union} u 1 3 ();\n  val u = @{code uf_union} u 5 7 ();\n\n  val u = @{code uf_union} u 1 5 ();\n\n  val b = @{code uf_cmp} u 8 4 ();\n  val it = u;\n*}*)"], ["", "end"]]}