{"file_name": "/home/qj213/afp-2021-10-22/thys/Separation_Logic_Imperative_HOL/Run.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Separation_Logic_Imperative_HOL", "problem_names": ["lemma run_effectE: \n  assumes \"run c \\<sigma> \\<sigma>' r\"\n  assumes \"\\<not>is_exn \\<sigma>'\"\n  obtains h h' where\n    \"\\<sigma>=Some h\" \"\\<sigma>' = Some h'\"\n    \"effect c h h' r\"", "lemma run_effectI: \n  assumes  \"run c (Some h) (Some h') r\"\n  shows  \"effect c h h' r\"", "lemma effect_run:\n  assumes \"effect c h h' r\"\n  shows \"run c (Some h) (Some h') r\"", "lemma success_run:\n  assumes \"success f h\"\n  obtains h' r where \"run f (Some h) (Some h') r\"", "lemma run_complete:\n  obtains \\<sigma>' r where \"run c \\<sigma> \\<sigma>' r\"", "lemma run_detE:\n  assumes \"run c \\<sigma> \\<sigma>' r\" \"run c \\<sigma> \\<tau> s\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"is_exn \\<sigma>'\" \"\\<sigma>' = \\<tau>\" | \"\\<not> is_exn \\<sigma>'\" \"\\<sigma>' = \\<tau>\" \"r = s\"", "lemma run_detI:\n  assumes \"run c (Some h) (Some h') r\" \"run c (Some h) \\<sigma> s\"\n  shows \"\\<sigma> = Some h' \\<and> r = s\"", "lemma run_exn: \n  assumes \"run f \\<sigma> \\<sigma>' r\"\n          \"is_exn \\<sigma>\"\n  obtains \"\\<sigma>'=\\<sigma>\"", "lemma runE[run_elims]:\n  assumes \"run (f \\<bind> g) \\<sigma> \\<sigma>'' r\"\n  obtains \\<sigma>' r' where \n    \"run f \\<sigma> \\<sigma>' r'\"\n    \"run (g r') \\<sigma>' \\<sigma>'' r\"", "lemma runE'[run_elims]:\n  assumes \"run (f \\<then> g) \\<sigma> \\<sigma>'' res\"\n  obtains \\<sigma>t rt where \n    \"run f \\<sigma> \\<sigma>t rt\"\n    \"run g \\<sigma>t \\<sigma>'' res\"", "lemma run_return[run_elims]:\n  assumes \"run (return x) \\<sigma> \\<sigma>' r\"\n  obtains \"r = x\" \"\\<sigma>' = \\<sigma>\" \"\\<not> is_exn \\<sigma>\" | \"\\<sigma> = None\"", "lemma run_raise_iff: \"run (raise s) \\<sigma> \\<sigma>' r \\<longleftrightarrow> (\\<sigma>'=None)\"", "lemma run_raise[run_elims]:\n  assumes \"run (raise s) \\<sigma> \\<sigma>' r\"\n  obtains \"\\<sigma>' = None\"", "lemma run_raiseI:\n  \"run (raise s) \\<sigma> None r\"", "lemma run_if[run_elims]:\n  assumes \"run (if c then t else e) h h' r\"\n  obtains \"c\" \"run t h h' r\"\n        | \"\\<not>c\" \"run e h h' r\"", "lemma run_case_option[run_elims]:\n  assumes \"run (case x of None \\<Rightarrow> n | Some y \\<Rightarrow> s y) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"x = None\" \"run n \\<sigma> \\<sigma>' r\"\n        | y where \"x = Some y\" \"run (s y) \\<sigma> \\<sigma>' r\"", "lemma run_heap[run_elims]:\n  assumes \"run (Heap_Monad.heap f) \\<sigma> \\<sigma>' res\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (f (the_state \\<sigma>)))\" \n  and \"res = (fst (f (the_state \\<sigma>)))\"", "lemma run_length[run_elims]:\n  assumes \"run (Array.len a) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<not>is_exn \\<sigma>\" \"\\<sigma>' = \\<sigma>\" \"r = Array.length (the_state \\<sigma>) a\"", "lemma run_new_array[run_elims]:\n  assumes \"run (Array.new n x) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (Array.alloc (replicate n x) (the_state \\<sigma>)))\"\n  and \"r = fst (Array.alloc (replicate n x) (the_state \\<sigma>))\"\n  and \"Array.get (the_state \\<sigma>') r = replicate n x\"", "lemma run_make[run_elims]:\n  assumes \"run (Array.make n f) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (Array.alloc (map f [0 ..< n]) (the_state \\<sigma>)))\"\n          \"r = fst (Array.alloc (map f [0 ..< n]) (the_state \\<sigma>))\"\n          \"Array.get (the_state \\<sigma>') r = (map f [0 ..< n])\"", "lemma run_upd[run_elims]:\n  assumes \"run (Array.upd i x a) \\<sigma> \\<sigma>' res\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<not> i < Array.length (the_state \\<sigma>) a\" \n          \"\\<sigma>' = None\" \n  |\n          \"i < Array.length (the_state \\<sigma>) a\" \n          \"\\<sigma>' = Some (Array.update a i x (the_state \\<sigma>))\" \n          \"res = a\"", "lemma run_nth[run_elims]:\n  assumes \"run (Array.nth a i) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<not>is_exn \\<sigma>\" \n    \"i < Array.length (the_state \\<sigma>) a\" \n    \"r = (Array.get (the_state \\<sigma>) a) ! i\" \n    \"\\<sigma>' = \\<sigma>\" \n  | \n    \"\\<not> i < Array.length (the_state \\<sigma>) a\" \n    \"\\<sigma>' = None\"", "lemma run_of_list[run_elims]:\n  assumes \"run (Array.of_list xs) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (Array.alloc xs (the_state \\<sigma>)))\"\n          \"r = fst (Array.alloc xs (the_state \\<sigma>))\"\n          \"Array.get (the_state \\<sigma>') r = xs\"", "lemma run_freeze[run_elims]:\n  assumes \"run (Array.freeze a) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = \\<sigma>\"\n          \"r = Array.get (the_state \\<sigma>) a\"", "lemma run_new_ref[run_elims]:\n  assumes \"run (ref x) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (Ref.alloc x (the_state \\<sigma>)))\"\n          \"r = fst (Ref.alloc x (the_state \\<sigma>))\"\n          \"Ref.get (the_state \\<sigma>') r = x\"", "lemma \"fst (Ref.alloc x h) = Ref (lim h)\"", "lemma run_update[run_elims]:\n  assumes \"run (p := x) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (Ref.set p x (the_state \\<sigma>))\" \"r = ()\"", "lemma run_lookup[run_elims]:\n  assumes \"run (!p) \\<sigma> \\<sigma>' r\"\n          \"\\<not> is_exn \\<sigma>\"\n  obtains \"\\<not>is_exn \\<sigma>\" \"\\<sigma>' = \\<sigma>\" \"r = Ref.get (the_state \\<sigma>) p\""], "translations": [["", "lemma run_effectE: \n  assumes \"run c \\<sigma> \\<sigma>' r\"\n  assumes \"\\<not>is_exn \\<sigma>'\"\n  obtains h h' where\n    \"\\<sigma>=Some h\" \"\\<sigma>' = Some h'\"\n    \"effect c h h' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h h'.\n        \\<lbrakk>\\<sigma> = Some h; \\<sigma>' = Some h';\n         effect c h h' r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run c \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>h h'.\n        \\<lbrakk>\\<sigma> = Some h; \\<sigma>' = Some h';\n         effect c h h' r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding effect_def"], ["proof (prove)\nusing this:\n  run c \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>h h'.\n        \\<lbrakk>\\<sigma> = Some h; \\<sigma>' = Some h';\n         execute c h = Some (r, h')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>h h'.\n                \\<lbrakk>\\<sigma> = Some h; \\<sigma>' = Some h';\n                 execute c h = Some (r, h')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     run c \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>';\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>h h'.\n                   \\<lbrakk>\\<sigma> = Some h; \\<sigma>' = Some h';\n                    execute c h = Some (r, h')\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        run c \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>';\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (auto simp add: run.simps)"], ["", "lemma run_effectI: \n  assumes  \"run c (Some h) (Some h') r\"\n  shows  \"effect c h h' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. effect c h h' r", "using run_effectE[OF assms]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> is_exn (Some h');\n   \\<And>ha h'a.\n      \\<lbrakk>Some h = Some ha; Some h' = Some h'a;\n       effect c ha h'a r\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. effect c h h' r", "by auto"], ["", "lemma effect_run:\n  assumes \"effect c h h' r\"\n  shows \"run c (Some h) (Some h') r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run c (Some h) (Some h') r", "using assms"], ["proof (prove)\nusing this:\n  effect c h h' r\n\ngoal (1 subgoal):\n 1. run c (Some h) (Some h') r", "unfolding effect_def"], ["proof (prove)\nusing this:\n  execute c h = Some (r, h')\n\ngoal (1 subgoal):\n 1. run c (Some h) (Some h') r", "by (auto intro: run.intros)"], ["", "lemma success_run:\n  assumes \"success f h\"\n  obtains h' r where \"run f (Some h) (Some h') r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h' r.\n        run f (Some h) (Some h') r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>h' r.\n        run f (Some h) (Some h') r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  success f h", "obtain r h' \n    where \"Heap_Monad.execute f h = Some (r, h')\""], ["proof (prove)\nusing this:\n  success f h\n\ngoal (1 subgoal):\n 1. (\\<And>r h'.\n        execute f h = Some (r, h') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding success_def"], ["proof (prove)\nusing this:\n  execute f h \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>r h'.\n        execute f h = Some (r, h') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  execute f h = Some (r, h')\n\ngoal (1 subgoal):\n 1. (\\<And>h' r.\n        run f (Some h) (Some h') r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  execute f h = Some (r, h')", "show thesis"], ["proof (prove)\nusing this:\n  execute f h = Some (r, h')\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that[OF regular[of \"Some h\", simplified]])"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>run always yields a result\\<close>"], ["", "lemma run_complete:\n  obtains \\<sigma>' r where \"run c \\<sigma> \\<sigma>' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' r.\n        run c \\<sigma> \\<sigma>' r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply (cases \"is_exn \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<sigma>' r.\n                run c \\<sigma> \\<sigma>' r \\<Longrightarrow> thesis;\n     is_exn \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<sigma>' r.\n                run c \\<sigma> \\<sigma>' r \\<Longrightarrow> thesis;\n     \\<not> is_exn \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto intro: run.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<sigma>' r.\n                run c \\<sigma> \\<sigma>' r \\<Longrightarrow> thesis;\n     \\<not> is_exn \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \"execute c (the_state \\<sigma>)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<sigma>' r.\n                run c \\<sigma> \\<sigma>' r \\<Longrightarrow> thesis;\n     \\<not> is_exn \\<sigma>; execute c (the_state \\<sigma>) = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>\\<sigma>' r.\n                   run c \\<sigma> \\<sigma>' r \\<Longrightarrow> thesis;\n        \\<not> is_exn \\<sigma>;\n        execute c (the_state \\<sigma>) = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (auto intro: run.intros)"], ["", "lemma run_detE:\n  assumes \"run c \\<sigma> \\<sigma>' r\" \"run c \\<sigma> \\<tau> s\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"is_exn \\<sigma>'\" \"\\<sigma>' = \\<tau>\" | \"\\<not> is_exn \\<sigma>'\" \"\\<sigma>' = \\<tau>\" \"r = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>is_exn \\<sigma>'; \\<sigma>' = \\<tau>\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> is_exn \\<sigma>'; \\<sigma>' = \\<tau>; r = s\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  run c \\<sigma> \\<sigma>' r\n  run c \\<sigma> \\<tau> s\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>is_exn \\<sigma>'; \\<sigma>' = \\<tau>\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> is_exn \\<sigma>'; \\<sigma>' = \\<tau>; r = s\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (auto simp add: run.simps)"], ["", "lemma run_detI:\n  assumes \"run c (Some h) (Some h') r\" \"run c (Some h) \\<sigma> s\"\n  shows \"\\<sigma> = Some h' \\<and> r = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> = Some h' \\<and> r = s", "using assms"], ["proof (prove)\nusing this:\n  run c (Some h) (Some h') r\n  run c (Some h) \\<sigma> s\n\ngoal (1 subgoal):\n 1. \\<sigma> = Some h' \\<and> r = s", "by (auto simp add: run.simps)"], ["", "lemma run_exn: \n  assumes \"run f \\<sigma> \\<sigma>' r\"\n          \"is_exn \\<sigma>\"\n  obtains \"\\<sigma>'=\\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>' = \\<sigma> \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  run f \\<sigma> \\<sigma>' r\n  is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<sigma>' = \\<sigma> \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma>' = \\<sigma> \\<Longrightarrow> thesis;\n     run f \\<sigma> \\<sigma>' r; is_exn \\<sigma>; \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<sigma>' = \\<sigma> \\<Longrightarrow> thesis;\n        run f \\<sigma> \\<sigma>' r; is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto elim!: run.cases intro: that)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Elimination Rules for Basic Combinators\\<close>"], ["", "named_theorems run_elims \"elemination rules for run\""], ["", "lemma runE[run_elims]:\n  assumes \"run (f \\<bind> g) \\<sigma> \\<sigma>'' r\"\n  obtains \\<sigma>' r' where \n    \"run f \\<sigma> \\<sigma>' r'\"\n    \"run (g r') \\<sigma>' \\<sigma>'' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' r'.\n        \\<lbrakk>run f \\<sigma> \\<sigma>' r';\n         run (g r') \\<sigma>' \\<sigma>'' r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (f \\<bind> g) \\<sigma> \\<sigma>'' r\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' r'.\n        \\<lbrakk>run f \\<sigma> \\<sigma>' r';\n         run (g r') \\<sigma>' \\<sigma>'' r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \"is_exn \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<sigma>' r'.\n                \\<lbrakk>run f \\<sigma> \\<sigma>' r';\n                 run (g r') \\<sigma>' \\<sigma>'' r\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     run (f \\<bind> g) \\<sigma> \\<sigma>'' r; is_exn \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>\\<sigma>' r'.\n                \\<lbrakk>run f \\<sigma> \\<sigma>' r';\n                 run (g r') \\<sigma>' \\<sigma>'' r\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     run (f \\<bind> g) \\<sigma> \\<sigma>'' r;\n     \\<not> is_exn \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (simp add: run.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<sigma>' r'.\n                \\<lbrakk>run f \\<sigma> \\<sigma>' r';\n                 run (g r') \\<sigma>' \\<sigma>'' r\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     run (f \\<bind> g) \\<sigma> \\<sigma>'' r;\n     \\<not> is_exn \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \"execute f (the_state \\<sigma>)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<sigma>' r'.\n                \\<lbrakk>run f \\<sigma> \\<sigma>' r';\n                 run (g r') \\<sigma>' \\<sigma>'' r\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     run (f \\<bind> g) \\<sigma> \\<sigma>'' r; \\<not> is_exn \\<sigma>;\n     execute f (the_state \\<sigma>) = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<And>\\<sigma>' r'.\n                   \\<lbrakk>run f \\<sigma> \\<sigma>' r';\n                    run (g r') \\<sigma>' \\<sigma>'' r\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        run (f \\<bind> g) \\<sigma> \\<sigma>'' r; \\<not> is_exn \\<sigma>;\n        execute f (the_state \\<sigma>) = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: run.simps bind_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>\\<sigma>' r'.\n                   \\<lbrakk>run f \\<sigma> \\<sigma>' r';\n                    run (g r') \\<sigma>' \\<sigma>'' r\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        run (f \\<bind> g) \\<sigma> \\<sigma>'' r; \\<not> is_exn \\<sigma>;\n        execute f (the_state \\<sigma>) = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (auto simp add: bind_def run.simps)"], ["", "lemma runE'[run_elims]:\n  assumes \"run (f \\<then> g) \\<sigma> \\<sigma>'' res\"\n  obtains \\<sigma>t rt where \n    \"run f \\<sigma> \\<sigma>t rt\"\n    \"run g \\<sigma>t \\<sigma>'' res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>t rt.\n        \\<lbrakk>run f \\<sigma> \\<sigma>t rt;\n         run g \\<sigma>t \\<sigma>'' res\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (f \\<bind> (\\<lambda>_. g)) \\<sigma> \\<sigma>'' res\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>t rt.\n        \\<lbrakk>run f \\<sigma> \\<sigma>t rt;\n         run g \\<sigma>t \\<sigma>'' res\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule_tac runE)"], ["", "lemma run_return[run_elims]:\n  assumes \"run (return x) \\<sigma> \\<sigma>' r\"\n  obtains \"r = x\" \"\\<sigma>' = \\<sigma>\" \"\\<not> is_exn \\<sigma>\" | \"\\<sigma> = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>r = x; \\<sigma>' = \\<sigma>;\n              \\<not> is_exn \\<sigma>\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<sigma> = None \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  run (return x) \\<sigma> \\<sigma>' r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>r = x; \\<sigma>' = \\<sigma>;\n              \\<not> is_exn \\<sigma>\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<sigma> = None \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>r = x; \\<sigma>' = \\<sigma>;\n              \\<not> is_exn \\<sigma>\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<sigma> = None \\<Longrightarrow> thesis;\n     run (return x) \\<sigma> \\<sigma>' r; \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<lbrakk>r = x; \\<sigma>' = \\<sigma>;\n                 \\<not> is_exn \\<sigma>\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = None \\<Longrightarrow> thesis;\n        run (return x) \\<sigma> \\<sigma>' r; \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: run.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<lbrakk>r = x; \\<sigma>' = \\<sigma>;\n                 \\<not> is_exn \\<sigma>\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = None \\<Longrightarrow> thesis;\n        run (return x) \\<sigma> \\<sigma>' r; \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (auto simp add: run.simps execute_simps)"], ["", "lemma run_raise_iff: \"run (raise s) \\<sigma> \\<sigma>' r \\<longleftrightarrow> (\\<sigma>'=None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run (raise s) \\<sigma> \\<sigma>' r = (\\<sigma>' = None)", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<sigma> = None \\<Longrightarrow>\n    run (raise s) \\<sigma> \\<sigma>' r = (\\<sigma>' = None)\n 2. \\<And>a.\n       \\<sigma> = Some a \\<Longrightarrow>\n       run (raise s) \\<sigma> \\<sigma>' r = (\\<sigma>' = None)", "by (auto simp add: run.simps execute_simps)"], ["", "lemma run_raise[run_elims]:\n  assumes \"run (raise s) \\<sigma> \\<sigma>' r\"\n  obtains \"\\<sigma>' = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>' = None \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  run (raise s) \\<sigma> \\<sigma>' r\n\ngoal (1 subgoal):\n 1. (\\<sigma>' = None \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (simp add: run_raise_iff)"], ["", "lemma run_raiseI:\n  \"run (raise s) \\<sigma> None r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. run (raise s) \\<sigma> None r", "by (simp add: run_raise_iff)"], ["", "lemma run_if[run_elims]:\n  assumes \"run (if c then t else e) h h' r\"\n  obtains \"c\" \"run t h h' r\"\n        | \"\\<not>c\" \"run e h h' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>c; run t h h' r\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> c; run e h h' r\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  run (if c then t else e) h h' r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>c; run t h h' r\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> c; run e h h' r\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (auto split: if_split_asm)"], ["", "lemma run_case_option[run_elims]:\n  assumes \"run (case x of None \\<Rightarrow> n | Some y \\<Rightarrow> s y) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"x = None\" \"run n \\<sigma> \\<sigma>' r\"\n        | y where \"x = Some y\" \"run (s y) \\<sigma> \\<sigma>' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>x = None; run n \\<sigma> \\<sigma>' r\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>y.\n        \\<lbrakk>x = Some y; run (s y) \\<sigma> \\<sigma>' r\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  run (case x of None \\<Rightarrow> n | Some y \\<Rightarrow> s y) \\<sigma>\n   \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>x = None; run n \\<sigma> \\<sigma>' r\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>y.\n        \\<lbrakk>x = Some y; run (s y) \\<sigma> \\<sigma>' r\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases x) simp_all"], ["", "lemma run_heap[run_elims]:\n  assumes \"run (Heap_Monad.heap f) \\<sigma> \\<sigma>' res\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (f (the_state \\<sigma>)))\" \n  and \"res = (fst (f (the_state \\<sigma>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (snd (f (the_state \\<sigma>)));\n      res = fst (f (the_state \\<sigma>))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (Heap_Monad.heap f) \\<sigma> \\<sigma>' res\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (snd (f (the_state \\<sigma>)));\n      res = fst (f (the_state \\<sigma>))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<sigma>' = Some (snd (f (the_state \\<sigma>)));\n              res = fst (f (the_state \\<sigma>))\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (Heap_Monad.heap f) \\<sigma> \\<sigma>' res; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' = Some (snd (f (the_state \\<sigma>)));\n                 res = fst (f (the_state \\<sigma>))\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Heap_Monad.heap f) \\<sigma> \\<sigma>' res;\n        \\<not> is_exn \\<sigma>; \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' = Some (snd (f (the_state \\<sigma>)));\n                 res = fst (f (the_state \\<sigma>))\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Heap_Monad.heap f) \\<sigma> \\<sigma>' res;\n        \\<not> is_exn \\<sigma>; \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto simp add: run.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<sigma> = Some a; execute (Heap_Monad.heap f) a = None;\n        \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (f a); res = fst (f a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (Heap_Monad.heap f) a = Some (res, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: execute_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (f a); res = fst (f a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (Heap_Monad.heap f) a = Some (res, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp only: execute_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (f a); res = fst (f a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; (Some \\<circ> f) a = Some (res, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (f a); res = fst (f a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        (Some \\<circ> f) a = Some (res, h')\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal premises prems for a h'"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "from prems(2)"], ["proof (chain)\npicking this:\n  (Some \\<circ> f) a = Some (res, h')", "have \"h' = snd (f a)\" \"res = fst (f a)\""], ["proof (prove)\nusing this:\n  (Some \\<circ> f) a = Some (res, h')\n\ngoal (1 subgoal):\n 1. h' = snd (f a) &&& res = fst (f a)", "by simp_all"], ["proof (state)\nthis:\n  h' = snd (f a)\n  res = fst (f a)\n\ngoal (1 subgoal):\n 1. thesis", "from prems(1)[OF this]"], ["proof (chain)\npicking this:\n  thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Array Commands\\<close>"], ["", "lemma run_length[run_elims]:\n  assumes \"run (Array.len a) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<not>is_exn \\<sigma>\" \"\\<sigma>' = \\<sigma>\" \"r = Array.length (the_state \\<sigma>) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<not> is_exn \\<sigma>; \\<sigma>' = \\<sigma>;\n      r = Array.length (the_state \\<sigma>) a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (Array.len a) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<not> is_exn \\<sigma>; \\<sigma>' = \\<sigma>;\n      r = Array.length (the_state \\<sigma>) a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>; \\<sigma>' = \\<sigma>;\n              r = Array.length (the_state \\<sigma>) a\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (Array.len a) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>; \\<sigma>' = \\<sigma>;\n                 r = Array.length (the_state \\<sigma>) a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Array.len a) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (auto simp add: run.simps execute_simps)"], ["", "lemma run_new_array[run_elims]:\n  assumes \"run (Array.new n x) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (Array.alloc (replicate n x) (the_state \\<sigma>)))\"\n  and \"r = fst (Array.alloc (replicate n x) (the_state \\<sigma>))\"\n  and \"Array.get (the_state \\<sigma>') r = replicate n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' =\n              Some (snd (Array.alloc (replicate n x) (the_state \\<sigma>)));\n      r = fst (Array.alloc (replicate n x) (the_state \\<sigma>));\n      Array.get (the_state \\<sigma>') r = replicate n x\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (Array.new n x) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' =\n              Some (snd (Array.alloc (replicate n x) (the_state \\<sigma>)));\n      r = fst (Array.alloc (replicate n x) (the_state \\<sigma>));\n      Array.get (the_state \\<sigma>') r = replicate n x\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                      Some\n                       (snd (Array.alloc (replicate n x)\n                              (the_state \\<sigma>)));\n              r = fst (Array.alloc (replicate n x) (the_state \\<sigma>));\n              Array.get (the_state \\<sigma>') r = replicate n x\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (Array.new n x) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                         Some\n                          (snd (Array.alloc (replicate n x)\n                                 (the_state \\<sigma>)));\n                 r = fst (Array.alloc (replicate n x) (the_state \\<sigma>));\n                 Array.get (the_state \\<sigma>') r = replicate n x\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Array.new n x) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                         Some\n                          (snd (Array.alloc (replicate n x)\n                                 (the_state \\<sigma>)));\n                 r = fst (Array.alloc (replicate n x) (the_state \\<sigma>));\n                 Array.get (the_state \\<sigma>') r = replicate n x\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Array.new n x) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto simp add: run.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<sigma> = Some a; execute (Array.new n x) a = None;\n        \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Array.alloc (replicate n x) a);\n                 r = fst (Array.alloc (replicate n x) a);\n                 Array.get (snd (Array.alloc (replicate n x) a))\n                  (fst (Array.alloc (replicate n x) a)) =\n                 replicate n x\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (Array.new n x) a = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: execute_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Array.alloc (replicate n x) a);\n                 r = fst (Array.alloc (replicate n x) a);\n                 Array.get (snd (Array.alloc (replicate n x) a))\n                  (fst (Array.alloc (replicate n x) a)) =\n                 replicate n x\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (Array.new n x) a = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: Array.get_alloc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Array.alloc (replicate n x) a);\n                 r = fst (Array.alloc (replicate n x) a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (Array.new n x) a = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Array.alloc (replicate n x) a);\n                 r = fst (Array.alloc (replicate n x) a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        execute (Array.new n x) a = Some (r, h')\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal premises prems for a h'"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "from prems(2)"], ["proof (chain)\npicking this:\n  execute (Array.new n x) a = Some (r, h')", "have \"h' = snd (Array.alloc (replicate n x) a)\" \n      \"r = fst (Array.alloc (replicate n x) a)\""], ["proof (prove)\nusing this:\n  execute (Array.new n x) a = Some (r, h')\n\ngoal (1 subgoal):\n 1. h' = snd (Array.alloc (replicate n x) a) &&&\n    r = fst (Array.alloc (replicate n x) a)", "by (auto simp add: execute_simps)"], ["proof (state)\nthis:\n  h' = snd (Array.alloc (replicate n x) a)\n  r = fst (Array.alloc (replicate n x) a)\n\ngoal (1 subgoal):\n 1. thesis", "then"], ["proof (chain)\npicking this:\n  h' = snd (Array.alloc (replicate n x) a)\n  r = fst (Array.alloc (replicate n x) a)", "show ?thesis"], ["proof (prove)\nusing this:\n  h' = snd (Array.alloc (replicate n x) a)\n  r = fst (Array.alloc (replicate n x) a)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule prems(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma run_make[run_elims]:\n  assumes \"run (Array.make n f) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (Array.alloc (map f [0 ..< n]) (the_state \\<sigma>)))\"\n          \"r = fst (Array.alloc (map f [0 ..< n]) (the_state \\<sigma>))\"\n          \"Array.get (the_state \\<sigma>') r = (map f [0 ..< n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' =\n              Some (snd (Array.alloc (map f [0..<n]) (the_state \\<sigma>)));\n      r = fst (Array.alloc (map f [0..<n]) (the_state \\<sigma>));\n      Array.get (the_state \\<sigma>') r = map f [0..<n]\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (Array.make n f) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' =\n              Some (snd (Array.alloc (map f [0..<n]) (the_state \\<sigma>)));\n      r = fst (Array.alloc (map f [0..<n]) (the_state \\<sigma>));\n      Array.get (the_state \\<sigma>') r = map f [0..<n]\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                      Some\n                       (snd (Array.alloc (map f [0..<n])\n                              (the_state \\<sigma>)));\n              r = fst (Array.alloc (map f [0..<n]) (the_state \\<sigma>));\n              Array.get (the_state \\<sigma>') r = map f [0..<n]\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (Array.make n f) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                         Some\n                          (snd (Array.alloc (map f [0..<n])\n                                 (the_state \\<sigma>)));\n                 r = fst (Array.alloc (map f [0..<n]) (the_state \\<sigma>));\n                 Array.get (the_state \\<sigma>') r = map f [0..<n]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Array.make n f) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                      Some\n                       (snd (Array.alloc (map f [0..<n])\n                              (the_state \\<sigma>)));\n              r = fst (Array.alloc (map f [0..<n]) (the_state \\<sigma>));\n              Array.get (the_state \\<sigma>') r = map f [0..<n]\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (Array.make n f) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                         Some\n                          (snd (Array.alloc (map f [0..<n])\n                                 (the_state \\<sigma>)));\n                 r = fst (Array.alloc (map f [0..<n]) (the_state \\<sigma>));\n                 Array.get (the_state \\<sigma>') r = map f [0..<n]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Array.make n f) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                      Some\n                       (snd (Array.alloc (map f [0..<n])\n                              (the_state \\<sigma>)));\n              r = fst (Array.alloc (map f [0..<n]) (the_state \\<sigma>));\n              Array.get (the_state \\<sigma>') r = map f [0..<n]\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (Array.make n f) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = Some a_\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (simp add: run.simps execute_simps Array.get_alloc; fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma run_upd[run_elims]:\n  assumes \"run (Array.upd i x a) \\<sigma> \\<sigma>' res\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<not> i < Array.length (the_state \\<sigma>) a\" \n          \"\\<sigma>' = None\" \n  |\n          \"i < Array.length (the_state \\<sigma>) a\" \n          \"\\<sigma>' = Some (Array.update a i x (the_state \\<sigma>))\" \n          \"res = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n              \\<sigma>' = None\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>i < Array.length (the_state \\<sigma>) a;\n      \\<sigma>' = Some (Array.update a i x (the_state \\<sigma>));\n      res = a\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  run (Array.upd i x a) \\<sigma> \\<sigma>' res\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n              \\<sigma>' = None\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>i < Array.length (the_state \\<sigma>) a;\n      \\<sigma>' = Some (Array.update a i x (the_state \\<sigma>));\n      res = a\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n              \\<sigma>' = None\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>i < Array.length (the_state \\<sigma>) a;\n      \\<sigma>' = Some (Array.update a i x (the_state \\<sigma>));\n      res = a\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     run (Array.upd i x a) \\<sigma> \\<sigma>' res; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n                 \\<sigma>' = None\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<lbrakk>i < Array.length (the_state \\<sigma>) a;\n         \\<sigma>' = Some (Array.update a i x (the_state \\<sigma>));\n         res = a\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        run (Array.upd i x a) \\<sigma> \\<sigma>' res;\n        \\<not> is_exn \\<sigma>; \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n                 \\<sigma>' = None\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<lbrakk>i < Array.length (the_state \\<sigma>) a;\n         \\<sigma>' = Some (Array.update a i x (the_state \\<sigma>));\n         res = a\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        run (Array.upd i x a) \\<sigma> \\<sigma>' res;\n        \\<not> is_exn \\<sigma>; \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (cases \"i < Array.length (the_state \\<sigma>) a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n                 \\<sigma>' = None\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<lbrakk>i < Array.length (the_state \\<sigma>) a;\n         \\<sigma>' = Some (Array.update a i x (the_state \\<sigma>));\n         res = a\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        run (Array.upd i x a) \\<sigma> \\<sigma>' res;\n        \\<not> is_exn \\<sigma>; \\<sigma> = Some aa;\n        i < Array.length (the_state \\<sigma>) a\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n                 \\<sigma>' = None\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<lbrakk>i < Array.length (the_state \\<sigma>) a;\n         \\<sigma>' = Some (Array.update a i x (the_state \\<sigma>));\n         res = a\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        run (Array.upd i x a) \\<sigma> \\<sigma>' res;\n        \\<not> is_exn \\<sigma>; \\<sigma> = Some aa;\n        \\<not> i < Array.length (the_state \\<sigma>) a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto simp add: run.simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> = Some aa; i < Array.length aa a;\n        execute (Array.upd i x a) aa = None; \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>h' = Array.update a i x aa; res = a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some aa; i < Array.length aa a;\n        execute (Array.upd i x a) aa = Some (res, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>aa h'.\n       \\<lbrakk>\\<sigma> = Some aa; \\<not> i < Array.length aa a;\n        execute (Array.upd i x a) aa = Some (res, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp_all only: execute_simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> = Some aa; i < Array.length aa a;\n        Some (a, Array.update a i x aa) = None; \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>h' = Array.update a i x aa; res = a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some aa; i < Array.length aa a;\n        Some (a, Array.update a i x aa) = Some (res, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>aa h'.\n       \\<lbrakk>\\<sigma> = Some aa; \\<not> i < Array.length aa a;\n        None = Some (res, h'); \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa h'.\n       \\<lbrakk>\\<sigma> = Some aa; \\<not> i < Array.length aa a;\n        None = Some (res, h'); \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> = Some aa; i < Array.length aa a;\n        Some (a, Array.update a i x aa) = None; \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>h' = Array.update a i x aa; res = a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some aa; i < Array.length aa a;\n        Some (a, Array.update a i x aa) = Some (res, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>h' = Array.update a i x aa; res = a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some aa; i < Array.length aa a;\n        Some (a, Array.update a i x aa) = Some (res, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>h' = Array.update a i x aa; res = a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        i < Array.length aa a;\n        Some (a, Array.update a i x aa) = Some (res, h')\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal premises prems for aa h'"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "from prems(3)"], ["proof (chain)\npicking this:\n  Some (a, Array.update a i x aa) = Some (res, h')", "have \"h' = Array.update a i x aa\" \"res = a\""], ["proof (prove)\nusing this:\n  Some (a, Array.update a i x aa) = Some (res, h')\n\ngoal (1 subgoal):\n 1. h' = Array.update a i x aa &&& res = a", "by auto"], ["proof (state)\nthis:\n  h' = Array.update a i x aa\n  res = a\n\ngoal (1 subgoal):\n 1. thesis", "then"], ["proof (chain)\npicking this:\n  h' = Array.update a i x aa\n  res = a", "show ?thesis"], ["proof (prove)\nusing this:\n  h' = Array.update a i x aa\n  res = a\n\ngoal (1 subgoal):\n 1. thesis", "by (rule prems(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma run_nth[run_elims]:\n  assumes \"run (Array.nth a i) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<not>is_exn \\<sigma>\" \n    \"i < Array.length (the_state \\<sigma>) a\" \n    \"r = (Array.get (the_state \\<sigma>) a) ! i\" \n    \"\\<sigma>' = \\<sigma>\" \n  | \n    \"\\<not> i < Array.length (the_state \\<sigma>) a\" \n    \"\\<sigma>' = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>;\n              i < Array.length (the_state \\<sigma>) a;\n              r = Array.get (the_state \\<sigma>) a ! i;\n              \\<sigma>' = \\<sigma>\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n      \\<sigma>' = None\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  run (Array.nth a i) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>;\n              i < Array.length (the_state \\<sigma>) a;\n              r = Array.get (the_state \\<sigma>) a ! i;\n              \\<sigma>' = \\<sigma>\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n      \\<sigma>' = None\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>;\n              i < Array.length (the_state \\<sigma>) a;\n              r = Array.get (the_state \\<sigma>) a ! i;\n              \\<sigma>' = \\<sigma>\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n      \\<sigma>' = None\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     run (Array.nth a i) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>;\n                 i < Array.length (the_state \\<sigma>) a;\n                 r = Array.get (the_state \\<sigma>) a ! i;\n                 \\<sigma>' = \\<sigma>\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n         \\<sigma>' = None\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        run (Array.nth a i) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>;\n                 i < Array.length (the_state \\<sigma>) a;\n                 r = Array.get (the_state \\<sigma>) a ! i;\n                 \\<sigma>' = \\<sigma>\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n         \\<sigma>' = None\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        run (Array.nth a i) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (cases \"i < Array.length (the_state \\<sigma>) a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>;\n                 i < Array.length (the_state \\<sigma>) a;\n                 r = Array.get (the_state \\<sigma>) a ! i;\n                 \\<sigma>' = \\<sigma>\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n         \\<sigma>' = None\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        run (Array.nth a i) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some aa; i < Array.length (the_state \\<sigma>) a\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>;\n                 i < Array.length (the_state \\<sigma>) a;\n                 r = Array.get (the_state \\<sigma>) a ! i;\n                 \\<sigma>' = \\<sigma>\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<lbrakk>\\<not> i < Array.length (the_state \\<sigma>) a;\n         \\<sigma>' = None\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        run (Array.nth a i) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some aa;\n        \\<not> i < Array.length (the_state \\<sigma>) a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto simp add: run.simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> = Some aa; i < Array.length aa a;\n        execute (Array.nth a i) aa = None; \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>r = Array.get aa a ! i; h' = aa\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some aa; i < Array.length aa a;\n        execute (Array.nth a i) aa = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>aa h'.\n       \\<lbrakk>\\<sigma> = Some aa; \\<not> i < Array.length aa a;\n        execute (Array.nth a i) aa = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp_all only: execute_simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> = Some aa; i < Array.length aa a;\n        Some (Array.get aa a ! i, aa) = None; \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>r = Array.get aa a ! i; h' = aa\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some aa; i < Array.length aa a;\n        Some (Array.get aa a ! i, aa) = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>aa h'.\n       \\<lbrakk>\\<sigma> = Some aa; \\<not> i < Array.length aa a;\n        None = Some (r, h'); \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa h'.\n       \\<lbrakk>\\<sigma> = Some aa; \\<not> i < Array.length aa a;\n        None = Some (r, h'); \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> = Some aa; i < Array.length aa a;\n        Some (Array.get aa a ! i, aa) = None; \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>r = Array.get aa a ! i; h' = aa\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some aa; i < Array.length aa a;\n        Some (Array.get aa a ! i, aa) = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>r = Array.get aa a ! i; h' = aa\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some aa; i < Array.length aa a;\n        Some (Array.get aa a ! i, aa) = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa h'.\n       \\<lbrakk>\\<lbrakk>r = Array.get aa a ! i; h' = aa\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        i < Array.length aa a;\n        Some (Array.get aa a ! i, aa) = Some (r, h')\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal premises prems for aa h'"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "from prems(3)"], ["proof (chain)\npicking this:\n  Some (Array.get aa a ! i, aa) = Some (r, h')", "have \"r = Array.get aa a ! i\" \"h' = aa\""], ["proof (prove)\nusing this:\n  Some (Array.get aa a ! i, aa) = Some (r, h')\n\ngoal (1 subgoal):\n 1. r = Array.get aa a ! i &&& h' = aa", "by auto"], ["proof (state)\nthis:\n  r = Array.get aa a ! i\n  h' = aa\n\ngoal (1 subgoal):\n 1. thesis", "then"], ["proof (chain)\npicking this:\n  r = Array.get aa a ! i\n  h' = aa", "show ?thesis"], ["proof (prove)\nusing this:\n  r = Array.get aa a ! i\n  h' = aa\n\ngoal (1 subgoal):\n 1. thesis", "by (rule prems(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma run_of_list[run_elims]:\n  assumes \"run (Array.of_list xs) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (Array.alloc xs (the_state \\<sigma>)))\"\n          \"r = fst (Array.alloc xs (the_state \\<sigma>))\"\n          \"Array.get (the_state \\<sigma>') r = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (snd (Array.alloc xs (the_state \\<sigma>)));\n      r = fst (Array.alloc xs (the_state \\<sigma>));\n      Array.get (the_state \\<sigma>') r = xs\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (Array.of_list xs) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (snd (Array.alloc xs (the_state \\<sigma>)));\n      r = fst (Array.alloc xs (the_state \\<sigma>));\n      Array.get (the_state \\<sigma>') r = xs\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                      Some (snd (Array.alloc xs (the_state \\<sigma>)));\n              r = fst (Array.alloc xs (the_state \\<sigma>));\n              Array.get (the_state \\<sigma>') r = xs\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (Array.of_list xs) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                         Some (snd (Array.alloc xs (the_state \\<sigma>)));\n                 r = fst (Array.alloc xs (the_state \\<sigma>));\n                 Array.get (the_state \\<sigma>') r = xs\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Array.of_list xs) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                         Some (snd (Array.alloc xs (the_state \\<sigma>)));\n                 r = fst (Array.alloc xs (the_state \\<sigma>));\n                 Array.get (the_state \\<sigma>') r = xs\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Array.of_list xs) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto simp add: run.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<sigma> = Some a; execute (Array.of_list xs) a = None;\n        \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Array.alloc xs a);\n                 r = fst (Array.alloc xs a);\n                 Array.get (snd (Array.alloc xs a))\n                  (fst (Array.alloc xs a)) =\n                 xs\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (Array.of_list xs) a = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: execute_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Array.alloc xs a);\n                 r = fst (Array.alloc xs a);\n                 Array.get (snd (Array.alloc xs a))\n                  (fst (Array.alloc xs a)) =\n                 xs\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (Array.of_list xs) a = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: Array.get_alloc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Array.alloc xs a);\n                 r = fst (Array.alloc xs a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (Array.of_list xs) a = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Array.alloc xs a);\n                 r = fst (Array.alloc xs a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        execute (Array.of_list xs) a = Some (r, h')\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal premises prems for a h'"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "from prems(2)"], ["proof (chain)\npicking this:\n  execute (Array.of_list xs) a = Some (r, h')", "have \"h' = snd (Array.alloc xs a)\" \n      \"r = fst (Array.alloc xs a)\""], ["proof (prove)\nusing this:\n  execute (Array.of_list xs) a = Some (r, h')\n\ngoal (1 subgoal):\n 1. h' = snd (Array.alloc xs a) &&& r = fst (Array.alloc xs a)", "by (auto simp add: execute_simps)"], ["proof (state)\nthis:\n  h' = snd (Array.alloc xs a)\n  r = fst (Array.alloc xs a)\n\ngoal (1 subgoal):\n 1. thesis", "then"], ["proof (chain)\npicking this:\n  h' = snd (Array.alloc xs a)\n  r = fst (Array.alloc xs a)", "show ?thesis"], ["proof (prove)\nusing this:\n  h' = snd (Array.alloc xs a)\n  r = fst (Array.alloc xs a)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule prems(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma run_freeze[run_elims]:\n  assumes \"run (Array.freeze a) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = \\<sigma>\"\n          \"r = Array.get (the_state \\<sigma>) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = \\<sigma>;\n      r = Array.get (the_state \\<sigma>) a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (Array.freeze a) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = \\<sigma>;\n      r = Array.get (the_state \\<sigma>) a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<sigma>' = \\<sigma>;\n              r = Array.get (the_state \\<sigma>) a\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (Array.freeze a) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>aa.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' = \\<sigma>;\n                 r = Array.get (the_state \\<sigma>) a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (Array.freeze a) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (auto simp add: run.simps execute_simps)"], ["", "subsection \\<open>Reference Commands\\<close>"], ["", "lemma run_new_ref[run_elims]:\n  assumes \"run (ref x) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (snd (Ref.alloc x (the_state \\<sigma>)))\"\n          \"r = fst (Ref.alloc x (the_state \\<sigma>))\"\n          \"Ref.get (the_state \\<sigma>') r = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (snd (Ref.alloc x (the_state \\<sigma>)));\n      r = fst (Ref.alloc x (the_state \\<sigma>));\n      Ref.get (the_state \\<sigma>') r = x\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (ref x) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (snd (Ref.alloc x (the_state \\<sigma>)));\n      r = fst (Ref.alloc x (the_state \\<sigma>));\n      Ref.get (the_state \\<sigma>') r = x\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                      Some (snd (Ref.alloc x (the_state \\<sigma>)));\n              r = fst (Ref.alloc x (the_state \\<sigma>));\n              Ref.get (the_state \\<sigma>') r = x\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (ref x) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                         Some (snd (Ref.alloc x (the_state \\<sigma>)));\n                 r = fst (Ref.alloc x (the_state \\<sigma>));\n                 Ref.get (the_state \\<sigma>') r = x\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (ref x) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<sigma>' =\n                         Some (snd (Ref.alloc x (the_state \\<sigma>)));\n                 r = fst (Ref.alloc x (the_state \\<sigma>));\n                 Ref.get (the_state \\<sigma>') r = x\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (ref x) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto simp add: run.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<sigma> = Some a; execute (ref x) a = None;\n        \\<sigma>' = None\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Ref.alloc x a);\n                 r = fst (Ref.alloc x a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (ref x) a = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: execute_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Ref.alloc x a);\n                 r = fst (Ref.alloc x a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<sigma> = Some a; execute (ref x) a = Some (r, h');\n        \\<sigma>' = Some h'\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h'.\n       \\<lbrakk>\\<lbrakk>h' = snd (Ref.alloc x a);\n                 r = fst (Ref.alloc x a)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        execute (ref x) a = Some (r, h')\\<rbrakk>\n       \\<Longrightarrow> thesis", "subgoal premises prems for a h'"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "from prems(2)"], ["proof (chain)\npicking this:\n  execute (ref x) a = Some (r, h')", "have \n      \"h' = snd (Ref.alloc x a)\" \n      \"r = fst (Ref.alloc x a)\""], ["proof (prove)\nusing this:\n  execute (ref x) a = Some (r, h')\n\ngoal (1 subgoal):\n 1. h' = snd (Ref.alloc x a) &&& r = fst (Ref.alloc x a)", "by (auto simp add: execute_simps)"], ["proof (state)\nthis:\n  h' = snd (Ref.alloc x a)\n  r = fst (Ref.alloc x a)\n\ngoal (1 subgoal):\n 1. thesis", "then"], ["proof (chain)\npicking this:\n  h' = snd (Ref.alloc x a)\n  r = fst (Ref.alloc x a)", "show ?thesis"], ["proof (prove)\nusing this:\n  h' = snd (Ref.alloc x a)\n  r = fst (Ref.alloc x a)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule prems(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"fst (Ref.alloc x h) = Ref (lim h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Ref.alloc x h) = Ref (lim h)", "unfolding alloc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (let l = lim h; r = Ref l\n         in (r, Ref.set r x (h\\<lparr>lim := l + 1\\<rparr>))) =\n    Ref (lim h)", "by (simp add: Let_def)"], ["", "lemma run_update[run_elims]:\n  assumes \"run (p := x) \\<sigma> \\<sigma>' r\"\n          \"\\<not>is_exn \\<sigma>\"\n  obtains \"\\<sigma>' = Some (Ref.set p x (the_state \\<sigma>))\" \"r = ()\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (Ref.set p x (the_state \\<sigma>));\n      r = ()\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (p := x) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (Ref.set p x (the_state \\<sigma>));\n      r = ()\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Ref.update_def"], ["proof (prove)\nusing this:\n  run (Heap_Monad.heap (\\<lambda>h. ((), Ref.set p x h))) \\<sigma> \\<sigma>'\n   r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<sigma>' = Some (Ref.set p x (the_state \\<sigma>));\n      r = ()\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: run_heap)"], ["", "lemma run_lookup[run_elims]:\n  assumes \"run (!p) \\<sigma> \\<sigma>' r\"\n          \"\\<not> is_exn \\<sigma>\"\n  obtains \"\\<not>is_exn \\<sigma>\" \"\\<sigma>' = \\<sigma>\" \"r = Ref.get (the_state \\<sigma>) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<not> is_exn \\<sigma>; \\<sigma>' = \\<sigma>;\n      r = Ref.get (the_state \\<sigma>) p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  run (!p) \\<sigma> \\<sigma>' r\n  \\<not> is_exn \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<not> is_exn \\<sigma>; \\<sigma>' = \\<sigma>;\n      r = Ref.get (the_state \\<sigma>) p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<sigma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>; \\<sigma>' = \\<sigma>;\n              r = Ref.get (the_state \\<sigma>) p\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     run (!p) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n     \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a.\n       \\<lbrakk>\\<lbrakk>\\<not> is_exn \\<sigma>; \\<sigma>' = \\<sigma>;\n                 r = Ref.get (the_state \\<sigma>) p\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        run (!p) \\<sigma> \\<sigma>' r; \\<not> is_exn \\<sigma>;\n        \\<sigma> = Some a\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (auto simp add: run.simps execute_simps)"], ["", "end"]]}