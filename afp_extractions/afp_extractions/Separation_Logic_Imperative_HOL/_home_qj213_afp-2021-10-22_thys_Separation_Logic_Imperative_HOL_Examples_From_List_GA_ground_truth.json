{"file_name": "/home/qj213/afp-2021-10-22/thys/Separation_Logic_Imperative_HOL/Examples/From_List_GA.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Separation_Logic_Imperative_HOL", "problem_names": ["lemma from_list_ga_aux_rule:\n    assumes \"imp_set_ins is_set ins\"\n    shows \n    \"< is_set s p > from_list_ga_aux ins l p <\\<lambda>r. is_set (set l \\<union> s) r >\\<^sub>t\"", "lemma from_list_ga_rule:\n    fixes empty\n    assumes \"imp_set_empty is_set empty\"\n    assumes I: \"imp_set_ins is_set ins\"\n    shows \"<emp> from_list_ga empty ins l <\\<lambda>r. is_set (set l) r>\\<^sub>t\"", "lemmas hs_from_list_rule[sep_heap_rules] \n    = from_list_ga_rule[OF hs_new_impl hs_ins_impl, folded hs_from_list_def]", "lemmas ias_from_list_rule[sep_heap_rules] \n    = from_list_ga_rule[OF ias_empty_impl ias_ins_impl, \n        folded ias_from_list_def]"], "translations": [["", "lemma from_list_ga_aux_rule:\n    assumes \"imp_set_ins is_set ins\"\n    shows \n    \"< is_set s p > from_list_ga_aux ins l p <\\<lambda>r. is_set (set l \\<union> s) r >\\<^sub>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <is_set s\n      p> from_list_ga_aux ins l p <is_set (set l \\<union> s)>\\<^sub>t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. <is_set s\n      p> from_list_ga_aux ins l p <is_set (set l \\<union> s)>\\<^sub>t", "interpret imp_set_ins is_set ins"], ["proof (prove)\ngoal (1 subgoal):\n 1. imp_set_ins is_set ins", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. <is_set s\n      p> from_list_ga_aux ins l p <is_set (set l \\<union> s)>\\<^sub>t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. <is_set s\n      p> from_list_ga_aux ins l p <is_set (set l \\<union> s)>\\<^sub>t", "proof (induction l arbitrary: s p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s p.\n       <is_set s\n         p> from_list_ga_aux ins [] p <is_set (set [] \\<union> s)>\\<^sub>t\n 2. \\<And>a l s p.\n       (\\<And>s p.\n           <is_set s\n             p> from_list_ga_aux ins l\n                 p <is_set (set l \\<union> s)>\\<^sub>t) \\<Longrightarrow>\n       <is_set s\n         p> from_list_ga_aux ins (a # l)\n             p <is_set (set (a # l) \\<union> s)>\\<^sub>t", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>s p.\n       <is_set s\n         p> from_list_ga_aux ins [] p <is_set (set [] \\<union> s)>\\<^sub>t\n 2. \\<And>a l s p.\n       (\\<And>s p.\n           <is_set s\n             p> from_list_ga_aux ins l\n                 p <is_set (set l \\<union> s)>\\<^sub>t) \\<Longrightarrow>\n       <is_set s\n         p> from_list_ga_aux ins (a # l)\n             p <is_set (set (a # l) \\<union> s)>\\<^sub>t", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. <is_set s\n      p> from_list_ga_aux ins [] p <is_set (set [] \\<union> s)>\\<^sub>t", "by sep_auto"], ["proof (state)\nthis:\n  <is_set s\n    p> from_list_ga_aux ins [] p <is_set (set [] \\<union> s)>\\<^sub>t\n\ngoal (1 subgoal):\n 1. \\<And>a l s p.\n       (\\<And>s p.\n           <is_set s\n             p> from_list_ga_aux ins l\n                 p <is_set (set l \\<union> s)>\\<^sub>t) \\<Longrightarrow>\n       <is_set s\n         p> from_list_ga_aux ins (a # l)\n             p <is_set (set (a # l) \\<union> s)>\\<^sub>t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l s p.\n       (\\<And>s p.\n           <is_set s\n             p> from_list_ga_aux ins l\n                 p <is_set (set l \\<union> s)>\\<^sub>t) \\<Longrightarrow>\n       <is_set s\n         p> from_list_ga_aux ins (a # l)\n             p <is_set (set (a # l) \\<union> s)>\\<^sub>t", "case (Cons x l)"], ["proof (state)\nthis:\n  <is_set ?s\n    ?p> from_list_ga_aux ins l ?p <is_set (set l \\<union> ?s)>\\<^sub>t\n\ngoal (1 subgoal):\n 1. \\<And>a l s p.\n       (\\<And>s p.\n           <is_set s\n             p> from_list_ga_aux ins l\n                 p <is_set (set l \\<union> s)>\\<^sub>t) \\<Longrightarrow>\n       <is_set s\n         p> from_list_ga_aux ins (a # l)\n             p <is_set (set (a # l) \\<union> s)>\\<^sub>t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. <is_set s\n      p> from_list_ga_aux ins (x # l)\n          p <is_set (set (x # l) \\<union> s)>\\<^sub>t", "by (sep_auto heap: Cons.IH)"], ["proof (state)\nthis:\n  <is_set s\n    p> from_list_ga_aux ins (x # l)\n        p <is_set (set (x # l) \\<union> s)>\\<^sub>t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  <is_set s p> from_list_ga_aux ins l p <is_set (set l \\<union> s)>\\<^sub>t\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"from_list_ga e i l = do { s\\<leftarrow>e; from_list_ga_aux i l s}\""], ["", "lemma from_list_ga_rule:\n    fixes empty\n    assumes \"imp_set_empty is_set empty\"\n    assumes I: \"imp_set_ins is_set ins\"\n    shows \"<emp> from_list_ga empty ins l <\\<lambda>r. is_set (set l) r>\\<^sub>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> from_list_ga empty ins l <is_set (set l)>\\<^sub>t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. <emp> from_list_ga empty ins l <is_set (set l)>\\<^sub>t", "interpret imp_set_empty is_set empty"], ["proof (prove)\ngoal (1 subgoal):\n 1. imp_set_empty is_set empty", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. <emp> from_list_ga empty ins l <is_set (set l)>\\<^sub>t", "note [sep_heap_rules] = from_list_ga_aux_rule[OF I]"], ["proof (state)\nthis:\n  <is_set ?s\n    ?p> from_list_ga_aux ins ?l ?p <is_set (set ?l \\<union> ?s)>\\<^sub>t\n\ngoal (1 subgoal):\n 1. <emp> from_list_ga empty ins l <is_set (set l)>\\<^sub>t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> from_list_ga empty ins l <is_set (set l)>\\<^sub>t", "unfolding from_list_ga_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> empty \\<bind> from_list_ga_aux ins l <is_set (set l)>\\<^sub>t", "by sep_auto"], ["proof (state)\nthis:\n  <emp> from_list_ga empty ins l <is_set (set l)>\\<^sub>t\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"hs_from_list \\<equiv> from_list_ga hs_new hs_ins\""], ["", "lemmas hs_from_list_rule[sep_heap_rules] \n    = from_list_ga_rule[OF hs_new_impl hs_ins_impl, folded hs_from_list_def]"], ["", "definition \"ias_from_list \\<equiv> from_list_ga ias_new ias_ins\""], ["", "lemmas ias_from_list_rule[sep_heap_rules] \n    = from_list_ga_rule[OF ias_empty_impl ias_ins_impl, \n        folded ias_from_list_def]"], ["", "end"]]}