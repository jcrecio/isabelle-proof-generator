{"file_name": "/home/qj213/afp-2021-10-22/thys/Kruskal/Kruskal_Refine.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Kruskal", "problem_names": ["lemma if_subst: \"(if indep (insert e T) then\n              RETURN (insert e T)\n            else \n              RETURN T)\n        = (if e\\<notin> T \\<and> indep (insert e T) then\n              RETURN (insert e T)\n            else \n              RETURN T)\"", "lemma kruskal0_refine: \"(kruskal0, minWeightBasis) \\<in> \\<langle>Id\\<rangle>nres_rel\"", "lemma uf_graph_invarD: \"uf_graph_invar (uf, T) \\<Longrightarrow> corresponding_union_find uf T\"", "lemma uf_graph_relsndD: \"((a,b),c) \\<in> uf_graph_rel \\<Longrightarrow> b=c\"", "lemma uf_graph_relD: \"((a,b),c) \\<in> uf_graph_rel \\<Longrightarrow> b=c \\<and> uf_graph_invar (a,b)\"", "lemma corresponding_union_find_empty:\n  shows \"corresponding_union_find (per_init V) empty_forest\"", "lemma empty_forest_refine: \"((per_init V, empty_forest), empty_forest)\\<in>uf_graph_rel\"", "lemma uf_graph_invar_preserve: \n  assumes \"uf_graph_invar (uf, T)\" \"a\\<in>V\" \"b\\<in>V\"\n       \"joins a b e\" \"e\\<in>E\" \"T\\<subseteq>E\"\n  shows \"uf_graph_invar (per_union uf a b, insert e T)\"", "theorem kruskal1_refine: \"(kruskal1, kruskal0)\\<in>\\<langle>Id\\<rangle>nres_rel\""], "translations": [["", "lemma if_subst: \"(if indep (insert e T) then\n              RETURN (insert e T)\n            else \n              RETURN T)\n        = (if e\\<notin> T \\<and> indep (insert e T) then\n              RETURN (insert e T)\n            else \n              RETURN T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if indep (insert e T) then RETURN (insert e T) else RETURN T) =\n    (if e \\<notin> T \\<and> indep (insert e T) then RETURN (insert e T)\n     else RETURN T)", "by auto"], ["", "lemma kruskal0_refine: \"(kruskal0, minWeightBasis) \\<in> \\<langle>Id\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (kruskal0, minWeightBasis) \\<in> \\<langle>Id\\<rangle>nres_rel", "unfolding kruskal0_def minWeightBasis_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (obtain_sorted_carrier \\<bind>\n     (\\<lambda>l.\n         nfoldli l (\\<lambda>_. True)\n          (\\<lambda>e T.\n              ASSERT (e \\<in> E) \\<bind>\n              (\\<lambda>_.\n                  a_endpoints e \\<bind>\n                  (\\<lambda>(a, b).\n                      ASSERT\n                       (joins a b e \\<and>\n                        forest T \\<and>\n                        e \\<in> E \\<and> T \\<subseteq> E) \\<bind>\n                      (\\<lambda>_.\n                          if (a, b) \\<notin> connected T\n                          then ASSERT (e \\<notin> T) \\<bind>\n                               (\\<lambda>_. RETURN (insert e T))\n                          else RETURN T))))\n          {} \\<bind>\n         RETURN),\n     obtain_sorted_carrier \\<bind>\n     (\\<lambda>l.\n         ASSERT (set l = E) \\<bind>\n         (\\<lambda>_.\n             nfoldli l (\\<lambda>_. True)\n              (\\<lambda>e T.\n                  ASSERT\n                   (forest T \\<and>\n                    e \\<in> E \\<and> T \\<subseteq> E) \\<bind>\n                  (\\<lambda>_.\n                      if forest (insert e T) then RETURN (insert e T)\n                      else RETURN T))\n              {} \\<bind>\n             RETURN)))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "apply(subst if_subst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (obtain_sorted_carrier \\<bind>\n     (\\<lambda>l.\n         nfoldli l (\\<lambda>_. True)\n          (\\<lambda>e T.\n              ASSERT (e \\<in> E) \\<bind>\n              (\\<lambda>_.\n                  a_endpoints e \\<bind>\n                  (\\<lambda>(a, b).\n                      ASSERT\n                       (joins a b e \\<and>\n                        forest T \\<and>\n                        e \\<in> E \\<and> T \\<subseteq> E) \\<bind>\n                      (\\<lambda>_.\n                          if (a, b) \\<notin> connected T\n                          then ASSERT (e \\<notin> T) \\<bind>\n                               (\\<lambda>_. RETURN (insert e T))\n                          else RETURN T))))\n          {} \\<bind>\n         RETURN),\n     obtain_sorted_carrier \\<bind>\n     (\\<lambda>l.\n         ASSERT (set l = E) \\<bind>\n         (\\<lambda>_.\n             nfoldli l (\\<lambda>_. True)\n              (\\<lambda>e T.\n                  ASSERT\n                   (forest T \\<and>\n                    e \\<in> E \\<and> T \\<subseteq> E) \\<bind>\n                  (\\<lambda>_.\n                      if e \\<notin> T \\<and> forest (insert e T)\n                      then RETURN (insert e T) else RETURN T))\n              {} \\<bind>\n             RETURN)))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "apply refine_vcg"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>l la.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E\\<rbrakk>\n       \\<Longrightarrow> (l, la) \\<in> \\<langle>?S5 l la\\<rangle>list_rel\n 2. \\<And>l la.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E\\<rbrakk>\n       \\<Longrightarrow> ({}, {}) \\<in> ?R'4 l la\n 3. \\<And>l la a a'.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E;\n        (a, a') \\<in> ?R'4 l la\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 4. \\<And>l la xi x si s.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> ?S5 l la;\n        (si, s) \\<in> ?R'4 l la; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> xi \\<in> E\n 5. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> ?S5 l la;\n        (si, s) \\<in> ?R'4 l la; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> joins x1 x2 xi\n 6. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> ?S5 l la;\n        (si, s) \\<in> ?R'4 l la; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> forest si\n 7. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> ?S5 l la;\n        (si, s) \\<in> ?R'4 l la; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> si \\<subseteq> E\n 8. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> ?S5 l la;\n        (si, s) \\<in> ?R'4 l la; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2);\n        joins x1 x2 xi \\<and>\n        forest si \\<and> xi \\<in> E \\<and> si \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> ((x1, x2) \\<notin> connected si) =\n                         (x \\<notin> s \\<and> forest (insert x s))\n 9. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> ?S5 l la;\n        (si, s) \\<in> ?R'4 l la; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2);\n        joins x1 x2 xi \\<and>\n        forest si \\<and> xi \\<in> E \\<and> si \\<subseteq> E;\n        (x1, x2) \\<notin> connected si;\n        x \\<notin> s \\<and> forest (insert x s)\\<rbrakk>\n       \\<Longrightarrow> xi \\<notin> si\n 10. \\<And>l la xi x si s xa x1 x2.\n        \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> ?S5 l la;\n         (si, s) \\<in> ?R'4 l la; True;\n         forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n         xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2);\n         joins x1 x2 xi \\<and>\n         forest si \\<and> xi \\<in> E \\<and> si \\<subseteq> E;\n         (x1, x2) \\<notin> connected si;\n         x \\<notin> s \\<and> forest (insert x s); xi \\<notin> si\\<rbrakk>\n        \\<Longrightarrow> (insert xi si, insert x s) \\<in> ?R'4 l la\nA total of 11 subgoals...", "apply refine_dref_type"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>l la.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E\\<rbrakk>\n       \\<Longrightarrow> (l, la) \\<in> \\<langle>Id\\<rangle>list_rel\n 2. \\<And>l la.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E\\<rbrakk>\n       \\<Longrightarrow> ({}, {}) \\<in> \\<langle>Id\\<rangle>set_rel\n 3. \\<And>l la a a'.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E;\n        (a, a') \\<in> \\<langle>Id\\<rangle>set_rel\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 4. \\<And>l la xi x si s.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> Id;\n        (si, s) \\<in> \\<langle>Id\\<rangle>set_rel; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> xi \\<in> E\n 5. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> Id;\n        (si, s) \\<in> \\<langle>Id\\<rangle>set_rel; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> joins x1 x2 xi\n 6. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> Id;\n        (si, s) \\<in> \\<langle>Id\\<rangle>set_rel; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> forest si\n 7. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> Id;\n        (si, s) \\<in> \\<langle>Id\\<rangle>set_rel; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> si \\<subseteq> E\n 8. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> Id;\n        (si, s) \\<in> \\<langle>Id\\<rangle>set_rel; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2);\n        joins x1 x2 xi \\<and>\n        forest si \\<and> xi \\<in> E \\<and> si \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> ((x1, x2) \\<notin> connected si) =\n                         (x \\<notin> s \\<and> forest (insert x s))\n 9. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> Id;\n        (si, s) \\<in> \\<langle>Id\\<rangle>set_rel; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2);\n        joins x1 x2 xi \\<and>\n        forest si \\<and> xi \\<in> E \\<and> si \\<subseteq> E;\n        (x1, x2) \\<notin> connected si;\n        x \\<notin> s \\<and> forest (insert x s)\\<rbrakk>\n       \\<Longrightarrow> xi \\<notin> si\n 10. \\<And>l la xi x si s xa x1 x2.\n        \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> Id;\n         (si, s) \\<in> \\<langle>Id\\<rangle>set_rel; True;\n         forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n         xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2);\n         joins x1 x2 xi \\<and>\n         forest si \\<and> xi \\<in> E \\<and> si \\<subseteq> E;\n         (x1, x2) \\<notin> connected si;\n         x \\<notin> s \\<and> forest (insert x s); xi \\<notin> si\\<rbrakk>\n        \\<Longrightarrow> (insert xi si, insert x s)\n                          \\<in> \\<langle>Id\\<rangle>set_rel\nA total of 11 subgoals...", "apply (all \\<open>(auto; fail)?\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l la xi x si s xa x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; set la = E; (xi, x) \\<in> Id;\n        (si, s) \\<in> \\<langle>Id\\<rangle>set_rel; True;\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E; xi \\<in> E;\n        xa \\<in> {(a, b). joins a b xi}; xa = (x1, x2);\n        joins x1 x2 xi \\<and>\n        forest si \\<and> xi \\<in> E \\<and> si \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> ((x1, x2) \\<notin> connected si) =\n                         (x \\<notin> s \\<and> forest (insert x s))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>la x s x1 x2.\n       \\<lbrakk>joins x1 x2 x; E = set la; forest s; x \\<in> set la;\n        s \\<subseteq> set la\\<rbrakk>\n       \\<Longrightarrow> ((x1, x2) \\<notin> connected s) =\n                         (x \\<notin> s \\<and> forest (insert x s))", "apply (auto simp: augment_forest)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>la x s x1 x2.\n       \\<lbrakk>joins x1 x2 x; E = set la; forest s; x \\<in> set la;\n        s \\<subseteq> set la; (x1, x2) \\<notin> connected s;\n        x \\<in> s\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>la x s x1 x2.\n       \\<lbrakk>joins x1 x2 x; E = set la; forest s; x \\<in> set la;\n        s \\<subseteq> set la; (x1, x2) \\<notin> connected s\\<rbrakk>\n       \\<Longrightarrow> forest (insert x s)", "using augment_forest joins_connected"], ["proof (prove)\nusing this:\n  \\<lbrakk>forest ?F; ?e \\<in> E - ?F; joins ?u ?v ?e\\<rbrakk>\n  \\<Longrightarrow> forest (insert ?e ?F) = ((?u, ?v) \\<notin> connected ?F)\n  \\<lbrakk>joins ?a ?b ?e; ?T \\<subseteq> E; ?e \\<in> ?T\\<rbrakk>\n  \\<Longrightarrow> (?a, ?b) \\<in> connected ?T\n\ngoal (2 subgoals):\n 1. \\<And>la x s x1 x2.\n       \\<lbrakk>joins x1 x2 x; E = set la; forest s; x \\<in> set la;\n        s \\<subseteq> set la; (x1, x2) \\<notin> connected s;\n        x \\<in> s\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>la x s x1 x2.\n       \\<lbrakk>joins x1 x2 x; E = set la; forest s; x \\<in> set la;\n        s \\<subseteq> set la; (x1, x2) \\<notin> connected s\\<rbrakk>\n       \\<Longrightarrow> forest (insert x s)", "by blast+"], ["", "subsection \\<open>Refinement II: connectedness by PER operation\\<close>"], ["", "text \\<open>Connectedness in the subgraph spanned by a set of edges is a partial equivalence relation and\n  can be represented in a disjoint sets. This data structure is maintained while executing Kruskal's\n  algorithm and can be used to efficiently check for connectedness (@{term per_compare}.\\<close>"], ["", "definition corresponding_union_find :: \"'a per \\<Rightarrow> 'edge set \\<Rightarrow> bool\" where\n  \"corresponding_union_find uf T \\<equiv> (\\<forall>a\\<in>V. \\<forall>b\\<in>V. per_compare uf a b \\<longleftrightarrow> ((a,b)\\<in> connected T ))\""], ["", "definition \"uf_graph_invar uf_T\n   \\<equiv> case uf_T of (uf, T) \\<Rightarrow> corresponding_union_find uf T \\<and> Domain uf = V\""], ["", "lemma uf_graph_invarD: \"uf_graph_invar (uf, T) \\<Longrightarrow> corresponding_union_find uf T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uf_graph_invar (uf, T) \\<Longrightarrow> corresponding_union_find uf T", "unfolding uf_graph_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case (uf, T) of\n    (uf, T) \\<Rightarrow>\n      corresponding_union_find uf T \\<and> Domain uf = V \\<Longrightarrow>\n    corresponding_union_find uf T", "by simp"], ["", "definition \"uf_graph_rel \\<equiv> br snd uf_graph_invar\""], ["", "lemma uf_graph_relsndD: \"((a,b),c) \\<in> uf_graph_rel \\<Longrightarrow> b=c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b), c) \\<in> uf_graph_rel \\<Longrightarrow> b = c", "by(auto simp: uf_graph_rel_def in_br_conv)"], ["", "lemma uf_graph_relD: \"((a,b),c) \\<in> uf_graph_rel \\<Longrightarrow> b=c \\<and> uf_graph_invar (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b), c) \\<in> uf_graph_rel \\<Longrightarrow>\n    b = c \\<and> uf_graph_invar (a, b)", "by(auto simp: uf_graph_rel_def in_br_conv)"], ["", "definition kruskal1\n  where \"kruskal1 \\<equiv> do {\n    l \\<leftarrow> obtain_sorted_carrier;\n    let initial_union_find = per_init V;\n    (per, spanning_forest) \\<leftarrow> nfoldli l (\\<lambda>_. True)\n        (\\<lambda>e (uf, T). do { \n            ASSERT (e \\<in> E);\n            (a,b) \\<leftarrow> a_endpoints e;\n            ASSERT (a\\<in>V \\<and> b\\<in>V \\<and> a \\<in> Domain uf \\<and> b \\<in> Domain uf \\<and> T\\<subseteq>E);\n            if \\<not> per_compare uf a b then\n              do { \n                let uf = per_union uf a b;\n                ASSERT (e\\<notin>T);\n                RETURN (uf, insert e T)\n              }\n            else \n              RETURN (uf,T)\n        }) (initial_union_find, empty_forest);\n        RETURN spanning_forest\n      }\""], ["", "lemma corresponding_union_find_empty:\n  shows \"corresponding_union_find (per_init V) empty_forest\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corresponding_union_find (per_init V) {}", "by(auto simp: corresponding_union_find_def connected_same per_init_def)"], ["", "lemma empty_forest_refine: \"((per_init V, empty_forest), empty_forest)\\<in>uf_graph_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((per_init V, {}), {}) \\<in> uf_graph_rel", "using corresponding_union_find_empty"], ["proof (prove)\nusing this:\n  corresponding_union_find (per_init V) {}\n\ngoal (1 subgoal):\n 1. ((per_init V, {}), {}) \\<in> uf_graph_rel", "unfolding  uf_graph_rel_def uf_graph_invar_def"], ["proof (prove)\nusing this:\n  corresponding_union_find (per_init V) {}\n\ngoal (1 subgoal):\n 1. ((per_init V, {}), {})\n    \\<in> br snd\n           (\\<lambda>uf_T.\n               case uf_T of\n               (uf, T) \\<Rightarrow>\n                 corresponding_union_find uf T \\<and> Domain uf = V)", "by (auto simp: in_br_conv per_init_def)"], ["", "lemma uf_graph_invar_preserve: \n  assumes \"uf_graph_invar (uf, T)\" \"a\\<in>V\" \"b\\<in>V\"\n       \"joins a b e\" \"e\\<in>E\" \"T\\<subseteq>E\"\n  shows \"uf_graph_invar (per_union uf a b, insert e T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uf_graph_invar (per_union uf a b, insert e T)", "using assms"], ["proof (prove)\nusing this:\n  uf_graph_invar (uf, T)\n  a \\<in> V\n  b \\<in> V\n  joins a b e\n  e \\<in> E\n  T \\<subseteq> E\n\ngoal (1 subgoal):\n 1. uf_graph_invar (per_union uf a b, insert e T)", "by(auto simp add: uf_graph_invar_def corresponding_union_find_def\n                  insert_reachable per_union_def)"], ["", "theorem kruskal1_refine: \"(kruskal1, kruskal0)\\<in>\\<langle>Id\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (kruskal1, kruskal0) \\<in> \\<langle>Id\\<rangle>nres_rel", "unfolding kruskal1_def kruskal0_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (obtain_sorted_carrier \\<bind>\n     (\\<lambda>l.\n         nfoldli l (\\<lambda>_. True)\n          (\\<lambda>e (uf, T).\n              ASSERT (e \\<in> E) \\<bind>\n              (\\<lambda>_.\n                  a_endpoints e \\<bind>\n                  (\\<lambda>(a, b).\n                      ASSERT\n                       (a \\<in> V \\<and>\n                        b \\<in> V \\<and>\n                        a \\<in> Domain uf \\<and>\n                        b \\<in> Domain uf \\<and> T \\<subseteq> E) \\<bind>\n                      (\\<lambda>_.\n                          if \\<not> per_compare uf a b\n                          then ASSERT (e \\<notin> T) \\<bind>\n                               (\\<lambda>_.\n                                   RETURN (per_union uf a b, insert e T))\n                          else RETURN (uf, T)))))\n          (per_init V, {}) \\<bind>\n         (\\<lambda>(per, y). RETURN y)),\n     obtain_sorted_carrier \\<bind>\n     (\\<lambda>l.\n         nfoldli l (\\<lambda>_. True)\n          (\\<lambda>e T.\n              ASSERT (e \\<in> E) \\<bind>\n              (\\<lambda>_.\n                  a_endpoints e \\<bind>\n                  (\\<lambda>(a, b).\n                      ASSERT\n                       (joins a b e \\<and>\n                        forest T \\<and>\n                        e \\<in> E \\<and> T \\<subseteq> E) \\<bind>\n                      (\\<lambda>_.\n                          if (a, b) \\<notin> connected T\n                          then ASSERT (e \\<notin> T) \\<bind>\n                               (\\<lambda>_. RETURN (insert e T))\n                          else RETURN T))))\n          {} \\<bind>\n         RETURN))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "apply (refine_rcg empty_forest_refine)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>l la.\n       (l, la) \\<in> Id \\<Longrightarrow>\n       (l, la) \\<in> \\<langle>?S4 l la\\<rangle>list_rel\n 2. \\<And>l la a a'.\n       \\<lbrakk>(l, la) \\<in> Id; (a, a') \\<in> uf_graph_rel\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 3. \\<And>l la xi x si s x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> ?S4 l la;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> xi \\<in> E\n 4. \\<And>l la xi x si s x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> ?S4 l la;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E\\<rbrakk>\n       \\<Longrightarrow> a_endpoints xi \\<le> a_endpoints x\n 5. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> ?S4 l la;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x1b \\<in> V\n 6. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> ?S4 l la;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2b \\<in> V\n 7. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> ?S4 l la;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x1b \\<in> Domain x1\n 8. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> ?S4 l la;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2b \\<in> Domain x1\n 9. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> ?S4 l la;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2 \\<subseteq> E\n 10. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n        \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> ?S4 l la;\n         (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n         xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n         x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n         joins x1a x2a x \\<and>\n         forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E;\n         x1b \\<in> V \\<and>\n         x2b \\<in> V \\<and>\n         x1b \\<in> Domain x1 \\<and>\n         x2b \\<in> Domain x1 \\<and> x2 \\<subseteq> E\\<rbrakk>\n        \\<Longrightarrow> (\\<not> per_compare x1 x1b x2b) =\n                          ((x1a, x2a) \\<notin> connected s)\nA total of 14 subgoals...", "apply refine_dref_type"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>l la.\n       (l, la) \\<in> Id \\<Longrightarrow>\n       (l, la) \\<in> \\<langle>Id\\<rangle>list_rel\n 2. \\<And>l la a a'.\n       \\<lbrakk>(l, la) \\<in> Id; (a, a') \\<in> uf_graph_rel\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 3. \\<And>l la xi x si s x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> Id;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> xi \\<in> E\n 4. \\<And>l la xi x si s x1 x2.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> Id;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E\\<rbrakk>\n       \\<Longrightarrow> a_endpoints xi \\<le> a_endpoints x\n 5. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> Id;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x1b \\<in> V\n 6. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> Id;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2b \\<in> V\n 7. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> Id;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x1b \\<in> Domain x1\n 8. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> Id;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2b \\<in> Domain x1\n 9. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n       \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> Id;\n        (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n        xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n        x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n        joins x1a x2a x \\<and>\n        forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2 \\<subseteq> E\n 10. \\<And>l la xi x si s x1 x2 xa x' x1a x2a x1b x2b.\n        \\<lbrakk>(l, la) \\<in> Id; (xi, x) \\<in> Id;\n         (si, s) \\<in> uf_graph_rel; True; x \\<in> E; si = (x1, x2);\n         xi \\<in> E; (xa, x') \\<in> Id; xa \\<in> {(a, b). joins a b xi};\n         x' \\<in> {(a, b). joins a b x}; x' = (x1a, x2a); xa = (x1b, x2b);\n         joins x1a x2a x \\<and>\n         forest s \\<and> x \\<in> E \\<and> s \\<subseteq> E;\n         x1b \\<in> V \\<and>\n         x2b \\<in> V \\<and>\n         x1b \\<in> Domain x1 \\<and>\n         x2b \\<in> Domain x1 \\<and> x2 \\<subseteq> E\\<rbrakk>\n        \\<Longrightarrow> (\\<not> per_compare x1 x1b x2b) =\n                          ((x1a, x2a) \\<notin> connected s)\nA total of 14 subgoals...", "apply (auto dest: uf_graph_relD E_inV uf_graph_invarD\n      simp: corresponding_union_find_def uf_graph_rel_def\n      simp: in_br_conv uf_graph_invar_preserve)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x s x1 x1a x2a.\n       \\<lbrakk>uf_graph_invar (x1, s); joins x1a x2a x; forest s;\n        x \\<in> E; s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x1a \\<in> V\n 2. \\<And>x s x1 x1a x2a.\n       \\<lbrakk>uf_graph_invar (x1, s); joins x1a x2a x; forest s;\n        x \\<in> E; s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2a \\<in> V\n 3. \\<And>x s x1 x1a x2a.\n       \\<lbrakk>uf_graph_invar (x1, s); joins x1a x2a x; forest s;\n        x \\<in> E; s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x1a \\<in> Domain x1\n 4. \\<And>x s x1 x1a x2a.\n       \\<lbrakk>uf_graph_invar (x1, s); joins x1a x2a x; forest s;\n        x \\<in> E; s \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2a \\<in> Domain x1", "by (auto simp: uf_graph_invar_def dest: joins_in_V)"], ["", "end"], ["", "end"]]}