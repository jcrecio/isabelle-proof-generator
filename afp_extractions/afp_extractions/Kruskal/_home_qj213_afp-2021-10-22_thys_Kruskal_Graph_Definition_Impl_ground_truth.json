{"file_name": "/home/qj213/afp-2021-10-22/thys/Kruskal/Graph_Definition_Impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Kruskal", "problem_names": ["lemma max_node_is_Max_V: \" E =  set la \\<Longrightarrow> max_node la = Max (insert 0 V)\"", "lemma ind_valid_graph: \"\\<And>E'. E' \\<subseteq> E \\<Longrightarrow> valid_graph (ind E')\"", "lemma vE: \"valid_graph (ind E)\"", "lemma ind_valid_graph': \"\\<And>E'. subgraph (ind E') (ind E) \\<Longrightarrow> valid_graph (ind E')\"", "lemma add_edge_ind: \"(a,w,b)\\<in>E \\<Longrightarrow> add_edge a w b (ind F) = ind (insert (a,w,b) F)\"", "lemma nodes_connected_ind_sym: \"F\\<subseteq>E \\<Longrightarrow> sym {(x, y) |x y. nodes_connected (ind F) x y}\"", "lemma nodes_connected_ind_trans: \"F\\<subseteq>E \\<Longrightarrow> trans {(x, y) |x y. nodes_connected (ind F) x y}\"", "lemma part_equiv_nodes_connected_ind:\n    \"F\\<subseteq>E \\<Longrightarrow> part_equiv {(x, y) |x y. nodes_connected (ind F) x y}\"", "lemma spanning_forest_eq: \"s.SpanningForest E' = spanning_forest (ind E') (ind E)\"", "lemma edge_weight_alt: \"edge_weight G = sum (\\<lambda>(u,w,v). w) (edges G)\"", "lemma MSF_eq: \"s.MSF E' = minimum_spanning_forest (ind E') (ind E)\"", "lemma kruskal_correct:\n    \"<emp> kruskal (return L) (\\<lambda>(u,w,v). return (u,v)) ()\n      <\\<lambda>F. \\<up> (distinct F \\<and> set F \\<subseteq> E \\<and> minimum_spanning_forest (ind (set F)) (ind E))>\\<^sub>t\"", "lemma corr: \"\n  <emp> kruskal_algo L\n     <\\<lambda>F. \\<up> (set F \\<subseteq> set L \\<and>               \n       minimum_spanning_forest (GD_from_list_\\<alpha>_graph L F) (GD_from_list_\\<alpha>_graph L L))>\\<^sub>t\"", "lemma kruskal_correct: \"<emp> kruskal_algo L\n     <\\<lambda>F. \\<up> (set F \\<subseteq> set L \\<and>\n       spanning_forest (GD_from_list_\\<alpha>_graph L F) (GD_from_list_\\<alpha>_graph L L)\n      \\<and> (\\<forall>F'. spanning_forest (GD_from_list_\\<alpha>_graph L F') (GD_from_list_\\<alpha>_graph L L) \n               \\<longrightarrow>  sum (\\<lambda>(u,w,v). w) (set F) \\<le> sum (\\<lambda>(u,w,v). w) (set F')))>\\<^sub>t\""], "translations": [["", "lemma max_node_is_Max_V: \" E =  set la \\<Longrightarrow> max_node la = Max (insert 0 V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E = set la \\<Longrightarrow>\n    max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. E = set la \\<Longrightarrow>\n    max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))", "assume E: \"E =  set la\""], ["proof (state)\nthis:\n  E = set la\n\ngoal (1 subgoal):\n 1. E = set la \\<Longrightarrow>\n    max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))", "have *: \"fst ` set la \\<union> (snd \\<circ> snd) ` set la\n             = (\\<Union>x\\<in>set la. case x of (x1, x1a, x2a) \\<Rightarrow> {x1, x2a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set la \\<union> (snd \\<circ> snd) ` set la =\n    (\\<Union>x\\<in>set la. case x of (x1, x1a, x2a) \\<Rightarrow> {x1, x2a})", "by auto force"], ["proof (state)\nthis:\n  fst ` set la \\<union> (snd \\<circ> snd) ` set la =\n  (\\<Union>x\\<in>set la. case x of (x1, x1a, x2a) \\<Rightarrow> {x1, x2a})\n\ngoal (1 subgoal):\n 1. E = set la \\<Longrightarrow>\n    max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))", "unfolding E"], ["proof (prove)\ngoal (1 subgoal):\n 1. max_node la =\n    Max (insert 0 (fst ` set la \\<union> (snd \\<circ> snd) ` set la))", "by (auto simp add:    max_node_def prod.case_distrib * )"], ["proof (state)\nthis:\n  max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ind_valid_graph: \"\\<And>E'. E' \\<subseteq> E \\<Longrightarrow> valid_graph (ind E')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>E'.\n       E' \\<subseteq> E \\<Longrightarrow>\n       valid_graph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>", "unfolding valid_graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>E'.\n       E' \\<subseteq> E \\<Longrightarrow>\n       fst `\n       edges\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = E'\\<rparr> \\<and>\n       snd `\n       snd `\n       edges\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n       \\<subseteq> nodes\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = E'\\<rparr>", "by force"], ["", "lemma vE: \"valid_graph (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "apply(rule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<subseteq> E", "by simp"], ["", "lemma ind_valid_graph': \"\\<And>E'. subgraph (ind E') (ind E) \\<Longrightarrow> valid_graph (ind E')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>E'.\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<Longrightarrow>\n       valid_graph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>", "apply(rule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>E'.\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<Longrightarrow>\n       E' \\<subseteq> E", "by(auto simp: subgraph_def)"], ["", "lemma add_edge_ind: \"(a,w,b)\\<in>E \\<Longrightarrow> add_edge a w b (ind F) = ind (insert (a,w,b) F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, w, b) \\<in> E \\<Longrightarrow>\n    add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr> =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert (a, w, b) F\\<rparr>", "unfolding add_edge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, w, b) \\<in> E \\<Longrightarrow>\n    \\<lparr>nodes =\n              {a, b} \\<union>\n              nodes\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>,\n       edges =\n         insert (a, w, b)\n          (edges\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = F\\<rparr>)\\<rparr> =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert (a, w, b) F\\<rparr>", "by force"], ["", "lemma nodes_connected_ind_sym: \"F\\<subseteq>E \\<Longrightarrow> sym {(x, y) |x y. nodes_connected (ind F) x y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> E \\<Longrightarrow>\n    sym {(x, y) |x y.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          x y}", "apply(frule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> E;\n     valid_graph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = F\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> sym {(x, y) |x y.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            x y}", "unfolding sym_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> E;\n     valid_graph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = F\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x y.\n                         (x, y)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y} \\<longrightarrow>\n                         (y, x)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y}", "using valid_graph.nodes_connected_sym"], ["proof (prove)\nusing this:\n  valid_graph ?G \\<Longrightarrow>\n  nodes_connected ?G ?a ?b = nodes_connected ?G ?b ?a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> E;\n     valid_graph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = F\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x y.\n                         (x, y)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y} \\<longrightarrow>\n                         (y, x)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y}", "by fast"], ["", "lemma nodes_connected_ind_trans: \"F\\<subseteq>E \\<Longrightarrow> trans {(x, y) |x y. nodes_connected (ind F) x y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> E \\<Longrightarrow>\n    trans\n     {(x, y) |x y.\n      nodes_connected\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>\n       x y}", "apply(frule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> E;\n     valid_graph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = F\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> trans\n                       {(x, y) |x y.\n                        nodes_connected\n                         \\<lparr>nodes =\n                                   fst ` E \\<union> (snd \\<circ> snd) ` E,\n                            edges = F\\<rparr>\n                         x y}", "unfolding trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> E;\n     valid_graph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = F\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x y z.\n                         (x, y)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y} \\<longrightarrow>\n                         (y, z)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y} \\<longrightarrow>\n                         (x, z)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y}", "using valid_graph.is_path_undir_append"], ["proof (prove)\nusing this:\n  \\<lbrakk>valid_graph ?G; is_path_undir ?G ?v ?p1.0 ?u;\n   is_path_undir ?G ?u ?p2.0 ?w\\<rbrakk>\n  \\<Longrightarrow> is_path_undir ?G ?v (?p1.0 @ ?p2.0) ?w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<subseteq> E;\n     valid_graph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = F\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x y z.\n                         (x, y)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y} \\<longrightarrow>\n                         (y, z)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y} \\<longrightarrow>\n                         (x, z)\n                         \\<in> {(x, y) |x y.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = F\\<rparr>\n                                 x y}", "by fast"], ["", "lemma part_equiv_nodes_connected_ind:\n    \"F\\<subseteq>E \\<Longrightarrow> part_equiv {(x, y) |x y. nodes_connected (ind F) x y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> E \\<Longrightarrow>\n    part_equiv\n     {(x, y) |x y.\n      nodes_connected\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>\n       x y}", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. F \\<subseteq> E \\<Longrightarrow>\n    sym {(x, y) |x y.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          x y}\n 2. F \\<subseteq> E \\<Longrightarrow>\n    trans\n     {(x, y) |x y.\n      nodes_connected\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>\n       x y}", "using nodes_connected_ind_trans nodes_connected_ind_sym"], ["proof (prove)\nusing this:\n  ?F \\<subseteq> E \\<Longrightarrow>\n  trans\n   {(x, y) |x y.\n    nodes_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = ?F\\<rparr>\n     x y}\n  ?F \\<subseteq> E \\<Longrightarrow>\n  sym {(x, y) |x y.\n       nodes_connected\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = ?F\\<rparr>\n        x y}\n\ngoal (2 subgoals):\n 1. F \\<subseteq> E \\<Longrightarrow>\n    sym {(x, y) |x y.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          x y}\n 2. F \\<subseteq> E \\<Longrightarrow>\n    trans\n     {(x, y) |x y.\n      nodes_connected\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>\n       x y}", "by auto"], ["", "sublocale s: Kruskal_Impl E V\n    \"\\<lambda>e. {fst e, snd (snd e)}\" \"\\<lambda>u v (a,w,b). u=a \\<and> v=b \\<or> u=b \\<and> v=a\"\n    \"subforest\"\n    \"\\<lambda>E'. { (a,b) |a b. nodes_connected (ind E') a b}\"\n    \"\\<lambda>(u,w,v). w\" id  \"PR_CONST (\\<lambda>(u,w,v). RETURN (u,v))\"\n    \"PR_CONST (RETURN L)\" \"return L\" \"set L\" \"(\\<lambda>(u,w,v). return (u,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Kruskal_Impl E (fst ` E \\<union> (snd \\<circ> snd) ` E)\n     (\\<lambda>e. {fst e, snd (snd e)})\n     (\\<lambda>u v (a, w, b). u = a \\<and> v = b \\<or> u = b \\<and> v = a)\n     (\\<lambda>E'.\n         forest\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E'\\<rparr> \\<and>\n         subgraph\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E'\\<rparr>\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E\\<rparr>)\n     (\\<lambda>E'.\n         {(a, b) |a b.\n          nodes_connected\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = E'\\<rparr>\n           a b})\n     (\\<lambda>(u, w, v). w) id\n     (PR_CONST (\\<lambda>(u, w, v). RETURN (u, v))) (PR_CONST (RETURN L))\n     (return L) E (\\<lambda>(u, w, v). return (u, v))", "proof (unfold_locales, goal_cases)"], ["proof (state)\ngoal (23 subgoals):\n 1. finite E\n 2. \\<And>E'.\n       forest\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr> \\<and>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<Longrightarrow>\n       E' \\<subseteq> E\n 3. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 4. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 5. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 6. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 7. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 8. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 9. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 10. \\<And>x y F e.\n        \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n         y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n         e \\<in> E;\n         case e of\n         (a, w, b) \\<Rightarrow>\n           x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n        \\<Longrightarrow> {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = insert e F\\<rparr>\n                            a b} =\n                          per_union\n                           {(a, b) |a b.\n                            nodes_connected\n                             \\<lparr>nodes =\n fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                edges = F\\<rparr>\n                             a b}\n                           x y\nA total of 23 subgoals...", "show \"finite E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite E", "by simp"], ["proof (state)\nthis:\n  finite E\n\ngoal (22 subgoals):\n 1. \\<And>E'.\n       forest\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr> \\<and>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<Longrightarrow>\n       E' \\<subseteq> E\n 2. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 3. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 4. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 6. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 7. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 8. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 10. \\<And>x.\n        x \\<in> E \\<Longrightarrow>\n        \\<exists>a b.\n           case x of\n           (aa, w, ba) \\<Rightarrow>\n             a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>E'.\n       forest\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr> \\<and>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<Longrightarrow>\n       E' \\<subseteq> E\n 2. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 3. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 4. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 6. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 7. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 8. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 10. \\<And>x.\n        x \\<in> E \\<Longrightarrow>\n        \\<exists>a b.\n           case x of\n           (aa, w, ba) \\<Rightarrow>\n             a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\nA total of 22 subgoals...", "fix E'"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>E'.\n       forest\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr> \\<and>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<Longrightarrow>\n       E' \\<subseteq> E\n 2. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 3. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 4. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 6. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 7. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 8. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 10. \\<And>x.\n        x \\<in> E \\<Longrightarrow>\n        \\<exists>a b.\n           case x of\n           (aa, w, ba) \\<Rightarrow>\n             a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\nA total of 22 subgoals...", "assume \"forest (ind E') \\<and> subgraph (ind E')  \\<lparr>nodes=V, edges=E\\<rparr>\""], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (22 subgoals):\n 1. \\<And>E'.\n       forest\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr> \\<and>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<Longrightarrow>\n       E' \\<subseteq> E\n 2. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 3. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 4. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 6. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 7. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 8. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 10. \\<And>x.\n        x \\<in> E \\<Longrightarrow>\n        \\<exists>a b.\n           case x of\n           (aa, w, ba) \\<Rightarrow>\n             a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\nA total of 22 subgoals...", "then"], ["proof (chain)\npicking this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>", "show \"E' \\<subseteq> E\""], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. E' \\<subseteq> E", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr> \\<and>\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr> =\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E\\<rparr> \\<and>\n  edges\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n  \\<subseteq> edges\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. E' \\<subseteq> E", "by auto"], ["proof (state)\nthis:\n  E' \\<subseteq> E\n\ngoal (21 subgoals):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 3. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 5. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 6. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 7. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 8. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 9. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 10. \\<And>a b e.\n        case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n        {a, b} \\<subseteq> {fst e, snd (snd e)}\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 3. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 5. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 6. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 7. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 8. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 9. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 10. \\<And>a b e.\n        case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n        {a, b} \\<subseteq> {fst e, snd (snd e)}\nA total of 21 subgoals...", "show \"subforest {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by (auto simp: subgraph_def forest_def valid_graph_def forest_axioms_def)"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = {}\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = {}\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (20 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 2. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 4. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 5. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 6. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 7. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 8. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 9. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 10. \\<And>a b e.\n        (case e of\n         (aa, w, ba) \\<Rightarrow>\n           a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n        (case e of\n         (aa, w, ba) \\<Rightarrow>\n           b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 2. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 4. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 5. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 6. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 7. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 8. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 9. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 10. \\<And>a b e.\n        (case e of\n         (aa, w, ba) \\<Rightarrow>\n           a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n        (case e of\n         (aa, w, ba) \\<Rightarrow>\n           b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\nA total of 20 subgoals...", "case (4 X Y)"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = X\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  Y \\<subseteq> X\n\ngoal (20 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 2. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 4. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 5. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 6. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 7. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 8. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 9. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 10. \\<And>a b e.\n        (case e of\n         (aa, w, ba) \\<Rightarrow>\n           a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n        (case e of\n         (aa, w, ba) \\<Rightarrow>\n           b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\nA total of 20 subgoals...", "then"], ["proof (chain)\npicking this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = X\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  Y \\<subseteq> X", "have *: \"subgraph (ind Y) (ind X)\" \"subgraph (ind Y) (ind E)\""], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = X\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  Y \\<subseteq> X\n\ngoal (1 subgoal):\n 1. subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = X\\<rparr> &&&\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = X\\<rparr> \\<and>\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = X\\<rparr> =\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E\\<rparr> \\<and>\n  edges\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n  \\<subseteq> edges\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>\n  Y \\<subseteq> X\n\ngoal (1 subgoal):\n 1. nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr> =\n    nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = X\\<rparr> \\<and>\n    edges\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr>\n    \\<subseteq> edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> &&&\n    nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr> =\n    nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<and>\n    edges\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr>\n    \\<subseteq> edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (20 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = X\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr> \\<and>\n                         subgraph\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = Y\\<rparr>\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = E\\<rparr>\n 2. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 4. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 5. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 6. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 7. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 8. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 9. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 10. \\<And>a b e.\n        (case e of\n         (aa, w, ba) \\<Rightarrow>\n           a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n        (case e of\n         (aa, w, ba) \\<Rightarrow>\n           b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\nA total of 20 subgoals...", "with 4"], ["proof (chain)\npicking this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = X\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  Y \\<subseteq> X\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>", "show ?case"], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = X\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  Y \\<subseteq> X\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "using forest.subgraph_forest"], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = X\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  Y \\<subseteq> X\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = X\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  \\<lbrakk>forest ?G; subgraph ?H ?G\\<rbrakk> \\<Longrightarrow> forest ?H\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = Y\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = Y\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = Y\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (19 subgoals):\n 1. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 2. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 3. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 4. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 5. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 6. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 7. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 8. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 9. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 10. \\<And>a F e.\n        \\<lbrakk>e \\<in> E;\n         case e of\n         (aa, w, b) \\<Rightarrow>\n           a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n        \\<Longrightarrow> \\<not> (forest\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = insert e F\\<rparr> \\<and>\n                                  subgraph\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = insert e F\\<rparr>\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = E\\<rparr>)\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 2. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 3. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 4. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 5. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 6. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 7. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 8. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 9. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 10. \\<And>a F e.\n        \\<lbrakk>e \\<in> E;\n         case e of\n         (aa, w, b) \\<Rightarrow>\n           a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n        \\<Longrightarrow> \\<not> (forest\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = insert e F\\<rparr> \\<and>\n                                  subgraph\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = insert e F\\<rparr>\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = E\\<rparr>)\nA total of 19 subgoals...", "case (5 u v)"], ["proof (state)\nthis:\n  \n\ngoal (19 subgoals):\n 1. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 2. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 3. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 4. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 5. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 6. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 7. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 8. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 9. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 10. \\<And>a F e.\n        \\<lbrakk>e \\<in> E;\n         case e of\n         (aa, w, b) \\<Rightarrow>\n           a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n        \\<Longrightarrow> \\<not> (forest\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = insert e F\\<rparr> \\<and>\n                                  subgraph\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = insert e F\\<rparr>\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = E\\<rparr>)\nA total of 19 subgoals...", "have k: \"valid_graph (ind {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = {}\\<rparr>", "apply(rule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  valid_graph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = {}\\<rparr>\n\ngoal (19 subgoals):\n 1. \\<And>u v.\n       ((u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = {}\\<rparr>\n                a b}) =\n       (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n 2. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 3. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 4. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 5. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 6. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 7. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 8. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 9. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 10. \\<And>a F e.\n        \\<lbrakk>e \\<in> E;\n         case e of\n         (aa, w, b) \\<Rightarrow>\n           a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n        \\<Longrightarrow> \\<not> (forest\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = insert e F\\<rparr> \\<and>\n                                  subgraph\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = insert e F\\<rparr>\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = E\\<rparr>)\nA total of 19 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((u, v)\n     \\<in> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = {}\\<rparr>\n             a b}) =\n    (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p.\n       is_path_undir\n        \\<lparr>nodes = fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n           edges = {}\\<rparr>\n        u p v \\<Longrightarrow>\n       u = v\n 2. \\<And>p.\n       \\<lbrakk>is_path_undir\n                 \\<lparr>nodes =\n                           fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n                    edges = {}\\<rparr>\n                 u p v;\n        v \\<notin> (\\<lambda>x. snd (snd x)) ` E\\<rbrakk>\n       \\<Longrightarrow> v \\<in> fst ` E\n 3. \\<And>aa b.\n       \\<lbrakk>(u, aa, b) \\<in> E; v = u\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = {}\\<rparr>\n                          u u\n 4. \\<And>a aa.\n       \\<lbrakk>(a, aa, u) \\<in> E; v = u\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = {}\\<rparr>\n                          u u", "subgoal for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path_undir\n     \\<lparr>nodes = fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n        edges = {}\\<rparr>\n     u p v \\<Longrightarrow>\n    u = v", "apply(cases p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_path_undir\n              \\<lparr>nodes =\n                        fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n                 edges = {}\\<rparr>\n              u p v;\n     p = []\\<rbrakk>\n    \\<Longrightarrow> u = v\n 2. \\<And>a list.\n       \\<lbrakk>is_path_undir\n                 \\<lparr>nodes =\n                           fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n                    edges = {}\\<rparr>\n                 u p v;\n        p = a # list\\<rbrakk>\n       \\<Longrightarrow> u = v", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>is_path_undir\n                 \\<lparr>nodes =\n                           fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n                    edges = {}\\<rparr>\n                 u p v;\n        v \\<notin> (\\<lambda>x. snd (snd x)) ` E\\<rbrakk>\n       \\<Longrightarrow> v \\<in> fst ` E\n 2. \\<And>aa b.\n       \\<lbrakk>(u, aa, b) \\<in> E; v = u\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = {}\\<rparr>\n                          u u\n 3. \\<And>a aa.\n       \\<lbrakk>(a, aa, u) \\<in> E; v = u\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = {}\\<rparr>\n                          u u", "subgoal for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path_undir\n              \\<lparr>nodes =\n                        fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n                 edges = {}\\<rparr>\n              u p v;\n     v \\<notin> (\\<lambda>x. snd (snd x)) ` E\\<rbrakk>\n    \\<Longrightarrow> v \\<in> fst ` E", "apply(cases p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_path_undir\n              \\<lparr>nodes =\n                        fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n                 edges = {}\\<rparr>\n              u p v;\n     v \\<notin> (\\<lambda>x. snd (snd x)) ` E; p = []\\<rbrakk>\n    \\<Longrightarrow> v \\<in> fst ` E\n 2. \\<And>a list.\n       \\<lbrakk>is_path_undir\n                 \\<lparr>nodes =\n                           fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n                    edges = {}\\<rparr>\n                 u p v;\n        v \\<notin> (\\<lambda>x. snd (snd x)) ` E; p = a # list\\<rbrakk>\n       \\<Longrightarrow> v \\<in> fst ` E", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>(u, aa, b) \\<in> E; v = u\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = {}\\<rparr>\n                          u u\n 2. \\<And>a aa.\n       \\<lbrakk>(a, aa, u) \\<in> E; v = u\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = {}\\<rparr>\n                          u u", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, aa_, b_) \\<in> E; v = u\\<rbrakk>\n    \\<Longrightarrow> nodes_connected\n                       \\<lparr>nodes =\n                                 fst ` E \\<union>\n                                 (\\<lambda>x. snd (snd x)) ` E,\n                          edges = {}\\<rparr>\n                       u u", "apply(rule exI[where x=\"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, aa_, b_) \\<in> E; v = u\\<rbrakk>\n    \\<Longrightarrow> is_path_undir\n                       \\<lparr>nodes =\n                                 fst ` E \\<union>\n                                 (\\<lambda>x. snd (snd x)) ` E,\n                          edges = {}\\<rparr>\n                       u [] u", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>(a, aa, u) \\<in> E; v = u\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = {}\\<rparr>\n                          u u", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, aa_, u) \\<in> E; v = u\\<rbrakk>\n    \\<Longrightarrow> nodes_connected\n                       \\<lparr>nodes =\n                                 fst ` E \\<union>\n                                 (\\<lambda>x. snd (snd x)) ` E,\n                          edges = {}\\<rparr>\n                       u u", "apply(rule exI[where x=\"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a_, aa_, u) \\<in> E; v = u\\<rbrakk>\n    \\<Longrightarrow> is_path_undir\n                       \\<lparr>nodes =\n                                 fst ` E \\<union>\n                                 (\\<lambda>x. snd (snd x)) ` E,\n                          edges = {}\\<rparr>\n                       u [] u", "by force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ((u, v)\n   \\<in> {(a, b) |a b.\n          nodes_connected\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = {}\\<rparr>\n           a b}) =\n  (u = v \\<and> v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E)\n\ngoal (18 subgoals):\n 1. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 2. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 4. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 6. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 7. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 8. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 9. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 10. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 2. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 4. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 6. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 7. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 8. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 9. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 10. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\nA total of 18 subgoals...", "case (6 E1 E2 u v)"], ["proof (state)\nthis:\n  E1 \\<subseteq> E\n  E2 \\<subseteq> E\n  (u, v)\n  \\<in> {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E1\\<rparr>\n          a b}\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = E2\\<rparr>\n             a b}\n\ngoal (18 subgoals):\n 1. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 2. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 4. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 6. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 7. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 8. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 9. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 10. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\nA total of 18 subgoals...", "have *: \"valid_graph (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "apply(rule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  valid_graph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (18 subgoals):\n 1. \\<And>E1 E2 u v.\n       \\<lbrakk>E1 \\<subseteq> E; E2 \\<subseteq> E;\n        (u, v)\n        \\<in> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E1\\<rparr>\n                a b};\n        (u, v)\n        \\<notin> {(a, b) |a b.\n                  nodes_connected\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E2\\<rparr>\n                   a b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b e.\n                            (a, b)\n                            \\<notin> {(a, b) |a b.\nnodes_connected\n \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E2\\<rparr>\n a b} \\<and>\n                            e \\<notin> E2 \\<and>\n                            e \\<in> E1 \\<and>\n                            (case e of\n                             (aa, w, ba) \\<Rightarrow>\n                               a = aa \\<and> b = ba \\<or>\n                               a = ba \\<and> b = aa)\n 2. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 4. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 6. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 7. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 8. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 9. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 10. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\nA total of 18 subgoals...", "from 6"], ["proof (chain)\npicking this:\n  E1 \\<subseteq> E\n  E2 \\<subseteq> E\n  (u, v)\n  \\<in> {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E1\\<rparr>\n          a b}\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = E2\\<rparr>\n             a b}", "show ?case"], ["proof (prove)\nusing this:\n  E1 \\<subseteq> E\n  E2 \\<subseteq> E\n  (u, v)\n  \\<in> {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E1\\<rparr>\n          a b}\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = E2\\<rparr>\n             a b}\n\ngoal (1 subgoal):\n 1. \\<exists>a b e.\n       (a, b)\n       \\<notin> {(a, b) |a b.\n                 nodes_connected\n                  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                     edges = E2\\<rparr>\n                  a b} \\<and>\n       e \\<notin> E2 \\<and>\n       e \\<in> E1 \\<and>\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa)", "using valid_graph.augment_edge[of \"ind E\" \"ind E1\" \"ind E2\" u v, OF *]"], ["proof (prove)\nusing this:\n  E1 \\<subseteq> E\n  E2 \\<subseteq> E\n  (u, v)\n  \\<in> {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E1\\<rparr>\n          a b}\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = E2\\<rparr>\n             a b}\n  \\<lbrakk>subgraph\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E1\\<rparr>\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr>;\n   subgraph\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E2\\<rparr>\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E\\<rparr>;\n   (u, v)\n   \\<in> {(a, b) |a b.\n          nodes_connected\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = E1\\<rparr>\n           a b};\n   (u, v)\n   \\<notin> {(a, b) |a b.\n             nodes_connected\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E2\\<rparr>\n              a b}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a b e.\n                       (a, b)\n                       \\<notin> {(a, b) |a b.\n                                 nodes_connected\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E2\\<rparr>\n                                  a b} \\<and>\n                       e \\<notin> edges\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = E2\\<rparr> \\<and>\n                       e \\<in> edges\n                                \\<lparr>nodes =\n    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                   edges = E1\\<rparr> \\<and>\n                       (case e of\n                        (aa, w, ba) \\<Rightarrow>\n                          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa)\n\ngoal (1 subgoal):\n 1. \\<exists>a b e.\n       (a, b)\n       \\<notin> {(a, b) |a b.\n                 nodes_connected\n                  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                     edges = E2\\<rparr>\n                  a b} \\<and>\n       e \\<notin> E2 \\<and>\n       e \\<in> E1 \\<and>\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa)", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  E1 \\<subseteq> E\n  E2 \\<subseteq> E\n  (u, v)\n  \\<in> {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E1\\<rparr>\n          a b}\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = E2\\<rparr>\n             a b}\n  \\<lbrakk>nodes\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E1\\<rparr> =\n           nodes\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<and>\n           edges\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E1\\<rparr>\n           \\<subseteq> edges\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E\\<rparr>;\n   nodes\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E2\\<rparr> =\n   nodes\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E\\<rparr> \\<and>\n   edges\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E2\\<rparr>\n   \\<subseteq> edges\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>;\n   (u, v)\n   \\<in> {(a, b) |a b.\n          nodes_connected\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = E1\\<rparr>\n           a b};\n   (u, v)\n   \\<notin> {(a, b) |a b.\n             nodes_connected\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E2\\<rparr>\n              a b}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a b e.\n                       (a, b)\n                       \\<notin> {(a, b) |a b.\n                                 nodes_connected\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E2\\<rparr>\n                                  a b} \\<and>\n                       e \\<notin> edges\n                                   \\<lparr>nodes =\n       fst ` E \\<union> (snd \\<circ> snd) ` E,\nedges = E2\\<rparr> \\<and>\n                       e \\<in> edges\n                                \\<lparr>nodes =\n    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                   edges = E1\\<rparr> \\<and>\n                       (case e of\n                        (aa, w, ba) \\<Rightarrow>\n                          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa)\n\ngoal (1 subgoal):\n 1. \\<exists>a b e.\n       (a, b)\n       \\<notin> {(a, b) |a b.\n                 nodes_connected\n                  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                     edges = E2\\<rparr>\n                  a b} \\<and>\n       e \\<notin> E2 \\<and>\n       e \\<in> E1 \\<and>\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa)", "by simp"], ["proof (state)\nthis:\n  \\<exists>a b e.\n     (a, b)\n     \\<notin> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E2\\<rparr>\n                a b} \\<and>\n     e \\<notin> E2 \\<and>\n     e \\<in> E1 \\<and>\n     (case e of\n      (aa, w, ba) \\<Rightarrow>\n        a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa)\n\ngoal (17 subgoals):\n 1. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 5. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 6. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 7. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 8. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 9. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 10. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n     \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 5. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 6. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 7. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 8. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 9. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 10. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n     \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\nA total of 17 subgoals...", "case (7 F e u v)"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  e \\<in> E - F\n  case e of\n  (a, w, b) \\<Rightarrow> u = a \\<and> v = b \\<or> u = b \\<and> v = a\n\ngoal (17 subgoals):\n 1. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 5. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 6. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 7. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 8. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 9. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 10. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n     \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  e \\<in> E - F\n  case e of\n  (a, w, b) \\<Rightarrow> u = a \\<and> v = b \\<or> u = b \\<and> v = a", "have f: \"forest (ind F)\" and s: \"subgraph (ind F) (ind E)\""], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  e \\<in> E - F\n  case e of\n  (a, w, b) \\<Rightarrow> u = a \\<and> v = b \\<or> u = b \\<and> v = a\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr> &&&\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (17 subgoals):\n 1. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 5. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 6. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 7. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 8. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 9. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 10. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n     \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\nA total of 17 subgoals...", "from 7"], ["proof (chain)\npicking this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  e \\<in> E - F\n  case e of\n  (a, w, b) \\<Rightarrow> u = a \\<and> v = b \\<or> u = b \\<and> v = a", "have uv: \"u\\<in>V\" \"v\\<in>V\""], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  e \\<in> E - F\n  case e of\n  (a, w, b) \\<Rightarrow> u = a \\<and> v = b \\<or> u = b \\<and> v = a\n\ngoal (1 subgoal):\n 1. u \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E &&&\n    v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E", "by force+"], ["proof (state)\nthis:\n  u \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n\ngoal (17 subgoals):\n 1. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 5. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 6. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 7. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 8. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 9. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 10. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n     \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\nA total of 17 subgoals...", "obtain a w b where e: \"e=(a,w,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a w b. e = (a, w, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply(cases e)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<And>a w b. e = (a, w, b) \\<Longrightarrow> thesis;\n        e = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  e = (a, w, b)\n\ngoal (17 subgoals):\n 1. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 5. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 6. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 7. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 8. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 9. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 10. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n     \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\nA total of 17 subgoals...", "from e 7(3)"], ["proof (chain)\npicking this:\n  e = (a, w, b)\n  case e of\n  (a, w, b) \\<Rightarrow> u = a \\<and> v = b \\<or> u = b \\<and> v = a", "have abuv: \"u=a \\<and> v=b \\<or> u=b \\<and> v=a\""], ["proof (prove)\nusing this:\n  e = (a, w, b)\n  case e of\n  (a, w, b) \\<Rightarrow> u = a \\<and> v = b \\<or> u = b \\<and> v = a\n\ngoal (1 subgoal):\n 1. u = a \\<and> v = b \\<or> u = b \\<and> v = a", "by auto"], ["proof (state)\nthis:\n  u = a \\<and> v = b \\<or> u = b \\<and> v = a\n\ngoal (17 subgoals):\n 1. \\<And>F e u v.\n       \\<lbrakk>forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        e \\<in> E - F;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          u = a \\<and> v = b \\<or> u = b \\<and> v = a\\<rbrakk>\n       \\<Longrightarrow> (forest\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr> \\<and>\n                          subgraph\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = E\\<rparr>) =\n                         ((u, v)\n                          \\<notin> {(a, b) |a b.\n                                    nodes_connected\n                                     \\<lparr>nodes =\n         fst ` E \\<union> (snd \\<circ> snd) ` E,\n  edges = F\\<rparr>\n                                     a b})\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 3. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 5. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 6. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 7. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 8. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 9. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 10. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n     \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\nA total of 17 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = insert e F\\<rparr> \\<and>\n     subgraph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = insert e F\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr>) =\n    ((u, v)\n     \\<notin> {(a, b) |a b.\n               nodes_connected\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = F\\<rparr>\n                a b})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}\n 2. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "assume \"forest (ind (insert e F)) \\<and> subgraph (ind (insert e F)) (ind E) \""], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (2 subgoals):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}\n 2. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "then"], ["proof (chain)\npicking this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>", "have \"(\\<forall>(a, w, b)\\<in> insert e F. \n                \\<not>nodes_connected (delete_edge a w b (ind (insert e F))) a b)\""], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>(a, w, b)\\<in>insert e F.\n       \\<not> nodes_connected\n               (delete_edge a w b\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert e F\\<rparr>)\n               a b", "unfolding forest_def forest_axioms_def"], ["proof (prove)\nusing this:\n  (valid_graph\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert e F\\<rparr> \\<and>\n   (\\<forall>(a, w, b)\n             \\<in>edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = insert e F\\<rparr>.\n       \\<not> nodes_connected\n               (delete_edge a w b\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert e F\\<rparr>)\n               a b)) \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>(a, w, b)\\<in>insert e F.\n       \\<not> nodes_connected\n               (delete_edge a w b\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert e F\\<rparr>)\n               a b", "by auto"], ["proof (state)\nthis:\n  \\<forall>(a, w, b)\\<in>insert e F.\n     \\<not> nodes_connected\n             (delete_edge a w b\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = insert e F\\<rparr>)\n             a b\n\ngoal (2 subgoals):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}\n 2. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "with e"], ["proof (chain)\npicking this:\n  e = (a, w, b)\n  \\<forall>(a, w, b)\\<in>insert e F.\n     \\<not> nodes_connected\n             (delete_edge a w b\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = insert e F\\<rparr>)\n             a b", "have i: \"\\<not> nodes_connected (delete_edge a w b (ind (insert e F))) a b\""], ["proof (prove)\nusing this:\n  e = (a, w, b)\n  \\<forall>(a, w, b)\\<in>insert e F.\n     \\<not> nodes_connected\n             (delete_edge a w b\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = insert e F\\<rparr>)\n             a b\n\ngoal (1 subgoal):\n 1. \\<not> nodes_connected\n            (delete_edge a w b\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert e F\\<rparr>)\n            a b", "by auto"], ["proof (state)\nthis:\n  \\<not> nodes_connected\n          (delete_edge a w b\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = insert e F\\<rparr>)\n          a b\n\ngoal (2 subgoals):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}\n 2. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "have ii: \"(delete_edge a w b (ind (insert e F))) = ind F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delete_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = F\\<rparr>", "using 7(2) e"], ["proof (prove)\nusing this:\n  e \\<in> E - F\n  e = (a, w, b)\n\ngoal (1 subgoal):\n 1. delete_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = F\\<rparr>", "by (auto simp: delete_edge_def)"], ["proof (state)\nthis:\n  delete_edge a w b\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr> =\n  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n\ngoal (2 subgoals):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}\n 2. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "from i"], ["proof (chain)\npicking this:\n  \\<not> nodes_connected\n          (delete_edge a w b\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = insert e F\\<rparr>)\n          a b", "have \"\\<not> nodes_connected (ind F) a b\""], ["proof (prove)\nusing this:\n  \\<not> nodes_connected\n          (delete_edge a w b\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = insert e F\\<rparr>)\n          a b\n\ngoal (1 subgoal):\n 1. \\<not> nodes_connected\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = F\\<rparr>\n            a b", "using ii"], ["proof (prove)\nusing this:\n  \\<not> nodes_connected\n          (delete_edge a w b\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = insert e F\\<rparr>)\n          a b\n  delete_edge a w b\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr> =\n  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> nodes_connected\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = F\\<rparr>\n            a b", "by auto"], ["proof (state)\nthis:\n  \\<not> nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b\n\ngoal (2 subgoals):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}\n 2. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "then"], ["proof (chain)\npicking this:\n  \\<not> nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b", "show \"(u, v) \\<notin> {(a, b) |a b. nodes_connected (ind F) a b}\""], ["proof (prove)\nusing this:\n  \\<not> nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}", "using 7(3)   valid_graph.nodes_connected_sym[OF ind_valid_graph'[OF s]] e"], ["proof (prove)\nusing this:\n  \\<not> nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b\n  case e of\n  (a, w, b) \\<Rightarrow> u = a \\<and> v = b \\<or> u = b \\<and> v = a\n  nodes_connected\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   ?a ?b =\n  nodes_connected\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   ?b ?a\n  e = (a, w, b)\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}", "by auto"], ["proof (state)\nthis:\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n             a b}\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "from s 7(2)"], ["proof (chain)\npicking this:\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  e \\<in> E - F", "have sg: \"subgraph (ind (insert e F)) (ind E)\""], ["proof (prove)\nusing this:\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  e \\<in> E - F\n\ngoal (1 subgoal):\n 1. subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = F\\<rparr> =\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E\\<rparr> \\<and>\n  edges\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n  \\<subseteq> edges\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>\n  e \\<in> E - F\n\ngoal (1 subgoal):\n 1. nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> =\n    nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<and>\n    edges\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n    \\<subseteq> edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "assume \"(u, v) \\<notin> {(a, b) |a b. nodes_connected (ind F) a b}\""], ["proof (state)\nthis:\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n             a b}\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "with abuv"], ["proof (chain)\npicking this:\n  u = a \\<and> v = b \\<or> u = b \\<and> v = a\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n             a b}", "have \"(a, b) \\<notin> {(a, b) |a b. nodes_connected (ind F) a b}\""], ["proof (prove)\nusing this:\n  u = a \\<and> v = b \\<or> u = b \\<and> v = a\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n             a b}\n\ngoal (1 subgoal):\n 1. (a, b)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}", "using  valid_graph.nodes_connected_sym[OF ind_valid_graph'[OF s]]"], ["proof (prove)\nusing this:\n  u = a \\<and> v = b \\<or> u = b \\<and> v = a\n  (u, v)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n             a b}\n  nodes_connected\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   ?a ?b =\n  nodes_connected\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   ?b ?a\n\ngoal (1 subgoal):\n 1. (a, b)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b}", "by auto"], ["proof (state)\nthis:\n  (a, b)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n             a b}\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "then"], ["proof (chain)\npicking this:\n  (a, b)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n             a b}", "have nn: \"~nodes_connected (ind F) a b\""], ["proof (prove)\nusing this:\n  (a, b)\n  \\<notin> {(a, b) |a b.\n            nodes_connected\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n             a b}\n\ngoal (1 subgoal):\n 1. \\<not> nodes_connected\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = F\\<rparr>\n            a b", "by auto"], ["proof (state)\nthis:\n  \\<not> nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "have \"forest (add_edge a w b (ind F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. forest\n     (add_edge a w b\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>)", "apply(rule forest.forest_add_edge[OF f _ _ nn])"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<in> nodes\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n 2. b \\<in> nodes\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>", "using uv abuv"], ["proof (prove)\nusing this:\n  u \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  v \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  u = a \\<and> v = b \\<or> u = b \\<and> v = a\n\ngoal (2 subgoals):\n 1. a \\<in> nodes\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>\n 2. b \\<in> nodes\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = F\\<rparr>", "by auto"], ["proof (state)\nthis:\n  forest\n   (add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>)\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "then"], ["proof (chain)\npicking this:\n  forest\n   (add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>)", "have f': \"forest (ind (insert e F))\""], ["proof (prove)\nusing this:\n  forest\n   (add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>)\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>", "using 7(2) add_edge_ind"], ["proof (prove)\nusing this:\n  forest\n   (add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>)\n  e \\<in> E - F\n  (?a, ?w, ?b) \\<in> E \\<Longrightarrow>\n  add_edge ?a ?w ?b\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = ?F\\<rparr> =\n  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n     edges = insert (?a, ?w, ?b) ?F\\<rparr>\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>", "by (auto simp add: e)"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<notin> {(a, b) |a b.\n              nodes_connected\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>\n               a b} \\<Longrightarrow>\n    forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "from f' sg"], ["proof (chain)\npicking this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>", "show \"forest (ind (insert e F)) \\<and> subgraph (ind (insert e F)) (ind E) \""], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert e F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (forest\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert e F\\<rparr> \\<and>\n   subgraph\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert e F\\<rparr>\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E\\<rparr>) =\n  ((u, v)\n   \\<notin> {(a, b) |a b.\n             nodes_connected\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = F\\<rparr>\n              a b})\n\ngoal (16 subgoals):\n 1. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 4. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 5. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 6. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 7. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 8. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 9. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 10. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 4. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 5. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 6. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 7. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 8. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 9. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 10. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\nA total of 16 subgoals...", "case (8 F)"], ["proof (state)\nthis:\n  F \\<subseteq> E\n\ngoal (16 subgoals):\n 1. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 4. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 5. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 6. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 7. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 8. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 9. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 10. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  F \\<subseteq> E", "have s: \"subgraph (ind F) (ind E)\""], ["proof (prove)\nusing this:\n  F \\<subseteq> E\n\ngoal (1 subgoal):\n 1. subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  F \\<subseteq> E\n\ngoal (1 subgoal):\n 1. nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr> =\n    nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<and>\n    edges\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n    \\<subseteq> edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = F\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (16 subgoals):\n 1. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 2. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       {(a, b) |a b.\n        nodes_connected\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = F\\<rparr>\n         a b}\n       \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                   (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 4. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 5. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 6. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 7. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 8. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 9. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 10. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\nA total of 16 subgoals...", "from valid_graph.connected_VV[OF vE s]"], ["proof (chain)\npicking this:\n  {(x, y) |x y.\n   nodes_connected\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = F\\<rparr>\n    x y}\n  \\<subseteq> nodes\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr> \\<times>\n              nodes\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>", "show i: \"{(x, y) |x y. nodes_connected (ind F) x y} \\<subseteq> V\\<times>V\""], ["proof (prove)\nusing this:\n  {(x, y) |x y.\n   nodes_connected\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = F\\<rparr>\n    x y}\n  \\<subseteq> nodes\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr> \\<times>\n              nodes\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. {(x, y) |x y.\n     nodes_connected\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = F\\<rparr>\n      x y}\n    \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n                (fst ` E \\<union> (snd \\<circ> snd) ` E)", "by simp"], ["proof (state)\nthis:\n  {(x, y) |x y.\n   nodes_connected\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = F\\<rparr>\n    x y}\n  \\<subseteq> (fst ` E \\<union> (snd \\<circ> snd) ` E) \\<times>\n              (fst ` E \\<union> (snd \\<circ> snd) ` E)\n\ngoal (15 subgoals):\n 1. \\<And>F.\n       F \\<subseteq> E \\<Longrightarrow>\n       equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n        {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          a b}\n 2. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 3. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 4. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 5. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 6. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 7. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 8. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 9. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 10. \\<And>a b e T.\n        \\<lbrakk>case e of\n                 (aa, w, ba) \\<Rightarrow>\n                   a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n         T \\<subseteq> E; e \\<in> T\\<rbrakk>\n        \\<Longrightarrow> (a, b)\n                          \\<in> {(a, b) |a b.\n                                 nodes_connected\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = T\\<rparr>\n                                  a b}\nA total of 15 subgoals...", "from valid_graph.connected_equiv[OF vE s]"], ["proof (chain)\npicking this:\n  equiv\n   (nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>)\n   {(x, y) |x y.\n    nodes_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n     x y}", "show \"equiv V {(x, y) |x y. nodes_connected (ind F) x y}\""], ["proof (prove)\nusing this:\n  equiv\n   (nodes\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>)\n   {(x, y) |x y.\n    nodes_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n     x y}\n\ngoal (1 subgoal):\n 1. equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n     {(x, y) |x y.\n      nodes_connected\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>\n       x y}", "by simp"], ["proof (state)\nthis:\n  equiv (fst ` E \\<union> (snd \\<circ> snd) ` E)\n   {(x, y) |x y.\n    nodes_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n     x y}\n\ngoal (14 subgoals):\n 1. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 2. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 3. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 4. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 5. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 6. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 7. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 8. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 10. \\<And>xi x.\n        id xi = x \\<Longrightarrow>\n        PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n        \\<le> \\<Down> Id\n               (SPEC\n                 (\\<lambda>(a, b).\n                     case x of\n                     (aa, w, ba) \\<Rightarrow>\n                       a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 2. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 3. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 4. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 5. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 6. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 7. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 8. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 10. \\<And>xi x.\n        id xi = x \\<Longrightarrow>\n        PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n        \\<le> \\<Down> Id\n               (SPEC\n                 (\\<lambda>(a, b).\n                     case x of\n                     (aa, w, ba) \\<Rightarrow>\n                       a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\nA total of 14 subgoals...", "case (10 x y F e)"], ["proof (state)\nthis:\n  x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  F \\<subseteq> E\n  e \\<in> E\n  case e of\n  (a, w, b) \\<Rightarrow> x = a \\<and> y = b \\<or> x = b \\<and> y = a\n\ngoal (14 subgoals):\n 1. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 2. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 3. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 4. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 5. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 6. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 7. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 8. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 10. \\<And>xi x.\n        id xi = x \\<Longrightarrow>\n        PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n        \\<le> \\<Down> Id\n               (SPEC\n                 (\\<lambda>(a, b).\n                     case x of\n                     (aa, w, ba) \\<Rightarrow>\n                       a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\nA total of 14 subgoals...", "from 10"], ["proof (chain)\npicking this:\n  x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  F \\<subseteq> E\n  e \\<in> E\n  case e of\n  (a, w, b) \\<Rightarrow> x = a \\<and> y = b \\<or> x = b \\<and> y = a", "have xy: \"x\\<in>V\" \"y\\<in>V\""], ["proof (prove)\nusing this:\n  x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  F \\<subseteq> E\n  e \\<in> E\n  case e of\n  (a, w, b) \\<Rightarrow> x = a \\<and> y = b \\<or> x = b \\<and> y = a\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E &&&\n    y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E", "by force+"], ["proof (state)\nthis:\n  x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n\ngoal (14 subgoals):\n 1. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 2. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 3. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 4. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 5. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 6. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 7. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 8. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 10. \\<And>xi x.\n        id xi = x \\<Longrightarrow>\n        PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n        \\<le> \\<Down> Id\n               (SPEC\n                 (\\<lambda>(a, b).\n                     case x of\n                     (aa, w, ba) \\<Rightarrow>\n                       a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\nA total of 14 subgoals...", "obtain a w b where e: \"e=(a,w,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a w b. e = (a, w, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply(cases e)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<And>a w b. e = (a, w, b) \\<Longrightarrow> thesis;\n        e = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  e = (a, w, b)\n\ngoal (14 subgoals):\n 1. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 2. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 3. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 4. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 5. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 6. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 7. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 8. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 10. \\<And>xi x.\n        id xi = x \\<Longrightarrow>\n        PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n        \\<le> \\<Down> Id\n               (SPEC\n                 (\\<lambda>(a, b).\n                     case x of\n                     (aa, w, ba) \\<Rightarrow>\n                       a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\nA total of 14 subgoals...", "from 10(4)"], ["proof (chain)\npicking this:\n  e \\<in> E", "have ad_eq: \"add_edge a w b (ind F) = ind (insert e F)\""], ["proof (prove)\nusing this:\n  e \\<in> E\n\ngoal (1 subgoal):\n 1. add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr> =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert e F\\<rparr>", "using e"], ["proof (prove)\nusing this:\n  e \\<in> E\n  e = (a, w, b)\n\ngoal (1 subgoal):\n 1. add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr> =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert e F\\<rparr>", "unfolding add_edge_def"], ["proof (prove)\nusing this:\n  e \\<in> E\n  e = (a, w, b)\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes =\n              {a, b} \\<union>\n              nodes\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = F\\<rparr>,\n       edges =\n         insert (a, w, b)\n          (edges\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = F\\<rparr>)\\<rparr> =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert e F\\<rparr>", "by (auto simp add: rev_image_eqI)"], ["proof (state)\nthis:\n  add_edge a w b\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = F\\<rparr> =\n  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n     edges = insert e F\\<rparr>\n\ngoal (14 subgoals):\n 1. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 2. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 3. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 4. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 5. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 6. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 7. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 8. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 10. \\<And>xi x.\n        id xi = x \\<Longrightarrow>\n        PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n        \\<le> \\<Down> Id\n               (SPEC\n                 (\\<lambda>(a, b).\n                     case x of\n                     (aa, w, ba) \\<Rightarrow>\n                       a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\nA total of 14 subgoals...", "have *: \"\\<And>x y. nodes_connected (add_edge a w b (ind F)) x y\n             = ((x, y) \\<in> per_union {(x, y) |x y. nodes_connected (ind F) x y} a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       nodes_connected\n        (add_edge a w b\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>)\n        x y =\n       ((x, y)\n        \\<in> per_union\n               {(x, y) |x y.\n                nodes_connected\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = F\\<rparr>\n                 x y}\n               a b)", "apply(rule valid_graph.nodes_connected_insert_per_union[of \"ind E\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       valid_graph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr>\n 2. \\<And>x y.\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = F\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr>\n 3. \\<And>x y.\n       part_equiv\n        {(x, y) |x y.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          x y}\n 4. \\<And>x y.\n       a \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>\n 5. \\<And>x y.\n       b \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "apply(rule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<subseteq> E", "by simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = F\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr>\n 2. \\<And>x y.\n       part_equiv\n        {(x, y) |x y.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          x y}\n 3. \\<And>x y.\n       a \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>\n 4. \\<And>x y.\n       b \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "using 10(3)"], ["proof (prove)\nusing this:\n  F \\<subseteq> E\n\ngoal (1 subgoal):\n 1. subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by(auto simp: subgraph_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       part_equiv\n        {(x, y) |x y.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F\\<rparr>\n          x y}\n 2. \\<And>x y.\n       a \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>\n 3. \\<And>x y.\n       b \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. part_equiv\n     {(x, y) |x y.\n      nodes_connected\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>\n       x y}", "apply(rule part_equiv_nodes_connected_ind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> E", "by fact"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       a \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>\n 2. \\<And>x y.\n       b \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>", "using xy e 10(5)"], ["proof (prove)\nusing this:\n  x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  e = (a, w, b)\n  case e of\n  (a, w, b) \\<Rightarrow> x = a \\<and> y = b \\<or> x = b \\<and> y = a\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       a \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>\n 2. \\<And>x y.\n       b \\<in> nodes\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  nodes_connected\n   (add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>)\n   ?x ?y =\n  ((?x, ?y)\n   \\<in> per_union\n          {(x, y) |x y.\n           nodes_connected\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = F\\<rparr>\n            x y}\n          a b)\n\ngoal (14 subgoals):\n 1. \\<And>x y F e.\n       \\<lbrakk>x \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n        y \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E; F \\<subseteq> E;\n        e \\<in> E;\n        case e of\n        (a, w, b) \\<Rightarrow>\n          x = a \\<and> y = b \\<or> x = b \\<and> y = a\\<rbrakk>\n       \\<Longrightarrow> {(a, b) |a b.\n                          nodes_connected\n                           \\<lparr>nodes =\n                                     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                              edges = insert e F\\<rparr>\n                           a b} =\n                         per_union\n                          {(a, b) |a b.\n                           nodes_connected\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = F\\<rparr>\n                            a b}\n                          x y\n 2. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 3. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 4. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 5. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 6. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 7. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 8. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 9. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 10. \\<And>xi x.\n        id xi = x \\<Longrightarrow>\n        PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n        \\<le> \\<Down> Id\n               (SPEC\n                 (\\<lambda>(a, b).\n                     case x of\n                     (aa, w, ba) \\<Rightarrow>\n                       a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\nA total of 14 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(a, b) |a b.\n     nodes_connected\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = insert e F\\<rparr>\n      a b} =\n    per_union\n     {(a, b) |a b.\n      nodes_connected\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>\n       a b}\n     x y", "using 10(5) e * ad_eq"], ["proof (prove)\nusing this:\n  case e of\n  (a, w, b) \\<Rightarrow> x = a \\<and> y = b \\<or> x = b \\<and> y = a\n  e = (a, w, b)\n  nodes_connected\n   (add_edge a w b\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>)\n   ?x ?y =\n  ((?x, ?y)\n   \\<in> per_union\n          {(x, y) |x y.\n           nodes_connected\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = F\\<rparr>\n            x y}\n          a b)\n  add_edge a w b\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = F\\<rparr> =\n  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n     edges = insert e F\\<rparr>\n\ngoal (1 subgoal):\n 1. {(a, b) |a b.\n     nodes_connected\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = insert e F\\<rparr>\n      a b} =\n    per_union\n     {(a, b) |a b.\n      nodes_connected\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = F\\<rparr>\n       a b}\n     x y", "by auto"], ["proof (state)\nthis:\n  {(a, b) |a b.\n   nodes_connected\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = insert e F\\<rparr>\n    a b} =\n  per_union\n   {(a, b) |a b.\n    nodes_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = F\\<rparr>\n     a b}\n   x y\n\ngoal (13 subgoals):\n 1. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 2. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 3. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 4. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 5. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 6. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 7. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 8. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 9. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 10. PR_CONST (RETURN L)\n     \\<le> SPEC\n            (\\<lambda>L.\n                id ` set L = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set L.\n                    (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                    wv) \\<and>\n                set L \\<subseteq> E)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 2. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 3. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 4. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 5. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 6. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 7. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 8. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 9. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 10. PR_CONST (RETURN L)\n     \\<le> SPEC\n            (\\<lambda>L.\n                id ` set L = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set L.\n                    (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                    wv) \\<and>\n                set L \\<subseteq> E)\nA total of 13 subgoals...", "case 11"], ["proof (state)\nthis:\n  x_ \\<in> E\n\ngoal (13 subgoals):\n 1. \\<And>x.\n       x \\<in> E \\<Longrightarrow>\n       \\<exists>a b.\n          case x of\n          (aa, w, ba) \\<Rightarrow>\n            a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n 2. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 3. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 4. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 5. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 6. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 7. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 8. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 9. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 10. PR_CONST (RETURN L)\n     \\<le> SPEC\n            (\\<lambda>L.\n                id ` set L = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set L.\n                    (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                    wv) \\<and>\n                set L \\<subseteq> E)\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  x_ \\<in> E", "show ?case"], ["proof (prove)\nusing this:\n  x_ \\<in> E\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       case x_ of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa", "by auto"], ["proof (state)\nthis:\n  \\<exists>a b.\n     case x_ of\n     (aa, w, ba) \\<Rightarrow>\n       a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n\ngoal (12 subgoals):\n 1. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 2. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 3. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 4. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 5. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 6. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 7. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 8. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 9. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 10. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n     \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n              (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 2. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 3. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 4. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 5. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 6. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 7. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 8. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 9. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 10. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n     \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n              (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\nA total of 12 subgoals...", "case 12"], ["proof (state)\nthis:\n  case e_ of\n  (aa, w, ba) \\<Rightarrow>\n    a_ = aa \\<and> b_ = ba \\<or> a_ = ba \\<and> b_ = aa\n\ngoal (12 subgoals):\n 1. \\<And>a b e.\n       case e of\n       (aa, w, ba) \\<Rightarrow>\n         a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa \\<Longrightarrow>\n       {a, b} \\<subseteq> {fst e, snd (snd e)}\n 2. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 3. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 4. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 5. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 6. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 7. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 8. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 9. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 10. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n     \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n              (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  case e_ of\n  (aa, w, ba) \\<Rightarrow>\n    a_ = aa \\<and> b_ = ba \\<or> a_ = ba \\<and> b_ = aa", "show ?case"], ["proof (prove)\nusing this:\n  case e_ of\n  (aa, w, ba) \\<Rightarrow>\n    a_ = aa \\<and> b_ = ba \\<or> a_ = ba \\<and> b_ = aa\n\ngoal (1 subgoal):\n 1. {a_, b_} \\<subseteq> {fst e_, snd (snd e_)}", "by auto"], ["proof (state)\nthis:\n  {a_, b_} \\<subseteq> {fst e_, snd (snd e_)}\n\ngoal (11 subgoals):\n 1. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 2. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 3. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 4. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 5. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 6. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 7. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 8. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 9. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 10. \\<And>la.\n        E = id ` set la \\<Longrightarrow>\n        max_node la =\n        Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 2. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 3. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 4. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 5. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 6. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 7. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 8. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 9. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 10. \\<And>la.\n        E = id ` set la \\<Longrightarrow>\n        max_node la =\n        Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\nA total of 11 subgoals...", "case 13"], ["proof (state)\nthis:\n  \n\ngoal (11 subgoals):\n 1. \\<And>a b e.\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa) =\n       (case e of\n        (aa, w, ba) \\<Rightarrow>\n          b = aa \\<and> a = ba \\<or> b = ba \\<and> a = aa)\n 2. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 3. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 4. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 5. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 6. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 7. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 8. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 9. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 10. \\<And>la.\n        E = id ` set la \\<Longrightarrow>\n        max_node la =\n        Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case e_ of\n     (aa, w, ba) \\<Rightarrow>\n       a_ = aa \\<and> b_ = ba \\<or> a_ = ba \\<and> b_ = aa) =\n    (case e_ of\n     (aa, w, ba) \\<Rightarrow>\n       b_ = aa \\<and> a_ = ba \\<or> b_ = ba \\<and> a_ = aa)", "by auto"], ["proof (state)\nthis:\n  (case e_ of\n   (aa, w, ba) \\<Rightarrow>\n     a_ = aa \\<and> b_ = ba \\<or> a_ = ba \\<and> b_ = aa) =\n  (case e_ of\n   (aa, w, ba) \\<Rightarrow>\n     b_ = aa \\<and> a_ = ba \\<or> b_ = ba \\<and> a_ = aa)\n\ngoal (10 subgoals):\n 1. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 2. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 3. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 4. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 6. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 7. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 8. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 9. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 10. (\\<lambda>(u, w, v). return (u, v),\n      PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n     \\<in> (nat_assn \\<times>\\<^sub>a\n            int_assn \\<times>\\<^sub>a\n            nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n              nat_assn", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 2. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 3. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 4. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 6. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 7. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 8. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 9. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 10. (\\<lambda>(u, w, v). return (u, v),\n      PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n     \\<in> (nat_assn \\<times>\\<^sub>a\n            int_assn \\<times>\\<^sub>a\n            nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n              nat_assn", "case (14 a F e)"], ["proof (state)\nthis:\n  e \\<in> E\n  case e of\n  (aa, w, b) \\<Rightarrow> a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\n\ngoal (10 subgoals):\n 1. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 2. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 3. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 4. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 6. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 7. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 8. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 9. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 10. (\\<lambda>(u, w, v). return (u, v),\n      PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n     \\<in> (nat_assn \\<times>\\<^sub>a\n            int_assn \\<times>\\<^sub>a\n            nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n              nat_assn", "then"], ["proof (chain)\npicking this:\n  e \\<in> E\n  case e of\n  (aa, w, b) \\<Rightarrow> a = aa \\<and> a = b \\<or> a = b \\<and> a = aa", "obtain w where \"e=(a,w,a)\""], ["proof (prove)\nusing this:\n  e \\<in> E\n  case e of\n  (aa, w, b) \\<Rightarrow> a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\n\ngoal (1 subgoal):\n 1. (\\<And>w. e = (a, w, a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e = (a, w, a)\n\ngoal (10 subgoals):\n 1. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 2. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 3. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 4. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 6. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 7. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 8. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 9. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 10. (\\<lambda>(u, w, v). return (u, v),\n      PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n     \\<in> (nat_assn \\<times>\\<^sub>a\n            int_assn \\<times>\\<^sub>a\n            nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n              nat_assn", "with 14"], ["proof (chain)\npicking this:\n  e \\<in> E\n  case e of\n  (aa, w, b) \\<Rightarrow> a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\n  e = (a, w, a)", "have \"a\\<in>V\" and p: \"(a,w,a): edges (ind (insert e F))\""], ["proof (prove)\nusing this:\n  e \\<in> E\n  case e of\n  (aa, w, b) \\<Rightarrow> a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\n  e = (a, w, a)\n\ngoal (1 subgoal):\n 1. a \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E &&&\n    (a, w, a)\n    \\<in> edges\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = insert e F\\<rparr>", "by auto"], ["proof (state)\nthis:\n  a \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  (a, w, a)\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = insert e F\\<rparr>\n\ngoal (10 subgoals):\n 1. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 2. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 3. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 4. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 6. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 7. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 8. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 9. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 10. (\\<lambda>(u, w, v). return (u, v),\n      PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n     \\<in> (nat_assn \\<times>\\<^sub>a\n            int_assn \\<times>\\<^sub>a\n            nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n              nat_assn", "then"], ["proof (chain)\npicking this:\n  a \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  (a, w, a)\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = insert e F\\<rparr>", "have *: \"nodes_connected (delete_edge a w a (ind (insert e F))) a a\""], ["proof (prove)\nusing this:\n  a \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E\n  (a, w, a)\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = insert e F\\<rparr>\n\ngoal (1 subgoal):\n 1. nodes_connected\n     (delete_edge a w a\n       \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n          edges = insert e F\\<rparr>)\n     a a", "apply (intro exI[where x=\"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> fst ` E \\<union> (snd \\<circ> snd) ` E;\n     (a, w, a)\n     \\<in> edges\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = insert e F\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> is_path_undir\n                       (delete_edge a w a\n                         \\<lparr>nodes =\n                                   fst ` E \\<union> (snd \\<circ> snd) ` E,\n                            edges = insert e F\\<rparr>)\n                       a [] a", "by simp"], ["proof (state)\nthis:\n  nodes_connected\n   (delete_edge a w a\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>)\n   a a\n\ngoal (10 subgoals):\n 1. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 2. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 3. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 4. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 6. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 7. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 8. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 9. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 10. (\\<lambda>(u, w, v). return (u, v),\n      PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n     \\<in> (nat_assn \\<times>\\<^sub>a\n            int_assn \\<times>\\<^sub>a\n            nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n              nat_assn", "have \"\\<exists>(a, w, b)\\<in>edges (ind (insert e F)).\n          nodes_connected (delete_edge a w b (ind (insert e F))) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>(a, w, b)\n             \\<in>edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = insert e F\\<rparr>.\n       nodes_connected\n        (delete_edge a w b\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = insert e F\\<rparr>)\n        a b", "apply (rule bexI[where x=\"(a,w,a)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. case (a, w, a) of\n    (a, w, b) \\<Rightarrow>\n      nodes_connected\n       (delete_edge a w b\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = insert e F\\<rparr>)\n       a b\n 2. (a, w, a)\n    \\<in> edges\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = insert e F\\<rparr>", "using * p"], ["proof (prove)\nusing this:\n  nodes_connected\n   (delete_edge a w a\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = insert e F\\<rparr>)\n   a a\n  (a, w, a)\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = insert e F\\<rparr>\n\ngoal (2 subgoals):\n 1. case (a, w, a) of\n    (a, w, b) \\<Rightarrow>\n      nodes_connected\n       (delete_edge a w b\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = insert e F\\<rparr>)\n       a b\n 2. (a, w, a)\n    \\<in> edges\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = insert e F\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<exists>(a, w, b)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert e F\\<rparr>.\n     nodes_connected\n      (delete_edge a w b\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert e F\\<rparr>)\n      a b\n\ngoal (10 subgoals):\n 1. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 2. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 3. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 4. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 6. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 7. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 8. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 9. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 10. (\\<lambda>(u, w, v). return (u, v),\n      PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n     \\<in> (nat_assn \\<times>\\<^sub>a\n            int_assn \\<times>\\<^sub>a\n            nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n              nat_assn", "then"], ["proof (chain)\npicking this:\n  \\<exists>(a, w, b)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert e F\\<rparr>.\n     nodes_connected\n      (delete_edge a w b\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert e F\\<rparr>)\n      a b", "have \"\\<not> forest (ind (insert e F))\""], ["proof (prove)\nusing this:\n  \\<exists>(a, w, b)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert e F\\<rparr>.\n     nodes_connected\n      (delete_edge a w b\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert e F\\<rparr>)\n      a b\n\ngoal (1 subgoal):\n 1. \\<not> forest\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = insert e F\\<rparr>", "unfolding forest_def forest_axioms_def"], ["proof (prove)\nusing this:\n  \\<exists>(a, w, b)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert e F\\<rparr>.\n     nodes_connected\n      (delete_edge a w b\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert e F\\<rparr>)\n      a b\n\ngoal (1 subgoal):\n 1. \\<not> (valid_graph\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert e F\\<rparr> \\<and>\n            (\\<forall>(a, w, b)\n                      \\<in>edges\n                            \\<lparr>nodes =\nfst ` E \\<union> (snd \\<circ> snd) ` E,\n                               edges = insert e F\\<rparr>.\n                \\<not> nodes_connected\n                        (delete_edge a w b\n                          \\<lparr>nodes =\n                                    fst ` E \\<union> (snd \\<circ> snd) ` E,\n                             edges = insert e F\\<rparr>)\n                        a b))", "by blast"], ["proof (state)\nthis:\n  \\<not> forest\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = insert e F\\<rparr>\n\ngoal (10 subgoals):\n 1. \\<And>a F e.\n       \\<lbrakk>e \\<in> E;\n        case e of\n        (aa, w, b) \\<Rightarrow>\n          a = aa \\<and> a = b \\<or> a = b \\<and> a = aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> (forest\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr> \\<and>\n                                 subgraph\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = insert e F\\<rparr>\n                                  \\<lparr>nodes =\n      fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                     edges = E\\<rparr>)\n 2. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 3. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 4. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 5. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 6. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 7. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 8. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 9. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 10. (\\<lambda>(u, w, v). return (u, v),\n      PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n     \\<in> (nat_assn \\<times>\\<^sub>a\n            int_assn \\<times>\\<^sub>a\n            nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n              nat_assn", "then"], ["proof (chain)\npicking this:\n  \\<not> forest\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = insert e F\\<rparr>", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> forest\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = insert e F\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> (forest\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert e F\\<rparr> \\<and>\n            subgraph\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert e F\\<rparr>\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = E\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  \\<not> (forest\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = insert e F\\<rparr> \\<and>\n          subgraph\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = insert e F\\<rparr>\n           \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n              edges = E\\<rparr>)\n\ngoal (9 subgoals):\n 1. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 2. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 3. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 5. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 6. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 7. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 8. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 9. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 2. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 3. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 5. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 6. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 7. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 8. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 9. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case (15 e)"], ["proof (state)\nthis:\n  e \\<in> E\n\ngoal (9 subgoals):\n 1. \\<And>e. e \\<in> E \\<Longrightarrow> finite {fst e, snd (snd e)}\n 2. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 3. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 4. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 5. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 6. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 7. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 8. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 9. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "then"], ["proof (chain)\npicking this:\n  e \\<in> E", "show ?case"], ["proof (prove)\nusing this:\n  e \\<in> E\n\ngoal (1 subgoal):\n 1. finite {fst e, snd (snd e)}", "by auto"], ["proof (state)\nthis:\n  finite {fst e, snd (snd e)}\n\ngoal (8 subgoals):\n 1. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 2. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 4. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 5. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 6. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 7. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 8. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 2. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 4. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 5. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 6. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 7. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 8. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case 16"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n 2. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 3. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 4. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 5. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 6. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 7. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 8. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n    \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E", "by force"], ["proof (state)\nthis:\n  (\\<Union>e\\<in>E. {fst e, snd (snd e)})\n  \\<subseteq> fst ` E \\<union> (snd \\<circ> snd) ` E\n\ngoal (7 subgoals):\n 1. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 2. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 3. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 4. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 5. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 6. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 7. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 2. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 3. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 4. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 5. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 6. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 7. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case 17"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n 2. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 3. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 4. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 5. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 6. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 7. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fst ` E \\<union> (snd \\<circ> snd) ` E)", "by auto"], ["proof (state)\nthis:\n  finite (fst ` E \\<union> (snd \\<circ> snd) ` E)\n\ngoal (6 subgoals):\n 1. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 2. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 3. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 4. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 5. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 6. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 2. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 3. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 4. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 5. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 6. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case (18 a b)"], ["proof (state)\nthis:\n  case e_ of\n  (aa, w, ba) \\<Rightarrow> a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n  T_ \\<subseteq> E\n  e_ \\<in> T_\n\ngoal (6 subgoals):\n 1. \\<And>a b e T.\n       \\<lbrakk>case e of\n                (aa, w, ba) \\<Rightarrow>\n                  a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa;\n        T \\<subseteq> E; e \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> {(a, b) |a b.\n                                nodes_connected\n                                 \\<lparr>nodes =\n     fst ` E \\<union> (snd \\<circ> snd) ` E,\n                                    edges = T\\<rparr>\n                                 a b}\n 2. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 3. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 4. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 5. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 6. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "then"], ["proof (chain)\npicking this:\n  case e_ of\n  (aa, w, ba) \\<Rightarrow> a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n  T_ \\<subseteq> E\n  e_ \\<in> T_", "show ?case"], ["proof (prove)\nusing this:\n  case e_ of\n  (aa, w, ba) \\<Rightarrow> a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa\n  T_ \\<subseteq> E\n  e_ \\<in> T_\n\ngoal (1 subgoal):\n 1. (a, b)\n    \\<in> {(a, b) |a b.\n           nodes_connected\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = T_\\<rparr>\n            a b}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>T_ \\<subseteq> E; (a, aa, b) \\<in> T_;\n        e_ = (a, aa, b)\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = T_\\<rparr>\n                          a b\n 2. \\<And>aa.\n       \\<lbrakk>T_ \\<subseteq> E; (b, aa, a) \\<in> T_;\n        e_ = (b, aa, a)\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = T_\\<rparr>\n                          a b", "subgoal for w"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T_ \\<subseteq> E; (a, w, b) \\<in> T_; e_ = (a, w, b)\\<rbrakk>\n    \\<Longrightarrow> nodes_connected\n                       \\<lparr>nodes =\n                                 fst ` E \\<union>\n                                 (\\<lambda>x. snd (snd x)) ` E,\n                          edges = T_\\<rparr>\n                       a b", "apply(rule exI[where x=\"[(a, w, b)]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T_ \\<subseteq> E; (a, w, b) \\<in> T_; e_ = (a, w, b)\\<rbrakk>\n    \\<Longrightarrow> is_path_undir\n                       \\<lparr>nodes =\n                                 fst ` E \\<union>\n                                 (\\<lambda>x. snd (snd x)) ` E,\n                          edges = T_\\<rparr>\n                       a [(a, w, b)] b", "by force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>T_ \\<subseteq> E; (b, aa, a) \\<in> T_;\n        e_ = (b, aa, a)\\<rbrakk>\n       \\<Longrightarrow> nodes_connected\n                          \\<lparr>nodes =\n                                    fst ` E \\<union>\n                                    (\\<lambda>x. snd (snd x)) ` E,\n                             edges = T_\\<rparr>\n                          a b", "subgoal for w"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T_ \\<subseteq> E; (b, w, a) \\<in> T_; e_ = (b, w, a)\\<rbrakk>\n    \\<Longrightarrow> nodes_connected\n                       \\<lparr>nodes =\n                                 fst ` E \\<union>\n                                 (\\<lambda>x. snd (snd x)) ` E,\n                          edges = T_\\<rparr>\n                       a b", "apply(rule exI[where x=\"[(a, w, b)]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T_ \\<subseteq> E; (b, w, a) \\<in> T_; e_ = (b, w, a)\\<rbrakk>\n    \\<Longrightarrow> is_path_undir\n                       \\<lparr>nodes =\n                                 fst ` E \\<union>\n                                 (\\<lambda>x. snd (snd x)) ` E,\n                          edges = T_\\<rparr>\n                       a [(a, w, b)] b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T_ \\<subseteq> E; (b, w, a) \\<in> T_; e_ = (b, w, a)\\<rbrakk>\n    \\<Longrightarrow> b \\<in> fst ` E \\<or>\n                      b \\<in> (\\<lambda>x. snd (snd x)) ` E", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (a, b)\n  \\<in> {(a, b) |a b.\n         nodes_connected\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = T_\\<rparr>\n          a b}\n\ngoal (5 subgoals):\n 1. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 2. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 3. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 4. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 5. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 2. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 3. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 4. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 5. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case 19"], ["proof (state)\nthis:\n  id xi_ = x_\n\ngoal (5 subgoals):\n 1. \\<And>xi x.\n       id xi = x \\<Longrightarrow>\n       PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi\n       \\<le> \\<Down> Id\n              (SPEC\n                (\\<lambda>(a, b).\n                    case x of\n                    (aa, w, ba) \\<Rightarrow>\n                      a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n 2. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 3. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 4. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 5. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "thus ?case"], ["proof (prove)\nusing this:\n  id xi_ = x_\n\ngoal (1 subgoal):\n 1. PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi_\n    \\<le> \\<Down> Id\n           (SPEC\n             (\\<lambda>(a, b).\n                 case x_ of\n                 (aa, w, ba) \\<Rightarrow>\n                   a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))", "by (auto split: prod.split )"], ["proof (state)\nthis:\n  PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) xi_\n  \\<le> \\<Down> Id\n         (SPEC\n           (\\<lambda>(a, b).\n               case x_ of\n               (aa, w, ba) \\<Rightarrow>\n                 a = aa \\<and> b = ba \\<or> a = ba \\<and> b = aa))\n\ngoal (4 subgoals):\n 1. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 2. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 3. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 4. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 2. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 3. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 4. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case 20"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)\n 2. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 3. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 4. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. PR_CONST (RETURN L)\n    \\<le> SPEC\n           (\\<lambda>L.\n               id ` set L = E \\<and>\n               (\\<forall>(a, wv, b)\\<in>set L.\n                   (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                   wv) \\<and>\n               set L \\<subseteq> E)", "by auto"], ["proof (state)\nthis:\n  PR_CONST (RETURN L)\n  \\<le> SPEC\n         (\\<lambda>L.\n             id ` set L = E \\<and>\n             (\\<forall>(a, wv, b)\\<in>set L.\n                 (case id (a, wv, b) of (u, w, v) \\<Rightarrow> w) =\n                 wv) \\<and>\n             set L \\<subseteq> E)\n\ngoal (3 subgoals):\n 1. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 2. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 3. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 2. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 3. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case 21"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n 2. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 3. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)", "apply sepref_to_hoare"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xi.\n       \\<lbrakk>x ::\\<^sub>i TYPE(unit);\n        nofail (PR_CONST (RETURN L))\\<rbrakk>\n       \\<Longrightarrow> <emp> return\n                                L <\\<lambda>r.\nemp *\n(\\<exists>\\<^sub>Ax.\n    list_assn\n     ((\\<lambda>a c. \\<up> ((c, a) \\<in> nat_rel)) \\<times>\\<^sub>a\n      (\\<lambda>a c. \\<up> ((c, a) \\<in> int_rel)) \\<times>\\<^sub>a\n      (\\<lambda>a c. \\<up> ((c, a) \\<in> nat_rel)))\n     x r *\n    \\<up> (RETURN x \\<le> PR_CONST (RETURN L)))>\\<^sub>t", "apply sep_auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. emp \\<Longrightarrow>\\<^sub>A\n    list_assn\n     ((\\<lambda>a c. \\<up> (c = a)) \\<times>\\<^sub>a\n      (\\<lambda>a c. \\<up> (c = a)) \\<times>\\<^sub>a\n      (\\<lambda>a c. \\<up> (c = a)))\n     L L *\n    true", "by(auto simp: pure_fold list_assn_emp)"], ["proof (state)\nthis:\n  (uncurry0 (return L), uncurry0 (PR_CONST (RETURN L)))\n  \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n           (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\n\ngoal (2 subgoals):\n 1. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 2. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 2. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case (22 l)"], ["proof (state)\nthis:\n  E = id ` set l\n\ngoal (2 subgoals):\n 1. \\<And>la.\n       E = id ` set la \\<Longrightarrow>\n       max_node la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n 2. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "then"], ["proof (chain)\npicking this:\n  E = id ` set l", "show ?case"], ["proof (prove)\nusing this:\n  E = id ` set l\n\ngoal (1 subgoal):\n 1. max_node l = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))", "using max_node_is_Max_V"], ["proof (prove)\nusing this:\n  E = id ` set l\n  E = set ?la \\<Longrightarrow>\n  max_node ?la = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n\ngoal (1 subgoal):\n 1. max_node l = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))", "by auto"], ["proof (state)\nthis:\n  max_node l = Max (insert 0 (fst ` E \\<union> (snd \\<circ> snd) ` E))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "case 23"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(u, w, v). return (u, v),\n     PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n    \\<in> (nat_assn \\<times>\\<^sub>a\n           int_assn \\<times>\\<^sub>a\n           nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n             nat_assn", "apply sepref_to_hoare"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xi.\n       \\<lbrakk>x ::\\<^sub>i TYPE(nat \\<times> int \\<times> nat);\n        nofail (PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)) x)\\<rbrakk>\n       \\<Longrightarrow> <((\\<lambda>a c.\n                               \\<up>\n                                ((c, a) \\<in> nat_rel)) \\<times>\\<^sub>a\n                           (\\<lambda>a c.\n                               \\<up>\n                                ((c, a) \\<in> int_rel)) \\<times>\\<^sub>a\n                           (\\<lambda>a c. \\<up> ((c, a) \\<in> nat_rel)))\n                           x xi> case xi of\n                                 (u, w, v) \\<Rightarrow>\n                                   return\n                                    (u, v) <\\<lambda>r.\n         ((\\<lambda>a c. \\<up> ((c, a) \\<in> nat_rel)) \\<times>\\<^sub>a\n          (\\<lambda>a c. \\<up> ((c, a) \\<in> int_rel)) \\<times>\\<^sub>a\n          (\\<lambda>a c. \\<up> ((c, a) \\<in> nat_rel)))\n          x xi *\n         (\\<exists>\\<^sub>Axa.\n             ((\\<lambda>a c. \\<up> ((c, a) \\<in> nat_rel)) \\<times>\\<^sub>a\n              (\\<lambda>a c. \\<up> ((c, a) \\<in> nat_rel)))\n              xa r *\n             \\<up>\n              (RETURN xa\n               \\<le> PR_CONST (\\<lambda>(u, w, v). RETURN (u, v))\n                      x))>\\<^sub>t", "by sep_auto"], ["proof (state)\nthis:\n  (\\<lambda>(u, w, v). return (u, v),\n   PR_CONST (\\<lambda>(u, w, v). RETURN (u, v)))\n  \\<in> (nat_assn \\<times>\\<^sub>a\n         int_assn \\<times>\\<^sub>a\n         nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a nat_assn \\<times>\\<^sub>a\n           nat_assn\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Showing the equivalence of minimum spanning forest definitions\\<close>"], ["", "text \\<open>As the definition of the minimum spanning forest from the minWeightBasis algorithm differs\n    from the one of our graph formalization, we new show their equivalence.\\<close>"], ["", "lemma spanning_forest_eq: \"s.SpanningForest E' = spanning_forest (ind E') (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s.SpanningForest E' =\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "proof rule"], ["proof (state)\ngoal (2 subgoals):\n 1. s.SpanningForest E' \\<Longrightarrow>\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "assume t: \"s.SpanningForest E'\""], ["proof (state)\nthis:\n  s.SpanningForest E'\n\ngoal (2 subgoals):\n 1. s.SpanningForest E' \\<Longrightarrow>\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have f: \"(forest (ind E'))\" and sub: \"subgraph (ind E') (ind E)\" and\n        n: \"(\\<forall>x\\<in>E - E'.  \\<not> (forest (ind ( insert x E')) \\<and> subgraph (ind ( insert x E')) (ind E)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr> &&&\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> &&&\n    \\<forall>x\\<in>E - E'.\n       \\<not> (forest\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = insert x E'\\<rparr> \\<and>\n               subgraph\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = insert x E'\\<rparr>\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>)", "using t[unfolded  s.SpanningForest_def ]"], ["proof (prove)\nusing this:\n  (forest\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E'\\<rparr> \\<and>\n   subgraph\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E'\\<rparr>\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = E\\<rparr>) \\<and>\n  (\\<forall>x\\<in>E - E'.\n      \\<not> (forest\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = insert x E'\\<rparr> \\<and>\n              subgraph\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = insert x E'\\<rparr>\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>))\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr> &&&\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> &&&\n    \\<forall>x\\<in>E - E'.\n       \\<not> (forest\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = insert x E'\\<rparr> \\<and>\n               subgraph\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = insert x E'\\<rparr>\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  \\<forall>x\\<in>E - E'.\n     \\<not> (forest\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr> \\<and>\n             subgraph\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr>\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E\\<rparr>)\n\ngoal (2 subgoals):\n 1. s.SpanningForest E' \\<Longrightarrow>\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have vE: \"valid_graph (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "apply(rule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  valid_graph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (2 subgoals):\n 1. s.SpanningForest E' \\<Longrightarrow>\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have \"\\<And>x. x\\<in>E-E' \\<Longrightarrow> subgraph (ind ( insert x E')) (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> E - E' \\<Longrightarrow>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert x E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr>", "using sub"], ["proof (prove)\nusing this:\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> E - E' \\<Longrightarrow>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert x E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr>", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr> =\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E\\<rparr> \\<and>\n  edges\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n  \\<subseteq> edges\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> E - E' \\<Longrightarrow>\n       nodes\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert x E'\\<rparr> =\n       nodes\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<and>\n       edges\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert x E'\\<rparr>\n       \\<subseteq> edges\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  ?x1 \\<in> E - E' \\<Longrightarrow>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert ?x1 E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (2 subgoals):\n 1. s.SpanningForest E' \\<Longrightarrow>\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "with n"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>E - E'.\n     \\<not> (forest\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr> \\<and>\n             subgraph\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr>\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E\\<rparr>)\n  ?x1 \\<in> E - E' \\<Longrightarrow>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert ?x1 E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>", "have \"(\\<forall>x\\<in>E - E'.  \\<not> (forest (ind ( insert x E'))))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>E - E'.\n     \\<not> (forest\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr> \\<and>\n             subgraph\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr>\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E\\<rparr>)\n  ?x1 \\<in> E - E' \\<Longrightarrow>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert ?x1 E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>E - E'.\n       \\<not> forest\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = insert x E'\\<rparr>", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>E - E'.\n     \\<not> forest\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert x E'\\<rparr>\n\ngoal (2 subgoals):\n 1. s.SpanningForest E' \\<Longrightarrow>\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>E - E'.\n     \\<not> forest\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert x E'\\<rparr>", "have n': \"(\\<forall>(a,w,b)\\<in>edges (ind E) - edges (ind E').  \\<not> (forest (add_edge a w b (ind E'))))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>E - E'.\n     \\<not> forest\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert x E'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>(a, w, b)\n             \\<in>edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E\\<rparr> -\n                  edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E'\\<rparr>.\n       \\<not> forest\n               (add_edge a w b\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>)", "using valid_graph.E_validD[OF vE]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>E - E'.\n     \\<not> forest\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert x E'\\<rparr>\n  (?v, ?e, ?v')\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr> \\<Longrightarrow>\n  ?v \\<in> nodes\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr>\n  (?v, ?e, ?v')\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr> \\<Longrightarrow>\n  ?v'\n  \\<in> nodes\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>(a, w, b)\n             \\<in>edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E\\<rparr> -\n                  edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E'\\<rparr>.\n       \\<not> forest\n               (add_edge a w b\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>)", "by(auto simp: add_edge_def insert_absorb)"], ["proof (state)\nthis:\n  \\<forall>(a, w, b)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr> -\n                edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>.\n     \\<not> forest\n             (add_edge a w b\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E'\\<rparr>)\n\ngoal (2 subgoals):\n 1. s.SpanningForest E' \\<Longrightarrow>\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have mc: \"maximally_connected (ind E') (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maximally_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "apply(rule valid_graph.forest_maximally_connected_incl_max1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. valid_graph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n 3. subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 4. \\<forall>(a, w, b)\n             \\<in>edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E\\<rparr> -\n                  edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E'\\<rparr>.\n       \\<not> forest\n               (add_edge a w b\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>)", "by fact+"], ["proof (state)\nthis:\n  maximally_connected\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (2 subgoals):\n 1. s.SpanningForest E' \\<Longrightarrow>\n    spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "show \" spanning_forest (ind E') (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "unfolding spanning_forest_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr> \\<and>\n    maximally_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "using f sub mc"], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  maximally_connected\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr> \\<and>\n    maximally_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<and>\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by blast"], ["proof (state)\nthis:\n  spanning_forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "assume t: \"spanning_forest (ind E') (ind E)\""], ["proof (state)\nthis:\n  spanning_forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have  f: \"(forest (ind E'))\" and sub: \"subgraph (ind E') (ind E)\" and\n        n: \"maximally_connected (ind E') (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr> &&&\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> &&&\n    maximally_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "using t[unfolded spanning_forest_def]"], ["proof (prove)\nusing this:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr> \\<and>\n  maximally_connected\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E\\<rparr> \\<and>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr> &&&\n    subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> &&&\n    maximally_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  maximally_connected\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have i: \"\\<And>x. x\\<in>E-E' \\<Longrightarrow> subgraph (ind ( insert x E')) (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> E - E' \\<Longrightarrow>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert x E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr>", "using sub"], ["proof (prove)\nusing this:\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> E - E' \\<Longrightarrow>\n       subgraph\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert x E'\\<rparr>\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr>", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr> =\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E\\<rparr> \\<and>\n  edges\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n  \\<subseteq> edges\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> E - E' \\<Longrightarrow>\n       nodes\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert x E'\\<rparr> =\n       nodes\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = E\\<rparr> \\<and>\n       edges\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = insert x E'\\<rparr>\n       \\<subseteq> edges\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = E\\<rparr>", "by auto"], ["proof (state)\nthis:\n  ?x1 \\<in> E - E' \\<Longrightarrow>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert ?x1 E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have vE: \"valid_graph (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "apply(rule ind_valid_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  valid_graph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have \"\\<forall>(a, w, b)\\<in>edges (ind E) - edges (ind E'). \\<not> forest (add_edge a w b (ind E'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(a, w, b)\n             \\<in>edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E\\<rparr> -\n                  edges\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E'\\<rparr>.\n       \\<not> forest\n               (add_edge a w b\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>)", "apply(rule valid_graph.forest_maximally_connected_incl_max2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. valid_graph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 2. forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n 3. subgraph\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>\n 4. maximally_connected\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by fact+"], ["proof (state)\nthis:\n  \\<forall>(a, w, b)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr> -\n                edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>.\n     \\<not> forest\n             (add_edge a w b\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E'\\<rparr>)\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "then"], ["proof (chain)\npicking this:\n  \\<forall>(a, w, b)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr> -\n                edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>.\n     \\<not> forest\n             (add_edge a w b\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E'\\<rparr>)", "have t: \"\\<And>a w b. (a, w, b)\\<in>edges (ind E) - edges (ind E')\n                   \\<Longrightarrow> \\<not> forest (add_edge a w b (ind E'))\""], ["proof (prove)\nusing this:\n  \\<forall>(a, w, b)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr> -\n                edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>.\n     \\<not> forest\n             (add_edge a w b\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E'\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a w b.\n       (a, w, b)\n       \\<in> edges\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E\\<rparr> -\n             edges\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E'\\<rparr> \\<Longrightarrow>\n       \\<not> forest\n               (add_edge a w b\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>)", "by blast"], ["proof (state)\nthis:\n  (?a1, ?w1, ?b1)\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr> -\n        edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E'\\<rparr> \\<Longrightarrow>\n  \\<not> forest\n          (add_edge ?a1 ?w1 ?b1\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E'\\<rparr>)\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "have ii: \"(\\<forall>x\\<in>E - E'.  \\<not> (forest (ind ( insert x E'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>E - E'.\n       \\<not> forest\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = insert x E'\\<rparr>", "apply (auto simp: add_edge_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>(a, aa, b) \\<in> E; (a, aa, b) \\<notin> E';\n        forest\n         \\<lparr>nodes = fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n            edges = insert (a, aa, b) E'\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> False", "subgoal for a w b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, w, b) \\<in> E; (a, w, b) \\<notin> E';\n     forest\n      \\<lparr>nodes = fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n         edges = insert (a, w, b) E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> False", "using t[of a w b] valid_graph.E_validD[OF vE]"], ["proof (prove)\nusing this:\n  (a, w, b)\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr> -\n        edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E'\\<rparr> \\<Longrightarrow>\n  \\<not> forest\n          (add_edge a w b\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E'\\<rparr>)\n  (?v, ?e, ?v')\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr> \\<Longrightarrow>\n  ?v \\<in> nodes\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr>\n  (?v, ?e, ?v')\n  \\<in> edges\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr> \\<Longrightarrow>\n  ?v'\n  \\<in> nodes\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, w, b) \\<in> E; (a, w, b) \\<notin> E';\n     forest\n      \\<lparr>nodes = fst ` E \\<union> (\\<lambda>x. snd (snd x)) ` E,\n         edges = insert (a, w, b) E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> False", "by(auto simp: add_edge_def insert_absorb)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>E - E'.\n     \\<not> forest\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert x E'\\<rparr>\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "from i ii"], ["proof (chain)\npicking this:\n  ?x1 \\<in> E - E' \\<Longrightarrow>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert ?x1 E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  \\<forall>x\\<in>E - E'.\n     \\<not> forest\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert x E'\\<rparr>", "have \n      iii: \"(\\<forall>x\\<in>E - E'. \\<not>(forest (ind ( insert x E')) \\<and> subgraph (ind ( insert x E')) (ind E)))\""], ["proof (prove)\nusing this:\n  ?x1 \\<in> E - E' \\<Longrightarrow>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = insert ?x1 E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  \\<forall>x\\<in>E - E'.\n     \\<not> forest\n             \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                edges = insert x E'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>E - E'.\n       \\<not> (forest\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = insert x E'\\<rparr> \\<and>\n               subgraph\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = insert x E'\\<rparr>\n                \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                   edges = E\\<rparr>)", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>E - E'.\n     \\<not> (forest\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr> \\<and>\n             subgraph\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr>\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E\\<rparr>)\n\ngoal (1 subgoal):\n 1. spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr> \\<Longrightarrow>\n    s.SpanningForest E'", "show \"s.SpanningForest E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s.SpanningForest E'", "unfolding s.SpanningForest_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E'\\<rparr> \\<and>\n     subgraph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E'\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr>) \\<and>\n    (\\<forall>x\\<in>E - E'.\n        \\<not> (forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert x E'\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert x E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>))", "using iii f sub"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>E - E'.\n     \\<not> (forest\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr> \\<and>\n             subgraph\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = insert x E'\\<rparr>\n              \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                 edges = E\\<rparr>)\n  forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n  subgraph\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. (forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E'\\<rparr> \\<and>\n     subgraph\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E'\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr>) \\<and>\n    (\\<forall>x\\<in>E - E'.\n        \\<not> (forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert x E'\\<rparr> \\<and>\n                subgraph\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = insert x E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>))", "by blast"], ["proof (state)\nthis:\n  s.SpanningForest E'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma edge_weight_alt: \"edge_weight G = sum (\\<lambda>(u,w,v). w) (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_weight G = (\\<Sum>(u, w, v)\\<in>edges G. w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. edge_weight G = (\\<Sum>(u, w, v)\\<in>edges G. w)", "have f: \"fst o snd  = (\\<lambda>(u,w,v). w) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<circ> snd = (\\<lambda>(u, w, v). w)", "by auto"], ["proof (state)\nthis:\n  fst \\<circ> snd = (\\<lambda>(u, w, v). w)\n\ngoal (1 subgoal):\n 1. edge_weight G = (\\<Sum>(u, w, v)\\<in>edges G. w)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_weight G = (\\<Sum>(u, w, v)\\<in>edges G. w)", "unfolding edge_weight_def f"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(u, w, v)\\<in>edges G. w) = (\\<Sum>(u, w, v)\\<in>edges G. w)", "by (auto cong: )"], ["proof (state)\nthis:\n  edge_weight G = (\\<Sum>(u, w, v)\\<in>edges G. w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MSF_eq: \"s.MSF E' = minimum_spanning_forest (ind E') (ind E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s.MSF E' =\n    minimum_spanning_forest\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E'\\<rparr>\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "unfolding s.MSF_def minimum_spanning_forest_def optimal_forest_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s.SpanningForest E' \\<and>\n     (\\<forall>B'.\n         s.SpanningForest B' \\<longrightarrow>\n         (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w))) =\n    (spanning_forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E'\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr> \\<and>\n     (\\<forall>F'.\n         spanning_forest F'\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E\\<rparr> \\<longrightarrow>\n         edge_weight\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E'\\<rparr>\n         \\<le> edge_weight F'))", "unfolding spanning_forest_eq edge_weight_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. (spanning_forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E'\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr> \\<and>\n     (\\<forall>B'.\n         spanning_forest\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = B'\\<rparr>\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E\\<rparr> \\<longrightarrow>\n         (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w))) =\n    (spanning_forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E'\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr> \\<and>\n     (\\<forall>F'.\n         spanning_forest F'\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = E\\<rparr> \\<longrightarrow>\n         (\\<Sum>(u, w, v)\n                \\<in>edges\n                      \\<lparr>nodes =\n                                fst ` E \\<union> (snd \\<circ> snd) ` E,\n                         edges = E'\\<rparr>.\n            w)\n         \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)))", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>F'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>B'.\n           spanning_forest\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = B'\\<rparr>\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w);\n        spanning_forest F'\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\n                                \\<in>edges\n\\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E'\\<rparr>.\n                            w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)\n 2. \\<And>B'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>F'.\n           spanning_forest F'\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\n                  \\<in>edges\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E'\\<rparr>.\n              w)\n           \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w);\n        spanning_forest\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = B'\\<rparr>\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\\<in>E'. w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)", "fix F'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>F'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>B'.\n           spanning_forest\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = B'\\<rparr>\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w);\n        spanning_forest F'\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\n                                \\<in>edges\n\\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E'\\<rparr>.\n                            w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)\n 2. \\<And>B'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>F'.\n           spanning_forest F'\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\n                  \\<in>edges\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E'\\<rparr>.\n              w)\n           \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w);\n        spanning_forest\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = B'\\<rparr>\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\\<in>E'. w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)", "assume \"spanning_forest (ind E') (ind E)\"\n      and B: \"(\\<forall>B'. spanning_forest (ind B') (ind E)\n             \\<longrightarrow> (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w))\"\n      and sf: \"spanning_forest F' (ind E)\""], ["proof (state)\nthis:\n  spanning_forest\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E'\\<rparr>\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  \\<forall>B'.\n     spanning_forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = B'\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr> \\<longrightarrow>\n     (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)\n  spanning_forest F'\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>F'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>B'.\n           spanning_forest\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = B'\\<rparr>\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w);\n        spanning_forest F'\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\n                                \\<in>edges\n\\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E'\\<rparr>.\n                            w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)\n 2. \\<And>B'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>F'.\n           spanning_forest F'\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\n                  \\<in>edges\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E'\\<rparr>.\n              w)\n           \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w);\n        spanning_forest\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = B'\\<rparr>\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\\<in>E'. w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)", "from sf"], ["proof (chain)\npicking this:\n  spanning_forest F'\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>", "have \"subgraph F' (ind E)\""], ["proof (prove)\nusing this:\n  spanning_forest F'\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. subgraph F'\n     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n        edges = E\\<rparr>", "by(auto simp: spanning_forest_def)"], ["proof (state)\nthis:\n  subgraph F'\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>F'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>B'.\n           spanning_forest\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = B'\\<rparr>\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w);\n        spanning_forest F'\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\n                                \\<in>edges\n\\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E'\\<rparr>.\n                            w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)\n 2. \\<And>B'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>F'.\n           spanning_forest F'\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\n                  \\<in>edges\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E'\\<rparr>.\n              w)\n           \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w);\n        spanning_forest\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = B'\\<rparr>\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\\<in>E'. w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)", "then"], ["proof (chain)\npicking this:\n  subgraph F'\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>", "have \"F' = ind (edges F')\""], ["proof (prove)\nusing this:\n  subgraph F'\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. F' =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = edges F'\\<rparr>", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  nodes F' =\n  nodes\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = E\\<rparr> \\<and>\n  edges F'\n  \\<subseteq> edges\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. F' =\n    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n       edges = edges F'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  F' =\n  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n     edges = edges F'\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>F'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>B'.\n           spanning_forest\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = B'\\<rparr>\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w);\n        spanning_forest F'\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\n                                \\<in>edges\n\\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E'\\<rparr>.\n                            w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)\n 2. \\<And>B'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>F'.\n           spanning_forest F'\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\n                  \\<in>edges\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E'\\<rparr>.\n              w)\n           \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w);\n        spanning_forest\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = B'\\<rparr>\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\\<in>E'. w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)", "with B sf"], ["proof (chain)\npicking this:\n  \\<forall>B'.\n     spanning_forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = B'\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr> \\<longrightarrow>\n     (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)\n  spanning_forest F'\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  F' =\n  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n     edges = edges F'\\<rparr>", "show \"(\\<Sum>(u, w, v)\\<in>edges (ind E'). w) \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)\""], ["proof (prove)\nusing this:\n  \\<forall>B'.\n     spanning_forest\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = B'\\<rparr>\n      \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n         edges = E\\<rparr> \\<longrightarrow>\n     (\\<Sum>(u, w, v)\\<in>E'. w) \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)\n  spanning_forest F'\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E, edges = E\\<rparr>\n  F' =\n  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n     edges = edges F'\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<Sum>(u, w, v)\n           \\<in>edges\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>.\n       w)\n    \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>(u, w, v)\n         \\<in>edges\n               \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                  edges = E'\\<rparr>.\n     w)\n  \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w)\n\ngoal (1 subgoal):\n 1. \\<And>B'.\n       \\<lbrakk>spanning_forest\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E'\\<rparr>\n                 \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                    edges = E\\<rparr>;\n        \\<forall>F'.\n           spanning_forest F'\n            \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n               edges = E\\<rparr> \\<longrightarrow>\n           (\\<Sum>(u, w, v)\n                  \\<in>edges\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E'\\<rparr>.\n              w)\n           \\<le> (\\<Sum>(u, w, v)\\<in>edges F'. w);\n        spanning_forest\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = B'\\<rparr>\n         \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n            edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(u, w, v)\\<in>E'. w)\n                         \\<le> (\\<Sum>(u, w, v)\\<in>B'. w)", "qed auto"], ["", "lemma kruskal_correct:\n    \"<emp> kruskal (return L) (\\<lambda>(u,w,v). return (u,v)) ()\n      <\\<lambda>F. \\<up> (distinct F \\<and> set F \\<subseteq> E \\<and> minimum_spanning_forest (ind (set F)) (ind E))>\\<^sub>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> kruskal (return L) (\\<lambda>(u, w, v). return (u, v))\n           () <\\<lambda>r.\n                  \\<up>\n                   (distinct r \\<and>\n                    set r \\<subseteq> E \\<and>\n                    minimum_spanning_forest\n                     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                        edges = set r\\<rparr>\n                     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                        edges = E\\<rparr>)>\\<^sub>t", "using s.kruskal_correct_forest"], ["proof (prove)\nusing this:\n  <emp> kruskal (return L) (\\<lambda>(u, w, v). return (u, v))\n         () <\\<lambda>r.\n                \\<up>\n                 (distinct r \\<and>\n                  set r \\<subseteq> E \\<and>\n                  s.MSF (set (map id r)))>\\<^sub>t\n\ngoal (1 subgoal):\n 1. <emp> kruskal (return L) (\\<lambda>(u, w, v). return (u, v))\n           () <\\<lambda>r.\n                  \\<up>\n                   (distinct r \\<and>\n                    set r \\<subseteq> E \\<and>\n                    minimum_spanning_forest\n                     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                        edges = set r\\<rparr>\n                     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                        edges = E\\<rparr>)>\\<^sub>t", "unfolding MSF_eq"], ["proof (prove)\nusing this:\n  <emp> kruskal (return L) (\\<lambda>(u, w, v). return (u, v))\n         () <\\<lambda>r.\n                \\<up>\n                 (distinct r \\<and>\n                  set r \\<subseteq> E \\<and>\n                  minimum_spanning_forest\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = set (map id r)\\<rparr>\n                   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                      edges = E\\<rparr>)>\\<^sub>t\n\ngoal (1 subgoal):\n 1. <emp> kruskal (return L) (\\<lambda>(u, w, v). return (u, v))\n           () <\\<lambda>r.\n                  \\<up>\n                   (distinct r \\<and>\n                    set r \\<subseteq> E \\<and>\n                    minimum_spanning_forest\n                     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                        edges = set r\\<rparr>\n                     \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                        edges = E\\<rparr>)>\\<^sub>t", "by auto"], ["", "definition (in -) \"kruskal_algo L = kruskal (return L) (\\<lambda>(u,w,v). return (u,v)) ()\""], ["", "end"], ["", "subsection \\<open>Outside the locale\\<close>"], ["", "definition \"GD_from_list_\\<alpha>_weight L e = (case e of (u,w,v) \\<Rightarrow> w)\""], ["", "abbreviation \"GD_from_list_\\<alpha>_graph G L \\<equiv> \\<lparr>nodes=fst ` (set G) \\<union> (snd \\<circ> snd) ` (set G), edges=set L\\<rparr>\""], ["", "lemma corr: \"\n  <emp> kruskal_algo L\n     <\\<lambda>F. \\<up> (set F \\<subseteq> set L \\<and>               \n       minimum_spanning_forest (GD_from_list_\\<alpha>_graph L F) (GD_from_list_\\<alpha>_graph L L))>\\<^sub>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> kruskal_algo\n           L <\\<lambda>r.\n                 \\<up>\n                  (set r \\<subseteq> set L \\<and>\n                   minimum_spanning_forest (GD_from_list_\\<alpha>_graph L r)\n                    (GD_from_list_\\<alpha>_graph L L))>\\<^sub>t", "by(sep_auto heap: fromlist.kruskal_correct simp:  kruskal_algo_def  )"], ["", "lemma kruskal_correct: \"<emp> kruskal_algo L\n     <\\<lambda>F. \\<up> (set F \\<subseteq> set L \\<and>\n       spanning_forest (GD_from_list_\\<alpha>_graph L F) (GD_from_list_\\<alpha>_graph L L)\n      \\<and> (\\<forall>F'. spanning_forest (GD_from_list_\\<alpha>_graph L F') (GD_from_list_\\<alpha>_graph L L) \n               \\<longrightarrow>  sum (\\<lambda>(u,w,v). w) (set F) \\<le> sum (\\<lambda>(u,w,v). w) (set F')))>\\<^sub>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> kruskal_algo\n           L <\\<lambda>r.\n                 \\<up>\n                  (set r \\<subseteq> set L \\<and>\n                   spanning_forest (GD_from_list_\\<alpha>_graph L r)\n                    (GD_from_list_\\<alpha>_graph L L) \\<and>\n                   (\\<forall>F'.\n                       spanning_forest (GD_from_list_\\<alpha>_graph L F')\n                        (GD_from_list_\\<alpha>_graph L L) \\<longrightarrow>\n                       (\\<Sum>(u, w, v)\\<in>set r. w)\n                       \\<le> (\\<Sum>(u, w, v)\\<in>set F'. w)))>\\<^sub>t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. <emp> kruskal_algo\n           L <\\<lambda>r.\n                 \\<up>\n                  (set r \\<subseteq> set L \\<and>\n                   spanning_forest (GD_from_list_\\<alpha>_graph L r)\n                    (GD_from_list_\\<alpha>_graph L L) \\<and>\n                   (\\<forall>F'.\n                       spanning_forest (GD_from_list_\\<alpha>_graph L F')\n                        (GD_from_list_\\<alpha>_graph L L) \\<longrightarrow>\n                       (\\<Sum>(u, w, v)\\<in>set r. w)\n                       \\<le> (\\<Sum>(u, w, v)\\<in>set F'. w)))>\\<^sub>t", "interpret fromlist L"], ["proof (prove)\ngoal:\nNo subgoals!", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. <emp> kruskal_algo\n           L <\\<lambda>r.\n                 \\<up>\n                  (set r \\<subseteq> E \\<and>\n                   spanning_forest\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = set r\\<rparr>\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = E\\<rparr> \\<and>\n                   (\\<forall>F'.\n                       spanning_forest\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = set F'\\<rparr>\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E\\<rparr> \\<longrightarrow>\n                       (\\<Sum>(u, w, v)\\<in>set r. w)\n                       \\<le> (\\<Sum>(u, w, v)\\<in>set F'. w)))>\\<^sub>t", "have *: \"\\<And>F'. edge_weight (ind F') = sum (\\<lambda>(u,w,v). w) F'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F'.\n       edge_weight\n        \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n           edges = F'\\<rparr> =\n       (\\<Sum>(u, w, v)\\<in>F'. w)", "unfolding edge_weight_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F'.\n       sum (fst \\<circ> snd)\n        (edges\n          \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n             edges = F'\\<rparr>) =\n       (\\<Sum>(u, w, v)\\<in>F'. w)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F'.\n       (\\<Sum>x\\<in>F'. fst (snd x)) =\n       (\\<Sum>x\\<in>F'. case x of (u, w, v) \\<Rightarrow> w)", "by (metis fn_snd_conv fst_def)"], ["proof (state)\nthis:\n  edge_weight\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = ?F'1\\<rparr> =\n  (\\<Sum>(u, w, v)\\<in>?F'1. w)\n\ngoal (1 subgoal):\n 1. <emp> kruskal_algo\n           L <\\<lambda>r.\n                 \\<up>\n                  (set r \\<subseteq> E \\<and>\n                   spanning_forest\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = set r\\<rparr>\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = E\\<rparr> \\<and>\n                   (\\<forall>F'.\n                       spanning_forest\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = set F'\\<rparr>\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E\\<rparr> \\<longrightarrow>\n                       (\\<Sum>(u, w, v)\\<in>set r. w)\n                       \\<le> (\\<Sum>(u, w, v)\\<in>set F'. w)))>\\<^sub>t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> kruskal_algo\n           L <\\<lambda>r.\n                 \\<up>\n                  (set r \\<subseteq> E \\<and>\n                   spanning_forest\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = set r\\<rparr>\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = E\\<rparr> \\<and>\n                   (\\<forall>F'.\n                       spanning_forest\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = set F'\\<rparr>\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E\\<rparr> \\<longrightarrow>\n                       (\\<Sum>(u, w, v)\\<in>set r. w)\n                       \\<le> (\\<Sum>(u, w, v)\\<in>set F'. w)))>\\<^sub>t", "using *"], ["proof (prove)\nusing this:\n  edge_weight\n   \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n      edges = ?F'1\\<rparr> =\n  (\\<Sum>(u, w, v)\\<in>?F'1. w)\n\ngoal (1 subgoal):\n 1. <emp> kruskal_algo\n           L <\\<lambda>r.\n                 \\<up>\n                  (set r \\<subseteq> E \\<and>\n                   spanning_forest\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = set r\\<rparr>\n                    \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                       edges = E\\<rparr> \\<and>\n                   (\\<forall>F'.\n                       spanning_forest\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = set F'\\<rparr>\n                        \\<lparr>nodes =\n                                  fst ` E \\<union> (snd \\<circ> snd) ` E,\n                           edges = E\\<rparr> \\<longrightarrow>\n                       (\\<Sum>(u, w, v)\\<in>set r. w)\n                       \\<le> (\\<Sum>(u, w, v)\\<in>set F'. w)))>\\<^sub>t", "by (sep_auto heap: corr simp: minimum_spanning_forest_def optimal_forest_def)"], ["proof (state)\nthis:\n  <emp> kruskal_algo\n         L <\\<lambda>r.\n               \\<up>\n                (set r \\<subseteq> E \\<and>\n                 spanning_forest\n                  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                     edges = set r\\<rparr>\n                  \\<lparr>nodes = fst ` E \\<union> (snd \\<circ> snd) ` E,\n                     edges = E\\<rparr> \\<and>\n                 (\\<forall>F'.\n                     spanning_forest\n                      \\<lparr>nodes =\n                                fst ` E \\<union> (snd \\<circ> snd) ` E,\n                         edges = set F'\\<rparr>\n                      \\<lparr>nodes =\n                                fst ` E \\<union> (snd \\<circ> snd) ` E,\n                         edges = E\\<rparr> \\<longrightarrow>\n                     (\\<Sum>(u, w, v)\\<in>set r. w)\n                     \\<le> (\\<Sum>(u, w, v)\\<in>set F'. w)))>\\<^sub>t\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Code export\\<close>"], ["", "export_code kruskal_algo checking SML_imp"], ["", "ML_val \\<open>\n  val export_nat = @{code integer_of_nat}\n  val import_nat = @{code nat_of_integer}\n  val export_int = @{code integer_of_int}\n  val import_int = @{code int_of_integer}\n  val import_list = map (fn (a,b,c) => (import_nat a, (import_int b, import_nat c)))\n  val export_list = map (fn (a,(b,c)) => (export_nat a, export_int b, export_nat c))\n  val export_Some_list = (fn SOME l => SOME (export_list l) | NONE => NONE)\n\n  fun kruskal l = @{code kruskal} (fn () => import_list l) (fn (a,(_,c)) => fn () => (a,c)) () ()\n                     |> export_list \n  fun kruskal_algo l = @{code kruskal_algo} (import_list l) ()  |> export_list\n\n  val result = kruskal [(1,~9,2),(2,~3,3),(3,~4,1)]\n  val result4 = kruskal [(1,~100,4), (3,64,5), (1,13,2), (3,20,2), (2,5,5), (4,80,3), (4,40,5)]\n\n  val result' = kruskal_algo [(1,~9,2),(2,~3,3),(3,~4,1)]\n  val result1' = kruskal_algo [(1,~9,2),(2,~3,3),(3,~4,1),(1,5,3)]\n  val result2' = kruskal_algo [(1,~9,2),(2,~3,3),(3,~4,1),(1,~4,3)]\n  val result3' = kruskal_algo [(1,~9,2),(2,~3,3),(3,~4,1),(1,~4,1)]\n  val result4' = kruskal_algo [(1,~100,4), (3,64,5), (1,13,2), (3,20,2), \n                               (2,5,5), (4,80,3), (4,40,5)]\n\\<close>"], ["", "end"]]}