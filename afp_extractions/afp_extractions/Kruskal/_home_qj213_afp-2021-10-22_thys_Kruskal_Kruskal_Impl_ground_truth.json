{"file_name": "/home/qj213/afp-2021-10-22/thys/Kruskal/Kruskal_Impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Kruskal", "problem_names": ["lemma wsorted_map\\<alpha>[simp]: \"wsorted' s \\<Longrightarrow> wsorted (map \\<alpha> s)\"", "lemma obtain_sorted_carrier'_refine:\n  \"(obtain_sorted_carrier', obtain_sorted_carrier) \\<in> \\<langle>\\<langle>concrete_edge_rel\\<rangle>list_rel\\<rangle>nres_rel\"", "lemma lst_graph_rel_empty[simp]: \"([], {}) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_set_rel\"", "lemma loop_initial_rel:\n  \"((per_init V, []), per_init V, {}) \\<in> Id \\<times>\\<^sub>r \\<langle>concrete_edge_rel\\<rangle>list_set_rel\"", "lemma concrete_edge_rel_list_set_rel:\n  \"(a, b) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_set_rel \\<Longrightarrow> \\<alpha> ` (set a) = b\"", "theorem kruskal2_refine: \"(kruskal2, kruskal1)\\<in>\\<langle>\\<langle>concrete_edge_rel\\<rangle>list_set_rel\\<rangle>nres_rel\"", "lemma this_loc: \"Kruskal_Impl E V vertices  joins  forest connected  weight\n            \\<alpha> endpoints getEdges getEdges_impl superE    endpoints_impl\"", "lemma wsorted'_sorted_wrt_edges_less_eq:\n    assumes \"\\<forall>(a,wv,b)\\<in>set s.  weight (\\<alpha> (a,wv,b)) = wv\"\n        \"sorted_wrt edges_less_eq s\"\n    shows \"wsorted' s\"", "lemma obtain_sorted_carrier''_refine:\n    \"(obtain_sorted_carrier'', obtain_sorted_carrier') \\<in> \\<langle>Id\\<rangle>nres_rel\"", "lemma obtain_sorted_carrier'''_refine:\n    \"(obtain_sorted_carrier''', obtain_sorted_carrier'') \\<in> \\<langle>add_size_rel\\<rangle>nres_rel\"", "lemmas osc_refine =  obtain_sorted_carrier'''_refine[FCOMP obtain_sorted_carrier''_refine,\n                                                        to_foparam, simplified]", "lemma endpoints_spec: \"endpoints ce \\<le> SPEC (\\<lambda>_. True)\"", "lemma  kruskal3_subset:\n    shows \"kruskal3 \\<le>\\<^sub>n SPEC (\\<lambda>T. distinct T \\<and> set T \\<subseteq> superE )\"", "lemma per_supset_rel_dom: \"(p1, p2) \\<in> per_supset_rel \\<Longrightarrow> Domain p1 \\<supseteq> Domain p2\"", "lemma per_supset_compare:\n    \"(p1, p2) \\<in> per_supset_rel \\<Longrightarrow> x1\\<in>Domain p2 \\<Longrightarrow> x2\\<in>Domain p2\n       \\<Longrightarrow> per_compare p1 x1 x2 \\<longleftrightarrow> per_compare p2 x1 x2\"", "lemma per_supset_union: \"(p1, p2) \\<in> per_supset_rel \\<Longrightarrow> x1\\<in>Domain p2 \\<Longrightarrow> x2\\<in>Domain p2 \\<Longrightarrow>\n    (per_union p1 x1 x2, per_union p2 x1 x2) \\<in> per_supset_rel\"", "lemma per_initN_refine: \"(per_init' (Max (insert 0 V) + 1), per_init V) \\<in> per_supset_rel\"", "theorem kruskal3_refine: \"(kruskal3, kruskal2)\\<in>\\<langle>Id\\<rangle>nres_rel\"", "lemma [sepref_import_param]: \"(sort_edges,sort_edges)\\<in>\\<langle>Id\\<times>\\<^sub>rId\\<times>\\<^sub>rId\\<rangle>list_rel \\<rightarrow>\\<langle>Id\\<times>\\<^sub>rId\\<times>\\<^sub>rId\\<rangle>list_rel\"", "lemma [sepref_import_param]: \"(max_node, max_node) \\<in> \\<langle>Id\\<times>\\<^sub>rId\\<times>\\<^sub>rId\\<rangle>list_rel \\<rightarrow> nat_rel\"", "lemmas kruskal_refine = kruskal.refine[OF this_loc]", "lemmas SpanningForest_def = basis_def", "lemmas MSF_def = minBasis_def", "lemmas kruskal3_ref_spec_ = kruskal3_refine[FCOMP kruskal2_refine, FCOMP kruskal1_refine,\n      FCOMP kruskal0_refine,\n      FCOMP minWeightBasis_refine]", "lemma kruskal3_ref_spec':\n    \"(uncurry0 kruskal3, uncurry0 (SPEC (\\<lambda>r. MSF (\\<alpha> ` set r)))) \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>Id\\<rangle>nres_rel\"", "lemma kruskal3_ref_spec:\n   \"(uncurry0 kruskal3,\n      uncurry0 (SPEC (\\<lambda>r. distinct r \\<and> set r \\<subseteq> superE \\<and>  MSF (\\<alpha> ` set r))))\n      \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>Id\\<rangle>nres_rel\"", "lemma [fcomp_norm_simps]: \"list_assn (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn) = id_assn\"", "lemmas kruskal_ref_spec = kruskal_refine[FCOMP kruskal3_ref_spec]", "lemma kruskal_correct_forest:\n    shows \"<emp> kruskal getEdges_impl endpoints_impl ()\n             <\\<lambda>r. \\<up>( distinct r \\<and> set r \\<subseteq> superE \\<and> MSF (set (map \\<alpha> r)))>\\<^sub>t\""], "translations": [["", "lemma wsorted_map\\<alpha>[simp]: \"wsorted' s \\<Longrightarrow> wsorted (map \\<alpha> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wsorted' s \\<Longrightarrow> wsorted (map \\<alpha> s)", "by(auto simp: wsorted'_def sorted_wrt_map)"], ["", "definition \"obtain_sorted_carrier' == SPEC (\\<lambda>L. wsorted' L \\<and> \\<alpha> ` set L = E)\""], ["", "abbreviation concrete_edge_rel :: \"('cedge  \\<times> 'edge) set\" where\n  \"concrete_edge_rel \\<equiv> br \\<alpha> (\\<lambda>_. True)\""], ["", "lemma obtain_sorted_carrier'_refine:\n  \"(obtain_sorted_carrier', obtain_sorted_carrier) \\<in> \\<langle>\\<langle>concrete_edge_rel\\<rangle>list_rel\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (obtain_sorted_carrier', obtain_sorted_carrier)\n    \\<in> \\<langle>\\<langle>concrete_edge_rel\\<rangle>list_rel\\<rangle>nres_rel", "unfolding obtain_sorted_carrier'_def obtain_sorted_carrier_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SPEC (\\<lambda>L. wsorted' L \\<and> \\<alpha> ` set L = E),\n     SPEC (\\<lambda>L. wsorted L \\<and> set L = E))\n    \\<in> \\<langle>\\<langle>concrete_edge_rel\\<rangle>list_rel\\<rangle>nres_rel", "apply refine_vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. SPEC (\\<lambda>L. wsorted' L \\<and> \\<alpha> ` set L = E)\n    \\<le> \\<Down> (\\<langle>concrete_edge_rel\\<rangle>list_rel)\n           (SPEC (\\<lambda>L. wsorted L \\<and> set L = E))", "apply (auto intro!: RES_refine simp:     )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>wsorted' s; E = \\<alpha> ` set s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'.\n                            wsorted s' \\<and>\n                            set s' = \\<alpha> ` set s \\<and>\n                            (s, s')\n                            \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wsorted' s; E = \\<alpha> ` set s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s'.\n                         wsorted s' \\<and>\n                         set s' = \\<alpha> ` set s \\<and>\n                         (s, s')\n                         \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel", "apply(rule exI[where x=\"map \\<alpha> s\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wsorted' s; E = \\<alpha> ` set s\\<rbrakk>\n    \\<Longrightarrow> wsorted (map \\<alpha> s) \\<and>\n                      set (map \\<alpha> s) = \\<alpha> ` set s \\<and>\n                      (s, map \\<alpha> s)\n                      \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel", "by(auto simp: map_in_list_rel_conv in_br_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition kruskal2\n  where \"kruskal2 \\<equiv> do {\n    l \\<leftarrow> obtain_sorted_carrier';\n    let initial_union_find = per_init V;\n    (per, spanning_forest) \\<leftarrow> nfoldli l (\\<lambda>_. True)\n        (\\<lambda>ce (uf, T). do { \n            ASSERT (\\<alpha> ce \\<in> E);\n            (a,b) \\<leftarrow> endpoints ce;\n            ASSERT (a\\<in>V \\<and> b\\<in>V \\<and> a \\<in> Domain uf \\<and> b \\<in> Domain uf );\n            if \\<not> per_compare uf a b then\n              do { \n                let uf = per_union uf a b;\n                ASSERT (ce \\<notin> set T);\n                RETURN (uf, T@[ce])\n              }\n            else \n              RETURN (uf,T)\n        }) (initial_union_find, []);\n        RETURN spanning_forest\n      }\""], ["", "lemma lst_graph_rel_empty[simp]: \"([], {}) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_set_rel", "unfolding list_set_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {})\n    \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel O br set distinct", "apply(rule relcompI[where b=\"[]\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ([], []) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel\n 2. ([], {}) \\<in> br set distinct", "by (auto simp add: in_br_conv)"], ["", "lemma loop_initial_rel:\n  \"((per_init V, []), per_init V, {}) \\<in> Id \\<times>\\<^sub>r \\<langle>concrete_edge_rel\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((per_init V, []), per_init V, {})\n    \\<in> Id \\<times>\\<^sub>r\n          \\<langle>concrete_edge_rel\\<rangle>list_set_rel", "by simp"], ["", "lemma concrete_edge_rel_list_set_rel:\n  \"(a, b) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_set_rel \\<Longrightarrow> \\<alpha> ` (set a) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b)\n    \\<in> \\<langle>concrete_edge_rel\\<rangle>list_set_rel \\<Longrightarrow>\n    \\<alpha> ` set a = b", "by (auto simp: in_br_conv list_set_rel_def dest: list_relD2)"], ["", "theorem kruskal2_refine: \"(kruskal2, kruskal1)\\<in>\\<langle>\\<langle>concrete_edge_rel\\<rangle>list_set_rel\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (kruskal2, kruskal1)\n    \\<in> \\<langle>\\<langle>concrete_edge_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "unfolding kruskal1_def kruskal2_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (obtain_sorted_carrier' \\<bind>\n     (\\<lambda>l.\n         nfoldli l (\\<lambda>_. True)\n          (\\<lambda>ce (uf, T).\n              ASSERT (\\<alpha> ce \\<in> E) \\<bind>\n              (\\<lambda>_.\n                  endpoints ce \\<bind>\n                  (\\<lambda>(a, b).\n                      ASSERT\n                       (a \\<in> V \\<and>\n                        b \\<in> V \\<and>\n                        a \\<in> Domain uf \\<and> b \\<in> Domain uf) \\<bind>\n                      (\\<lambda>_.\n                          if \\<not> per_compare uf a b\n                          then ASSERT (ce \\<notin> set T) \\<bind>\n                               (\\<lambda>_.\n                                   RETURN (per_union uf a b, T @ [ce]))\n                          else RETURN (uf, T)))))\n          (per_init V, []) \\<bind>\n         (\\<lambda>(per, y). RETURN y)),\n     obtain_sorted_carrier \\<bind>\n     (\\<lambda>l.\n         nfoldli l (\\<lambda>_. True)\n          (\\<lambda>e (uf, T).\n              ASSERT (e \\<in> E) \\<bind>\n              (\\<lambda>_.\n                  a_endpoints e \\<bind>\n                  (\\<lambda>(a, b).\n                      ASSERT\n                       (a \\<in> V \\<and>\n                        b \\<in> V \\<and>\n                        a \\<in> Domain uf \\<and>\n                        b \\<in> Domain uf \\<and> T \\<subseteq> E) \\<bind>\n                      (\\<lambda>_.\n                          if \\<not> per_compare uf a b\n                          then ASSERT (e \\<notin> T) \\<bind>\n                               (\\<lambda>_.\n                                   RETURN (per_union uf a b, insert e T))\n                          else RETURN (uf, T)))))\n          (per_init V, {}) \\<bind>\n         (\\<lambda>(per, y). RETURN y)))\n    \\<in> \\<langle>\\<langle>concrete_edge_rel\\<rangle>list_set_rel\\<rangle>nres_rel", "apply (refine_rcg obtain_sorted_carrier'_refine[THEN nres_relD]\n                    endpoints_refine loop_initial_rel)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>l la.\n       (l, la)\n       \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel \\<Longrightarrow>\n       (l, la) \\<in> \\<langle>?S5 l la\\<rangle>list_rel\n 2. \\<And>l la a a'.\n       \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n        (a, a')\n        \\<in> Id \\<times>\\<^sub>r\n              \\<langle>concrete_edge_rel\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 3. \\<And>l la xi x si s x1 x2 x1a x2a.\n       \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n        (xi, x) \\<in> ?S5 l la;\n        (si, s)\n        \\<in> Id \\<times>\\<^sub>r\n              \\<langle>concrete_edge_rel\\<rangle>list_set_rel;\n        True; s = (x1, x2); si = (x1a, x2a); x \\<in> E\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> xi \\<in> E\n 4. \\<And>l la xi x si s x1 x2 x1a x2a.\n       \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n        (xi, x) \\<in> ?S5 l la;\n        (si, s)\n        \\<in> Id \\<times>\\<^sub>r\n              \\<langle>concrete_edge_rel\\<rangle>list_set_rel;\n        True; s = (x1, x2); si = (x1a, x2a); x \\<in> E;\n        \\<alpha> xi \\<in> E\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> xi = x\n 5. \\<And>l la xi x si s x1 x2 x1a x2a xa x' x1b x2b x1c x2c.\n       \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n        (xi, x) \\<in> ?S5 l la;\n        (si, s)\n        \\<in> Id \\<times>\\<^sub>r\n              \\<langle>concrete_edge_rel\\<rangle>list_set_rel;\n        True; s = (x1, x2); si = (x1a, x2a); x \\<in> E; \\<alpha> xi \\<in> E;\n        (xa, x') \\<in> Id; x' \\<in> {(a, b). joins a b x}; x' = (x1b, x2b);\n        xa = (x1c, x2c);\n        x1b \\<in> V \\<and>\n        x2b \\<in> V \\<and>\n        x1b \\<in> Domain x1 \\<and>\n        x2b \\<in> Domain x1 \\<and> x2 \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x1c \\<in> V\n 6. \\<And>l la xi x si s x1 x2 x1a x2a xa x' x1b x2b x1c x2c.\n       \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n        (xi, x) \\<in> ?S5 l la;\n        (si, s)\n        \\<in> Id \\<times>\\<^sub>r\n              \\<langle>concrete_edge_rel\\<rangle>list_set_rel;\n        True; s = (x1, x2); si = (x1a, x2a); x \\<in> E; \\<alpha> xi \\<in> E;\n        (xa, x') \\<in> Id; x' \\<in> {(a, b). joins a b x}; x' = (x1b, x2b);\n        xa = (x1c, x2c);\n        x1b \\<in> V \\<and>\n        x2b \\<in> V \\<and>\n        x1b \\<in> Domain x1 \\<and>\n        x2b \\<in> Domain x1 \\<and> x2 \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2c \\<in> V\n 7. \\<And>l la xi x si s x1 x2 x1a x2a xa x' x1b x2b x1c x2c.\n       \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n        (xi, x) \\<in> ?S5 l la;\n        (si, s)\n        \\<in> Id \\<times>\\<^sub>r\n              \\<langle>concrete_edge_rel\\<rangle>list_set_rel;\n        True; s = (x1, x2); si = (x1a, x2a); x \\<in> E; \\<alpha> xi \\<in> E;\n        (xa, x') \\<in> Id; x' \\<in> {(a, b). joins a b x}; x' = (x1b, x2b);\n        xa = (x1c, x2c);\n        x1b \\<in> V \\<and>\n        x2b \\<in> V \\<and>\n        x1b \\<in> Domain x1 \\<and>\n        x2b \\<in> Domain x1 \\<and> x2 \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x1c \\<in> Domain x1a\n 8. \\<And>l la xi x si s x1 x2 x1a x2a xa x' x1b x2b x1c x2c.\n       \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n        (xi, x) \\<in> ?S5 l la;\n        (si, s)\n        \\<in> Id \\<times>\\<^sub>r\n              \\<langle>concrete_edge_rel\\<rangle>list_set_rel;\n        True; s = (x1, x2); si = (x1a, x2a); x \\<in> E; \\<alpha> xi \\<in> E;\n        (xa, x') \\<in> Id; x' \\<in> {(a, b). joins a b x}; x' = (x1b, x2b);\n        xa = (x1c, x2c);\n        x1b \\<in> V \\<and>\n        x2b \\<in> V \\<and>\n        x1b \\<in> Domain x1 \\<and>\n        x2b \\<in> Domain x1 \\<and> x2 \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> x2c \\<in> Domain x1a\n 9. \\<And>l la xi x si s x1 x2 x1a x2a xa x' x1b x2b x1c x2c.\n       \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n        (xi, x) \\<in> ?S5 l la;\n        (si, s)\n        \\<in> Id \\<times>\\<^sub>r\n              \\<langle>concrete_edge_rel\\<rangle>list_set_rel;\n        True; s = (x1, x2); si = (x1a, x2a); x \\<in> E; \\<alpha> xi \\<in> E;\n        (xa, x') \\<in> Id; x' \\<in> {(a, b). joins a b x}; x' = (x1b, x2b);\n        xa = (x1c, x2c);\n        x1b \\<in> V \\<and>\n        x2b \\<in> V \\<and>\n        x1b \\<in> Domain x1 \\<and>\n        x2b \\<in> Domain x1 \\<and> x2 \\<subseteq> E;\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> (\\<not> per_compare x1a x1c x2c) =\n                         (\\<not> per_compare x1 x1b x2b)\n 10. \\<And>l la xi x si s x1 x2 x1a x2a xa x' x1b x2b x1c x2c.\n        \\<lbrakk>(l, la) \\<in> \\<langle>concrete_edge_rel\\<rangle>list_rel;\n         (xi, x) \\<in> ?S5 l la;\n         (si, s)\n         \\<in> Id \\<times>\\<^sub>r\n               \\<langle>concrete_edge_rel\\<rangle>list_set_rel;\n         True; s = (x1, x2); si = (x1a, x2a); x \\<in> E;\n         \\<alpha> xi \\<in> E; (xa, x') \\<in> Id;\n         x' \\<in> {(a, b). joins a b x}; x' = (x1b, x2b); xa = (x1c, x2c);\n         x1b \\<in> V \\<and>\n         x2b \\<in> V \\<and>\n         x1b \\<in> Domain x1 \\<and>\n         x2b \\<in> Domain x1 \\<and> x2 \\<subseteq> E;\n         x1c \\<in> V \\<and>\n         x2c \\<in> V \\<and>\n         x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n         \\<not> per_compare x1a x1c x2c; \\<not> per_compare x1 x1b x2b;\n         x \\<notin> x2\\<rbrakk>\n        \\<Longrightarrow> xi \\<notin> set x2a\nA total of 13 subgoals...", "by (auto intro!: list_set_rel_append\n            dest: concrete_edge_rel_list_set_rel\n            simp: in_br_conv)"], ["", "end"], ["", "subsection \\<open>Refinement to Imperative/HOL with Sepref-Tool\\<close>"], ["", "text \\<open>Given implementations for the operations of getting a list of concrete edges \n  and getting the endpoints of a concrete edge we synthesize Kruskal in Imperative/HOL.\\<close>"], ["", "locale Kruskal_Impl = Kruskal_concrete E V vertices joins forest connected weight \\<alpha> endpoints                       \n  for E V vertices joins forest connected and weight :: \"'edge \\<Rightarrow> int\"\n    and \\<alpha> and endpoints :: \"nat \\<times> int \\<times> nat \\<Rightarrow> (nat \\<times> nat) nres\"\n    +\n  fixes getEdges  :: \"(nat \\<times> int \\<times> nat) list nres\"\n    and getEdges_impl :: \"(nat \\<times> int \\<times> nat) list Heap\"         \n    and superE :: \"(nat \\<times> int \\<times> nat) set\"         \n    and endpoints_impl :: \"(nat \\<times> int \\<times> nat) \\<Rightarrow> (nat \\<times> nat) Heap\"                    \n  assumes \n    getEdges_refine: \"getEdges \\<le> SPEC (\\<lambda>L. \\<alpha> ` set L = E \n                            \\<and> (\\<forall>(a,wv,b)\\<in>set L.  weight (\\<alpha> (a,wv,b)) = wv) \\<and> set L \\<subseteq> superE)\"\n    and\n    getEdges_impl: \"(uncurry0 getEdges_impl, uncurry0 getEdges)\n                     \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\"\n    and \n    max_node_is_Max_V: \"E = \\<alpha> ` set la \\<Longrightarrow> max_node la = Max (insert 0 V)\"\n    and\n    endpoints_impl: \"( endpoints_impl,  endpoints) \n                      \\<in> (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\\<^sup>k \\<rightarrow>\\<^sub>a (nat_assn \\<times>\\<^sub>a nat_assn)\"\nbegin"], ["", "lemma this_loc: \"Kruskal_Impl E V vertices  joins  forest connected  weight\n            \\<alpha> endpoints getEdges getEdges_impl superE    endpoints_impl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Kruskal_Impl E V vertices joins forest connected weight \\<alpha>\n     endpoints getEdges getEdges_impl superE endpoints_impl", "by unfold_locales"], ["", "subsubsection \\<open>Refinement IV: given an edge set\\<close>"], ["", "text \\<open>We now assume to have an implementation of the operation to obtain a list of the edges of\n    a graph. By sorting this list we refine @{term obtain_sorted_carrier'}.\\<close>"], ["", "definition \"obtain_sorted_carrier'' = do {\n      l \\<leftarrow> SPEC (\\<lambda>L.  \\<alpha> ` set L = E \n                              \\<and> (\\<forall>(a,wv,b)\\<in>set L.  weight (\\<alpha> (a,wv,b)) = wv) \\<and> set L \\<subseteq> superE);\n      SPEC (\\<lambda>L. sorted_wrt edges_less_eq L \\<and> set L = set l)\n  }\""], ["", "lemma wsorted'_sorted_wrt_edges_less_eq:\n    assumes \"\\<forall>(a,wv,b)\\<in>set s.  weight (\\<alpha> (a,wv,b)) = wv\"\n        \"sorted_wrt edges_less_eq s\"\n    shows \"wsorted' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wsorted' s", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>(a, wv, b)\\<in>set s. weight (\\<alpha> (a, wv, b)) = wv\n  sorted_wrt edges_less_eq s\n\ngoal (1 subgoal):\n 1. wsorted' s", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(a, wv, b)\\<in>set s.\n                weight (\\<alpha> (a, wv, b)) = wv;\n     sorted_wrt edges_less_eq s\\<rbrakk>\n    \\<Longrightarrow> wsorted' s", "unfolding wsorted'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(a, wv, b)\\<in>set s.\n                weight (\\<alpha> (a, wv, b)) = wv;\n     sorted_wrt edges_less_eq s\\<rbrakk>\n    \\<Longrightarrow> sorted_wrt\n                       (\\<lambda>x y.\n                           weight (\\<alpha> x) \\<le> weight (\\<alpha> y))\n                       s", "unfolding edges_less_eq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(a, wv, b)\\<in>set s.\n                weight (\\<alpha> (a, wv, b)) = wv;\n     sorted_wrt (\\<lambda>a b. fst (snd a) \\<le> fst (snd b)) s\\<rbrakk>\n    \\<Longrightarrow> sorted_wrt\n                       (\\<lambda>x y.\n                           weight (\\<alpha> x) \\<le> weight (\\<alpha> y))\n                       s", "apply(rule sorted_wrt_mono_rel )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>(a, wv, b)\\<in>set s.\n                   weight (\\<alpha> (a, wv, b)) = wv;\n        sorted_wrt (\\<lambda>a b. fst (snd a) \\<le> fst (snd b)) s;\n        x \\<in> set s; y \\<in> set s; ?P2 x y\\<rbrakk>\n       \\<Longrightarrow> weight (\\<alpha> x) \\<le> weight (\\<alpha> y)\n 2. \\<lbrakk>\\<forall>(a, wv, b)\\<in>set s.\n                weight (\\<alpha> (a, wv, b)) = wv;\n     sorted_wrt (\\<lambda>a b. fst (snd a) \\<le> fst (snd b)) s\\<rbrakk>\n    \\<Longrightarrow> sorted_wrt ?P2 s", "by (auto simp: case_prod_beta)"], ["", "lemma obtain_sorted_carrier''_refine:\n    \"(obtain_sorted_carrier'', obtain_sorted_carrier') \\<in> \\<langle>Id\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (obtain_sorted_carrier'', obtain_sorted_carrier')\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "unfolding obtain_sorted_carrier''_def obtain_sorted_carrier'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SPEC\n      (\\<lambda>L.\n          \\<alpha> ` set L = E \\<and>\n          (\\<forall>(a, wv, b)\\<in>set L.\n              weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n          set L \\<subseteq> superE) \\<bind>\n     (\\<lambda>l.\n         SPEC\n          (\\<lambda>L. sorted_wrt edges_less_eq L \\<and> set L = set l)),\n     SPEC (\\<lambda>L. wsorted' L \\<and> \\<alpha> ` set L = E))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "apply refine_vcg"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        sorted_wrt edges_less_eq xa \\<and> set xa = set x\\<rbrakk>\n       \\<Longrightarrow> wsorted' xa\n 2. \\<And>x xa.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        sorted_wrt edges_less_eq xa \\<and> set xa = set x\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> ` set xa = E", "apply(auto simp: in_br_conv   wsorted'_sorted_wrt_edges_less_eq\n        distinct_map map_in_list_rel_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"obtain_sorted_carrier''' =\n        do {\n      l \\<leftarrow> getEdges; \n      RETURN (quicksort_by_rel edges_less_eq [] l, max_node l)\n  }\""], ["", "definition \"add_size_rel   = br fst (\\<lambda>(l,n). n= Max (insert 0 V))\""], ["", "lemma obtain_sorted_carrier'''_refine:\n    \"(obtain_sorted_carrier''', obtain_sorted_carrier'') \\<in> \\<langle>add_size_rel\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (obtain_sorted_carrier''', obtain_sorted_carrier'')\n    \\<in> \\<langle>add_size_rel\\<rangle>nres_rel", "unfolding obtain_sorted_carrier'''_def obtain_sorted_carrier''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (getEdges \\<bind>\n     (\\<lambda>l. RETURN (quicksort_by_rel edges_less_eq [] l, max_node l)),\n     SPEC\n      (\\<lambda>L.\n          \\<alpha> ` set L = E \\<and>\n          (\\<forall>(a, wv, b)\\<in>set L.\n              weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n          set L \\<subseteq> superE) \\<bind>\n     (\\<lambda>l.\n         SPEC\n          (\\<lambda>L. sorted_wrt edges_less_eq L \\<and> set L = set l)))\n    \\<in> \\<langle>add_size_rel\\<rangle>nres_rel", "apply (refine_rcg getEdges_refine)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l la.\n       \\<lbrakk>(l, la) \\<in> Id;\n        la \\<in> {L. \\<alpha> ` set L = E \\<and>\n                     (\\<forall>(a, wv, b)\\<in>set L.\n                         weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                     set L \\<subseteq> superE}\\<rbrakk>\n       \\<Longrightarrow> RETURN\n                          (quicksort_by_rel edges_less_eq [] l, max_node l)\n                         \\<le> \\<Down> add_size_rel\n                                (SPEC\n                                  (\\<lambda>L.\nsorted_wrt edges_less_eq L \\<and> set L = set la))", "by (auto intro!: RETURN_SPEC_refine simp: quicksort_by_rel_distinct sort_edges_correct\n        add_size_rel_def in_br_conv  max_node_is_Max_V\n        dest!: distinct_mapI)"], ["", "lemmas osc_refine =  obtain_sorted_carrier'''_refine[FCOMP obtain_sorted_carrier''_refine,\n                                                        to_foparam, simplified]"], ["", "definition kruskal3 :: \"(nat \\<times> int \\<times> nat) list nres\"\n    where \"kruskal3  \\<equiv> do {\n      (sl,mn) \\<leftarrow> obtain_sorted_carrier''';\n      let initial_union_find = per_init' (mn + 1);\n      (per, spanning_forest) \\<leftarrow> nfoldli sl (\\<lambda>_. True)\n          (\\<lambda>ce (uf, T). do { \n              ASSERT (\\<alpha> ce \\<in> E);\n              (a,b) \\<leftarrow> endpoints ce;\n              ASSERT (a \\<in> Domain uf \\<and> b \\<in> Domain uf);\n              if \\<not> per_compare uf a b then\n                do { \n                  let uf = per_union uf a b;\n                  ASSERT (ce\\<notin>set T);\n                  RETURN (uf, T@[ce])\n                }\n              else \n                RETURN (uf,T)\n          }) (initial_union_find, []);\n          RETURN spanning_forest\n        }\""], ["", "lemma endpoints_spec: \"endpoints ce \\<le> SPEC (\\<lambda>_. True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. endpoints ce \\<le> SPEC (\\<lambda>_. True)", "by(rule order.trans[OF endpoints_refine], auto)"], ["", "lemma  kruskal3_subset:\n    shows \"kruskal3 \\<le>\\<^sub>n SPEC (\\<lambda>T. distinct T \\<and> set T \\<subseteq> superE )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kruskal3 \\<le>\\<^sub>n\n    SPEC (\\<lambda>T. distinct T \\<and> set T \\<subseteq> superE)", "unfolding kruskal3_def obtain_sorted_carrier'''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. getEdges \\<bind>\n    (\\<lambda>l.\n        RETURN (quicksort_by_rel edges_less_eq [] l, max_node l)) \\<bind>\n    (\\<lambda>(sl, mn).\n        let initial_union_find = per_init' (mn + 1)\n        in nfoldli sl (\\<lambda>_. True)\n            (\\<lambda>ce (uf, T).\n                ASSERT (\\<alpha> ce \\<in> E) \\<bind>\n                (\\<lambda>_.\n                    endpoints ce \\<bind>\n                    (\\<lambda>(a, b).\n                        ASSERT\n                         (a \\<in> Domain uf \\<and>\n                          b \\<in> Domain uf) \\<bind>\n                        (\\<lambda>_.\n                            if \\<not> per_compare uf a b\n                            then let uf = per_union uf a b\n                                 in ASSERT (ce \\<notin> set T) \\<bind>\n                                    (\\<lambda>_. RETURN (uf, T @ [ce]))\n                            else RETURN (uf, T)))))\n            (initial_union_find, []) \\<bind>\n           (\\<lambda>(per, spanning_forest).\n               RETURN spanning_forest)) \\<le>\\<^sub>n\n    SPEC (\\<lambda>T. distinct T \\<and> set T \\<subseteq> superE)", "apply (refine_vcg getEdges_refine[THEN leof_lift] endpoints_spec[THEN leof_lift]\n        nfoldli_leof_rule[where I=\"\\<lambda>_ _ (_, T). distinct T \\<and>  set T \\<subseteq> superE \"])"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x x1 x2 x1a x2a.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        (per_init' (x2 + 1), []) = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> distinct x2a\n 2. \\<And>x x1 x2 x1a x2a.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        (per_init' (x2 + 1), []) = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> set x2a \\<subseteq> superE\n 3. \\<And>x x1 x2 xa l1 l2 \\<sigma> x1a x2a xb x1b x2b x1c x2c.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        x1 = l1 @ xa # l2;\n        case \\<sigma> of\n        (uu_, T) \\<Rightarrow> distinct T \\<and> set T \\<subseteq> superE;\n        True; \\<sigma> = (x1a, x2a); \\<alpha> xa \\<in> E; True;\n        xb = (x1b, x2b); x1b \\<in> Domain x1a \\<and> x2b \\<in> Domain x1a;\n        \\<not> per_compare x1a x1b x2b; xa \\<notin> set x2a;\n        (per_union x1a x1b x2b, x2a @ [xa]) = (x1c, x2c)\\<rbrakk>\n       \\<Longrightarrow> distinct x2c\n 4. \\<And>x x1 x2 xa l1 l2 \\<sigma> x1a x2a xb x1b x2b x1c x2c.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        x1 = l1 @ xa # l2;\n        case \\<sigma> of\n        (uu_, T) \\<Rightarrow> distinct T \\<and> set T \\<subseteq> superE;\n        True; \\<sigma> = (x1a, x2a); \\<alpha> xa \\<in> E; True;\n        xb = (x1b, x2b); x1b \\<in> Domain x1a \\<and> x2b \\<in> Domain x1a;\n        \\<not> per_compare x1a x1b x2b; xa \\<notin> set x2a;\n        (per_union x1a x1b x2b, x2a @ [xa]) = (x1c, x2c)\\<rbrakk>\n       \\<Longrightarrow> set x2c \\<subseteq> superE\n 5. \\<And>x x1 x2 xa l1 l2 \\<sigma> x1a x2a xb x1b x2b x1c x2c.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        x1 = l1 @ xa # l2;\n        case \\<sigma> of\n        (uu_, T) \\<Rightarrow> distinct T \\<and> set T \\<subseteq> superE;\n        True; \\<sigma> = (x1a, x2a); \\<alpha> xa \\<in> E; True;\n        xb = (x1b, x2b); x1b \\<in> Domain x1a \\<and> x2b \\<in> Domain x1a;\n        \\<not> \\<not> per_compare x1a x1b x2b;\n        (x1a, x2a) = (x1c, x2c)\\<rbrakk>\n       \\<Longrightarrow> distinct x2c\n 6. \\<And>x x1 x2 xa l1 l2 \\<sigma> x1a x2a xb x1b x2b x1c x2c.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        x1 = l1 @ xa # l2;\n        case \\<sigma> of\n        (uu_, T) \\<Rightarrow> distinct T \\<and> set T \\<subseteq> superE;\n        True; \\<sigma> = (x1a, x2a); \\<alpha> xa \\<in> E; True;\n        xb = (x1b, x2b); x1b \\<in> Domain x1a \\<and> x2b \\<in> Domain x1a;\n        \\<not> \\<not> per_compare x1a x1b x2b;\n        (x1a, x2a) = (x1c, x2c)\\<rbrakk>\n       \\<Longrightarrow> set x2c \\<subseteq> superE\n 7. \\<And>x x1 x2 l1 l2 \\<sigma> x1a x2a.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        x1 = l1 @ l2;\n        case \\<sigma> of\n        (uu_, T) \\<Rightarrow> distinct T \\<and> set T \\<subseteq> superE;\n        \\<not> True; \\<sigma> = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> distinct x2a\n 8. \\<And>x x1 x2 l1 l2 \\<sigma> x1a x2a.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        x1 = l1 @ l2;\n        case \\<sigma> of\n        (uu_, T) \\<Rightarrow> distinct T \\<and> set T \\<subseteq> superE;\n        \\<not> True; \\<sigma> = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> set x2a \\<subseteq> superE\n 9. \\<And>x x1 x2 \\<sigma> x1a x2a.\n       \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                (\\<forall>(a, wv, b)\\<in>set x.\n                    weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                set x \\<subseteq> superE;\n        (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n        case \\<sigma> of\n        (uu_, T) \\<Rightarrow> distinct T \\<and> set T \\<subseteq> superE;\n        True; \\<sigma> = (x1a, x2a)\\<rbrakk>\n       \\<Longrightarrow> distinct x2a\n 10. \\<And>x x1 x2 \\<sigma> x1a x2a.\n        \\<lbrakk>\\<alpha> ` set x = E \\<and>\n                 (\\<forall>(a, wv, b)\\<in>set x.\n                     weight (\\<alpha> (a, wv, b)) = wv) \\<and>\n                 set x \\<subseteq> superE;\n         (quicksort_by_rel edges_less_eq [] x, max_node x) = (x1, x2);\n         case \\<sigma> of\n         (uu_, T) \\<Rightarrow> distinct T \\<and> set T \\<subseteq> superE;\n         True; \\<sigma> = (x1a, x2a)\\<rbrakk>\n        \\<Longrightarrow> set x2a \\<subseteq> superE", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa b l1 l2 x1a x2a x1b x2b ad ae bc bd be.\n       \\<lbrakk>quicksort_by_rel edges_less_eq [] x = l1 @ (a, aa, b) # l2;\n        (x1b, x2b) \\<notin> x1a; (a, aa, b) \\<notin> set x2a;\n        E = \\<alpha> ` set x; \\<alpha> (a, aa, b) = \\<alpha> (ad, ae, bc);\n        (ad, ae, bc) \\<in> set x; distinct x2a; set x2a \\<subseteq> superE;\n        (x1b, bd) \\<in> x1a; (x2b, be) \\<in> x1a;\n        \\<forall>x\\<in>set x.\n           case x of\n           (a, wv, b) \\<Rightarrow> weight (\\<alpha> (a, wv, b)) = wv;\n        set x \\<subseteq> superE\\<rbrakk>\n       \\<Longrightarrow> (a, aa, b) \\<in> superE", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>quicksort_by_rel edges_less_eq [] x_ =\n             l1_ @ (a_, aa_, b_) # l2_;\n     (x1b_, x2b_) \\<notin> x1a_; (a_, aa_, b_) \\<notin> set x2a_;\n     E = \\<alpha> ` set x_;\n     \\<alpha> (a_, aa_, b_) = \\<alpha> (ad_, ae_, bc_);\n     (ad_, ae_, bc_) \\<in> set x_; distinct x2a_;\n     set x2a_ \\<subseteq> superE; (x1b_, bd_) \\<in> x1a_;\n     (x2b_, be_) \\<in> x1a_;\n     \\<forall>x\\<in>set x_.\n        case x of\n        (a, wv, b) \\<Rightarrow> weight (\\<alpha> (a, wv, b)) = wv;\n     set x_ \\<subseteq> superE\\<rbrakk>\n    \\<Longrightarrow> (a_, aa_, b_) \\<in> superE", "by (metis append_self_conv in_set_conv_decomp set_quicksort_by_rel subset_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition per_supset_rel :: \"('a per \\<times> 'a per) set\" where\n    \"per_supset_rel\n      \\<equiv> {(p1,p2). p1 \\<inter> Domain p2 \\<times> Domain p2 = p2 \\<and> p1 - (Domain p2 \\<times> Domain p2) \\<subseteq> Id}\""], ["", "lemma per_supset_rel_dom: \"(p1, p2) \\<in> per_supset_rel \\<Longrightarrow> Domain p1 \\<supseteq> Domain p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p1, p2) \\<in> local.per_supset_rel \\<Longrightarrow>\n    Domain p2 \\<subseteq> Domain p1", "by (auto simp: per_supset_rel_def)"], ["", "lemma per_supset_compare:\n    \"(p1, p2) \\<in> per_supset_rel \\<Longrightarrow> x1\\<in>Domain p2 \\<Longrightarrow> x2\\<in>Domain p2\n       \\<Longrightarrow> per_compare p1 x1 x2 \\<longleftrightarrow> per_compare p2 x1 x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p1, p2) \\<in> local.per_supset_rel; x1 \\<in> Domain p2;\n     x2 \\<in> Domain p2\\<rbrakk>\n    \\<Longrightarrow> per_compare p1 x1 x2 = per_compare p2 x1 x2", "by (auto simp: per_supset_rel_def)"], ["", "lemma per_supset_union: \"(p1, p2) \\<in> per_supset_rel \\<Longrightarrow> x1\\<in>Domain p2 \\<Longrightarrow> x2\\<in>Domain p2 \\<Longrightarrow>\n    (per_union p1 x1 x2, per_union p2 x1 x2) \\<in> per_supset_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p1, p2) \\<in> local.per_supset_rel; x1 \\<in> Domain p2;\n     x2 \\<in> Domain p2\\<rbrakk>\n    \\<Longrightarrow> (per_union p1 x1 x2, per_union p2 x1 x2)\n                      \\<in> local.per_supset_rel", "apply (clarsimp simp: per_supset_rel_def per_union_def Domain_unfold )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya.\n       \\<lbrakk>(x1, y) \\<in> p2; (x2, ya) \\<in> p2;\n        Restr p1 {x. \\<exists>y. (x, y) \\<in> p2} = p2;\n        p1 -\n        {x. \\<exists>y. (x, y) \\<in> p2} \\<times>\n        {x. \\<exists>y. (x, y) \\<in> p2}\n        \\<subseteq> Id\\<rbrakk>\n       \\<Longrightarrow> Restr\n                          (p1 \\<union>\n                           {x. (x, x1) \\<in> p1} \\<times>\n                           {y. (y, x2) \\<in> p1} \\<union>\n                           {(y, x).\n                            (x, x1) \\<in> p1 \\<and> (y, x2) \\<in> p1})\n                          {x. \\<exists>y.\n                                 (x, y) \\<in> p2 \\<or>\n                                 (x, x1) \\<in> p2 \\<and>\n                                 (y, x2) \\<in> p2 \\<or>\n                                 (y, x1) \\<in> p2 \\<and> (x, x2) \\<in> p2} =\n                         p2 \\<union>\n                         {x. (x, x1) \\<in> p2} \\<times>\n                         {y. (y, x2) \\<in> p2} \\<union>\n                         {(y, x).\n                          (x, x1) \\<in> p2 \\<and> (y, x2) \\<in> p2} \\<and>\n                         p1 \\<union>\n                         {x. (x, x1) \\<in> p1} \\<times>\n                         {y. (y, x2) \\<in> p1} \\<union>\n                         {(y, x).\n                          (x, x1) \\<in> p1 \\<and> (y, x2) \\<in> p1} -\n                         {x. \\<exists>y.\n                                (x, y) \\<in> p2 \\<or>\n                                (x, x1) \\<in> p2 \\<and>\n                                (y, x2) \\<in> p2 \\<or>\n                                (y, x1) \\<in> p2 \\<and>\n                                (x, x2) \\<in> p2} \\<times>\n                         {x. \\<exists>y.\n                                (x, y) \\<in> p2 \\<or>\n                                (x, x1) \\<in> p2 \\<and>\n                                (y, x2) \\<in> p2 \\<or>\n                                (y, x1) \\<in> p2 \\<and> (x, x2) \\<in> p2}\n                         \\<subseteq> Id", "apply (intro subsetI conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y ya.\n       \\<lbrakk>(x1, y) \\<in> p2; (x2, ya) \\<in> p2;\n        Restr p1 {x. \\<exists>y. (x, y) \\<in> p2} = p2;\n        p1 -\n        {x. \\<exists>y. (x, y) \\<in> p2} \\<times>\n        {x. \\<exists>y. (x, y) \\<in> p2}\n        \\<subseteq> Id\\<rbrakk>\n       \\<Longrightarrow> Restr\n                          (p1 \\<union>\n                           {x. (x, x1) \\<in> p1} \\<times>\n                           {y. (y, x2) \\<in> p1} \\<union>\n                           {(y, x).\n                            (x, x1) \\<in> p1 \\<and> (y, x2) \\<in> p1})\n                          {x. \\<exists>y.\n                                 (x, y) \\<in> p2 \\<or>\n                                 (x, x1) \\<in> p2 \\<and>\n                                 (y, x2) \\<in> p2 \\<or>\n                                 (y, x1) \\<in> p2 \\<and> (x, x2) \\<in> p2} =\n                         p2 \\<union>\n                         {x. (x, x1) \\<in> p2} \\<times>\n                         {y. (y, x2) \\<in> p2} \\<union>\n                         {(y, x). (x, x1) \\<in> p2 \\<and> (y, x2) \\<in> p2}\n 2. \\<And>y ya x.\n       \\<lbrakk>(x1, y) \\<in> p2; (x2, ya) \\<in> p2;\n        Restr p1 {x. \\<exists>y. (x, y) \\<in> p2} = p2;\n        p1 -\n        {x. \\<exists>y. (x, y) \\<in> p2} \\<times>\n        {x. \\<exists>y. (x, y) \\<in> p2}\n        \\<subseteq> Id;\n        x \\<in> p1 \\<union>\n                {x. (x, x1) \\<in> p1} \\<times>\n                {y. (y, x2) \\<in> p1} \\<union>\n                {(y, x). (x, x1) \\<in> p1 \\<and> (y, x2) \\<in> p1} -\n                {x. \\<exists>y.\n                       (x, y) \\<in> p2 \\<or>\n                       (x, x1) \\<in> p2 \\<and> (y, x2) \\<in> p2 \\<or>\n                       (y, x1) \\<in> p2 \\<and> (x, x2) \\<in> p2} \\<times>\n                {x. \\<exists>y.\n                       (x, y) \\<in> p2 \\<or>\n                       (x, x1) \\<in> p2 \\<and> (y, x2) \\<in> p2 \\<or>\n                       (y, x1) \\<in> p2 \\<and> (x, x2) \\<in> p2}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Id", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya x.\n       \\<lbrakk>(x1, y) \\<in> p2; (x2, ya) \\<in> p2;\n        Restr p1 {x. \\<exists>y. (x, y) \\<in> p2} = p2;\n        p1 -\n        {x. \\<exists>y. (x, y) \\<in> p2} \\<times>\n        {x. \\<exists>y. (x, y) \\<in> p2}\n        \\<subseteq> Id;\n        x \\<in> p1 \\<union>\n                {x. (x, x1) \\<in> p1} \\<times>\n                {y. (y, x2) \\<in> p1} \\<union>\n                {(y, x). (x, x1) \\<in> p1 \\<and> (y, x2) \\<in> p1} -\n                {x. \\<exists>y.\n                       (x, y) \\<in> p2 \\<or>\n                       (x, x1) \\<in> p2 \\<and> (y, x2) \\<in> p2 \\<or>\n                       (y, x1) \\<in> p2 \\<and> (x, x2) \\<in> p2} \\<times>\n                {x. \\<exists>y.\n                       (x, y) \\<in> p2 \\<or>\n                       (x, x1) \\<in> p2 \\<and> (y, x2) \\<in> p2 \\<or>\n                       (y, x1) \\<in> p2 \\<and> (x, x2) \\<in> p2}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Id", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma per_initN_refine: \"(per_init' (Max (insert 0 V) + 1), per_init V) \\<in> per_supset_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (per_init' (Max (insert 0 V) + 1), per_init V)\n    \\<in> local.per_supset_rel", "unfolding per_supset_rel_def per_init'_def per_init_def max_node_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({(i, i) |i. i < Max (insert 0 V) + 1}, {(i, i) |i. i \\<in> V})\n    \\<in> {(p1, p2).\n           Restr p1 (Domain p2) = p2 \\<and>\n           p1 - Domain p2 \\<times> Domain p2 \\<subseteq> nat_rel}", "by (auto simp: less_Suc_eq_le  )"], ["", "theorem kruskal3_refine: \"(kruskal3, kruskal2)\\<in>\\<langle>Id\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (kruskal3, kruskal2) \\<in> \\<langle>Id\\<rangle>nres_rel", "unfolding kruskal2_def kruskal3_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (obtain_sorted_carrier''' \\<bind>\n     (\\<lambda>(sl, mn).\n         nfoldli sl (\\<lambda>_. True)\n          (\\<lambda>ce (uf, T).\n              ASSERT (\\<alpha> ce \\<in> E) \\<bind>\n              (\\<lambda>_.\n                  endpoints ce \\<bind>\n                  (\\<lambda>(a, b).\n                      ASSERT\n                       (a \\<in> Domain uf \\<and> b \\<in> Domain uf) \\<bind>\n                      (\\<lambda>_.\n                          if \\<not> per_compare uf a b\n                          then ASSERT (ce \\<notin> set T) \\<bind>\n                               (\\<lambda>_.\n                                   RETURN (per_union uf a b, T @ [ce]))\n                          else RETURN (uf, T)))))\n          (per_init' (mn + 1), []) \\<bind>\n         (\\<lambda>(per, y). RETURN y)),\n     obtain_sorted_carrier' \\<bind>\n     (\\<lambda>l.\n         nfoldli l (\\<lambda>_. True)\n          (\\<lambda>ce (uf, T).\n              ASSERT (\\<alpha> ce \\<in> E) \\<bind>\n              (\\<lambda>_.\n                  endpoints ce \\<bind>\n                  (\\<lambda>(a, b).\n                      ASSERT\n                       (a \\<in> V \\<and>\n                        b \\<in> V \\<and>\n                        a \\<in> Domain uf \\<and> b \\<in> Domain uf) \\<bind>\n                      (\\<lambda>_.\n                          if \\<not> per_compare uf a b\n                          then ASSERT (ce \\<notin> set T) \\<bind>\n                               (\\<lambda>_.\n                                   RETURN (per_union uf a b, T @ [ce]))\n                          else RETURN (uf, T)))))\n          (per_init V, []) \\<bind>\n         (\\<lambda>(per, y). RETURN y)))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "apply (refine_rcg osc_refine[THEN nres_relD]   )"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x l x1 x2.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (x1, l)\n                         \\<in> \\<langle>?S12 x l x1 x2\\<rangle>list_rel\n 2. \\<And>x l x1 x2.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> ((per_init' (x2 + 1), []), per_init V, [])\n                         \\<in> ?R'11 x l x1 x2\n 3. \\<And>x l x1 x2 a a'.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (a, a') \\<in> ?R'11 x l x1 x2\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 4. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> xi \\<in> E\n 5. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E\\<rbrakk>\n       \\<Longrightarrow> endpoints xi\n                         \\<le> \\<Down>\n                                (?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b)\n                                (endpoints xa)\n 6. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n        x' = (x1c, x2c); xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x1d \\<in> Domain x1b\n 7. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n        x' = (x1c, x2c); xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x2d \\<in> Domain x1b\n 8. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n        x' = (x1c, x2c); xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b\\<rbrakk>\n       \\<Longrightarrow> (\\<not> per_compare x1b x1d x2d) =\n                         (\\<not> per_compare x1a x1c x2c)\n 9. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n        x' = (x1c, x2c); xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n        \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n        xa \\<notin> set x2a\\<rbrakk>\n       \\<Longrightarrow> xi \\<notin> set x2b\n 10. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n        \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n         (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n         s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n         \\<alpha> xi \\<in> E;\n         (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n         x' = (x1c, x2c); xb = (x1d, x2d);\n         x1c \\<in> V \\<and>\n         x2c \\<in> V \\<and>\n         x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n         x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n         \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n         xa \\<notin> set x2a; xi \\<notin> set x2b\\<rbrakk>\n        \\<Longrightarrow> ((per_union x1b x1d x2d, x2b @ [xi]),\n                           per_union x1a x1c x2c, x2a @ [xa])\n                          \\<in> ?R'11 x l x1 x2\nA total of 12 subgoals...", "supply RELATESI[where R=\"per_supset_rel::(nat per \\<times> _) set\", refine_dref_RELATES]"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x l x1 x2.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (x1, l)\n                         \\<in> \\<langle>?S12 x l x1 x2\\<rangle>list_rel\n 2. \\<And>x l x1 x2.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> ((per_init' (x2 + 1), []), per_init V, [])\n                         \\<in> ?R'11 x l x1 x2\n 3. \\<And>x l x1 x2 a a'.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (a, a') \\<in> ?R'11 x l x1 x2\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 4. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> xi \\<in> E\n 5. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E\\<rbrakk>\n       \\<Longrightarrow> endpoints xi\n                         \\<le> \\<Down>\n                                (?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b)\n                                (endpoints xa)\n 6. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n        x' = (x1c, x2c); xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x1d \\<in> Domain x1b\n 7. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n        x' = (x1c, x2c); xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x2d \\<in> Domain x1b\n 8. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n        x' = (x1c, x2c); xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b\\<rbrakk>\n       \\<Longrightarrow> (\\<not> per_compare x1b x1d x2d) =\n                         (\\<not> per_compare x1a x1c x2c)\n 9. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n        s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n        x' = (x1c, x2c); xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n        \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n        xa \\<notin> set x2a\\<rbrakk>\n       \\<Longrightarrow> xi \\<notin> set x2b\n 10. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n        \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n         (xi, xa) \\<in> ?S12 x l x1 x2; (si, s) \\<in> ?R'11 x l x1 x2; True;\n         s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n         \\<alpha> xi \\<in> E;\n         (xb, x') \\<in> ?R'30 x l x1 x2 xi xa si s x1a x2a x1b x2b;\n         x' = (x1c, x2c); xb = (x1d, x2d);\n         x1c \\<in> V \\<and>\n         x2c \\<in> V \\<and>\n         x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n         x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n         \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n         xa \\<notin> set x2a; xi \\<notin> set x2b\\<rbrakk>\n        \\<Longrightarrow> ((per_union x1b x1d x2d, x2b @ [xi]),\n                           per_union x1a x1c x2c, x2a @ [xa])\n                          \\<in> ?R'11 x l x1 x2\nA total of 12 subgoals...", "apply refine_dref_type"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x l x1 x2.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (x1, l)\n                         \\<in> \\<langle>nat_rel \\<times>\\<^sub>r\n  int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel\n 2. \\<And>x l x1 x2.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> ((per_init' (x2 + 1), []), per_init V, [])\n                         \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                               \\<langle>nat_rel \\<times>\\<^sub>r\n  int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel\n 3. \\<And>x l x1 x2 a a'.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (a, a')\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r\n                       nat_rel\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 4. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> xi \\<in> E\n 5. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E\\<rbrakk>\n       \\<Longrightarrow> endpoints xi\n                         \\<le> \\<Down> (nat_rel \\<times>\\<^sub>r nat_rel)\n                                (endpoints xa)\n 6. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x1d \\<in> Domain x1b\n 7. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x2d \\<in> Domain x1b\n 8. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b\\<rbrakk>\n       \\<Longrightarrow> (\\<not> per_compare x1b x1d x2d) =\n                         (\\<not> per_compare x1a x1c x2c)\n 9. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n        \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n        xa \\<notin> set x2a\\<rbrakk>\n       \\<Longrightarrow> xi \\<notin> set x2b\n 10. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n        \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n         (xi, xa)\n         \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n         (si, s)\n         \\<in> local.per_supset_rel \\<times>\\<^sub>r\n               \\<langle>nat_rel \\<times>\\<^sub>r\n                        int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n         True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n         \\<alpha> xi \\<in> E;\n         (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n         xb = (x1d, x2d);\n         x1c \\<in> V \\<and>\n         x2c \\<in> V \\<and>\n         x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n         x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n         \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n         xa \\<notin> set x2a; xi \\<notin> set x2b\\<rbrakk>\n        \\<Longrightarrow> ((per_union x1b x1d x2d, x2b @ [xi]),\n                           per_union x1a x1c x2c, x2a @ [xa])\n                          \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                                \\<langle>nat_rel \\<times>\\<^sub>r\n   int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel\nA total of 12 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x_, l_) \\<in> add_size_rel; x_ = (x1_, x2_)\\<rbrakk>\n    \\<Longrightarrow> (x1_, l_)\n                      \\<in> \\<langle>nat_rel \\<times>\\<^sub>r\n                                     int_rel \\<times>\\<^sub>r\n                                     nat_rel\\<rangle>list_rel", "by (simp add: add_size_rel_def in_br_conv)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x l x1 x2.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> ((per_init' (x2 + 1), []), per_init V, [])\n                         \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                               \\<langle>nat_rel \\<times>\\<^sub>r\n  int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel\n 2. \\<And>x l x1 x2 a a'.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (a, a')\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r\n                       nat_rel\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 3. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> xi \\<in> E\n 4. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E\\<rbrakk>\n       \\<Longrightarrow> endpoints xi\n                         \\<le> \\<Down> (nat_rel \\<times>\\<^sub>r nat_rel)\n                                (endpoints xa)\n 5. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x1d \\<in> Domain x1b\n 6. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x2d \\<in> Domain x1b\n 7. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b\\<rbrakk>\n       \\<Longrightarrow> (\\<not> per_compare x1b x1d x2d) =\n                         (\\<not> per_compare x1a x1c x2c)\n 8. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n        \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n        xa \\<notin> set x2a\\<rbrakk>\n       \\<Longrightarrow> xi \\<notin> set x2b\n 9. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n        \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n        xa \\<notin> set x2a; xi \\<notin> set x2b\\<rbrakk>\n       \\<Longrightarrow> ((per_union x1b x1d x2d, x2b @ [xi]),\n                          per_union x1a x1c x2c, x2a @ [xa])\n                         \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                               \\<langle>nat_rel \\<times>\\<^sub>r\n  int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel\n 10. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n        \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n         (xi, xa)\n         \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n         (si, s)\n         \\<in> local.per_supset_rel \\<times>\\<^sub>r\n               \\<langle>nat_rel \\<times>\\<^sub>r\n                        int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n         True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n         \\<alpha> xi \\<in> E;\n         (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n         xb = (x1d, x2d);\n         x1c \\<in> V \\<and>\n         x2c \\<in> V \\<and>\n         x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n         x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n         \\<not> \\<not> per_compare x1b x1d x2d;\n         \\<not> \\<not> per_compare x1a x1c x2c\\<rbrakk>\n        \\<Longrightarrow> ((x1b, x2b), x1a, x2a)\n                          \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                                \\<langle>nat_rel \\<times>\\<^sub>r\n   int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel\nA total of 11 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x_, l_) \\<in> add_size_rel; x_ = (x1_, x2_)\\<rbrakk>\n    \\<Longrightarrow> ((per_init' (x2_ + 1), []), per_init V, [])\n                      \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                            \\<langle>nat_rel \\<times>\\<^sub>r\n                                     int_rel \\<times>\\<^sub>r\n                                     nat_rel\\<rangle>list_rel", "using per_initN_refine"], ["proof (prove)\nusing this:\n  (per_init' (Max (insert 0 V) + 1), per_init V) \\<in> local.per_supset_rel\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x_, l_) \\<in> add_size_rel; x_ = (x1_, x2_)\\<rbrakk>\n    \\<Longrightarrow> ((per_init' (x2_ + 1), []), per_init V, [])\n                      \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                            \\<langle>nat_rel \\<times>\\<^sub>r\n                                     int_rel \\<times>\\<^sub>r\n                                     nat_rel\\<rangle>list_rel", "by (simp add: add_size_rel_def in_br_conv)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x l x1 x2 a a'.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (a, a')\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r\n                       nat_rel\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (True, True) \\<in> bool_rel\n 2. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> xi \\<in> E\n 3. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E\\<rbrakk>\n       \\<Longrightarrow> endpoints xi\n                         \\<le> \\<Down> (nat_rel \\<times>\\<^sub>r nat_rel)\n                                (endpoints xa)\n 4. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x1d \\<in> Domain x1b\n 5. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and>\n        x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a\\<rbrakk>\n       \\<Longrightarrow> x2d \\<in> Domain x1b\n 6. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b\\<rbrakk>\n       \\<Longrightarrow> (\\<not> per_compare x1b x1d x2d) =\n                         (\\<not> per_compare x1a x1c x2c)\n 7. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n        \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n        xa \\<notin> set x2a\\<rbrakk>\n       \\<Longrightarrow> xi \\<notin> set x2b\n 8. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n        \\<not> per_compare x1b x1d x2d; \\<not> per_compare x1a x1c x2c;\n        xa \\<notin> set x2a; xi \\<notin> set x2b\\<rbrakk>\n       \\<Longrightarrow> ((per_union x1b x1d x2d, x2b @ [xi]),\n                          per_union x1a x1c x2c, x2a @ [xa])\n                         \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                               \\<langle>nat_rel \\<times>\\<^sub>r\n  int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel\n 9. \\<And>x l x1 x2 xi xa si s x1a x2a x1b x2b xb x' x1c x2c x1d x2d.\n       \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n        (xi, xa)\n        \\<in> nat_rel \\<times>\\<^sub>r int_rel \\<times>\\<^sub>r nat_rel;\n        (si, s)\n        \\<in> local.per_supset_rel \\<times>\\<^sub>r\n              \\<langle>nat_rel \\<times>\\<^sub>r\n                       int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n        True; s = (x1a, x2a); si = (x1b, x2b); \\<alpha> xa \\<in> E;\n        \\<alpha> xi \\<in> E;\n        (xb, x') \\<in> nat_rel \\<times>\\<^sub>r nat_rel; x' = (x1c, x2c);\n        xb = (x1d, x2d);\n        x1c \\<in> V \\<and>\n        x2c \\<in> V \\<and> x1c \\<in> Domain x1a \\<and> x2c \\<in> Domain x1a;\n        x1d \\<in> Domain x1b \\<and> x2d \\<in> Domain x1b;\n        \\<not> \\<not> per_compare x1b x1d x2d;\n        \\<not> \\<not> per_compare x1a x1c x2c\\<rbrakk>\n       \\<Longrightarrow> ((x1b, x2b), x1a, x2a)\n                         \\<in> local.per_supset_rel \\<times>\\<^sub>r\n                               \\<langle>nat_rel \\<times>\\<^sub>r\n  int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel\n 10. \\<And>x l x1 x2 xa x' x1a x2a x1b x2b.\n        \\<lbrakk>(x, l) \\<in> add_size_rel; x = (x1, x2);\n         (xa, x')\n         \\<in> local.per_supset_rel \\<times>\\<^sub>r\n               \\<langle>nat_rel \\<times>\\<^sub>r\n                        int_rel \\<times>\\<^sub>r nat_rel\\<rangle>list_rel;\n         x' = (x1a, x2a); xa = (x1b, x2b)\\<rbrakk>\n        \\<Longrightarrow> (x2b, x2a) \\<in> Id", "by (auto simp add: add_size_rel_def in_br_conv per_supset_compare per_supset_union\n        dest: per_supset_rel_dom\n        simp del: per_compare_def )"], ["", "subsubsection \\<open>Synthesis of Kruskal by SepRef\\<close>"], ["", "lemma [sepref_import_param]: \"(sort_edges,sort_edges)\\<in>\\<langle>Id\\<times>\\<^sub>rId\\<times>\\<^sub>rId\\<rangle>list_rel \\<rightarrow>\\<langle>Id\\<times>\\<^sub>rId\\<times>\\<^sub>rId\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sort_edges, sort_edges)\n    \\<in> \\<langle>Id \\<times>\\<^sub>r\n                   Id \\<times>\\<^sub>r Id\\<rangle>list_rel \\<rightarrow>\n          \\<langle>Id \\<times>\\<^sub>r\n                   Id \\<times>\\<^sub>r Id\\<rangle>list_rel", "by simp"], ["", "lemma [sepref_import_param]: \"(max_node, max_node) \\<in> \\<langle>Id\\<times>\\<^sub>rId\\<times>\\<^sub>rId\\<rangle>list_rel \\<rightarrow> nat_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (max_node, max_node)\n    \\<in> \\<langle>nat_rel \\<times>\\<^sub>r\n                   Id \\<times>\\<^sub>r\n                   nat_rel\\<rangle>list_rel \\<rightarrow>\n          nat_rel", "by simp"], ["", "sepref_register \"getEdges\" :: \"(nat \\<times> int \\<times> nat) list nres\""], ["", "sepref_register \"endpoints\" :: \"(nat \\<times> int \\<times> nat) \\<Rightarrow> (nat*nat) nres\""], ["", "declare getEdges_impl [sepref_fr_rules]"], ["", "declare endpoints_impl [sepref_fr_rules]"], ["", "schematic_goal kruskal_impl:\n    \"(uncurry0 ?c, uncurry0 kruskal3 ) \\<in> (unit_assn)\\<^sup>k \\<rightarrow>\\<^sub>a list_assn (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 ?c, uncurry0 kruskal3)\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)", "unfolding kruskal3_def obtain_sorted_carrier'''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 ?c,\n     uncurry0\n      (getEdges \\<bind>\n       (\\<lambda>l.\n           RETURN (quicksort_by_rel edges_less_eq [] l, max_node l)) \\<bind>\n       (\\<lambda>(sl, mn).\n           let initial_union_find = per_init' (mn + 1)\n           in nfoldli sl (\\<lambda>_. True)\n               (\\<lambda>ce (uf, T).\n                   ASSERT (\\<alpha> ce \\<in> E) \\<bind>\n                   (\\<lambda>_.\n                       endpoints ce \\<bind>\n                       (\\<lambda>(a, b).\n                           ASSERT\n                            (a \\<in> Domain uf \\<and>\n                             b \\<in> Domain uf) \\<bind>\n                           (\\<lambda>_.\n                               if \\<not> per_compare uf a b\n                               then let uf = per_union uf a b\n                                    in ASSERT (ce \\<notin> set T) \\<bind>\n (\\<lambda>_. RETURN (uf, T @ [ce]))\n                               else RETURN (uf, T)))))\n               (initial_union_find, []) \\<bind>\n              (\\<lambda>(per, spanning_forest). RETURN spanning_forest))))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)", "unfolding sort_edges_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 ?c,\n     uncurry0\n      (getEdges \\<bind>\n       (\\<lambda>l. RETURN (sort_edges l, max_node l)) \\<bind>\n       (\\<lambda>(sl, mn).\n           let initial_union_find = per_init' (mn + 1)\n           in nfoldli sl (\\<lambda>_. True)\n               (\\<lambda>ce (uf, T).\n                   ASSERT (\\<alpha> ce \\<in> E) \\<bind>\n                   (\\<lambda>_.\n                       endpoints ce \\<bind>\n                       (\\<lambda>(a, b).\n                           ASSERT\n                            (a \\<in> Domain uf \\<and>\n                             b \\<in> Domain uf) \\<bind>\n                           (\\<lambda>_.\n                               if \\<not> per_compare uf a b\n                               then let uf = per_union uf a b\n                                    in ASSERT (ce \\<notin> set T) \\<bind>\n (\\<lambda>_. RETURN (uf, T @ [ce]))\n                               else RETURN (uf, T)))))\n               (initial_union_find, []) \\<bind>\n              (\\<lambda>(per, spanning_forest). RETURN spanning_forest))))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)", "apply (rewrite at \"nfoldli _ _ _ (_,rewrite_HOLE)\" HOL_list.fold_custom_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 ?c,\n     uncurry0\n      (getEdges \\<bind>\n       (\\<lambda>l. RETURN (sort_edges l, max_node l)) \\<bind>\n       (\\<lambda>(sl, mn).\n           let initial_union_find = per_init' (mn + 1)\n           in nfoldli sl (\\<lambda>_. True)\n               (\\<lambda>ce (uf, T).\n                   ASSERT (\\<alpha> ce \\<in> E) \\<bind>\n                   (\\<lambda>_.\n                       endpoints ce \\<bind>\n                       (\\<lambda>(a, b).\n                           ASSERT\n                            (a \\<in> Domain uf \\<and>\n                             b \\<in> Domain uf) \\<bind>\n                           (\\<lambda>_.\n                               if \\<not> per_compare uf a b\n                               then let uf = per_union uf a b\n                                    in ASSERT (ce \\<notin> set T) \\<bind>\n (\\<lambda>_. RETURN (uf, T @ [ce]))\n                               else RETURN (uf, T)))))\n               (initial_union_find, op_HOL_list_empty) \\<bind>\n              (\\<lambda>(per, spanning_forest). RETURN spanning_forest))))\n    \\<in> unit_assn\\<^sup>k \\<rightarrow>\\<^sub>a list_assn\n             (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn)", "by sepref"], ["", "concrete_definition (in -) kruskal uses Kruskal_Impl.kruskal_impl"], ["", "prepare_code_thms (in -) kruskal_def"], ["", "lemmas kruskal_refine = kruskal.refine[OF this_loc]"], ["", "abbreviation \"MSF == minBasis\""], ["", "abbreviation \"SpanningForest == basis\""], ["", "lemmas SpanningForest_def = basis_def"], ["", "lemmas MSF_def = minBasis_def"], ["", "lemmas kruskal3_ref_spec_ = kruskal3_refine[FCOMP kruskal2_refine, FCOMP kruskal1_refine,\n      FCOMP kruskal0_refine,\n      FCOMP minWeightBasis_refine]"], ["", "lemma kruskal3_ref_spec':\n    \"(uncurry0 kruskal3, uncurry0 (SPEC (\\<lambda>r. MSF (\\<alpha> ` set r)))) \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>Id\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 kruskal3,\n     uncurry0 (SPEC (\\<lambda>r. MSF (\\<alpha> ` set r))))\n    \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>Id\\<rangle>nres_rel", "unfolding fref_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 kruskal3,\n     uncurry0 (SPEC (\\<lambda>r. MSF (\\<alpha> ` set r))))\n    \\<in> {(f, g).\n           \\<forall>x y.\n              True \\<and> (x, y) \\<in> unit_rel \\<longrightarrow>\n              (f x, g y) \\<in> \\<langle>Id\\<rangle>nres_rel}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (kruskal3, SPEC (\\<lambda>r. MSF (\\<alpha> ` set r)))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "apply(rule nres_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. kruskal3 \\<le> \\<Down> Id (SPEC (\\<lambda>r. MSF (\\<alpha> ` set r)))", "apply(rule order.trans[OF  kruskal3_ref_spec_[unfolded fref_def, simplified,  THEN nres_relD]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Down> (\\<langle>concrete_edge_rel\\<rangle>list_set_rel) (SPEC MSF)\n    \\<le> \\<Down> Id (SPEC (\\<lambda>r. MSF (\\<alpha> ` set r)))", "by (auto simp: conc_fun_def list_set_rel_def in_br_conv dest!: list_relD2)"], ["", "lemma kruskal3_ref_spec:\n   \"(uncurry0 kruskal3,\n      uncurry0 (SPEC (\\<lambda>r. distinct r \\<and> set r \\<subseteq> superE \\<and>  MSF (\\<alpha> ` set r))))\n      \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>Id\\<rangle>nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 kruskal3,\n     uncurry0\n      (SPEC\n        (\\<lambda>r.\n            distinct r \\<and>\n            set r \\<subseteq> superE \\<and> MSF (\\<alpha> ` set r))))\n    \\<in> unit_rel \\<rightarrow>\\<^sub>f \\<langle>Id\\<rangle>nres_rel", "unfolding fref_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (uncurry0 kruskal3,\n     uncurry0\n      (SPEC\n        (\\<lambda>r.\n            distinct r \\<and>\n            set r \\<subseteq> superE \\<and> MSF (\\<alpha> ` set r))))\n    \\<in> {(f, g).\n           \\<forall>x y.\n              True \\<and> (x, y) \\<in> unit_rel \\<longrightarrow>\n              (f x, g y) \\<in> \\<langle>Id\\<rangle>nres_rel}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (kruskal3,\n     SPEC\n      (\\<lambda>r.\n          distinct r \\<and>\n          set r \\<subseteq> superE \\<and> MSF (\\<alpha> ` set r)))\n    \\<in> \\<langle>Id\\<rangle>nres_rel", "apply(rule nres_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. kruskal3\n    \\<le> \\<Down> Id\n           (SPEC\n             (\\<lambda>r.\n                 distinct r \\<and>\n                 set r \\<subseteq> superE \\<and> MSF (\\<alpha> ` set r)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. kruskal3\n    \\<le> SPEC\n           (\\<lambda>r.\n               distinct r \\<and>\n               set r \\<subseteq> superE \\<and> MSF (\\<alpha> ` set r))", "using SPEC_rule_conj_leofI2[OF kruskal3_subset kruskal3_ref_spec'\n              [unfolded fref_def, simplified,  THEN nres_relD, simplified]]"], ["proof (prove)\nusing this:\n  kruskal3\n  \\<le> SPEC\n         (\\<lambda>s.\n             (distinct s \\<and> set s \\<subseteq> superE) \\<and>\n             MSF (\\<alpha> ` set s))\n\ngoal (1 subgoal):\n 1. kruskal3\n    \\<le> SPEC\n           (\\<lambda>r.\n               distinct r \\<and>\n               set r \\<subseteq> superE \\<and> MSF (\\<alpha> ` set r))", "by simp"], ["", "lemma [fcomp_norm_simps]: \"list_assn (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn) = id_assn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_assn\n     (nat_assn \\<times>\\<^sub>a int_assn \\<times>\\<^sub>a nat_assn) =\n    id_assn", "by (auto simp: list_assn_pure_conv)"], ["", "lemmas kruskal_ref_spec = kruskal_refine[FCOMP kruskal3_ref_spec]"], ["", "text \\<open>The final correctness lemma for Kruskal's algorithm. \\<close>"], ["", "lemma kruskal_correct_forest:\n    shows \"<emp> kruskal getEdges_impl endpoints_impl ()\n             <\\<lambda>r. \\<up>( distinct r \\<and> set r \\<subseteq> superE \\<and> MSF (set (map \\<alpha> r)))>\\<^sub>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> kruskal getEdges_impl endpoints_impl\n           () <\\<lambda>r.\n                  \\<up>\n                   (distinct r \\<and>\n                    set r \\<subseteq> superE \\<and>\n                    MSF (set (map \\<alpha> r)))>\\<^sub>t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. <emp> kruskal getEdges_impl endpoints_impl\n           () <\\<lambda>r.\n                  \\<up>\n                   (distinct r \\<and>\n                    set r \\<subseteq> superE \\<and>\n                    MSF (set (map \\<alpha> r)))>\\<^sub>t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> kruskal getEdges_impl endpoints_impl\n           () <\\<lambda>r.\n                  \\<up>\n                   (distinct r \\<and>\n                    set r \\<subseteq> superE \\<and>\n                    MSF (set (map \\<alpha> r)))>\\<^sub>t", "using kruskal_ref_spec[to_hnr]"], ["proof (prove)\nusing this:\n  hn_refine emp (kruskal getEdges_impl endpoints_impl $ ?xi) emp id_assn\n   (SPEC\n     (\\<lambda>r.\n         distinct r \\<and>\n         set r \\<subseteq> superE \\<and> MSF (\\<alpha> ` set r)))\n\ngoal (1 subgoal):\n 1. <emp> kruskal getEdges_impl endpoints_impl\n           () <\\<lambda>r.\n                  \\<up>\n                   (distinct r \\<and>\n                    set r \\<subseteq> superE \\<and>\n                    MSF (set (map \\<alpha> r)))>\\<^sub>t", "unfolding hn_refine_def"], ["proof (prove)\nusing this:\n  nofail\n   (SPEC\n     (\\<lambda>r.\n         distinct r \\<and>\n         set r \\<subseteq> superE \\<and>\n         MSF (\\<alpha> ` set r))) \\<longrightarrow>\n  <emp> kruskal getEdges_impl endpoints_impl $\n        ?xi <\\<lambda>r.\n                emp *\n                (\\<exists>\\<^sub>Ax.\n                    id_assn x r *\n                    \\<up>\n                     (RETURN x\n                      \\<le> SPEC\n                             (\\<lambda>r.\n                                 distinct r \\<and>\n                                 set r \\<subseteq> superE \\<and>\n                                 MSF (\\<alpha> ` set r))))>\\<^sub>t\n\ngoal (1 subgoal):\n 1. <emp> kruskal getEdges_impl endpoints_impl\n           () <\\<lambda>r.\n                  \\<up>\n                   (distinct r \\<and>\n                    set r \\<subseteq> superE \\<and>\n                    MSF (set (map \\<alpha> r)))>\\<^sub>t", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> kruskal getEdges_impl endpoints_impl ()\n    <\\<lambda>r.\n        \\<exists>\\<^sub>Ax.\n           id_assn x r * true *\n           \\<up>\n            (distinct x \\<and>\n             set x \\<subseteq> superE \\<and>\n             MSF (\\<alpha> ` set x))> \\<Longrightarrow>\n    <emp> kruskal getEdges_impl endpoints_impl ()\n    <\\<lambda>r.\n        true *\n        \\<up>\n         (distinct r \\<and>\n          set r \\<subseteq> superE \\<and> MSF (\\<alpha> ` set r))>", "apply (erule cons_post_rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>\\<^sub>Axa.\n          id_assn xa x * true *\n          \\<up>\n           (distinct xa \\<and>\n            set xa \\<subseteq> superE \\<and>\n            MSF (\\<alpha> ` set xa)) \\<Longrightarrow>\\<^sub>A\n       true *\n       \\<up>\n        (distinct x \\<and>\n         set x \\<subseteq> superE \\<and> MSF (\\<alpha> ` set x))", "by (sep_auto simp: hn_ctxt_def pure_def list_set_rel_def in_br_conv dest: list_relD)"], ["proof (state)\nthis:\n  <emp> kruskal getEdges_impl endpoints_impl\n         () <\\<lambda>r.\n                \\<up>\n                 (distinct r \\<and>\n                  set r \\<subseteq> superE \\<and>\n                  MSF (set (map \\<alpha> r)))>\\<^sub>t\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>locale @{text Kruskal_Impl}\\<close>"], ["", "end"]]}