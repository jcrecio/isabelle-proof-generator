{"file_name": "/home/qj213/afp-2021-10-22/thys/Kruskal/Kruskal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Kruskal", "problem_names": ["lemma joins_in_V: \"joins a b e \\<Longrightarrow> e\\<in>E \\<Longrightarrow> a\\<in>V \\<and> b\\<in>V\"", "lemma finiteE_finiteV: \"finite E \\<Longrightarrow> finite V\"", "lemma E_inV: \"\\<And>e. e\\<in>E \\<Longrightarrow> vertices e \\<subseteq> V\"", "lemma sameCC_reachable: \"E' \\<subseteq> E \\<Longrightarrow> u\\<in>V \\<Longrightarrow> v\\<in>V \\<Longrightarrow> CC E' u = CC E' v \\<longleftrightarrow> (u,v) \\<in> connected E'\"", "lemma \"quotient V Id = {{v}|v. v\\<in>V}\"", "lemma CCs_empty: \"CCs {} = {{v}|v. v\\<in>V}\"", "lemma CCs_empty_card: \"card (CCs {}) = card V\"", "lemma CCs_imageCC: \"CCs F = (CC F) ` V\"", "lemma union_eqclass_decreases_components: \n  assumes \"CC F x \\<noteq> CC F y\" \"e \\<notin> F\" \"x\\<in>V\" \"y\\<in>V\" \"F \\<subseteq> E\" \"e\\<in>E\" \"joins x y e\" \n  shows \"Suc (card (CCs (insert e F))) = card (CCs F)\"", "lemma forest_CCs: assumes \"forest E'\" shows \"card (CCs E') + card E' = card V\"", "lemma pigeonhole_CCs: \n  assumes finiteV: \"finite V\" and cardlt: \"card (CCs E1) < card (CCs E2)\"\n  shows \"(\\<exists>u v. u\\<in>V \\<and> v\\<in>V \\<and> CC E1 u = CC E1 v \\<and> CC E2 u \\<noteq> CC E2 v)\"", "theorem assumes f1: \"forest E1\"\n  and f2: \"forest E2\"  \n  and c: \"card E1 > card E2\"\nshows augment: \"\\<exists>e\\<in>E1-E2. forest (insert e E2)\""], "translations": [["", "lemma joins_in_V: \"joins a b e \\<Longrightarrow> e\\<in>E \\<Longrightarrow> a\\<in>V \\<and> b\\<in>V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joins a b e; e \\<in> E\\<rbrakk>\n    \\<Longrightarrow> a \\<in> V \\<and> b \\<in> V", "apply(frule vertices_constr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joins a b e; e \\<in> E; {a, b} \\<subseteq> vertices e\\<rbrakk>\n    \\<Longrightarrow> a \\<in> V \\<and> b \\<in> V", "using edgesinvertices"], ["proof (prove)\nusing this:\n  \\<Union> (vertices ` E) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>joins a b e; e \\<in> E; {a, b} \\<subseteq> vertices e\\<rbrakk>\n    \\<Longrightarrow> a \\<in> V \\<and> b \\<in> V", "by blast"], ["", "lemma finiteE_finiteV: \"finite E \\<Longrightarrow> finite V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite E \\<Longrightarrow> finite V", "using finite_vertices"], ["proof (prove)\nusing this:\n  ?e \\<in> E \\<Longrightarrow> finite (vertices ?e)\n\ngoal (1 subgoal):\n 1. finite E \\<Longrightarrow> finite V", "by auto"], ["", "lemma E_inV: \"\\<And>e. e\\<in>E \\<Longrightarrow> vertices e \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e. e \\<in> E \\<Longrightarrow> vertices e \\<subseteq> V", "using edgesinvertices"], ["proof (prove)\nusing this:\n  \\<Union> (vertices ` E) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<And>e. e \\<in> E \\<Longrightarrow> vertices e \\<subseteq> V", "by auto"], ["", "definition \"CC E' x = (connected E')``{x}\""], ["", "lemma sameCC_reachable: \"E' \\<subseteq> E \\<Longrightarrow> u\\<in>V \\<Longrightarrow> v\\<in>V \\<Longrightarrow> CC E' u = CC E' v \\<longleftrightarrow> (u,v) \\<in> connected E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E' \\<subseteq> E; u \\<in> V; v \\<in> V\\<rbrakk>\n    \\<Longrightarrow> (CC E' u = CC E' v) = ((u, v) \\<in> connected E')", "unfolding CC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E' \\<subseteq> E; u \\<in> V; v \\<in> V\\<rbrakk>\n    \\<Longrightarrow> (connected E' `` {u} = connected E' `` {v}) =\n                      ((u, v) \\<in> connected E')", "using  equiv_class_eq_iff[OF equiv ]"], ["proof (prove)\nusing this:\n  ?F1 \\<subseteq> E \\<Longrightarrow>\n  ((?x, ?y) \\<in> connected ?F1) =\n  (connected ?F1 `` {?x} = connected ?F1 `` {?y} \\<and>\n   ?x \\<in> V \\<and> ?y \\<in> V)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>E' \\<subseteq> E; u \\<in> V; v \\<in> V\\<rbrakk>\n    \\<Longrightarrow> (connected E' `` {u} = connected E' `` {v}) =\n                      ((u, v) \\<in> connected E')", "by auto"], ["", "definition \"CCs E' = quotient V (connected E')\""], ["", "lemma \"quotient V Id = {{v}|v. v\\<in>V}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V // Id = {{v} |v. v \\<in> V}", "unfolding quotient_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>V. {Id `` {x}}) = {{v} |v. v \\<in> V}", "by auto"], ["", "lemma CCs_empty: \"CCs {} = {{v}|v. v\\<in>V}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCs {} = {{v} |v. v \\<in> V}", "unfolding CCs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V // connected {} = {{v} |v. v \\<in> V}", "unfolding quotient_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>V. {connected {} `` {x}}) = {{v} |v. v \\<in> V}", "using connected_same"], ["proof (prove)\nusing this:\n  ((?u, ?v) \\<in> connected {}) = (?u = ?v \\<and> ?v \\<in> V)\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>V. {connected {} `` {x}}) = {{v} |v. v \\<in> V}", "by auto"], ["", "lemma CCs_empty_card: \"card (CCs {}) = card V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "have i: \"{{v}|v. v\\<in>V} = (\\<lambda>v. {v})`V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {{v} |v. v \\<in> V} = (\\<lambda>v. {v}) ` V", "by blast"], ["proof (state)\nthis:\n  {{v} |v. v \\<in> V} = (\\<lambda>v. {v}) ` V\n\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "have \"card (CCs {}) = card {{v}|v. v\\<in>V}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (CCs {}) = card {{v} |v. v \\<in> V}", "using CCs_empty"], ["proof (prove)\nusing this:\n  CCs {} = {{v} |v. v \\<in> V}\n\ngoal (1 subgoal):\n 1. card (CCs {}) = card {{v} |v. v \\<in> V}", "by auto"], ["proof (state)\nthis:\n  card (CCs {}) = card {{v} |v. v \\<in> V}\n\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "also"], ["proof (state)\nthis:\n  card (CCs {}) = card {{v} |v. v \\<in> V}\n\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "have \"\\<dots> = card ((\\<lambda>v. {v})`V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {{v} |v. v \\<in> V} = card ((\\<lambda>v. {v}) ` V)", "by(simp only: i)"], ["proof (state)\nthis:\n  card {{v} |v. v \\<in> V} = card ((\\<lambda>v. {v}) ` V)\n\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "also"], ["proof (state)\nthis:\n  card {{v} |v. v \\<in> V} = card ((\\<lambda>v. {v}) ` V)\n\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "have \"\\<dots> = card V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>v. {v}) ` V) = card V", "apply(rule card_image)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>v. {v}) V", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>V. \\<forall>y\\<in>V. {x} = {y} \\<longrightarrow> x = y", "by auto"], ["proof (state)\nthis:\n  card ((\\<lambda>v. {v}) ` V) = card V\n\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "finally"], ["proof (chain)\npicking this:\n  card (CCs {}) = card V", "show ?thesis"], ["proof (prove)\nusing this:\n  card (CCs {}) = card V\n\ngoal (1 subgoal):\n 1. card (CCs {}) = card V", "."], ["proof (state)\nthis:\n  card (CCs {}) = card V\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma CCs_imageCC: \"CCs F = (CC F) ` V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCs F = CC F ` V", "unfolding CCs_def CC_def quotient_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>V. {connected F `` {x}}) =\n    (\\<lambda>x. connected F `` {x}) ` V", "by blast"], ["", "lemma union_eqclass_decreases_components: \n  assumes \"CC F x \\<noteq> CC F y\" \"e \\<notin> F\" \"x\\<in>V\" \"y\\<in>V\" \"F \\<subseteq> E\" \"e\\<in>E\" \"joins x y e\" \n  shows \"Suc (card (CCs (insert e F))) = card (CCs F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card (CCs (insert e F))) = card (CCs F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc (card (CCs (insert e F))) = card (CCs F)", "from assms(1)"], ["proof (chain)\npicking this:\n  CC F x \\<noteq> CC F y", "have xny: \"x\\<noteq>y\""], ["proof (prove)\nusing this:\n  CC F x \\<noteq> CC F y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by blast"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. Suc (card (CCs (insert e F))) = card (CCs F)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card (CCs (insert e F))) = card (CCs F)", "unfolding CCs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card (V // connected (insert e F))) = card (V // connected F)", "apply(simp only: insert_reachable[OF   assms(3-7)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card (V // per_union (connected F) x y)) = card (V // connected F)", "apply(rule unify2EquivClasses_alt)"], ["proof (prove)\ngoal (6 subgoals):\n 1. connected F `` {x} \\<noteq> connected F `` {y}\n 2. y \\<in> V\n 3. x \\<in> V\n 4. connected F \\<subseteq> V \\<times> V\n 5. equiv V (connected F)\n 6. finite V", "apply(fact assms(1)[unfolded CC_def])"], ["proof (prove)\ngoal (5 subgoals):\n 1. y \\<in> V\n 2. x \\<in> V\n 3. connected F \\<subseteq> V \\<times> V\n 4. equiv V (connected F)\n 5. finite V", "apply fact+"], ["proof (prove)\ngoal (3 subgoals):\n 1. connected F \\<subseteq> V \\<times> V\n 2. equiv V (connected F)\n 3. finite V", "apply (rule connected_in)"], ["proof (prove)\ngoal (3 subgoals):\n 1. F \\<subseteq> E\n 2. equiv V (connected F)\n 3. finite V", "apply fact"], ["proof (prove)\ngoal (2 subgoals):\n 1. equiv V (connected F)\n 2. finite V", "apply(rule equiv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. F \\<subseteq> E\n 2. finite V", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite V", "by (fact finiteV)"], ["proof (state)\nthis:\n  Suc (card (CCs (insert e F))) = card (CCs F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma forest_CCs: assumes \"forest E'\" shows \"card (CCs E') + card E' = card V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (CCs E') + card E' = card V", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (CCs E') + card E' = card V", "from assms"], ["proof (chain)\npicking this:\n  forest E'", "have \"finite E'\""], ["proof (prove)\nusing this:\n  forest E'\n\ngoal (1 subgoal):\n 1. finite E'", "using forest_subE"], ["proof (prove)\nusing this:\n  forest E'\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E\n\ngoal (1 subgoal):\n 1. finite E'", "using finiteE finite_subset"], ["proof (prove)\nusing this:\n  forest E'\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E\n  finite E\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite E'", "by blast"], ["proof (state)\nthis:\n  finite E'\n\ngoal (1 subgoal):\n 1. card (CCs E') + card E' = card V", "from this assms"], ["proof (chain)\npicking this:\n  finite E'\n  forest E'", "show ?thesis"], ["proof (prove)\nusing this:\n  finite E'\n  forest E'\n\ngoal (1 subgoal):\n 1. card (CCs E') + card E' = card V", "proof(induct E')"], ["proof (state)\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  forest F \\<Longrightarrow> card (CCs F) + card F = card V\n  forest (insert x F)\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "then"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  forest F \\<Longrightarrow> card (CCs F) + card F = card V\n  forest (insert x F)", "have xE: \"x\\<in>E\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  forest F \\<Longrightarrow> card (CCs F) + card F = card V\n  forest (insert x F)\n\ngoal (1 subgoal):\n 1. x \\<in> E", "using forest_subE"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  forest F \\<Longrightarrow> card (CCs F) + card F = card V\n  forest (insert x F)\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E\n\ngoal (1 subgoal):\n 1. x \\<in> E", "by auto"], ["proof (state)\nthis:\n  x \\<in> E\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "from this"], ["proof (chain)\npicking this:\n  x \\<in> E", "obtain a b where xab: \"joins a b x\""], ["proof (prove)\nusing this:\n  x \\<in> E\n\ngoal (1 subgoal):\n 1. (\\<And>a b. joins a b x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using exhaust"], ["proof (prove)\nusing this:\n  x \\<in> E\n  ?x \\<in> E \\<Longrightarrow> \\<exists>a b. joins a b ?x\n\ngoal (1 subgoal):\n 1. (\\<And>a b. joins a b x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  joins a b x\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "{"], ["proof (state)\nthis:\n  joins a b x\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "assume \"a=b\""], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "with xab xE selfloop_no_forest insert(4)"], ["proof (chain)\npicking this:\n  joins a b x\n  x \\<in> E\n  \\<lbrakk>?e \\<in> E; joins ?a ?a ?e\\<rbrakk>\n  \\<Longrightarrow> \\<not> forest (insert ?e ?F)\n  forest (insert x F)\n  a = b", "have \"False\""], ["proof (prove)\nusing this:\n  joins a b x\n  x \\<in> E\n  \\<lbrakk>?e \\<in> E; joins ?a ?a ?e\\<rbrakk>\n  \\<Longrightarrow> \\<not> forest (insert ?e ?F)\n  forest (insert x F)\n  a = b\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "}"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "then"], ["proof (chain)\npicking this:\n  a = b \\<Longrightarrow> False", "have xab': \"a\\<noteq>b\""], ["proof (prove)\nusing this:\n  a = b \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. a \\<noteq> b", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "from insert(4) forest_mono"], ["proof (chain)\npicking this:\n  forest (insert x F)\n  \\<lbrakk>forest ?X; ?Y \\<subseteq> ?X\\<rbrakk> \\<Longrightarrow> forest ?Y", "have fF: \"forest F\""], ["proof (prove)\nusing this:\n  forest (insert x F)\n  \\<lbrakk>forest ?X; ?Y \\<subseteq> ?X\\<rbrakk> \\<Longrightarrow> forest ?Y\n\ngoal (1 subgoal):\n 1. forest F", "by auto"], ["proof (state)\nthis:\n  forest F\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "with insert(3)"], ["proof (chain)\npicking this:\n  forest F \\<Longrightarrow> card (CCs F) + card F = card V\n  forest F", "have eq: \"card (CCs F) + card F = card V\""], ["proof (prove)\nusing this:\n  forest F \\<Longrightarrow> card (CCs F) + card F = card V\n  forest F\n\ngoal (1 subgoal):\n 1. card (CCs F) + card F = card V", "by auto"], ["proof (state)\nthis:\n  card (CCs F) + card F = card V\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "from insert(4) forest_subE"], ["proof (chain)\npicking this:\n  forest (insert x F)\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E", "have k: \"F \\<subseteq> E\""], ["proof (prove)\nusing this:\n  forest (insert x F)\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E\n\ngoal (1 subgoal):\n 1. F \\<subseteq> E", "by auto"], ["proof (state)\nthis:\n  F \\<subseteq> E\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "from xab xab'"], ["proof (chain)\npicking this:\n  joins a b x\n  a \\<noteq> b", "have abV: \"a\\<in>V\" \"b\\<in>V\""], ["proof (prove)\nusing this:\n  joins a b x\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<in> V &&& b \\<in> V", "using vertices_constr E_inV xE"], ["proof (prove)\nusing this:\n  joins a b x\n  a \\<noteq> b\n  joins ?a ?b ?e \\<Longrightarrow> {?a, ?b} \\<subseteq> vertices ?e\n  ?e \\<in> E \\<Longrightarrow> vertices ?e \\<subseteq> V\n  x \\<in> E\n\ngoal (1 subgoal):\n 1. a \\<in> V &&& b \\<in> V", "by fastforce+"], ["proof (state)\nthis:\n  a \\<in> V\n  b \\<in> V\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "have \"(a,b) \\<notin> connected F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<notin> connected F", "apply(subst augment_forest[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. forest F\n 2. ?e \\<in> E - F\n 3. joins a b ?e\n 4. forest (insert ?e F)", "apply (rule fF)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ?e \\<in> E - F\n 2. joins a b ?e\n 3. forest (insert ?e F)", "using xE xab xab insert"], ["proof (prove)\nusing this:\n  x \\<in> E\n  joins a b x\n  joins a b x\n  finite F\n  x \\<notin> F\n  forest F \\<Longrightarrow> card (CCs F) + card F = card V\n  forest (insert x F)\n\ngoal (3 subgoals):\n 1. ?e \\<in> E - F\n 2. joins a b ?e\n 3. forest (insert ?e F)", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<notin> connected F\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "with k abV sameCC_reachable"], ["proof (chain)\npicking this:\n  F \\<subseteq> E\n  a \\<in> V\n  b \\<in> V\n  \\<lbrakk>?E' \\<subseteq> E; ?u \\<in> V; ?v \\<in> V\\<rbrakk>\n  \\<Longrightarrow> (CC ?E' ?u = CC ?E' ?v) = ((?u, ?v) \\<in> connected ?E')\n  (a, b) \\<notin> connected F", "have \"CC F a \\<noteq> CC F b\""], ["proof (prove)\nusing this:\n  F \\<subseteq> E\n  a \\<in> V\n  b \\<in> V\n  \\<lbrakk>?E' \\<subseteq> E; ?u \\<in> V; ?v \\<in> V\\<rbrakk>\n  \\<Longrightarrow> (CC ?E' ?u = CC ?E' ?v) = ((?u, ?v) \\<in> connected ?E')\n  (a, b) \\<notin> connected F\n\ngoal (1 subgoal):\n 1. CC F a \\<noteq> CC F b", "by auto"], ["proof (state)\nthis:\n  CC F a \\<noteq> CC F b\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "have \"Suc (card (CCs (insert x F))) = card (CCs F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card (CCs (insert x F))) = card (CCs F)", "apply(rule union_eqclass_decreases_components)"], ["proof (prove)\ngoal (7 subgoals):\n 1. CC F ?x \\<noteq> CC F ?y\n 2. x \\<notin> F\n 3. ?x \\<in> V\n 4. ?y \\<in> V\n 5. F \\<subseteq> E\n 6. x \\<in> E\n 7. joins ?x ?y x", "by fact+"], ["proof (state)\nthis:\n  Suc (card (CCs (insert x F))) = card (CCs F)\n\ngoal (2 subgoals):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        forest F \\<Longrightarrow> card (CCs F) + card F = card V;\n        forest (insert x F)\\<rbrakk>\n       \\<Longrightarrow> card (CCs (insert x F)) + card (insert x F) =\n                         card V", "then"], ["proof (chain)\npicking this:\n  Suc (card (CCs (insert x F))) = card (CCs F)", "show ?case"], ["proof (prove)\nusing this:\n  Suc (card (CCs (insert x F))) = card (CCs F)\n\ngoal (1 subgoal):\n 1. card (CCs (insert x F)) + card (insert x F) = card V", "using xab insert(1,2) eq"], ["proof (prove)\nusing this:\n  Suc (card (CCs (insert x F))) = card (CCs F)\n  joins a b x\n  finite F\n  x \\<notin> F\n  card (CCs F) + card F = card V\n\ngoal (1 subgoal):\n 1. card (CCs (insert x F)) + card (insert x F) = card V", "by auto"], ["proof (state)\nthis:\n  card (CCs (insert x F)) + card (insert x F) = card V\n\ngoal (1 subgoal):\n 1. forest {} \\<Longrightarrow> card (CCs {}) + card {} = card V", "qed (simp add: CCs_empty_card)"], ["proof (state)\nthis:\n  card (CCs E') + card E' = card V\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pigeonhole_CCs: \n  assumes finiteV: \"finite V\" and cardlt: \"card (CCs E1) < card (CCs E2)\"\n  shows \"(\\<exists>u v. u\\<in>V \\<and> v\\<in>V \\<and> CC E1 u = CC E1 v \\<and> CC E2 u \\<noteq> CC E2 v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       u \\<in> V \\<and>\n       v \\<in> V \\<and> CC E1 u = CC E1 v \\<and> CC E2 u \\<noteq> CC E2 v", "proof (rule ccontr, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> V \\<longrightarrow>\n       (\\<forall>v.\n           CC E1 u = CC E1 v \\<longrightarrow>\n           v \\<in> V \\<longrightarrow> CC E2 u = CC E2 v) \\<Longrightarrow>\n    False", "assume \"\\<forall>u. u \\<in> V \\<longrightarrow> (\\<forall>v. CC E1 u = CC E1 v \\<longrightarrow> v \\<in> V \\<longrightarrow> CC E2 u = CC E2 v)\""], ["proof (state)\nthis:\n  \\<forall>u.\n     u \\<in> V \\<longrightarrow>\n     (\\<forall>v.\n         CC E1 u = CC E1 v \\<longrightarrow>\n         v \\<in> V \\<longrightarrow> CC E2 u = CC E2 v)\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> V \\<longrightarrow>\n       (\\<forall>v.\n           CC E1 u = CC E1 v \\<longrightarrow>\n           v \\<in> V \\<longrightarrow> CC E2 u = CC E2 v) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<forall>u.\n     u \\<in> V \\<longrightarrow>\n     (\\<forall>v.\n         CC E1 u = CC E1 v \\<longrightarrow>\n         v \\<in> V \\<longrightarrow> CC E2 u = CC E2 v)", "have \"\\<And>u v. u\\<in>V \\<Longrightarrow> v\\<in>V \\<Longrightarrow> CC E1 u = CC E1 v \\<Longrightarrow> CC E2 u = CC E2 v\""], ["proof (prove)\nusing this:\n  \\<forall>u.\n     u \\<in> V \\<longrightarrow>\n     (\\<forall>v.\n         CC E1 u = CC E1 v \\<longrightarrow>\n         v \\<in> V \\<longrightarrow> CC E2 u = CC E2 v)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> V; v \\<in> V; CC E1 u = CC E1 v\\<rbrakk>\n       \\<Longrightarrow> CC E2 u = CC E2 v", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?u \\<in> V; ?v \\<in> V; CC E1 ?u = CC E1 ?v\\<rbrakk>\n  \\<Longrightarrow> CC E2 ?u = CC E2 ?v\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> V \\<longrightarrow>\n       (\\<forall>v.\n           CC E1 u = CC E1 v \\<longrightarrow>\n           v \\<in> V \\<longrightarrow> CC E2 u = CC E2 v) \\<Longrightarrow>\n    False", "with coarser[OF finiteV]"], ["proof (chain)\npicking this:\n  (\\<And>a b.\n      \\<lbrakk>a \\<in> V; b \\<in> V; ?f a = ?f b\\<rbrakk>\n      \\<Longrightarrow> ?g a = ?g b) \\<Longrightarrow>\n  card (?g ` V) \\<le> card (?f ` V)\n  \\<lbrakk>?u \\<in> V; ?v \\<in> V; CC E1 ?u = CC E1 ?v\\<rbrakk>\n  \\<Longrightarrow> CC E2 ?u = CC E2 ?v", "have \"card ((CC E1) ` V) \\<ge> card ((CC E2) ` V)\""], ["proof (prove)\nusing this:\n  (\\<And>a b.\n      \\<lbrakk>a \\<in> V; b \\<in> V; ?f a = ?f b\\<rbrakk>\n      \\<Longrightarrow> ?g a = ?g b) \\<Longrightarrow>\n  card (?g ` V) \\<le> card (?f ` V)\n  \\<lbrakk>?u \\<in> V; ?v \\<in> V; CC E1 ?u = CC E1 ?v\\<rbrakk>\n  \\<Longrightarrow> CC E2 ?u = CC E2 ?v\n\ngoal (1 subgoal):\n 1. card (CC E2 ` V) \\<le> card (CC E1 ` V)", "by blast"], ["proof (state)\nthis:\n  card (CC E2 ` V) \\<le> card (CC E1 ` V)\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       u \\<in> V \\<longrightarrow>\n       (\\<forall>v.\n           CC E1 u = CC E1 v \\<longrightarrow>\n           v \\<in> V \\<longrightarrow> CC E2 u = CC E2 v) \\<Longrightarrow>\n    False", "with CCs_imageCC cardlt"], ["proof (chain)\npicking this:\n  CCs ?F = CC ?F ` V\n  card (CCs E1) < card (CCs E2)\n  card (CC E2 ` V) \\<le> card (CC E1 ` V)", "show \"False\""], ["proof (prove)\nusing this:\n  CCs ?F = CC ?F ` V\n  card (CCs E1) < card (CCs E2)\n  card (CC E2 ` V) \\<le> card (CC E1 ` V)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The edge set and forest form the cycle matroid\\<close>"], ["", "theorem assumes f1: \"forest E1\"\n  and f2: \"forest E2\"  \n  and c: \"card E1 > card E2\"\nshows augment: \"\\<exists>e\\<in>E1-E2. forest (insert e E2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "proof -\n  \\<comment> \\<open>as E1 and E2 are both forests, and E1 has more edges than E2, E2 has more connected\n        components than E1\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "from forest_CCs[OF f1] forest_CCs[OF f2] c"], ["proof (chain)\npicking this:\n  card (CCs E1) + card E1 = card V\n  card (CCs E2) + card E2 = card V\n  card E2 < card E1", "have \"card (CCs E1) < card (CCs E2)\""], ["proof (prove)\nusing this:\n  card (CCs E1) + card E1 = card V\n  card (CCs E2) + card E2 = card V\n  card E2 < card E1\n\ngoal (1 subgoal):\n 1. card (CCs E1) < card (CCs E2)", "by linarith\n\n  \\<comment> \\<open>by an pigeonhole argument, we can obtain two vertices u and v\n     that are in the same components of E1, but in different components of E2\\<close>"], ["proof (state)\nthis:\n  card (CCs E1) < card (CCs E2)\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "then"], ["proof (chain)\npicking this:\n  card (CCs E1) < card (CCs E2)", "obtain u v where sameCCinE1: \"CC E1 u = CC E1 v\" and\n    diffCCinE2: \"CC E2 u \\<noteq> CC E2 v\" and k: \"u \\<in> V\" \"v \\<in> V\""], ["proof (prove)\nusing this:\n  card (CCs E1) < card (CCs E2)\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>CC E1 u = CC E1 v; CC E2 u \\<noteq> CC E2 v; u \\<in> V;\n         v \\<in> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pigeonhole_CCs[OF finiteV]"], ["proof (prove)\nusing this:\n  card (CCs E1) < card (CCs E2)\n  card (CCs ?E1.0) < card (CCs ?E2.0) \\<Longrightarrow>\n  \\<exists>u v.\n     u \\<in> V \\<and>\n     v \\<in> V \\<and>\n     CC ?E1.0 u = CC ?E1.0 v \\<and> CC ?E2.0 u \\<noteq> CC ?E2.0 v\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>CC E1 u = CC E1 v; CC E2 u \\<noteq> CC E2 v; u \\<in> V;\n         v \\<in> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  CC E1 u = CC E1 v\n  CC E2 u \\<noteq> CC E2 v\n  u \\<in> V\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "from diffCCinE2"], ["proof (chain)\npicking this:\n  CC E2 u \\<noteq> CC E2 v", "have unv: \"u \\<noteq> v\""], ["proof (prove)\nusing this:\n  CC E2 u \\<noteq> CC E2 v\n\ngoal (1 subgoal):\n 1. u \\<noteq> v", "by auto\n\n  \\<comment> \\<open>this means that there is a path from u to v in E1 ...\\<close>"], ["proof (state)\nthis:\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "from f1 forest_subE"], ["proof (chain)\npicking this:\n  forest E1\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E", "have e1: \"E1 \\<subseteq> E\""], ["proof (prove)\nusing this:\n  forest E1\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E\n\ngoal (1 subgoal):\n 1. E1 \\<subseteq> E", "by auto"], ["proof (state)\nthis:\n  E1 \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "with   sameCC_reachable k sameCCinE1"], ["proof (chain)\npicking this:\n  \\<lbrakk>?E' \\<subseteq> E; ?u \\<in> V; ?v \\<in> V\\<rbrakk>\n  \\<Longrightarrow> (CC ?E' ?u = CC ?E' ?v) = ((?u, ?v) \\<in> connected ?E')\n  u \\<in> V\n  v \\<in> V\n  CC E1 u = CC E1 v\n  E1 \\<subseteq> E", "have pathinE1: \"(u, v) \\<in> connected E1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?E' \\<subseteq> E; ?u \\<in> V; ?v \\<in> V\\<rbrakk>\n  \\<Longrightarrow> (CC ?E' ?u = CC ?E' ?v) = ((?u, ?v) \\<in> connected ?E')\n  u \\<in> V\n  v \\<in> V\n  CC E1 u = CC E1 v\n  E1 \\<subseteq> E\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> connected E1", "by auto \n      \\<comment> \\<open>... but none in E2\\<close>"], ["proof (state)\nthis:\n  (u, v) \\<in> connected E1\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "from f2 forest_subE"], ["proof (chain)\npicking this:\n  forest E2\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E", "have e2: \"E2 \\<subseteq> E\""], ["proof (prove)\nusing this:\n  forest E2\n  forest ?E' \\<Longrightarrow> ?E' \\<subseteq> E\n\ngoal (1 subgoal):\n 1. E2 \\<subseteq> E", "by auto"], ["proof (state)\nthis:\n  E2 \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "with   sameCC_reachable k diffCCinE2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?E' \\<subseteq> E; ?u \\<in> V; ?v \\<in> V\\<rbrakk>\n  \\<Longrightarrow> (CC ?E' ?u = CC ?E' ?v) = ((?u, ?v) \\<in> connected ?E')\n  u \\<in> V\n  v \\<in> V\n  CC E2 u \\<noteq> CC E2 v\n  E2 \\<subseteq> E", "have nopathinE2: \"(u, v) \\<notin> connected E2\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?E' \\<subseteq> E; ?u \\<in> V; ?v \\<in> V\\<rbrakk>\n  \\<Longrightarrow> (CC ?E' ?u = CC ?E' ?v) = ((?u, ?v) \\<in> connected ?E')\n  u \\<in> V\n  v \\<in> V\n  CC E2 u \\<noteq> CC E2 v\n  E2 \\<subseteq> E\n\ngoal (1 subgoal):\n 1. (u, v) \\<notin> connected E2", "by auto\n\n  \\<comment> \\<open>hence, we can find vertices a and b that are not connected in E2,\n          but are connected by an edge in E1\\<close>"], ["proof (state)\nthis:\n  (u, v) \\<notin> connected E2\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "obtain a b e where pe: \"(a,b) \\<notin> connected E2\" and abE2: \"e \\<notin> E2\"\n    and abE1: \"e \\<in> E1\" and \"joins a b e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b e.\n        \\<lbrakk>(a, b) \\<notin> connected E2; e \\<notin> E2; e \\<in> E1;\n         joins a b e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using findaugmenting_aux[OF e1 e2 pathinE1 nopathinE2]"], ["proof (prove)\nusing this:\n  \\<exists>a b e.\n     (a, b) \\<notin> connected E2 \\<and>\n     e \\<notin> E2 \\<and> e \\<in> E1 \\<and> joins a b e\n\ngoal (1 subgoal):\n 1. (\\<And>a b e.\n        \\<lbrakk>(a, b) \\<notin> connected E2; e \\<notin> E2; e \\<in> E1;\n         joins a b e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<notin> connected E2\n  e \\<notin> E2\n  e \\<in> E1\n  joins a b e\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "with forest_subE[OF f1]"], ["proof (chain)\npicking this:\n  E1 \\<subseteq> E\n  (a, b) \\<notin> connected E2\n  e \\<notin> E2\n  e \\<in> E1\n  joins a b e", "have \"e \\<in> E\""], ["proof (prove)\nusing this:\n  E1 \\<subseteq> E\n  (a, b) \\<notin> connected E2\n  e \\<notin> E2\n  e \\<in> E1\n  joins a b e\n\ngoal (1 subgoal):\n 1. e \\<in> E", "by auto"], ["proof (state)\nthis:\n  e \\<in> E\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "from abE1 abE2"], ["proof (chain)\npicking this:\n  e \\<in> E1\n  e \\<notin> E2", "have abdif: \"e \\<in> E1 - E2\""], ["proof (prove)\nusing this:\n  e \\<in> E1\n  e \\<notin> E2\n\ngoal (1 subgoal):\n 1. e \\<in> E1 - E2", "by auto"], ["proof (state)\nthis:\n  e \\<in> E1 - E2\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "with e1"], ["proof (chain)\npicking this:\n  E1 \\<subseteq> E\n  e \\<in> E1 - E2", "have \"e \\<in> E - E2\""], ["proof (prove)\nusing this:\n  E1 \\<subseteq> E\n  e \\<in> E1 - E2\n\ngoal (1 subgoal):\n 1. e \\<in> E - E2", "by auto\n\n  \\<comment> \\<open>we can savely add this edge between a and b to E2 and obtain a bigger forest\\<close>"], ["proof (state)\nthis:\n  e \\<in> E - E2\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "have \"forest (insert e E2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. forest (insert e E2)", "apply(subst augment_forest)"], ["proof (prove)\ngoal (4 subgoals):\n 1. forest E2\n 2. e \\<in> E - E2\n 3. joins ?u ?v e\n 4. (?u, ?v) \\<notin> connected E2", "by fact+"], ["proof (state)\nthis:\n  forest (insert e E2)\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "then"], ["proof (chain)\npicking this:\n  forest (insert e E2)", "show \"\\<exists>e\\<in>E1-E2. forest (insert e E2)\""], ["proof (prove)\nusing this:\n  forest (insert e E2)\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "using abdif"], ["proof (prove)\nusing this:\n  forest (insert e E2)\n  e \\<in> E1 - E2\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>E1 - E2. forest (insert e E2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>e\\<in>E1 - E2. forest (insert e E2)\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale weighted_matroid E forest weight"], ["proof (prove)\ngoal (1 subgoal):\n 1. weighted_matroid E forest", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. finite E\n 2. \\<And>X. forest X \\<Longrightarrow> X \\<subseteq> E\n 3. \\<exists>X. forest X\n 4. \\<And>X Y.\n       \\<lbrakk>forest X; Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest Y\n 5. \\<And>X Y.\n       \\<lbrakk>forest X; forest Y; card X = Suc (card Y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X - Y. forest (insert x Y)", "have \"forest {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. forest {}", "using forest_empty"], ["proof (prove)\nusing this:\n  forest {}\n\ngoal (1 subgoal):\n 1. forest {}", "by auto"], ["proof (state)\nthis:\n  forest {}\n\ngoal (5 subgoals):\n 1. finite E\n 2. \\<And>X. forest X \\<Longrightarrow> X \\<subseteq> E\n 3. \\<exists>X. forest X\n 4. \\<And>X Y.\n       \\<lbrakk>forest X; Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest Y\n 5. \\<And>X Y.\n       \\<lbrakk>forest X; forest Y; card X = Suc (card Y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X - Y. forest (insert x Y)", "then"], ["proof (chain)\npicking this:\n  forest {}", "show \"\\<exists>X. forest X\""], ["proof (prove)\nusing this:\n  forest {}\n\ngoal (1 subgoal):\n 1. \\<exists>X. forest X", "by blast"], ["proof (state)\nthis:\n  \\<exists>X. forest X\n\ngoal (4 subgoals):\n 1. finite E\n 2. \\<And>X. forest X \\<Longrightarrow> X \\<subseteq> E\n 3. \\<And>X Y.\n       \\<lbrakk>forest X; Y \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> forest Y\n 4. \\<And>X Y.\n       \\<lbrakk>forest X; forest Y; card X = Suc (card Y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X - Y. forest (insert x Y)", "qed (auto simp: forest_subE forest_mono augment)"], ["", "end \\<comment> \\<open>locale @{text Kruskal_interface}\\<close>"], ["", "end"]]}