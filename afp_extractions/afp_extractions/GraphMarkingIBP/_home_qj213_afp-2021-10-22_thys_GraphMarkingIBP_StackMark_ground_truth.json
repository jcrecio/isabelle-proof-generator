{"file_name": "/home/qj213/afp-2021-10-22/thys/GraphMarkingIBP/StackMark.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/GraphMarkingIBP", "problem_names": ["lemma [simp]: \"R1_a \\<in> Apply.Disjunctive\"", "lemma [simp]: \"R2_a \\<in> Apply.Disjunctive\"", "lemma [simp]: \"Disjunctive_fun R_a\"", "theorem (in graph) init_nil [simp]:\n  \"DataRefinement ({.Init.} o Q1_a) R1_a R2_a Q1'_a\"", "theorem (in graph) init_root [simp]:\n  \"DataRefinement ({.Init.} o Q2_a) R1_a R2_a Q2'_a\"", "theorem (in graph) step1 [simp]:\n  \"DataRefinement ({.Loop.} o Q3_a) R2_a R2_a Q3'_a\"", "theorem (in graph) step2 [simp]:\n  \"DataRefinement ({.Loop.} o Q4_a) R2_a R2_a Q4'_a\"", "theorem (in graph) final [simp]:\n  \"DataRefinement ({.Loop.} o Q5_a)  R2_a R1_a Q5'_a\"", "lemma assert_comp_choice: \"{.p.} o (S \\<sqinter> T) = ({.p.} o S) \\<sqinter> ({.p.} o T)\"", "theorem (in graph) StackMark_DataRefinement [simp]:\n \"DgrDataRefinement2 SetMarkInv SetMark R_a StackMark_a\"", "theorem (in graph) StackMark_correct:\n  \"Hoare_dgr (R_a .. SetMarkInv) StackMark_a ((R_a .. SetMarkInv) \\<sqinter> (- grd (step (StackMark_a))))\""], "translations": [["", "lemma [simp]: \"R1_a \\<in> Apply.Disjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R1_a \\<in> Apply.Disjunctive", "by (simp add: R1_a_def)"], ["", "lemma [simp]: \"R2_a \\<in> Apply.Disjunctive\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R2_a \\<in> Apply.Disjunctive", "by (simp add: R2_a_def)"], ["", "definition [simp]:\n  \"R_a i = (case i of\n      I.init  \\<Rightarrow> R1_a |\n      I.loop  \\<Rightarrow> R2_a |\n      I.final \\<Rightarrow> R1_a)\""], ["", "lemma [simp]: \"Disjunctive_fun R_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Disjunctive_fun R_a", "by (simp add: Disjunctive_fun_def)"], ["", "definition\n  \"angelic_fun r = (\\<lambda> i . {:r i:})\""], ["", "definition (in graph)\n  \"StackMark_a = (\\<lambda> (i, j) . (case (i, j) of\n      (I.init, I.loop)  \\<Rightarrow> Q1'_a \\<sqinter> Q2'_a |\n      (I.loop, I.loop)  \\<Rightarrow> Q3'_a \\<sqinter> Q4'_a |\n      (I.loop, I.final) \\<Rightarrow> Q5'_a |\n       _ \\<Rightarrow> \\<top>))\""], ["", "subsection \\<open>Data refinement of the transitions\\<close>"], ["", "theorem (in graph) init_nil [simp]:\n  \"DataRefinement ({.Init.} o Q1_a) R1_a R2_a Q1'_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataRefinement ({. Init .} \\<circ> Q1_a) R1_a R2_a Q1'_a", "by (simp add: data_refinement_hoare hoare_demonic Q1'_a_def Init_def \n     Loop'_def R1_a_def R2_a_def Q1_a_def angelic_def subset_eq)"], ["", "theorem (in graph) init_root [simp]:\n  \"DataRefinement ({.Init.} o Q2_a) R1_a R2_a Q2'_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataRefinement ({. Init .} \\<circ> Q2_a) R1_a R2_a Q2'_a", "by (simp add: data_refinement_hoare hoare_demonic Q2'_a_def Init_def \n     Loop'_def R1_a_def R2_a_def Q2_a_def angelic_def subset_eq)"], ["", "theorem (in graph) step1 [simp]:\n  \"DataRefinement ({.Loop.} o Q3_a) R2_a R2_a Q3'_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataRefinement ({. Loop .} \\<circ> Q3_a) R2_a R2_a Q3'_a", "apply (simp add: data_refinement_hoare hoare_demonic Loop_def \n    Loop'_def R2_a_def Q3_a_def Q3'_a_def angelic_def subset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b a.\n       distinct a \\<and>\n       finite (- b) \\<and>\n       (\\<forall>x\\<in>set a. x \\<in> b) \\<and>\n       (\\<forall>x\\<in>b. x \\<in> reach root) \\<and>\n       (\\<forall>x\\<in>reach root \\<inter> - b.\n           x \\<in> path (set a) b) \\<longrightarrow>\n       (\\<forall>aa ba.\n           a \\<noteq> [] \\<and>\n           (\\<exists>y.\n               (hd a, y) \\<in> next \\<and>\n               y \\<notin> b \\<and>\n               aa = y # a \\<and> ba = insert y b) \\<longrightarrow>\n           {set aa} \\<times> {mrk'. mrk' = ba \\<and> distinct aa} \\<inter>\n           {(X', mrk').\n            \\<exists>x\\<in>set a.\n               \\<exists>y.\n                  (x, y) \\<in> next \\<and>\n                  y \\<notin> b \\<and>\n                  X' = insert y (set a) \\<and> mrk' = insert y b} \\<noteq>\n           {})", "apply (simp add: simp_eq_emptyset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b a.\n       distinct a \\<and>\n       finite (- b) \\<and>\n       (\\<forall>x\\<in>set a. x \\<in> b) \\<and>\n       (\\<forall>x\\<in>b. x \\<in> reach root) \\<and>\n       (\\<forall>x\\<in>reach root \\<inter> - b.\n           x \\<in> path (set a) b) \\<longrightarrow>\n       (\\<forall>aa ba.\n           a \\<noteq> [] \\<and>\n           (\\<exists>y.\n               (hd a, y) \\<in> next \\<and>\n               y \\<notin> b \\<and>\n               aa = y # a \\<and> ba = insert y b) \\<longrightarrow>\n           distinct aa \\<and>\n           (\\<exists>x\\<in>set a.\n               \\<exists>y.\n                  set aa = insert y (set a) \\<and>\n                  (x, y) \\<in> next \\<and>\n                  y \\<notin> b \\<and> ba = insert y b))", "by (metis List.set_simps(2) hd_in_set distinct.simps(2))"], ["", "theorem (in graph) step2 [simp]:\n  \"DataRefinement ({.Loop.} o Q4_a) R2_a R2_a Q4'_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataRefinement ({. Loop .} \\<circ> Q4_a) R2_a R2_a Q4'_a", "apply (simp add: data_refinement_hoare hoare_demonic Loop_def \n    Loop'_def R2_a_def Q4_a_def Q4'_a_def angelic_def subset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b a.\n       distinct a \\<and>\n       finite (- b) \\<and>\n       (\\<forall>x\\<in>set a. x \\<in> b) \\<and>\n       (\\<forall>x\\<in>b. x \\<in> reach root) \\<and>\n       (\\<forall>x\\<in>reach root \\<inter> - b.\n           x \\<in> path (set a) b) \\<longrightarrow>\n       a \\<noteq> [] \\<and>\n       (\\<forall>y.\n           (hd a, y) \\<in> next \\<longrightarrow>\n           y \\<in> b) \\<longrightarrow>\n       {set (tl a)} \\<times>\n       {mrk'. mrk' = b \\<and> distinct (tl a)} \\<inter>\n       {(X', mrk').\n        \\<exists>x\\<in>set a.\n           (\\<forall>y.\n               (x, y) \\<in> next \\<longrightarrow> y \\<in> b) \\<and>\n           X' = set a - {x} \\<and> mrk' = b} \\<noteq>\n       {}", "apply (simp add: simp_eq_emptyset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b a.\n       distinct a \\<and>\n       finite (- b) \\<and>\n       (\\<forall>x\\<in>set a. x \\<in> b) \\<and>\n       (\\<forall>x\\<in>b. x \\<in> reach root) \\<and>\n       (\\<forall>x\\<in>reach root \\<inter> - b.\n           x \\<in> path (set a) b) \\<longrightarrow>\n       a \\<noteq> [] \\<and>\n       (\\<forall>y.\n           (hd a, y) \\<in> next \\<longrightarrow>\n           y \\<in> b) \\<longrightarrow>\n       distinct (tl a) \\<and>\n       (\\<exists>x\\<in>set a.\n           (\\<forall>y.\n               (x, y) \\<in> next \\<longrightarrow> y \\<in> b) \\<and>\n           set (tl a) = set a - {x})", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>distinct a; finite (- b); \\<forall>x\\<in>set a. x \\<in> b;\n        \\<forall>x\\<in>b. x \\<in> reach root;\n        \\<forall>x\\<in>reach root \\<inter> - b. x \\<in> path (set a) b;\n        a \\<noteq> [];\n        \\<forall>y.\n           (hd a, y) \\<in> next \\<longrightarrow> y \\<in> b\\<rbrakk>\n       \\<Longrightarrow> distinct (tl a) \\<and>\n                         (\\<exists>x\\<in>set a.\n                             (\\<forall>y.\n                                 (x, y) \\<in> next \\<longrightarrow>\n                                 y \\<in> b) \\<and>\n                             set (tl a) = set a - {x})", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b a.\n       \\<lbrakk>distinct a; finite (- b); \\<forall>x\\<in>set a. x \\<in> b;\n        \\<forall>x\\<in>b. x \\<in> reach root;\n        \\<forall>x\\<in>reach root \\<inter> - b. x \\<in> path (set a) b;\n        a \\<noteq> [];\n        \\<forall>y. (hd a, y) \\<in> next \\<longrightarrow> y \\<in> b;\n        a = []\\<rbrakk>\n       \\<Longrightarrow> distinct (tl a) \\<and>\n                         (\\<exists>x\\<in>set a.\n                             (\\<forall>y.\n                                 (x, y) \\<in> next \\<longrightarrow>\n                                 y \\<in> b) \\<and>\n                             set (tl a) = set a - {x})\n 2. \\<And>b a aa list.\n       \\<lbrakk>distinct a; finite (- b); \\<forall>x\\<in>set a. x \\<in> b;\n        \\<forall>x\\<in>b. x \\<in> reach root;\n        \\<forall>x\\<in>reach root \\<inter> - b. x \\<in> path (set a) b;\n        a \\<noteq> [];\n        \\<forall>y. (hd a, y) \\<in> next \\<longrightarrow> y \\<in> b;\n        a = aa # list\\<rbrakk>\n       \\<Longrightarrow> distinct (tl a) \\<and>\n                         (\\<exists>x\\<in>set a.\n                             (\\<forall>y.\n                                 (x, y) \\<in> next \\<longrightarrow>\n                                 y \\<in> b) \\<and>\n                             set (tl a) = set a - {x})", "by auto"], ["", "theorem (in graph) final [simp]:\n  \"DataRefinement ({.Loop.} o Q5_a)  R2_a R1_a Q5'_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataRefinement ({. Loop .} \\<circ> Q5_a) R2_a R1_a Q5'_a", "apply (simp add: data_refinement_hoare hoare_demonic Loop_def \n    Loop'_def R2_a_def R1_a_def Q5_a_def Q5'_a_def angelic_def subset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b.\n       finite (- b) \\<and>\n       (\\<forall>x\\<in>b. x \\<in> reach root) \\<and>\n       (\\<forall>x\\<in>reach root \\<inter> - b.\n           x \\<in> path {} b) \\<longrightarrow>\n       {(X, mrk'). mrk' = b} \\<inter> {(X', y). b = y} \\<noteq> {}", "by (simp add: simp_eq_emptyset)"], ["", "subsection \\<open>Diagram data refinement\\<close>"], ["", "lemma assert_comp_choice: \"{.p.} o (S \\<sqinter> T) = ({.p.} o S) \\<sqinter> ({.p.} o T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {. p .} \\<circ> S \\<sqinter> T =\n    ({. p .} \\<circ> S) \\<sqinter> ({. p .} \\<circ> T)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {. p .} \\<circ> S \\<sqinter> T \\<sqsubseteq>\n    ({. p .} \\<circ> S) \\<sqinter> ({. p .} \\<circ> T)\n 2. ({. p .} \\<circ> S) \\<sqinter> ({. p .} \\<circ> T) \\<sqsubseteq>\n    {. p .} \\<circ> S \\<sqinter> T", "apply (simp_all add: fun_eq_iff assert_def le_fun_def inf_fun_def inf_assoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x.\n       p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> S x \\<and>\n       p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> T x\n 2. \\<forall>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq>\n       S x \\<and>\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> S x\n 2. \\<And>x. p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> T x\n 3. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> S x\n 4. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply (rule_tac y = \"S x \\<sqinter> T x\" in order_trans)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> S x \\<sqinter> T x\n 2. \\<And>x. S x \\<sqinter> T x \\<sqsubseteq> S x\n 3. \\<And>x. p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> T x\n 4. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> S x\n 5. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply (rule inf_le2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. S x \\<sqinter> T x \\<sqsubseteq> S x\n 2. \\<And>x. p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> T x\n 3. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> S x\n 4. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> T x\n 2. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> S x\n 3. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply (rule_tac y = \"S x \\<sqinter> T x\" in order_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> T x) \\<sqsubseteq> S x \\<sqinter> T x\n 2. \\<And>x. S x \\<sqinter> T x \\<sqsubseteq> T x\n 3. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> S x\n 4. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply (rule inf_le2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. S x \\<sqinter> T x \\<sqsubseteq> T x\n 2. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> S x\n 3. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> S x\n 2. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply (rule_tac y = \"S x \\<sqinter> (p \\<sqinter> T x)\" in order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq>\n       S x \\<sqinter> (p \\<sqinter> T x)\n 2. \\<And>x. S x \\<sqinter> (p \\<sqinter> T x) \\<sqsubseteq> S x\n 3. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply (rule inf_le2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. S x \\<sqinter> (p \\<sqinter> T x) \\<sqsubseteq> S x\n 2. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq> T x", "apply (rule_tac y = \"S x \\<sqinter> (p \\<sqinter> T x)\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       p \\<sqinter> (S x \\<sqinter> (p \\<sqinter> T x)) \\<sqsubseteq>\n       S x \\<sqinter> (p \\<sqinter> T x)\n 2. \\<And>x. S x \\<sqinter> (p \\<sqinter> T x) \\<sqsubseteq> T x", "apply (rule inf_le2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. S x \\<sqinter> (p \\<sqinter> T x) \\<sqsubseteq> T x", "apply (rule_tac y = \"p \\<sqinter> T x\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       S x \\<sqinter> (p \\<sqinter> T x) \\<sqsubseteq> p \\<sqinter> T x\n 2. \\<And>x. p \\<sqinter> T x \\<sqsubseteq> T x", "apply (rule inf_le2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. p \\<sqinter> T x \\<sqsubseteq> T x", "by simp"], ["", "theorem (in graph) StackMark_DataRefinement [simp]:\n \"DgrDataRefinement2 SetMarkInv SetMark R_a StackMark_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DgrDataRefinement2 SetMarkInv SetMark R_a StackMark_a", "by (simp add: DgrDataRefinement2_def  StackMark_a_def SetMark_def demonic_sup_inf \n    SetMarkInv_def data_refinement_choice2 assert_comp_choice)"], ["", "subsection \\<open>Diagram correctness\\<close>"], ["", "theorem (in graph) StackMark_correct:\n  \"Hoare_dgr (R_a .. SetMarkInv) StackMark_a ((R_a .. SetMarkInv) \\<sqinter> (- grd (step (StackMark_a))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hoare_dgr (R_a .. SetMarkInv) StackMark_a\n     ((R_a .. SetMarkInv) \\<sqinter> - grd (step StackMark_a))", "apply (rule_tac D = \"SetMark\" in Diagram_DataRefinement2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. dmono SetMark\n 2. Disjunctive_fun R_a\n 3. Hoare_dgr SetMarkInv SetMark ?Q\n 4. DgrDataRefinement2 SetMarkInv SetMark R_a StackMark_a", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Hoare_dgr SetMarkInv SetMark ?Q", "by (rule SetMark_correct1)"], ["", "end"]]}