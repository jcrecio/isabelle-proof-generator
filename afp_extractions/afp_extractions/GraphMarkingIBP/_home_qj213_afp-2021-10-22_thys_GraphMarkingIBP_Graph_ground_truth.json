{"file_name": "/home/qj213/afp-2021-10-22/thys/GraphMarkingIBP/Graph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/GraphMarkingIBP", "problem_names": ["lemma [simp]: \"((nil, x) \\<in> next) = False\"", "lemma [simp]: \"((x, nil) \\<in> next) = False\"", "theorem head_not_nil [simp]:\n    \"(head S \\<noteq> nil) = (head S = hd S \\<and> tail S = tl S \\<and> hd S \\<noteq> nil \\<and> S \\<noteq> [])\"", "theorem nonempty_head [simp]:\n    \"head (x # S) = x\"", "theorem nonempty_tail [simp]:\n    \"tail (x # S) = S\"", "theorem (in graph) reach_nil [simp]: \"reach nil = {}\"", "theorem (in graph)  reach_next: \"b \\<in> reach a \\<Longrightarrow> (b, c) \\<in> next \\<Longrightarrow> c \\<in> reach a\""], "translations": [["", "lemma [simp]: \"((nil, x) \\<in> next) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((nil, x) \\<in> next) = False", "by (simp add: next_not_nil_left)"], ["", "lemma [simp]: \"((x, nil) \\<in> next) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, nil) \\<in> next) = False", "by (simp add: next_not_nil_right)"], ["", "theorem head_not_nil [simp]:\n    \"(head S \\<noteq> nil) = (head S = hd S \\<and> tail S = tl S \\<and> hd S \\<noteq> nil \\<and> S \\<noteq> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (head S \\<noteq> nil) =\n    (head S = hd S \\<and>\n     tail S = tl S \\<and> hd S \\<noteq> nil \\<and> S \\<noteq> [])", "by (simp add: head_def tail_def)"], ["", "theorem nonempty_head [simp]:\n    \"head (x # S) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (x # S) = x", "by (simp add: head_def)"], ["", "theorem nonempty_tail [simp]:\n    \"tail (x # S) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (x # S) = S", "by (simp add: tail_def)"], ["", "definition (in graph)\n    \"reach x \\<equiv> {y . (x, y) \\<in> next\\<^sup>* \\<and> y \\<noteq> nil}\""], ["", "theorem (in graph) reach_nil [simp]: \"reach nil = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach nil = {}", "apply (simp add: reach_def, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. (nil, x) \\<in> next\\<^sup>* \\<Longrightarrow> x = nil", "apply (drule rtrancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. ?P2 x nil\n 2. \\<And>x y z.\n       \\<lbrakk>(nil, y) \\<in> next\\<^sup>*; (y, z) \\<in> next;\n        ?P2 x y\\<rbrakk>\n       \\<Longrightarrow> ?P2 x z\n 3. \\<And>x. ?P2 x x \\<Longrightarrow> x = nil", "by auto"], ["", "theorem (in graph)  reach_next: \"b \\<in> reach a \\<Longrightarrow> (b, c) \\<in> next \\<Longrightarrow> c \\<in> reach a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> reach a; (b, c) \\<in> next\\<rbrakk>\n    \\<Longrightarrow> c \\<in> reach a", "apply (simp add: reach_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> next\\<^sup>* \\<and> b \\<noteq> nil;\n     (b, c) \\<in> next\\<rbrakk>\n    \\<Longrightarrow> (a, c) \\<in> next\\<^sup>* \\<and> c \\<noteq> nil", "by auto"], ["", "definition (in graph) \n    \"path S mrk \\<equiv> {x . (\\<exists> s . s \\<in> S \\<and> (s, x) \\<in> next O (next \\<inter> ((-mrk)\\<times>(-mrk)))\\<^sup>* )}\""], ["", "end"], ["", "end"]]}