{"file_name": "/home/qj213/afp-2021-10-22/thys/Inductive_Inference/TOTAL_CONS.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Inductive_Inference", "problem_names": ["lemma r_consist_phi_recfn [simp]: \"recfn 2 r_consist_phi\"", "lemma r_consist_phi:\n  assumes \"\\<forall>k<e_length e. \\<phi> i k \\<down>\"\n  shows \"eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)\"", "lemma r_consist_phi_init:\n  assumes \"f \\<in> \\<R>\" and \"\\<phi> i \\<in> \\<R>\"\n  shows \"eval r_consist_phi [i, f \\<triangleright> n] \\<down>= (if \\<forall>k\\<le>n. \\<phi> i k = f k then 0 else 1)\"", "lemma TOTAL_subseteq_CONS: \"TOTAL \\<subseteq> CONS\"", "lemma V_constotal_2I:\n  assumes \"f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\"\n    and \"j \\<ge> 2\"\n    and \"\\<forall>i<length a. a ! i \\<le> 1\"\n    and \"k \\<ge> 2\"\n    and \"\\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\"\n    and \"\\<phi> k = f\"\n  shows \"f \\<in> V_constotal_2\"", "lemma V_subseteq_R1: \"V_constotal \\<subseteq> \\<R>\"", "lemma V_in_CONS: \"learn_cons \\<phi> V_constotal rmge2\"", "lemma rs_recfn [simp]: \"recfn 1 r_s\"\n  and rs_total [simp]: \"\\<And>x. eval r_s [x] \\<down>\"\n  and eval_rs: \"\\<And>x. s x = eval r_s [x]\"", "lemma r_search_enum_recfn [simp]: \"recfn 2 r_search_enum\"", "lemma enumdom_empty_domain:\n  assumes \"\\<And>x. \\<phi> i x \\<up>\"\n  shows \"\\<And>y. enumdom i y \\<up>\"", "lemma enumdom_nonempty_domain:\n  assumes \"\\<phi> i x\\<^sub>0 \\<down>\"\n  shows \"\\<And>y. enumdom i y \\<down>\"\n   and \"\\<And>x. \\<phi> i x \\<down> \\<longleftrightarrow> (\\<exists>y. enumdom i y \\<down>= x)\"", "lemma search_enum_empty:\n  fixes b :: nat\n  assumes \"s b \\<down>= i\" and \"\\<And>x. \\<phi> i x \\<up>\"\n  shows \"\\<And>x. search_enum x b \\<up>\"", "lemma search_enum_nonempty:\n  fixes b y0 :: nat\n  assumes \"s b \\<down>= i\" and \"\\<phi> i y\\<^sub>0 \\<down>\" and \"e = the (enumdom i x)\"\n  shows \"search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)\"", "lemma search_enum_nonempty_eq0:\n  fixes b y :: nat\n  assumes \"s b \\<down>= i\" and \"\\<phi> i y \\<down>\" and \"y \\<ge> e_length b\"\n  shows \"\\<exists>x. search_enum x b \\<down>= 0\"", "lemma search_enum_nonempty_neq0:\n  fixes b y0 :: nat\n  assumes \"s b \\<down>= i\"\n    and \"\\<phi> i y\\<^sub>0 \\<down>\"\n    and \"\\<not> (\\<exists>y. \\<phi> i y \\<down> \\<and> y \\<ge> e_length b)\"\n  shows \"\\<not> (\\<exists>x. search_enum x b \\<down>= 0)\"", "lemma r_search_recfn [simp]: \"recfn 1 r_search\"", "lemma search_empty:\n  assumes \"s b \\<down>= i\" and \"\\<And>x. \\<phi> i x \\<up>\"\n  shows \"search b \\<up>\"", "lemma search_nonempty_neq0:\n  fixes b y0 :: nat\n  assumes \"s b \\<down>= i\"\n    and \"\\<phi> i y\\<^sub>0 \\<down>\"\n    and \"\\<not> (\\<exists>y. \\<phi> i y \\<down> \\<and> y \\<ge> e_length b)\"\n  shows \"search b \\<up>\"", "lemma search_nonempty_eq0:\n  fixes b y :: nat\n  assumes \"s b \\<down>= i\" and \"\\<phi> i y \\<down>\" and \"y \\<ge> e_length b\"\n  shows \"search b \\<down>\"\n    and \"\\<phi> i (the (search b)) \\<down>\"\n    and \"the (search b) \\<ge> e_length b\"", "lemma search_converg:\n  assumes \"s b \\<down>= i\" and \"search b \\<down>\" (is \"?y \\<down>\")\n  shows \"\\<phi> i (the ?y) \\<down>\"\n    and \"the ?y \\<ge> e_length b\"", "lemma search_diverg:\n  assumes \"s b \\<down>= i\" and \"search b \\<up>\"\n  shows \"\\<not> (\\<exists>y. \\<phi> i y \\<down> \\<and> y \\<ge> e_length b)\"", "lemma r_badblock_prim [simp]: \"recfn 2 r_badblock\"", "lemma r_badblock: \"eval r_badblock [n, v] \\<down>= list_encode (replicate n 0 @ [1 - v])\"", "lemma r_badblock_only_01: \"e_nth (the (eval r_badblock [n, v])) i \\<le> 1\"", "lemma r_badblock_last: \"e_nth (the (eval r_badblock [n, v])) n = 1 - v\"", "lemma r_next_recfn [simp]: \"recfn 1 r_next\"", "lemma nxt_diverg:\n  assumes \"search b \\<up>\"\n  shows \"nxt b \\<up>\"", "lemma nxt_converg:\n  assumes \"search b \\<down>= y\"\n  shows \"nxt b \\<down>=\n     e_append b (list_encode (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\"", "lemma nxt_search_diverg:\n  assumes \"nxt b \\<up>\"\n  shows \"search b \\<up>\"", "lemma nxt_wrong_hyp:\n  assumes \"nxt b \\<down>= b'\" and \"s b \\<down>= i\"\n  shows \"\\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y\"", "lemma nxt_nontotal_hyp:\n  assumes \"nxt b \\<up>\" and \"s b \\<down>= i\"\n  shows \"\\<exists>x. \\<phi> i x \\<up>\"", "lemma nxt_stable:\n  assumes \"nxt b \\<down>= b'\"\n  shows \"\\<forall>x<e_length b. e_nth b x = e_nth b' x\"", "lemma nxt_append_01:\n  assumes \"nxt b \\<down>= b'\"\n  shows \"\\<forall>x. x \\<ge> e_length b \\<and> x < e_length b' \\<longrightarrow>  e_nth b' x = 0 \\<or> e_nth b' x = 1\"", "lemma nxt_monotone:\n  assumes \"nxt b \\<down>= b'\"\n  shows \"e_length b < e_length b'\"", "lemma r_prefixes_recfn [simp]: \"recfn 2 r_prefixes\"", "lemma prefixes_at_0: \"prefixes 0 j \\<down>= list_encode [j]\"", "lemma prefixes_at_Suc:\n  assumes \"prefixes t j \\<down>\" (is \"?b \\<down>\")\n  shows \"prefixes (Suc t) j = nxt (the ?b)\"", "lemma prefixes_at_Suc':\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"prefixes (Suc t) j = nxt b\"", "lemma prefixes_prod_encode:\n  assumes \"prefixes t j \\<down>\"\n  obtains b where \"prefixes t j \\<down>= b\"", "lemma prefixes_converg_le:\n  assumes \"prefixes t j \\<down>\" and \"t' \\<le> t\"\n  shows \"prefixes t' j \\<down>\"", "lemma prefixes_diverg_add:\n  assumes \"prefixes t j \\<up>\"\n  shows \"prefixes (t + d) j \\<up>\"", "lemma prefixes_length:\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"e_length b > t\"", "lemma prefixes_monotone:\n  assumes \"prefixes t j \\<down>= b\" and \"prefixes (t + d) j \\<down>= b'\"\n  shows \"e_length b \\<le> e_length b'\"", "lemma prefixes_stable:\n  assumes \"prefixes t j \\<down>= b\" and \"prefixes (t + d) j \\<down>= b'\"\n  shows \"\\<forall>x<e_length b. e_nth b x = e_nth b' x\"", "lemma prefixes_tl_only_01:\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"\\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1\"", "lemma prefixes_hd:\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"e_nth b 0 = j\"", "lemma prefixes_nontotal_hyp:\n  assumes \"prefixes t j \\<down>= b\"\n    and \"prefixes (Suc t) j \\<up>\"\n    and \"s b \\<down>= i\"\n  shows \"\\<exists>x. \\<phi> i x \\<up>\"", "lemma case_two:\n  assumes \"case_two j\"\n  shows \"\\<exists>t. (\\<forall>t'\\<le>t. prefixes t' j \\<down>) \\<and> (\\<forall>t'>t. prefixes t' j \\<up>)\"", "lemma r_psi_recfn: \"recfn 2 r_psi\"", "lemma psi_in_P2: \"\\<psi> \\<in> \\<P>\\<^sup>2\"", "lemma psi_eq_nth_prefix:\n  assumes \"prefixes t j \\<down>= b\" and \"e_length b > x\"\n  shows \"\\<psi> j x \\<down>= e_nth b x\"", "lemma psi_converg_imp_prefix:\n  assumes \"\\<psi> j x \\<down>\"\n  shows \"\\<exists>t b. prefixes t j \\<down>= b \\<and> e_length b > x\"", "lemma psi_converg_imp_prefix':\n  assumes \"\\<psi> j x \\<down>\"\n  shows \"\\<exists>t b. prefixes t j \\<down>= b \\<and> e_length b > x \\<and> \\<psi> j x \\<down>= e_nth b x\"", "lemma psi_at_0: \"\\<psi> j 0 \\<down>= j\"", "lemma case_one_psi_total:\n  assumes \"case_one j\" and \"x > 0\"\n  shows \"\\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1\"", "lemma case_two_psi_only_prefix:\n  assumes \"case_two j\"\n  shows \"\\<exists>y. (\\<forall>x. 0 < x \\<and> x < y \\<longrightarrow> \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n                (\\<forall>x \\<ge> y. \\<psi> j x \\<up>)\"", "lemma longest_prefix:\n  assumes \"case_two j\" and \"z = longest_prefix j\"\n  shows \"(\\<forall>x<z. \\<psi> j x \\<down>) \\<and> (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)\"", "lemma case_two_psi_longest_prefix:\n  assumes \"case_two j\" and \"y = longest_prefix j\"\n  shows \"(\\<forall>x. 0 < x \\<and> x < y \\<longrightarrow> \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n    (\\<forall>x \\<ge> y. \\<psi> j x \\<up>)\"", "lemma longest_prefix_gr_0:\n  assumes \"case_two j\"\n  shows \"longest_prefix j > 0\"", "lemma psi_not_divergent_init:\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"(\\<psi> j) \\<triangleright> (e_length b - 1) = b\"", "lemma case_two_nontotal_hyp:\n  assumes \"case_two j\"\n  shows \"\\<exists>n<longest_prefix j. \\<not> total1 (\\<phi> (the (s ((\\<psi> j) \\<triangleright> n))))\"", "lemma case_two_not_learn:\n  assumes \"case_two j\"\n    and \"f \\<in> \\<R>\"\n    and \"\\<And>x. x < longest_prefix j \\<Longrightarrow> f x = \\<psi> j x\"\n  shows \"\\<not> learn_total \\<phi> {f} s\"", "lemma case_one_wrong_hyp:\n  assumes \"case_one j\"\n  shows \"\\<exists>n>k. \\<phi> (the (s ((\\<psi> j) \\<triangleright> n))) \\<noteq> \\<psi> j\"", "lemma case_one_not_learn:\n  assumes \"case_one j\"\n  shows \"\\<not> learn_lim \\<phi> {\\<psi> j} s\"", "lemma case_one_not_learn_V:\n  assumes \"case_one j\" and \"j \\<ge> 2\" and \"\\<phi> j = \\<psi> j\"\n  shows \"\\<not> learn_lim \\<phi> V_constotal s\"", "lemma goedel_after_prefixes:\n  fixes vs :: \"nat list\" and m :: nat\n  shows \"\\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>\"", "lemma case_two_not_learn_V:\n  assumes \"case_two j\" and \"j \\<ge> 2\" and \"\\<phi> j = \\<psi> j\"\n  shows \"\\<not> learn_total \\<phi> V_constotal s\"", "lemma not_learn_total_V: \"\\<not> learn_total \\<phi> V_constotal s\"", "lemma V_not_in_TOTAL: \"V_constotal \\<notin> TOTAL\"", "lemma TOTAL_neq_CONS: \"TOTAL \\<noteq> CONS\"", "theorem TOTAL_subset_CONS: \"TOTAL \\<subset> CONS\""], "translations": [["", "lemma r_consist_phi_recfn [simp]: \"recfn 2 r_consist_phi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 r_consist_phi", "by simp"], ["", "lemma r_consist_phi:\n  assumes \"\\<forall>k<e_length e. \\<phi> i k \\<down>\"\n  shows \"eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)", "have \"\\<forall>k<e_length e. eval r_phi [i, k] \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k<e_length e. eval r_phi [i, k] \\<down>", "using assms phi_def"], ["proof (prove)\nusing this:\n  \\<forall>k<e_length e. \\<phi> i k \\<down>\n  \\<phi> ?i ?x \\<equiv> eval r_phi [?i, ?x]\n\ngoal (1 subgoal):\n 1. \\<forall>k<e_length e. eval r_phi [i, k] \\<down>", "by simp"], ["proof (state)\nthis:\n  \\<forall>k<e_length e. eval r_phi [i, k] \\<down>\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)", "moreover"], ["proof (state)\nthis:\n  \\<forall>k<e_length e. eval r_phi [i, k] \\<down>\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)", "have \"recfn 2 r_phi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 r_phi", "by simp"], ["proof (state)\nthis:\n  recfn 2 r_phi\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>k<e_length e. eval r_phi [i, k] \\<down>\n  recfn 2 r_phi", "have \"eval (r_consistent r_phi) [i, e] \\<down>=\n     (if \\<forall>k<e_length e. eval r_phi [i, k] \\<down>= e_nth e k then 0 else 1)\""], ["proof (prove)\nusing this:\n  \\<forall>k<e_length e. eval r_phi [i, k] \\<down>\n  recfn 2 r_phi\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. eval r_phi [i, k] \\<down>= e_nth e k then 0\n     else 1)", "using r_consistent_converg assms"], ["proof (prove)\nusing this:\n  \\<forall>k<e_length e. eval r_phi [i, k] \\<down>\n  recfn 2 r_phi\n  \\<lbrakk>recfn 2 ?r_psi;\n   \\<forall>k<e_length ?e. eval ?r_psi [?i, k] \\<down>\\<rbrakk>\n  \\<Longrightarrow> eval (r_consistent ?r_psi) [?i, ?e] \\<down>=\n                    (if \\<forall>k<e_length ?e.\n                           eval ?r_psi [?i, k] \\<down>= e_nth ?e k\n                     then 0 else 1)\n  \\<forall>k<e_length e. \\<phi> i k \\<down>\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. eval r_phi [i, k] \\<down>= e_nth e k then 0\n     else 1)", "by simp"], ["proof (state)\nthis:\n  eval r_consist_phi [i, e] \\<down>=\n  (if \\<forall>k<e_length e. eval r_phi [i, k] \\<down>= e_nth e k then 0\n   else 1)\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)", "then"], ["proof (chain)\npicking this:\n  eval r_consist_phi [i, e] \\<down>=\n  (if \\<forall>k<e_length e. eval r_phi [i, k] \\<down>= e_nth e k then 0\n   else 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  eval r_consist_phi [i, e] \\<down>=\n  (if \\<forall>k<e_length e. eval r_phi [i, k] \\<down>= e_nth e k then 0\n   else 1)\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)", "using phi_def"], ["proof (prove)\nusing this:\n  eval r_consist_phi [i, e] \\<down>=\n  (if \\<forall>k<e_length e. eval r_phi [i, k] \\<down>= e_nth e k then 0\n   else 1)\n  \\<phi> ?i ?x \\<equiv> eval r_phi [?i, ?x]\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, e] \\<down>=\n    (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)", "by simp"], ["proof (state)\nthis:\n  eval r_consist_phi [i, e] \\<down>=\n  (if \\<forall>k<e_length e. \\<phi> i k \\<down>= e_nth e k then 0 else 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma r_consist_phi_init:\n  assumes \"f \\<in> \\<R>\" and \"\\<phi> i \\<in> \\<R>\"\n  shows \"eval r_consist_phi [i, f \\<triangleright> n] \\<down>= (if \\<forall>k\\<le>n. \\<phi> i k = f k then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n. \\<phi> i k = f k then 0 else 1)", "using assms r_consist_phi R1_imp_total1 total1E"], ["proof (prove)\nusing this:\n  f \\<in> \\<R>\n  \\<phi> i \\<in> \\<R>\n  \\<forall>k<e_length ?e. \\<phi> ?i k \\<down> \\<Longrightarrow>\n  eval r_consist_phi [?i, ?e] \\<down>=\n  (if \\<forall>k<e_length ?e. \\<phi> ?i k \\<down>= e_nth ?e k then 0 else 1)\n  ?f \\<in> \\<R> \\<Longrightarrow> total1 ?f\n  total1 ?f \\<Longrightarrow> ?f ?x \\<down>\n\ngoal (1 subgoal):\n 1. eval r_consist_phi [i, f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n. \\<phi> i k = f k then 0 else 1)", "by (simp add: r_consist_phi)"], ["", "lemma TOTAL_subseteq_CONS: \"TOTAL \\<subseteq> CONS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TOTAL \\<subseteq> CONS", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "fix U"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "assume \"U \\<in> TOTAL\""], ["proof (state)\nthis:\n  U \\<in> TOTAL\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "then"], ["proof (chain)\npicking this:\n  U \\<in> TOTAL", "have \"U \\<in> TOTAL_wrt \\<phi>\""], ["proof (prove)\nusing this:\n  U \\<in> TOTAL\n\ngoal (1 subgoal):\n 1. U \\<in> TOTAL_wrt \\<phi>", "using TOTAL_wrt_phi_eq_TOTAL"], ["proof (prove)\nusing this:\n  U \\<in> TOTAL\n  TOTAL_wrt \\<phi> = TOTAL\n\ngoal (1 subgoal):\n 1. U \\<in> TOTAL_wrt \\<phi>", "by blast"], ["proof (state)\nthis:\n  U \\<in> TOTAL_wrt \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "then"], ["proof (chain)\npicking this:\n  U \\<in> TOTAL_wrt \\<phi>", "obtain t' where t': \"learn_total \\<phi> U t'\""], ["proof (prove)\nusing this:\n  U \\<in> TOTAL_wrt \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        learn_total \\<phi> U t' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using TOTAL_wrt_def"], ["proof (prove)\nusing this:\n  U \\<in> TOTAL_wrt \\<phi>\n  TOTAL_wrt ?\\<psi> \\<equiv> {U. \\<exists>s. learn_total ?\\<psi> U s}\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        learn_total \\<phi> U t' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  learn_total \\<phi> U t'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "then"], ["proof (chain)\npicking this:\n  learn_total \\<phi> U t'", "obtain t where t: \"recfn 1 t\" \"\\<And>x. eval t [x] = t' x\""], ["proof (prove)\nusing this:\n  learn_total \\<phi> U t'\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>recfn 1 t; \\<And>x. eval t [x] = t' x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using learn_totalE(1) P1E"], ["proof (prove)\nusing this:\n  learn_total \\<phi> U t'\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  \\<lbrakk>?f \\<in> \\<P>;\n   \\<And>r.\n      \\<lbrakk>recfn 1 r; \\<forall>x. eval r [x] = ?f x\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>recfn 1 t; \\<And>x. eval t [x] = t' x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  recfn 1 t\n  eval t [?x] = t' ?x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "then"], ["proof (chain)\npicking this:\n  recfn 1 t\n  eval t [?x] = t' ?x", "have t_converg: \"eval t [f \\<triangleright> n] \\<down>\" if \"f \\<in> U\" for f n"], ["proof (prove)\nusing this:\n  recfn 1 t\n  eval t [?x] = t' ?x\n\ngoal (1 subgoal):\n 1. eval t [f \\<triangleright> n] \\<down>", "using t' learn_totalE(1) that"], ["proof (prove)\nusing this:\n  recfn 1 t\n  eval t [?x] = t' ?x\n  learn_total \\<phi> U t'\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  f \\<in> U\n\ngoal (1 subgoal):\n 1. eval t [f \\<triangleright> n] \\<down>", "by auto"], ["proof (state)\nthis:\n  ?f \\<in> U \\<Longrightarrow> eval t [?f \\<triangleright> ?n] \\<down>\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "define s where \"s \\<equiv> Cn 1 r_ifz [Cn 1 r_consist_phi [t, Id 1 0], t, r_auxhyp]\""], ["proof (state)\nthis:\n  s \\<equiv> Cn 1 r_ifz [Cn 1 r_consist_phi [t, recf.Id 1 0], t, r_auxhyp]\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "then"], ["proof (chain)\npicking this:\n  s \\<equiv> Cn 1 r_ifz [Cn 1 r_consist_phi [t, recf.Id 1 0], t, r_auxhyp]", "have \"recfn 1 s\""], ["proof (prove)\nusing this:\n  s \\<equiv> Cn 1 r_ifz [Cn 1 r_consist_phi [t, recf.Id 1 0], t, r_auxhyp]\n\ngoal (1 subgoal):\n 1. recfn 1 s", "using r_consist_phi_recfn r_auxhyp_prim t(1)"], ["proof (prove)\nusing this:\n  s \\<equiv> Cn 1 r_ifz [Cn 1 r_consist_phi [t, recf.Id 1 0], t, r_auxhyp]\n  recfn 2 r_consist_phi\n  prim_recfn 1 r_auxhyp\n  recfn 1 t\n\ngoal (1 subgoal):\n 1. recfn 1 s", "by simp"], ["proof (state)\nthis:\n  recfn 1 s\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "have consist: \"eval r_consist_phi [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n     (if \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k then 0 else 1)\"\n    if \"f \\<in> U\" for f n"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "have \"eval r_consist_phi [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] =\n        eval (Cn 1 r_consist_phi [t, Id 1 0]) [f \\<triangleright> n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] =\n    eval (Cn 1 r_consist_phi [t, recf.Id 1 0]) [f \\<triangleright> n]", "using that t_converg t(1)"], ["proof (prove)\nusing this:\n  f \\<in> U\n  ?f \\<in> U \\<Longrightarrow> eval t [?f \\<triangleright> ?n] \\<down>\n  recfn 1 t\n\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] =\n    eval (Cn 1 r_consist_phi [t, recf.Id 1 0]) [f \\<triangleright> n]", "by simp"], ["proof (state)\nthis:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] =\n  eval (Cn 1 r_consist_phi [t, recf.Id 1 0]) [f \\<triangleright> n]\n\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "also"], ["proof (state)\nthis:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] =\n  eval (Cn 1 r_consist_phi [t, recf.Id 1 0]) [f \\<triangleright> n]\n\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "have \"... \\<down>= (if \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Cn 1 r_consist_phi [t, recf.Id 1 0])\n     [f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval (Cn 1 r_consist_phi [t, recf.Id 1 0])\n     [f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "from that"], ["proof (chain)\npicking this:\n  f \\<in> U", "have \"f \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  f \\<in> U\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "using learn_totalE(1) t'"], ["proof (prove)\nusing this:\n  f \\<in> U\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  learn_total \\<phi> U t'\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "by blast"], ["proof (state)\nthis:\n  f \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_consist_phi [t, recf.Id 1 0])\n     [f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "moreover"], ["proof (state)\nthis:\n  f \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_consist_phi [t, recf.Id 1 0])\n     [f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "have \"\\<phi> (the (eval t [f \\<triangleright> n])) \\<in> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (the (eval t [f \\<triangleright> n])) \\<in> \\<R>", "using t' t learn_totalE t_converg that"], ["proof (prove)\nusing this:\n  learn_total \\<phi> U t'\n  recfn 1 t\n  eval t [?x] = t' ?x\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i n\\<^sub>0.\n                       ?\\<psi> i = ?f \\<and>\n                       (\\<forall>n\\<ge>n\\<^sub>0.\n                           ?s (?f \\<triangleright> n) \\<down>= i)\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> ?\\<psi> (the (?s (?f \\<triangleright> ?n))) \\<in> \\<R>\n  ?f \\<in> U \\<Longrightarrow> eval t [?f \\<triangleright> ?n] \\<down>\n  f \\<in> U\n\ngoal (1 subgoal):\n 1. \\<phi> (the (eval t [f \\<triangleright> n])) \\<in> \\<R>", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (eval t [f \\<triangleright> n])) \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_consist_phi [t, recf.Id 1 0])\n     [f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "ultimately"], ["proof (chain)\npicking this:\n  f \\<in> \\<R>\n  \\<phi> (the (eval t [f \\<triangleright> n])) \\<in> \\<R>", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> \\<R>\n  \\<phi> (the (eval t [f \\<triangleright> n])) \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_consist_phi [t, recf.Id 1 0])\n     [f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "using r_consist_phi_init t_converg t(1) that"], ["proof (prove)\nusing this:\n  f \\<in> \\<R>\n  \\<phi> (the (eval t [f \\<triangleright> n])) \\<in> \\<R>\n  \\<lbrakk>?f \\<in> \\<R>; \\<phi> ?i \\<in> \\<R>\\<rbrakk>\n  \\<Longrightarrow> eval r_consist_phi [?i, ?f \\<triangleright> ?n] \\<down>=\n                    (if \\<forall>k\\<le>?n. \\<phi> ?i k = ?f k then 0 else 1)\n  ?f \\<in> U \\<Longrightarrow> eval t [?f \\<triangleright> ?n] \\<down>\n  recfn 1 t\n  f \\<in> U\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_consist_phi [t, recf.Id 1 0])\n     [f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "by simp"], ["proof (state)\nthis:\n  eval (Cn 1 r_consist_phi [t, recf.Id 1 0]) [f \\<triangleright> n] \\<down>=\n  (if \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n   then 0 else 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eval (Cn 1 r_consist_phi [t, recf.Id 1 0]) [f \\<triangleright> n] \\<down>=\n  (if \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n   then 0 else 1)\n\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "finally"], ["proof (chain)\npicking this:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n  (if \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n   then 0 else 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n  (if \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n   then 0 else 1)\n\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n    (if \\<forall>k\\<le>n.\n           \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n     then 0 else 1)", "."], ["proof (state)\nthis:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n  (if \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n   then 0 else 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?f \\<in> U \\<Longrightarrow>\n  eval r_consist_phi\n   [the (eval t [?f \\<triangleright> ?n]), ?f \\<triangleright> ?n] \\<down>=\n  (if \\<forall>k\\<le>?n.\n         \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k\n   then 0 else 1)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "have s_eq_t: \"eval s [f \\<triangleright> n] = eval t [f \\<triangleright> n]\"\n    if \"\\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\" and \"f \\<in> U\" for f n"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval t [f \\<triangleright> n]", "using that consist s_def t r_auxhyp_prim prim_recfn_total"], ["proof (prove)\nusing this:\n  \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n  f \\<in> U\n  ?f \\<in> U \\<Longrightarrow>\n  eval r_consist_phi\n   [the (eval t [?f \\<triangleright> ?n]), ?f \\<triangleright> ?n] \\<down>=\n  (if \\<forall>k\\<le>?n.\n         \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k\n   then 0 else 1)\n  s \\<equiv> Cn 1 r_ifz [Cn 1 r_consist_phi [t, recf.Id 1 0], t, r_auxhyp]\n  recfn 1 t\n  eval t [?x] = t' ?x\n  prim_recfn 1 r_auxhyp\n  prim_recfn ?n ?f \\<Longrightarrow> Partial_Recursive.total ?f\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval t [f \\<triangleright> n]", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>k\\<le>?n.\n              \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k;\n   ?f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [?f \\<triangleright> ?n] =\n                    eval t [?f \\<triangleright> ?n]\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "have s_eq_aux: \"eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\"\n    if \"\\<not> (\\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k)\" and \"f \\<in> U\" for f n"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "from that"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>k\\<le>n.\n             \\<phi> (the (eval t [f \\<triangleright> n])) k = f k)\n  f \\<in> U", "have \"eval r_consist_phi [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>= 1\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<le>n.\n             \\<phi> (the (eval t [f \\<triangleright> n])) k = f k)\n  f \\<in> U\n\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n    1", "using consist"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<le>n.\n             \\<phi> (the (eval t [f \\<triangleright> n])) k = f k)\n  f \\<in> U\n  ?f \\<in> U \\<Longrightarrow>\n  eval r_consist_phi\n   [the (eval t [?f \\<triangleright> ?n]), ?f \\<triangleright> ?n] \\<down>=\n  (if \\<forall>k\\<le>?n.\n         \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k\n   then 0 else 1)\n\ngoal (1 subgoal):\n 1. eval r_consist_phi\n     [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n    1", "by simp"], ["proof (state)\nthis:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n  1\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "moreover"], ["proof (state)\nthis:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n  1\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "have \"t' (f \\<triangleright> n) \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' (f \\<triangleright> n) \\<down>", "using t' learn_totalE(1) that(2)"], ["proof (prove)\nusing this:\n  learn_total \\<phi> U t'\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  f \\<in> U\n\ngoal (1 subgoal):\n 1. t' (f \\<triangleright> n) \\<down>", "by blast"], ["proof (state)\nthis:\n  t' (f \\<triangleright> n) \\<down>\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "ultimately"], ["proof (chain)\npicking this:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n  1\n  t' (f \\<triangleright> n) \\<down>", "show ?thesis"], ["proof (prove)\nusing this:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n  1\n  t' (f \\<triangleright> n) \\<down>\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "using s_def t r_auxhyp_prim t' learn_totalE"], ["proof (prove)\nusing this:\n  eval r_consist_phi\n   [the (eval t [f \\<triangleright> n]), f \\<triangleright> n] \\<down>=\n  1\n  t' (f \\<triangleright> n) \\<down>\n  s \\<equiv> Cn 1 r_ifz [Cn 1 r_consist_phi [t, recf.Id 1 0], t, r_auxhyp]\n  recfn 1 t\n  eval t [?x] = t' ?x\n  prim_recfn 1 r_auxhyp\n  learn_total \\<phi> U t'\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i n\\<^sub>0.\n                       ?\\<psi> i = ?f \\<and>\n                       (\\<forall>n\\<ge>n\\<^sub>0.\n                           ?s (?f \\<triangleright> n) \\<down>= i)\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> ?\\<psi> (the (?s (?f \\<triangleright> ?n))) \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "by simp"], ["proof (state)\nthis:\n  eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (\\<forall>k\\<le>?n.\n                      \\<phi> (the (eval t [?f \\<triangleright> ?n])) k =\n                      ?f k);\n   ?f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [?f \\<triangleright> ?n] =\n                    eval r_auxhyp [?f \\<triangleright> ?n]\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "have \"learn_cons \\<phi> U (\\<lambda>e. eval s [e])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. learn_cons \\<phi> U (\\<lambda>e. eval s [e])", "proof (rule learn_consI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<phi> \\<in> \\<P>\\<^sup>2 \\<and>\n    U \\<subseteq> \\<R> \\<and>\n    (\\<lambda>e. eval s [e]) \\<in> \\<P> \\<and>\n    (\\<forall>f\\<in>U. \\<forall>n. eval s [f \\<triangleright> n] \\<down>)\n 2. \\<And>f.\n       f \\<in> U \\<Longrightarrow>\n       \\<exists>i.\n          \\<phi> i = f \\<and>\n          (\\<exists>n\\<^sub>0.\n              \\<forall>n\\<ge>n\\<^sub>0.\n                 eval s [f \\<triangleright> n] \\<down>= i)\n 3. \\<And>f n.\n       f \\<in> U \\<Longrightarrow>\n       \\<forall>k\\<le>n.\n          \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "have \"eval s [f \\<triangleright> n] \\<down>\" if \"f \\<in> U\" for f n"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] \\<down>", "using that t_converg[OF that, of n] s_eq_t[of n f] prim_recfn_total[of r_auxhyp 1]\n        r_auxhyp_prim s_eq_aux[OF _ that, of n] totalE"], ["proof (prove)\nusing this:\n  f \\<in> U\n  eval t [f \\<triangleright> n] \\<down>\n  \\<lbrakk>\\<forall>k\\<le>n.\n              \\<phi> (the (eval t [f \\<triangleright> n])) k = f k;\n   f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [f \\<triangleright> n] =\n                    eval t [f \\<triangleright> n]\n  prim_recfn 1 r_auxhyp \\<Longrightarrow> Partial_Recursive.total r_auxhyp\n  prim_recfn 1 r_auxhyp\n  \\<not> (\\<forall>k\\<le>n.\n             \\<phi> (the (eval t [f \\<triangleright> n])) k =\n             f k) \\<Longrightarrow>\n  eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\n  \\<lbrakk>Partial_Recursive.total ?f; recfn ?n ?f; length ?xs = ?n\\<rbrakk>\n  \\<Longrightarrow> eval ?f ?xs \\<down>\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] \\<down>", "by fastforce"], ["proof (state)\nthis:\n  ?f \\<in> U \\<Longrightarrow> eval s [?f \\<triangleright> ?n] \\<down>\n\ngoal (3 subgoals):\n 1. \\<phi> \\<in> \\<P>\\<^sup>2 \\<and>\n    U \\<subseteq> \\<R> \\<and>\n    (\\<lambda>e. eval s [e]) \\<in> \\<P> \\<and>\n    (\\<forall>f\\<in>U. \\<forall>n. eval s [f \\<triangleright> n] \\<down>)\n 2. \\<And>f.\n       f \\<in> U \\<Longrightarrow>\n       \\<exists>i.\n          \\<phi> i = f \\<and>\n          (\\<exists>n\\<^sub>0.\n              \\<forall>n\\<ge>n\\<^sub>0.\n                 eval s [f \\<triangleright> n] \\<down>= i)\n 3. \\<And>f n.\n       f \\<in> U \\<Longrightarrow>\n       \\<forall>k\\<le>n.\n          \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "then"], ["proof (chain)\npicking this:\n  ?f \\<in> U \\<Longrightarrow> eval s [?f \\<triangleright> ?n] \\<down>", "show \"environment \\<phi> U (\\<lambda>e. eval s [e])\""], ["proof (prove)\nusing this:\n  ?f \\<in> U \\<Longrightarrow> eval s [?f \\<triangleright> ?n] \\<down>\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> \\<P>\\<^sup>2 \\<and>\n    U \\<subseteq> \\<R> \\<and>\n    (\\<lambda>e. eval s [e]) \\<in> \\<P> \\<and>\n    (\\<forall>f\\<in>U. \\<forall>n. eval s [f \\<triangleright> n] \\<down>)", "using t' \\<open>recfn 1 s\\<close> learn_totalE(1)"], ["proof (prove)\nusing this:\n  ?f \\<in> U \\<Longrightarrow> eval s [?f \\<triangleright> ?n] \\<down>\n  learn_total \\<phi> U t'\n  recfn 1 s\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n\ngoal (1 subgoal):\n 1. \\<phi> \\<in> \\<P>\\<^sup>2 \\<and>\n    U \\<subseteq> \\<R> \\<and>\n    (\\<lambda>e. eval s [e]) \\<in> \\<P> \\<and>\n    (\\<forall>f\\<in>U. \\<forall>n. eval s [f \\<triangleright> n] \\<down>)", "by blast"], ["proof (state)\nthis:\n  \\<phi> \\<in> \\<P>\\<^sup>2 \\<and>\n  U \\<subseteq> \\<R> \\<and>\n  (\\<lambda>e. eval s [e]) \\<in> \\<P> \\<and>\n  (\\<forall>f\\<in>U. \\<forall>n. eval s [f \\<triangleright> n] \\<down>)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       f \\<in> U \\<Longrightarrow>\n       \\<exists>i.\n          \\<phi> i = f \\<and>\n          (\\<exists>n\\<^sub>0.\n              \\<forall>n\\<ge>n\\<^sub>0.\n                 eval s [f \\<triangleright> n] \\<down>= i)\n 2. \\<And>f n.\n       f \\<in> U \\<Longrightarrow>\n       \\<forall>k\\<le>n.\n          \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "show \"\\<exists>i. \\<phi> i = f \\<and> (\\<forall>\\<^sup>\\<infinity>n. eval s [f \\<triangleright> n] \\<down>= i)\" if \"f \\<in> U\" for f"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<phi> i = f \\<and>\n       (\\<exists>n\\<^sub>0.\n           \\<forall>n\\<ge>n\\<^sub>0.\n              eval s [f \\<triangleright> n] \\<down>= i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<phi> i = f \\<and>\n       (\\<exists>n\\<^sub>0.\n           \\<forall>n\\<ge>n\\<^sub>0.\n              eval s [f \\<triangleright> n] \\<down>= i)", "from that t' t learn_totalE"], ["proof (chain)\npicking this:\n  f \\<in> U\n  learn_total \\<phi> U t'\n  recfn 1 t\n  eval t [?x] = t' ?x\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i n\\<^sub>0.\n                       ?\\<psi> i = ?f \\<and>\n                       (\\<forall>n\\<ge>n\\<^sub>0.\n                           ?s (?f \\<triangleright> n) \\<down>= i)\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> ?\\<psi> (the (?s (?f \\<triangleright> ?n))) \\<in> \\<R>", "obtain i n\\<^sub>0 where\n        i_n0: \"\\<phi> i = f \\<and> (\\<forall>n\\<ge>n\\<^sub>0. eval t [f \\<triangleright> n] \\<down>= i)\""], ["proof (prove)\nusing this:\n  f \\<in> U\n  learn_total \\<phi> U t'\n  recfn 1 t\n  eval t [?x] = t' ?x\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i n\\<^sub>0.\n                       ?\\<psi> i = ?f \\<and>\n                       (\\<forall>n\\<ge>n\\<^sub>0.\n                           ?s (?f \\<triangleright> n) \\<down>= i)\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> ?\\<psi> (the (?s (?f \\<triangleright> ?n))) \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. (\\<And>i n\\<^sub>0.\n        \\<phi> i = f \\<and>\n        (\\<forall>n\\<ge>n\\<^sub>0.\n            eval t [f \\<triangleright> n] \\<down>= i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<phi> i = f \\<and>\n  (\\<forall>n\\<ge>n\\<^sub>0. eval t [f \\<triangleright> n] \\<down>= i)\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<phi> i = f \\<and>\n       (\\<exists>n\\<^sub>0.\n           \\<forall>n\\<ge>n\\<^sub>0.\n              eval s [f \\<triangleright> n] \\<down>= i)", "then"], ["proof (chain)\npicking this:\n  \\<phi> i = f \\<and>\n  (\\<forall>n\\<ge>n\\<^sub>0. eval t [f \\<triangleright> n] \\<down>= i)", "have \"\\<And>n. n \\<ge> n\\<^sub>0 \\<Longrightarrow> \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\""], ["proof (prove)\nusing this:\n  \\<phi> i = f \\<and>\n  (\\<forall>n\\<ge>n\\<^sub>0. eval t [f \\<triangleright> n] \\<down>= i)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n\\<^sub>0 \\<le> n \\<Longrightarrow>\n       \\<forall>k\\<le>n.\n          \\<phi> (the (eval t [f \\<triangleright> n])) k = f k", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  \\<forall>k\\<le>?n. \\<phi> (the (eval t [f \\<triangleright> ?n])) k = f k\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<phi> i = f \\<and>\n       (\\<exists>n\\<^sub>0.\n           \\<forall>n\\<ge>n\\<^sub>0.\n              eval s [f \\<triangleright> n] \\<down>= i)", "with s_eq_t"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>k\\<le>?n.\n              \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k;\n   ?f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [?f \\<triangleright> ?n] =\n                    eval t [?f \\<triangleright> ?n]\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  \\<forall>k\\<le>?n. \\<phi> (the (eval t [f \\<triangleright> ?n])) k = f k", "have \"\\<And>n. n \\<ge> n\\<^sub>0 \\<Longrightarrow> eval s [f \\<triangleright> n] = eval t [f \\<triangleright> n]\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>k\\<le>?n.\n              \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k;\n   ?f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [?f \\<triangleright> ?n] =\n                    eval t [?f \\<triangleright> ?n]\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  \\<forall>k\\<le>?n. \\<phi> (the (eval t [f \\<triangleright> ?n])) k = f k\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n\\<^sub>0 \\<le> n \\<Longrightarrow>\n       eval s [f \\<triangleright> n] = eval t [f \\<triangleright> n]", "using that"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>k\\<le>?n.\n              \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k;\n   ?f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [?f \\<triangleright> ?n] =\n                    eval t [?f \\<triangleright> ?n]\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  \\<forall>k\\<le>?n. \\<phi> (the (eval t [f \\<triangleright> ?n])) k = f k\n  f \\<in> U\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n\\<^sub>0 \\<le> n \\<Longrightarrow>\n       eval s [f \\<triangleright> n] = eval t [f \\<triangleright> n]", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  eval s [f \\<triangleright> ?n] = eval t [f \\<triangleright> ?n]\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<phi> i = f \\<and>\n       (\\<exists>n\\<^sub>0.\n           \\<forall>n\\<ge>n\\<^sub>0.\n              eval s [f \\<triangleright> n] \\<down>= i)", "with i_n0"], ["proof (chain)\npicking this:\n  \\<phi> i = f \\<and>\n  (\\<forall>n\\<ge>n\\<^sub>0. eval t [f \\<triangleright> n] \\<down>= i)\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  eval s [f \\<triangleright> ?n] = eval t [f \\<triangleright> ?n]", "have \"\\<And>n. n \\<ge> n\\<^sub>0 \\<Longrightarrow> eval s [f \\<triangleright> n] \\<down>= i\""], ["proof (prove)\nusing this:\n  \\<phi> i = f \\<and>\n  (\\<forall>n\\<ge>n\\<^sub>0. eval t [f \\<triangleright> n] \\<down>= i)\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  eval s [f \\<triangleright> ?n] = eval t [f \\<triangleright> ?n]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n\\<^sub>0 \\<le> n \\<Longrightarrow>\n       eval s [f \\<triangleright> n] \\<down>= i", "by auto"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  eval s [f \\<triangleright> ?n] \\<down>= i\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<phi> i = f \\<and>\n       (\\<exists>n\\<^sub>0.\n           \\<forall>n\\<ge>n\\<^sub>0.\n              eval s [f \\<triangleright> n] \\<down>= i)", "with i_n0"], ["proof (chain)\npicking this:\n  \\<phi> i = f \\<and>\n  (\\<forall>n\\<ge>n\\<^sub>0. eval t [f \\<triangleright> n] \\<down>= i)\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  eval s [f \\<triangleright> ?n] \\<down>= i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> i = f \\<and>\n  (\\<forall>n\\<ge>n\\<^sub>0. eval t [f \\<triangleright> n] \\<down>= i)\n  n\\<^sub>0 \\<le> ?n \\<Longrightarrow>\n  eval s [f \\<triangleright> ?n] \\<down>= i\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<phi> i = f \\<and>\n       (\\<exists>n\\<^sub>0.\n           \\<forall>n\\<ge>n\\<^sub>0.\n              eval s [f \\<triangleright> n] \\<down>= i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>i.\n     \\<phi> i = f \\<and>\n     (\\<exists>n\\<^sub>0.\n         \\<forall>n\\<ge>n\\<^sub>0. eval s [f \\<triangleright> n] \\<down>= i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?f \\<in> U \\<Longrightarrow>\n  \\<exists>i.\n     \\<phi> i = ?f \\<and>\n     (\\<exists>n\\<^sub>0.\n         \\<forall>n\\<ge>n\\<^sub>0.\n            eval s [?f \\<triangleright> n] \\<down>= i)\n\ngoal (1 subgoal):\n 1. \\<And>f n.\n       f \\<in> U \\<Longrightarrow>\n       \\<forall>k\\<le>n.\n          \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "show \"\\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k\" if \"f \\<in> U\" for f n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "proof (cases \"\\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>k\\<le>n.\n       \\<phi> (the (eval t [f \\<triangleright> n])) k =\n       f k \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k\n 2. \\<not> (\\<forall>k\\<le>n.\n               \\<phi> (the (eval t [f \\<triangleright> n])) k =\n               f k) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "case True"], ["proof (state)\nthis:\n  \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n\ngoal (2 subgoals):\n 1. \\<forall>k\\<le>n.\n       \\<phi> (the (eval t [f \\<triangleright> n])) k =\n       f k \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k\n 2. \\<not> (\\<forall>k\\<le>n.\n               \\<phi> (the (eval t [f \\<triangleright> n])) k =\n               f k) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "with that s_eq_t"], ["proof (chain)\npicking this:\n  f \\<in> U\n  \\<lbrakk>\\<forall>k\\<le>?n.\n              \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k;\n   ?f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [?f \\<triangleright> ?n] =\n                    eval t [?f \\<triangleright> ?n]\n  \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> U\n  \\<lbrakk>\\<forall>k\\<le>?n.\n              \\<phi> (the (eval t [?f \\<triangleright> ?n])) k = ?f k;\n   ?f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [?f \\<triangleright> ?n] =\n                    eval t [?f \\<triangleright> ?n]\n  \\<forall>k\\<le>n. \\<phi> (the (eval t [f \\<triangleright> n])) k = f k\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "by simp"], ["proof (state)\nthis:\n  \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<le>n.\n               \\<phi> (the (eval t [f \\<triangleright> n])) k =\n               f k) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<le>n.\n               \\<phi> (the (eval t [f \\<triangleright> n])) k =\n               f k) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>k\\<le>n.\n             \\<phi> (the (eval t [f \\<triangleright> n])) k = f k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<le>n.\n               \\<phi> (the (eval t [f \\<triangleright> n])) k =\n               f k) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>k\\<le>n.\n             \\<phi> (the (eval t [f \\<triangleright> n])) k = f k)", "have \"eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<le>n.\n             \\<phi> (the (eval t [f \\<triangleright> n])) k = f k)\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "using that s_eq_aux"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<le>n.\n             \\<phi> (the (eval t [f \\<triangleright> n])) k = f k)\n  f \\<in> U\n  \\<lbrakk>\\<not> (\\<forall>k\\<le>?n.\n                      \\<phi> (the (eval t [?f \\<triangleright> ?n])) k =\n                      ?f k);\n   ?f \\<in> U\\<rbrakk>\n  \\<Longrightarrow> eval s [?f \\<triangleright> ?n] =\n                    eval r_auxhyp [?f \\<triangleright> ?n]\n\ngoal (1 subgoal):\n 1. eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]", "by simp"], ["proof (state)\nthis:\n  eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<le>n.\n               \\<phi> (the (eval t [f \\<triangleright> n])) k =\n               f k) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "moreover"], ["proof (state)\nthis:\n  eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<le>n.\n               \\<phi> (the (eval t [f \\<triangleright> n])) k =\n               f k) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "have \"f \\<in> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "using learn_totalE(1)[OF t'] that"], ["proof (prove)\nusing this:\n  environment \\<phi> U t'\n  f \\<in> U\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "by auto"], ["proof (state)\nthis:\n  f \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<le>n.\n               \\<phi> (the (eval t [f \\<triangleright> n])) k =\n               f k) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "ultimately"], ["proof (chain)\npicking this:\n  eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\n  f \\<in> \\<R>", "show ?thesis"], ["proof (prove)\nusing this:\n  eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\n  f \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "using r_auxhyp"], ["proof (prove)\nusing this:\n  eval s [f \\<triangleright> n] = eval r_auxhyp [f \\<triangleright> n]\n  f \\<in> \\<R>\n  \\<phi> (the (eval r_auxhyp [?e])) = prenum ?e\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k", "by simp"], ["proof (state)\nthis:\n  \\<forall>k\\<le>n. \\<phi> (the (eval s [f \\<triangleright> n])) k = f k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?f \\<in> U \\<Longrightarrow>\n  \\<forall>k\\<le>?n. \\<phi> (the (eval s [?f \\<triangleright> ?n])) k = ?f k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  learn_cons \\<phi> U (\\<lambda>e. eval s [e])\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> TOTAL \\<Longrightarrow> x \\<in> CONS", "then"], ["proof (chain)\npicking this:\n  learn_cons \\<phi> U (\\<lambda>e. eval s [e])", "show \"U \\<in> CONS\""], ["proof (prove)\nusing this:\n  learn_cons \\<phi> U (\\<lambda>e. eval s [e])\n\ngoal (1 subgoal):\n 1. U \\<in> CONS", "using CONS_def"], ["proof (prove)\nusing this:\n  learn_cons \\<phi> U (\\<lambda>e. eval s [e])\n  CONS \\<equiv> {U. \\<exists>\\<psi> s. learn_cons \\<psi> U s}\n\ngoal (1 subgoal):\n 1. U \\<in> CONS", "by auto"], ["proof (state)\nthis:\n  U \\<in> CONS\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The separating class\\<close>"], ["", "subsubsection \\<open>Definition of the class\\<close>"], ["", "text \\<open>The class that will be shown to be in @{term \"CONS - TOTAL\"} is\nthe union of the following two classes.\\<close>"], ["", "definition V_constotal_1 :: \"partial1 set\" where\n  \"V_constotal_1 \\<equiv> {f. \\<exists>j p. f = [j] \\<odot> p \\<and> j \\<ge> 2 \\<and> p \\<in> \\<R>\\<^sub>0\\<^sub>1 \\<and> \\<phi> j = f}\""], ["", "definition V_constotal_2 :: \"partial1 set\" where\n  \"V_constotal_2 \\<equiv>\n     {f. \\<exists>j a k.\n            f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity> \\<and>\n            j \\<ge> 2 \\<and>\n            (\\<forall>i<length a. a ! i \\<le> 1) \\<and>\n            k \\<ge> 2 \\<and>\n            \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity> \\<and>\n            \\<phi> k = f}\""], ["", "definition V_constotal :: \"partial1 set\" where\n  \"V_constotal \\<equiv> V_constotal_1 \\<union> V_constotal_2\""], ["", "lemma V_constotal_2I:\n  assumes \"f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\"\n    and \"j \\<ge> 2\"\n    and \"\\<forall>i<length a. a ! i \\<le> 1\"\n    and \"k \\<ge> 2\"\n    and \"\\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\"\n    and \"\\<phi> k = f\"\n  shows \"f \\<in> V_constotal_2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_2", "using assms V_constotal_2_def"], ["proof (prove)\nusing this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f\n  V_constotal_2 \\<equiv>\n  {f. \\<exists>j a k.\n         f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity> \\<and>\n         2 \\<le> j \\<and>\n         (\\<forall>i<length a. a ! i \\<le> 1) \\<and>\n         2 \\<le> k \\<and>\n         \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity> \\<and>\n         \\<phi> k = f}\n\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_2", "by blast"], ["", "lemma V_subseteq_R1: \"V_constotal \\<subseteq> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V_constotal \\<subseteq> \\<R>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V_constotal \\<Longrightarrow> x \\<in> \\<R>", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V_constotal \\<Longrightarrow> x \\<in> \\<R>", "assume \"f \\<in> V_constotal\""], ["proof (state)\nthis:\n  f \\<in> V_constotal\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V_constotal \\<Longrightarrow> x \\<in> \\<R>", "then"], ["proof (chain)\npicking this:\n  f \\<in> V_constotal", "have \"f \\<in> V_constotal_1 \\<or> f \\<in> V_constotal_2\""], ["proof (prove)\nusing this:\n  f \\<in> V_constotal\n\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_1 \\<or> f \\<in> V_constotal_2", "using V_constotal_def"], ["proof (prove)\nusing this:\n  f \\<in> V_constotal\n  V_constotal \\<equiv> V_constotal_1 \\<union> V_constotal_2\n\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_1 \\<or> f \\<in> V_constotal_2", "by auto"], ["proof (state)\nthis:\n  f \\<in> V_constotal_1 \\<or> f \\<in> V_constotal_2\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V_constotal \\<Longrightarrow> x \\<in> \\<R>", "then"], ["proof (chain)\npicking this:\n  f \\<in> V_constotal_1 \\<or> f \\<in> V_constotal_2", "show \"f \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_1 \\<or> f \\<in> V_constotal_2\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow> f \\<in> \\<R>\n 2. f \\<in> V_constotal_2 \\<Longrightarrow> f \\<in> \\<R>", "assume \"f \\<in> V_constotal_1\""], ["proof (state)\nthis:\n  f \\<in> V_constotal_1\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow> f \\<in> \\<R>\n 2. f \\<in> V_constotal_2 \\<Longrightarrow> f \\<in> \\<R>", "then"], ["proof (chain)\npicking this:\n  f \\<in> V_constotal_1", "obtain j p where \"f = [j] \\<odot> p\" \"p \\<in> \\<R>\\<^sub>0\\<^sub>1\""], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_1\n\ngoal (1 subgoal):\n 1. (\\<And>j p.\n        \\<lbrakk>f = [j] \\<odot> p; p \\<in> \\<R>\\<^sub>0\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using V_constotal_1_def"], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_1\n  V_constotal_1 \\<equiv>\n  {f. \\<exists>j p.\n         f = [j] \\<odot> p \\<and>\n         2 \\<le> j \\<and> p \\<in> \\<R>\\<^sub>0\\<^sub>1 \\<and> \\<phi> j = f}\n\ngoal (1 subgoal):\n 1. (\\<And>j p.\n        \\<lbrakk>f = [j] \\<odot> p; p \\<in> \\<R>\\<^sub>0\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f = [j] \\<odot> p\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow> f \\<in> \\<R>\n 2. f \\<in> V_constotal_2 \\<Longrightarrow> f \\<in> \\<R>", "then"], ["proof (chain)\npicking this:\n  f = [j] \\<odot> p\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  f = [j] \\<odot> p\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "using prepend_in_R1 RPred1_subseteq_R1"], ["proof (prove)\nusing this:\n  f = [j] \\<odot> p\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n  ?f \\<in> \\<R> \\<Longrightarrow> ?vs \\<odot> ?f \\<in> \\<R>\n  \\<R>\\<^sub>0\\<^sub>1 \\<subseteq> \\<R>\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "by auto"], ["proof (state)\nthis:\n  f \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_2 \\<Longrightarrow> f \\<in> \\<R>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_2 \\<Longrightarrow> f \\<in> \\<R>", "assume \"f \\<in> V_constotal_2\""], ["proof (state)\nthis:\n  f \\<in> V_constotal_2\n\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_2 \\<Longrightarrow> f \\<in> \\<R>", "then"], ["proof (chain)\npicking this:\n  f \\<in> V_constotal_2", "obtain j a k where \"f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\""], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_2\n\ngoal (1 subgoal):\n 1. (\\<And>j a k.\n        f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using V_constotal_2_def"], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_2\n  V_constotal_2 \\<equiv>\n  {f. \\<exists>j a k.\n         f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity> \\<and>\n         2 \\<le> j \\<and>\n         (\\<forall>i<length a. a ! i \\<le> 1) \\<and>\n         2 \\<le> k \\<and>\n         \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity> \\<and>\n         \\<phi> k = f}\n\ngoal (1 subgoal):\n 1. (\\<And>j a k.\n        f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_2 \\<Longrightarrow> f \\<in> \\<R>", "then"], ["proof (chain)\npicking this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "using almost0_in_R1"], ["proof (prove)\nusing this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  ?vs \\<odot> 0\\<^sup>\\<infinity> \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "by auto"], ["proof (state)\nthis:\n  f \\<in> \\<R>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> \\<R>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>The class is in CONS\\<close>"], ["", "text \\<open>The class can be learned by the strategy @{term rmge2}, which\noutputs the rightmost value greater or equal two in the input $f^n$. If $f$\nis from $V_1$ then the strategy is correct right from the start. If $f$ is\nfrom $V_2$ the strategy outputs the consistent hypothesis $j$ until it\nencounters the correct hypothesis $k$, to which it converges.\\<close>"], ["", "lemma V_in_CONS: \"learn_cons \\<phi> V_constotal rmge2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. learn_cons \\<phi> V_constotal rmge2", "proof (rule learn_consI)"], ["proof (state)\ngoal (3 subgoals):\n 1. environment \\<phi> V_constotal rmge2\n 2. \\<And>f.\n       f \\<in> V_constotal \\<Longrightarrow>\n       \\<exists>i.\n          \\<phi> i = f \\<and>\n          (\\<exists>n\\<^sub>0.\n              \\<forall>n\\<ge>n\\<^sub>0.\n                 rmge2 (f \\<triangleright> n) \\<down>= i)\n 3. \\<And>f n.\n       f \\<in> V_constotal \\<Longrightarrow>\n       \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "show \"environment \\<phi> V_constotal rmge2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. environment \\<phi> V_constotal rmge2", "using V_subseteq_R1 rmge2_in_R1 R1_imp_total1 phi_in_P2"], ["proof (prove)\nusing this:\n  V_constotal \\<subseteq> \\<R>\n  rmge2 \\<in> \\<R>\n  ?f \\<in> \\<R> \\<Longrightarrow> total1 ?f\n  \\<phi> \\<in> \\<P>\\<^sup>2\n\ngoal (1 subgoal):\n 1. environment \\<phi> V_constotal rmge2", "by simp"], ["proof (state)\nthis:\n  environment \\<phi> V_constotal rmge2\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       f \\<in> V_constotal \\<Longrightarrow>\n       \\<exists>i.\n          \\<phi> i = f \\<and>\n          (\\<exists>n\\<^sub>0.\n              \\<forall>n\\<ge>n\\<^sub>0.\n                 rmge2 (f \\<triangleright> n) \\<down>= i)\n 2. \\<And>f n.\n       f \\<in> V_constotal \\<Longrightarrow>\n       \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "have \"(\\<exists>i. \\<phi> i = f \\<and> (\\<forall>\\<^sup>\\<infinity>n. rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n      (\\<forall>n. \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\"\n    if \"f \\<in> V_constotal\" for f"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "proof (cases \"f \\<in> V_constotal_1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n 2. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "case True"], ["proof (state)\nthis:\n  f \\<in> V_constotal_1\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n 2. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  f \\<in> V_constotal_1", "obtain j p where\n      f: \"f = [j] \\<odot> p\" and\n      j: \"j \\<ge> 2\" and\n      p: \"p \\<in> \\<R>\\<^sub>0\\<^sub>1\" and\n      phi_j: \"\\<phi> j = f\""], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_1\n\ngoal (1 subgoal):\n 1. (\\<And>j p.\n        \\<lbrakk>f = [j] \\<odot> p; 2 \\<le> j; p \\<in> \\<R>\\<^sub>0\\<^sub>1;\n         \\<phi> j = f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using V_constotal_1_def"], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_1\n  V_constotal_1 \\<equiv>\n  {f. \\<exists>j p.\n         f = [j] \\<odot> p \\<and>\n         2 \\<le> j \\<and> p \\<in> \\<R>\\<^sub>0\\<^sub>1 \\<and> \\<phi> j = f}\n\ngoal (1 subgoal):\n 1. (\\<And>j p.\n        \\<lbrakk>f = [j] \\<odot> p; 2 \\<le> j; p \\<in> \\<R>\\<^sub>0\\<^sub>1;\n         \\<phi> j = f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f = [j] \\<odot> p\n  2 \\<le> j\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n  \\<phi> j = f\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n 2. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  f = [j] \\<odot> p\n  2 \\<le> j\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n  \\<phi> j = f", "have \"f 0 \\<down>= j\""], ["proof (prove)\nusing this:\n  f = [j] \\<odot> p\n  2 \\<le> j\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n  \\<phi> j = f\n\ngoal (1 subgoal):\n 1. f 0 \\<down>= j", "by (simp add: prepend_at_less)"], ["proof (state)\nthis:\n  f 0 \\<down>= j\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n 2. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  f 0 \\<down>= j", "have f_at_0: \"the (f 0) \\<ge> 2\""], ["proof (prove)\nusing this:\n  f 0 \\<down>= j\n\ngoal (1 subgoal):\n 1. 2 \\<le> the (f 0)", "by (simp add: j)"], ["proof (state)\nthis:\n  2 \\<le> the (f 0)\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n 2. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "have f_at_gr0: \"the (f x) \\<le> 1\" if \"x > 0\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (f x) \\<le> 1", "using that f p"], ["proof (prove)\nusing this:\n  0 < x\n  f = [j] \\<odot> p\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n\ngoal (1 subgoal):\n 1. the (f x) \\<le> 1", "by (simp add: RPred1_altdef Suc_leI prepend_at_ge)"], ["proof (state)\nthis:\n  0 < ?x \\<Longrightarrow> the (f ?x) \\<le> 1\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n 2. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "have \"total1 f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total1 f", "using V_subseteq_R1 that R1_imp_total1 total1_def"], ["proof (prove)\nusing this:\n  V_constotal \\<subseteq> \\<R>\n  f \\<in> V_constotal\n  ?f \\<in> \\<R> \\<Longrightarrow> total1 ?f\n  total1 ?f \\<equiv> \\<forall>x. ?f x \\<down>\n\ngoal (1 subgoal):\n 1. total1 f", "by auto"], ["proof (state)\nthis:\n  total1 f\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n 2. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "have \"rmge2 (f \\<triangleright> n) \\<down>= j\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "let ?P = \"\\<lambda>i. i < Suc n \\<and> the (f i) \\<ge> 2\""], ["proof (state)\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "have \"Greatest ?P = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)) = 0", "proof (rule Greatest_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < Suc n \\<and> 2 \\<le> the (f 0)\n 2. \\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0", "show \"0 < Suc n \\<and> 2 \\<le> the (f 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc n \\<and> 2 \\<le> the (f 0)", "using f_at_0"], ["proof (prove)\nusing this:\n  2 \\<le> the (f 0)\n\ngoal (1 subgoal):\n 1. 0 < Suc n \\<and> 2 \\<le> the (f 0)", "by simp"], ["proof (state)\nthis:\n  0 < Suc n \\<and> 2 \\<le> the (f 0)\n\ngoal (1 subgoal):\n 1. \\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0", "show \"\\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0", "using f_at_gr0"], ["proof (prove)\nusing this:\n  0 < ?x \\<Longrightarrow> the (f ?x) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0", "by fastforce"], ["proof (state)\nthis:\n  ?y < Suc n \\<and> 2 \\<le> the (f ?y) \\<Longrightarrow> ?y \\<le> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)) = 0\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "then"], ["proof (chain)\npicking this:\n  (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)) = 0", "have \"rmge2 (f \\<triangleright> n) = f 0\""], ["proof (prove)\nusing this:\n  (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)) = 0\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) = f 0", "using f_at_0 rmge2_init_total[of f n, OF \\<open>total1 f\\<close>]"], ["proof (prove)\nusing this:\n  (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)) = 0\n  2 \\<le> the (f 0)\n  rmge2 (f \\<triangleright> n) =\n  (if \\<forall>i<Suc n. the (f i) < 2 then Some 0\n   else f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)))\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) = f 0", "by auto"], ["proof (state)\nthis:\n  rmge2 (f \\<triangleright> n) = f 0\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "then"], ["proof (chain)\npicking this:\n  rmge2 (f \\<triangleright> n) = f 0", "show \"rmge2 (f \\<triangleright> n) \\<down>= j\""], ["proof (prove)\nusing this:\n  rmge2 (f \\<triangleright> n) = f 0\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "by (simp add: \\<open>f 0 \\<down>= j\\<close>)"], ["proof (state)\nthis:\n  rmge2 (f \\<triangleright> n) \\<down>= j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rmge2 (f \\<triangleright> ?n) \\<down>= j\n\ngoal (2 subgoals):\n 1. f \\<in> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n 2. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  rmge2 (f \\<triangleright> ?n) \\<down>= j", "show ?thesis"], ["proof (prove)\nusing this:\n  rmge2 (f \\<triangleright> ?n) \\<down>= j\n\ngoal (1 subgoal):\n 1. (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "using phi_j"], ["proof (prove)\nusing this:\n  rmge2 (f \\<triangleright> ?n) \\<down>= j\n  \\<phi> j = f\n\ngoal (1 subgoal):\n 1. (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i.\n      \\<phi> i = f \\<and>\n      (\\<exists>n\\<^sub>0.\n          \\<forall>n\\<ge>n\\<^sub>0.\n             rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n  (\\<forall>n k.\n      k \\<le> n \\<longrightarrow>\n      \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "case False"], ["proof (state)\nthis:\n  f \\<notin> V_constotal_1\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  f \\<notin> V_constotal_1", "have \"f \\<in> V_constotal_2\""], ["proof (prove)\nusing this:\n  f \\<notin> V_constotal_1\n\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_2", "using V_constotal_def that"], ["proof (prove)\nusing this:\n  f \\<notin> V_constotal_1\n  V_constotal \\<equiv> V_constotal_1 \\<union> V_constotal_2\n  f \\<in> V_constotal\n\ngoal (1 subgoal):\n 1. f \\<in> V_constotal_2", "by auto"], ["proof (state)\nthis:\n  f \\<in> V_constotal_2\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  f \\<in> V_constotal_2", "obtain j a k where jak:\n      \"f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\"\n      \"j \\<ge> 2\"\n      \"\\<forall>i<length a. a ! i \\<le> 1\"\n      \"k \\<ge> 2\"\n      \"\\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity> \"\n      \"\\<phi> k = f\""], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_2\n\ngoal (1 subgoal):\n 1. (\\<And>j a k.\n        \\<lbrakk>f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>; 2 \\<le> j;\n         \\<forall>i<length a. a ! i \\<le> 1; 2 \\<le> k;\n         \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>;\n         \\<phi> k = f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using V_constotal_2_def"], ["proof (prove)\nusing this:\n  f \\<in> V_constotal_2\n  V_constotal_2 \\<equiv>\n  {f. \\<exists>j a k.\n         f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity> \\<and>\n         2 \\<le> j \\<and>\n         (\\<forall>i<length a. a ! i \\<le> 1) \\<and>\n         2 \\<le> k \\<and>\n         \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity> \\<and>\n         \\<phi> k = f}\n\ngoal (1 subgoal):\n 1. (\\<And>j a k.\n        \\<lbrakk>f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>; 2 \\<le> j;\n         \\<forall>i<length a. a ! i \\<le> 1; 2 \\<le> k;\n         \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>;\n         \\<phi> k = f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f", "have f_at_0: \"f 0 \\<down>= j\""], ["proof (prove)\nusing this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f\n\ngoal (1 subgoal):\n 1. f 0 \\<down>= j", "by simp"], ["proof (state)\nthis:\n  f 0 \\<down>= j\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "have f_eq_a: \"f x \\<down>= a ! (x - 1)\" if \"0 < x \\<and> x < Suc (length a)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<down>= a ! (x - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f x \\<down>= a ! (x - 1)", "have \"x - 1 < length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x - 1 < length a", "using that"], ["proof (prove)\nusing this:\n  0 < x \\<and> x < Suc (length a)\n\ngoal (1 subgoal):\n 1. x - 1 < length a", "by auto"], ["proof (state)\nthis:\n  x - 1 < length a\n\ngoal (1 subgoal):\n 1. f x \\<down>= a ! (x - 1)", "then"], ["proof (chain)\npicking this:\n  x - 1 < length a", "show ?thesis"], ["proof (prove)\nusing this:\n  x - 1 < length a\n\ngoal (1 subgoal):\n 1. f x \\<down>= a ! (x - 1)", "by (simp add: jak(1) less_SucI nth_append that)"], ["proof (state)\nthis:\n  f x \\<down>= a ! (x - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < ?x \\<and> ?x < Suc (length a) \\<Longrightarrow>\n  f ?x \\<down>= a ! (?x - 1)\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  0 < ?x \\<and> ?x < Suc (length a) \\<Longrightarrow>\n  f ?x \\<down>= a ! (?x - 1)", "have f_at_a: \"the (f x) \\<le> 1\" if \"0 < x \\<and> x < Suc (length a)\" for x"], ["proof (prove)\nusing this:\n  0 < ?x \\<and> ?x < Suc (length a) \\<Longrightarrow>\n  f ?x \\<down>= a ! (?x - 1)\n\ngoal (1 subgoal):\n 1. the (f x) \\<le> 1", "using jak(3) that"], ["proof (prove)\nusing this:\n  0 < ?x \\<and> ?x < Suc (length a) \\<Longrightarrow>\n  f ?x \\<down>= a ! (?x - 1)\n  \\<forall>i<length a. a ! i \\<le> 1\n  0 < x \\<and> x < Suc (length a)\n\ngoal (1 subgoal):\n 1. the (f x) \\<le> 1", "by auto"], ["proof (state)\nthis:\n  0 < ?x \\<and> ?x < Suc (length a) \\<Longrightarrow> the (f ?x) \\<le> 1\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "from jak"], ["proof (chain)\npicking this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f", "have f_k: \"f (Suc (length a)) \\<down>= k\""], ["proof (prove)\nusing this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f\n\ngoal (1 subgoal):\n 1. f (Suc (length a)) \\<down>= k", "by auto"], ["proof (state)\nthis:\n  f (Suc (length a)) \\<down>= k\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "from jak"], ["proof (chain)\npicking this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f", "have f_at_big: \"f x \\<down>= 0\" if \"x > Suc (length a)\" for x"], ["proof (prove)\nusing this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f\n\ngoal (1 subgoal):\n 1. f x \\<down>= 0", "using that"], ["proof (prove)\nusing this:\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f\n  Suc (length a) < x\n\ngoal (1 subgoal):\n 1. f x \\<down>= 0", "by simp"], ["proof (state)\nthis:\n  Suc (length a) < ?x \\<Longrightarrow> f ?x \\<down>= 0\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "let ?P = \"\\<lambda>n i. i < Suc n \\<and> the (f i) \\<ge> 2\""], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "have rmge2: \"rmge2 (f \\<triangleright> n) = f (Greatest (?P n))\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) =\n    f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) =\n    f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i))", "have \"\\<not> (\\<forall>i<Suc n. the (f i) < 2)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<Suc n. the (f i) < 2)", "using jak(2) f_at_0"], ["proof (prove)\nusing this:\n  2 \\<le> j\n  f 0 \\<down>= j\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<Suc n. the (f i) < 2)", "by auto"], ["proof (state)\nthis:\n  \\<not> (\\<forall>i<Suc ?n. the (f i) < 2)\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) =\n    f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i))", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<forall>i<Suc ?n. the (f i) < 2)\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) =\n    f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i))", "have \"total1 f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total1 f", "using V_subseteq_R1 R1_imp_total1 that total1_def"], ["proof (prove)\nusing this:\n  V_constotal \\<subseteq> \\<R>\n  ?f \\<in> \\<R> \\<Longrightarrow> total1 ?f\n  f \\<in> V_constotal\n  total1 ?f \\<equiv> \\<forall>x. ?f x \\<down>\n\ngoal (1 subgoal):\n 1. total1 f", "by auto"], ["proof (state)\nthis:\n  total1 f\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) =\n    f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>i<Suc ?n. the (f i) < 2)\n  total1 f", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i<Suc ?n. the (f i) < 2)\n  total1 f\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) =\n    f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i))", "using rmge2_init_total[of f n]"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i<Suc ?n. the (f i) < 2)\n  total1 f\n  total1 f \\<Longrightarrow>\n  rmge2 (f \\<triangleright> n) =\n  (if \\<forall>i<Suc n. the (f i) < 2 then Some 0\n   else f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)))\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) =\n    f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i))", "by auto"], ["proof (state)\nthis:\n  rmge2 (f \\<triangleright> n) =\n  f (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rmge2 (f \\<triangleright> ?n) =\n  f (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i))\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "have \"Greatest (?P n) = 0\" if \"n < Suc (length a)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)) = 0", "proof (rule Greatest_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < Suc n \\<and> 2 \\<le> the (f 0)\n 2. \\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0", "show \"0 < Suc n \\<and> 2 \\<le> the (f 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc n \\<and> 2 \\<le> the (f 0)", "using that"], ["proof (prove)\nusing this:\n  n < Suc (length a)\n\ngoal (1 subgoal):\n 1. 0 < Suc n \\<and> 2 \\<le> the (f 0)", "by (simp add: jak(2) f_at_0)"], ["proof (state)\nthis:\n  0 < Suc n \\<and> 2 \\<le> the (f 0)\n\ngoal (1 subgoal):\n 1. \\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0", "show \"\\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0", "using that f_at_a"], ["proof (prove)\nusing this:\n  n < Suc (length a)\n  0 < ?x \\<and> ?x < Suc (length a) \\<Longrightarrow> the (f ?x) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> 0", "by (metis Suc_1 dual_order.strict_trans leI less_Suc_eq not_less_eq_eq)"], ["proof (state)\nthis:\n  ?y < Suc n \\<and> 2 \\<le> the (f ?y) \\<Longrightarrow> ?y \\<le> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?n < Suc (length a) \\<Longrightarrow>\n  (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i)) = 0\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "with rmge2 f_at_0"], ["proof (chain)\npicking this:\n  rmge2 (f \\<triangleright> ?n) =\n  f (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i))\n  f 0 \\<down>= j\n  ?n < Suc (length a) \\<Longrightarrow>\n  (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i)) = 0", "have rmge2_small:\n      \"rmge2 (f \\<triangleright> n) \\<down>= j\" if \"n < Suc (length a)\" for n"], ["proof (prove)\nusing this:\n  rmge2 (f \\<triangleright> ?n) =\n  f (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i))\n  f 0 \\<down>= j\n  ?n < Suc (length a) \\<Longrightarrow>\n  (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i)) = 0\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "using that"], ["proof (prove)\nusing this:\n  rmge2 (f \\<triangleright> ?n) =\n  f (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i))\n  f 0 \\<down>= j\n  ?n < Suc (length a) \\<Longrightarrow>\n  (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i)) = 0\n  n < Suc (length a)\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "by simp"], ["proof (state)\nthis:\n  ?n < Suc (length a) \\<Longrightarrow>\n  rmge2 (f \\<triangleright> ?n) \\<down>= j\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "have \"Greatest (?P n) = Suc (length a)\" if \"n \\<ge> Suc (length a)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST i. i < Suc n \\<and> 2 \\<le> the (f i)) = Suc (length a)", "proof (rule Greatest_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc (length a) < Suc n \\<and> 2 \\<le> the (f (Suc (length a)))\n 2. \\<And>y.\n       y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow>\n       y \\<le> Suc (length a)", "show \"Suc (length a) < Suc n \\<and> 2 \\<le> the (f (Suc (length a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length a) < Suc n \\<and> 2 \\<le> the (f (Suc (length a)))", "using that f_k"], ["proof (prove)\nusing this:\n  Suc (length a) \\<le> n\n  f (Suc (length a)) \\<down>= k\n\ngoal (1 subgoal):\n 1. Suc (length a) < Suc n \\<and> 2 \\<le> the (f (Suc (length a)))", "by (simp add: jak(4) less_Suc_eq_le)"], ["proof (state)\nthis:\n  Suc (length a) < Suc n \\<and> 2 \\<le> the (f (Suc (length a)))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow>\n       y \\<le> Suc (length a)", "show \"\\<And>y. y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow> y \\<le> Suc (length a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow>\n       y \\<le> Suc (length a)", "using that f_at_big"], ["proof (prove)\nusing this:\n  Suc (length a) \\<le> n\n  Suc (length a) < ?x \\<Longrightarrow> f ?x \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < Suc n \\<and> 2 \\<le> the (f y) \\<Longrightarrow>\n       y \\<le> Suc (length a)", "by (metis leI le_SucI not_less_eq_eq numeral_2_eq_2 option.sel)"], ["proof (state)\nthis:\n  ?y < Suc n \\<and> 2 \\<le> the (f ?y) \\<Longrightarrow>\n  ?y \\<le> Suc (length a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i)) = Suc (length a)\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "with rmge2 f_at_big f_k"], ["proof (chain)\npicking this:\n  rmge2 (f \\<triangleright> ?n) =\n  f (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i))\n  Suc (length a) < ?x \\<Longrightarrow> f ?x \\<down>= 0\n  f (Suc (length a)) \\<down>= k\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i)) = Suc (length a)", "have rmge2_big:\n      \"rmge2 (f \\<triangleright> n) \\<down>= k\" if \"n \\<ge> Suc (length a)\" for n"], ["proof (prove)\nusing this:\n  rmge2 (f \\<triangleright> ?n) =\n  f (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i))\n  Suc (length a) < ?x \\<Longrightarrow> f ?x \\<down>= 0\n  f (Suc (length a)) \\<down>= k\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i)) = Suc (length a)\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= k", "using that"], ["proof (prove)\nusing this:\n  rmge2 (f \\<triangleright> ?n) =\n  f (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i))\n  Suc (length a) < ?x \\<Longrightarrow> f ?x \\<down>= 0\n  f (Suc (length a)) \\<down>= k\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  (GREATEST i. i < Suc ?n \\<and> 2 \\<le> the (f i)) = Suc (length a)\n  Suc (length a) \\<le> n\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= k", "by simp"], ["proof (state)\nthis:\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  rmge2 (f \\<triangleright> ?n) \\<down>= k\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "then"], ["proof (chain)\npicking this:\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  rmge2 (f \\<triangleright> ?n) \\<down>= k", "have \"\\<exists>i n\\<^sub>0. \\<phi> i = f \\<and> (\\<forall>n\\<ge>n\\<^sub>0. rmge2 (f \\<triangleright> n) \\<down>= i)\""], ["proof (prove)\nusing this:\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  rmge2 (f \\<triangleright> ?n) \\<down>= k\n\ngoal (1 subgoal):\n 1. \\<exists>i n\\<^sub>0.\n       \\<phi> i = f \\<and>\n       (\\<forall>n\\<ge>n\\<^sub>0. rmge2 (f \\<triangleright> n) \\<down>= i)", "using jak(6)"], ["proof (prove)\nusing this:\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  rmge2 (f \\<triangleright> ?n) \\<down>= k\n  \\<phi> k = f\n\ngoal (1 subgoal):\n 1. \\<exists>i n\\<^sub>0.\n       \\<phi> i = f \\<and>\n       (\\<forall>n\\<ge>n\\<^sub>0. rmge2 (f \\<triangleright> n) \\<down>= i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>i n\\<^sub>0.\n     \\<phi> i = f \\<and>\n     (\\<forall>n\\<ge>n\\<^sub>0. rmge2 (f \\<triangleright> n) \\<down>= i)\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "moreover"], ["proof (state)\nthis:\n  \\<exists>i n\\<^sub>0.\n     \\<phi> i = f \\<and>\n     (\\<forall>n\\<ge>n\\<^sub>0. rmge2 (f \\<triangleright> n) \\<down>= i)\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "have \"\\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "proof (cases \"n < Suc (length a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k\n 2. \\<not> n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "case True"], ["proof (state)\nthis:\n  n < Suc (length a)\n\ngoal (2 subgoals):\n 1. n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k\n 2. \\<not> n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "then"], ["proof (chain)\npicking this:\n  n < Suc (length a)", "have \"rmge2 (f \\<triangleright> n) \\<down>= j\""], ["proof (prove)\nusing this:\n  n < Suc (length a)\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "using rmge2_small"], ["proof (prove)\nusing this:\n  n < Suc (length a)\n  ?n < Suc (length a) \\<Longrightarrow>\n  rmge2 (f \\<triangleright> ?n) \\<down>= j\n\ngoal (1 subgoal):\n 1. rmge2 (f \\<triangleright> n) \\<down>= j", "by simp"], ["proof (state)\nthis:\n  rmge2 (f \\<triangleright> n) \\<down>= j\n\ngoal (2 subgoals):\n 1. n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k\n 2. \\<not> n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "then"], ["proof (chain)\npicking this:\n  rmge2 (f \\<triangleright> n) \\<down>= j", "have \"\\<phi> (the (rmge2 (f \\<triangleright> n))) = \\<phi> j\""], ["proof (prove)\nusing this:\n  rmge2 (f \\<triangleright> n) \\<down>= j\n\ngoal (1 subgoal):\n 1. \\<phi> (the (rmge2 (f \\<triangleright> n))) = \\<phi> j", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (rmge2 (f \\<triangleright> n))) = \\<phi> j\n\ngoal (2 subgoals):\n 1. n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k\n 2. \\<not> n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "with True"], ["proof (chain)\npicking this:\n  n < Suc (length a)\n  \\<phi> (the (rmge2 (f \\<triangleright> n))) = \\<phi> j", "show ?thesis"], ["proof (prove)\nusing this:\n  n < Suc (length a)\n  \\<phi> (the (rmge2 (f \\<triangleright> n))) = \\<phi> j\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "using rmge2_small f_at_0 f_eq_a jak(5) prepend_at_less"], ["proof (prove)\nusing this:\n  n < Suc (length a)\n  \\<phi> (the (rmge2 (f \\<triangleright> n))) = \\<phi> j\n  ?n < Suc (length a) \\<Longrightarrow>\n  rmge2 (f \\<triangleright> ?n) \\<down>= j\n  f 0 \\<down>= j\n  0 < ?x \\<and> ?x < Suc (length a) \\<Longrightarrow>\n  f ?x \\<down>= a ! (?x - 1)\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  ?n < length ?vs \\<Longrightarrow> (?vs \\<odot> ?f) ?n \\<down>= ?vs ! ?n\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "by (metis le_less_trans le_zero_eq length_Cons not_le_imp_less nth_Cons_0 nth_Cons_pos)"], ["proof (state)\nthis:\n  \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k\n\ngoal (1 subgoal):\n 1. \\<not> n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "case False"], ["proof (state)\nthis:\n  \\<not> n < Suc (length a)\n\ngoal (1 subgoal):\n 1. \\<not> n < Suc (length a) \\<Longrightarrow>\n    \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "then"], ["proof (chain)\npicking this:\n  \\<not> n < Suc (length a)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n < Suc (length a)\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "using rmge2_big jak"], ["proof (prove)\nusing this:\n  \\<not> n < Suc (length a)\n  Suc (length a) \\<le> ?n \\<Longrightarrow>\n  rmge2 (f \\<triangleright> ?n) \\<down>= k\n  f = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  2 \\<le> j\n  \\<forall>i<length a. a ! i \\<le> 1\n  2 \\<le> k\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k = f\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "by simp"], ["proof (state)\nthis:\n  \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k\\<le>?n. \\<phi> (the (rmge2 (f \\<triangleright> ?n))) k = f k\n\ngoal (1 subgoal):\n 1. f \\<notin> V_constotal_1 \\<Longrightarrow>\n    (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>i n\\<^sub>0.\n     \\<phi> i = f \\<and>\n     (\\<forall>n\\<ge>n\\<^sub>0. rmge2 (f \\<triangleright> n) \\<down>= i)\n  \\<forall>k\\<le>?n. \\<phi> (the (rmge2 (f \\<triangleright> ?n))) k = f k", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>i n\\<^sub>0.\n     \\<phi> i = f \\<and>\n     (\\<forall>n\\<ge>n\\<^sub>0. rmge2 (f \\<triangleright> n) \\<down>= i)\n  \\<forall>k\\<le>?n. \\<phi> (the (rmge2 (f \\<triangleright> ?n))) k = f k\n\ngoal (1 subgoal):\n 1. (\\<exists>i.\n        \\<phi> i = f \\<and>\n        (\\<exists>n\\<^sub>0.\n            \\<forall>n\\<ge>n\\<^sub>0.\n               rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n    (\\<forall>n k.\n        k \\<le> n \\<longrightarrow>\n        \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "by simp"], ["proof (state)\nthis:\n  (\\<exists>i.\n      \\<phi> i = f \\<and>\n      (\\<exists>n\\<^sub>0.\n          \\<forall>n\\<ge>n\\<^sub>0.\n             rmge2 (f \\<triangleright> n) \\<down>= i)) \\<and>\n  (\\<forall>n k.\n      k \\<le> n \\<longrightarrow>\n      \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?f \\<in> V_constotal \\<Longrightarrow>\n  (\\<exists>i.\n      \\<phi> i = ?f \\<and>\n      (\\<exists>n\\<^sub>0.\n          \\<forall>n\\<ge>n\\<^sub>0.\n             rmge2 (?f \\<triangleright> n) \\<down>= i)) \\<and>\n  (\\<forall>n k.\n      k \\<le> n \\<longrightarrow>\n      \\<phi> (the (rmge2 (?f \\<triangleright> n))) k = ?f k)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       f \\<in> V_constotal \\<Longrightarrow>\n       \\<exists>i.\n          \\<phi> i = f \\<and>\n          (\\<exists>n\\<^sub>0.\n              \\<forall>n\\<ge>n\\<^sub>0.\n                 rmge2 (f \\<triangleright> n) \\<down>= i)\n 2. \\<And>f n.\n       f \\<in> V_constotal \\<Longrightarrow>\n       \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k", "then"], ["proof (chain)\npicking this:\n  ?f \\<in> V_constotal \\<Longrightarrow>\n  (\\<exists>i.\n      \\<phi> i = ?f \\<and>\n      (\\<exists>n\\<^sub>0.\n          \\<forall>n\\<ge>n\\<^sub>0.\n             rmge2 (?f \\<triangleright> n) \\<down>= i)) \\<and>\n  (\\<forall>n k.\n      k \\<le> n \\<longrightarrow>\n      \\<phi> (the (rmge2 (?f \\<triangleright> n))) k = ?f k)", "show \"\\<And>f. f \\<in> V_constotal \\<Longrightarrow> \\<exists>i. \\<phi> i = f \\<and> (\\<forall>\\<^sup>\\<infinity>n. rmge2 (f \\<triangleright> n) \\<down>= i)\"\n    and \"\\<And>f n. f \\<in> V_constotal \\<Longrightarrow> \\<forall>k\\<le>n. \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k\""], ["proof (prove)\nusing this:\n  ?f \\<in> V_constotal \\<Longrightarrow>\n  (\\<exists>i.\n      \\<phi> i = ?f \\<and>\n      (\\<exists>n\\<^sub>0.\n          \\<forall>n\\<ge>n\\<^sub>0.\n             rmge2 (?f \\<triangleright> n) \\<down>= i)) \\<and>\n  (\\<forall>n k.\n      k \\<le> n \\<longrightarrow>\n      \\<phi> (the (rmge2 (?f \\<triangleright> n))) k = ?f k)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f \\<in> V_constotal \\<Longrightarrow>\n        \\<exists>i.\n           \\<phi> i = f \\<and>\n           (\\<exists>n\\<^sub>0.\n               \\<forall>n\\<ge>n\\<^sub>0.\n                  rmge2 (f \\<triangleright> n) \\<down>= i)) &&&\n    (\\<And>f n.\n        f \\<in> V_constotal \\<Longrightarrow>\n        \\<forall>k\\<le>n.\n           \\<phi> (the (rmge2 (f \\<triangleright> n))) k = f k)", "by simp_all"], ["proof (state)\nthis:\n  ?f \\<in> V_constotal \\<Longrightarrow>\n  \\<exists>i.\n     \\<phi> i = ?f \\<and>\n     (\\<exists>n\\<^sub>0.\n         \\<forall>n\\<ge>n\\<^sub>0. rmge2 (?f \\<triangleright> n) \\<down>= i)\n  ?f \\<in> V_constotal \\<Longrightarrow>\n  \\<forall>k\\<le>?n. \\<phi> (the (rmge2 (?f \\<triangleright> ?n))) k = ?f k\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>The class is not in TOTAL\\<close>"], ["", "text \\<open>Recall that $V$ is the union of $V_1 = \\{jp \\mid j\\geq2 \\land p \\in\n\\mathcal{R}_{01} \\land \\varphi_j = jp\\}$ and $V_2 = \\{jak0^\\infty \\mid j\\geq 2 \\land a\n\\in \\{0, 1\\}^* \\land k\\geq 2 \\land \\varphi_j = ja\\uparrow^\\infty \\land\\ \n\\varphi_k = jak0^\\infty\\}$.\\<close>"], ["", "text \\<open>The proof is adapted from a proof of a stronger result by\nFreivalds, Kinber, and Wiehagen~\\cite[Theorem~27]{fkw-iisde-95} concerning an\ninference type not defined here.\n\nThe proof is by contradiction. If $V$ was in TOTAL, there would be\na strategy $S$ learning $V$ in our standard G?del numbering $\\varphi$.\nBy Lemma R for TOTAL we can assume $S$ to be total.\n\nIn order to construct a function $f\\in V$ for which $S$ fails we employ a\ncomputable process iteratively building function prefixes. For every $j$ the\nprocess builds a function $\\psi_j$. The initial prefix is the singleton\n$[j]$. Given a prefix $b$, the next prefix is determined as follows:\n\\begin{enumerate}\n\\item Search for a $y \\geq |b|$ with $\\varphi_{S(b)}(y) \\downarrow= v$ for\nsome $v$.\n\\item Set the new prefix $b0^{y - |b|}\\bar{v}$, where $\\bar v = 1 - v$.\n\\end{enumerate}\n\nStep~1 can diverge, for example, if $\\varphi_{S(b)}$ is the empty function.\nIn this case $\\psi_j$ will only be defined for a finite prefix. If, however,\nStep~2 is reached, the prefix $b$ is extended to a $b'$ such that\n$\\varphi_{S(b)}(y) \\neq b'_y$, which implies $S(b)$ is a wrong hypothesis for\nevery function starting with $b'$, in particular for $\\psi_j$. Since $\\bar v\n\\in \\{0, 1\\}$, Step~2 only appends zeros and ones, which is important for\nshowing membership in $V$.\n\nThis process defines a numbering $\\psi \\in \\mathcal{P}^2$, and by Kleene's\nfixed-point theorem there is a $j \\geq 2$ with $\\varphi_j = \\psi_j$. For this\n$j$ there are two cases:\n\\begin{enumerate}\n\\item[Case 1.] Step~1 always succeeds. Then $\\psi_j$ is total and\n  $\\psi_j \\in V_1$. But $S$ outputs wrong hypotheses on infinitely many\n  prefixes of $\\psi_j$ (namely every prefix constructed by the process).\n\n\\item[Case 2.] Step~1 diverges at some iteration, say when the state is $b = ja$\n  for some $a \\in \\{0, 1\\}^*$.\n  Then $\\psi_j$ has the form $ja\\uparrow^\\infty$. The numbering $\\chi$ with $\\chi_k =\n  jak0^\\infty$ is in $\\mathcal{P}^2$, and by Kleene's fixed-point theorem there is a\n  $k\\geq 2$ with $\\varphi_k = \\chi_k = jak0^\\infty$. This $jak0^\\infty$ is in\n  $V_2$ and has the prefix $ja$. But Step~1 diverged on this prefix, which\n  means there is no $y \\geq |ja|$ with $\\varphi_{S(ja)}(y)\\downarrow$. In\n  other words $S$ hypothesizes a non-total function.\n\\end{enumerate}\n\nThus, in both cases there is a function in $V$ where $S$ does not behave like\na TOTAL strategy. This is the desired contradiction.\n\nThe following locale formalizes this proof sketch.\\<close>"], ["", "locale total_cons =\n  fixes s :: partial1\n  assumes s_in_R1: \"s \\<in> \\<R>\"\nbegin"], ["", "definition r_s :: recf where\n  \"r_s \\<equiv> SOME r_s. recfn 1 r_s \\<and>  total r_s \\<and> s = (\\<lambda>x. eval r_s [x])\""], ["", "lemma rs_recfn [simp]: \"recfn 1 r_s\"\n  and rs_total [simp]: \"\\<And>x. eval r_s [x] \\<down>\"\n  and eval_rs: \"\\<And>x. s x = eval r_s [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 r_s &&&\n    (\\<And>x. eval r_s [x] \\<down>) &&& (\\<And>x. s x = eval r_s [x])", "using r_s_def R1_SOME[OF s_in_R1, of r_s]"], ["proof (prove)\nusing this:\n  r_s \\<equiv>\n  SOME r_s.\n     recfn 1 r_s \\<and>\n     Partial_Recursive.total r_s \\<and> s = (\\<lambda>x. eval r_s [x])\n  r_s =\n  (SOME r'.\n      recfn 1 r' \\<and>\n      Partial_Recursive.total r' \\<and>\n      s = (\\<lambda>x. eval r' [x])) \\<Longrightarrow>\n  recfn 1 r_s\n  r_s =\n  (SOME r'.\n      recfn 1 r' \\<and>\n      Partial_Recursive.total r' \\<and>\n      s = (\\<lambda>x. eval r' [x])) \\<Longrightarrow>\n  eval r_s [?x] \\<down>\n  r_s =\n  (SOME r'.\n      recfn 1 r' \\<and>\n      Partial_Recursive.total r' \\<and>\n      s = (\\<lambda>x. eval r' [x])) \\<Longrightarrow>\n  s ?x = eval r_s [?x]\n  r_s =\n  (SOME r'.\n      recfn 1 r' \\<and>\n      Partial_Recursive.total r' \\<and>\n      s = (\\<lambda>x. eval r' [x])) \\<Longrightarrow>\n  s = (\\<lambda>x. eval r_s [x])\n\ngoal (1 subgoal):\n 1. recfn 1 r_s &&&\n    (\\<And>x. eval r_s [x] \\<down>) &&& (\\<And>x. s x = eval r_s [x])", "by simp_all"], ["", "text \\<open>Performing Step~1 means enumerating the domain of\n$\\varphi_{S(b)}$ until a $y \\geq |b|$ is found. The next function enumerates\nall domain values and checks the condition for them.\\<close>"], ["", "definition \"r_search_enum \\<equiv>\n  Cn 2 r_le [Cn 2 r_length [Id 2 1], Cn 2 r_enumdom [Cn 2 r_s [Id 2 1], Id 2 0]]\""], ["", "lemma r_search_enum_recfn [simp]: \"recfn 2 r_search_enum\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 r_search_enum", "by (simp add: r_search_enum_def Let_def)"], ["", "abbreviation search_enum :: partial2 where\n  \"search_enum x b \\<equiv> eval r_search_enum [x, b]\""], ["", "abbreviation enumdom :: partial2 where\n  \"enumdom i y \\<equiv> eval r_enumdom [i, y]\""], ["", "lemma enumdom_empty_domain:\n  assumes \"\\<And>x. \\<phi> i x \\<up>\"\n  shows \"\\<And>y. enumdom i y \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. eval r_enumdom [i, y] \\<up>", "using assms r_enumdom_empty_domain"], ["proof (prove)\nusing this:\n  \\<phi> i ?x \\<up>\n  (\\<And>x. eval r_phi [?i, x] \\<up>) \\<Longrightarrow>\n  eval r_enumdom [?i, ?y] \\<up>\n\ngoal (1 subgoal):\n 1. \\<And>y. eval r_enumdom [i, y] \\<up>", "by (simp add: phi_def)"], ["", "lemma enumdom_nonempty_domain:\n  assumes \"\\<phi> i x\\<^sub>0 \\<down>\"\n  shows \"\\<And>y. enumdom i y \\<down>\"\n   and \"\\<And>x. \\<phi> i x \\<down> \\<longleftrightarrow> (\\<exists>y. enumdom i y \\<down>= x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y. eval r_enumdom [i, y] \\<down>) &&&\n    (\\<And>x.\n        (\\<phi> i x \\<down>) =\n        (\\<exists>y. eval r_enumdom [i, y] \\<down>= x))", "using assms r_enumdom_nonempty_domain phi_def"], ["proof (prove)\nusing this:\n  \\<phi> i x\\<^sub>0 \\<down>\n  eval r_phi [?i, ?x\\<^sub>0] \\<down> \\<Longrightarrow>\n  eval r_enumdom [?i, ?y] \\<down>\n  eval r_phi [?i, ?x\\<^sub>0] \\<down> \\<Longrightarrow>\n  (eval r_phi [?i, ?x] \\<down>) =\n  (\\<exists>y. eval r_enumdom [?i, y] \\<down>= ?x)\n  \\<phi> ?i ?x \\<equiv> eval r_phi [?i, ?x]\n\ngoal (1 subgoal):\n 1. (\\<And>y. eval r_enumdom [i, y] \\<down>) &&&\n    (\\<And>x.\n        (\\<phi> i x \\<down>) =\n        (\\<exists>y. eval r_enumdom [i, y] \\<down>= x))", "by metis+"], ["", "text \\<open>Enumerating the empty domain yields the empty function.\\<close>"], ["", "lemma search_enum_empty:\n  fixes b :: nat\n  assumes \"s b \\<down>= i\" and \"\\<And>x. \\<phi> i x \\<up>\"\n  shows \"\\<And>x. search_enum x b \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. search_enum x b \\<up>", "using assms r_search_enum_def enumdom_empty_domain eval_rs"], ["proof (prove)\nusing this:\n  s b \\<down>= i\n  \\<phi> i ?x \\<up>\n  r_search_enum \\<equiv>\n  Cn 2 r_le\n   [Cn 2 r_length [recf.Id 2 1],\n    Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]]\n  (\\<And>x. \\<phi> ?i x \\<up>) \\<Longrightarrow>\n  eval r_enumdom [?i, ?y] \\<up>\n  s ?x = eval r_s [?x]\n\ngoal (1 subgoal):\n 1. \\<And>x. search_enum x b \\<up>", "by simp"], ["", "text \\<open>Enumerating a non-empty domain yields a total function.\\<close>"], ["", "lemma search_enum_nonempty:\n  fixes b y0 :: nat\n  assumes \"s b \\<down>= i\" and \"\\<phi> i y\\<^sub>0 \\<down>\" and \"e = the (enumdom i x)\"\n  shows \"search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "let ?e = \"\\<lambda>x. the (enumdom i x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "let ?y = \"Cn 2 r_enumdom [Cn 2 r_s [Id 2 1], Id 2 0]\""], ["proof (state)\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "have \"recfn 2 ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])", "using assms(1)"], ["proof (prove)\nusing this:\n  s b \\<down>= i\n\ngoal (1 subgoal):\n 1. recfn 2 (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])", "by simp"], ["proof (state)\nthis:\n  recfn 2 (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "moreover"], ["proof (state)\nthis:\n  recfn 2 (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "have \"\\<And>x. eval ?y [x, b] = enumdom i x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [x, b] =\n       eval r_enumdom [i, x]", "using assms(1,2) eval_rs"], ["proof (prove)\nusing this:\n  s b \\<down>= i\n  \\<phi> i y\\<^sub>0 \\<down>\n  s ?x = eval r_s [?x]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [x, b] =\n       eval r_enumdom [i, x]", "by auto"], ["proof (state)\nthis:\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [?x, b] =\n  eval r_enumdom [i, ?x]\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "moreover"], ["proof (state)\nthis:\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [?x, b] =\n  eval r_enumdom [i, ?x]\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "from this"], ["proof (chain)\npicking this:\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [?x, b] =\n  eval r_enumdom [i, ?x]", "have \"\\<And>x. eval ?y [x, b] \\<down>\""], ["proof (prove)\nusing this:\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [?x, b] =\n  eval r_enumdom [i, ?x]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n        [x, b] \\<down>", "using enumdom_nonempty_domain(1)[OF assms(2)]"], ["proof (prove)\nusing this:\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [?x, b] =\n  eval r_enumdom [i, ?x]\n  eval r_enumdom [i, ?y] \\<down>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n        [x, b] \\<down>", "by simp"], ["proof (state)\nthis:\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n   [?x, b] \\<down>\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "ultimately"], ["proof (chain)\npicking this:\n  recfn 2 (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [?x, b] =\n  eval r_enumdom [i, ?x]\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n   [?x, b] \\<down>", "have \"eval (Cn 2 r_le [Cn 2 r_length [Id 2 1], ?y]) [x, b] \\<down>=\n      (if e_length b \\<le> ?e x then 0 else 1)\""], ["proof (prove)\nusing this:\n  recfn 2 (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]) [?x, b] =\n  eval r_enumdom [i, ?x]\n  eval (Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0])\n   [?x, b] \\<down>\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_le\n       [Cn 2 r_length [recf.Id 2 1],\n        Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]])\n     [x, b] \\<down>=\n    (if e_length b \\<le> the (eval r_enumdom [i, x]) then 0 else 1)", "by simp"], ["proof (state)\nthis:\n  eval\n   (Cn 2 r_le\n     [Cn 2 r_length [recf.Id 2 1],\n      Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]])\n   [x, b] \\<down>=\n  (if e_length b \\<le> the (eval r_enumdom [i, x]) then 0 else 1)\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "then"], ["proof (chain)\npicking this:\n  eval\n   (Cn 2 r_le\n     [Cn 2 r_length [recf.Id 2 1],\n      Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]])\n   [x, b] \\<down>=\n  (if e_length b \\<le> the (eval r_enumdom [i, x]) then 0 else 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  eval\n   (Cn 2 r_le\n     [Cn 2 r_length [recf.Id 2 1],\n      Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]])\n   [x, b] \\<down>=\n  (if e_length b \\<le> the (eval r_enumdom [i, x]) then 0 else 1)\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "using assms"], ["proof (prove)\nusing this:\n  eval\n   (Cn 2 r_le\n     [Cn 2 r_length [recf.Id 2 1],\n      Cn 2 r_enumdom [Cn 2 r_s [recf.Id 2 1], recf.Id 2 0]])\n   [x, b] \\<down>=\n  (if e_length b \\<le> the (eval r_enumdom [i, x]) then 0 else 1)\n  s b \\<down>= i\n  \\<phi> i y\\<^sub>0 \\<down>\n  e = the (eval r_enumdom [i, x])\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)", "by (simp add: r_search_enum_def)"], ["proof (state)\nthis:\n  search_enum x b \\<down>= (if e_length b \\<le> e then 0 else 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If there is a $y$ as desired, the enumeration will eventually return\nzero (representing ``true'').\\<close>"], ["", "lemma search_enum_nonempty_eq0:\n  fixes b y :: nat\n  assumes \"s b \\<down>= i\" and \"\\<phi> i y \\<down>\" and \"y \\<ge> e_length b\"\n  shows \"\\<exists>x. search_enum x b \\<down>= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0", "obtain x where x: \"enumdom i x \\<down>= y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        eval r_enumdom [i, x] \\<down>= y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using enumdom_nonempty_domain(2)[OF assms(2)] assms(2)"], ["proof (prove)\nusing this:\n  (\\<phi> i ?x \\<down>) = (\\<exists>y. eval r_enumdom [i, y] \\<down>= ?x)\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        eval r_enumdom [i, x] \\<down>= y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  eval r_enumdom [i, x] \\<down>= y\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<phi> i y \\<down>", "have \"\\<phi> i y \\<down>\""], ["proof (prove)\nusing this:\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>", "by simp"], ["proof (state)\nthis:\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0", "with x"], ["proof (chain)\npicking this:\n  eval r_enumdom [i, x] \\<down>= y\n  \\<phi> i y \\<down>", "have \"search_enum x b \\<down>= 0\""], ["proof (prove)\nusing this:\n  eval r_enumdom [i, x] \\<down>= y\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= 0", "using search_enum_nonempty[where ?e=y] assms"], ["proof (prove)\nusing this:\n  eval r_enumdom [i, x] \\<down>= y\n  \\<phi> i y \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y\\<^sub>0 \\<down>;\n   y = the (eval r_enumdom [?i, ?x])\\<rbrakk>\n  \\<Longrightarrow> search_enum ?x ?b \\<down>=\n                    (if e_length ?b \\<le> y then 0 else 1)\n  s b \\<down>= i\n  \\<phi> i y \\<down>\n  e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= 0", "by auto"], ["proof (state)\nthis:\n  search_enum x b \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  search_enum x b \\<down>= 0", "show ?thesis"], ["proof (prove)\nusing this:\n  search_enum x b \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. search_enum x b \\<down>= 0\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If there is no $y$ as desired, the enumeration will never return\nzero.\\<close>"], ["", "lemma search_enum_nonempty_neq0:\n  fixes b y0 :: nat\n  assumes \"s b \\<down>= i\"\n    and \"\\<phi> i y\\<^sub>0 \\<down>\"\n    and \"\\<not> (\\<exists>y. \\<phi> i y \\<down> \\<and> y \\<ge> e_length b)\"\n  shows \"\\<not> (\\<exists>x. search_enum x b \\<down>= 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>x. search_enum x b \\<down>= 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0 \\<Longrightarrow> False", "assume \"\\<exists>x. search_enum x b \\<down>= 0\""], ["proof (state)\nthis:\n  \\<exists>x. search_enum x b \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. search_enum x b \\<down>= 0", "obtain x where x: \"search_enum x b \\<down>= 0\""], ["proof (prove)\nusing this:\n  \\<exists>x. search_enum x b \\<down>= 0\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        search_enum x b \\<down>= 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  search_enum x b \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0 \\<Longrightarrow> False", "obtain y where y: \"enumdom i x \\<down>= y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        eval r_enumdom [i, x] \\<down>= y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using enumdom_nonempty_domain[OF assms(2)]"], ["proof (prove)\nusing this:\n  eval r_enumdom [i, ?y] \\<down>\n  (\\<phi> i ?x \\<down>) = (\\<exists>y. eval r_enumdom [i, y] \\<down>= ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        eval r_enumdom [i, x] \\<down>= y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  eval r_enumdom [i, x] \\<down>= y\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  eval r_enumdom [i, x] \\<down>= y", "have \"search_enum x b \\<down>= (if e_length b \\<le> y then 0 else 1)\""], ["proof (prove)\nusing this:\n  eval r_enumdom [i, x] \\<down>= y\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> y then 0 else 1)", "using assms(1-2) search_enum_nonempty"], ["proof (prove)\nusing this:\n  eval r_enumdom [i, x] \\<down>= y\n  s b \\<down>= i\n  \\<phi> i y\\<^sub>0 \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y\\<^sub>0 \\<down>;\n   ?e = the (eval r_enumdom [?i, ?x])\\<rbrakk>\n  \\<Longrightarrow> search_enum ?x ?b \\<down>=\n                    (if e_length ?b \\<le> ?e then 0 else 1)\n\ngoal (1 subgoal):\n 1. search_enum x b \\<down>= (if e_length b \\<le> y then 0 else 1)", "by simp"], ["proof (state)\nthis:\n  search_enum x b \\<down>= (if e_length b \\<le> y then 0 else 1)\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0 \\<Longrightarrow> False", "with x"], ["proof (chain)\npicking this:\n  search_enum x b \\<down>= 0\n  search_enum x b \\<down>= (if e_length b \\<le> y then 0 else 1)", "have \"e_length b \\<le> y\""], ["proof (prove)\nusing this:\n  search_enum x b \\<down>= 0\n  search_enum x b \\<down>= (if e_length b \\<le> y then 0 else 1)\n\ngoal (1 subgoal):\n 1. e_length b \\<le> y", "using option.inject"], ["proof (prove)\nusing this:\n  search_enum x b \\<down>= 0\n  search_enum x b \\<down>= (if e_length b \\<le> y then 0 else 1)\n  (Some ?x2.0 = Some ?y2.0) = (?x2.0 = ?y2.0)\n\ngoal (1 subgoal):\n 1. e_length b \\<le> y", "by fastforce"], ["proof (state)\nthis:\n  e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0 \\<Longrightarrow> False", "have \"\\<phi> i y \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>", "using assms(2) enumdom_nonempty_domain(2) y"], ["proof (prove)\nusing this:\n  \\<phi> i y\\<^sub>0 \\<down>\n  \\<phi> ?i ?x\\<^sub>0 \\<down> \\<Longrightarrow>\n  (\\<phi> ?i ?x \\<down>) = (\\<exists>y. eval r_enumdom [?i, y] \\<down>= ?x)\n  eval r_enumdom [i, x] \\<down>= y\n\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>", "by blast"], ["proof (state)\nthis:\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  e_length b \\<le> y\n  \\<phi> i y \\<down>", "show False"], ["proof (prove)\nusing this:\n  e_length b \\<le> y\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. False", "using assms(3)"], ["proof (prove)\nusing this:\n  e_length b \\<le> y\n  \\<phi> i y \\<down>\n  \\<nexists>y. \\<phi> i y \\<down> \\<and> e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The next function corresponds to Step~1. Given a prefix $b$ it\ncomputes a $y \\geq |b|$ with $\\varphi_{S(b)}(y)\\downarrow$ if such a $y$\nexists; otherwise it diverges.\\<close>"], ["", "definition \"r_search \\<equiv> Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]\""], ["", "lemma r_search_recfn [simp]: \"recfn 1 r_search\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 r_search", "using r_search_def"], ["proof (prove)\nusing this:\n  r_search \\<equiv> Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]\n\ngoal (1 subgoal):\n 1. recfn 1 r_search", "by simp"], ["", "abbreviation search :: partial1 where\n  \"search b \\<equiv> eval r_search [b]\""], ["", "text \\<open>If $\\varphi_{S(b)}$ is the empty function, the search process\ndiverges because already the enumeration of the domain diverges.\\<close>"], ["", "lemma search_empty:\n  assumes \"s b \\<down>= i\" and \"\\<And>x. \\<phi> i x \\<up>\"\n  shows \"search b \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. search b \\<up>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. search b \\<up>", "have \"\\<And>x. search_enum x b \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. search_enum x b \\<up>", "using search_enum_empty[OF assms]"], ["proof (prove)\nusing this:\n  search_enum ?x b \\<up>\n\ngoal (1 subgoal):\n 1. \\<And>x. search_enum x b \\<up>", "by simp"], ["proof (state)\nthis:\n  search_enum ?x b \\<up>\n\ngoal (1 subgoal):\n 1. search b \\<up>", "then"], ["proof (chain)\npicking this:\n  search_enum ?x b \\<up>", "have \"eval (Mn 1 r_search_enum) [b] \\<up>\""], ["proof (prove)\nusing this:\n  search_enum ?x b \\<up>\n\ngoal (1 subgoal):\n 1. eval (Mn 1 r_search_enum) [b] \\<up>", "by simp"], ["proof (state)\nthis:\n  eval (Mn 1 r_search_enum) [b] \\<up>\n\ngoal (1 subgoal):\n 1. search b \\<up>", "then"], ["proof (chain)\npicking this:\n  eval (Mn 1 r_search_enum) [b] \\<up>", "show \"search b \\<up>\""], ["proof (prove)\nusing this:\n  eval (Mn 1 r_search_enum) [b] \\<up>\n\ngoal (1 subgoal):\n 1. search b \\<up>", "unfolding r_search_def"], ["proof (prove)\nusing this:\n  eval (Mn 1 r_search_enum) [b] \\<up>\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b] \\<up>", "by simp"], ["proof (state)\nthis:\n  search b \\<up>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If $\\varphi_{S(b)}$ is non-empty, but there is no $y$ with the\ndesired properties, the search process diverges.\\<close>"], ["", "lemma search_nonempty_neq0:\n  fixes b y0 :: nat\n  assumes \"s b \\<down>= i\"\n    and \"\\<phi> i y\\<^sub>0 \\<down>\"\n    and \"\\<not> (\\<exists>y. \\<phi> i y \\<down> \\<and> y \\<ge> e_length b)\"\n  shows \"search b \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. search b \\<up>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. search b \\<up>", "have \"\\<not> (\\<exists>x. search_enum x b \\<down>= 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>x. search_enum x b \\<down>= 0", "using assms search_enum_nonempty_neq0"], ["proof (prove)\nusing this:\n  s b \\<down>= i\n  \\<phi> i y\\<^sub>0 \\<down>\n  \\<nexists>y. \\<phi> i y \\<down> \\<and> e_length b \\<le> y\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y\\<^sub>0 \\<down>;\n   \\<nexists>y. \\<phi> ?i y \\<down> \\<and> e_length ?b \\<le> y\\<rbrakk>\n  \\<Longrightarrow> \\<nexists>x. search_enum x ?b \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<nexists>x. search_enum x b \\<down>= 0", "by simp"], ["proof (state)\nthis:\n  \\<nexists>x. search_enum x b \\<down>= 0\n\ngoal (1 subgoal):\n 1. search b \\<up>", "moreover"], ["proof (state)\nthis:\n  \\<nexists>x. search_enum x b \\<down>= 0\n\ngoal (1 subgoal):\n 1. search b \\<up>", "have \"recfn 1 (Mn 1 r_search_enum)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 (Mn 1 r_search_enum)", "by (simp add: assms(1))"], ["proof (state)\nthis:\n  recfn 1 (Mn 1 r_search_enum)\n\ngoal (1 subgoal):\n 1. search b \\<up>", "ultimately"], ["proof (chain)\npicking this:\n  \\<nexists>x. search_enum x b \\<down>= 0\n  recfn 1 (Mn 1 r_search_enum)", "have \"eval (Mn 1 r_search_enum) [b] \\<up>\""], ["proof (prove)\nusing this:\n  \\<nexists>x. search_enum x b \\<down>= 0\n  recfn 1 (Mn 1 r_search_enum)\n\ngoal (1 subgoal):\n 1. eval (Mn 1 r_search_enum) [b] \\<up>", "by simp"], ["proof (state)\nthis:\n  eval (Mn 1 r_search_enum) [b] \\<up>\n\ngoal (1 subgoal):\n 1. search b \\<up>", "then"], ["proof (chain)\npicking this:\n  eval (Mn 1 r_search_enum) [b] \\<up>", "show ?thesis"], ["proof (prove)\nusing this:\n  eval (Mn 1 r_search_enum) [b] \\<up>\n\ngoal (1 subgoal):\n 1. search b \\<up>", "using r_search_def"], ["proof (prove)\nusing this:\n  eval (Mn 1 r_search_enum) [b] \\<up>\n  r_search \\<equiv> Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]\n\ngoal (1 subgoal):\n 1. search b \\<up>", "by auto"], ["proof (state)\nthis:\n  search b \\<up>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If there is a $y$ as desired, the search process will return\none such $y$.\\<close>"], ["", "lemma search_nonempty_eq0:\n  fixes b y :: nat\n  assumes \"s b \\<down>= i\" and \"\\<phi> i y \\<down>\" and \"y \\<ge> e_length b\"\n  shows \"search b \\<down>\"\n    and \"\\<phi> i (the (search b)) \\<down>\"\n    and \"the (search b) \\<ge> e_length b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. search b \\<down> &&&\n    \\<phi> i (the (search b)) \\<down> &&& e_length b \\<le> the (search b)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "have \"\\<exists>x. search_enum x b \\<down>= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0", "using assms search_enum_nonempty_eq0"], ["proof (prove)\nusing this:\n  s b \\<down>= i\n  \\<phi> i y \\<down>\n  e_length b \\<le> y\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. search_enum x ?b \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. search_enum x b \\<down>= 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>x. search_enum x b \\<down>= 0\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "moreover"], ["proof (state)\nthis:\n  \\<exists>x. search_enum x b \\<down>= 0\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "have \"\\<forall>x. search_enum x b \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. search_enum x b \\<down>", "using assms search_enum_nonempty"], ["proof (prove)\nusing this:\n  s b \\<down>= i\n  \\<phi> i y \\<down>\n  e_length b \\<le> y\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y\\<^sub>0 \\<down>;\n   ?e = the (eval r_enumdom [?i, ?x])\\<rbrakk>\n  \\<Longrightarrow> search_enum ?x ?b \\<down>=\n                    (if e_length ?b \\<le> ?e then 0 else 1)\n\ngoal (1 subgoal):\n 1. \\<forall>x. search_enum x b \\<down>", "by simp"], ["proof (state)\nthis:\n  \\<forall>x. search_enum x b \\<down>\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "moreover"], ["proof (state)\nthis:\n  \\<forall>x. search_enum x b \\<down>\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "have \"recfn 1 (Mn 1 r_search_enum)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 (Mn 1 r_search_enum)", "by simp"], ["proof (state)\nthis:\n  recfn 1 (Mn 1 r_search_enum)\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>x. search_enum x b \\<down>= 0\n  \\<forall>x. search_enum x b \\<down>\n  recfn 1 (Mn 1 r_search_enum)", "have\n    1: \"search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>= 0\" and\n    2: \"eval (Mn 1 r_search_enum) [b] \\<down>\""], ["proof (prove)\nusing this:\n  \\<exists>x. search_enum x b \\<down>= 0\n  \\<forall>x. search_enum x b \\<down>\n  recfn 1 (Mn 1 r_search_enum)\n\ngoal (1 subgoal):\n 1. search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>= 0 &&&\n    eval (Mn 1 r_search_enum) [b] \\<down>", "using eval_Mn_diverg eval_Mn_convergE[of 1 \"r_search_enum\" \"[b]\"]"], ["proof (prove)\nusing this:\n  \\<exists>x. search_enum x b \\<down>= 0\n  \\<forall>x. search_enum x b \\<down>\n  recfn 1 (Mn 1 r_search_enum)\n  recfn (length ?xs) (Mn ?n ?f) \\<Longrightarrow>\n  (\\<nexists>z.\n      eval ?f (z # ?xs) \\<down>= 0 \\<and>\n      (\\<forall>y<z. eval ?f (y # ?xs) \\<down>)) =\n  (eval (Mn ?n ?f) ?xs \\<up>)\n  \\<lbrakk>recfn (length [b]) (Mn 1 r_search_enum);\n   eval (Mn 1 r_search_enum) [b] \\<down>= ?z\\<rbrakk>\n  \\<Longrightarrow> ?z =\n                    (LEAST z.\n                        search_enum z b \\<down>= 0 \\<and>\n                        (\\<forall>y<z. search_enum y b \\<down>))\n  \\<lbrakk>recfn (length [b]) (Mn 1 r_search_enum);\n   eval (Mn 1 r_search_enum) [b] \\<down>= ?z\\<rbrakk>\n  \\<Longrightarrow> search_enum ?z b \\<down>= 0\n  \\<lbrakk>recfn (length [b]) (Mn 1 r_search_enum);\n   eval (Mn 1 r_search_enum) [b] \\<down>= ?z; ?y < ?z\\<rbrakk>\n  \\<Longrightarrow> search_enum ?y b \\<down>\\<noteq> 0\n\ngoal (1 subgoal):\n 1. search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>= 0 &&&\n    eval (Mn 1 r_search_enum) [b] \\<down>", "by (metis (no_types, lifting) One_nat_def length_Cons list.size(3) option.collapse,\n      metis (no_types, lifting) One_nat_def length_Cons list.size(3))"], ["proof (state)\nthis:\n  search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>= 0\n  eval (Mn 1 r_search_enum) [b] \\<down>\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "let ?x = \"the (eval (Mn 1 r_search_enum) [b])\""], ["proof (state)\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "have \"search b = eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. search b = eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b]", "unfolding r_search_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b] =\n    eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b]", "by simp"], ["proof (state)\nthis:\n  search b = eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b]\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  search b = eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b]", "have 3: \"search b = enumdom i ?x\""], ["proof (prove)\nusing this:\n  search b = eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b]\n\ngoal (1 subgoal):\n 1. search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]", "using assms 2 eval_rs"], ["proof (prove)\nusing this:\n  search b = eval (Cn 1 r_enumdom [r_s, Mn 1 r_search_enum]) [b]\n  s b \\<down>= i\n  \\<phi> i y \\<down>\n  e_length b \\<le> y\n  eval (Mn 1 r_search_enum) [b] \\<down>\n  s ?x = eval r_s [?x]\n\ngoal (1 subgoal):\n 1. search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]", "by simp"], ["proof (state)\nthis:\n  search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]", "have \"the (search b) = the (enumdom i ?x)\" (is \"?y = _\")"], ["proof (prove)\nusing this:\n  search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]\n\ngoal (1 subgoal):\n 1. the (search b) =\n    the (eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])])", "by simp"], ["proof (state)\nthis:\n  the (search b) =\n  the (eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])])\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  the (search b) =\n  the (eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])])", "have 4: \"search_enum ?x b \\<down>= (if e_length b \\<le> ?y then 0 else 1)\""], ["proof (prove)\nusing this:\n  the (search b) =\n  the (eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])])\n\ngoal (1 subgoal):\n 1. search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>=\n    (if e_length b \\<le> the (search b) then 0 else 1)", "using search_enum_nonempty assms"], ["proof (prove)\nusing this:\n  the (search b) =\n  the (eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])])\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y\\<^sub>0 \\<down>;\n   ?e = the (eval r_enumdom [?i, ?x])\\<rbrakk>\n  \\<Longrightarrow> search_enum ?x ?b \\<down>=\n                    (if e_length ?b \\<le> ?e then 0 else 1)\n  s b \\<down>= i\n  \\<phi> i y \\<down>\n  e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>=\n    (if e_length b \\<le> the (search b) then 0 else 1)", "by simp"], ["proof (state)\nthis:\n  search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>=\n  (if e_length b \\<le> the (search b) then 0 else 1)\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "from 3"], ["proof (chain)\npicking this:\n  search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]", "have \"\\<phi> i ?y \\<down>\""], ["proof (prove)\nusing this:\n  search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]\n\ngoal (1 subgoal):\n 1. \\<phi> i (the (search b)) \\<down>", "using enumdom_nonempty_domain assms(2)"], ["proof (prove)\nusing this:\n  search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]\n  \\<phi> ?i ?x\\<^sub>0 \\<down> \\<Longrightarrow>\n  eval r_enumdom [?i, ?y] \\<down>\n  \\<phi> ?i ?x\\<^sub>0 \\<down> \\<Longrightarrow>\n  (\\<phi> ?i ?x \\<down>) = (\\<exists>y. eval r_enumdom [?i, y] \\<down>= ?x)\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<phi> i (the (search b)) \\<down>", "by (metis option.collapse)"], ["proof (state)\nthis:\n  \\<phi> i (the (search b)) \\<down>\n\ngoal (3 subgoals):\n 1. search b \\<down>\n 2. \\<phi> i (the (search b)) \\<down>\n 3. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  \\<phi> i (the (search b)) \\<down>", "show \"\\<phi> i ?y \\<down>\""], ["proof (prove)\nusing this:\n  \\<phi> i (the (search b)) \\<down>\n\ngoal (1 subgoal):\n 1. \\<phi> i (the (search b)) \\<down>", "using phi_def"], ["proof (prove)\nusing this:\n  \\<phi> i (the (search b)) \\<down>\n  \\<phi> ?i ?x \\<equiv> eval r_phi [?i, ?x]\n\ngoal (1 subgoal):\n 1. \\<phi> i (the (search b)) \\<down>", "by simp"], ["proof (state)\nthis:\n  \\<phi> i (the (search b)) \\<down>\n\ngoal (2 subgoals):\n 1. search b \\<down>\n 2. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  \\<phi> i (the (search b)) \\<down>", "show \"?y \\<ge> e_length b\""], ["proof (prove)\nusing this:\n  \\<phi> i (the (search b)) \\<down>\n\ngoal (1 subgoal):\n 1. e_length b \\<le> the (search b)", "using assms 4 1 option.inject"], ["proof (prove)\nusing this:\n  \\<phi> i (the (search b)) \\<down>\n  s b \\<down>= i\n  \\<phi> i y \\<down>\n  e_length b \\<le> y\n  search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>=\n  (if e_length b \\<le> the (search b) then 0 else 1)\n  search_enum (the (eval (Mn 1 r_search_enum) [b])) b \\<down>= 0\n  (Some ?x2.0 = Some ?y2.0) = (?x2.0 = ?y2.0)\n\ngoal (1 subgoal):\n 1. e_length b \\<le> the (search b)", "by fastforce"], ["proof (state)\nthis:\n  e_length b \\<le> the (search b)\n\ngoal (1 subgoal):\n 1. search b \\<down>", "show \"search b \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. search b \\<down>", "using 3 assms(2) enumdom_nonempty_domain(1)"], ["proof (prove)\nusing this:\n  search b = eval r_enumdom [i, the (eval (Mn 1 r_search_enum) [b])]\n  \\<phi> i y \\<down>\n  \\<phi> ?i ?x\\<^sub>0 \\<down> \\<Longrightarrow>\n  eval r_enumdom [?i, ?y] \\<down>\n\ngoal (1 subgoal):\n 1. search b \\<down>", "by auto"], ["proof (state)\nthis:\n  search b \\<down>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The converse of the previous lemma states that whenever\nthe search process returns a value it will be one with the\ndesired properties.\\<close>"], ["", "lemma search_converg:\n  assumes \"s b \\<down>= i\" and \"search b \\<down>\" (is \"?y \\<down>\")\n  shows \"\\<phi> i (the ?y) \\<down>\"\n    and \"the ?y \\<ge> e_length b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> i (the (search b)) \\<down> &&& e_length b \\<le> the (search b)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<phi> i (the (search b)) \\<down>\n 2. e_length b \\<le> the (search b)", "have \"\\<exists>y. \\<phi> i y \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. \\<phi> i y \\<down>", "using assms search_empty"], ["proof (prove)\nusing this:\n  s b \\<down>= i\n  search b \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<And>x. \\<phi> ?i x \\<up>\\<rbrakk>\n  \\<Longrightarrow> search ?b \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>y. \\<phi> i y \\<down>", "by meson"], ["proof (state)\nthis:\n  \\<exists>y. \\<phi> i y \\<down>\n\ngoal (2 subgoals):\n 1. \\<phi> i (the (search b)) \\<down>\n 2. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  \\<exists>y. \\<phi> i y \\<down>", "have \"\\<exists>y. y \\<ge> e_length b \\<and> \\<phi> i y \\<down>\""], ["proof (prove)\nusing this:\n  \\<exists>y. \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<ge>e_length b. \\<phi> i y \\<down>", "using search_nonempty_neq0 assms"], ["proof (prove)\nusing this:\n  \\<exists>y. \\<phi> i y \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y\\<^sub>0 \\<down>;\n   \\<nexists>y. \\<phi> ?i y \\<down> \\<and> e_length ?b \\<le> y\\<rbrakk>\n  \\<Longrightarrow> search ?b \\<up>\n  s b \\<down>= i\n  search b \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<ge>e_length b. \\<phi> i y \\<down>", "by meson"], ["proof (state)\nthis:\n  \\<exists>y\\<ge>e_length b. \\<phi> i y \\<down>\n\ngoal (2 subgoals):\n 1. \\<phi> i (the (search b)) \\<down>\n 2. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  \\<exists>y\\<ge>e_length b. \\<phi> i y \\<down>", "obtain y where y: \"y \\<ge> e_length b \\<and> \\<phi> i y \\<down>\""], ["proof (prove)\nusing this:\n  \\<exists>y\\<ge>e_length b. \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        e_length b \\<le> y \\<and> \\<phi> i y \\<down> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e_length b \\<le> y \\<and> \\<phi> i y \\<down>\n\ngoal (2 subgoals):\n 1. \\<phi> i (the (search b)) \\<down>\n 2. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  e_length b \\<le> y \\<and> \\<phi> i y \\<down>", "have \"\\<phi> i y \\<down>\""], ["proof (prove)\nusing this:\n  e_length b \\<le> y \\<and> \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>", "using phi_def"], ["proof (prove)\nusing this:\n  e_length b \\<le> y \\<and> \\<phi> i y \\<down>\n  \\<phi> ?i ?x \\<equiv> eval r_phi [?i, ?x]\n\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>", "by simp"], ["proof (state)\nthis:\n  \\<phi> i y \\<down>\n\ngoal (2 subgoals):\n 1. \\<phi> i (the (search b)) \\<down>\n 2. e_length b \\<le> the (search b)", "then"], ["proof (chain)\npicking this:\n  \\<phi> i y \\<down>", "show \"\\<phi> i (the (search b)) \\<down>\"\n    and \"(the (search b)) \\<ge> e_length b\""], ["proof (prove)\nusing this:\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<phi> i (the (search b)) \\<down> &&& e_length b \\<le> the (search b)", "using y assms search_nonempty_eq0[OF assms(1) \\<open>\\<phi> i y \\<down>\\<close>]"], ["proof (prove)\nusing this:\n  \\<phi> i y \\<down>\n  e_length b \\<le> y \\<and> \\<phi> i y \\<down>\n  s b \\<down>= i\n  search b \\<down>\n  e_length b \\<le> y \\<Longrightarrow> search b \\<down>\n  e_length b \\<le> y \\<Longrightarrow> \\<phi> i (the (search b)) \\<down>\n  e_length b \\<le> y \\<Longrightarrow> e_length b \\<le> the (search b)\n\ngoal (1 subgoal):\n 1. \\<phi> i (the (search b)) \\<down> &&& e_length b \\<le> the (search b)", "by simp_all"], ["proof (state)\nthis:\n  \\<phi> i (the (search b)) \\<down>\n  e_length b \\<le> the (search b)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Likewise, if the search diverges, there is no appropriate $y$.\\<close>"], ["", "lemma search_diverg:\n  assumes \"s b \\<down>= i\" and \"search b \\<up>\"\n  shows \"\\<not> (\\<exists>y. \\<phi> i y \\<down> \\<and> y \\<ge> e_length b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>y. \\<phi> i y \\<down> \\<and> e_length b \\<le> y", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       \\<phi> i y \\<down> \\<and> e_length b \\<le> y \\<Longrightarrow>\n    False", "assume \"\\<exists>y. \\<phi> i y \\<down> \\<and> y \\<ge> e_length b\""], ["proof (state)\nthis:\n  \\<exists>y. \\<phi> i y \\<down> \\<and> e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       \\<phi> i y \\<down> \\<and> e_length b \\<le> y \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>y. \\<phi> i y \\<down> \\<and> e_length b \\<le> y", "obtain y where y: \"\\<phi> i y \\<down>\" \"y \\<ge> e_length b\""], ["proof (prove)\nusing this:\n  \\<exists>y. \\<phi> i y \\<down> \\<and> e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>\\<phi> i y \\<down>; e_length b \\<le> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<phi> i y \\<down>\n  e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       \\<phi> i y \\<down> \\<and> e_length b \\<le> y \\<Longrightarrow>\n    False", "from y(1)"], ["proof (chain)\npicking this:\n  \\<phi> i y \\<down>", "have \"\\<phi> i y \\<down>\""], ["proof (prove)\nusing this:\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>", "by (simp add: phi_def)"], ["proof (state)\nthis:\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       \\<phi> i y \\<down> \\<and> e_length b \\<le> y \\<Longrightarrow>\n    False", "with y(2) search_nonempty_eq0"], ["proof (chain)\npicking this:\n  e_length b \\<le> y\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> search ?b \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?i (the (search ?b)) \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> the (search ?b)\n  \\<phi> i y \\<down>", "have \"search b \\<down>\""], ["proof (prove)\nusing this:\n  e_length b \\<le> y\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> search ?b \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?i (the (search ?b)) \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> the (search ?b)\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. search b \\<down>", "using assms"], ["proof (prove)\nusing this:\n  e_length b \\<le> y\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> search ?b \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?i (the (search ?b)) \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; \\<phi> ?i ?y \\<down>;\n   e_length ?b \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> the (search ?b)\n  \\<phi> i y \\<down>\n  s b \\<down>= i\n  search b \\<up>\n\ngoal (1 subgoal):\n 1. search b \\<down>", "by blast"], ["proof (state)\nthis:\n  search b \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       \\<phi> i y \\<down> \\<and> e_length b \\<le> y \\<Longrightarrow>\n    False", "with assms(2)"], ["proof (chain)\npicking this:\n  search b \\<up>\n  search b \\<down>", "show False"], ["proof (prove)\nusing this:\n  search b \\<up>\n  search b \\<down>\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Step~2 extends the prefix by a block of the shape $0^n\\bar v$.\nThe next function constructs such a block for given $n$ and $v$.\\<close>"], ["", "definition \"r_badblock \\<equiv>\n  let f = Cn 1 r_singleton_encode [r_not];\n      g = Cn 3 r_cons [r_constn 2 0, Id 3 1]\n  in Pr 1 f g\""], ["", "lemma r_badblock_prim [simp]: \"recfn 2 r_badblock\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 r_badblock", "unfolding r_badblock_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2\n     (let f = Cn 1 r_singleton_encode [r_not]\n      in Let (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1]) (Pr 1 f))", "by simp"], ["", "lemma r_badblock: \"eval r_badblock [n, v] \\<down>= list_encode (replicate n 0 @ [1 - v])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_badblock [n, v] \\<down>=\n    Partial_Recursive.list_encode (replicate n 0 @ [1 - v])", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n 2. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n 2. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "let ?f = \"Cn 1 r_singleton_encode [r_not]\""], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n 2. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"eval r_badblock [0, v] = eval ?f [v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_badblock [0, v] = eval (Cn 1 r_singleton_encode [r_not]) [v]", "unfolding r_badblock_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (let f = Cn 1 r_singleton_encode [r_not]\n      in Let (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1]) (Pr 1 f))\n     [0, v] =\n    eval (Cn 1 r_singleton_encode [r_not]) [v]", "by simp"], ["proof (state)\nthis:\n  eval r_badblock [0, v] = eval (Cn 1 r_singleton_encode [r_not]) [v]\n\ngoal (2 subgoals):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n 2. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "also"], ["proof (state)\nthis:\n  eval r_badblock [0, v] = eval (Cn 1 r_singleton_encode [r_not]) [v]\n\ngoal (2 subgoals):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n 2. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"... = eval r_singleton_encode [the (eval r_not [v])]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Cn 1 r_singleton_encode [r_not]) [v] =\n    eval r_singleton_encode [the (eval r_not [v])]", "by simp"], ["proof (state)\nthis:\n  eval (Cn 1 r_singleton_encode [r_not]) [v] =\n  eval r_singleton_encode [the (eval r_not [v])]\n\ngoal (2 subgoals):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n 2. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "also"], ["proof (state)\nthis:\n  eval (Cn 1 r_singleton_encode [r_not]) [v] =\n  eval r_singleton_encode [the (eval r_not [v])]\n\ngoal (2 subgoals):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n 2. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"... \\<down>= list_encode [1 - v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_singleton_encode [the (eval r_not [v])] \\<down>=\n    singleton_encode (1 - v)", "by simp"], ["proof (state)\nthis:\n  eval r_singleton_encode [the (eval r_not [v])] \\<down>=\n  singleton_encode (1 - v)\n\ngoal (2 subgoals):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n 2. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "finally"], ["proof (chain)\npicking this:\n  eval r_badblock [0, v] \\<down>= singleton_encode (1 - v)", "show ?case"], ["proof (prove)\nusing this:\n  eval r_badblock [0, v] \\<down>= singleton_encode (1 - v)\n\ngoal (1 subgoal):\n 1. eval r_badblock [0, v] \\<down>=\n    Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])", "by simp"], ["proof (state)\nthis:\n  eval r_badblock [0, v] \\<down>=\n  Partial_Recursive.list_encode (replicate 0 0 @ [1 - v])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "case (Suc n)"], ["proof (state)\nthis:\n  eval r_badblock [n, v] \\<down>=\n  Partial_Recursive.list_encode (replicate n 0 @ [1 - v])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "let ?g = \"Cn 3 r_cons [r_constn 2 0, Id 3 1]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"recfn 3 ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 3 (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])", "by simp"], ["proof (state)\nthis:\n  recfn 3 (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"eval r_badblock [(Suc n), v] = eval ?g [n, the (eval r_badblock [n , v]), v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_badblock [Suc n, v] =\n    eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n     [n, the (eval r_badblock [n, v]), v]", "using \\<open>recfn 3 ?g\\<close> Suc"], ["proof (prove)\nusing this:\n  recfn 3 (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n  eval r_badblock [n, v] \\<down>=\n  Partial_Recursive.list_encode (replicate n 0 @ [1 - v])\n\ngoal (1 subgoal):\n 1. eval r_badblock [Suc n, v] =\n    eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n     [n, the (eval r_badblock [n, v]), v]", "by (simp add: r_badblock_def)"], ["proof (state)\nthis:\n  eval r_badblock [Suc n, v] =\n  eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n   [n, the (eval r_badblock [n, v]), v]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "also"], ["proof (state)\nthis:\n  eval r_badblock [Suc n, v] =\n  eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n   [n, the (eval r_badblock [n, v]), v]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"... = eval ?g [n, list_encode (replicate n 0 @ [1 - v]), v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n     [n, the (eval r_badblock [n, v]), v] =\n    eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n     [n, Partial_Recursive.list_encode (replicate n 0 @ [1 - v]), v]", "using Suc"], ["proof (prove)\nusing this:\n  eval r_badblock [n, v] \\<down>=\n  Partial_Recursive.list_encode (replicate n 0 @ [1 - v])\n\ngoal (1 subgoal):\n 1. eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n     [n, the (eval r_badblock [n, v]), v] =\n    eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n     [n, Partial_Recursive.list_encode (replicate n 0 @ [1 - v]), v]", "by simp"], ["proof (state)\nthis:\n  eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n   [n, the (eval r_badblock [n, v]), v] =\n  eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n   [n, Partial_Recursive.list_encode (replicate n 0 @ [1 - v]), v]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "also"], ["proof (state)\nthis:\n  eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n   [n, the (eval r_badblock [n, v]), v] =\n  eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n   [n, Partial_Recursive.list_encode (replicate n 0 @ [1 - v]), v]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"... = eval r_cons [0, list_encode (replicate n 0 @ [1 - v])]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n     [n, Partial_Recursive.list_encode (replicate n 0 @ [1 - v]), v] =\n    eval r_cons [0, Partial_Recursive.list_encode (replicate n 0 @ [1 - v])]", "by simp"], ["proof (state)\nthis:\n  eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n   [n, Partial_Recursive.list_encode (replicate n 0 @ [1 - v]), v] =\n  eval r_cons [0, Partial_Recursive.list_encode (replicate n 0 @ [1 - v])]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "also"], ["proof (state)\nthis:\n  eval (Cn 3 r_cons [r_constn 2 0, recf.Id 3 1])\n   [n, Partial_Recursive.list_encode (replicate n 0 @ [1 - v]), v] =\n  eval r_cons [0, Partial_Recursive.list_encode (replicate n 0 @ [1 - v])]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"... \\<down>= e_cons 0 (list_encode (replicate n 0 @ [1 - v]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_cons\n     [0, Partial_Recursive.list_encode (replicate n 0 @ [1 - v])] \\<down>=\n    e_cons 0 (Partial_Recursive.list_encode (replicate n 0 @ [1 - v]))", "by simp"], ["proof (state)\nthis:\n  eval r_cons\n   [0, Partial_Recursive.list_encode (replicate n 0 @ [1 - v])] \\<down>=\n  e_cons 0 (Partial_Recursive.list_encode (replicate n 0 @ [1 - v]))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "also"], ["proof (state)\nthis:\n  eval r_cons\n   [0, Partial_Recursive.list_encode (replicate n 0 @ [1 - v])] \\<down>=\n  e_cons 0 (Partial_Recursive.list_encode (replicate n 0 @ [1 - v]))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"... \\<down>= list_encode (0 # (replicate n 0 @ [1 - v]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some\n     (e_cons 0\n       (Partial_Recursive.list_encode (replicate n 0 @ [1 - v]))) \\<down>=\n    Partial_Recursive.list_encode (0 # replicate n 0 @ [1 - v])", "by simp"], ["proof (state)\nthis:\n  Some\n   (e_cons 0\n     (Partial_Recursive.list_encode (replicate n 0 @ [1 - v]))) \\<down>=\n  Partial_Recursive.list_encode (0 # replicate n 0 @ [1 - v])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "also"], ["proof (state)\nthis:\n  Some\n   (e_cons 0\n     (Partial_Recursive.list_encode (replicate n 0 @ [1 - v]))) \\<down>=\n  Partial_Recursive.list_encode (0 # replicate n 0 @ [1 - v])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "have \"... \\<down>= list_encode (replicate (Suc n) 0 @ [1 - v])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some\n     (Partial_Recursive.list_encode (0 # replicate n 0 @ [1 - v])) \\<down>=\n    Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "by simp"], ["proof (state)\nthis:\n  Some\n   (Partial_Recursive.list_encode (0 # replicate n 0 @ [1 - v])) \\<down>=\n  Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval r_badblock [n, v] \\<down>=\n       Partial_Recursive.list_encode\n        (replicate n 0 @ [1 - v]) \\<Longrightarrow>\n       eval r_badblock [Suc n, v] \\<down>=\n       Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "finally"], ["proof (chain)\npicking this:\n  eval r_badblock [Suc n, v] \\<down>=\n  Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "show ?case"], ["proof (prove)\nusing this:\n  eval r_badblock [Suc n, v] \\<down>=\n  Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])\n\ngoal (1 subgoal):\n 1. eval r_badblock [Suc n, v] \\<down>=\n    Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])", "by simp"], ["proof (state)\nthis:\n  eval r_badblock [Suc n, v] \\<down>=\n  Partial_Recursive.list_encode (replicate (Suc n) 0 @ [1 - v])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma r_badblock_only_01: \"e_nth (the (eval r_badblock [n, v])) i \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth (the (eval r_badblock [n, v])) i \\<le> 1", "using r_badblock"], ["proof (prove)\nusing this:\n  eval r_badblock [?n, ?v] \\<down>=\n  Partial_Recursive.list_encode (replicate ?n 0 @ [1 - ?v])\n\ngoal (1 subgoal):\n 1. e_nth (the (eval r_badblock [n, v])) i \\<le> 1", "by (simp add: nth_append)"], ["", "lemma r_badblock_last: \"e_nth (the (eval r_badblock [n, v])) n = 1 - v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth (the (eval r_badblock [n, v])) n = 1 - v", "using r_badblock"], ["proof (prove)\nusing this:\n  eval r_badblock [?n, ?v] \\<down>=\n  Partial_Recursive.list_encode (replicate ?n 0 @ [1 - ?v])\n\ngoal (1 subgoal):\n 1. e_nth (the (eval r_badblock [n, v])) n = 1 - v", "by (simp add: nth_append)"], ["", "text \\<open>The following function computes the next prefix from the current\none. In other words, it performs Steps~1 and~2.\\<close>"], ["", "definition \"r_next \\<equiv>\n  Cn 1 r_append\n   [Id 1 0,\n    Cn 1 r_badblock\n     [Cn 1 r_sub [r_search, r_length],\n      Cn 1 r_phi [r_s, r_search]]]\""], ["", "lemma r_next_recfn [simp]: \"recfn 1 r_next\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 r_next", "unfolding r_next_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1\n     (Cn 1 r_append\n       [recf.Id 1 0,\n        Cn 1 r_badblock\n         [Cn 1 r_sub [r_search, r_length], Cn 1 r_phi [r_s, r_search]]])", "by simp"], ["", "text \\<open>The name @{text next} is unavailable, so we go for @{term nxt}.\\<close>"], ["", "abbreviation nxt :: partial1 where\n  \"nxt b \\<equiv> eval r_next [b]\""], ["", "lemma nxt_diverg:\n  assumes \"search b \\<up>\"\n  shows \"nxt b \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt b \\<up>", "unfolding r_next_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Cn 1 r_append\n       [recf.Id 1 0,\n        Cn 1 r_badblock\n         [Cn 1 r_sub [r_search, r_length], Cn 1 r_phi [r_s, r_search]]])\n     [b] \\<up>", "using assms"], ["proof (prove)\nusing this:\n  search b \\<up>\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 1 r_append\n       [recf.Id 1 0,\n        Cn 1 r_badblock\n         [Cn 1 r_sub [r_search, r_length], Cn 1 r_phi [r_s, r_search]]])\n     [b] \\<up>", "by (simp add: Let_def)"], ["", "lemma nxt_converg:\n  assumes \"search b \\<down>= y\"\n  shows \"nxt b \\<down>=\n     e_append b (list_encode (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt b \\<down>=\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "unfolding r_next_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Cn 1 r_append\n       [recf.Id 1 0,\n        Cn 1 r_badblock\n         [Cn 1 r_sub [r_search, r_length], Cn 1 r_phi [r_s, r_search]]])\n     [b] \\<down>=\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "using assms r_badblock search_converg phi_def eval_rs"], ["proof (prove)\nusing this:\n  search b \\<down>= y\n  eval r_badblock [?n, ?v] \\<down>=\n  Partial_Recursive.list_encode (replicate ?n 0 @ [1 - ?v])\n  \\<lbrakk>s ?b \\<down>= ?i; search ?b \\<down>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?i (the (search ?b)) \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; search ?b \\<down>\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> the (search ?b)\n  \\<phi> ?i ?x \\<equiv> eval r_phi [?i, ?x]\n  s ?x = eval r_s [?x]\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 1 r_append\n       [recf.Id 1 0,\n        Cn 1 r_badblock\n         [Cn 1 r_sub [r_search, r_length], Cn 1 r_phi [r_s, r_search]]])\n     [b] \\<down>=\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "by fastforce"], ["", "lemma nxt_search_diverg:\n  assumes \"nxt b \\<up>\"\n  shows \"search b \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. search b \\<up>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. search b \\<down> \\<Longrightarrow> False", "assume \"search b \\<down>\""], ["proof (state)\nthis:\n  search b \\<down>\n\ngoal (1 subgoal):\n 1. search b \\<down> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  search b \\<down>", "obtain y where \"search b \\<down>= y\""], ["proof (prove)\nusing this:\n  search b \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  search b \\<down>= y\n\ngoal (1 subgoal):\n 1. search b \\<down> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  search b \\<down>= y", "show False"], ["proof (prove)\nusing this:\n  search b \\<down>= y\n\ngoal (1 subgoal):\n 1. False", "using nxt_converg assms"], ["proof (prove)\nusing this:\n  search b \\<down>= y\n  search ?b \\<down>= ?y \\<Longrightarrow>\n  nxt ?b \\<down>=\n  e_append ?b\n   (Partial_Recursive.list_encode\n     (replicate (?y - e_length ?b) 0 @ [1 - the (\\<phi> (the (s ?b)) ?y)]))\n  nxt b \\<up>\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If Step~1 finds a $y$, the hypothesis $S(b)$ is incorrect for\nthe new prefix.\\<close>"], ["", "lemma nxt_wrong_hyp:\n  assumes \"nxt b \\<down>= b'\" and \"s b \\<down>= i\"\n  shows \"\\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "obtain y where y: \"search b \\<down>= y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms nxt_diverg"], ["proof (prove)\nusing this:\n  nxt b \\<down>= b'\n  s b \\<down>= i\n  search ?b \\<up> \\<Longrightarrow> nxt ?b \\<up>\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  search b \\<down>= y\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "then"], ["proof (chain)\npicking this:\n  search b \\<down>= y", "have y_len: \"y \\<ge> e_length b\""], ["proof (prove)\nusing this:\n  search b \\<down>= y\n\ngoal (1 subgoal):\n 1. e_length b \\<le> y", "using assms search_converg(2)"], ["proof (prove)\nusing this:\n  search b \\<down>= y\n  nxt b \\<down>= b'\n  s b \\<down>= i\n  \\<lbrakk>s ?b \\<down>= ?i; search ?b \\<down>\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> the (search ?b)\n\ngoal (1 subgoal):\n 1. e_length b \\<le> y", "by fastforce"], ["proof (state)\nthis:\n  e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "then"], ["proof (chain)\npicking this:\n  e_length b \\<le> y", "have b': \"b' =\n      (e_append b (list_encode (replicate (y - e_length b) 0 @ [1 - the (\\<phi> i y)])))\""], ["proof (prove)\nusing this:\n  e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. b' =\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> i y)]))", "using y assms nxt_converg"], ["proof (prove)\nusing this:\n  e_length b \\<le> y\n  search b \\<down>= y\n  nxt b \\<down>= b'\n  s b \\<down>= i\n  search ?b \\<down>= ?y \\<Longrightarrow>\n  nxt ?b \\<down>=\n  e_append ?b\n   (Partial_Recursive.list_encode\n     (replicate (?y - e_length ?b) 0 @ [1 - the (\\<phi> (the (s ?b)) ?y)]))\n\ngoal (1 subgoal):\n 1. b' =\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> i y)]))", "by simp"], ["proof (state)\nthis:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> i y)]))\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "then"], ["proof (chain)\npicking this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> i y)]))", "have \"e_nth b' y = 1 - the (\\<phi> i y)\""], ["proof (prove)\nusing this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> i y)]))\n\ngoal (1 subgoal):\n 1. e_nth b' y = 1 - the (\\<phi> i y)", "using y_len e_nth_append_big r_badblock r_badblock_last"], ["proof (prove)\nusing this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> i y)]))\n  e_length b \\<le> y\n  e_length ?xs \\<le> ?n \\<Longrightarrow>\n  e_nth (e_append ?xs ?ys) ?n = e_nth ?ys (?n - e_length ?xs)\n  eval r_badblock [?n, ?v] \\<down>=\n  Partial_Recursive.list_encode (replicate ?n 0 @ [1 - ?v])\n  e_nth (the (eval r_badblock [?n, ?v])) ?n = 1 - ?v\n\ngoal (1 subgoal):\n 1. e_nth b' y = 1 - the (\\<phi> i y)", "by auto"], ["proof (state)\nthis:\n  e_nth b' y = 1 - the (\\<phi> i y)\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "moreover"], ["proof (state)\nthis:\n  e_nth b' y = 1 - the (\\<phi> i y)\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "have \"\\<phi> i y \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>", "using search_converg y y_len assms(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>s ?b \\<down>= ?i; search ?b \\<down>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?i (the (search ?b)) \\<down>\n  \\<lbrakk>s ?b \\<down>= ?i; search ?b \\<down>\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> the (search ?b)\n  search b \\<down>= y\n  e_length b \\<le> y\n  s b \\<down>= i\n\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>", "by fastforce"], ["proof (state)\nthis:\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "ultimately"], ["proof (chain)\npicking this:\n  e_nth b' y = 1 - the (\\<phi> i y)\n  \\<phi> i y \\<down>", "have \"\\<phi> i y \\<down>\\<noteq> e_nth b' y\""], ["proof (prove)\nusing this:\n  e_nth b' y = 1 - the (\\<phi> i y)\n  \\<phi> i y \\<down>\n\ngoal (1 subgoal):\n 1. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "by (metis gr_zeroI less_numeral_extra(4) less_one option.sel zero_less_diff)"], ["proof (state)\nthis:\n  \\<phi> i y \\<down>\\<noteq> e_nth b' y\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "moreover"], ["proof (state)\nthis:\n  \\<phi> i y \\<down>\\<noteq> e_nth b' y\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "have \"e_length b' = Suc y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length b' = Suc y", "using y_len e_length_append b'"], ["proof (prove)\nusing this:\n  e_length b \\<le> y\n  e_length (e_append ?xs ?ys) = e_length ?xs + e_length ?ys\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> i y)]))\n\ngoal (1 subgoal):\n 1. e_length b' = Suc y", "by auto"], ["proof (state)\nthis:\n  e_length b' = Suc y\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> i y \\<down>\\<noteq> e_nth b' y\n  e_length b' = Suc y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> i y \\<down>\\<noteq> e_nth b' y\n  e_length b' = Suc y\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If Step~1 diverges, the hypothesis $S(b)$ refers to a non-total\nfunction.\\<close>"], ["", "lemma nxt_nontotal_hyp:\n  assumes \"nxt b \\<up>\" and \"s b \\<down>= i\"\n  shows \"\\<exists>x. \\<phi> i x \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<phi> i x \\<up>", "using nxt_search_diverg[OF assms(1)] search_diverg[OF assms(2)]"], ["proof (prove)\nusing this:\n  search b \\<up>\n  search b \\<up> \\<Longrightarrow>\n  \\<nexists>y. \\<phi> i y \\<down> \\<and> e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<phi> i x \\<up>", "by auto"], ["", "text \\<open>The process only ever extends the given prefix.\\<close>"], ["", "lemma nxt_stable:\n  assumes \"nxt b \\<down>= b'\"\n  shows \"\\<forall>x<e_length b. e_nth b x = e_nth b' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "obtain y where y: \"search b \\<down>= y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms nxt_diverg"], ["proof (prove)\nusing this:\n  nxt b \\<down>= b'\n  search ?b \\<up> \\<Longrightarrow> nxt ?b \\<up>\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  search b \\<down>= y\n\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "then"], ["proof (chain)\npicking this:\n  search b \\<down>= y", "have \"y \\<ge> e_length b\""], ["proof (prove)\nusing this:\n  search b \\<down>= y\n\ngoal (1 subgoal):\n 1. e_length b \\<le> y", "using search_converg(2) eval_rs rs_total"], ["proof (prove)\nusing this:\n  search b \\<down>= y\n  \\<lbrakk>s ?b \\<down>= ?i; search ?b \\<down>\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> the (search ?b)\n  s ?x = eval r_s [?x]\n  eval r_s [?x] \\<down>\n\ngoal (1 subgoal):\n 1. e_length b \\<le> y", "by fastforce"], ["proof (state)\nthis:\n  e_length b \\<le> y\n\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "assume \"x < e_length b\""], ["proof (state)\nthis:\n  x < e_length b\n\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "let ?i = \"the (s b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "have b': \"b' =\n        (e_append b (list_encode (replicate (y - e_length b) 0 @ [1 - the (\\<phi> ?i y)])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b' =\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "using assms nxt_converg[OF y]"], ["proof (prove)\nusing this:\n  nxt b \\<down>= b'\n  nxt b \\<down>=\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n\ngoal (1 subgoal):\n 1. b' =\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "by auto"], ["proof (state)\nthis:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "then"], ["proof (chain)\npicking this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "show \"e_nth b x = e_nth b' x\""], ["proof (prove)\nusing this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n\ngoal (1 subgoal):\n 1. e_nth b x = e_nth b' x", "using e_nth_append_small \\<open>x < e_length b\\<close>"], ["proof (prove)\nusing this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n  ?n < e_length ?xs \\<Longrightarrow>\n  e_nth (e_append ?xs ?ys) ?n = e_nth ?xs ?n\n  x < e_length b\n\ngoal (1 subgoal):\n 1. e_nth b x = e_nth b' x", "by auto"], ["proof (state)\nthis:\n  e_nth b x = e_nth b' x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x<e_length b. e_nth b x = e_nth b' x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The following properties of @{term r_next} will be\nused to show that some of the constructed functions are in the class\n$V$.\\<close>"], ["", "lemma nxt_append_01:\n  assumes \"nxt b \\<down>= b'\"\n  shows \"\\<forall>x. x \\<ge> e_length b \\<and> x < e_length b' \\<longrightarrow>  e_nth b' x = 0 \\<or> e_nth b' x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "obtain y where y: \"search b \\<down>= y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms nxt_diverg"], ["proof (prove)\nusing this:\n  nxt b \\<down>= b'\n  search ?b \\<up> \\<Longrightarrow> nxt ?b \\<up>\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  search b \\<down>= y\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "let ?i = \"the (s b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "have b': \"b' = (e_append b (list_encode (replicate (y - e_length b) 0 @ [1 - the (\\<phi> ?i y)])))\"\n    (is \"b' = (e_append b ?z)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. b' =\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "using assms y  nxt_converg prod_encode_eq"], ["proof (prove)\nusing this:\n  nxt b \\<down>= b'\n  search b \\<down>= y\n  search ?b \\<down>= ?y \\<Longrightarrow>\n  nxt ?b \\<down>=\n  e_append ?b\n   (Partial_Recursive.list_encode\n     (replicate (?y - e_length ?b) 0 @ [1 - the (\\<phi> (the (s ?b)) ?y)]))\n  (prod_encode ?x = prod_encode ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. b' =\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "by auto"], ["proof (state)\nthis:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<Longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<Longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "assume x: \"e_length b \\<le> x \\<and> x < e_length b'\""], ["proof (state)\nthis:\n  e_length b \\<le> x \\<and> x < e_length b'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<Longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "then"], ["proof (chain)\npicking this:\n  e_length b \\<le> x \\<and> x < e_length b'", "have \"e_nth b' x = e_nth ?z (x - e_length b)\""], ["proof (prove)\nusing this:\n  e_length b \\<le> x \\<and> x < e_length b'\n\ngoal (1 subgoal):\n 1. e_nth b' x =\n    e_nth\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n     (x - e_length b)", "using b' e_nth_append_big"], ["proof (prove)\nusing this:\n  e_length b \\<le> x \\<and> x < e_length b'\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n  e_length ?xs \\<le> ?n \\<Longrightarrow>\n  e_nth (e_append ?xs ?ys) ?n = e_nth ?ys (?n - e_length ?xs)\n\ngoal (1 subgoal):\n 1. e_nth b' x =\n    e_nth\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n     (x - e_length b)", "by blast"], ["proof (state)\nthis:\n  e_nth b' x =\n  e_nth\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n   (x - e_length b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       e_length b \\<le> x \\<and> x < e_length b' \\<Longrightarrow>\n       e_nth b' x = 0 \\<or> e_nth b' x = 1", "then"], ["proof (chain)\npicking this:\n  e_nth b' x =\n  e_nth\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n   (x - e_length b)", "show \"e_nth b' x = 0 \\<or> e_nth b' x = 1\""], ["proof (prove)\nusing this:\n  e_nth b' x =\n  e_nth\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n   (x - e_length b)\n\ngoal (1 subgoal):\n 1. e_nth b' x = 0 \\<or> e_nth b' x = 1", "by (metis less_one nat_less_le option.sel r_badblock r_badblock_only_01)"], ["proof (state)\nthis:\n  e_nth b' x = 0 \\<or> e_nth b' x = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     e_length b \\<le> x \\<and> x < e_length b' \\<longrightarrow>\n     e_nth b' x = 0 \\<or> e_nth b' x = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nxt_monotone:\n  assumes \"nxt b \\<down>= b'\"\n  shows \"e_length b < e_length b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "obtain y where y: \"search b \\<down>= y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms nxt_diverg"], ["proof (prove)\nusing this:\n  nxt b \\<down>= b'\n  search ?b \\<up> \\<Longrightarrow> nxt ?b \\<up>\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        search b \\<down>= y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  search b \\<down>= y\n\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "let ?i = \"the (s b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "have b': \"b' =\n      (e_append b (list_encode (replicate (y - e_length b) 0 @ [1 - the (\\<phi> ?i y)])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b' =\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "using assms y nxt_converg prod_encode_eq"], ["proof (prove)\nusing this:\n  nxt b \\<down>= b'\n  search b \\<down>= y\n  search ?b \\<down>= ?y \\<Longrightarrow>\n  nxt ?b \\<down>=\n  e_append ?b\n   (Partial_Recursive.list_encode\n     (replicate (?y - e_length ?b) 0 @ [1 - the (\\<phi> (the (s ?b)) ?y)]))\n  (prod_encode ?x = prod_encode ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. b' =\n    e_append b\n     (Partial_Recursive.list_encode\n       (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "by auto"], ["proof (state)\nthis:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "then"], ["proof (chain)\npicking this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))", "show ?thesis"], ["proof (prove)\nusing this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "using e_length_append"], ["proof (prove)\nusing this:\n  b' =\n  e_append b\n   (Partial_Recursive.list_encode\n     (replicate (y - e_length b) 0 @ [1 - the (\\<phi> (the (s b)) y)]))\n  e_length (e_append ?xs ?ys) = e_length ?xs + e_length ?ys\n\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "by auto"], ["proof (state)\nthis:\n  e_length b < e_length b'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The next function computes the prefixes after each iteration of\nthe process @{term r_next} when started with the list $[j]$.\\<close>"], ["", "definition r_prefixes :: recf where\n  \"r_prefixes \\<equiv> Pr 1 r_singleton_encode (Cn 3 r_next [Id 3 1])\""], ["", "lemma r_prefixes_recfn [simp]: \"recfn 2 r_prefixes\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 r_prefixes", "unfolding r_prefixes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 (Pr 1 r_singleton_encode (Cn 3 r_next [recf.Id 3 1]))", "by (simp add: Let_def)"], ["", "abbreviation prefixes :: partial2 where\n  \"prefixes t j \\<equiv> eval r_prefixes [t, j]\""], ["", "lemma prefixes_at_0: \"prefixes 0 j \\<down>= list_encode [j]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes 0 j \\<down>= singleton_encode j", "unfolding r_prefixes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Pr 1 r_singleton_encode (Cn 3 r_next [recf.Id 3 1]))\n     [0, j] \\<down>=\n    singleton_encode j", "by simp"], ["", "lemma prefixes_at_Suc:\n  assumes \"prefixes t j \\<down>\" (is \"?b \\<down>\")\n  shows \"prefixes (Suc t) j = nxt (the ?b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes (Suc t) j = nxt (the (local.prefixes t j))", "using r_prefixes_def assms"], ["proof (prove)\nusing this:\n  r_prefixes \\<equiv> Pr 1 r_singleton_encode (Cn 3 r_next [recf.Id 3 1])\n  local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. local.prefixes (Suc t) j = nxt (the (local.prefixes t j))", "by auto"], ["", "lemma prefixes_at_Suc':\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"prefixes (Suc t) j = nxt b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes (Suc t) j = nxt b", "using r_prefixes_def assms"], ["proof (prove)\nusing this:\n  r_prefixes \\<equiv> Pr 1 r_singleton_encode (Cn 3 r_next [recf.Id 3 1])\n  local.prefixes t j \\<down>= b\n\ngoal (1 subgoal):\n 1. local.prefixes (Suc t) j = nxt b", "by auto"], ["", "lemma prefixes_prod_encode:\n  assumes \"prefixes t j \\<down>\"\n  obtains b where \"prefixes t j \\<down>= b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        local.prefixes t j \\<down>= b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms surj_prod_encode"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>\n  surj prod_encode\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        local.prefixes t j \\<down>= b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["", "lemma prefixes_converg_le:\n  assumes \"prefixes t j \\<down>\" and \"t' \\<le> t\"\n  shows \"prefixes t' j \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes t' j \\<down>", "using r_prefixes_def assms eval_Pr_converg_le[of 1 _ _ \"[j]\"]"], ["proof (prove)\nusing this:\n  r_prefixes \\<equiv> Pr 1 r_singleton_encode (Cn 3 r_next [recf.Id 3 1])\n  local.prefixes t j \\<down>\n  t' \\<le> t\n  \\<lbrakk>recfn (Suc 1) (Pr 1 ?f ?g); 1 = length [j];\n   eval (Pr 1 ?f ?g) [?x, j] \\<down>; ?y \\<le> ?x\\<rbrakk>\n  \\<Longrightarrow> eval (Pr 1 ?f ?g) [?y, j] \\<down>\n\ngoal (1 subgoal):\n 1. local.prefixes t' j \\<down>", "by simp"], ["", "lemma prefixes_diverg_add:\n  assumes \"prefixes t j \\<up>\"\n  shows \"prefixes (t + d) j \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes (t + d) j \\<up>", "using r_prefixes_def assms eval_Pr_diverg_add[of 1 _ _ \"[j]\"]"], ["proof (prove)\nusing this:\n  r_prefixes \\<equiv> Pr 1 r_singleton_encode (Cn 3 r_next [recf.Id 3 1])\n  local.prefixes t j \\<up>\n  \\<lbrakk>recfn (Suc 1) (Pr 1 ?f ?g); 1 = length [j];\n   eval (Pr 1 ?f ?g) [?x, j] \\<up>\\<rbrakk>\n  \\<Longrightarrow> eval (Pr 1 ?f ?g) [?x + ?y, j] \\<up>\n\ngoal (1 subgoal):\n 1. local.prefixes (t + d) j \\<up>", "by simp"], ["", "text \\<open>Many properties of @{term r_prefixes} can be derived from similar\nproperties of @{term r_next}.\\<close>"], ["", "lemma prefixes_length:\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"e_length b > t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < e_length b", "proof (insert assms, induction t arbitrary: b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b. local.prefixes 0 j \\<down>= b \\<Longrightarrow> 0 < e_length b\n 2. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "case 0"], ["proof (state)\nthis:\n  local.prefixes 0 j \\<down>= b\n\ngoal (2 subgoals):\n 1. \\<And>b. local.prefixes 0 j \\<down>= b \\<Longrightarrow> 0 < e_length b\n 2. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "then"], ["proof (chain)\npicking this:\n  local.prefixes 0 j \\<down>= b", "show ?case"], ["proof (prove)\nusing this:\n  local.prefixes 0 j \\<down>= b\n\ngoal (1 subgoal):\n 1. 0 < e_length b", "using prefixes_at_0 prod_encode_eq"], ["proof (prove)\nusing this:\n  local.prefixes 0 j \\<down>= b\n  local.prefixes 0 ?j \\<down>= singleton_encode ?j\n  (prod_encode ?x = prod_encode ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. 0 < e_length b", "by auto"], ["proof (state)\nthis:\n  0 < e_length b\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "case (Suc t)"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow> t < e_length ?b\n  local.prefixes (Suc t) j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "then"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow> t < e_length ?b\n  local.prefixes (Suc t) j \\<down>= b", "have \"prefixes t j \\<down>\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow> t < e_length ?b\n  local.prefixes (Suc t) j \\<down>= b\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down>", "using prefixes_converg_le Suc_n_not_le_n nat_le_linear"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow> t < e_length ?b\n  local.prefixes (Suc t) j \\<down>= b\n  \\<lbrakk>local.prefixes ?t ?j \\<down>; ?t' \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> local.prefixes ?t' ?j \\<down>\n  \\<not> Suc ?n \\<le> ?n\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down>", "by blast"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "then"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>", "obtain b' where b': \"prefixes t j \\<down>= b'\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        local.prefixes t j \\<down>= b' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prefixes_prod_encode"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>\n  \\<lbrakk>local.prefixes ?t ?j \\<down>;\n   \\<And>b.\n      local.prefixes ?t ?j \\<down>= b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        local.prefixes t j \\<down>= b' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "with Suc"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow> t < e_length ?b\n  local.prefixes (Suc t) j \\<down>= b\n  local.prefixes t j \\<down>= b'", "have \"e_length b' > t\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow> t < e_length ?b\n  local.prefixes (Suc t) j \\<down>= b\n  local.prefixes t j \\<down>= b'\n\ngoal (1 subgoal):\n 1. t < e_length b'", "by simp"], ["proof (state)\nthis:\n  t < e_length b'\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "have \"prefixes (Suc t) j = nxt b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes (Suc t) j = nxt b'", "using b' prefixes_at_Suc'"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b'\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow>\n  local.prefixes (Suc ?t) ?j = nxt ?b\n\ngoal (1 subgoal):\n 1. local.prefixes (Suc t) j = nxt b'", "by simp"], ["proof (state)\nthis:\n  local.prefixes (Suc t) j = nxt b'\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "with Suc"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow> t < e_length ?b\n  local.prefixes (Suc t) j \\<down>= b\n  local.prefixes (Suc t) j = nxt b'", "have \"nxt b' \\<down>= b\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow> t < e_length ?b\n  local.prefixes (Suc t) j \\<down>= b\n  local.prefixes (Suc t) j = nxt b'\n\ngoal (1 subgoal):\n 1. nxt b' \\<down>= b", "by simp"], ["proof (state)\nthis:\n  nxt b' \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "then"], ["proof (chain)\npicking this:\n  nxt b' \\<down>= b", "have \"e_length b' < e_length b\""], ["proof (prove)\nusing this:\n  nxt b' \\<down>= b\n\ngoal (1 subgoal):\n 1. e_length b' < e_length b", "using nxt_monotone"], ["proof (prove)\nusing this:\n  nxt b' \\<down>= b\n  nxt ?b \\<down>= ?b' \\<Longrightarrow> e_length ?b < e_length ?b'\n\ngoal (1 subgoal):\n 1. e_length b' < e_length b", "by simp"], ["proof (state)\nthis:\n  e_length b' < e_length b\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   t < e_length b;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> Suc t < e_length b", "then"], ["proof (chain)\npicking this:\n  e_length b' < e_length b", "show ?case"], ["proof (prove)\nusing this:\n  e_length b' < e_length b\n\ngoal (1 subgoal):\n 1. Suc t < e_length b", "using \\<open>e_length b' > t\\<close>"], ["proof (prove)\nusing this:\n  e_length b' < e_length b\n  t < e_length b'\n\ngoal (1 subgoal):\n 1. Suc t < e_length b", "by simp"], ["proof (state)\nthis:\n  Suc t < e_length b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixes_monotone:\n  assumes \"prefixes t j \\<down>= b\" and \"prefixes (t + d) j \\<down>= b'\"\n  shows \"e_length b \\<le> e_length b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length b \\<le> e_length b'", "proof (insert assms, induction d arbitrary: b')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b'.\n       \\<lbrakk>local.prefixes t j \\<down>= b;\n        local.prefixes (t + 0) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'\n 2. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "case 0"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + 0) j \\<down>= b'\n\ngoal (2 subgoals):\n 1. \\<And>b'.\n       \\<lbrakk>local.prefixes t j \\<down>= b;\n        local.prefixes (t + 0) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'\n 2. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "then"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + 0) j \\<down>= b'", "show ?case"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + 0) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. e_length b \\<le> e_length b'", "using prod_encode_eq"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + 0) j \\<down>= b'\n  (prod_encode ?x = prod_encode ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. e_length b \\<le> e_length b'", "by simp"], ["proof (state)\nthis:\n  e_length b \\<le> e_length b'\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "case (Suc d)"], ["proof (state)\nthis:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "have \"t + d \\<le> t + Suc d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t + d \\<le> t + Suc d", "by simp"], ["proof (state)\nthis:\n  t + d \\<le> t + Suc d\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  t + d \\<le> t + Suc d", "have \"prefixes (t + d) j \\<down>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  t + d \\<le> t + Suc d\n\ngoal (1 subgoal):\n 1. local.prefixes (t + d) j \\<down>", "using prefixes_converg_le"], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  t + d \\<le> t + Suc d\n  \\<lbrakk>local.prefixes ?t ?j \\<down>; ?t' \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> local.prefixes ?t' ?j \\<down>\n\ngoal (1 subgoal):\n 1. local.prefixes (t + d) j \\<down>", "by blast"], ["proof (state)\nthis:\n  local.prefixes (t + d) j \\<down>\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "then"], ["proof (chain)\npicking this:\n  local.prefixes (t + d) j \\<down>", "obtain b'' where b'': \"prefixes (t + d) j \\<down>= b''\""], ["proof (prove)\nusing this:\n  local.prefixes (t + d) j \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>b''.\n        local.prefixes (t + d) j \\<down>= b'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prefixes_prod_encode"], ["proof (prove)\nusing this:\n  local.prefixes (t + d) j \\<down>\n  \\<lbrakk>local.prefixes ?t ?j \\<down>;\n   \\<And>b.\n      local.prefixes ?t ?j \\<down>= b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>b''.\n        local.prefixes (t + d) j \\<down>= b'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  local.prefixes (t + d) j \\<down>= b''\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "with Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + d) j \\<down>= b''", "have \"prefixes (t + Suc d) j = nxt b''\""], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + d) j \\<down>= b''\n\ngoal (1 subgoal):\n 1. local.prefixes (t + Suc d) j = nxt b''", "by (simp add: prefixes_at_Suc')"], ["proof (state)\nthis:\n  local.prefixes (t + Suc d) j = nxt b''\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "with Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + Suc d) j = nxt b''", "have \"nxt b'' \\<down>= b'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + Suc d) j = nxt b''\n\ngoal (1 subgoal):\n 1. nxt b'' \\<down>= b'", "by simp"], ["proof (state)\nthis:\n  nxt b'' \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> e_length b \\<le> e_length b';\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> e_length b \\<le> e_length b'", "then"], ["proof (chain)\npicking this:\n  nxt b'' \\<down>= b'", "show ?case"], ["proof (prove)\nusing this:\n  nxt b'' \\<down>= b'\n\ngoal (1 subgoal):\n 1. e_length b \\<le> e_length b'", "using nxt_monotone Suc b''"], ["proof (prove)\nusing this:\n  nxt b'' \\<down>= b'\n  nxt ?b \\<down>= ?b' \\<Longrightarrow> e_length ?b < e_length ?b'\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + d) j \\<down>= b''\n\ngoal (1 subgoal):\n 1. e_length b \\<le> e_length b'", "by fastforce"], ["proof (state)\nthis:\n  e_length b \\<le> e_length b'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixes_stable:\n  assumes \"prefixes t j \\<down>= b\" and \"prefixes (t + d) j \\<down>= b'\"\n  shows \"\\<forall>x<e_length b. e_nth b x = e_nth b' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "proof (insert assms, induction d arbitrary: b')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b'.\n       \\<lbrakk>local.prefixes t j \\<down>= b;\n        local.prefixes (t + 0) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x\n 2. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "case 0"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + 0) j \\<down>= b'\n\ngoal (2 subgoals):\n 1. \\<And>b'.\n       \\<lbrakk>local.prefixes t j \\<down>= b;\n        local.prefixes (t + 0) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x\n 2. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "then"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + 0) j \\<down>= b'", "show ?case"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + 0) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "using prod_encode_eq"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + 0) j \\<down>= b'\n  (prod_encode ?x = prod_encode ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "by simp"], ["proof (state)\nthis:\n  \\<forall>x<e_length b. e_nth b x = e_nth b' x\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "case (Suc d)"], ["proof (state)\nthis:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "have \"t + d \\<le> t + Suc d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t + d \\<le> t + Suc d", "by simp"], ["proof (state)\nthis:\n  t + d \\<le> t + Suc d\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  t + d \\<le> t + Suc d", "have \"prefixes (t + d) j \\<down>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  t + d \\<le> t + Suc d\n\ngoal (1 subgoal):\n 1. local.prefixes (t + d) j \\<down>", "using prefixes_converg_le"], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  t + d \\<le> t + Suc d\n  \\<lbrakk>local.prefixes ?t ?j \\<down>; ?t' \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> local.prefixes ?t' ?j \\<down>\n\ngoal (1 subgoal):\n 1. local.prefixes (t + d) j \\<down>", "by blast"], ["proof (state)\nthis:\n  local.prefixes (t + d) j \\<down>\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "then"], ["proof (chain)\npicking this:\n  local.prefixes (t + d) j \\<down>", "obtain b'' where b'': \"prefixes (t + d) j \\<down>= b''\""], ["proof (prove)\nusing this:\n  local.prefixes (t + d) j \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>b''.\n        local.prefixes (t + d) j \\<down>= b'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prefixes_prod_encode"], ["proof (prove)\nusing this:\n  local.prefixes (t + d) j \\<down>\n  \\<lbrakk>local.prefixes ?t ?j \\<down>;\n   \\<And>b.\n      local.prefixes ?t ?j \\<down>= b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>b''.\n        local.prefixes (t + d) j \\<down>= b'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  local.prefixes (t + d) j \\<down>= b''\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "with Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + d) j \\<down>= b''", "have \"prefixes (t + Suc d) j = nxt b''\""], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + d) j \\<down>= b''\n\ngoal (1 subgoal):\n 1. local.prefixes (t + Suc d) j = nxt b''", "by (simp add: prefixes_at_Suc')"], ["proof (state)\nthis:\n  local.prefixes (t + Suc d) j = nxt b''\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "with Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + Suc d) j = nxt b''", "have b': \"nxt b'' \\<down>= b'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + Suc d) j = nxt b''\n\ngoal (1 subgoal):\n 1. nxt b'' \\<down>= b'", "by simp"], ["proof (state)\nthis:\n  nxt b'' \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<And>d b'.\n       \\<lbrakk>\\<And>b'.\n                   \\<lbrakk>local.prefixes t j \\<down>= b;\n                    local.prefixes (t + d) j \\<down>= b'\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x<e_length b.\n  e_nth b x = e_nth b' x;\n        local.prefixes t j \\<down>= b;\n        local.prefixes (t + Suc d) j \\<down>= b'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth b' x", "show \"\\<forall>x<e_length b. e_nth b x = e_nth b' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x<e_length b. e_nth b x = e_nth b' x", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "assume x: \"x < e_length b\""], ["proof (state)\nthis:\n  x < e_length b\n\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "then"], ["proof (chain)\npicking this:\n  x < e_length b", "have \"e_nth b x = e_nth b'' x\""], ["proof (prove)\nusing this:\n  x < e_length b\n\ngoal (1 subgoal):\n 1. e_nth b x = e_nth b'' x", "using Suc b''"], ["proof (prove)\nusing this:\n  x < e_length b\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  local.prefixes (t + d) j \\<down>= b''\n\ngoal (1 subgoal):\n 1. e_nth b x = e_nth b'' x", "by simp"], ["proof (state)\nthis:\n  e_nth b x = e_nth b'' x\n\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "moreover"], ["proof (state)\nthis:\n  e_nth b x = e_nth b'' x\n\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "have \"x \\<le> e_length b''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> e_length b''", "using x prefixes_monotone b'' Suc"], ["proof (prove)\nusing this:\n  x < e_length b\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b;\n   local.prefixes (?t + ?d) ?j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> e_length ?b'\n  local.prefixes (t + d) j \\<down>= b''\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. x \\<le> e_length b''", "by fastforce"], ["proof (state)\nthis:\n  x \\<le> e_length b''\n\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> e_nth b x = e_nth b' x", "ultimately"], ["proof (chain)\npicking this:\n  e_nth b x = e_nth b'' x\n  x \\<le> e_length b''", "show \"e_nth b x = e_nth b' x\""], ["proof (prove)\nusing this:\n  e_nth b x = e_nth b'' x\n  x \\<le> e_length b''\n\ngoal (1 subgoal):\n 1. e_nth b x = e_nth b' x", "using b'' nxt_stable Suc b' prefixes_monotone x"], ["proof (prove)\nusing this:\n  e_nth b x = e_nth b'' x\n  x \\<le> e_length b''\n  local.prefixes (t + d) j \\<down>= b''\n  nxt ?b \\<down>= ?b' \\<Longrightarrow>\n  \\<forall>x<e_length ?b. e_nth ?b x = e_nth ?b' x\n  \\<lbrakk>local.prefixes t j \\<down>= b;\n   local.prefixes (t + d) j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b. e_nth b x = e_nth ?b' x\n  local.prefixes t j \\<down>= b\n  local.prefixes (t + Suc d) j \\<down>= b'\n  nxt b'' \\<down>= b'\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b;\n   local.prefixes (?t + ?d) ?j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> e_length ?b'\n  x < e_length b\n\ngoal (1 subgoal):\n 1. e_nth b x = e_nth b' x", "by (metis leD le_neq_implies_less)"], ["proof (state)\nthis:\n  e_nth b x = e_nth b' x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x<e_length b. e_nth b x = e_nth b' x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixes_tl_only_01:\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"\\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "proof (insert assms, induction t arbitrary: b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b.\n       local.prefixes 0 j \\<down>= b \\<Longrightarrow>\n       \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1\n 2. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "case 0"], ["proof (state)\nthis:\n  local.prefixes 0 j \\<down>= b\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       local.prefixes 0 j \\<down>= b \\<Longrightarrow>\n       \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1\n 2. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "then"], ["proof (chain)\npicking this:\n  local.prefixes 0 j \\<down>= b", "show ?case"], ["proof (prove)\nusing this:\n  local.prefixes 0 j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "using prefixes_at_0 prod_encode_eq"], ["proof (prove)\nusing this:\n  local.prefixes 0 j \\<down>= b\n  local.prefixes 0 ?j \\<down>= singleton_encode ?j\n  (prod_encode ?x = prod_encode ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "by auto"], ["proof (state)\nthis:\n  \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "case (Suc t)"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow>\n  \\<forall>x>0. e_nth ?b x = 0 \\<or> e_nth ?b x = 1\n  local.prefixes (Suc t) j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "then"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow>\n  \\<forall>x>0. e_nth ?b x = 0 \\<or> e_nth ?b x = 1\n  local.prefixes (Suc t) j \\<down>= b", "have \"prefixes t j \\<down>\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow>\n  \\<forall>x>0. e_nth ?b x = 0 \\<or> e_nth ?b x = 1\n  local.prefixes (Suc t) j \\<down>= b\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down>", "using prefixes_converg_le Suc_n_not_le_n nat_le_linear"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow>\n  \\<forall>x>0. e_nth ?b x = 0 \\<or> e_nth ?b x = 1\n  local.prefixes (Suc t) j \\<down>= b\n  \\<lbrakk>local.prefixes ?t ?j \\<down>; ?t' \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> local.prefixes ?t' ?j \\<down>\n  \\<not> Suc ?n \\<le> ?n\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down>", "by blast"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "then"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>", "obtain b' where b': \"prefixes t j \\<down>= b'\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        local.prefixes t j \\<down>= b' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prefixes_prod_encode"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>\n  \\<lbrakk>local.prefixes ?t ?j \\<down>;\n   \\<And>b.\n      local.prefixes ?t ?j \\<down>= b \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        local.prefixes t j \\<down>= b' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<And>t b.\n       \\<lbrakk>\\<And>b.\n                   local.prefixes t j \\<down>= b \\<Longrightarrow>\n                   \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1;\n        local.prefixes (Suc t) j \\<down>= b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "show \"\\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. 0 < x \\<Longrightarrow> e_nth b x = 0 \\<or> e_nth b x = 1", "fix x :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. 0 < x \\<Longrightarrow> e_nth b x = 0 \\<or> e_nth b x = 1", "assume x: \"x > 0\""], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<And>x. 0 < x \\<Longrightarrow> e_nth b x = 0 \\<or> e_nth b x = 1", "show \"e_nth b x = 0 \\<or> e_nth b x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth b x = 0 \\<or> e_nth b x = 1", "proof (cases \"x < e_length b'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x < e_length b' \\<Longrightarrow> e_nth b x = 0 \\<or> e_nth b x = 1\n 2. \\<not> x < e_length b' \\<Longrightarrow>\n    e_nth b x = 0 \\<or> e_nth b x = 1", "case True"], ["proof (state)\nthis:\n  x < e_length b'\n\ngoal (2 subgoals):\n 1. x < e_length b' \\<Longrightarrow> e_nth b x = 0 \\<or> e_nth b x = 1\n 2. \\<not> x < e_length b' \\<Longrightarrow>\n    e_nth b x = 0 \\<or> e_nth b x = 1", "then"], ["proof (chain)\npicking this:\n  x < e_length b'", "show ?thesis"], ["proof (prove)\nusing this:\n  x < e_length b'\n\ngoal (1 subgoal):\n 1. e_nth b x = 0 \\<or> e_nth b x = 1", "using Suc b' prefixes_at_Suc' nxt_stable x"], ["proof (prove)\nusing this:\n  x < e_length b'\n  local.prefixes t j \\<down>= ?b \\<Longrightarrow>\n  \\<forall>x>0. e_nth ?b x = 0 \\<or> e_nth ?b x = 1\n  local.prefixes (Suc t) j \\<down>= b\n  local.prefixes t j \\<down>= b'\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow>\n  local.prefixes (Suc ?t) ?j = nxt ?b\n  nxt ?b \\<down>= ?b' \\<Longrightarrow>\n  \\<forall>x<e_length ?b. e_nth ?b x = e_nth ?b' x\n  0 < x\n\ngoal (1 subgoal):\n 1. e_nth b x = 0 \\<or> e_nth b x = 1", "by metis"], ["proof (state)\nthis:\n  e_nth b x = 0 \\<or> e_nth b x = 1\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b' \\<Longrightarrow>\n    e_nth b x = 0 \\<or> e_nth b x = 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < e_length b' \\<Longrightarrow>\n    e_nth b x = 0 \\<or> e_nth b x = 1", "case False"], ["proof (state)\nthis:\n  \\<not> x < e_length b'\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b' \\<Longrightarrow>\n    e_nth b x = 0 \\<or> e_nth b x = 1", "then"], ["proof (chain)\npicking this:\n  \\<not> x < e_length b'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x < e_length b'\n\ngoal (1 subgoal):\n 1. e_nth b x = 0 \\<or> e_nth b x = 1", "using Suc.prems b' prefixes_at_Suc' nxt_append_01"], ["proof (prove)\nusing this:\n  \\<not> x < e_length b'\n  local.prefixes (Suc t) j \\<down>= b\n  local.prefixes t j \\<down>= b'\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow>\n  local.prefixes (Suc ?t) ?j = nxt ?b\n  nxt ?b \\<down>= ?b' \\<Longrightarrow>\n  \\<forall>x.\n     e_length ?b \\<le> x \\<and> x < e_length ?b' \\<longrightarrow>\n     e_nth ?b' x = 0 \\<or> e_nth ?b' x = 1\n\ngoal (1 subgoal):\n 1. e_nth b x = 0 \\<or> e_nth b x = 1", "by auto"], ["proof (state)\nthis:\n  e_nth b x = 0 \\<or> e_nth b x = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e_nth b x = 0 \\<or> e_nth b x = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixes_hd:\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"e_nth b 0 = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth b 0 = j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e_nth b 0 = j", "obtain b' where b': \"prefixes 0 j \\<down>= b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        local.prefixes 0 j \\<down>= b' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: prefixes_at_0)"], ["proof (state)\nthis:\n  local.prefixes 0 j \\<down>= b'\n\ngoal (1 subgoal):\n 1. e_nth b 0 = j", "then"], ["proof (chain)\npicking this:\n  local.prefixes 0 j \\<down>= b'", "have \"b' = list_encode [j]\""], ["proof (prove)\nusing this:\n  local.prefixes 0 j \\<down>= b'\n\ngoal (1 subgoal):\n 1. b' = singleton_encode j", "by (simp add: prod_encode_eq prefixes_at_0)"], ["proof (state)\nthis:\n  b' = singleton_encode j\n\ngoal (1 subgoal):\n 1. e_nth b 0 = j", "then"], ["proof (chain)\npicking this:\n  b' = singleton_encode j", "have \"e_nth b' 0 = j\""], ["proof (prove)\nusing this:\n  b' = singleton_encode j\n\ngoal (1 subgoal):\n 1. e_nth b' 0 = j", "by simp"], ["proof (state)\nthis:\n  e_nth b' 0 = j\n\ngoal (1 subgoal):\n 1. e_nth b 0 = j", "then"], ["proof (chain)\npicking this:\n  e_nth b' 0 = j", "show \"e_nth b 0 = j\""], ["proof (prove)\nusing this:\n  e_nth b' 0 = j\n\ngoal (1 subgoal):\n 1. e_nth b 0 = j", "using assms prefixes_stable[OF b', of t b] prefixes_length[OF b']"], ["proof (prove)\nusing this:\n  e_nth b' 0 = j\n  local.prefixes t j \\<down>= b\n  local.prefixes (0 + t) j \\<down>= b \\<Longrightarrow>\n  \\<forall>x<e_length b'. e_nth b' x = e_nth b x\n  0 < e_length b'\n\ngoal (1 subgoal):\n 1. e_nth b 0 = j", "by simp"], ["proof (state)\nthis:\n  e_nth b 0 = j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixes_nontotal_hyp:\n  assumes \"prefixes t j \\<down>= b\"\n    and \"prefixes (Suc t) j \\<up>\"\n    and \"s b \\<down>= i\"\n  shows \"\\<exists>x. \\<phi> i x \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<phi> i x \\<up>", "using nxt_nontotal_hyp[OF _ assms(3)] assms(2) prefixes_at_Suc'[OF assms(1)]"], ["proof (prove)\nusing this:\n  nxt b \\<up> \\<Longrightarrow> \\<exists>x. \\<phi> i x \\<up>\n  local.prefixes (Suc t) j \\<up>\n  local.prefixes (Suc t) j = nxt b\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<phi> i x \\<up>", "by simp"], ["", "text \\<open>We now consider the two cases from the proof sketch.\\<close>"], ["", "abbreviation \"case_two j \\<equiv> \\<exists>t. prefixes t j \\<up>\""], ["", "abbreviation \"case_one j \\<equiv> \\<not> case_two j\""], ["", "text \\<open>In Case~2 there is a maximum convergent iteration because\niteration 0 converges.\\<close>"], ["", "lemma case_two:\n  assumes \"case_two j\"\n  shows \"\\<exists>t. (\\<forall>t'\\<le>t. prefixes t' j \\<down>) \\<and> (\\<forall>t'>t. prefixes t' j \\<up>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "let ?P = \"\\<lambda>t. prefixes t j \\<up>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "define t\\<^sub>0 where \"t\\<^sub>0 = Least ?P\""], ["proof (state)\nthis:\n  t\\<^sub>0 = (LEAST t. local.prefixes t j \\<up>)\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "then"], ["proof (chain)\npicking this:\n  t\\<^sub>0 = (LEAST t. local.prefixes t j \\<up>)", "have \"?P t\\<^sub>0\""], ["proof (prove)\nusing this:\n  t\\<^sub>0 = (LEAST t. local.prefixes t j \\<up>)\n\ngoal (1 subgoal):\n 1. local.prefixes t\\<^sub>0 j \\<up>", "using assms LeastI_ex[of ?P]"], ["proof (prove)\nusing this:\n  t\\<^sub>0 = (LEAST t. local.prefixes t j \\<up>)\n  \\<exists>t. local.prefixes t j \\<up>\n  \\<exists>x. local.prefixes x j \\<up> \\<Longrightarrow>\n  local.prefixes (LEAST t. local.prefixes t j \\<up>) j \\<up>\n\ngoal (1 subgoal):\n 1. local.prefixes t\\<^sub>0 j \\<up>", "by simp"], ["proof (state)\nthis:\n  local.prefixes t\\<^sub>0 j \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "then"], ["proof (chain)\npicking this:\n  local.prefixes t\\<^sub>0 j \\<up>", "have diverg: \"?P t\" if \"t \\<ge> t\\<^sub>0\" for t"], ["proof (prove)\nusing this:\n  local.prefixes t\\<^sub>0 j \\<up>\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<up>", "using prefixes_converg_le that"], ["proof (prove)\nusing this:\n  local.prefixes t\\<^sub>0 j \\<up>\n  \\<lbrakk>local.prefixes ?t ?j \\<down>; ?t' \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> local.prefixes ?t' ?j \\<down>\n  t\\<^sub>0 \\<le> t\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<up>", "by blast"], ["proof (state)\nthis:\n  t\\<^sub>0 \\<le> ?t \\<Longrightarrow> local.prefixes ?t j \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "from t\\<^sub>0_def"], ["proof (chain)\npicking this:\n  t\\<^sub>0 = (LEAST t. local.prefixes t j \\<up>)", "have converg: \"\\<not> ?P t\" if \"t < t\\<^sub>0\" for t"], ["proof (prove)\nusing this:\n  t\\<^sub>0 = (LEAST t. local.prefixes t j \\<up>)\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down>", "using Least_le[of ?P] that not_less"], ["proof (prove)\nusing this:\n  t\\<^sub>0 = (LEAST t. local.prefixes t j \\<up>)\n  local.prefixes ?k j \\<up> \\<Longrightarrow>\n  (LEAST x. local.prefixes x j \\<up>) \\<le> ?k\n  t < t\\<^sub>0\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down>", "by blast"], ["proof (state)\nthis:\n  ?t < t\\<^sub>0 \\<Longrightarrow> local.prefixes ?t j \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "have \"t\\<^sub>0 > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t\\<^sub>0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < t\\<^sub>0 \\<Longrightarrow> False", "assume \"\\<not> 0 < t\\<^sub>0\""], ["proof (state)\nthis:\n  \\<not> 0 < t\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < t\\<^sub>0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> 0 < t\\<^sub>0", "have \"t\\<^sub>0 = 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 < t\\<^sub>0\n\ngoal (1 subgoal):\n 1. t\\<^sub>0 = 0", "by simp"], ["proof (state)\nthis:\n  t\\<^sub>0 = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < t\\<^sub>0 \\<Longrightarrow> False", "with \\<open>?P t\\<^sub>0\\<close> prefixes_at_0"], ["proof (chain)\npicking this:\n  local.prefixes t\\<^sub>0 j \\<up>\n  local.prefixes 0 ?j \\<down>= singleton_encode ?j\n  t\\<^sub>0 = 0", "show False"], ["proof (prove)\nusing this:\n  local.prefixes t\\<^sub>0 j \\<up>\n  local.prefixes 0 ?j \\<down>= singleton_encode ?j\n  t\\<^sub>0 = 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < t\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "let ?t = \"t\\<^sub>0 - 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "have \"\\<forall>t'\\<le>?t. prefixes t' j \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t'\\<le>t\\<^sub>0 - 1. local.prefixes t' j \\<down>", "using converg \\<open>0 < t\\<^sub>0\\<close>"], ["proof (prove)\nusing this:\n  ?t < t\\<^sub>0 \\<Longrightarrow> local.prefixes ?t j \\<down>\n  0 < t\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<forall>t'\\<le>t\\<^sub>0 - 1. local.prefixes t' j \\<down>", "by auto"], ["proof (state)\nthis:\n  \\<forall>t'\\<le>t\\<^sub>0 - 1. local.prefixes t' j \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "moreover"], ["proof (state)\nthis:\n  \\<forall>t'\\<le>t\\<^sub>0 - 1. local.prefixes t' j \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "have \"\\<forall>t'>?t. prefixes t' j \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t'>t\\<^sub>0 - 1. local.prefixes t' j \\<up>", "using diverg"], ["proof (prove)\nusing this:\n  t\\<^sub>0 \\<le> ?t \\<Longrightarrow> local.prefixes ?t j \\<up>\n\ngoal (1 subgoal):\n 1. \\<forall>t'>t\\<^sub>0 - 1. local.prefixes t' j \\<up>", "by simp"], ["proof (state)\nthis:\n  \\<forall>t'>t\\<^sub>0 - 1. local.prefixes t' j \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>t'\\<le>t\\<^sub>0 - 1. local.prefixes t' j \\<down>\n  \\<forall>t'>t\\<^sub>0 - 1. local.prefixes t' j \\<up>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t'\\<le>t\\<^sub>0 - 1. local.prefixes t' j \\<down>\n  \\<forall>t'>t\\<^sub>0 - 1. local.prefixes t' j \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n       (\\<forall>t'>t. local.prefixes t' j \\<up>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>t.\n     (\\<forall>t'\\<le>t. local.prefixes t' j \\<down>) \\<and>\n     (\\<forall>t'>t. local.prefixes t' j \\<up>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Having completed the modelling of the process, we can now define\nthe functions $\\psi_j$ it computes. The value $\\psi_j(x)$ is computed by\nrunning @{term r_prefixes} until the prefix is longer than $x$ and then\ntaking the $x$-th element of the prefix.\\<close>"], ["", "definition \"r_psi \\<equiv>\n  let f = Cn 3 r_less [Id 3 2, Cn 3 r_length [Cn 3 r_prefixes [Id 3 0, Id 3 1]]]\n  in Cn 2 r_nth [Cn 2 r_prefixes [Mn 2 f, Id 2 0], Id 2 1]\""], ["", "lemma r_psi_recfn: \"recfn 2 r_psi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 r_psi", "unfolding r_psi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2\n     (let f = Cn 3 r_less\n               [recf.Id 3 2,\n                Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]\n      in Cn 2 r_nth [Cn 2 r_prefixes [Mn 2 f, recf.Id 2 0], recf.Id 2 1])", "by simp"], ["", "abbreviation psi :: partial2 (\"\\<psi>\") where\n  \"\\<psi> j x \\<equiv> eval r_psi [j, x]\""], ["", "lemma psi_in_P2: \"\\<psi> \\<in> \\<P>\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2", "using r_psi_recfn"], ["proof (prove)\nusing this:\n  recfn 2 r_psi\n\ngoal (1 subgoal):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2", "by auto"], ["", "text \\<open>The values of @{term \"\\<psi>\"} can be read off the prefixes.\\<close>"], ["", "lemma psi_eq_nth_prefix:\n  assumes \"prefixes t j \\<down>= b\" and \"e_length b > x\"\n  shows \"\\<psi> j x \\<down>= e_nth b x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "let ?f = \"Cn 3 r_less [Id 3 2, Cn 3 r_length [Cn 3 r_prefixes [Id 3 0, Id 3 1]]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "let ?P = \"\\<lambda>t. prefixes t j \\<down> \\<and> e_length (the (prefixes t j)) > x\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "from assms"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= b\n  x < e_length b", "have ex_t: \"\\<exists>t. ?P t\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  x < e_length b\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       local.prefixes t j \\<down> \\<and>\n       x < e_length (the (local.prefixes t j))", "by auto"], ["proof (state)\nthis:\n  \\<exists>t.\n     local.prefixes t j \\<down> \\<and>\n     x < e_length (the (local.prefixes t j))\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "define t\\<^sub>0 where \"t\\<^sub>0 = Least ?P\""], ["proof (state)\nthis:\n  t\\<^sub>0 =\n  (LEAST t.\n      local.prefixes t j \\<down> \\<and>\n      x < e_length (the (local.prefixes t j)))\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "then"], ["proof (chain)\npicking this:\n  t\\<^sub>0 =\n  (LEAST t.\n      local.prefixes t j \\<down> \\<and>\n      x < e_length (the (local.prefixes t j)))", "have \"?P t\\<^sub>0\""], ["proof (prove)\nusing this:\n  t\\<^sub>0 =\n  (LEAST t.\n      local.prefixes t j \\<down> \\<and>\n      x < e_length (the (local.prefixes t j)))\n\ngoal (1 subgoal):\n 1. local.prefixes t\\<^sub>0 j \\<down> \\<and>\n    x < e_length (the (local.prefixes t\\<^sub>0 j))", "using LeastI_ex[OF ex_t]"], ["proof (prove)\nusing this:\n  t\\<^sub>0 =\n  (LEAST t.\n      local.prefixes t j \\<down> \\<and>\n      x < e_length (the (local.prefixes t j)))\n  local.prefixes\n   (LEAST t.\n       local.prefixes t j \\<down> \\<and>\n       x < e_length (the (local.prefixes t j)))\n   j \\<down> \\<and>\n  x < e_length\n       (the (local.prefixes\n              (LEAST t.\n                  local.prefixes t j \\<down> \\<and>\n                  x < e_length (the (local.prefixes t j)))\n              j))\n\ngoal (1 subgoal):\n 1. local.prefixes t\\<^sub>0 j \\<down> \\<and>\n    x < e_length (the (local.prefixes t\\<^sub>0 j))", "by simp"], ["proof (state)\nthis:\n  local.prefixes t\\<^sub>0 j \\<down> \\<and>\n  x < e_length (the (local.prefixes t\\<^sub>0 j))\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "from ex_t"], ["proof (chain)\npicking this:\n  \\<exists>t.\n     local.prefixes t j \\<down> \\<and>\n     x < e_length (the (local.prefixes t j))", "have not_P: \"\\<not> ?P t\" if \"t < t\\<^sub>0\" for t"], ["proof (prove)\nusing this:\n  \\<exists>t.\n     local.prefixes t j \\<down> \\<and>\n     x < e_length (the (local.prefixes t j))\n\ngoal (1 subgoal):\n 1. \\<not> (local.prefixes t j \\<down> \\<and>\n            x < e_length (the (local.prefixes t j)))", "using ex_t that Least_le[of ?P] not_le t\\<^sub>0_def"], ["proof (prove)\nusing this:\n  \\<exists>t.\n     local.prefixes t j \\<down> \\<and>\n     x < e_length (the (local.prefixes t j))\n  \\<exists>t.\n     local.prefixes t j \\<down> \\<and>\n     x < e_length (the (local.prefixes t j))\n  t < t\\<^sub>0\n  local.prefixes ?k j \\<down> \\<and>\n  x < e_length (the (local.prefixes ?k j)) \\<Longrightarrow>\n  (LEAST xa.\n      local.prefixes xa j \\<down> \\<and>\n      x < e_length (the (local.prefixes xa j)))\n  \\<le> ?k\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n  t\\<^sub>0 =\n  (LEAST t.\n      local.prefixes t j \\<down> \\<and>\n      x < e_length (the (local.prefixes t j)))\n\ngoal (1 subgoal):\n 1. \\<not> (local.prefixes t j \\<down> \\<and>\n            x < e_length (the (local.prefixes t j)))", "by auto"], ["proof (state)\nthis:\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  \\<not> (local.prefixes ?t j \\<down> \\<and>\n          x < e_length (the (local.prefixes ?t j)))\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "have \"?P t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down> \\<and>\n    x < e_length (the (local.prefixes t j))", "using assms"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  x < e_length b\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down> \\<and>\n    x < e_length (the (local.prefixes t j))", "by simp"], ["proof (state)\nthis:\n  local.prefixes t j \\<down> \\<and> x < e_length (the (local.prefixes t j))\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "with not_P"], ["proof (chain)\npicking this:\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  \\<not> (local.prefixes ?t j \\<down> \\<and>\n          x < e_length (the (local.prefixes ?t j)))\n  local.prefixes t j \\<down> \\<and> x < e_length (the (local.prefixes t j))", "have \"t\\<^sub>0 \\<le> t\""], ["proof (prove)\nusing this:\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  \\<not> (local.prefixes ?t j \\<down> \\<and>\n          x < e_length (the (local.prefixes ?t j)))\n  local.prefixes t j \\<down> \\<and> x < e_length (the (local.prefixes t j))\n\ngoal (1 subgoal):\n 1. t\\<^sub>0 \\<le> t", "using leI"], ["proof (prove)\nusing this:\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  \\<not> (local.prefixes ?t j \\<down> \\<and>\n          x < e_length (the (local.prefixes ?t j)))\n  local.prefixes t j \\<down> \\<and> x < e_length (the (local.prefixes t j))\n  \\<not> ?x < ?y \\<Longrightarrow> ?y \\<le> ?x\n\ngoal (1 subgoal):\n 1. t\\<^sub>0 \\<le> t", "by blast"], ["proof (state)\nthis:\n  t\\<^sub>0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "then"], ["proof (chain)\npicking this:\n  t\\<^sub>0 \\<le> t", "obtain b\\<^sub>0 where b0: \"prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0\""], ["proof (prove)\nusing this:\n  t\\<^sub>0 \\<le> t\n\ngoal (1 subgoal):\n 1. (\\<And>b\\<^sub>0.\n        local.prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1) prefixes_converg_le"], ["proof (prove)\nusing this:\n  t\\<^sub>0 \\<le> t\n  local.prefixes t j \\<down>= b\n  \\<lbrakk>local.prefixes ?t ?j \\<down>; ?t' \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> local.prefixes ?t' ?j \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>b\\<^sub>0.\n        local.prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  local.prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "have \"eval ?f [t\\<^sub>0, j, x] \\<down>= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t\\<^sub>0, j, x] \\<down>=\n    0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t\\<^sub>0, j, x] \\<down>=\n    0", "have \"eval (Cn 3 r_prefixes [Id 3 0, Id 3 1]) [t\\<^sub>0, j, x] \\<down>= b\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1])\n     [t\\<^sub>0, j, x] \\<down>=\n    b\\<^sub>0", "using b0"], ["proof (prove)\nusing this:\n  local.prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0\n\ngoal (1 subgoal):\n 1. eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1])\n     [t\\<^sub>0, j, x] \\<down>=\n    b\\<^sub>0", "by simp"], ["proof (state)\nthis:\n  eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1])\n   [t\\<^sub>0, j, x] \\<down>=\n  b\\<^sub>0\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t\\<^sub>0, j, x] \\<down>=\n    0", "then"], ["proof (chain)\npicking this:\n  eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1])\n   [t\\<^sub>0, j, x] \\<down>=\n  b\\<^sub>0", "show ?thesis"], ["proof (prove)\nusing this:\n  eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1])\n   [t\\<^sub>0, j, x] \\<down>=\n  b\\<^sub>0\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t\\<^sub>0, j, x] \\<down>=\n    0", "using \\<open>?P t\\<^sub>0\\<close>"], ["proof (prove)\nusing this:\n  eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1])\n   [t\\<^sub>0, j, x] \\<down>=\n  b\\<^sub>0\n  local.prefixes t\\<^sub>0 j \\<down> \\<and>\n  x < e_length (the (local.prefixes t\\<^sub>0 j))\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t\\<^sub>0, j, x] \\<down>=\n    0", "by simp"], ["proof (state)\nthis:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t\\<^sub>0, j, x] \\<down>=\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t\\<^sub>0, j, x] \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "moreover"], ["proof (state)\nthis:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t\\<^sub>0, j, x] \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "have \"eval ?f [t, j, x] \\<down>\\<noteq> 0\" if \"t < t\\<^sub>0\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "obtain bt where bt: \"prefixes t j \\<down>= bt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bt.\n        local.prefixes t j \\<down>= bt \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prefixes_converg_le[of t\\<^sub>0 j t] b0 \\<open>t < t\\<^sub>0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>local.prefixes t\\<^sub>0 j \\<down>; t \\<le> t\\<^sub>0\\<rbrakk>\n  \\<Longrightarrow> local.prefixes t j \\<down>\n  local.prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0\n  t < t\\<^sub>0\n\ngoal (1 subgoal):\n 1. (\\<And>bt.\n        local.prefixes t j \\<down>= bt \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= bt\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "moreover"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= bt\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "have \"\\<not> ?P t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (local.prefixes t j \\<down> \\<and>\n            x < e_length (the (local.prefixes t j)))", "using that not_P"], ["proof (prove)\nusing this:\n  t < t\\<^sub>0\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  \\<not> (local.prefixes ?t j \\<down> \\<and>\n          x < e_length (the (local.prefixes ?t j)))\n\ngoal (1 subgoal):\n 1. \\<not> (local.prefixes t j \\<down> \\<and>\n            x < e_length (the (local.prefixes t j)))", "by simp"], ["proof (state)\nthis:\n  \\<not> (local.prefixes t j \\<down> \\<and>\n          x < e_length (the (local.prefixes t j)))\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "ultimately"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= bt\n  \\<not> (local.prefixes t j \\<down> \\<and>\n          x < e_length (the (local.prefixes t j)))", "have \"e_length bt \\<le> x\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= bt\n  \\<not> (local.prefixes t j \\<down> \\<and>\n          x < e_length (the (local.prefixes t j)))\n\ngoal (1 subgoal):\n 1. e_length bt \\<le> x", "by simp"], ["proof (state)\nthis:\n  e_length bt \\<le> x\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "moreover"], ["proof (state)\nthis:\n  e_length bt \\<le> x\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "have \"eval (Cn 3 r_prefixes [Id 3 0, Id 3 1]) [t, j, x] \\<down>= bt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]) [t, j, x] \\<down>= bt", "using bt"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= bt\n\ngoal (1 subgoal):\n 1. eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]) [t, j, x] \\<down>= bt", "by simp"], ["proof (state)\nthis:\n  eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]) [t, j, x] \\<down>= bt\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "ultimately"], ["proof (chain)\npicking this:\n  e_length bt \\<le> x\n  eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]) [t, j, x] \\<down>= bt", "show ?thesis"], ["proof (prove)\nusing this:\n  e_length bt \\<le> x\n  eval (Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]) [t, j, x] \\<down>= bt\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>\\<noteq>\n    0", "by simp"], ["proof (state)\nthis:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>\\<noteq>\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [?t, j, x] \\<down>\\<noteq>\n  0\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "ultimately"], ["proof (chain)\npicking this:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t\\<^sub>0, j, x] \\<down>=\n  0\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [?t, j, x] \\<down>\\<noteq>\n  0", "have \"eval (Mn 2 ?f) [j, x] \\<down>= t\\<^sub>0\""], ["proof (prove)\nusing this:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t\\<^sub>0, j, x] \\<down>=\n  0\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [?t, j, x] \\<down>\\<noteq>\n  0\n\ngoal (1 subgoal):\n 1. eval\n     (Mn 2\n       (Cn 3 r_less\n         [recf.Id 3 2,\n          Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n     [j, x] \\<down>=\n    t\\<^sub>0", "using eval_Mn_convergI[of 2 ?f \"[j, x]\" t\\<^sub>0]"], ["proof (prove)\nusing this:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t\\<^sub>0, j, x] \\<down>=\n  0\n  ?t < t\\<^sub>0 \\<Longrightarrow>\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [?t, j, x] \\<down>\\<noteq>\n  0\n  \\<lbrakk>recfn (length [j, x])\n            (Mn 2\n              (Cn 3 r_less\n                [recf.Id 3 2,\n                 Cn 3 r_length\n                  [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]));\n   eval\n    (Cn 3 r_less\n      [recf.Id 3 2,\n       Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n    [t\\<^sub>0, j, x] \\<down>=\n   0;\n   \\<And>y.\n      y < t\\<^sub>0 \\<Longrightarrow>\n      eval\n       (Cn 3 r_less\n         [recf.Id 3 2,\n          Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n       [y, j, x] \\<down>\\<noteq>\n      0\\<rbrakk>\n  \\<Longrightarrow> eval\n                     (Mn 2\n                       (Cn 3 r_less\n                         [recf.Id 3 2,\n                          Cn 3 r_length\n                           [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n                     [j, x] \\<down>=\n                    t\\<^sub>0\n\ngoal (1 subgoal):\n 1. eval\n     (Mn 2\n       (Cn 3 r_less\n         [recf.Id 3 2,\n          Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n     [j, x] \\<down>=\n    t\\<^sub>0", "by simp"], ["proof (state)\nthis:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>=\n  t\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "then"], ["proof (chain)\npicking this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>=\n  t\\<^sub>0", "have \"\\<psi> j x \\<down>= e_nth b\\<^sub>0 x\""], ["proof (prove)\nusing this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>=\n  t\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b\\<^sub>0 x", "unfolding r_psi_def"], ["proof (prove)\nusing this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>=\n  t\\<^sub>0\n\ngoal (1 subgoal):\n 1. eval\n     (let f = Cn 3 r_less\n               [recf.Id 3 2,\n                Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]\n      in Cn 2 r_nth [Cn 2 r_prefixes [Mn 2 f, recf.Id 2 0], recf.Id 2 1])\n     [j, x] \\<down>=\n    e_nth b\\<^sub>0 x", "using b0"], ["proof (prove)\nusing this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>=\n  t\\<^sub>0\n  local.prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0\n\ngoal (1 subgoal):\n 1. eval\n     (let f = Cn 3 r_less\n               [recf.Id 3 2,\n                Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]\n      in Cn 2 r_nth [Cn 2 r_prefixes [Mn 2 f, recf.Id 2 0], recf.Id 2 1])\n     [j, x] \\<down>=\n    e_nth b\\<^sub>0 x", "by simp"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>= e_nth b\\<^sub>0 x\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "then"], ["proof (chain)\npicking this:\n  \\<psi> j x \\<down>= e_nth b\\<^sub>0 x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi> j x \\<down>= e_nth b\\<^sub>0 x\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "using \\<open>t\\<^sub>0 \\<le> t\\<close> assms(1) prefixes_stable[of t\\<^sub>0 j b\\<^sub>0 \"t - t\\<^sub>0\" b] b0 \\<open>?P t\\<^sub>0\\<close>"], ["proof (prove)\nusing this:\n  \\<psi> j x \\<down>= e_nth b\\<^sub>0 x\n  t\\<^sub>0 \\<le> t\n  local.prefixes t j \\<down>= b\n  \\<lbrakk>local.prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0;\n   local.prefixes (t\\<^sub>0 + (t - t\\<^sub>0)) j \\<down>= b\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x<e_length b\\<^sub>0.\n                       e_nth b\\<^sub>0 x = e_nth b x\n  local.prefixes t\\<^sub>0 j \\<down>= b\\<^sub>0\n  local.prefixes t\\<^sub>0 j \\<down> \\<and>\n  x < e_length (the (local.prefixes t\\<^sub>0 j))\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "by simp"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>= e_nth b x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma psi_converg_imp_prefix:\n  assumes \"\\<psi> j x \\<down>\"\n  shows \"\\<exists>t b. prefixes t j \\<down>= b \\<and> e_length b > x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "let ?f = \"Cn 3 r_less [Id 3 2, Cn 3 r_length [Cn 3 r_prefixes [Id 3 0, Id 3 1]]]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "have \"eval (Mn 2 ?f) [j, x] \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Mn 2\n       (Cn 3 r_less\n         [recf.Id 3 2,\n          Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n     [j, x] \\<down>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> eval\n            (Mn 2\n              (Cn 3 r_less\n                [recf.Id 3 2,\n                 Cn 3 r_length\n                  [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n            [j, x] \\<down> \\<Longrightarrow>\n    False", "assume \"\\<not> eval (Mn 2 ?f) [j, x] \\<down>\""], ["proof (state)\nthis:\n  \\<not> eval\n          (Mn 2\n            (Cn 3 r_less\n              [recf.Id 3 2,\n               Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n          [j, x] \\<down>\n\ngoal (1 subgoal):\n 1. \\<not> eval\n            (Mn 2\n              (Cn 3 r_less\n                [recf.Id 3 2,\n                 Cn 3 r_length\n                  [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n            [j, x] \\<down> \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> eval\n          (Mn 2\n            (Cn 3 r_less\n              [recf.Id 3 2,\n               Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n          [j, x] \\<down>", "have \"eval (Mn 2 ?f) [j, x] \\<up>\""], ["proof (prove)\nusing this:\n  \\<not> eval\n          (Mn 2\n            (Cn 3 r_less\n              [recf.Id 3 2,\n               Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n          [j, x] \\<down>\n\ngoal (1 subgoal):\n 1. eval\n     (Mn 2\n       (Cn 3 r_less\n         [recf.Id 3 2,\n          Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n     [j, x] \\<up>", "by simp"], ["proof (state)\nthis:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<up>\n\ngoal (1 subgoal):\n 1. \\<not> eval\n            (Mn 2\n              (Cn 3 r_less\n                [recf.Id 3 2,\n                 Cn 3 r_length\n                  [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n            [j, x] \\<down> \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<up>", "have \"\\<psi> j x \\<up>\""], ["proof (prove)\nusing this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<up>\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<up>", "unfolding r_psi_def"], ["proof (prove)\nusing this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<up>\n\ngoal (1 subgoal):\n 1. eval\n     (let f = Cn 3 r_less\n               [recf.Id 3 2,\n                Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]\n      in Cn 2 r_nth [Cn 2 r_prefixes [Mn 2 f, recf.Id 2 0], recf.Id 2 1])\n     [j, x] \\<up>", "by simp"], ["proof (state)\nthis:\n  \\<psi> j x \\<up>\n\ngoal (1 subgoal):\n 1. \\<not> eval\n            (Mn 2\n              (Cn 3 r_less\n                [recf.Id 3 2,\n                 Cn 3 r_length\n                  [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n            [j, x] \\<down> \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<psi> j x \\<up>", "show False"], ["proof (prove)\nusing this:\n  \\<psi> j x \\<up>\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<psi> j x \\<up>\n  \\<psi> j x \\<down>\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "then"], ["proof (chain)\npicking this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>", "obtain t where t: \"eval (Mn 2 ?f) [j, x] \\<down>= t\""], ["proof (prove)\nusing this:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        eval\n         (Mn 2\n           (Cn 3 r_less\n             [recf.Id 3 2,\n              Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n         [j, x] \\<down>=\n        t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  eval\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n   [j, x] \\<down>=\n  t\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "have \"recfn 2 (Mn 2 ?f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2\n     (Mn 2\n       (Cn 3 r_less\n         [recf.Id 3 2,\n          Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))", "by simp"], ["proof (state)\nthis:\n  recfn 2\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "then"], ["proof (chain)\npicking this:\n  recfn 2\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))", "have f_zero: \"eval ?f [t, j, x] \\<down>= 0\""], ["proof (prove)\nusing this:\n  recfn 2\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>=\n    0", "using eval_Mn_convergE[OF _ t]"], ["proof (prove)\nusing this:\n  recfn 2\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]))\n  recfn (length [j, x])\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length\n         [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])) \\<Longrightarrow>\n  t =\n  (LEAST z.\n      eval\n       (Cn 3 r_less\n         [recf.Id 3 2,\n          Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n       [z, j, x] \\<down>=\n      0 \\<and>\n      (\\<forall>y<z.\n          eval\n           (Cn 3 r_less\n             [recf.Id 3 2,\n              Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n           [y, j, x] \\<down>))\n  recfn (length [j, x])\n   (Mn 2\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length\n         [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])) \\<Longrightarrow>\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  0\n  \\<lbrakk>recfn (length [j, x])\n            (Mn 2\n              (Cn 3 r_less\n                [recf.Id 3 2,\n                 Cn 3 r_length\n                  [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]]));\n   ?y < t\\<rbrakk>\n  \\<Longrightarrow> eval\n                     (Cn 3 r_less\n                       [recf.Id 3 2,\n                        Cn 3 r_length\n                         [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n                     [?y, j, x] \\<down>\\<noteq>\n                    0\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>=\n    0", "by (metis (no_types, lifting) One_nat_def Suc_1 length_Cons list.size(3))"], ["proof (state)\nthis:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "have \"prefixes t j \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes t j \\<down>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> local.prefixes t j \\<down> \\<Longrightarrow> False", "assume \"\\<not> prefixes t j \\<down>\""], ["proof (state)\nthis:\n  \\<not> local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. \\<not> local.prefixes t j \\<down> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> local.prefixes t j \\<down>", "have \"prefixes t j \\<up>\""], ["proof (prove)\nusing this:\n  \\<not> local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. local.prefixes t j \\<up>", "by simp"], ["proof (state)\nthis:\n  local.prefixes t j \\<up>\n\ngoal (1 subgoal):\n 1. \\<not> local.prefixes t j \\<down> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<up>", "have \"eval ?f [t, j, x] \\<up>\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<up>\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<up>", "by simp"], ["proof (state)\nthis:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<up>\n\ngoal (1 subgoal):\n 1. \\<not> local.prefixes t j \\<down> \\<Longrightarrow> False", "with f_zero"], ["proof (chain)\npicking this:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  0\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<up>", "show False"], ["proof (prove)\nusing this:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  0\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<up>\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "then"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>", "obtain b' where b': \"prefixes t j \\<down>= b'\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        local.prefixes t j \\<down>= b' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "moreover"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "have \"e_length b' > x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < e_length b'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < e_length b' \\<Longrightarrow> False", "assume \"\\<not> e_length b' > x\""], ["proof (state)\nthis:\n  \\<not> x < e_length b'\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> x < e_length b'", "have \"eval ?f [t, j, x] \\<down>= 1\""], ["proof (prove)\nusing this:\n  \\<not> x < e_length b'\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>=\n    1", "using b'"], ["proof (prove)\nusing this:\n  \\<not> x < e_length b'\n  local.prefixes t j \\<down>= b'\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 3 r_less\n       [recf.Id 3 2,\n        Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n     [t, j, x] \\<down>=\n    1", "by simp"], ["proof (state)\nthis:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  1\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b' \\<Longrightarrow> False", "with f_zero"], ["proof (chain)\npicking this:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  0\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  1", "show False"], ["proof (prove)\nusing this:\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  0\n  eval\n   (Cn 3 r_less\n     [recf.Id 3 2,\n      Cn 3 r_length [Cn 3 r_prefixes [recf.Id 3 0, recf.Id 3 1]]])\n   [t, j, x] \\<down>=\n  1\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x < e_length b'\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "ultimately"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= b'\n  x < e_length b'", "show ?thesis"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b'\n  x < e_length b'\n\ngoal (1 subgoal):\n 1. \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b", "by auto"], ["proof (state)\nthis:\n  \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma psi_converg_imp_prefix':\n  assumes \"\\<psi> j x \\<down>\"\n  shows \"\\<exists>t b. prefixes t j \\<down>= b \\<and> e_length b > x \\<and> \\<psi> j x \\<down>= e_nth b x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t b.\n       local.prefixes t j \\<down>= b \\<and>\n       x < e_length b \\<and> \\<psi> j x \\<down>= e_nth b x", "using psi_converg_imp_prefix[OF assms] psi_eq_nth_prefix"], ["proof (prove)\nusing this:\n  \\<exists>t b. local.prefixes t j \\<down>= b \\<and> x < e_length b\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b; ?x < e_length ?b\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?j ?x \\<down>= e_nth ?b ?x\n\ngoal (1 subgoal):\n 1. \\<exists>t b.\n       local.prefixes t j \\<down>= b \\<and>\n       x < e_length b \\<and> \\<psi> j x \\<down>= e_nth b x", "by blast"], ["", "text \\<open>In both Case~1 and~2, $\\psi_j$ starts with $j$.\\<close>"], ["", "lemma psi_at_0: \"\\<psi> j 0 \\<down>= j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j 0 \\<down>= j", "using prefixes_hd prefixes_length psi_eq_nth_prefix prefixes_at_0"], ["proof (prove)\nusing this:\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow> e_nth ?b 0 = ?j\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow> ?t < e_length ?b\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b; ?x < e_length ?b\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?j ?x \\<down>= e_nth ?b ?x\n  local.prefixes 0 ?j \\<down>= singleton_encode ?j\n\ngoal (1 subgoal):\n 1. \\<psi> j 0 \\<down>= j", "by fastforce"], ["", "text \\<open>In Case~1, $\\psi_j$ is total and made up of $j$ followed by zeros\nand ones, just as required by the definition of $V_1$.\\<close>"], ["", "lemma case_one_psi_total:\n  assumes \"case_one j\" and \"x > 0\"\n  shows \"\\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "obtain b where b: \"prefixes x j \\<down>= b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        local.prefixes x j \\<down>= b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<nexists>t. local.prefixes t j \\<up>\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        local.prefixes x j \\<down>= b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.prefixes x j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "then"], ["proof (chain)\npicking this:\n  local.prefixes x j \\<down>= b", "have \"e_length b > x\""], ["proof (prove)\nusing this:\n  local.prefixes x j \\<down>= b\n\ngoal (1 subgoal):\n 1. x < e_length b", "using prefixes_length"], ["proof (prove)\nusing this:\n  local.prefixes x j \\<down>= b\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow> ?t < e_length ?b\n\ngoal (1 subgoal):\n 1. x < e_length b", "by simp"], ["proof (state)\nthis:\n  x < e_length b\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "then"], ["proof (chain)\npicking this:\n  x < e_length b", "have \"\\<psi> j x \\<down>= e_nth b x\""], ["proof (prove)\nusing this:\n  x < e_length b\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "using b psi_eq_nth_prefix"], ["proof (prove)\nusing this:\n  x < e_length b\n  local.prefixes x j \\<down>= b\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b; ?x < e_length ?b\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?j ?x \\<down>= e_nth ?b ?x\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "by simp"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>= e_nth b x\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "moreover"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>= e_nth b x\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "have \"e_nth b x = 0 \\<or> e_nth b x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth b x = 0 \\<or> e_nth b x = 1", "using prefixes_tl_only_01[OF b] assms(2)"], ["proof (prove)\nusing this:\n  \\<forall>x>0. e_nth b x = 0 \\<or> e_nth b x = 1\n  0 < x\n\ngoal (1 subgoal):\n 1. e_nth b x = 0 \\<or> e_nth b x = 1", "by simp"], ["proof (state)\nthis:\n  e_nth b x = 0 \\<or> e_nth b x = 1\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "ultimately"], ["proof (chain)\npicking this:\n  \\<psi> j x \\<down>= e_nth b x\n  e_nth b x = 0 \\<or> e_nth b x = 1", "show \"\\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1\""], ["proof (prove)\nusing this:\n  \\<psi> j x \\<down>= e_nth b x\n  e_nth b x = 0 \\<or> e_nth b x = 1\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "by simp"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>In Case~2, $\\psi_j$ is defined only for a prefix starting with\n$j$ and continuing with zeros and ones. This prefix corresponds to $ja$ from\nthe definition of $V_2$.\\<close>"], ["", "lemma case_two_psi_only_prefix:\n  assumes \"case_two j\"\n  shows \"\\<exists>y. (\\<forall>x. 0 < x \\<and> x < y \\<longrightarrow> \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n                (\\<forall>x \\<ge> y. \\<psi> j x \\<up>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "obtain t where\n    t_le: \"\\<forall>t'\\<le>t. prefixes t' j \\<down>\" and\n    t_gr: \"\\<forall>t'>t. prefixes t' j \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>\\<forall>t'\\<le>t. local.prefixes t' j \\<down>;\n         \\<forall>t'>t. local.prefixes t' j \\<up>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms case_two"], ["proof (prove)\nusing this:\n  \\<exists>t. local.prefixes t j \\<up>\n  \\<exists>t. local.prefixes t ?j \\<up> \\<Longrightarrow>\n  \\<exists>t.\n     (\\<forall>t'\\<le>t. local.prefixes t' ?j \\<down>) \\<and>\n     (\\<forall>t'>t. local.prefixes t' ?j \\<up>)\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>\\<forall>t'\\<le>t. local.prefixes t' j \\<down>;\n         \\<forall>t'>t. local.prefixes t' j \\<up>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>t'\\<le>t. local.prefixes t' j \\<down>\n  \\<forall>t'>t. local.prefixes t' j \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "then"], ["proof (chain)\npicking this:\n  \\<forall>t'\\<le>t. local.prefixes t' j \\<down>\n  \\<forall>t'>t. local.prefixes t' j \\<up>", "obtain b where b: \"prefixes t j \\<down>= b\""], ["proof (prove)\nusing this:\n  \\<forall>t'\\<le>t. local.prefixes t' j \\<down>\n  \\<forall>t'>t. local.prefixes t' j \\<up>\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        local.prefixes t j \\<down>= b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "let ?y = \"e_length b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "have \"\\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1\" if \"x > 0 \\<and> x < ?y\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "using t_le b that"], ["proof (prove)\nusing this:\n  \\<forall>t'\\<le>t. local.prefixes t' j \\<down>\n  local.prefixes t j \\<down>= b\n  0 < x \\<and> x < e_length b\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1", "by (metis prefixes_tl_only_01 psi_eq_nth_prefix)"], ["proof (state)\nthis:\n  0 < ?x \\<and> ?x < e_length b \\<Longrightarrow>\n  \\<psi> j ?x \\<down>= 0 \\<or> \\<psi> j ?x \\<down>= 1\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "moreover"], ["proof (state)\nthis:\n  0 < ?x \\<and> ?x < e_length b \\<Longrightarrow>\n  \\<psi> j ?x \\<down>= 0 \\<or> \\<psi> j ?x \\<down>= 1\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "have \"\\<psi> j x \\<up>\" if \"x \\<ge> ?y\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<up>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down> \\<Longrightarrow> False", "assume \"\\<psi> j x \\<down>\""], ["proof (state)\nthis:\n  \\<psi> j x \\<down>\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<psi> j x \\<down>", "obtain t' b' where t': \"prefixes t' j \\<down>= b'\" and \"e_length b' > x\""], ["proof (prove)\nusing this:\n  \\<psi> j x \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>t' b'.\n        \\<lbrakk>local.prefixes t' j \\<down>= b'; x < e_length b'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using psi_converg_imp_prefix"], ["proof (prove)\nusing this:\n  \\<psi> j x \\<down>\n  \\<psi> ?j ?x \\<down> \\<Longrightarrow>\n  \\<exists>t b. local.prefixes t ?j \\<down>= b \\<and> ?x < e_length b\n\ngoal (1 subgoal):\n 1. (\\<And>t' b'.\n        \\<lbrakk>local.prefixes t' j \\<down>= b'; x < e_length b'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  local.prefixes t' j \\<down>= b'\n  x < e_length b'\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  local.prefixes t' j \\<down>= b'\n  x < e_length b'", "have \"e_length b' > ?y\""], ["proof (prove)\nusing this:\n  local.prefixes t' j \\<down>= b'\n  x < e_length b'\n\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "using that"], ["proof (prove)\nusing this:\n  local.prefixes t' j \\<down>= b'\n  x < e_length b'\n  e_length b \\<le> x\n\ngoal (1 subgoal):\n 1. e_length b < e_length b'", "by simp"], ["proof (state)\nthis:\n  e_length b < e_length b'\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down> \\<Longrightarrow> False", "with t'"], ["proof (chain)\npicking this:\n  local.prefixes t' j \\<down>= b'\n  e_length b < e_length b'", "have \"t' > t\""], ["proof (prove)\nusing this:\n  local.prefixes t' j \\<down>= b'\n  e_length b < e_length b'\n\ngoal (1 subgoal):\n 1. t < t'", "using prefixes_monotone b"], ["proof (prove)\nusing this:\n  local.prefixes t' j \\<down>= b'\n  e_length b < e_length b'\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b;\n   local.prefixes (?t + ?d) ?j \\<down>= ?b'\\<rbrakk>\n  \\<Longrightarrow> e_length ?b \\<le> e_length ?b'\n  local.prefixes t j \\<down>= b\n\ngoal (1 subgoal):\n 1. t < t'", "by (metis add_diff_inverse_nat leD)"], ["proof (state)\nthis:\n  t < t'\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down> \\<Longrightarrow> False", "with t' t_gr"], ["proof (chain)\npicking this:\n  local.prefixes t' j \\<down>= b'\n  \\<forall>t'>t. local.prefixes t' j \\<up>\n  t < t'", "show False"], ["proof (prove)\nusing this:\n  local.prefixes t' j \\<down>= b'\n  \\<forall>t'>t. local.prefixes t' j \\<up>\n  t < t'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e_length b \\<le> ?x \\<Longrightarrow> \\<psi> j ?x \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "ultimately"], ["proof (chain)\npicking this:\n  0 < ?x \\<and> ?x < e_length b \\<Longrightarrow>\n  \\<psi> j ?x \\<down>= 0 \\<or> \\<psi> j ?x \\<down>= 1\n  e_length b \\<le> ?x \\<Longrightarrow> \\<psi> j ?x \\<up>", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < ?x \\<and> ?x < e_length b \\<Longrightarrow>\n  \\<psi> j ?x \\<down>= 0 \\<or> \\<psi> j ?x \\<down>= 1\n  e_length b \\<le> ?x \\<Longrightarrow> \\<psi> j ?x \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (\\<forall>x.\n           0 < x \\<and> x < y \\<longrightarrow>\n           \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n       (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     (\\<forall>x.\n         0 < x \\<and> x < y \\<longrightarrow>\n         \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n     (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition longest_prefix :: \"nat \\<Rightarrow> nat\" where\n  \"longest_prefix j \\<equiv> THE y. (\\<forall>x<y. \\<psi> j x \\<down>) \\<and> (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)\""], ["", "lemma longest_prefix:\n  assumes \"case_two j\" and \"z = longest_prefix j\"\n  shows \"(\\<forall>x<z. \\<psi> j x \\<down>) \\<and> (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "let ?P = \"\\<lambda>z. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and> (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "obtain y where y:\n    \"\\<forall>x. 0 < x \\<and> x < y \\<longrightarrow> \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1\"\n    \"\\<forall>x\\<ge>y. \\<psi> j x \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>\\<forall>x.\n                    0 < x \\<and> x < y \\<longrightarrow>\n                    \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1;\n         \\<forall>x\\<ge>y. \\<psi> j x \\<up>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using case_two_psi_only_prefix[OF assms(1)]"], ["proof (prove)\nusing this:\n  \\<exists>y.\n     (\\<forall>x.\n         0 < x \\<and> x < y \\<longrightarrow>\n         \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n     (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>\\<forall>x.\n                    0 < x \\<and> x < y \\<longrightarrow>\n                    \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1;\n         \\<forall>x\\<ge>y. \\<psi> j x \\<up>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     0 < x \\<and> x < y \\<longrightarrow>\n     \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1\n  \\<forall>x\\<ge>y. \\<psi> j x \\<up>\n\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "have \"?P (THE z. ?P z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x<THE z.\n                   (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                   (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n        \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>THE z.\n                       (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                       (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n        \\<psi> j x \\<up>)", "proof (rule theI[of ?P y])"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<forall>x<y. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)\n 2. \\<And>x.\n       (\\<forall>xa<x. \\<psi> j xa \\<down>) \\<and>\n       (\\<forall>xa\\<ge>x. \\<psi> j xa \\<up>) \\<Longrightarrow>\n       x = y", "show \"?P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x<y. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x<y. \\<psi> j x \\<down>\n 2. \\<forall>x\\<ge>y. \\<psi> j x \\<up>", "show \"\\<forall>x<y. \\<psi> j x \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x<y. \\<psi> j x \\<down>", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < y \\<Longrightarrow> \\<psi> j x \\<down>", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < y \\<Longrightarrow> \\<psi> j x \\<down>", "assume \"x < y\""], ["proof (state)\nthis:\n  x < y\n\ngoal (1 subgoal):\n 1. \\<And>x. x < y \\<Longrightarrow> \\<psi> j x \\<down>", "show \"\\<psi> j x \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>", "proof (cases \"x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> \\<psi> j x \\<down>\n 2. x \\<noteq> 0 \\<Longrightarrow> \\<psi> j x \\<down>", "case True"], ["proof (state)\nthis:\n  x = 0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> \\<psi> j x \\<down>\n 2. x \\<noteq> 0 \\<Longrightarrow> \\<psi> j x \\<down>", "then"], ["proof (chain)\npicking this:\n  x = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  x = 0\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>", "using psi_at_0"], ["proof (prove)\nusing this:\n  x = 0\n  \\<psi> ?j 0 \\<down>= ?j\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>", "by simp"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> \\<psi> j x \\<down>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> \\<psi> j x \\<down>", "case False"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> \\<psi> j x \\<down>", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>", "using y(1) \\<open>x < y\\<close>"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n  \\<forall>x.\n     0 < x \\<and> x < y \\<longrightarrow>\n     \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1\n  x < y\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>", "by auto"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x<y. \\<psi> j x \\<down>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<ge>y. \\<psi> j x \\<up>", "show \"\\<forall>x\\<ge>y. \\<psi> j x \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<ge>y. \\<psi> j x \\<up>", "using y(2)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<ge>y. \\<psi> j x \\<up>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<ge>y. \\<psi> j x \\<up>", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<ge>y. \\<psi> j x \\<up>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>x<y. \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<forall>xa<x. \\<psi> j xa \\<down>) \\<and>\n       (\\<forall>xa\\<ge>x. \\<psi> j xa \\<up>) \\<Longrightarrow>\n       x = y", "show \"z = y\" if \"?P z\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. z = y", "proof (rule ccontr, cases \"z < y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<noteq> y; z < y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  z < y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<noteq> y; z < y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  z < y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<noteq> y; z < y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "assume \"z \\<noteq> y\""], ["proof (state)\nthis:\n  z \\<noteq> y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<noteq> y; z < y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  z < y\n  z \\<noteq> y", "show False"], ["proof (prove)\nusing this:\n  z < y\n  z \\<noteq> y\n\ngoal (1 subgoal):\n 1. False", "using that \\<open>?P y\\<close>"], ["proof (prove)\nusing this:\n  z < y\n  z \\<noteq> y\n  (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)\n  (\\<forall>x<y. \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> z < y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> z < y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "assume \"z \\<noteq> y\""], ["proof (state)\nthis:\n  z \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> y; \\<not> z < y\\<rbrakk> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  z \\<noteq> y", "show False"], ["proof (prove)\nusing this:\n  z \\<noteq> y\n\ngoal (1 subgoal):\n 1. False", "using that \\<open>?P y\\<close> y(2)"], ["proof (prove)\nusing this:\n  z \\<noteq> y\n  (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)\n  (\\<forall>x<y. \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)\n  \\<forall>x\\<ge>y. \\<psi> j x \\<up>\n\ngoal (1 subgoal):\n 1. False", "by (meson linorder_cases order_refl)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>x<?z. \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>?z. \\<psi> j x \\<up>) \\<Longrightarrow>\n  ?z = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>x<THE z.\n                 (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                 (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>THE z.\n                     (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                     (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<up>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "then"], ["proof (chain)\npicking this:\n  (\\<forall>x<THE z.\n                 (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                 (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>THE z.\n                     (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                     (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<up>)", "have \"(\\<forall>x<(THE z. ?P z). \\<psi> j x \\<down>) \\<and> (\\<forall>x\\<ge>(THE z. ?P z). \\<psi> j x \\<up>)\""], ["proof (prove)\nusing this:\n  (\\<forall>x<THE z.\n                 (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                 (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>THE z.\n                     (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                     (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<up>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x<THE z.\n                   (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                   (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n        \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>THE z.\n                       (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                       (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n        \\<psi> j x \\<up>)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>x<THE z.\n                 (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                 (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>THE z.\n                     (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                     (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<up>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "moreover"], ["proof (state)\nthis:\n  (\\<forall>x<THE z.\n                 (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                 (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>THE z.\n                     (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                     (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<up>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "have \"longest_prefix j = (THE z. ?P z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. longest_prefix j =\n    (THE z.\n        (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n        (\\<forall>x\\<ge>z. \\<psi> j x \\<up>))", "unfolding longest_prefix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE y.\n        (\\<forall>x<y. \\<psi> j x \\<down>) \\<and>\n        (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)) =\n    (THE z.\n        (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n        (\\<forall>x\\<ge>z. \\<psi> j x \\<up>))", "by simp"], ["proof (state)\nthis:\n  longest_prefix j =\n  (THE z.\n      (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n      (\\<forall>x\\<ge>z. \\<psi> j x \\<up>))\n\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>x<THE z.\n                 (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                 (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>THE z.\n                     (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                     (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<up>)\n  longest_prefix j =\n  (THE z.\n      (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n      (\\<forall>x\\<ge>z. \\<psi> j x \\<up>))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<forall>x<THE z.\n                 (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                 (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>THE z.\n                     (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                     (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<up>)\n  longest_prefix j =\n  (THE z.\n      (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n      (\\<forall>x\\<ge>z. \\<psi> j x \\<up>))\n\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "using assms(2)"], ["proof (prove)\nusing this:\n  (\\<forall>x<THE z.\n                 (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                 (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>THE z.\n                     (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n                     (\\<forall>x\\<ge>z. \\<psi> j x \\<up>).\n      \\<psi> j x \\<up>)\n  longest_prefix j =\n  (THE z.\n      (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n      (\\<forall>x\\<ge>z. \\<psi> j x \\<up>))\n  z = longest_prefix j\n\ngoal (1 subgoal):\n 1. (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n    (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)", "by metis"], ["proof (state)\nthis:\n  (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma case_two_psi_longest_prefix:\n  assumes \"case_two j\" and \"y = longest_prefix j\"\n  shows \"(\\<forall>x. 0 < x \\<and> x < y \\<longrightarrow> \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n    (\\<forall>x \\<ge> y. \\<psi> j x \\<up>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        0 < x \\<and> x < y \\<longrightarrow>\n        \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n    (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "using assms longest_prefix case_two_psi_only_prefix"], ["proof (prove)\nusing this:\n  \\<exists>t. local.prefixes t j \\<up>\n  y = longest_prefix j\n  \\<lbrakk>\\<exists>t. local.prefixes t ?j \\<up>;\n   ?z = longest_prefix ?j\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x<?z. \\<psi> ?j x \\<down>) \\<and>\n                    (\\<forall>x\\<ge>?z. \\<psi> ?j x \\<up>)\n  \\<exists>t. local.prefixes t ?j \\<up> \\<Longrightarrow>\n  \\<exists>y.\n     (\\<forall>x.\n         0 < x \\<and> x < y \\<longrightarrow>\n         \\<psi> ?j x \\<down>= 0 \\<or> \\<psi> ?j x \\<down>= 1) \\<and>\n     (\\<forall>x\\<ge>y. \\<psi> ?j x \\<up>)\n\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        0 < x \\<and> x < y \\<longrightarrow>\n        \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n    (\\<forall>x\\<ge>y. \\<psi> j x \\<up>)", "by (metis prefixes_tl_only_01 psi_converg_imp_prefix')"], ["", "text \\<open>The prefix cannot be empty because the process starts with prefix $[j]$.\\<close>"], ["", "lemma longest_prefix_gr_0:\n  assumes \"case_two j\"\n  shows \"longest_prefix j > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < longest_prefix j", "using assms case_two_psi_longest_prefix psi_at_0"], ["proof (prove)\nusing this:\n  \\<exists>t. local.prefixes t j \\<up>\n  \\<lbrakk>\\<exists>t. local.prefixes t ?j \\<up>;\n   ?y = longest_prefix ?j\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x.\n                        0 < x \\<and> x < ?y \\<longrightarrow>\n                        \\<psi> ?j x \\<down>= 0 \\<or>\n                        \\<psi> ?j x \\<down>= 1) \\<and>\n                    (\\<forall>x\\<ge>?y. \\<psi> ?j x \\<up>)\n  \\<psi> ?j 0 \\<down>= ?j\n\ngoal (1 subgoal):\n 1. 0 < longest_prefix j", "by force"], ["", "lemma psi_not_divergent_init:\n  assumes \"prefixes t j \\<down>= b\"\n  shows \"(\\<psi> j) \\<triangleright> (e_length b - 1) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> (e_length b - 1) = b", "proof (intro initI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < e_length b\n 2. \\<And>x. x < e_length b \\<Longrightarrow> \\<psi> j x \\<down>= e_nth b x", "show \"0 < e_length b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < e_length b", "using assms prefixes_length"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow> ?t < e_length ?b\n\ngoal (1 subgoal):\n 1. 0 < e_length b", "by fastforce"], ["proof (state)\nthis:\n  0 < e_length b\n\ngoal (1 subgoal):\n 1. \\<And>x. x < e_length b \\<Longrightarrow> \\<psi> j x \\<down>= e_nth b x", "show \"\\<psi> j x \\<down>= e_nth b x\" if \"x < e_length b\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "using that assms psi_eq_nth_prefix"], ["proof (prove)\nusing this:\n  x < e_length b\n  local.prefixes t j \\<down>= b\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b; ?x < e_length ?b\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?j ?x \\<down>= e_nth ?b ?x\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth b x", "by simp"], ["proof (state)\nthis:\n  ?x < e_length b \\<Longrightarrow> \\<psi> j ?x \\<down>= e_nth b ?x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>In Case~2, the strategy $S$ outputs a non-total hypothesis on\nsome prefix of $\\psi_j$.\\<close>"], ["", "lemma case_two_nontotal_hyp:\n  assumes \"case_two j\"\n  shows \"\\<exists>n<longest_prefix j. \\<not> total1 (\\<phi> (the (s ((\\<psi> j) \\<triangleright> n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "obtain t where \"\\<forall>t'\\<le>t. prefixes t' j \\<down>\" and t_gr: \"\\<forall>t'>t. prefixes t' j \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>\\<forall>t'\\<le>t. local.prefixes t' j \\<down>;\n         \\<forall>t'>t. local.prefixes t' j \\<up>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms case_two"], ["proof (prove)\nusing this:\n  \\<exists>t. local.prefixes t j \\<up>\n  \\<exists>t. local.prefixes t ?j \\<up> \\<Longrightarrow>\n  \\<exists>t.\n     (\\<forall>t'\\<le>t. local.prefixes t' ?j \\<down>) \\<and>\n     (\\<forall>t'>t. local.prefixes t' ?j \\<up>)\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>\\<forall>t'\\<le>t. local.prefixes t' j \\<down>;\n         \\<forall>t'>t. local.prefixes t' j \\<up>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>t'\\<le>t. local.prefixes t' j \\<down>\n  \\<forall>t'>t. local.prefixes t' j \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "then"], ["proof (chain)\npicking this:\n  \\<forall>t'\\<le>t. local.prefixes t' j \\<down>\n  \\<forall>t'>t. local.prefixes t' j \\<up>", "obtain b where b: \"prefixes t j \\<down>= b\""], ["proof (prove)\nusing this:\n  \\<forall>t'\\<le>t. local.prefixes t' j \\<down>\n  \\<forall>t'>t. local.prefixes t' j \\<up>\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        local.prefixes t j \\<down>= b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "moreover"], ["proof (state)\nthis:\n  local.prefixes t j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "obtain i where i: \"s b \\<down>= i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. s b \\<down>= i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using eval_rs"], ["proof (prove)\nusing this:\n  s ?x = eval r_s [?x]\n\ngoal (1 subgoal):\n 1. (\\<And>i. s b \\<down>= i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s b \\<down>= i\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "moreover"], ["proof (state)\nthis:\n  s b \\<down>= i\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "have div: \"prefixes (Suc t) j \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes (Suc t) j \\<up>", "using t_gr"], ["proof (prove)\nusing this:\n  \\<forall>t'>t. local.prefixes t' j \\<up>\n\ngoal (1 subgoal):\n 1. local.prefixes (Suc t) j \\<up>", "by simp"], ["proof (state)\nthis:\n  local.prefixes (Suc t) j \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "ultimately"], ["proof (chain)\npicking this:\n  local.prefixes t j \\<down>= b\n  s b \\<down>= i\n  local.prefixes (Suc t) j \\<up>", "have \"\\<exists>x. \\<phi> i x \\<up>\""], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  s b \\<down>= i\n  local.prefixes (Suc t) j \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<phi> i x \\<up>", "using prefixes_nontotal_hyp"], ["proof (prove)\nusing this:\n  local.prefixes t j \\<down>= b\n  s b \\<down>= i\n  local.prefixes (Suc t) j \\<up>\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b;\n   local.prefixes (Suc ?t) ?j \\<up>; s ?b \\<down>= ?i\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. \\<phi> ?i x \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<phi> i x \\<up>", "by simp"], ["proof (state)\nthis:\n  \\<exists>x. \\<phi> i x \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. \\<phi> i x \\<up>", "obtain x where \"\\<phi> i x \\<up>\""], ["proof (prove)\nusing this:\n  \\<exists>x. \\<phi> i x \\<up>\n\ngoal (1 subgoal):\n 1. (\\<And>x. \\<phi> i x \\<up> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<phi> i x \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "moreover"], ["proof (state)\nthis:\n  \\<phi> i x \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "have init: \"\\<psi> j \\<triangleright> (e_length b - 1) = b\" (is \"_ \\<triangleright> ?n = b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> (e_length b - 1) = b", "using psi_not_divergent_init[OF b]"], ["proof (prove)\nusing this:\n  \\<psi> j \\<triangleright> (e_length b - 1) = b\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> (e_length b - 1) = b", "by simp"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright> (e_length b - 1) = b\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> i x \\<up>\n  \\<psi> j \\<triangleright> (e_length b - 1) = b", "have \"\\<phi> (the (s (\\<psi> j \\<triangleright> ?n))) x \\<up>\""], ["proof (prove)\nusing this:\n  \\<phi> i x \\<up>\n  \\<psi> j \\<triangleright> (e_length b - 1) = b\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))) x \\<up>", "using i"], ["proof (prove)\nusing this:\n  \\<phi> i x \\<up>\n  \\<psi> j \\<triangleright> (e_length b - 1) = b\n  s b \\<down>= i\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))) x \\<up>", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))) x \\<up>\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "then"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))) x \\<up>", "have \"\\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> ?n))))\""], ["proof (prove)\nusing this:\n  \\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))) x \\<up>\n\ngoal (1 subgoal):\n 1. \\<not> total1\n            (\\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))))", "by auto"], ["proof (state)\nthis:\n  \\<not> total1\n          (\\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))))\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "moreover"], ["proof (state)\nthis:\n  \\<not> total1\n          (\\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))))\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "have \"?n < longest_prefix j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length b - 1 < longest_prefix j", "using case_two_psi_longest_prefix init b div psi_eq_nth_prefix"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>t. local.prefixes t ?j \\<up>;\n   ?y = longest_prefix ?j\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x.\n                        0 < x \\<and> x < ?y \\<longrightarrow>\n                        \\<psi> ?j x \\<down>= 0 \\<or>\n                        \\<psi> ?j x \\<down>= 1) \\<and>\n                    (\\<forall>x\\<ge>?y. \\<psi> ?j x \\<up>)\n  \\<psi> j \\<triangleright> (e_length b - 1) = b\n  local.prefixes t j \\<down>= b\n  local.prefixes (Suc t) j \\<up>\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b; ?x < e_length ?b\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?j ?x \\<down>= e_nth ?b ?x\n\ngoal (1 subgoal):\n 1. e_length b - 1 < longest_prefix j", "by (metis length_init lessI not_le_imp_less option.simps(3))"], ["proof (state)\nthis:\n  e_length b - 1 < longest_prefix j\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> total1\n          (\\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))))\n  e_length b - 1 < longest_prefix j", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> total1\n          (\\<phi> (the (s (\\<psi> j \\<triangleright> (e_length b - 1)))))\n  e_length b - 1 < longest_prefix j\n\ngoal (1 subgoal):\n 1. \\<exists>n<longest_prefix j.\n       \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n<longest_prefix j.\n     \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Consequently, in Case~2 the strategy does not TOTAL-learn\nany function starting with the longest prefix of $\\psi_j$.\\<close>"], ["", "lemma case_two_not_learn:\n  assumes \"case_two j\"\n    and \"f \\<in> \\<R>\"\n    and \"\\<And>x. x < longest_prefix j \\<Longrightarrow> f x = \\<psi> j x\"\n  shows \"\\<not> learn_total \\<phi> {f} s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {f} s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {f} s", "obtain n where n:\n    \"n < longest_prefix j\"\n    \"\\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n < longest_prefix j;\n         \\<not> total1\n                 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using case_two_nontotal_hyp[OF assms(1)]"], ["proof (prove)\nusing this:\n  \\<exists>n<longest_prefix j.\n     \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n < longest_prefix j;\n         \\<not> total1\n                 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n < longest_prefix j\n  \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {f} s", "have \"f \\<triangleright> n = \\<psi> j \\<triangleright> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<triangleright> n = \\<psi> j \\<triangleright> n", "using assms(3) n(1)"], ["proof (prove)\nusing this:\n  ?x < longest_prefix j \\<Longrightarrow> f ?x = \\<psi> j ?x\n  n < longest_prefix j\n\ngoal (1 subgoal):\n 1. f \\<triangleright> n = \\<psi> j \\<triangleright> n", "by (intro init_eqI) auto"], ["proof (state)\nthis:\n  f \\<triangleright> n = \\<psi> j \\<triangleright> n\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {f} s", "with n(2)"], ["proof (chain)\npicking this:\n  \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))\n  f \\<triangleright> n = \\<psi> j \\<triangleright> n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> total1 (\\<phi> (the (s (\\<psi> j \\<triangleright> n))))\n  f \\<triangleright> n = \\<psi> j \\<triangleright> n\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {f} s", "by (metis R1_imp_total1 learn_totalE(3) singletonI)"], ["proof (state)\nthis:\n  \\<not> learn_total \\<phi> {f} s\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>In Case~1 the strategy outputs a wrong hypothesis\non infinitely many prefixes of $\\psi_j$ and thus does not\nlearn $\\psi_j$ in the limit, much less in the sense of TOTAL.\\<close>"], ["", "lemma case_one_wrong_hyp:\n  assumes \"case_one j\"\n  shows \"\\<exists>n>k. \\<phi> (the (s ((\\<psi> j) \\<triangleright> n))) \\<noteq> \\<psi> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "have all_t: \"\\<forall>t. prefixes t j \\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. local.prefixes t j \\<down>", "using assms"], ["proof (prove)\nusing this:\n  \\<nexists>t. local.prefixes t j \\<up>\n\ngoal (1 subgoal):\n 1. \\<forall>t. local.prefixes t j \\<down>", "by simp"], ["proof (state)\nthis:\n  \\<forall>t. local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "then"], ["proof (chain)\npicking this:\n  \\<forall>t. local.prefixes t j \\<down>", "obtain b where b: \"prefixes (Suc k) j \\<down>= b\""], ["proof (prove)\nusing this:\n  \\<forall>t. local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        local.prefixes (Suc k) j \\<down>= b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.prefixes (Suc k) j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "then"], ["proof (chain)\npicking this:\n  local.prefixes (Suc k) j \\<down>= b", "have length: \"e_length b > Suc k\""], ["proof (prove)\nusing this:\n  local.prefixes (Suc k) j \\<down>= b\n\ngoal (1 subgoal):\n 1. Suc k < e_length b", "using prefixes_length"], ["proof (prove)\nusing this:\n  local.prefixes (Suc k) j \\<down>= b\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow> ?t < e_length ?b\n\ngoal (1 subgoal):\n 1. Suc k < e_length b", "by simp"], ["proof (state)\nthis:\n  Suc k < e_length b\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "then"], ["proof (chain)\npicking this:\n  Suc k < e_length b", "have init: \"\\<psi> j \\<triangleright> (e_length b - 1) = b\""], ["proof (prove)\nusing this:\n  Suc k < e_length b\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> (e_length b - 1) = b", "using psi_not_divergent_init b"], ["proof (prove)\nusing this:\n  Suc k < e_length b\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow>\n  \\<psi> ?j \\<triangleright> (e_length ?b - 1) = ?b\n  local.prefixes (Suc k) j \\<down>= b\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> (e_length b - 1) = b", "by simp"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright> (e_length b - 1) = b\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "obtain i where i: \"s b \\<down>= i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. s b \\<down>= i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using eval_rs"], ["proof (prove)\nusing this:\n  s ?x = eval r_s [?x]\n\ngoal (1 subgoal):\n 1. (\\<And>i. s b \\<down>= i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s b \\<down>= i\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "from all_t"], ["proof (chain)\npicking this:\n  \\<forall>t. local.prefixes t j \\<down>", "obtain b' where b': \"prefixes (Suc (Suc k)) j \\<down>= b'\""], ["proof (prove)\nusing this:\n  \\<forall>t. local.prefixes t j \\<down>\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        local.prefixes (Suc (Suc k)) j \\<down>= b' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.prefixes (Suc (Suc k)) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "then"], ["proof (chain)\npicking this:\n  local.prefixes (Suc (Suc k)) j \\<down>= b'", "have \"\\<psi> j \\<triangleright> (e_length b' - 1) = b'\""], ["proof (prove)\nusing this:\n  local.prefixes (Suc (Suc k)) j \\<down>= b'\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> (e_length b' - 1) = b'", "using psi_not_divergent_init"], ["proof (prove)\nusing this:\n  local.prefixes (Suc (Suc k)) j \\<down>= b'\n  local.prefixes ?t ?j \\<down>= ?b \\<Longrightarrow>\n  \\<psi> ?j \\<triangleright> (e_length ?b - 1) = ?b\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> (e_length b' - 1) = b'", "by simp"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright> (e_length b' - 1) = b'\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "moreover"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright> (e_length b' - 1) = b'\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "have \"\\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "using nxt_wrong_hyp b b' i prefixes_at_Suc"], ["proof (prove)\nusing this:\n  \\<lbrakk>nxt ?b \\<down>= ?b'; s ?b \\<down>= ?i\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y<e_length ?b'.\n                       \\<phi> ?i y \\<down>\\<noteq> e_nth ?b' y\n  local.prefixes (Suc k) j \\<down>= b\n  local.prefixes (Suc (Suc k)) j \\<down>= b'\n  s b \\<down>= i\n  local.prefixes ?t ?j \\<down> \\<Longrightarrow>\n  local.prefixes (Suc ?t) ?j = nxt (the (local.prefixes ?t ?j))\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "ultimately"], ["proof (chain)\npicking this:\n  \\<psi> j \\<triangleright> (e_length b' - 1) = b'\n  \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y", "have \"\\<exists>y<e_length b'. \\<phi> i y \\<noteq> \\<psi> j y\""], ["proof (prove)\nusing this:\n  \\<psi> j \\<triangleright> (e_length b' - 1) = b'\n  \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<noteq> \\<psi> j y", "using b' psi_eq_nth_prefix"], ["proof (prove)\nusing this:\n  \\<psi> j \\<triangleright> (e_length b' - 1) = b'\n  \\<exists>y<e_length b'. \\<phi> i y \\<down>\\<noteq> e_nth b' y\n  local.prefixes (Suc (Suc k)) j \\<down>= b'\n  \\<lbrakk>local.prefixes ?t ?j \\<down>= ?b; ?x < e_length ?b\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?j ?x \\<down>= e_nth ?b ?x\n\ngoal (1 subgoal):\n 1. \\<exists>y<e_length b'. \\<phi> i y \\<noteq> \\<psi> j y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y<e_length b'. \\<phi> i y \\<noteq> \\<psi> j y\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "then"], ["proof (chain)\npicking this:\n  \\<exists>y<e_length b'. \\<phi> i y \\<noteq> \\<psi> j y", "have \"\\<phi> i \\<noteq> \\<psi> j\""], ["proof (prove)\nusing this:\n  \\<exists>y<e_length b'. \\<phi> i y \\<noteq> \\<psi> j y\n\ngoal (1 subgoal):\n 1. \\<phi> i \\<noteq> \\<psi> j", "by auto"], ["proof (state)\nthis:\n  \\<phi> i \\<noteq> \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "then"], ["proof (chain)\npicking this:\n  \\<phi> i \\<noteq> \\<psi> j", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> i \\<noteq> \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "using init length i"], ["proof (prove)\nusing this:\n  \\<phi> i \\<noteq> \\<psi> j\n  \\<psi> j \\<triangleright> (e_length b - 1) = b\n  Suc k < e_length b\n  s b \\<down>= i\n\ngoal (1 subgoal):\n 1. \\<exists>n>k.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j", "by (metis Suc_less_eq length_init option.sel)"], ["proof (state)\nthis:\n  \\<exists>n>k.\n     \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma case_one_not_learn:\n  assumes \"case_one j\"\n  shows \"\\<not> learn_lim \\<phi> {\\<psi> j} s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> {\\<psi> j} s", "proof (rule infinite_hyp_wrong_not_Lim[of \"\\<psi> j\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<psi> j \\<in> {\\<psi> j}\n 2. \\<forall>n.\n       \\<exists>m>n.\n          \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "show \"\\<psi> j \\<in> {\\<psi> j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> {\\<psi> j}", "by simp"], ["proof (state)\nthis:\n  \\<psi> j \\<in> {\\<psi> j}\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<exists>m>n.\n          \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "show \"\\<forall>n. \\<exists>m>n. \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<exists>m>n.\n          \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "using case_one_wrong_hyp[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>n>?k.\n     \\<phi> (the (s (\\<psi> j \\<triangleright> n))) \\<noteq> \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<exists>m>n.\n          \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "by simp"], ["proof (state)\nthis:\n  \\<forall>n.\n     \\<exists>m>n.\n        \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma case_one_not_learn_V:\n  assumes \"case_one j\" and \"j \\<ge> 2\" and \"\\<phi> j = \\<psi> j\"\n  shows \"\\<not> learn_lim \\<phi> V_constotal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> V_constotal s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> V_constotal s", "have \"\\<psi> j \\<in> V_constotal_1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal_1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal_1", "define p where \"p = (\\<lambda>x. (\\<psi> j) (x + 1))\""], ["proof (state)\nthis:\n  p = (\\<lambda>x. \\<psi> j (x + 1))\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal_1", "have \"p \\<in> \\<R>\\<^sub>0\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "from p_def"], ["proof (chain)\npicking this:\n  p = (\\<lambda>x. \\<psi> j (x + 1))", "have \"p \\<in> \\<P>\""], ["proof (prove)\nusing this:\n  p = (\\<lambda>x. \\<psi> j (x + 1))\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P>", "using skip_P1[of \"\\<psi> j\" 1] psi_in_P2 P2_proj_P1"], ["proof (prove)\nusing this:\n  p = (\\<lambda>x. \\<psi> j (x + 1))\n  \\<psi> j \\<in> \\<P> \\<Longrightarrow>\n  (\\<lambda>x. \\<psi> j (x + 1)) \\<in> \\<P>\n  \\<psi> \\<in> \\<P>\\<^sup>2\n  ?\\<psi> \\<in> \\<P>\\<^sup>2 \\<Longrightarrow> ?\\<psi> ?i \\<in> \\<P>\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P>", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P>\n\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  p \\<in> \\<P>\n\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "have \"p x \\<down>= 0 \\<or> p x \\<down>= 1\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. p x \\<down>= 0 \\<or> p x \\<down>= 1", "using p_def assms(1) case_one_psi_total"], ["proof (prove)\nusing this:\n  p = (\\<lambda>x. \\<psi> j (x + 1))\n  \\<nexists>t. local.prefixes t j \\<up>\n  \\<lbrakk>\\<nexists>t. local.prefixes t ?j \\<up>; 0 < ?x\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?j ?x \\<down>= 0 \\<or> \\<psi> ?j ?x \\<down>= 1\n\ngoal (1 subgoal):\n 1. p x \\<down>= 0 \\<or> p x \\<down>= 1", "by auto"], ["proof (state)\nthis:\n  p ?x \\<down>= 0 \\<or> p ?x \\<down>= 1\n\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  p ?x \\<down>= 0 \\<or> p ?x \\<down>= 1\n\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "from this"], ["proof (chain)\npicking this:\n  p ?x \\<down>= 0 \\<or> p ?x \\<down>= 1", "have \"total1 p\""], ["proof (prove)\nusing this:\n  p ?x \\<down>= 0 \\<or> p ?x \\<down>= 1\n\ngoal (1 subgoal):\n 1. total1 p", "by fast"], ["proof (state)\nthis:\n  total1 p\n\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  p \\<in> \\<P>\n  p ?x \\<down>= 0 \\<or> p ?x \\<down>= 1\n  total1 p", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> \\<P>\n  p ?x \\<down>= 0 \\<or> p ?x \\<down>= 1\n  total1 p\n\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "using RPred1_def"], ["proof (prove)\nusing this:\n  p \\<in> \\<P>\n  p ?x \\<down>= 0 \\<or> p ?x \\<down>= 1\n  total1 p\n  \\<R>\\<^sub>0\\<^sub>1 \\<equiv>\n  {f \\<in> \\<R>. \\<forall>x. f x \\<down>= 0 \\<or> f x \\<down>= 1}\n\ngoal (1 subgoal):\n 1. p \\<in> \\<R>\\<^sub>0\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal_1", "moreover"], ["proof (state)\nthis:\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal_1", "have \"\\<psi> j = [j] \\<odot> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j = [j] \\<odot> p", "by (intro prepend_eqI, simp add: psi_at_0, simp add: p_def)"], ["proof (state)\nthis:\n  \\<psi> j = [j] \\<odot> p\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal_1", "ultimately"], ["proof (chain)\npicking this:\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n  \\<psi> j = [j] \\<odot> p", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n  \\<psi> j = [j] \\<odot> p\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal_1", "using assms(2,3) V_constotal_1_def"], ["proof (prove)\nusing this:\n  p \\<in> \\<R>\\<^sub>0\\<^sub>1\n  \\<psi> j = [j] \\<odot> p\n  2 \\<le> j\n  \\<phi> j = \\<psi> j\n  V_constotal_1 \\<equiv>\n  {f. \\<exists>j p.\n         f = [j] \\<odot> p \\<and>\n         2 \\<le> j \\<and> p \\<in> \\<R>\\<^sub>0\\<^sub>1 \\<and> \\<phi> j = f}\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal_1", "by blast"], ["proof (state)\nthis:\n  \\<psi> j \\<in> V_constotal_1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> j \\<in> V_constotal_1\n\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> V_constotal s", "then"], ["proof (chain)\npicking this:\n  \\<psi> j \\<in> V_constotal_1", "have \"\\<psi> j \\<in> V_constotal\""], ["proof (prove)\nusing this:\n  \\<psi> j \\<in> V_constotal_1\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal", "using V_constotal_def"], ["proof (prove)\nusing this:\n  \\<psi> j \\<in> V_constotal_1\n  V_constotal \\<equiv> V_constotal_1 \\<union> V_constotal_2\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V_constotal", "by auto"], ["proof (state)\nthis:\n  \\<psi> j \\<in> V_constotal\n\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> V_constotal s", "moreover"], ["proof (state)\nthis:\n  \\<psi> j \\<in> V_constotal\n\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> V_constotal s", "have \"\\<not> learn_lim \\<phi> {\\<psi> j} s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> {\\<psi> j} s", "using case_one_not_learn assms(1)"], ["proof (prove)\nusing this:\n  \\<nexists>t. local.prefixes t ?j \\<up> \\<Longrightarrow>\n  \\<not> learn_lim \\<phi> {\\<psi> ?j} s\n  \\<nexists>t. local.prefixes t j \\<up>\n\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> {\\<psi> j} s", "by simp"], ["proof (state)\nthis:\n  \\<not> learn_lim \\<phi> {\\<psi> j} s\n\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> V_constotal s", "ultimately"], ["proof (chain)\npicking this:\n  \\<psi> j \\<in> V_constotal\n  \\<not> learn_lim \\<phi> {\\<psi> j} s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi> j \\<in> V_constotal\n  \\<not> learn_lim \\<phi> {\\<psi> j} s\n\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> V_constotal s", "using learn_lim_closed_subseteq"], ["proof (prove)\nusing this:\n  \\<psi> j \\<in> V_constotal\n  \\<not> learn_lim \\<phi> {\\<psi> j} s\n  \\<lbrakk>learn_lim ?\\<psi> ?U ?s; ?V \\<subseteq> ?U\\<rbrakk>\n  \\<Longrightarrow> learn_lim ?\\<psi> ?V ?s\n\ngoal (1 subgoal):\n 1. \\<not> learn_lim \\<phi> V_constotal s", "by auto"], ["proof (state)\nthis:\n  \\<not> learn_lim \\<phi> V_constotal s\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The next lemma embodies the construction of $\\chi$ followed by\nthe application of Kleene's fixed-point theorem as described in the\nproof sketch.\\<close>"], ["", "lemma goedel_after_prefixes:\n  fixes vs :: \"nat list\" and m :: nat\n  shows \"\\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>", "define f :: partial1 where \"f \\<equiv> vs \\<odot> 0\\<^sup>\\<infinity>\""], ["proof (state)\nthis:\n  f \\<equiv> vs \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>", "then"], ["proof (chain)\npicking this:\n  f \\<equiv> vs \\<odot> 0\\<^sup>\\<infinity>", "have \"f \\<in> \\<R>\""], ["proof (prove)\nusing this:\n  f \\<equiv> vs \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "using almost0_in_R1"], ["proof (prove)\nusing this:\n  f \\<equiv> vs \\<odot> 0\\<^sup>\\<infinity>\n  ?vs \\<odot> 0\\<^sup>\\<infinity> \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. f \\<in> \\<R>", "by auto"], ["proof (state)\nthis:\n  f \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>", "then"], ["proof (chain)\npicking this:\n  f \\<in> \\<R>", "obtain n where n:\n    \"n \\<ge> m\"\n    \"\\<phi> n = (\\<lambda>x. if x = length vs then Some n else f x)\""], ["proof (prove)\nusing this:\n  f \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n;\n         \\<phi> n =\n         (\\<lambda>x. if x = length vs then Some n else f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using goedel_at[of f m \"length vs\"]"], ["proof (prove)\nusing this:\n  f \\<in> \\<R>\n  f \\<in> \\<R> \\<Longrightarrow>\n  \\<exists>n\\<ge>m.\n     \\<phi> n = (\\<lambda>x. if x = length vs then Some n else f x)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n;\n         \\<phi> n =\n         (\\<lambda>x. if x = length vs then Some n else f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n\n  \\<phi> n = (\\<lambda>x. if x = length vs then Some n else f x)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>", "moreover"], ["proof (state)\nthis:\n  m \\<le> n\n  \\<phi> n = (\\<lambda>x. if x = length vs then Some n else f x)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>", "have \"\\<phi> n x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> n x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> n x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) x", "consider \"x < length vs\" | \"x = length vs\" | \"x > length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < length vs \\<Longrightarrow> thesis;\n     x = length vs \\<Longrightarrow> thesis;\n     length vs < x \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>x < length vs \\<Longrightarrow> ?thesis;\n   x = length vs \\<Longrightarrow> ?thesis;\n   length vs < x \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<phi> n x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) x", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>x < length vs \\<Longrightarrow> ?thesis;\n   x = length vs \\<Longrightarrow> ?thesis;\n   length vs < x \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>x < length vs \\<Longrightarrow> ?thesis;\n   x = length vs \\<Longrightarrow> ?thesis;\n   length vs < x \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<phi> n x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) x", "using n f_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>x < length vs \\<Longrightarrow> ?thesis;\n   x = length vs \\<Longrightarrow> ?thesis;\n   length vs < x \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  m \\<le> n\n  \\<phi> n = (\\<lambda>x. if x = length vs then Some n else f x)\n  f \\<equiv> vs \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. \\<phi> n x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) x", "by (cases) (auto simp add: prepend_associative)"], ["proof (state)\nthis:\n  \\<phi> n x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> n ?x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) ?x\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>", "ultimately"], ["proof (chain)\npicking this:\n  m \\<le> n\n  \\<phi> n = (\\<lambda>x. if x = length vs then Some n else f x)\n  \\<phi> n ?x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) ?x", "show ?thesis"], ["proof (prove)\nusing this:\n  m \\<le> n\n  \\<phi> n = (\\<lambda>x. if x = length vs then Some n else f x)\n  \\<phi> n ?x = (vs @ [n] \\<odot> 0\\<^sup>\\<infinity>) ?x\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>", "by blast"], ["proof (state)\nthis:\n  \\<exists>n\\<ge>m. \\<phi> n = vs @ [n] \\<odot> 0\\<^sup>\\<infinity>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If Case~2 holds for a $j\\geq 2$ with $\\varphi_j = \\psi_j$, that\nis, if $\\psi_j\\in V_1$, then there is a function in $V$, namely $\\psi_j$, on\nwhich $S$ fails. Therefore $S$ does not learn $V$.\\<close>"], ["", "lemma case_two_not_learn_V:\n  assumes \"case_two j\" and \"j \\<ge> 2\" and \"\\<phi> j = \\<psi> j\"\n  shows \"\\<not> learn_total \\<phi> V_constotal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "define z where \"z = longest_prefix j\""], ["proof (state)\nthis:\n  z = longest_prefix j\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "then"], ["proof (chain)\npicking this:\n  z = longest_prefix j", "have \"z > 0\""], ["proof (prove)\nusing this:\n  z = longest_prefix j\n\ngoal (1 subgoal):\n 1. 0 < z", "using longest_prefix_gr_0[OF assms(1)]"], ["proof (prove)\nusing this:\n  z = longest_prefix j\n  0 < longest_prefix j\n\ngoal (1 subgoal):\n 1. 0 < z", "by simp"], ["proof (state)\nthis:\n  0 < z\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "define vs where \"vs = prefix (\\<psi> j) (z - 1)\""], ["proof (state)\nthis:\n  vs = prefix (\\<psi> j) (z - 1)\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "then"], ["proof (chain)\npicking this:\n  vs = prefix (\\<psi> j) (z - 1)", "have \"vs ! 0 = j\""], ["proof (prove)\nusing this:\n  vs = prefix (\\<psi> j) (z - 1)\n\ngoal (1 subgoal):\n 1. vs ! 0 = j", "using psi_at_0 \\<open>z > 0\\<close>"], ["proof (prove)\nusing this:\n  vs = prefix (\\<psi> j) (z - 1)\n  \\<psi> ?j 0 \\<down>= ?j\n  0 < z\n\ngoal (1 subgoal):\n 1. vs ! 0 = j", "by simp"], ["proof (state)\nthis:\n  vs ! 0 = j\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "define a where \"a = tl vs\""], ["proof (state)\nthis:\n  a = tl vs\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "then"], ["proof (chain)\npicking this:\n  a = tl vs", "have vs: \"vs = j # a\""], ["proof (prove)\nusing this:\n  a = tl vs\n\ngoal (1 subgoal):\n 1. vs = j # a", "using vs_def \\<open>vs ! 0 = j\\<close>"], ["proof (prove)\nusing this:\n  a = tl vs\n  vs = prefix (\\<psi> j) (z - 1)\n  vs ! 0 = j\n\ngoal (1 subgoal):\n 1. vs = j # a", "by (metis length_Suc_conv length_prefix list.sel(3) nth_Cons_0)"], ["proof (state)\nthis:\n  vs = j # a\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "obtain k where k: \"k \\<ge> 2\" and phi_k: \"\\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>2 \\<le> k;\n         \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using goedel_after_prefixes[of 2 \"j # a\"]"], ["proof (prove)\nusing this:\n  \\<exists>n\\<ge>2. \\<phi> n = (j # a) @ [n] \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>2 \\<le> k;\n         \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  2 \\<le> k\n  \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "have phi_j: \"\\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>", "proof (rule prepend_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x < length (j # a) \\<Longrightarrow> \\<phi> j x \\<down>= (j # a) ! x\n 2. \\<And>x. \\<phi> j (length (j # a) + x) \\<up>", "show \"\\<And>x. x < length (j # a) \\<Longrightarrow> \\<phi> j x \\<down>= (j # a) ! x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < length (j # a) \\<Longrightarrow> \\<phi> j x \\<down>= (j # a) ! x", "using assms(1,3) vs vs_def \\<open>0 < z\\<close>\n        length_prefix[of \"\\<psi> j\" \"z - 1\"]\n        prefix_nth[of _ _ \"\\<psi> j\"]\n        psi_at_0[of j]\n        case_two_psi_longest_prefix[OF _ z_def]\n        longest_prefix[OF _ z_def]"], ["proof (prove)\nusing this:\n  \\<exists>t. local.prefixes t j \\<up>\n  \\<phi> j = \\<psi> j\n  vs = j # a\n  vs = prefix (\\<psi> j) (z - 1)\n  0 < z\n  length (prefix (\\<psi> j) (z - 1)) = Suc (z - 1)\n  ?k < Suc ?n \\<Longrightarrow>\n  prefix (\\<psi> j) ?n ! ?k = the (\\<psi> j ?k)\n  \\<psi> j 0 \\<down>= j\n  \\<exists>t. local.prefixes t j \\<up> \\<Longrightarrow>\n  (\\<forall>x.\n      0 < x \\<and> x < z \\<longrightarrow>\n      \\<psi> j x \\<down>= 0 \\<or> \\<psi> j x \\<down>= 1) \\<and>\n  (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)\n  \\<exists>t. local.prefixes t j \\<up> \\<Longrightarrow>\n  (\\<forall>x<z. \\<psi> j x \\<down>) \\<and>\n  (\\<forall>x\\<ge>z. \\<psi> j x \\<up>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < length (j # a) \\<Longrightarrow> \\<phi> j x \\<down>= (j # a) ! x", "by (metis One_nat_def Suc_pred option.collapse)"], ["proof (state)\nthis:\n  ?x < length (j # a) \\<Longrightarrow> \\<phi> j ?x \\<down>= (j # a) ! ?x\n\ngoal (1 subgoal):\n 1. \\<And>x. \\<phi> j (length (j # a) + x) \\<up>", "show \"\\<And>x. \\<phi> j (length (j # a) + x) \\<up>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. \\<phi> j (length (j # a) + x) \\<up>", "using assms(3) vs_def"], ["proof (prove)\nusing this:\n  \\<phi> j = \\<psi> j\n  vs = prefix (\\<psi> j) (z - 1)\n\ngoal (1 subgoal):\n 1. \\<And>x. \\<phi> j (length (j # a) + x) \\<up>", "by (simp add: vs assms(1) case_two_psi_longest_prefix z_def)"], ["proof (state)\nthis:\n  \\<phi> j (length (j # a) + ?x) \\<up>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "moreover"], ["proof (state)\nthis:\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "have \"\\<phi> k \\<in> V_constotal_2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> k \\<in> V_constotal_2", "proof (intro V_constotal_2I[of _ j a k])"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n 2. 2 \\<le> j\n 3. \\<forall>i<length a. a ! i \\<le> 1\n 4. 2 \\<le> k\n 5. \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n 6. \\<phi> k = \\<phi> k", "show \"\\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>", "using phi_k"], ["proof (prove)\nusing this:\n  \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>", "."], ["proof (state)\nthis:\n  \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n\ngoal (5 subgoals):\n 1. 2 \\<le> j\n 2. \\<forall>i<length a. a ! i \\<le> 1\n 3. 2 \\<le> k\n 4. \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n 5. \\<phi> k = \\<phi> k", "show \"2 \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> j", "using \\<open>2 \\<le> j\\<close>"], ["proof (prove)\nusing this:\n  2 \\<le> j\n\ngoal (1 subgoal):\n 1. 2 \\<le> j", "."], ["proof (state)\nthis:\n  2 \\<le> j\n\ngoal (4 subgoals):\n 1. \\<forall>i<length a. a ! i \\<le> 1\n 2. 2 \\<le> k\n 3. \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n 4. \\<phi> k = \\<phi> k", "show \"2 \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> k", "using \\<open>2 \\<le> k\\<close>"], ["proof (prove)\nusing this:\n  2 \\<le> k\n\ngoal (1 subgoal):\n 1. 2 \\<le> k", "."], ["proof (state)\nthis:\n  2 \\<le> k\n\ngoal (3 subgoals):\n 1. \\<forall>i<length a. a ! i \\<le> 1\n 2. \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n 3. \\<phi> k = \\<phi> k", "show \"\\<forall>i<length a. a ! i \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length a. a ! i \\<le> 1", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < length a \\<Longrightarrow> a ! i \\<le> 1", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < length a \\<Longrightarrow> a ! i \\<le> 1", "assume i: \"i < length a\""], ["proof (state)\nthis:\n  i < length a\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length a \\<Longrightarrow> a ! i \\<le> 1", "then"], ["proof (chain)\npicking this:\n  i < length a", "have \"Suc i < z\""], ["proof (prove)\nusing this:\n  i < length a\n\ngoal (1 subgoal):\n 1. Suc i < z", "using z_def vs_def length_prefix \\<open>0 < z\\<close> vs"], ["proof (prove)\nusing this:\n  i < length a\n  z = longest_prefix j\n  vs = prefix (\\<psi> j) (z - 1)\n  length (prefix ?f ?n) = Suc ?n\n  0 < z\n  vs = j # a\n\ngoal (1 subgoal):\n 1. Suc i < z", "by (metis One_nat_def Suc_mono Suc_pred length_Cons)"], ["proof (state)\nthis:\n  Suc i < z\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length a \\<Longrightarrow> a ! i \\<le> 1", "have \"a ! i = vs ! (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ! i = vs ! Suc i", "using vs"], ["proof (prove)\nusing this:\n  vs = j # a\n\ngoal (1 subgoal):\n 1. a ! i = vs ! Suc i", "by simp"], ["proof (state)\nthis:\n  a ! i = vs ! Suc i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length a \\<Longrightarrow> a ! i \\<le> 1", "also"], ["proof (state)\nthis:\n  a ! i = vs ! Suc i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length a \\<Longrightarrow> a ! i \\<le> 1", "have \"... = the (\\<psi> j (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vs ! Suc i = the (\\<psi> j (Suc i))", "using vs_def vs i length_Cons length_prefix prefix_nth"], ["proof (prove)\nusing this:\n  vs = prefix (\\<psi> j) (z - 1)\n  vs = j # a\n  i < length a\n  length (?x # ?xs) = Suc (length ?xs)\n  length (prefix ?f ?n) = Suc ?n\n  ?k < Suc ?n \\<Longrightarrow> prefix ?f ?n ! ?k = the (?f ?k)\n\ngoal (1 subgoal):\n 1. vs ! Suc i = the (\\<psi> j (Suc i))", "by (metis Suc_mono)"], ["proof (state)\nthis:\n  vs ! Suc i = the (\\<psi> j (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length a \\<Longrightarrow> a ! i \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  a ! i = the (\\<psi> j (Suc i))", "show \"a ! i \\<le> 1\""], ["proof (prove)\nusing this:\n  a ! i = the (\\<psi> j (Suc i))\n\ngoal (1 subgoal):\n 1. a ! i \\<le> 1", "using case_two_psi_longest_prefix \\<open>Suc i < z\\<close> z_def"], ["proof (prove)\nusing this:\n  a ! i = the (\\<psi> j (Suc i))\n  \\<lbrakk>\\<exists>t. local.prefixes t ?j \\<up>;\n   ?y = longest_prefix ?j\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x.\n                        0 < x \\<and> x < ?y \\<longrightarrow>\n                        \\<psi> ?j x \\<down>= 0 \\<or>\n                        \\<psi> ?j x \\<down>= 1) \\<and>\n                    (\\<forall>x\\<ge>?y. \\<psi> ?j x \\<up>)\n  Suc i < z\n  z = longest_prefix j\n\ngoal (1 subgoal):\n 1. a ! i \\<le> 1", "by (metis assms(1) less_or_eq_imp_le not_le_imp_less not_one_less_zero\n          option.sel zero_less_Suc)"], ["proof (state)\nthis:\n  a ! i \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length a. a ! i \\<le> 1\n\ngoal (2 subgoals):\n 1. \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n 2. \\<phi> k = \\<phi> k", "qed (auto simp add: phi_j)"], ["proof (state)\nthis:\n  \\<phi> k \\<in> V_constotal_2\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "then"], ["proof (chain)\npicking this:\n  \\<phi> k \\<in> V_constotal_2", "have \"\\<phi> k \\<in> V_constotal\""], ["proof (prove)\nusing this:\n  \\<phi> k \\<in> V_constotal_2\n\ngoal (1 subgoal):\n 1. \\<phi> k \\<in> V_constotal", "using V_constotal_def"], ["proof (prove)\nusing this:\n  \\<phi> k \\<in> V_constotal_2\n  V_constotal \\<equiv> V_constotal_1 \\<union> V_constotal_2\n\ngoal (1 subgoal):\n 1. \\<phi> k \\<in> V_constotal", "by auto"], ["proof (state)\nthis:\n  \\<phi> k \\<in> V_constotal\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "moreover"], ["proof (state)\nthis:\n  \\<phi> k \\<in> V_constotal\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "have \"\\<not> learn_total \\<phi> {\\<phi> k} s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {\\<phi> k} s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {\\<phi> k} s", "have \"\\<phi> k \\<in> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> k \\<in> \\<R>", "by (simp add: phi_k almost0_in_R1)"], ["proof (state)\nthis:\n  \\<phi> k \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {\\<phi> k} s", "moreover"], ["proof (state)\nthis:\n  \\<phi> k \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {\\<phi> k} s", "have \"\\<And>x. x < longest_prefix j \\<Longrightarrow> \\<phi> k x = \\<psi> j x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x < longest_prefix j \\<Longrightarrow> \\<phi> k x = \\<psi> j x", "using phi_k vs_def z_def length_prefix phi_j prepend_associative prepend_at_less"], ["proof (prove)\nusing this:\n  \\<phi> k = j # a @ [k] \\<odot> 0\\<^sup>\\<infinity>\n  vs = prefix (\\<psi> j) (z - 1)\n  z = longest_prefix j\n  length (prefix ?f ?n) = Suc ?n\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  ?us @ ?vs \\<odot> ?f = ?us \\<odot> ?vs \\<odot> ?f\n  ?n < length ?vs \\<Longrightarrow> (?vs \\<odot> ?f) ?n \\<down>= ?vs ! ?n\n\ngoal (1 subgoal):\n 1. \\<And>x. x < longest_prefix j \\<Longrightarrow> \\<phi> k x = \\<psi> j x", "by (metis One_nat_def Suc_pred \\<open>0 < z\\<close> \\<open>vs = j # a\\<close> append_Cons assms(3))"], ["proof (state)\nthis:\n  ?x < longest_prefix j \\<Longrightarrow> \\<phi> k ?x = \\<psi> j ?x\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {\\<phi> k} s", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> k \\<in> \\<R>\n  ?x < longest_prefix j \\<Longrightarrow> \\<phi> k ?x = \\<psi> j ?x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> k \\<in> \\<R>\n  ?x < longest_prefix j \\<Longrightarrow> \\<phi> k ?x = \\<psi> j ?x\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {\\<phi> k} s", "using case_two_not_learn[OF assms(1)]"], ["proof (prove)\nusing this:\n  \\<phi> k \\<in> \\<R>\n  ?x < longest_prefix j \\<Longrightarrow> \\<phi> k ?x = \\<psi> j ?x\n  \\<lbrakk>?f \\<in> \\<R>;\n   \\<And>x.\n      x < longest_prefix j \\<Longrightarrow> ?f x = \\<psi> j x\\<rbrakk>\n  \\<Longrightarrow> \\<not> learn_total \\<phi> {?f} s\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> {\\<phi> k} s", "by simp"], ["proof (state)\nthis:\n  \\<not> learn_total \\<phi> {\\<phi> k} s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> learn_total \\<phi> {\\<phi> k} s\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k \\<in> V_constotal\n  \\<not> learn_total \\<phi> {\\<phi> k} s", "show \"\\<not> learn_total \\<phi> V_constotal s\""], ["proof (prove)\nusing this:\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k \\<in> V_constotal\n  \\<not> learn_total \\<phi> {\\<phi> k} s\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "using learn_total_closed_subseteq"], ["proof (prove)\nusing this:\n  \\<phi> j = j # a \\<odot> \\<up>\\<^sup>\\<infinity>\n  \\<phi> k \\<in> V_constotal\n  \\<not> learn_total \\<phi> {\\<phi> k} s\n  \\<lbrakk>learn_total ?\\<psi> ?U ?s; ?V \\<subseteq> ?U\\<rbrakk>\n  \\<Longrightarrow> learn_total ?\\<psi> ?V ?s\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "by auto"], ["proof (state)\nthis:\n  \\<not> learn_total \\<phi> V_constotal s\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The strategy $S$ does not learn $V$ in either case.\\<close>"], ["", "lemma not_learn_total_V: \"\\<not> learn_total \\<phi> V_constotal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "obtain j where \"j \\<ge> 2\" \"\\<phi> j = \\<psi> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>2 \\<le> j; \\<phi> j = \\<psi> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using kleene_fixed_point psi_in_P2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<psi> \\<in> \\<P>\\<^sup>2;\n   \\<And>i.\n      \\<lbrakk>?k \\<le> i; \\<phi> i = ?\\<psi> i\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<psi> \\<in> \\<P>\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>2 \\<le> j; \\<phi> j = \\<psi> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  2 \\<le> j\n  \\<phi> j = \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "then"], ["proof (chain)\npicking this:\n  2 \\<le> j\n  \\<phi> j = \\<psi> j", "show ?thesis"], ["proof (prove)\nusing this:\n  2 \\<le> j\n  \\<phi> j = \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "using case_one_not_learn_V learn_total_def case_two_not_learn_V"], ["proof (prove)\nusing this:\n  2 \\<le> j\n  \\<phi> j = \\<psi> j\n  \\<lbrakk>\\<nexists>t. local.prefixes t ?j \\<up>; 2 \\<le> ?j;\n   \\<phi> ?j = \\<psi> ?j\\<rbrakk>\n  \\<Longrightarrow> \\<not> learn_lim \\<phi> V_constotal s\n  learn_total ?\\<psi> ?U ?s \\<equiv>\n  learn_lim ?\\<psi> ?U ?s \\<and>\n  (\\<forall>f\\<in>?U.\n      \\<forall>n. ?\\<psi> (the (?s (f \\<triangleright> n))) \\<in> \\<R>)\n  \\<lbrakk>\\<exists>t. local.prefixes t ?j \\<up>; 2 \\<le> ?j;\n   \\<phi> ?j = \\<psi> ?j\\<rbrakk>\n  \\<Longrightarrow> \\<not> learn_total \\<phi> V_constotal s\n\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s", "by (cases \"case_two j\") auto"], ["proof (state)\nthis:\n  \\<not> learn_total \\<phi> V_constotal s\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma V_not_in_TOTAL: \"V_constotal \\<notin> TOTAL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V_constotal \\<notin> TOTAL", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> V_constotal \\<notin> TOTAL \\<Longrightarrow> False", "assume \"\\<not> V_constotal \\<notin> TOTAL\""], ["proof (state)\nthis:\n  \\<not> V_constotal \\<notin> TOTAL\n\ngoal (1 subgoal):\n 1. \\<not> V_constotal \\<notin> TOTAL \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> V_constotal \\<notin> TOTAL", "have \"V_constotal \\<in> TOTAL\""], ["proof (prove)\nusing this:\n  \\<not> V_constotal \\<notin> TOTAL\n\ngoal (1 subgoal):\n 1. V_constotal \\<in> TOTAL", "by simp"], ["proof (state)\nthis:\n  V_constotal \\<in> TOTAL\n\ngoal (1 subgoal):\n 1. \\<not> V_constotal \\<notin> TOTAL \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V_constotal \\<in> TOTAL", "have \"V_constotal \\<in> TOTAL_wrt \\<phi>\""], ["proof (prove)\nusing this:\n  V_constotal \\<in> TOTAL\n\ngoal (1 subgoal):\n 1. V_constotal \\<in> TOTAL_wrt \\<phi>", "by (simp add: TOTAL_wrt_phi_eq_TOTAL)"], ["proof (state)\nthis:\n  V_constotal \\<in> TOTAL_wrt \\<phi>\n\ngoal (1 subgoal):\n 1. \\<not> V_constotal \\<notin> TOTAL \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  V_constotal \\<in> TOTAL_wrt \\<phi>", "obtain s where \"learn_total \\<phi> V_constotal s\""], ["proof (prove)\nusing this:\n  V_constotal \\<in> TOTAL_wrt \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        learn_total \\<phi> V_constotal s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using TOTAL_wrt_def"], ["proof (prove)\nusing this:\n  V_constotal \\<in> TOTAL_wrt \\<phi>\n  TOTAL_wrt ?\\<psi> \\<equiv> {U. \\<exists>s. learn_total ?\\<psi> U s}\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        learn_total \\<phi> V_constotal s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  learn_total \\<phi> V_constotal s\n\ngoal (1 subgoal):\n 1. \\<not> V_constotal \\<notin> TOTAL \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  learn_total \\<phi> V_constotal s", "obtain s' where s': \"s' \\<in> \\<R>\" \"learn_total \\<phi> V_constotal s'\""], ["proof (prove)\nusing this:\n  learn_total \\<phi> V_constotal s\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> \\<R>; learn_total \\<phi> V_constotal s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lemma_R_for_TOTAL_simple"], ["proof (prove)\nusing this:\n  learn_total \\<phi> V_constotal s\n  learn_total ?\\<psi> ?U ?s \\<Longrightarrow>\n  \\<exists>s'\\<in>\\<R>. learn_total ?\\<psi> ?U s'\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> \\<R>; learn_total \\<phi> V_constotal s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s' \\<in> \\<R>\n  learn_total \\<phi> V_constotal s'\n\ngoal (1 subgoal):\n 1. \\<not> V_constotal \\<notin> TOTAL \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  s' \\<in> \\<R>\n  learn_total \\<phi> V_constotal s'", "interpret total_cons s'"], ["proof (prove)\nusing this:\n  s' \\<in> \\<R>\n  learn_total \\<phi> V_constotal s'\n\ngoal (1 subgoal):\n 1. total_cons s'", "by (simp add: total_cons_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> V_constotal \\<notin> TOTAL \\<Longrightarrow> False", "have \"\\<not> learn_total \\<phi> V_constotal s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_total \\<phi> V_constotal s'", "by (simp add: not_learn_total_V)"], ["proof (state)\nthis:\n  \\<not> learn_total \\<phi> V_constotal s'\n\ngoal (1 subgoal):\n 1. \\<not> V_constotal \\<notin> TOTAL \\<Longrightarrow> False", "with s'(2)"], ["proof (chain)\npicking this:\n  learn_total \\<phi> V_constotal s'\n  \\<not> learn_total \\<phi> V_constotal s'", "show False"], ["proof (prove)\nusing this:\n  learn_total \\<phi> V_constotal s'\n  \\<not> learn_total \\<phi> V_constotal s'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma TOTAL_neq_CONS: \"TOTAL \\<noteq> CONS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TOTAL \\<noteq> CONS", "using V_not_in_TOTAL V_in_CONS CONS_def"], ["proof (prove)\nusing this:\n  V_constotal \\<notin> TOTAL\n  learn_cons \\<phi> V_constotal rmge2\n  CONS \\<equiv> {U. \\<exists>\\<psi> s. learn_cons \\<psi> U s}\n\ngoal (1 subgoal):\n 1. TOTAL \\<noteq> CONS", "by auto"], ["", "text \\<open>The main result of this section:\\<close>"], ["", "theorem TOTAL_subset_CONS: \"TOTAL \\<subset> CONS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TOTAL \\<subset> CONS", "using TOTAL_subseteq_CONS TOTAL_neq_CONS"], ["proof (prove)\nusing this:\n  TOTAL \\<subseteq> CONS\n  TOTAL \\<noteq> CONS\n\ngoal (1 subgoal):\n 1. TOTAL \\<subset> CONS", "by simp"], ["", "end"]]}