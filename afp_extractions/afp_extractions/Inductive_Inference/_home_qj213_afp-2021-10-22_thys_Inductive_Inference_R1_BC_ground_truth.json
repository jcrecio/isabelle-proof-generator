{"file_name": "/home/qj213/afp-2021-10-22/thys/Inductive_Inference/R1_BC.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Inductive_Inference", "problem_names": ["lemma s_learn_prenum: \"\\<And>b. learn_bc \\<phi> {prenum b} s\"", "lemma r_s_recfn [simp]: \"recfn 1 r_s\"\n  and r_s_total: \"\\<And>x. eval r_s [x] \\<down>\"\n  and eval_r_s: \"\\<And>x. s x = eval r_s [x]\"", "lemma r_find_k_recfn [simp]: \"recfn 1 r_find_k\"", "lemma learn_bc_prenum_eventually_zero:\n  \"\\<exists>k. \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\"", "lemma if_eq_eq: \"(if v = 1 then (0 :: nat) else 1) = 0 \\<Longrightarrow> v = 1\"", "lemma r_find_k:\n  shows \"eval r_find_k [b] \\<down>\"\n    and \"let k = the (eval r_find_k [b])\n           in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\"", "lemma r_find_k_total: \"total r_find_k\"", "lemma r_prefixes_recfn: \"recfn 2 r_prefixes\"", "lemma r_prefixes_total: \"total r_prefixes\"", "lemma r_prefixes_0: \"eval r_prefixes [0, j] \\<down>= list_encode [j]\"", "lemma r_prefixes_Suc:\n  \"eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)\"", "lemma prefixes_Suc:\n  \"prefixes j (Suc t) =\n    e_snoc (e_append_zeros (prefixes j t) (the (eval r_find_k [prefixes j t]))) 1\"", "lemma prefixes_Suc_length:\n  \"e_length (prefixes j (Suc t)) =\n    Suc (e_length (prefixes j t) + the (eval r_find_k [prefixes j t]))\"", "lemma prefixes_length_mono: \"e_length (prefixes j t) < e_length (prefixes j (Suc t))\"", "lemma prefixes_length_mono': \"e_length (prefixes j t) \\<le> e_length (prefixes j (t + d))\"", "lemma prefixes_length_lower_bound: \"e_length (prefixes j t) \\<ge> Suc t\"", "lemma prefixes_Suc_nth:\n  assumes \"x < e_length (prefixes j t)\"\n  shows \"e_nth (prefixes j t) x = e_nth (prefixes j (Suc t)) x\"", "lemma prefixes_Suc_last: \"e_nth (prefixes j (Suc t)) (e_length (prefixes j (Suc t)) - 1) = 1\"", "lemma prefixes_le_nth:\n  assumes \"x < e_length (prefixes j t)\"\n  shows \"e_nth (prefixes j t) x = e_nth (prefixes j (t + d)) x\"", "lemma psi_in_R2: \"\\<psi> \\<in> \\<R>\\<^sup>2\"", "lemma psi_eq_nth_prefixes:\n  assumes \"x < e_length (prefixes j t)\"\n  shows \"\\<psi> j x \\<down>= e_nth (prefixes j t) x\"", "lemma psi_at_0: \"\\<psi> j 0 \\<down>= j\"", "lemma prefixes_init_psi: \"\\<psi> j \\<triangleright> (e_length (prefixes j (Suc t)) - 1) = prefixes j (Suc t)\"", "lemma hyp_wrong_at_last:\n  \"\\<phi> (the (s (e_butlast (prefixes j (Suc t))))) (e_length (prefixes j (Suc t)) - 1) \\<noteq>\n   \\<psi> j (e_length (prefixes j (Suc t)) - 1)\"\n  (is \"?lhs \\<noteq> ?rhs\")", "lemma infinite_hyp_wrong: \"\\<exists>m>n. \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\"", "lemma U0_V0_not_learn_bc: \"\\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s\"", "lemma U0_V0_not_in_BC: \"U\\<^sub>0 \\<union> V\\<^sub>0 \\<notin> BC\"", "theorem R1_not_in_BC: \"\\<R> \\<notin> BC\""], "translations": [["", "lemma s_learn_prenum: \"\\<And>b. learn_bc \\<phi> {prenum b} s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. learn_bc \\<phi> {prenum b} s", "using s_learn_U0 U0_altdef learn_bc_closed_subseteq"], ["proof (prove)\nusing this:\n  learn_bc \\<phi> U\\<^sub>0 s\n  U\\<^sub>0 = {prenum e |e. e \\<in> UNIV}\n  \\<lbrakk>learn_bc ?\\<psi> ?U ?s; ?V \\<subseteq> ?U\\<rbrakk>\n  \\<Longrightarrow> learn_bc ?\\<psi> ?V ?s\n\ngoal (1 subgoal):\n 1. \\<And>b. learn_bc \\<phi> {prenum b} s", "by blast"], ["", "text \\<open>A @{typ recf} for the strategy:\\<close>"], ["", "definition r_s :: recf where\n  \"r_s \\<equiv> SOME rs. recfn 1 rs \\<and>  total rs \\<and> s = (\\<lambda>x. eval rs [x])\""], ["", "lemma r_s_recfn [simp]: \"recfn 1 r_s\"\n  and r_s_total: \"\\<And>x. eval r_s [x] \\<down>\"\n  and eval_r_s: \"\\<And>x. s x = eval r_s [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 r_s &&&\n    (\\<And>x. eval r_s [x] \\<down>) &&& (\\<And>x. s x = eval r_s [x])", "using r_s_def R1_SOME[OF s_in_R1, of r_s]"], ["proof (prove)\nusing this:\n  r_s \\<equiv>\n  SOME rs.\n     recfn 1 rs \\<and>\n     Partial_Recursive.total rs \\<and> s = (\\<lambda>x. eval rs [x])\n  r_s =\n  (SOME r'.\n      recfn 1 r' \\<and>\n      Partial_Recursive.total r' \\<and>\n      s = (\\<lambda>x. eval r' [x])) \\<Longrightarrow>\n  recfn 1 r_s\n  r_s =\n  (SOME r'.\n      recfn 1 r' \\<and>\n      Partial_Recursive.total r' \\<and>\n      s = (\\<lambda>x. eval r' [x])) \\<Longrightarrow>\n  eval r_s [?x] \\<down>\n  r_s =\n  (SOME r'.\n      recfn 1 r' \\<and>\n      Partial_Recursive.total r' \\<and>\n      s = (\\<lambda>x. eval r' [x])) \\<Longrightarrow>\n  s ?x = eval r_s [?x]\n  r_s =\n  (SOME r'.\n      recfn 1 r' \\<and>\n      Partial_Recursive.total r' \\<and>\n      s = (\\<lambda>x. eval r' [x])) \\<Longrightarrow>\n  s = (\\<lambda>x. eval r_s [x])\n\ngoal (1 subgoal):\n 1. recfn 1 r_s &&&\n    (\\<And>x. eval r_s [x] \\<down>) &&& (\\<And>x. s x = eval r_s [x])", "by simp_all"], ["", "text \\<open>We begin with the function that finds the $k$ from Step~1 of the\nconstruction of $\\psi$.\\<close>"], ["", "definition \"r_find_k \\<equiv>\n  let k = Cn 2 r_pdec1 [Id 2 0];\n      r = Cn 2 r_result1\n        [Cn 2 r_pdec2 [Id 2 0],\n        Cn 2 r_s [Cn 2 r_append_zeros [Id 2 1, k]],\n        Cn 2 r_add [Cn 2 r_length [Id 2 1], k]]\n  in Cn 1 r_pdec1 [Mn 1 (Cn 2 r_eq [r, r_constn 1 1])]\""], ["", "lemma r_find_k_recfn [simp]: \"recfn 1 r_find_k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 r_find_k", "unfolding r_find_k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1\n     (let k = Cn 2 r_pdec1 [recf.Id 2 0];\n          r = Cn 2 r_result1\n               [Cn 2 r_pdec2 [recf.Id 2 0],\n                Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n                Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n      in Cn 1 r_pdec1 [Mn 1 (Cn 2 r_eq [r, r_constn 1 1])])", "by (simp add: Let_def)"], ["", "text \\<open>There is always a suitable $k$, since the strategy learns\n$b0^\\infty$ for all $b$.\\<close>"], ["", "lemma learn_bc_prenum_eventually_zero:\n  \"\\<exists>k. \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "let ?f = \"prenum b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"\\<exists>n\\<ge>e_length b. \\<phi> (the (s (?f \\<triangleright> n))) = ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>e_length b.\n       \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b", "using learn_bcE s_learn_prenum"], ["proof (prove)\nusing this:\n  learn_bc ?\\<psi> ?U ?s \\<Longrightarrow> environment ?\\<psi> ?U ?s\n  \\<lbrakk>learn_bc ?\\<psi> ?U ?s; ?f \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n\\<^sub>0.\n                       \\<forall>n\\<ge>n\\<^sub>0.\n                          ?\\<psi> (the (?s (?f \\<triangleright> n))) = ?f\n  learn_bc \\<phi> {prenum ?b} s\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<ge>e_length b.\n       \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b", "by (meson le_cases singletonI)"], ["proof (state)\nthis:\n  \\<exists>n\\<ge>e_length b.\n     \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<ge>e_length b.\n     \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b", "obtain n where n: \"n \\<ge> e_length b\" \"\\<phi> (the (s (?f \\<triangleright> n))) = ?f\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<ge>e_length b.\n     \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>e_length b \\<le> n;\n         \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e_length b \\<le> n\n  \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "define k where \"k = Suc n - e_length b\""], ["proof (state)\nthis:\n  k = Suc n - e_length b\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "let ?e = \"e_append_zeros b k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have len: \"e_length ?e = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length (e_append_zeros b k) = Suc n", "using k_def n e_append_zeros_length"], ["proof (prove)\nusing this:\n  k = Suc n - e_length b\n  e_length b \\<le> n\n  \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b\n  e_length (e_append_zeros ?b ?z) = e_length ?b + ?z\n\ngoal (1 subgoal):\n 1. e_length (e_append_zeros b k) = Suc n", "by simp"], ["proof (state)\nthis:\n  e_length (e_append_zeros b k) = Suc n\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"?f \\<triangleright> n = ?e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prenum b \\<triangleright> n = e_append_zeros b k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prenum b \\<triangleright> n = e_append_zeros b k", "have \"e_length ?e > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < e_length (e_append_zeros b k)", "using len n(1)"], ["proof (prove)\nusing this:\n  e_length (e_append_zeros b k) = Suc n\n  e_length b \\<le> n\n\ngoal (1 subgoal):\n 1. 0 < e_length (e_append_zeros b k)", "by simp"], ["proof (state)\nthis:\n  0 < e_length (e_append_zeros b k)\n\ngoal (1 subgoal):\n 1. prenum b \\<triangleright> n = e_append_zeros b k", "moreover"], ["proof (state)\nthis:\n  0 < e_length (e_append_zeros b k)\n\ngoal (1 subgoal):\n 1. prenum b \\<triangleright> n = e_append_zeros b k", "have \"?f x \\<down>= e_nth ?e x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. prenum b x \\<down>= e_nth (e_append_zeros b k) x", "proof (cases \"x < e_length b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x\n 2. \\<not> x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x", "case True"], ["proof (state)\nthis:\n  x < e_length b\n\ngoal (2 subgoals):\n 1. x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x\n 2. \\<not> x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x", "then"], ["proof (chain)\npicking this:\n  x < e_length b", "show ?thesis"], ["proof (prove)\nusing this:\n  x < e_length b\n\ngoal (1 subgoal):\n 1. prenum b x \\<down>= e_nth (e_append_zeros b k) x", "using e_nth_append_zeros"], ["proof (prove)\nusing this:\n  x < e_length b\n  e_nth (e_append_zeros ?b ?z) ?i = e_nth ?b ?i\n\ngoal (1 subgoal):\n 1. prenum b x \\<down>= e_nth (e_append_zeros b k) x", "by simp"], ["proof (state)\nthis:\n  prenum b x \\<down>= e_nth (e_append_zeros b k) x\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x", "case False"], ["proof (state)\nthis:\n  \\<not> x < e_length b\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x", "then"], ["proof (chain)\npicking this:\n  \\<not> x < e_length b", "have \"?f x \\<down>= 0\""], ["proof (prove)\nusing this:\n  \\<not> x < e_length b\n\ngoal (1 subgoal):\n 1. prenum b x \\<down>= 0", "by simp"], ["proof (state)\nthis:\n  prenum b x \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x", "moreover"], ["proof (state)\nthis:\n  prenum b x \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x", "from False"], ["proof (chain)\npicking this:\n  \\<not> x < e_length b", "have \"e_nth ?e x = 0\""], ["proof (prove)\nusing this:\n  \\<not> x < e_length b\n\ngoal (1 subgoal):\n 1. e_nth (e_append_zeros b k) x = 0", "using e_nth_append_zeros_big"], ["proof (prove)\nusing this:\n  \\<not> x < e_length b\n  e_length ?b \\<le> ?i \\<Longrightarrow> e_nth (e_append_zeros ?b ?z) ?i = 0\n\ngoal (1 subgoal):\n 1. e_nth (e_append_zeros b k) x = 0", "by simp"], ["proof (state)\nthis:\n  e_nth (e_append_zeros b k) x = 0\n\ngoal (1 subgoal):\n 1. \\<not> x < e_length b \\<Longrightarrow>\n    prenum b x \\<down>= e_nth (e_append_zeros b k) x", "ultimately"], ["proof (chain)\npicking this:\n  prenum b x \\<down>= 0\n  e_nth (e_append_zeros b k) x = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  prenum b x \\<down>= 0\n  e_nth (e_append_zeros b k) x = 0\n\ngoal (1 subgoal):\n 1. prenum b x \\<down>= e_nth (e_append_zeros b k) x", "by simp"], ["proof (state)\nthis:\n  prenum b x \\<down>= e_nth (e_append_zeros b k) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prenum b ?x \\<down>= e_nth (e_append_zeros b k) ?x\n\ngoal (1 subgoal):\n 1. prenum b \\<triangleright> n = e_append_zeros b k", "ultimately"], ["proof (chain)\npicking this:\n  0 < e_length (e_append_zeros b k)\n  prenum b ?x \\<down>= e_nth (e_append_zeros b k) ?x", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < e_length (e_append_zeros b k)\n  prenum b ?x \\<down>= e_nth (e_append_zeros b k) ?x\n\ngoal (1 subgoal):\n 1. prenum b \\<triangleright> n = e_append_zeros b k", "using initI[of \"?e\"] len"], ["proof (prove)\nusing this:\n  0 < e_length (e_append_zeros b k)\n  prenum b ?x \\<down>= e_nth (e_append_zeros b k) ?x\n  \\<lbrakk>0 < e_length (e_append_zeros b k);\n   \\<And>x.\n      x < e_length (e_append_zeros b k) \\<Longrightarrow>\n      ?f x \\<down>= e_nth (e_append_zeros b k) x\\<rbrakk>\n  \\<Longrightarrow> ?f \\<triangleright>\n                    (e_length (e_append_zeros b k) - 1) =\n                    e_append_zeros b k\n  e_length (e_append_zeros b k) = Suc n\n\ngoal (1 subgoal):\n 1. prenum b \\<triangleright> n = e_append_zeros b k", "by simp"], ["proof (state)\nthis:\n  prenum b \\<triangleright> n = e_append_zeros b k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prenum b \\<triangleright> n = e_append_zeros b k\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "with n(2)"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b\n  prenum b \\<triangleright> n = e_append_zeros b k", "have \"\\<phi> (the (s ?e)) = ?f\""], ["proof (prove)\nusing this:\n  \\<phi> (the (s (prenum b \\<triangleright> n))) = prenum b\n  prenum b \\<triangleright> n = e_append_zeros b k\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_append_zeros b k))) = prenum b", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_append_zeros b k))) = prenum b\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (e_append_zeros b k))) = prenum b", "have \"\\<phi> (the (s ?e)) (e_length ?e) \\<down>= 0\""], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_append_zeros b k))) = prenum b\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_append_zeros b k)))\n     (e_length (e_append_zeros b k)) \\<down>=\n    0", "using len n(1)"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_append_zeros b k))) = prenum b\n  e_length (e_append_zeros b k) = Suc n\n  e_length b \\<le> n\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_append_zeros b k)))\n     (e_length (e_append_zeros b k)) \\<down>=\n    0", "by auto"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_append_zeros b k)))\n   (e_length (e_append_zeros b k)) \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (e_append_zeros b k)))\n   (e_length (e_append_zeros b k)) \\<down>=\n  0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_append_zeros b k)))\n   (e_length (e_append_zeros b k)) \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "using e_append_zeros_length"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_append_zeros b k)))\n   (e_length (e_append_zeros b k)) \\<down>=\n  0\n  e_length (e_append_zeros ?b ?z) = e_length ?b + ?z\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "by auto"], ["proof (state)\nthis:\n  \\<exists>k.\n     \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma if_eq_eq: \"(if v = 1 then (0 :: nat) else 1) = 0 \\<Longrightarrow> v = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if v = (1::'a) then 0 else 1) = 0 \\<Longrightarrow> v = (1::'a)", "by presburger"], ["", "lemma r_find_k:\n  shows \"eval r_find_k [b] \\<down>\"\n    and \"let k = the (eval r_find_k [b])\n           in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_find_k [b] \\<down> &&&\n    let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "let ?k = \"Cn 2 r_pdec1 [Id 2 0]\""], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "let ?argt = \"Cn 2 r_pdec2 [Id 2 0]\""], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "let ?argi = \"Cn 2 r_s [Cn 2 r_append_zeros [Id 2 1, ?k]]\""], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "let ?argx = \"Cn 2 r_add [Cn 2 r_length [Id 2 1], ?k]\""], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "let ?r = \"Cn 2 r_result1 [?argt, ?argi, ?argx]\""], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "define f where \"f \\<equiv>\n    let k = Cn 2 r_pdec1 [Id 2 0];\n        r = Cn 2 r_result1\n             [Cn 2 r_pdec2 [Id 2 0],\n              Cn 2 r_s [Cn 2 r_append_zeros [Id 2 1, k]],\n              Cn 2 r_add [Cn 2 r_length [Id 2 1], k]]\n    in Cn 2 r_eq [r, r_constn 1 1]\""], ["proof (state)\nthis:\n  f \\<equiv>\n  let k = Cn 2 r_pdec1 [recf.Id 2 0];\n      r = Cn 2 r_result1\n           [Cn 2 r_pdec2 [recf.Id 2 0],\n            Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n            Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n  in Cn 2 r_eq [r, r_constn 1 1]\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  f \\<equiv>\n  let k = Cn 2 r_pdec1 [recf.Id 2 0];\n      r = Cn 2 r_result1\n           [Cn 2 r_pdec2 [recf.Id 2 0],\n            Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n            Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n  in Cn 2 r_eq [r, r_constn 1 1]", "have \"recfn 2 f\""], ["proof (prove)\nusing this:\n  f \\<equiv>\n  let k = Cn 2 r_pdec1 [recf.Id 2 0];\n      r = Cn 2 r_result1\n           [Cn 2 r_pdec2 [recf.Id 2 0],\n            Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n            Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n  in Cn 2 r_eq [r, r_constn 1 1]\n\ngoal (1 subgoal):\n 1. recfn 2 f", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  recfn 2 f\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"total r_s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_s", "by (simp add: r_s_total totalI1)"], ["proof (state)\nthis:\n  Partial_Recursive.total r_s\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  Partial_Recursive.total r_s", "have \"total f\""], ["proof (prove)\nusing this:\n  Partial_Recursive.total r_s\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total f", "unfolding f_def"], ["proof (prove)\nusing this:\n  Partial_Recursive.total r_s\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total\n     (let k = Cn 2 r_pdec1 [recf.Id 2 0];\n          r = Cn 2 r_result1\n               [Cn 2 r_pdec2 [recf.Id 2 0],\n                Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n                Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n      in Cn 2 r_eq [r, r_constn 1 1])", "using Cn_total Mn_free_imp_total"], ["proof (prove)\nusing this:\n  Partial_Recursive.total r_s\n  \\<lbrakk>\\<forall>g\\<in>set ?gs. Partial_Recursive.total g;\n   Partial_Recursive.total ?f; recfn ?n (Cn ?n ?f ?gs)\\<rbrakk>\n  \\<Longrightarrow> Partial_Recursive.total (Cn ?n ?f ?gs)\n  \\<lbrakk>wellf ?f; Mn_free ?f\\<rbrakk>\n  \\<Longrightarrow> Partial_Recursive.total ?f\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total\n     (let k = Cn 2 r_pdec1 [recf.Id 2 0];\n          r = Cn 2 r_result1\n               [Cn 2 r_pdec2 [recf.Id 2 0],\n                Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n                Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n      in Cn 2 r_eq [r, r_constn 1 1])", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  Partial_Recursive.total f\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"eval ?argi [z, b] = s (e_append_zeros b (pdec1 z))\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n     [z, b] =\n    s (e_append_zeros b (pdec1 z))", "using r_append_zeros \\<open>recfn 2 f\\<close> eval_r_s"], ["proof (prove)\nusing this:\n  eval r_append_zeros [?b, ?z] \\<down>= e_append_zeros ?b ?z\n  recfn 2 f\n  s ?x = eval r_s [?x]\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n     [z, b] =\n    s (e_append_zeros b (pdec1 z))", "by auto"], ["proof (state)\nthis:\n  eval\n   (Cn 2 r_s\n     [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  s (e_append_zeros b (pdec1 ?z))\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval\n   (Cn 2 r_s\n     [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  s (e_append_zeros b (pdec1 ?z))", "have \"eval ?argi [z, b] \\<down>= the (s (e_append_zeros b (pdec1 z)))\" for z"], ["proof (prove)\nusing this:\n  eval\n   (Cn 2 r_s\n     [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  s (e_append_zeros b (pdec1 ?z))\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n     [z, b] \\<down>=\n    the (s (e_append_zeros b (pdec1 z)))", "using eval_r_s r_s_total"], ["proof (prove)\nusing this:\n  eval\n   (Cn 2 r_s\n     [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  s (e_append_zeros b (pdec1 ?z))\n  s ?x = eval r_s [?x]\n  eval r_s [?x] \\<down>\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n     [z, b] \\<down>=\n    the (s (e_append_zeros b (pdec1 z)))", "by simp"], ["proof (state)\nthis:\n  eval\n   (Cn 2 r_s\n     [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] \\<down>=\n  the (s (e_append_zeros b (pdec1 ?z)))\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "moreover"], ["proof (state)\nthis:\n  eval\n   (Cn 2 r_s\n     [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] \\<down>=\n  the (s (e_append_zeros b (pdec1 ?z)))\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"recfn 2 ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2\n     (Cn 2 r_result1\n       [Cn 2 r_pdec2 [recf.Id 2 0],\n        Cn 2 r_s\n         [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n        Cn 2 r_add\n         [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])", "using \\<open>recfn 2 f\\<close>"], ["proof (prove)\nusing this:\n  recfn 2 f\n\ngoal (1 subgoal):\n 1. recfn 2\n     (Cn 2 r_result1\n       [Cn 2 r_pdec2 [recf.Id 2 0],\n        Cn 2 r_s\n         [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n        Cn 2 r_add\n         [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])", "by auto"], ["proof (state)\nthis:\n  recfn 2\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "ultimately"], ["proof (chain)\npicking this:\n  eval\n   (Cn 2 r_s\n     [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] \\<down>=\n  the (s (e_append_zeros b (pdec1 ?z)))\n  recfn 2\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])", "have r: \"eval ?r [z, b] =\n      eval r_result1 [pdec2 z, the (s (e_append_zeros b (pdec1 z))), e_length b + pdec1 z]\"\n      for z"], ["proof (prove)\nusing this:\n  eval\n   (Cn 2 r_s\n     [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] \\<down>=\n  the (s (e_append_zeros b (pdec1 ?z)))\n  recfn 2\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_result1\n       [Cn 2 r_pdec2 [recf.Id 2 0],\n        Cn 2 r_s\n         [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n        Cn 2 r_add\n         [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n     [z, b] =\n    eval r_result1\n     [pdec2 z, the (s (e_append_zeros b (pdec1 z))), e_length b + pdec1 z]", "by simp"], ["proof (state)\nthis:\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  eval r_result1\n   [pdec2 ?z, the (s (e_append_zeros b (pdec1 ?z))), e_length b + pdec1 ?z]\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  eval r_result1\n   [pdec2 ?z, the (s (e_append_zeros b (pdec1 ?z))), e_length b + pdec1 ?z]", "have f: \"eval f [z, b] \\<down>= (if the (eval ?r [z, b]) = 1 then 0 else 1)\" for z"], ["proof (prove)\nusing this:\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  eval r_result1\n   [pdec2 ?z, the (s (e_append_zeros b (pdec1 ?z))), e_length b + pdec1 ?z]\n\ngoal (1 subgoal):\n 1. eval f [z, b] \\<down>=\n    (if the (eval\n              (Cn 2 r_result1\n                [Cn 2 r_pdec2 [recf.Id 2 0],\n                 Cn 2 r_s\n                  [Cn 2 r_append_zeros\n                    [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n                 Cn 2 r_add\n                  [Cn 2 r_length [recf.Id 2 1],\n                   Cn 2 r_pdec1 [recf.Id 2 0]]])\n              [z, b]) =\n        1\n     then 0 else 1)", "using f_def \\<open>recfn 2 f\\<close> prim_recfn_total"], ["proof (prove)\nusing this:\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  eval r_result1\n   [pdec2 ?z, the (s (e_append_zeros b (pdec1 ?z))), e_length b + pdec1 ?z]\n  f \\<equiv>\n  let k = Cn 2 r_pdec1 [recf.Id 2 0];\n      r = Cn 2 r_result1\n           [Cn 2 r_pdec2 [recf.Id 2 0],\n            Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n            Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n  in Cn 2 r_eq [r, r_constn 1 1]\n  recfn 2 f\n  prim_recfn ?n ?f \\<Longrightarrow> Partial_Recursive.total ?f\n\ngoal (1 subgoal):\n 1. eval f [z, b] \\<down>=\n    (if the (eval\n              (Cn 2 r_result1\n                [Cn 2 r_pdec2 [recf.Id 2 0],\n                 Cn 2 r_s\n                  [Cn 2 r_append_zeros\n                    [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n                 Cn 2 r_add\n                  [Cn 2 r_length [recf.Id 2 1],\n                   Cn 2 r_pdec1 [recf.Id 2 0]]])\n              [z, b]) =\n        1\n     then 0 else 1)", "by (auto simp add: Let_def)"], ["proof (state)\nthis:\n  eval f [?z, b] \\<down>=\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [?z, b]) =\n      1\n   then 0 else 1)\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"\\<exists>k. \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "using s_learn_prenum learn_bc_prenum_eventually_zero"], ["proof (prove)\nusing this:\n  learn_bc \\<phi> {prenum ?b} s\n  \\<exists>k.\n     \\<phi> (the (s (e_append_zeros ?b k))) (e_length ?b + k) \\<down>= 0\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "by auto"], ["proof (state)\nthis:\n  \\<exists>k.\n     \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  \\<exists>k.\n     \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "obtain k where \"\\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\""], ["proof (prove)\nusing this:\n  \\<exists>k.\n     \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>=\n        0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "obtain t where \"eval r_result1 [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>= Suc 0\""], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        eval r_result1\n         [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>=\n        Suc 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using r_result1_converg_phi(1)"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\n  \\<phi> ?i ?x \\<down>= ?v \\<Longrightarrow>\n  \\<exists>t.\n     (\\<forall>t'\\<ge>t. eval r_result1 [t', ?i, ?x] \\<down>= Suc ?v) \\<and>\n     (\\<forall>t'<t. eval r_result1 [t', ?i, ?x] \\<down>= 0)\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        eval r_result1\n         [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>=\n        Suc 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  eval r_result1 [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>=\n  Suc 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval r_result1 [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>=\n  Suc 0", "have t: \"eval r_result1 [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>= Suc 0\""], ["proof (prove)\nusing this:\n  eval r_result1 [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>=\n  Suc 0\n\ngoal (1 subgoal):\n 1. eval r_result1\n     [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>=\n    Suc 0", "by simp"], ["proof (state)\nthis:\n  eval r_result1 [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>=\n  Suc 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "let ?z = \"prod_encode (k, t)\""], ["proof (state)\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"eval ?r [?z, b] \\<down>= Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_result1\n       [Cn 2 r_pdec2 [recf.Id 2 0],\n        Cn 2 r_s\n         [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n        Cn 2 r_add\n         [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n     [prod_encode (k, t), b] \\<down>=\n    Suc 0", "using t r"], ["proof (prove)\nusing this:\n  eval r_result1 [t, the (s (e_append_zeros b k)), e_length b + k] \\<down>=\n  Suc 0\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  eval r_result1\n   [pdec2 ?z, the (s (e_append_zeros b (pdec1 ?z))), e_length b + pdec1 ?z]\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_result1\n       [Cn 2 r_pdec2 [recf.Id 2 0],\n        Cn 2 r_s\n         [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n        Cn 2 r_add\n         [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n     [prod_encode (k, t), b] \\<down>=\n    Suc 0", "by (metis fst_conv prod_encode_inverse snd_conv)"], ["proof (state)\nthis:\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [prod_encode (k, t), b] \\<down>=\n  Suc 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "with f"], ["proof (chain)\npicking this:\n  eval f [?z, b] \\<down>=\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [?z, b]) =\n      1\n   then 0 else 1)\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [prod_encode (k, t), b] \\<down>=\n  Suc 0", "have fzb: \"eval f [?z, b] \\<down>= 0\""], ["proof (prove)\nusing this:\n  eval f [?z, b] \\<down>=\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [?z, b]) =\n      1\n   then 0 else 1)\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [prod_encode (k, t), b] \\<down>=\n  Suc 0\n\ngoal (1 subgoal):\n 1. eval f [prod_encode (k, t), b] \\<down>= 0", "by simp"], ["proof (state)\nthis:\n  eval f [prod_encode (k, t), b] \\<down>= 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "moreover"], ["proof (state)\nthis:\n  eval f [prod_encode (k, t), b] \\<down>= 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"eval (Mn 1 f) [b] =\n    (if (\\<exists>z. eval f ([z, b]) \\<down>= 0)\n     then Some (LEAST z. eval f [z, b] \\<down>= 0)\n     else None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Mn 1 f) [b] =\n    (if \\<exists>z. eval f [z, b] \\<down>= 0\n     then Some (LEAST z. eval f [z, b] \\<down>= 0) else None)", "using eval_Mn_total[of 1 f \"[b]\"] \\<open>total f\\<close> \\<open>recfn 2 f\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>recfn (length [b]) (Mn 1 f); Partial_Recursive.total f\\<rbrakk>\n  \\<Longrightarrow> eval (Mn 1 f) [b] =\n                    (if \\<exists>z. eval f [z, b] \\<down>= 0\n                     then Some (LEAST z. eval f [z, b] \\<down>= 0)\n                     else None)\n  Partial_Recursive.total f\n  recfn 2 f\n\ngoal (1 subgoal):\n 1. eval (Mn 1 f) [b] =\n    (if \\<exists>z. eval f [z, b] \\<down>= 0\n     then Some (LEAST z. eval f [z, b] \\<down>= 0) else None)", "by simp"], ["proof (state)\nthis:\n  eval (Mn 1 f) [b] =\n  (if \\<exists>z. eval f [z, b] \\<down>= 0\n   then Some (LEAST z. eval f [z, b] \\<down>= 0) else None)\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "ultimately"], ["proof (chain)\npicking this:\n  eval f [prod_encode (k, t), b] \\<down>= 0\n  eval (Mn 1 f) [b] =\n  (if \\<exists>z. eval f [z, b] \\<down>= 0\n   then Some (LEAST z. eval f [z, b] \\<down>= 0) else None)", "have mn1f: \"eval (Mn 1 f) [b] \\<down>= (LEAST z. eval f [z, b] \\<down>= 0)\""], ["proof (prove)\nusing this:\n  eval f [prod_encode (k, t), b] \\<down>= 0\n  eval (Mn 1 f) [b] =\n  (if \\<exists>z. eval f [z, b] \\<down>= 0\n   then Some (LEAST z. eval f [z, b] \\<down>= 0) else None)\n\ngoal (1 subgoal):\n 1. eval (Mn 1 f) [b] \\<down>= (LEAST z. eval f [z, b] \\<down>= 0)", "by auto"], ["proof (state)\nthis:\n  eval (Mn 1 f) [b] \\<down>= (LEAST z. eval f [z, b] \\<down>= 0)\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "with fzb"], ["proof (chain)\npicking this:\n  eval f [prod_encode (k, t), b] \\<down>= 0\n  eval (Mn 1 f) [b] \\<down>= (LEAST z. eval f [z, b] \\<down>= 0)", "have \"eval f [the (eval (Mn 1 f) [b]), b] \\<down>= 0\" (is \"eval f [?zz, b] \\<down>= 0\")"], ["proof (prove)\nusing this:\n  eval f [prod_encode (k, t), b] \\<down>= 0\n  eval (Mn 1 f) [b] \\<down>= (LEAST z. eval f [z, b] \\<down>= 0)\n\ngoal (1 subgoal):\n 1. eval f [the (eval (Mn 1 f) [b]), b] \\<down>= 0", "using \\<open>total f\\<close> \\<open>recfn 2 f\\<close> LeastI_ex[of \"%z. eval f [z, b] \\<down>= 0\"]"], ["proof (prove)\nusing this:\n  eval f [prod_encode (k, t), b] \\<down>= 0\n  eval (Mn 1 f) [b] \\<down>= (LEAST z. eval f [z, b] \\<down>= 0)\n  Partial_Recursive.total f\n  recfn 2 f\n  \\<exists>x. eval f [x, b] \\<down>= 0 \\<Longrightarrow>\n  eval f [LEAST z. eval f [z, b] \\<down>= 0, b] \\<down>= 0\n\ngoal (1 subgoal):\n 1. eval f [the (eval (Mn 1 f) [b]), b] \\<down>= 0", "by auto"], ["proof (state)\nthis:\n  eval f [the (eval (Mn 1 f) [b]), b] \\<down>= 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "moreover"], ["proof (state)\nthis:\n  eval f [the (eval (Mn 1 f) [b]), b] \\<down>= 0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"eval f [?zz, b] \\<down>= (if the (eval ?r [?zz, b]) = 1 then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval f [the (eval (Mn 1 f) [b]), b] \\<down>=\n    (if the (eval\n              (Cn 2 r_result1\n                [Cn 2 r_pdec2 [recf.Id 2 0],\n                 Cn 2 r_s\n                  [Cn 2 r_append_zeros\n                    [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n                 Cn 2 r_add\n                  [Cn 2 r_length [recf.Id 2 1],\n                   Cn 2 r_pdec1 [recf.Id 2 0]]])\n              [the (eval (Mn 1 f) [b]), b]) =\n        1\n     then 0 else 1)", "using f"], ["proof (prove)\nusing this:\n  eval f [?z, b] \\<down>=\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [?z, b]) =\n      1\n   then 0 else 1)\n\ngoal (1 subgoal):\n 1. eval f [the (eval (Mn 1 f) [b]), b] \\<down>=\n    (if the (eval\n              (Cn 2 r_result1\n                [Cn 2 r_pdec2 [recf.Id 2 0],\n                 Cn 2 r_s\n                  [Cn 2 r_append_zeros\n                    [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n                 Cn 2 r_add\n                  [Cn 2 r_length [recf.Id 2 1],\n                   Cn 2 r_pdec1 [recf.Id 2 0]]])\n              [the (eval (Mn 1 f) [b]), b]) =\n        1\n     then 0 else 1)", "by simp"], ["proof (state)\nthis:\n  eval f [the (eval (Mn 1 f) [b]), b] \\<down>=\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [the (eval (Mn 1 f) [b]), b]) =\n      1\n   then 0 else 1)\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "ultimately"], ["proof (chain)\npicking this:\n  eval f [the (eval (Mn 1 f) [b]), b] \\<down>= 0\n  eval f [the (eval (Mn 1 f) [b]), b] \\<down>=\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [the (eval (Mn 1 f) [b]), b]) =\n      1\n   then 0 else 1)", "have \"(if the (eval ?r [?zz, b]) = 1 then (0 :: nat) else 1) = 0\""], ["proof (prove)\nusing this:\n  eval f [the (eval (Mn 1 f) [b]), b] \\<down>= 0\n  eval f [the (eval (Mn 1 f) [b]), b] \\<down>=\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [the (eval (Mn 1 f) [b]), b]) =\n      1\n   then 0 else 1)\n\ngoal (1 subgoal):\n 1. (if the (eval\n              (Cn 2 r_result1\n                [Cn 2 r_pdec2 [recf.Id 2 0],\n                 Cn 2 r_s\n                  [Cn 2 r_append_zeros\n                    [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n                 Cn 2 r_add\n                  [Cn 2 r_length [recf.Id 2 1],\n                   Cn 2 r_pdec1 [recf.Id 2 0]]])\n              [the (eval (Mn 1 f) [b]), b]) =\n        1\n     then 0 else 1) =\n    0", "by auto"], ["proof (state)\nthis:\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [the (eval (Mn 1 f) [b]), b]) =\n      1\n   then 0 else 1) =\n  0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [the (eval (Mn 1 f) [b]), b]) =\n      1\n   then 0 else 1) =\n  0", "have \"the (eval ?r [?zz, b]) = 1\""], ["proof (prove)\nusing this:\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [the (eval (Mn 1 f) [b]), b]) =\n      1\n   then 0 else 1) =\n  0\n\ngoal (1 subgoal):\n 1. the (eval\n          (Cn 2 r_result1\n            [Cn 2 r_pdec2 [recf.Id 2 0],\n             Cn 2 r_s\n              [Cn 2 r_append_zeros\n                [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n             Cn 2 r_add\n              [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n          [the (eval (Mn 1 f) [b]), b]) =\n    1", "using if_eq_eq[of \"the (eval ?r [?zz, b])\"]"], ["proof (prove)\nusing this:\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [the (eval (Mn 1 f) [b]), b]) =\n      1\n   then 0 else 1) =\n  0\n  (if the (eval\n            (Cn 2 r_result1\n              [Cn 2 r_pdec2 [recf.Id 2 0],\n               Cn 2 r_s\n                [Cn 2 r_append_zeros\n                  [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n               Cn 2 r_add\n                [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n            [the (eval (Mn 1 f) [b]), b]) =\n      1\n   then 0 else 1) =\n  0 \\<Longrightarrow>\n  the (eval\n        (Cn 2 r_result1\n          [Cn 2 r_pdec2 [recf.Id 2 0],\n           Cn 2 r_s\n            [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n           Cn 2 r_add\n            [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n        [the (eval (Mn 1 f) [b]), b]) =\n  1\n\ngoal (1 subgoal):\n 1. the (eval\n          (Cn 2 r_result1\n            [Cn 2 r_pdec2 [recf.Id 2 0],\n             Cn 2 r_s\n              [Cn 2 r_append_zeros\n                [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n             Cn 2 r_add\n              [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n          [the (eval (Mn 1 f) [b]), b]) =\n    1", "by simp"], ["proof (state)\nthis:\n  the (eval\n        (Cn 2 r_result1\n          [Cn 2 r_pdec2 [recf.Id 2 0],\n           Cn 2 r_s\n            [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n           Cn 2 r_add\n            [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n        [the (eval (Mn 1 f) [b]), b]) =\n  1\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  the (eval\n        (Cn 2 r_result1\n          [Cn 2 r_pdec2 [recf.Id 2 0],\n           Cn 2 r_s\n            [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n           Cn 2 r_add\n            [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n        [the (eval (Mn 1 f) [b]), b]) =\n  1", "have\n     \"eval r_result1\n        [pdec2 ?zz, the (s (e_append_zeros b (pdec1 ?zz))), e_length b + pdec1 ?zz] \\<down>=\n      1\""], ["proof (prove)\nusing this:\n  the (eval\n        (Cn 2 r_result1\n          [Cn 2 r_pdec2 [recf.Id 2 0],\n           Cn 2 r_s\n            [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n           Cn 2 r_add\n            [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n        [the (eval (Mn 1 f) [b]), b]) =\n  1\n\ngoal (1 subgoal):\n 1. eval r_result1\n     [pdec2 (the (eval (Mn 1 f) [b])),\n      the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))),\n      e_length b + pdec1 (the (eval (Mn 1 f) [b]))] \\<down>=\n    1", "using r r_result1_total r_result1_prim totalE"], ["proof (prove)\nusing this:\n  the (eval\n        (Cn 2 r_result1\n          [Cn 2 r_pdec2 [recf.Id 2 0],\n           Cn 2 r_s\n            [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n           Cn 2 r_add\n            [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n        [the (eval (Mn 1 f) [b]), b]) =\n  1\n  eval\n   (Cn 2 r_result1\n     [Cn 2 r_pdec2 [recf.Id 2 0],\n      Cn 2 r_s\n       [Cn 2 r_append_zeros [recf.Id 2 1, Cn 2 r_pdec1 [recf.Id 2 0]]],\n      Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], Cn 2 r_pdec1 [recf.Id 2 0]]])\n   [?z, b] =\n  eval r_result1\n   [pdec2 ?z, the (s (e_append_zeros b (pdec1 ?z))), e_length b + pdec1 ?z]\n  Partial_Recursive.total r_result1\n  prim_recfn 3 r_result1\n  \\<lbrakk>Partial_Recursive.total ?f; recfn ?n ?f; length ?xs = ?n\\<rbrakk>\n  \\<Longrightarrow> eval ?f ?xs \\<down>\n\ngoal (1 subgoal):\n 1. eval r_result1\n     [pdec2 (the (eval (Mn 1 f) [b])),\n      the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))),\n      e_length b + pdec1 (the (eval (Mn 1 f) [b]))] \\<down>=\n    1", "by (metis length_Cons list.size(3) numeral_3_eq_3 option.collapse)"], ["proof (state)\nthis:\n  eval r_result1\n   [pdec2 (the (eval (Mn 1 f) [b])),\n    the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))),\n    e_length b + pdec1 (the (eval (Mn 1 f) [b]))] \\<down>=\n  1\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval r_result1\n   [pdec2 (the (eval (Mn 1 f) [b])),\n    the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))),\n    e_length b + pdec1 (the (eval (Mn 1 f) [b]))] \\<down>=\n  1", "have *: \"\\<phi> (the (s (e_append_zeros b (pdec1 ?zz)))) (e_length b + pdec1 ?zz) \\<down>= 0\""], ["proof (prove)\nusing this:\n  eval r_result1\n   [pdec2 (the (eval (Mn 1 f) [b])),\n    the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))),\n    e_length b + pdec1 (the (eval (Mn 1 f) [b]))] \\<down>=\n  1\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))))\n     (e_length b + pdec1 (the (eval (Mn 1 f) [b]))) \\<down>=\n    0", "by (simp add: r_result1_some_phi)"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))))\n   (e_length b + pdec1 (the (eval (Mn 1 f) [b]))) \\<down>=\n  0\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "define Mn1f where \"Mn1f = Mn 1 f\""], ["proof (state)\nthis:\n  Mn1f = Mn 1 f\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  Mn1f = Mn 1 f", "have \"eval Mn1f [b] \\<down>= ?zz\""], ["proof (prove)\nusing this:\n  Mn1f = Mn 1 f\n\ngoal (1 subgoal):\n 1. eval Mn1f [b] \\<down>= the (eval (Mn 1 f) [b])", "using mn1f"], ["proof (prove)\nusing this:\n  Mn1f = Mn 1 f\n  eval (Mn 1 f) [b] \\<down>= (LEAST z. eval f [z, b] \\<down>= 0)\n\ngoal (1 subgoal):\n 1. eval Mn1f [b] \\<down>= the (eval (Mn 1 f) [b])", "by auto"], ["proof (state)\nthis:\n  eval Mn1f [b] \\<down>= the (eval (Mn 1 f) [b])\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "moreover"], ["proof (state)\nthis:\n  eval Mn1f [b] \\<down>= the (eval (Mn 1 f) [b])\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"recfn 1 (Cn 1 r_pdec1 [Mn1f])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 (Cn 1 r_pdec1 [Mn1f])", "using \\<open>recfn 2 f\\<close> Mn1f_def"], ["proof (prove)\nusing this:\n  recfn 2 f\n  Mn1f = Mn 1 f\n\ngoal (1 subgoal):\n 1. recfn 1 (Cn 1 r_pdec1 [Mn1f])", "by simp"], ["proof (state)\nthis:\n  recfn 1 (Cn 1 r_pdec1 [Mn1f])\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "ultimately"], ["proof (chain)\npicking this:\n  eval Mn1f [b] \\<down>= the (eval (Mn 1 f) [b])\n  recfn 1 (Cn 1 r_pdec1 [Mn1f])", "have \"eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval (Mn1f) [b])]\""], ["proof (prove)\nusing this:\n  eval Mn1f [b] \\<down>= the (eval (Mn 1 f) [b])\n  recfn 1 (Cn 1 r_pdec1 [Mn1f])\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval Mn1f [b])]", "by auto"], ["proof (state)\nthis:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval Mn1f [b])]\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval Mn1f [b])]", "have \"eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [?zz]\""], ["proof (prove)\nusing this:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval Mn1f [b])]\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval (Mn 1 f) [b])]", "using Mn1f_def"], ["proof (prove)\nusing this:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval Mn1f [b])]\n  Mn1f = Mn 1 f\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval (Mn 1 f) [b])]", "by blast"], ["proof (state)\nthis:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval (Mn 1 f) [b])]\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval (Mn 1 f) [b])]", "have 1: \"eval (Cn 1 r_pdec1 [Mn1f]) [b] \\<down>= pdec1 ?zz\""], ["proof (prove)\nusing this:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] = eval r_pdec1 [the (eval (Mn 1 f) [b])]\n\ngoal (1 subgoal):\n 1. eval (Cn 1 r_pdec1 [Mn1f]) [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))", "by simp"], ["proof (state)\nthis:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "moreover"], ["proof (state)\nthis:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"recfn 1 (Cn 1 S [Cn 1 r_pdec1 [Mn1f]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 1 (Cn 1 S [Cn 1 r_pdec1 [Mn1f]])", "using \\<open>recfn 2 f\\<close> Mn1f_def"], ["proof (prove)\nusing this:\n  recfn 2 f\n  Mn1f = Mn 1 f\n\ngoal (1 subgoal):\n 1. recfn 1 (Cn 1 S [Cn 1 r_pdec1 [Mn1f]])", "by simp"], ["proof (state)\nthis:\n  recfn 1 (Cn 1 S [Cn 1 r_pdec1 [Mn1f]])\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "ultimately"], ["proof (chain)\npicking this:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n  recfn 1 (Cn 1 S [Cn 1 r_pdec1 [Mn1f]])", "have \"eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n      eval S [the (eval (Cn 1 r_pdec1 [Mn1f]) [b])]\""], ["proof (prove)\nusing this:\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n  recfn 1 (Cn 1 S [Cn 1 r_pdec1 [Mn1f]])\n\ngoal (1 subgoal):\n 1. eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n    eval S [the (eval (Cn 1 r_pdec1 [Mn1f]) [b])]", "by simp"], ["proof (state)\nthis:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n  eval S [the (eval (Cn 1 r_pdec1 [Mn1f]) [b])]\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n  eval S [the (eval (Cn 1 r_pdec1 [Mn1f]) [b])]", "have \"eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] = eval S [pdec1 ?zz]\""], ["proof (prove)\nusing this:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n  eval S [the (eval (Cn 1 r_pdec1 [Mn1f]) [b])]\n\ngoal (1 subgoal):\n 1. eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n    eval S [pdec1 (the (eval (Mn 1 f) [b]))]", "using 1"], ["proof (prove)\nusing this:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n  eval S [the (eval (Cn 1 r_pdec1 [Mn1f]) [b])]\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (1 subgoal):\n 1. eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n    eval S [pdec1 (the (eval (Mn 1 f) [b]))]", "by simp"], ["proof (state)\nthis:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n  eval S [pdec1 (the (eval (Mn 1 f) [b]))]\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n  eval S [pdec1 (the (eval (Mn 1 f) [b]))]", "have \"eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] \\<down>= Suc (pdec1 ?zz)\""], ["proof (prove)\nusing this:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] =\n  eval S [pdec1 (the (eval (Mn 1 f) [b]))]\n\ngoal (1 subgoal):\n 1. eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] \\<down>=\n    Suc (pdec1 (the (eval (Mn 1 f) [b])))", "by simp"], ["proof (state)\nthis:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] \\<down>=\n  Suc (pdec1 (the (eval (Mn 1 f) [b])))\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "moreover"], ["proof (state)\nthis:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] \\<down>=\n  Suc (pdec1 (the (eval (Mn 1 f) [b])))\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"eval r_find_k [b] = eval (Cn 1 r_pdec1 [Mn1f]) [b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_find_k [b] = eval (Cn 1 r_pdec1 [Mn1f]) [b]", "unfolding r_find_k_def Mn1f_def f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (let k = Cn 2 r_pdec1 [recf.Id 2 0];\n          r = Cn 2 r_result1\n               [Cn 2 r_pdec2 [recf.Id 2 0],\n                Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n                Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n      in Cn 1 r_pdec1 [Mn 1 (Cn 2 r_eq [r, r_constn 1 1])])\n     [b] =\n    eval\n     (Cn 1 r_pdec1\n       [Mn 1\n         (let k = Cn 2 r_pdec1 [recf.Id 2 0];\n              r = Cn 2 r_result1\n                   [Cn 2 r_pdec2 [recf.Id 2 0],\n                    Cn 2 r_s [Cn 2 r_append_zeros [recf.Id 2 1, k]],\n                    Cn 2 r_add [Cn 2 r_length [recf.Id 2 1], k]]\n          in Cn 2 r_eq [r, r_constn 1 1])])\n     [b]", "by metis"], ["proof (state)\nthis:\n  eval r_find_k [b] = eval (Cn 1 r_pdec1 [Mn1f]) [b]\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "ultimately"], ["proof (chain)\npicking this:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] \\<down>=\n  Suc (pdec1 (the (eval (Mn 1 f) [b])))\n  eval r_find_k [b] = eval (Cn 1 r_pdec1 [Mn1f]) [b]", "have r_find_ksb: \"eval r_find_k [b] \\<down>= pdec1 ?zz\""], ["proof (prove)\nusing this:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] \\<down>=\n  Suc (pdec1 (the (eval (Mn 1 f) [b])))\n  eval r_find_k [b] = eval (Cn 1 r_pdec1 [Mn1f]) [b]\n\ngoal (1 subgoal):\n 1. eval r_find_k [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))", "using 1"], ["proof (prove)\nusing this:\n  eval (Cn 1 S [Cn 1 r_pdec1 [Mn1f]]) [b] \\<down>=\n  Suc (pdec1 (the (eval (Mn 1 f) [b])))\n  eval r_find_k [b] = eval (Cn 1 r_pdec1 [Mn1f]) [b]\n  eval (Cn 1 r_pdec1 [Mn1f]) [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (1 subgoal):\n 1. eval r_find_k [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))", "by simp"], ["proof (state)\nthis:\n  eval r_find_k [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (2 subgoals):\n 1. eval r_find_k [b] \\<down>\n 2. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "then"], ["proof (chain)\npicking this:\n  eval r_find_k [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))", "show \"eval r_find_k [b] \\<down>\""], ["proof (prove)\nusing this:\n  eval r_find_k [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (1 subgoal):\n 1. eval r_find_k [b] \\<down>", "by simp_all"], ["proof (state)\nthis:\n  eval r_find_k [b] \\<down>\n\ngoal (1 subgoal):\n 1. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "from r_find_ksb"], ["proof (chain)\npicking this:\n  eval r_find_k [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))", "have \"the (eval r_find_k [b]) = pdec1 ?zz\""], ["proof (prove)\nusing this:\n  eval r_find_k [b] \\<down>= pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (1 subgoal):\n 1. the (eval r_find_k [b]) = pdec1 (the (eval (Mn 1 f) [b]))", "by simp"], ["proof (state)\nthis:\n  the (eval r_find_k [b]) = pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (1 subgoal):\n 1. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "moreover"], ["proof (state)\nthis:\n  the (eval r_find_k [b]) = pdec1 (the (eval (Mn 1 f) [b]))\n\ngoal (1 subgoal):\n 1. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "have \"\\<phi> (the (s (e_append_zeros b (pdec1 ?zz)))) (e_length b + pdec1 ?zz) \\<down>= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))))\n     (e_length b + pdec1 (the (eval (Mn 1 f) [b]))) \\<down>=\n    0", "using *"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))))\n   (e_length b + pdec1 (the (eval (Mn 1 f) [b]))) \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))))\n     (e_length b + pdec1 (the (eval (Mn 1 f) [b]))) \\<down>=\n    0", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))))\n   (e_length b + pdec1 (the (eval (Mn 1 f) [b]))) \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "ultimately"], ["proof (chain)\npicking this:\n  the (eval r_find_k [b]) = pdec1 (the (eval (Mn 1 f) [b]))\n  \\<phi> (the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))))\n   (e_length b + pdec1 (the (eval (Mn 1 f) [b]))) \\<down>=\n  0", "show \"let k = the (eval r_find_k [b])\n      in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\""], ["proof (prove)\nusing this:\n  the (eval r_find_k [b]) = pdec1 (the (eval (Mn 1 f) [b]))\n  \\<phi> (the (s (e_append_zeros b (pdec1 (the (eval (Mn 1 f) [b]))))))\n   (e_length b + pdec1 (the (eval (Mn 1 f) [b]))) \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. let k = the (eval r_find_k [b])\n    in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0", "by simp"], ["proof (state)\nthis:\n  let k = the (eval r_find_k [b])\n  in \\<phi> (the (s (e_append_zeros b k))) (e_length b + k) \\<down>= 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma r_find_k_total: \"total r_find_k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_find_k", "by (simp add: s_learn_prenum r_find_k(1) totalI1)"], ["", "text \\<open>The following function represents one iteration of the\nprocess.\\<close>"], ["", "abbreviation \"r_next \\<equiv>\n  Cn 3 r_snoc [Cn 3 r_append_zeros [Id 3 1, Cn 3 r_find_k [Id 3 1]], r_constn 2 1]\""], ["", "text \\<open>Using @{term r_next} we define the function @{term r_prefixes}\nthat computes the prefix after every iteration of the process.\\<close>"], ["", "definition r_prefixes :: recf where\n  \"r_prefixes \\<equiv> Pr 1 r_singleton_encode r_next\""], ["", "lemma r_prefixes_recfn: \"recfn 2 r_prefixes\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 r_prefixes", "unfolding r_prefixes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 2 (Pr 1 r_singleton_encode r_next)", "by simp"], ["", "lemma r_prefixes_total: \"total r_prefixes\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_prefixes", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_prefixes", "have \"recfn 3 r_next\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 3 r_next", "by simp"], ["proof (state)\nthis:\n  recfn 3 r_next\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_prefixes", "then"], ["proof (chain)\npicking this:\n  recfn 3 r_next", "have \"total r_next\""], ["proof (prove)\nusing this:\n  recfn 3 r_next\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_next", "using \\<open>recfn 3 r_next\\<close> r_find_k_total Cn_total Mn_free_imp_total"], ["proof (prove)\nusing this:\n  recfn 3 r_next\n  recfn 3 r_next\n  Partial_Recursive.total r_find_k\n  \\<lbrakk>\\<forall>g\\<in>set ?gs. Partial_Recursive.total g;\n   Partial_Recursive.total ?f; recfn ?n (Cn ?n ?f ?gs)\\<rbrakk>\n  \\<Longrightarrow> Partial_Recursive.total (Cn ?n ?f ?gs)\n  \\<lbrakk>wellf ?f; Mn_free ?f\\<rbrakk>\n  \\<Longrightarrow> Partial_Recursive.total ?f\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_next", "by auto"], ["proof (state)\nthis:\n  Partial_Recursive.total r_next\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_prefixes", "then"], ["proof (chain)\npicking this:\n  Partial_Recursive.total r_next", "show ?thesis"], ["proof (prove)\nusing this:\n  Partial_Recursive.total r_next\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_prefixes", "by (simp add: Mn_free_imp_total Pr_total r_prefixes_def)"], ["proof (state)\nthis:\n  Partial_Recursive.total r_prefixes\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma r_prefixes_0: \"eval r_prefixes [0, j] \\<down>= list_encode [j]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_prefixes [0, j] \\<down>= singleton_encode j", "unfolding r_prefixes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Pr 1 r_singleton_encode r_next) [0, j] \\<down>= singleton_encode j", "by simp"], ["", "lemma r_prefixes_Suc:\n  \"eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)", "have \"recfn 3 r_next\""], ["proof (prove)\ngoal (1 subgoal):\n 1. recfn 3 r_next", "by simp"], ["proof (state)\nthis:\n  recfn 3 r_next\n\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)", "then"], ["proof (chain)\npicking this:\n  recfn 3 r_next", "have \"total r_next\""], ["proof (prove)\nusing this:\n  recfn 3 r_next\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_next", "using \\<open>recfn 3 r_next\\<close> r_find_k_total Cn_total Mn_free_imp_total"], ["proof (prove)\nusing this:\n  recfn 3 r_next\n  recfn 3 r_next\n  Partial_Recursive.total r_find_k\n  \\<lbrakk>\\<forall>g\\<in>set ?gs. Partial_Recursive.total g;\n   Partial_Recursive.total ?f; recfn ?n (Cn ?n ?f ?gs)\\<rbrakk>\n  \\<Longrightarrow> Partial_Recursive.total (Cn ?n ?f ?gs)\n  \\<lbrakk>wellf ?f; Mn_free ?f\\<rbrakk>\n  \\<Longrightarrow> Partial_Recursive.total ?f\n\ngoal (1 subgoal):\n 1. Partial_Recursive.total r_next", "by auto"], ["proof (state)\nthis:\n  Partial_Recursive.total r_next\n\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)", "have eval_next: \"eval r_next [t, v, j] \\<down>=\n      e_snoc (e_append_zeros v (the (eval r_find_k [v]))) 1\"\n      for t v j"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval r_next [t, v, j] \\<down>=\n    e_snoc (e_append_zeros v (the (eval r_find_k [v]))) 1", "using r_find_k_total \\<open>recfn 3 r_next\\<close> r_append_zeros"], ["proof (prove)\nusing this:\n  Partial_Recursive.total r_find_k\n  recfn 3 r_next\n  eval r_append_zeros [?b, ?z] \\<down>= e_append_zeros ?b ?z\n\ngoal (1 subgoal):\n 1. eval r_next [t, v, j] \\<down>=\n    e_snoc (e_append_zeros v (the (eval r_find_k [v]))) 1", "by simp"], ["proof (state)\nthis:\n  eval r_next [?t, ?v, ?j] \\<down>=\n  e_snoc (e_append_zeros ?v (the (eval r_find_k [?v]))) 1\n\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)", "then"], ["proof (chain)\npicking this:\n  eval r_next [?t, ?v, ?j] \\<down>=\n  e_snoc (e_append_zeros ?v (the (eval r_find_k [?v]))) 1", "have \"eval r_prefixes [Suc n, j] = eval r_next [n, the (eval r_prefixes [n, j]), j]\""], ["proof (prove)\nusing this:\n  eval r_next [?t, ?v, ?j] \\<down>=\n  e_snoc (e_append_zeros ?v (the (eval r_find_k [?v]))) 1\n\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] =\n    eval r_next [n, the (eval r_prefixes [n, j]), j]", "using r_prefixes_total"], ["proof (prove)\nusing this:\n  eval r_next [?t, ?v, ?j] \\<down>=\n  e_snoc (e_append_zeros ?v (the (eval r_find_k [?v]))) 1\n  Partial_Recursive.total r_prefixes\n\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] =\n    eval r_next [n, the (eval r_prefixes [n, j]), j]", "by (simp add: r_prefixes_def)"], ["proof (state)\nthis:\n  eval r_prefixes [Suc n, j] =\n  eval r_next [n, the (eval r_prefixes [n, j]), j]\n\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)", "then"], ["proof (chain)\npicking this:\n  eval r_prefixes [Suc n, j] =\n  eval r_next [n, the (eval r_prefixes [n, j]), j]", "show \"eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)\""], ["proof (prove)\nusing this:\n  eval r_prefixes [Suc n, j] =\n  eval r_next [n, the (eval r_prefixes [n, j]), j]\n\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)", "using eval_next"], ["proof (prove)\nusing this:\n  eval r_prefixes [Suc n, j] =\n  eval r_next [n, the (eval r_prefixes [n, j]), j]\n  eval r_next [?t, ?v, ?j] \\<down>=\n  e_snoc (e_append_zeros ?v (the (eval r_find_k [?v]))) 1\n\ngoal (1 subgoal):\n 1. eval r_prefixes [Suc n, j] \\<down>=\n    (let b = the (eval r_prefixes [n, j])\n     in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)", "by metis"], ["proof (state)\nthis:\n  eval r_prefixes [Suc n, j] \\<down>=\n  (let b = the (eval r_prefixes [n, j])\n   in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Since @{term r_prefixes} is total, we can get away with\nintroducing a total function.\\<close>"], ["", "definition prefixes :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"prefixes j t \\<equiv> the (eval r_prefixes [t, j])\""], ["", "lemma prefixes_Suc:\n  \"prefixes j (Suc t) =\n    e_snoc (e_append_zeros (prefixes j t) (the (eval r_find_k [prefixes j t]))) 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes j (Suc t) =\n    e_snoc\n     (e_append_zeros (local.prefixes j t)\n       (the (eval r_find_k [local.prefixes j t])))\n     1", "unfolding prefixes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (eval r_prefixes [Suc t, j]) =\n    e_snoc\n     (e_append_zeros (the (eval r_prefixes [t, j]))\n       (the (eval r_find_k [the (eval r_prefixes [t, j])])))\n     1", "using r_prefixes_Suc"], ["proof (prove)\nusing this:\n  eval r_prefixes [Suc ?n, ?j] \\<down>=\n  (let b = the (eval r_prefixes [?n, ?j])\n   in e_snoc (e_append_zeros b (the (eval r_find_k [b]))) 1)\n\ngoal (1 subgoal):\n 1. the (eval r_prefixes [Suc t, j]) =\n    e_snoc\n     (e_append_zeros (the (eval r_prefixes [t, j]))\n       (the (eval r_find_k [the (eval r_prefixes [t, j])])))\n     1", "by (simp_all add: Let_def)"], ["", "lemma prefixes_Suc_length:\n  \"e_length (prefixes j (Suc t)) =\n    Suc (e_length (prefixes j t) + the (eval r_find_k [prefixes j t]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length (local.prefixes j (Suc t)) =\n    Suc (e_length (local.prefixes j t) +\n         the (eval r_find_k [local.prefixes j t]))", "using e_append_zeros_length prefixes_Suc"], ["proof (prove)\nusing this:\n  e_length (e_append_zeros ?b ?z) = e_length ?b + ?z\n  local.prefixes ?j (Suc ?t) =\n  e_snoc\n   (e_append_zeros (local.prefixes ?j ?t)\n     (the (eval r_find_k [local.prefixes ?j ?t])))\n   1\n\ngoal (1 subgoal):\n 1. e_length (local.prefixes j (Suc t)) =\n    Suc (e_length (local.prefixes j t) +\n         the (eval r_find_k [local.prefixes j t]))", "by simp"], ["", "lemma prefixes_length_mono: \"e_length (prefixes j t) < e_length (prefixes j (Suc t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length (local.prefixes j t) < e_length (local.prefixes j (Suc t))", "using prefixes_Suc_length"], ["proof (prove)\nusing this:\n  e_length (local.prefixes ?j (Suc ?t)) =\n  Suc (e_length (local.prefixes ?j ?t) +\n       the (eval r_find_k [local.prefixes ?j ?t]))\n\ngoal (1 subgoal):\n 1. e_length (local.prefixes j t) < e_length (local.prefixes j (Suc t))", "by simp"], ["", "lemma prefixes_length_mono': \"e_length (prefixes j t) \\<le> e_length (prefixes j (t + d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + d))", "proof (induction d)"], ["proof (state)\ngoal (2 subgoals):\n 1. e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + 0))\n 2. \\<And>d.\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + d)) \\<Longrightarrow>\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + Suc d))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + 0))\n 2. \\<And>d.\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + d)) \\<Longrightarrow>\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + Suc d))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + 0))", "by simp"], ["proof (state)\nthis:\n  e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + 0))\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + d)) \\<Longrightarrow>\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + Suc d))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d.\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + d)) \\<Longrightarrow>\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + Suc d))", "case (Suc d)"], ["proof (state)\nthis:\n  e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + d))\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + d)) \\<Longrightarrow>\n       e_length (local.prefixes j t)\n       \\<le> e_length (local.prefixes j (t + Suc d))", "then"], ["proof (chain)\npicking this:\n  e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + d))", "show ?case"], ["proof (prove)\nusing this:\n  e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + d))\n\ngoal (1 subgoal):\n 1. e_length (local.prefixes j t)\n    \\<le> e_length (local.prefixes j (t + Suc d))", "using prefixes_length_mono le_less_trans"], ["proof (prove)\nusing this:\n  e_length (local.prefixes j t) \\<le> e_length (local.prefixes j (t + d))\n  e_length (local.prefixes ?j ?t) < e_length (local.prefixes ?j (Suc ?t))\n  \\<lbrakk>?x \\<le> ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. e_length (local.prefixes j t)\n    \\<le> e_length (local.prefixes j (t + Suc d))", "by fastforce"], ["proof (state)\nthis:\n  e_length (local.prefixes j t)\n  \\<le> e_length (local.prefixes j (t + Suc d))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixes_length_lower_bound: \"e_length (prefixes j t) \\<ge> Suc t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc t \\<le> e_length (local.prefixes j t)", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc 0 \\<le> e_length (local.prefixes j 0)\n 2. \\<And>t.\n       Suc t \\<le> e_length (local.prefixes j t) \\<Longrightarrow>\n       Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. Suc 0 \\<le> e_length (local.prefixes j 0)\n 2. \\<And>t.\n       Suc t \\<le> e_length (local.prefixes j t) \\<Longrightarrow>\n       Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> e_length (local.prefixes j 0)", "by (simp add: prefixes_def r_prefixes_0)"], ["proof (state)\nthis:\n  Suc 0 \\<le> e_length (local.prefixes j 0)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       Suc t \\<le> e_length (local.prefixes j t) \\<Longrightarrow>\n       Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       Suc t \\<le> e_length (local.prefixes j t) \\<Longrightarrow>\n       Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))", "case (Suc t)"], ["proof (state)\nthis:\n  Suc t \\<le> e_length (local.prefixes j t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       Suc t \\<le> e_length (local.prefixes j t) \\<Longrightarrow>\n       Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))", "moreover"], ["proof (state)\nthis:\n  Suc t \\<le> e_length (local.prefixes j t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       Suc t \\<le> e_length (local.prefixes j t) \\<Longrightarrow>\n       Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))", "have \"Suc (e_length (prefixes j t)) \\<le> e_length (prefixes j (Suc t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (e_length (local.prefixes j t))\n    \\<le> e_length (local.prefixes j (Suc t))", "using prefixes_length_mono"], ["proof (prove)\nusing this:\n  e_length (local.prefixes ?j ?t) < e_length (local.prefixes ?j (Suc ?t))\n\ngoal (1 subgoal):\n 1. Suc (e_length (local.prefixes j t))\n    \\<le> e_length (local.prefixes j (Suc t))", "by (simp add: Suc_leI)"], ["proof (state)\nthis:\n  Suc (e_length (local.prefixes j t))\n  \\<le> e_length (local.prefixes j (Suc t))\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       Suc t \\<le> e_length (local.prefixes j t) \\<Longrightarrow>\n       Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))", "ultimately"], ["proof (chain)\npicking this:\n  Suc t \\<le> e_length (local.prefixes j t)\n  Suc (e_length (local.prefixes j t))\n  \\<le> e_length (local.prefixes j (Suc t))", "show ?case"], ["proof (prove)\nusing this:\n  Suc t \\<le> e_length (local.prefixes j t)\n  Suc (e_length (local.prefixes j t))\n  \\<le> e_length (local.prefixes j (Suc t))\n\ngoal (1 subgoal):\n 1. Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))", "by simp"], ["proof (state)\nthis:\n  Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixes_Suc_nth:\n  assumes \"x < e_length (prefixes j t)\"\n  shows \"e_nth (prefixes j t) x = e_nth (prefixes j (Suc t)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "define k where \"k = the (eval r_find_k [prefixes j t])\""], ["proof (state)\nthis:\n  k = the (eval r_find_k [local.prefixes j t])\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "let ?u = \"e_append_zeros (prefixes j t) k\""], ["proof (state)\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "have \"prefixes j (Suc t) =\n      e_snoc (e_append_zeros (prefixes j t) (the (eval r_find_k [prefixes j t]))) 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.prefixes j (Suc t) =\n    e_snoc\n     (e_append_zeros (local.prefixes j t)\n       (the (eval r_find_k [local.prefixes j t])))\n     1", "using prefixes_Suc"], ["proof (prove)\nusing this:\n  local.prefixes ?j (Suc ?t) =\n  e_snoc\n   (e_append_zeros (local.prefixes ?j ?t)\n     (the (eval r_find_k [local.prefixes ?j ?t])))\n   1\n\ngoal (1 subgoal):\n 1. local.prefixes j (Suc t) =\n    e_snoc\n     (e_append_zeros (local.prefixes j t)\n       (the (eval r_find_k [local.prefixes j t])))\n     1", "by simp"], ["proof (state)\nthis:\n  local.prefixes j (Suc t) =\n  e_snoc\n   (e_append_zeros (local.prefixes j t)\n     (the (eval r_find_k [local.prefixes j t])))\n   1\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "with k_def"], ["proof (chain)\npicking this:\n  k = the (eval r_find_k [local.prefixes j t])\n  local.prefixes j (Suc t) =\n  e_snoc\n   (e_append_zeros (local.prefixes j t)\n     (the (eval r_find_k [local.prefixes j t])))\n   1", "have \"prefixes j (Suc t) = e_snoc ?u 1\""], ["proof (prove)\nusing this:\n  k = the (eval r_find_k [local.prefixes j t])\n  local.prefixes j (Suc t) =\n  e_snoc\n   (e_append_zeros (local.prefixes j t)\n     (the (eval r_find_k [local.prefixes j t])))\n   1\n\ngoal (1 subgoal):\n 1. local.prefixes j (Suc t) =\n    e_snoc (e_append_zeros (local.prefixes j t) k) 1", "by simp"], ["proof (state)\nthis:\n  local.prefixes j (Suc t) =\n  e_snoc (e_append_zeros (local.prefixes j t) k) 1\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "then"], ["proof (chain)\npicking this:\n  local.prefixes j (Suc t) =\n  e_snoc (e_append_zeros (local.prefixes j t) k) 1", "have \"e_nth (prefixes j (Suc t)) x = e_nth (e_snoc ?u 1) x\""], ["proof (prove)\nusing this:\n  local.prefixes j (Suc t) =\n  e_snoc (e_append_zeros (local.prefixes j t) k) 1\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc t)) x =\n    e_nth (e_snoc (e_append_zeros (local.prefixes j t) k) 1) x", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_snoc (e_append_zeros (local.prefixes j t) k) 1) x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "moreover"], ["proof (state)\nthis:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_snoc (e_append_zeros (local.prefixes j t) k) 1) x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "have \"x < e_length ?u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < e_length (e_append_zeros (local.prefixes j t) k)", "using assms e_append_zeros_length"], ["proof (prove)\nusing this:\n  x < e_length (local.prefixes j t)\n  e_length (e_append_zeros ?b ?z) = e_length ?b + ?z\n\ngoal (1 subgoal):\n 1. x < e_length (e_append_zeros (local.prefixes j t) k)", "by auto"], ["proof (state)\nthis:\n  x < e_length (e_append_zeros (local.prefixes j t) k)\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "ultimately"], ["proof (chain)\npicking this:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_snoc (e_append_zeros (local.prefixes j t) k) 1) x\n  x < e_length (e_append_zeros (local.prefixes j t) k)", "have \"e_nth (prefixes j (Suc t)) x = e_nth ?u x\""], ["proof (prove)\nusing this:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_snoc (e_append_zeros (local.prefixes j t) k) 1) x\n  x < e_length (e_append_zeros (local.prefixes j t) k)\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc t)) x =\n    e_nth (e_append_zeros (local.prefixes j t) k) x", "using e_nth_snoc_small"], ["proof (prove)\nusing this:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_snoc (e_append_zeros (local.prefixes j t) k) 1) x\n  x < e_length (e_append_zeros (local.prefixes j t) k)\n  ?n < e_length ?b \\<Longrightarrow> e_nth (e_snoc ?b ?z) ?n = e_nth ?b ?n\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc t)) x =\n    e_nth (e_append_zeros (local.prefixes j t) k) x", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_append_zeros (local.prefixes j t) k) x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "moreover"], ["proof (state)\nthis:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_append_zeros (local.prefixes j t) k) x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "have \"e_nth ?u x = e_nth (prefixes j t) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth (e_append_zeros (local.prefixes j t) k) x =\n    e_nth (local.prefixes j t) x", "using assms e_nth_append_zeros"], ["proof (prove)\nusing this:\n  x < e_length (local.prefixes j t)\n  e_nth (e_append_zeros ?b ?z) ?i = e_nth ?b ?i\n\ngoal (1 subgoal):\n 1. e_nth (e_append_zeros (local.prefixes j t) k) x =\n    e_nth (local.prefixes j t) x", "by simp"], ["proof (state)\nthis:\n  e_nth (e_append_zeros (local.prefixes j t) k) x =\n  e_nth (local.prefixes j t) x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "ultimately"], ["proof (chain)\npicking this:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_append_zeros (local.prefixes j t) k) x\n  e_nth (e_append_zeros (local.prefixes j t) k) x =\n  e_nth (local.prefixes j t) x", "show \"e_nth (prefixes j t) x = e_nth (prefixes j (Suc t)) x\""], ["proof (prove)\nusing this:\n  e_nth (local.prefixes j (Suc t)) x =\n  e_nth (e_append_zeros (local.prefixes j t) k) x\n  e_nth (e_append_zeros (local.prefixes j t) k) x =\n  e_nth (local.prefixes j t) x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j t) x = e_nth (local.prefixes j (Suc t)) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixes_Suc_last: \"e_nth (prefixes j (Suc t)) (e_length (prefixes j (Suc t)) - 1) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc t))\n     (e_length (local.prefixes j (Suc t)) - 1) =\n    1", "using prefixes_Suc"], ["proof (prove)\nusing this:\n  local.prefixes ?j (Suc ?t) =\n  e_snoc\n   (e_append_zeros (local.prefixes ?j ?t)\n     (the (eval r_find_k [local.prefixes ?j ?t])))\n   1\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc t))\n     (e_length (local.prefixes j (Suc t)) - 1) =\n    1", "by simp"], ["", "lemma prefixes_le_nth:\n  assumes \"x < e_length (prefixes j t)\"\n  shows \"e_nth (prefixes j t) x = e_nth (prefixes j (t + d)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + d)) x", "proof (induction d)"], ["proof (state)\ngoal (2 subgoals):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + 0)) x\n 2. \\<And>d.\n       e_nth (local.prefixes j t) x =\n       e_nth (local.prefixes j (t + d)) x \\<Longrightarrow>\n       e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + 0)) x\n 2. \\<And>d.\n       e_nth (local.prefixes j t) x =\n       e_nth (local.prefixes j (t + d)) x \\<Longrightarrow>\n       e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + 0)) x", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + 0)) x\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       e_nth (local.prefixes j t) x =\n       e_nth (local.prefixes j (t + d)) x \\<Longrightarrow>\n       e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d.\n       e_nth (local.prefixes j t) x =\n       e_nth (local.prefixes j (t + d)) x \\<Longrightarrow>\n       e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x", "case (Suc d)"], ["proof (state)\nthis:\n  e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + d)) x\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       e_nth (local.prefixes j t) x =\n       e_nth (local.prefixes j (t + d)) x \\<Longrightarrow>\n       e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x", "have \"x < e_length (prefixes j (t + d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < e_length (local.prefixes j (t + d))", "using s_learn_prenum assms prefixes_length_mono'"], ["proof (prove)\nusing this:\n  learn_bc \\<phi> {prenum ?b} s\n  x < e_length (local.prefixes j t)\n  e_length (local.prefixes ?j ?t)\n  \\<le> e_length (local.prefixes ?j (?t + ?d))\n\ngoal (1 subgoal):\n 1. x < e_length (local.prefixes j (t + d))", "by (simp add: less_eq_Suc_le order_trans_rules(23))"], ["proof (state)\nthis:\n  x < e_length (local.prefixes j (t + d))\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       e_nth (local.prefixes j t) x =\n       e_nth (local.prefixes j (t + d)) x \\<Longrightarrow>\n       e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x", "then"], ["proof (chain)\npicking this:\n  x < e_length (local.prefixes j (t + d))", "have \"e_nth (prefixes j (t + d)) x = e_nth (prefixes j (t + Suc d)) x\""], ["proof (prove)\nusing this:\n  x < e_length (local.prefixes j (t + d))\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (t + d)) x =\n    e_nth (local.prefixes j (t + Suc d)) x", "using prefixes_Suc_nth"], ["proof (prove)\nusing this:\n  x < e_length (local.prefixes j (t + d))\n  ?x < e_length (local.prefixes ?j ?t) \\<Longrightarrow>\n  e_nth (local.prefixes ?j ?t) ?x = e_nth (local.prefixes ?j (Suc ?t)) ?x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (t + d)) x =\n    e_nth (local.prefixes j (t + Suc d)) x", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j (t + d)) x =\n  e_nth (local.prefixes j (t + Suc d)) x\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       e_nth (local.prefixes j t) x =\n       e_nth (local.prefixes j (t + d)) x \\<Longrightarrow>\n       e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x", "with Suc"], ["proof (chain)\npicking this:\n  e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + d)) x\n  e_nth (local.prefixes j (t + d)) x =\n  e_nth (local.prefixes j (t + Suc d)) x", "show ?case"], ["proof (prove)\nusing this:\n  e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + d)) x\n  e_nth (local.prefixes j (t + d)) x =\n  e_nth (local.prefixes j (t + Suc d)) x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j t) x = e_nth (local.prefixes j (t + Suc d)) x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The numbering $\\psi$ is defined via @{term[names_short] prefixes}.\\<close>"], ["", "definition psi :: partial2 (\"\\<psi>\") where\n  \"\\<psi> j x \\<equiv> Some (e_nth (prefixes j (Suc x)) x)\""], ["", "lemma psi_in_R2: \"\\<psi> \\<in> \\<R>\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> \\<in> \\<R>\\<^sup>2", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2\n 2. total2 \\<psi>", "define r where \"r \\<equiv>  Cn 2 r_nth [Cn 2 r_prefixes [Cn 2 S [Id 2 1], Id 2 0], Id 2 1]\""], ["proof (state)\nthis:\n  r \\<equiv>\n  Cn 2 r_nth\n   [Cn 2 r_prefixes [Cn 2 S [recf.Id 2 1], recf.Id 2 0], recf.Id 2 1]\n\ngoal (2 subgoals):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2\n 2. total2 \\<psi>", "then"], ["proof (chain)\npicking this:\n  r \\<equiv>\n  Cn 2 r_nth\n   [Cn 2 r_prefixes [Cn 2 S [recf.Id 2 1], recf.Id 2 0], recf.Id 2 1]", "have \"recfn 2 r\""], ["proof (prove)\nusing this:\n  r \\<equiv>\n  Cn 2 r_nth\n   [Cn 2 r_prefixes [Cn 2 S [recf.Id 2 1], recf.Id 2 0], recf.Id 2 1]\n\ngoal (1 subgoal):\n 1. recfn 2 r", "using r_prefixes_recfn"], ["proof (prove)\nusing this:\n  r \\<equiv>\n  Cn 2 r_nth\n   [Cn 2 r_prefixes [Cn 2 S [recf.Id 2 1], recf.Id 2 0], recf.Id 2 1]\n  recfn 2 r_prefixes\n\ngoal (1 subgoal):\n 1. recfn 2 r", "by simp"], ["proof (state)\nthis:\n  recfn 2 r\n\ngoal (2 subgoals):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2\n 2. total2 \\<psi>", "then"], ["proof (chain)\npicking this:\n  recfn 2 r", "have \"eval r [j, x] \\<down>= e_nth (prefixes j (Suc x)) x\" for j x"], ["proof (prove)\nusing this:\n  recfn 2 r\n\ngoal (1 subgoal):\n 1. eval r [j, x] \\<down>= e_nth (local.prefixes j (Suc x)) x", "unfolding r_def prefixes_def"], ["proof (prove)\nusing this:\n  recfn 2\n   (Cn 2 r_nth\n     [Cn 2 r_prefixes [Cn 2 S [recf.Id 2 1], recf.Id 2 0], recf.Id 2 1])\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_nth\n       [Cn 2 r_prefixes [Cn 2 S [recf.Id 2 1], recf.Id 2 0], recf.Id 2 1])\n     [j, x] \\<down>=\n    e_nth (the (eval r_prefixes [Suc x, j])) x", "using r_prefixes_total r_prefixes_recfn e_nth"], ["proof (prove)\nusing this:\n  recfn 2\n   (Cn 2 r_nth\n     [Cn 2 r_prefixes [Cn 2 S [recf.Id 2 1], recf.Id 2 0], recf.Id 2 1])\n  Partial_Recursive.total r_prefixes\n  recfn 2 r_prefixes\n  e_nth ?e ?n =\n  (if ?n < e_length ?e then Partial_Recursive.list_decode ?e ! ?n else 0)\n\ngoal (1 subgoal):\n 1. eval\n     (Cn 2 r_nth\n       [Cn 2 r_prefixes [Cn 2 S [recf.Id 2 1], recf.Id 2 0], recf.Id 2 1])\n     [j, x] \\<down>=\n    e_nth (the (eval r_prefixes [Suc x, j])) x", "by simp"], ["proof (state)\nthis:\n  eval r [?j, ?x] \\<down>= e_nth (local.prefixes ?j (Suc ?x)) ?x\n\ngoal (2 subgoals):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2\n 2. total2 \\<psi>", "then"], ["proof (chain)\npicking this:\n  eval r [?j, ?x] \\<down>= e_nth (local.prefixes ?j (Suc ?x)) ?x", "have \"eval r [j, x] = \\<psi> j x\" for j x"], ["proof (prove)\nusing this:\n  eval r [?j, ?x] \\<down>= e_nth (local.prefixes ?j (Suc ?x)) ?x\n\ngoal (1 subgoal):\n 1. eval r [j, x] = \\<psi> j x", "unfolding psi_def"], ["proof (prove)\nusing this:\n  eval r [?j, ?x] \\<down>= e_nth (local.prefixes ?j (Suc ?x)) ?x\n\ngoal (1 subgoal):\n 1. eval r [j, x] \\<down>= e_nth (local.prefixes j (Suc x)) x", "by simp"], ["proof (state)\nthis:\n  eval r [?j, ?x] = \\<psi> ?j ?x\n\ngoal (2 subgoals):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2\n 2. total2 \\<psi>", "then"], ["proof (chain)\npicking this:\n  eval r [?j, ?x] = \\<psi> ?j ?x", "show \"\\<psi> \\<in> \\<P>\\<^sup>2\""], ["proof (prove)\nusing this:\n  eval r [?j, ?x] = \\<psi> ?j ?x\n\ngoal (1 subgoal):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2", "using \\<open>recfn 2 r\\<close>"], ["proof (prove)\nusing this:\n  eval r [?j, ?x] = \\<psi> ?j ?x\n  recfn 2 r\n\ngoal (1 subgoal):\n 1. \\<psi> \\<in> \\<P>\\<^sup>2", "by auto"], ["proof (state)\nthis:\n  \\<psi> \\<in> \\<P>\\<^sup>2\n\ngoal (1 subgoal):\n 1. total2 \\<psi>", "show \"total2 \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total2 \\<psi>", "unfolding psi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. total2 (\\<lambda>j x. Some (e_nth (local.prefixes j (Suc x)) x))", "by auto"], ["proof (state)\nthis:\n  total2 \\<psi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma psi_eq_nth_prefixes:\n  assumes \"x < e_length (prefixes j t)\"\n  shows \"\\<psi> j x \\<down>= e_nth (prefixes j t) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "proof (cases \"Suc x < t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n 2. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "case True"], ["proof (state)\nthis:\n  Suc x < t\n\ngoal (2 subgoals):\n 1. Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n 2. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "have \"x \\<le> e_length (prefixes j x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> e_length (local.prefixes j x)", "using prefixes_length_lower_bound"], ["proof (prove)\nusing this:\n  Suc ?t \\<le> e_length (local.prefixes ?j ?t)\n\ngoal (1 subgoal):\n 1. x \\<le> e_length (local.prefixes j x)", "by (simp add: Suc_leD)"], ["proof (state)\nthis:\n  x \\<le> e_length (local.prefixes j x)\n\ngoal (2 subgoals):\n 1. Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n 2. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "also"], ["proof (state)\nthis:\n  x \\<le> e_length (local.prefixes j x)\n\ngoal (2 subgoals):\n 1. Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n 2. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "have \"... < e_length (prefixes j (Suc x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length (local.prefixes j x) < e_length (local.prefixes j (Suc x))", "using prefixes_length_mono s_learn_prenum"], ["proof (prove)\nusing this:\n  e_length (local.prefixes ?j ?t) < e_length (local.prefixes ?j (Suc ?t))\n  learn_bc \\<phi> {prenum ?b} s\n\ngoal (1 subgoal):\n 1. e_length (local.prefixes j x) < e_length (local.prefixes j (Suc x))", "by simp"], ["proof (state)\nthis:\n  e_length (local.prefixes j x) < e_length (local.prefixes j (Suc x))\n\ngoal (2 subgoals):\n 1. Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n 2. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "finally"], ["proof (chain)\npicking this:\n  x < e_length (local.prefixes j (Suc x))", "have \"x < e_length (prefixes j (Suc x))\""], ["proof (prove)\nusing this:\n  x < e_length (local.prefixes j (Suc x))\n\ngoal (1 subgoal):\n 1. x < e_length (local.prefixes j (Suc x))", "."], ["proof (state)\nthis:\n  x < e_length (local.prefixes j (Suc x))\n\ngoal (2 subgoals):\n 1. Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n 2. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "with True"], ["proof (chain)\npicking this:\n  Suc x < t\n  x < e_length (local.prefixes j (Suc x))", "have \"e_nth (prefixes j (Suc x)) x = e_nth (prefixes j t) x\""], ["proof (prove)\nusing this:\n  Suc x < t\n  x < e_length (local.prefixes j (Suc x))\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x", "using prefixes_le_nth[of x j \"Suc x\" \"t - Suc x\"]"], ["proof (prove)\nusing this:\n  Suc x < t\n  x < e_length (local.prefixes j (Suc x))\n  x < e_length (local.prefixes j (Suc x)) \\<Longrightarrow>\n  e_nth (local.prefixes j (Suc x)) x =\n  e_nth (local.prefixes j (Suc x + (t - Suc x))) x\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x\n\ngoal (2 subgoals):\n 1. Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n 2. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "then"], ["proof (chain)\npicking this:\n  e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x", "show ?thesis"], ["proof (prove)\nusing this:\n  e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "using psi_def"], ["proof (prove)\nusing this:\n  e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x\n  \\<psi> ?j ?x \\<equiv> Some (e_nth (local.prefixes ?j (Suc ?x)) ?x)\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "by simp"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n\ngoal (1 subgoal):\n 1. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "case False"], ["proof (state)\nthis:\n  \\<not> Suc x < t\n\ngoal (1 subgoal):\n 1. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "then"], ["proof (chain)\npicking this:\n  \\<not> Suc x < t", "have \"e_nth (prefixes j (Suc x)) x = e_nth (prefixes j t) x\""], ["proof (prove)\nusing this:\n  \\<not> Suc x < t\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x", "using prefixes_le_nth[of x j t \"Suc x - t\"] assms"], ["proof (prove)\nusing this:\n  \\<not> Suc x < t\n  x < e_length (local.prefixes j t) \\<Longrightarrow>\n  e_nth (local.prefixes j t) x =\n  e_nth (local.prefixes j (t + (Suc x - t))) x\n  x < e_length (local.prefixes j t)\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x\n\ngoal (1 subgoal):\n 1. \\<not> Suc x < t \\<Longrightarrow>\n    \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "then"], ["proof (chain)\npicking this:\n  e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x", "show ?thesis"], ["proof (prove)\nusing this:\n  e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "using psi_def"], ["proof (prove)\nusing this:\n  e_nth (local.prefixes j (Suc x)) x = e_nth (local.prefixes j t) x\n  \\<psi> ?j ?x \\<equiv> Some (e_nth (local.prefixes ?j (Suc ?x)) ?x)\n\ngoal (1 subgoal):\n 1. \\<psi> j x \\<down>= e_nth (local.prefixes j t) x", "by simp"], ["proof (state)\nthis:\n  \\<psi> j x \\<down>= e_nth (local.prefixes j t) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma psi_at_0: \"\\<psi> j 0 \\<down>= j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j 0 \\<down>= j", "using psi_eq_nth_prefixes[of 0 j 0] prefixes_length_lower_bound[of 0 j]"], ["proof (prove)\nusing this:\n  0 < e_length (local.prefixes j 0) \\<Longrightarrow>\n  \\<psi> j 0 \\<down>= e_nth (local.prefixes j 0) 0\n  Suc 0 \\<le> e_length (local.prefixes j 0)\n\ngoal (1 subgoal):\n 1. \\<psi> j 0 \\<down>= j", "by (simp add: prefixes_def r_prefixes_0)"], ["", "text \\<open>The prefixes output by the process @{term[names_short] \"prefixes j\"} are\nindeed prefixes of $\\psi_j$.\\<close>"], ["", "lemma prefixes_init_psi: \"\\<psi> j \\<triangleright> (e_length (prefixes j (Suc t)) - 1) = prefixes j (Suc t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> (e_length (local.prefixes j (Suc t)) - 1) =\n    local.prefixes j (Suc t)", "proof (rule initI[of \"prefixes j (Suc t)\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < e_length (local.prefixes j (Suc t))\n 2. \\<And>x.\n       x < e_length (local.prefixes j (Suc t)) \\<Longrightarrow>\n       \\<psi> j x \\<down>= e_nth (local.prefixes j (Suc t)) x", "let ?e = \"prefixes j (Suc t)\""], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < e_length (local.prefixes j (Suc t))\n 2. \\<And>x.\n       x < e_length (local.prefixes j (Suc t)) \\<Longrightarrow>\n       \\<psi> j x \\<down>= e_nth (local.prefixes j (Suc t)) x", "show \"e_length ?e > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < e_length (local.prefixes j (Suc t))", "using prefixes_length_lower_bound[of \"Suc t\" j]"], ["proof (prove)\nusing this:\n  Suc (Suc t) \\<le> e_length (local.prefixes j (Suc t))\n\ngoal (1 subgoal):\n 1. 0 < e_length (local.prefixes j (Suc t))", "by auto"], ["proof (state)\nthis:\n  0 < e_length (local.prefixes j (Suc t))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < e_length (local.prefixes j (Suc t)) \\<Longrightarrow>\n       \\<psi> j x \\<down>= e_nth (local.prefixes j (Suc t)) x", "show \"\\<And>x. x < e_length ?e \\<Longrightarrow> \\<psi> j x \\<down>= e_nth ?e x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < e_length (local.prefixes j (Suc t)) \\<Longrightarrow>\n       \\<psi> j x \\<down>= e_nth (local.prefixes j (Suc t)) x", "using prefixes_Suc_nth psi_eq_nth_prefixes"], ["proof (prove)\nusing this:\n  ?x < e_length (local.prefixes ?j ?t) \\<Longrightarrow>\n  e_nth (local.prefixes ?j ?t) ?x = e_nth (local.prefixes ?j (Suc ?t)) ?x\n  ?x < e_length (local.prefixes ?j ?t) \\<Longrightarrow>\n  \\<psi> ?j ?x \\<down>= e_nth (local.prefixes ?j ?t) ?x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < e_length (local.prefixes j (Suc t)) \\<Longrightarrow>\n       \\<psi> j x \\<down>= e_nth (local.prefixes j (Suc t)) x", "by simp"], ["proof (state)\nthis:\n  ?x < e_length (local.prefixes j (Suc t)) \\<Longrightarrow>\n  \\<psi> j ?x \\<down>= e_nth (local.prefixes j (Suc t)) ?x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Every prefix of $\\psi_j$ generated by the process\n@{term[names_short] \"prefixes j\"} (except for the initial one) is of the form\n$b0^k1$. But $k$ is chosen such that $\\varphi_{S(b0^k)}(|b|+k) = 0 \\neq 1 =\nb0^k1_{|b|+k}$. Therefore the hypothesis $S(b0^k)$ is incorrect for\n$\\psi_j$.\\<close>"], ["", "lemma hyp_wrong_at_last:\n  \"\\<phi> (the (s (e_butlast (prefixes j (Suc t))))) (e_length (prefixes j (Suc t)) - 1) \\<noteq>\n   \\<psi> j (e_length (prefixes j (Suc t)) - 1)\"\n  (is \"?lhs \\<noteq> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "let ?b = \"prefixes j t\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "let ?k = \"the (eval r_find_k [?b])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "let ?x = \"e_length (prefixes j (Suc t)) - 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "have \"e_butlast (prefixes j (Suc t)) = e_append_zeros ?b ?k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_butlast (local.prefixes j (Suc t)) =\n    e_append_zeros (local.prefixes j t)\n     (the (eval r_find_k [local.prefixes j t]))", "using s_learn_prenum prefixes_Suc"], ["proof (prove)\nusing this:\n  learn_bc \\<phi> {prenum ?b} s\n  local.prefixes ?j (Suc ?t) =\n  e_snoc\n   (e_append_zeros (local.prefixes ?j ?t)\n     (the (eval r_find_k [local.prefixes ?j ?t])))\n   1\n\ngoal (1 subgoal):\n 1. e_butlast (local.prefixes j (Suc t)) =\n    e_append_zeros (local.prefixes j t)\n     (the (eval r_find_k [local.prefixes j t]))", "by simp"], ["proof (state)\nthis:\n  e_butlast (local.prefixes j (Suc t)) =\n  e_append_zeros (local.prefixes j t)\n   (the (eval r_find_k [local.prefixes j t]))\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "then"], ["proof (chain)\npicking this:\n  e_butlast (local.prefixes j (Suc t)) =\n  e_append_zeros (local.prefixes j t)\n   (the (eval r_find_k [local.prefixes j t]))", "have \"?lhs = \\<phi> (the (s (e_append_zeros ?b ?k))) ?x\""], ["proof (prove)\nusing this:\n  e_butlast (local.prefixes j (Suc t)) =\n  e_append_zeros (local.prefixes j t)\n   (the (eval r_find_k [local.prefixes j t]))\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) =\n    \\<phi>\n     (the (s (e_append_zeros (local.prefixes j t)\n               (the (eval r_find_k [local.prefixes j t])))))\n     (e_length (local.prefixes j (Suc t)) - 1)", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  \\<phi>\n   (the (s (e_append_zeros (local.prefixes j t)\n             (the (eval r_find_k [local.prefixes j t])))))\n   (e_length (local.prefixes j (Suc t)) - 1)\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "moreover"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  \\<phi>\n   (the (s (e_append_zeros (local.prefixes j t)\n             (the (eval r_find_k [local.prefixes j t])))))\n   (e_length (local.prefixes j (Suc t)) - 1)\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "have \"?x = e_length ?b + ?k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length (local.prefixes j (Suc t)) - 1 =\n    e_length (local.prefixes j t) + the (eval r_find_k [local.prefixes j t])", "using prefixes_Suc_length"], ["proof (prove)\nusing this:\n  e_length (local.prefixes ?j (Suc ?t)) =\n  Suc (e_length (local.prefixes ?j ?t) +\n       the (eval r_find_k [local.prefixes ?j ?t]))\n\ngoal (1 subgoal):\n 1. e_length (local.prefixes j (Suc t)) - 1 =\n    e_length (local.prefixes j t) + the (eval r_find_k [local.prefixes j t])", "by simp"], ["proof (state)\nthis:\n  e_length (local.prefixes j (Suc t)) - 1 =\n  e_length (local.prefixes j t) + the (eval r_find_k [local.prefixes j t])\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  \\<phi>\n   (the (s (e_append_zeros (local.prefixes j t)\n             (the (eval r_find_k [local.prefixes j t])))))\n   (e_length (local.prefixes j (Suc t)) - 1)\n  e_length (local.prefixes j (Suc t)) - 1 =\n  e_length (local.prefixes j t) + the (eval r_find_k [local.prefixes j t])", "have \"?lhs = \\<phi> (the (s (e_append_zeros ?b ?k))) (e_length ?b + ?k)\""], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  \\<phi>\n   (the (s (e_append_zeros (local.prefixes j t)\n             (the (eval r_find_k [local.prefixes j t])))))\n   (e_length (local.prefixes j (Suc t)) - 1)\n  e_length (local.prefixes j (Suc t)) - 1 =\n  e_length (local.prefixes j t) + the (eval r_find_k [local.prefixes j t])\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) =\n    \\<phi>\n     (the (s (e_append_zeros (local.prefixes j t)\n               (the (eval r_find_k [local.prefixes j t])))))\n     (e_length (local.prefixes j t) +\n      the (eval r_find_k [local.prefixes j t]))", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  \\<phi>\n   (the (s (e_append_zeros (local.prefixes j t)\n             (the (eval r_find_k [local.prefixes j t])))))\n   (e_length (local.prefixes j t) +\n    the (eval r_find_k [local.prefixes j t]))\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "then"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  \\<phi>\n   (the (s (e_append_zeros (local.prefixes j t)\n             (the (eval r_find_k [local.prefixes j t])))))\n   (e_length (local.prefixes j t) +\n    the (eval r_find_k [local.prefixes j t]))", "have \"?lhs \\<down>= 0\""], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  \\<phi>\n   (the (s (e_append_zeros (local.prefixes j t)\n             (the (eval r_find_k [local.prefixes j t])))))\n   (e_length (local.prefixes j t) +\n    the (eval r_find_k [local.prefixes j t]))\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n    0", "using r_find_k(2) r_s_total s_learn_prenum"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  \\<phi>\n   (the (s (e_append_zeros (local.prefixes j t)\n             (the (eval r_find_k [local.prefixes j t])))))\n   (e_length (local.prefixes j t) +\n    the (eval r_find_k [local.prefixes j t]))\n  let k = the (eval r_find_k [?b])\n  in \\<phi> (the (s (e_append_zeros ?b k))) (e_length ?b + k) \\<down>= 0\n  eval r_s [?x] \\<down>\n  learn_bc \\<phi> {prenum ?b} s\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n    0", "by metis"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "moreover"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  0\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "have \"?x < e_length (prefixes j (Suc t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_length (local.prefixes j (Suc t)) - 1\n    < e_length (local.prefixes j (Suc t))", "using prefixes_length_lower_bound le_less_trans linorder_not_le s_learn_prenum"], ["proof (prove)\nusing this:\n  Suc ?t \\<le> e_length (local.prefixes ?j ?t)\n  \\<lbrakk>?x \\<le> ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n  learn_bc \\<phi> {prenum ?b} s\n\ngoal (1 subgoal):\n 1. e_length (local.prefixes j (Suc t)) - 1\n    < e_length (local.prefixes j (Suc t))", "by fastforce"], ["proof (state)\nthis:\n  e_length (local.prefixes j (Suc t)) - 1\n  < e_length (local.prefixes j (Suc t))\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  0\n  e_length (local.prefixes j (Suc t)) - 1\n  < e_length (local.prefixes j (Suc t))", "have \"?rhs \\<down>= e_nth (prefixes j (Suc t)) ?x\""], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  0\n  e_length (local.prefixes j (Suc t)) - 1\n  < e_length (local.prefixes j (Suc t))\n\ngoal (1 subgoal):\n 1. \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n    e_nth (local.prefixes j (Suc t))\n     (e_length (local.prefixes j (Suc t)) - 1)", "using psi_eq_nth_prefixes[of ?x j \"Suc t\"]"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  0\n  e_length (local.prefixes j (Suc t)) - 1\n  < e_length (local.prefixes j (Suc t))\n  e_length (local.prefixes j (Suc t)) - 1\n  < e_length (local.prefixes j (Suc t)) \\<Longrightarrow>\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  e_nth (local.prefixes j (Suc t)) (e_length (local.prefixes j (Suc t)) - 1)\n\ngoal (1 subgoal):\n 1. \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n    e_nth (local.prefixes j (Suc t))\n     (e_length (local.prefixes j (Suc t)) - 1)", "by simp"], ["proof (state)\nthis:\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  e_nth (local.prefixes j (Suc t)) (e_length (local.prefixes j (Suc t)) - 1)\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "moreover"], ["proof (state)\nthis:\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  e_nth (local.prefixes j (Suc t)) (e_length (local.prefixes j (Suc t)) - 1)\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "have \"e_nth (prefixes j (Suc t)) ?x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc t))\n     (e_length (local.prefixes j (Suc t)) - 1) =\n    1", "using prefixes_Suc prefixes_Suc_last"], ["proof (prove)\nusing this:\n  local.prefixes ?j (Suc ?t) =\n  e_snoc\n   (e_append_zeros (local.prefixes ?j ?t)\n     (the (eval r_find_k [local.prefixes ?j ?t])))\n   1\n  e_nth (local.prefixes ?j (Suc ?t))\n   (e_length (local.prefixes ?j (Suc ?t)) - 1) =\n  1\n\ngoal (1 subgoal):\n 1. e_nth (local.prefixes j (Suc t))\n     (e_length (local.prefixes j (Suc t)) - 1) =\n    1", "by simp"], ["proof (state)\nthis:\n  e_nth (local.prefixes j (Suc t))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  1\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "ultimately"], ["proof (chain)\npicking this:\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  e_nth (local.prefixes j (Suc t)) (e_length (local.prefixes j (Suc t)) - 1)\n  e_nth (local.prefixes j (Suc t))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  1", "have \"?rhs \\<down>= 1\""], ["proof (prove)\nusing this:\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  e_nth (local.prefixes j (Suc t)) (e_length (local.prefixes j (Suc t)) - 1)\n  e_nth (local.prefixes j (Suc t))\n   (e_length (local.prefixes j (Suc t)) - 1) =\n  1\n\ngoal (1 subgoal):\n 1. \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>= 1", "by simp"], ["proof (state)\nthis:\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>= 1\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "with \\<open>?lhs \\<down>= 0\\<close>"], ["proof (chain)\npicking this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  0\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>= 1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<down>=\n  0\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1) \\<down>= 1\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n     (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n    \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary hyp_wrong: \"\\<phi> (the (s (e_butlast (prefixes j (Suc t))))) \\<noteq> \\<psi> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t))))) \\<noteq>\n    \\<psi> j", "using hyp_wrong_at_last[of j t]"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc t)))))\n   (e_length (local.prefixes j (Suc t)) - 1) \\<noteq>\n  \\<psi> j (e_length (local.prefixes j (Suc t)) - 1)\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc t))))) \\<noteq>\n    \\<psi> j", "by auto"], ["", "text \\<open>For all $j$, the strategy $S$ outputs infinitely many wrong hypotheses for\n$\\psi_j$\\<close>"], ["", "lemma infinite_hyp_wrong: \"\\<exists>m>n. \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "let ?b = \"prefixes j (Suc (Suc n))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "let ?bb = \"e_butlast ?b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "have len_b: \"e_length ?b > Suc (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc n) < e_length (local.prefixes j (Suc (Suc n)))", "using prefixes_length_lower_bound"], ["proof (prove)\nusing this:\n  Suc ?t \\<le> e_length (local.prefixes ?j ?t)\n\ngoal (1 subgoal):\n 1. Suc (Suc n) < e_length (local.prefixes j (Suc (Suc n)))", "by (simp add: Suc_le_lessD)"], ["proof (state)\nthis:\n  Suc (Suc n) < e_length (local.prefixes j (Suc (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "then"], ["proof (chain)\npicking this:\n  Suc (Suc n) < e_length (local.prefixes j (Suc (Suc n)))", "have len_bb: \"e_length ?bb > Suc n\""], ["proof (prove)\nusing this:\n  Suc (Suc n) < e_length (local.prefixes j (Suc (Suc n)))\n\ngoal (1 subgoal):\n 1. Suc n < e_length (e_butlast (local.prefixes j (Suc (Suc n))))", "by simp"], ["proof (state)\nthis:\n  Suc n < e_length (e_butlast (local.prefixes j (Suc (Suc n))))\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "define m where \"m = e_length ?bb - 1\""], ["proof (state)\nthis:\n  m = e_length (e_butlast (local.prefixes j (Suc (Suc n)))) - 1\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "with len_bb"], ["proof (chain)\npicking this:\n  Suc n < e_length (e_butlast (local.prefixes j (Suc (Suc n))))\n  m = e_length (e_butlast (local.prefixes j (Suc (Suc n)))) - 1", "have \"m > n\""], ["proof (prove)\nusing this:\n  Suc n < e_length (e_butlast (local.prefixes j (Suc (Suc n))))\n  m = e_length (e_butlast (local.prefixes j (Suc (Suc n)))) - 1\n\ngoal (1 subgoal):\n 1. n < m", "by simp"], ["proof (state)\nthis:\n  n < m\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "have \"\\<psi> j \\<triangleright> m = ?bb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))", "have \"\\<psi> j \\<triangleright> (e_length ?b - 1) = ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright>\n    (e_length (local.prefixes j (Suc (Suc n))) - 1) =\n    local.prefixes j (Suc (Suc n))", "using prefixes_init_psi"], ["proof (prove)\nusing this:\n  \\<psi> ?j \\<triangleright> (e_length (local.prefixes ?j (Suc ?t)) - 1) =\n  local.prefixes ?j (Suc ?t)\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright>\n    (e_length (local.prefixes j (Suc (Suc n))) - 1) =\n    local.prefixes j (Suc (Suc n))", "by simp"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright>\n  (e_length (local.prefixes j (Suc (Suc n))) - 1) =\n  local.prefixes j (Suc (Suc n))\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))", "then"], ["proof (chain)\npicking this:\n  \\<psi> j \\<triangleright>\n  (e_length (local.prefixes j (Suc (Suc n))) - 1) =\n  local.prefixes j (Suc (Suc n))", "have \"\\<psi> j \\<triangleright> (e_length ?b - 2) = ?bb\""], ["proof (prove)\nusing this:\n  \\<psi> j \\<triangleright>\n  (e_length (local.prefixes j (Suc (Suc n))) - 1) =\n  local.prefixes j (Suc (Suc n))\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright>\n    (e_length (local.prefixes j (Suc (Suc n))) - 2) =\n    e_butlast (local.prefixes j (Suc (Suc n)))", "using init_butlast_init psi_in_R2 R2_proj_R1 R1_imp_total1 len_bb length_init"], ["proof (prove)\nusing this:\n  \\<psi> j \\<triangleright>\n  (e_length (local.prefixes j (Suc (Suc n))) - 1) =\n  local.prefixes j (Suc (Suc n))\n  \\<lbrakk>total1 ?f; ?f \\<triangleright> ?n = ?e; 0 < ?n\\<rbrakk>\n  \\<Longrightarrow> ?f \\<triangleright> (?n - 1) = e_butlast ?e\n  \\<psi> \\<in> \\<R>\\<^sup>2\n  ?\\<psi> \\<in> \\<R>\\<^sup>2 \\<Longrightarrow> ?\\<psi> ?i \\<in> \\<R>\n  ?f \\<in> \\<R> \\<Longrightarrow> total1 ?f\n  Suc n < e_length (e_butlast (local.prefixes j (Suc (Suc n))))\n  e_length (?f \\<triangleright> ?n) = Suc ?n\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright>\n    (e_length (local.prefixes j (Suc (Suc n))) - 2) =\n    e_butlast (local.prefixes j (Suc (Suc n)))", "by (metis Suc_1 diff_diff_left length_butlast length_greater_0_conv\n        list.size(3) list_decode_encode not_less0 plus_1_eq_Suc)"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright>\n  (e_length (local.prefixes j (Suc (Suc n))) - 2) =\n  e_butlast (local.prefixes j (Suc (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))", "then"], ["proof (chain)\npicking this:\n  \\<psi> j \\<triangleright>\n  (e_length (local.prefixes j (Suc (Suc n))) - 2) =\n  e_butlast (local.prefixes j (Suc (Suc n)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi> j \\<triangleright>\n  (e_length (local.prefixes j (Suc (Suc n))) - 2) =\n  e_butlast (local.prefixes j (Suc (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))", "by (metis diff_Suc_1 length_init m_def)"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "moreover"], ["proof (state)\nthis:\n  \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "have \"\\<phi> (the (s ?bb)) \\<noteq> \\<psi> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc (Suc n)))))) \\<noteq>\n    \\<psi> j", "using hyp_wrong"], ["proof (prove)\nusing this:\n  \\<phi> (the (s (e_butlast (local.prefixes ?j (Suc ?t))))) \\<noteq>\n  \\<psi> ?j\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (e_butlast (local.prefixes j (Suc (Suc n)))))) \\<noteq>\n    \\<psi> j", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc (Suc n)))))) \\<noteq>\n  \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "ultimately"], ["proof (chain)\npicking this:\n  \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc (Suc n)))))) \\<noteq>\n  \\<psi> j", "have \"\\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\""], ["proof (prove)\nusing this:\n  \\<psi> j \\<triangleright> m = e_butlast (local.prefixes j (Suc (Suc n)))\n  \\<phi> (the (s (e_butlast (local.prefixes j (Suc (Suc n)))))) \\<noteq>\n  \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "with \\<open>m > n\\<close>"], ["proof (chain)\npicking this:\n  n < m\n  \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "show ?thesis"], ["proof (prove)\nusing this:\n  n < m\n  \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "by auto"], ["proof (state)\nthis:\n  \\<exists>m>n.\n     \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma U0_V0_not_learn_bc: \"\\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "obtain j where j: \"\\<phi> j = \\<psi> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<phi> j = \\<psi> j \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using R2_imp_P2 kleene_fixed_point psi_in_R2"], ["proof (prove)\nusing this:\n  ?f \\<in> \\<R>\\<^sup>2 \\<Longrightarrow> ?f \\<in> \\<P>\\<^sup>2\n  \\<lbrakk>?\\<psi> \\<in> \\<P>\\<^sup>2;\n   \\<And>i.\n      \\<lbrakk>?k \\<le> i; \\<phi> i = ?\\<psi> i\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<psi> \\<in> \\<R>\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<phi> j = \\<psi> j \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<phi> j = \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "moreover"], ["proof (state)\nthis:\n  \\<phi> j = \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "have \"\\<exists>m>n. \\<phi> (the (s ((\\<psi> j) \\<triangleright> m))) \\<noteq> \\<psi> j\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "using infinite_hyp_wrong[of _ j]"], ["proof (prove)\nusing this:\n  \\<exists>m>?n.\n     \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<exists>m>n.\n       \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "by simp"], ["proof (state)\nthis:\n  \\<exists>m>?n.\n     \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> j = \\<psi> j\n  \\<exists>m>?n.\n     \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j", "have \"\\<not> learn_bc \\<phi> {\\<psi> j} s\""], ["proof (prove)\nusing this:\n  \\<phi> j = \\<psi> j\n  \\<exists>m>?n.\n     \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> {\\<psi> j} s", "using infinite_hyp_wrong_not_BC"], ["proof (prove)\nusing this:\n  \\<phi> j = \\<psi> j\n  \\<exists>m>?n.\n     \\<phi> (the (s (\\<psi> j \\<triangleright> m))) \\<noteq> \\<psi> j\n  \\<lbrakk>?f \\<in> ?U;\n   \\<forall>n.\n      \\<exists>m>n.\n         ?\\<psi> (the (?s (?f \\<triangleright> m))) \\<noteq> ?f\\<rbrakk>\n  \\<Longrightarrow> \\<not> learn_bc ?\\<psi> ?U ?s\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> {\\<psi> j} s", "by simp"], ["proof (state)\nthis:\n  \\<not> learn_bc \\<phi> {\\<psi> j} s\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "moreover"], ["proof (state)\nthis:\n  \\<not> learn_bc \\<phi> {\\<psi> j} s\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "have \"\\<psi> j \\<in> V\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V\\<^sub>0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V\\<^sub>0", "have \"\\<psi> j \\<in> \\<R>\" (is \"?f \\<in> \\<R>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> \\<R>", "using psi_in_R2"], ["proof (prove)\nusing this:\n  \\<psi> \\<in> \\<R>\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> \\<R>", "by simp"], ["proof (state)\nthis:\n  \\<psi> j \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V\\<^sub>0", "moreover"], ["proof (state)\nthis:\n  \\<psi> j \\<in> \\<R>\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V\\<^sub>0", "have \"\\<phi> (the (?f 0)) = ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (the (\\<psi> j 0)) = \\<psi> j", "using j psi_at_0[of j]"], ["proof (prove)\nusing this:\n  \\<phi> j = \\<psi> j\n  \\<psi> j 0 \\<down>= j\n\ngoal (1 subgoal):\n 1. \\<phi> (the (\\<psi> j 0)) = \\<psi> j", "by simp"], ["proof (state)\nthis:\n  \\<phi> (the (\\<psi> j 0)) = \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V\\<^sub>0", "ultimately"], ["proof (chain)\npicking this:\n  \\<psi> j \\<in> \\<R>\n  \\<phi> (the (\\<psi> j 0)) = \\<psi> j", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi> j \\<in> \\<R>\n  \\<phi> (the (\\<psi> j 0)) = \\<psi> j\n\ngoal (1 subgoal):\n 1. \\<psi> j \\<in> V\\<^sub>0", "by (simp add: V0_def)"], ["proof (state)\nthis:\n  \\<psi> j \\<in> V\\<^sub>0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> j \\<in> V\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> learn_bc \\<phi> {\\<psi> j} s\n  \\<psi> j \\<in> V\\<^sub>0", "show \"\\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s\""], ["proof (prove)\nusing this:\n  \\<not> learn_bc \\<phi> {\\<psi> j} s\n  \\<psi> j \\<in> V\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "using learn_bc_closed_subseteq"], ["proof (prove)\nusing this:\n  \\<not> learn_bc \\<phi> {\\<psi> j} s\n  \\<psi> j \\<in> V\\<^sub>0\n  \\<lbrakk>learn_bc ?\\<psi> ?U ?s; ?V \\<subseteq> ?U\\<rbrakk>\n  \\<Longrightarrow> learn_bc ?\\<psi> ?V ?s\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "by auto"], ["proof (state)\nthis:\n  \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma U0_V0_not_in_BC: \"U\\<^sub>0 \\<union> V\\<^sub>0 \\<notin> BC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<notin> BC", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC \\<Longrightarrow> False", "assume in_BC: \"U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC\""], ["proof (state)\nthis:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC", "have \"U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC_wrt \\<phi>\""], ["proof (prove)\nusing this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC_wrt \\<phi>", "using BC_wrt_phi_eq_BC"], ["proof (prove)\nusing this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC\n  BC_wrt \\<phi> = BC\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC_wrt \\<phi>", "by simp"], ["proof (state)\nthis:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC_wrt \\<phi>\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC_wrt \\<phi>", "obtain s where \"learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s\""], ["proof (prove)\nusing this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC_wrt \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using BC_wrt_def"], ["proof (prove)\nusing this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC_wrt \\<phi>\n  BC_wrt ?\\<psi> \\<equiv> {U. \\<exists>s. learn_bc ?\\<psi> U s}\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s", "obtain s' where s': \"s' \\<in> \\<R>\" \"learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\""], ["proof (prove)\nusing this:\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> \\<R>;\n         learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lemma_R_for_BC_simple"], ["proof (prove)\nusing this:\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s\n  learn_bc ?\\<psi> ?U ?s \\<Longrightarrow>\n  \\<exists>s'\\<in>\\<R>. learn_bc ?\\<psi> ?U s'\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> \\<R>;\n         learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s' \\<in> \\<R>\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  s' \\<in> \\<R>\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'", "have learn_U0: \"learn_bc \\<phi> U\\<^sub>0 s'\""], ["proof (prove)\nusing this:\n  s' \\<in> \\<R>\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\n\ngoal (1 subgoal):\n 1. learn_bc \\<phi> U\\<^sub>0 s'", "using learn_bc_closed_subseteq[of \\<phi> \"U\\<^sub>0 \\<union> V\\<^sub>0\" \"s'\"]"], ["proof (prove)\nusing this:\n  s' \\<in> \\<R>\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\n  \\<lbrakk>learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s';\n   ?V \\<subseteq> U\\<^sub>0 \\<union> V\\<^sub>0\\<rbrakk>\n  \\<Longrightarrow> learn_bc \\<phi> ?V s'\n\ngoal (1 subgoal):\n 1. learn_bc \\<phi> U\\<^sub>0 s'", "by simp"], ["proof (state)\nthis:\n  learn_bc \\<phi> U\\<^sub>0 s'\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  learn_bc \\<phi> U\\<^sub>0 s'", "interpret r1_bc s'"], ["proof (prove)\nusing this:\n  learn_bc \\<phi> U\\<^sub>0 s'\n\ngoal (1 subgoal):\n 1. r1_bc s'", "by (simp add: r1_bc_def s'(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC \\<Longrightarrow> False", "have \"\\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'", "using learn_bc_closed_subseteq U0_V0_not_learn_bc"], ["proof (prove)\nusing this:\n  \\<lbrakk>learn_bc ?\\<psi> ?U ?s; ?V \\<subseteq> ?U\\<rbrakk>\n  \\<Longrightarrow> learn_bc ?\\<psi> ?V ?s\n  \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\n\ngoal (1 subgoal):\n 1. \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'", "by simp"], ["proof (state)\nthis:\n  \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<in> BC \\<Longrightarrow> False", "with s'(2)"], ["proof (chain)\npicking this:\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\n  \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'", "show False"], ["proof (prove)\nusing this:\n  learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\n  \\<not> learn_bc \\<phi> (U\\<^sub>0 \\<union> V\\<^sub>0) s'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem R1_not_in_BC: \"\\<R> \\<notin> BC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R> \\<notin> BC", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R> \\<notin> BC", "have \"U\\<^sub>0 \\<union> V\\<^sub>0 \\<subseteq> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<subseteq> \\<R>", "using V0_def U0_in_NUM"], ["proof (prove)\nusing this:\n  V\\<^sub>0 = {f \\<in> \\<R>. \\<phi> (the (f 0)) = f}\n  U\\<^sub>0 \\<in> NUM\n\ngoal (1 subgoal):\n 1. U\\<^sub>0 \\<union> V\\<^sub>0 \\<subseteq> \\<R>", "by auto"], ["proof (state)\nthis:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<subseteq> \\<R>\n\ngoal (1 subgoal):\n 1. \\<R> \\<notin> BC", "then"], ["proof (chain)\npicking this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<subseteq> \\<R>", "show ?thesis"], ["proof (prove)\nusing this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<subseteq> \\<R>\n\ngoal (1 subgoal):\n 1. \\<R> \\<notin> BC", "using U0_V0_not_in_BC BC_closed_subseteq"], ["proof (prove)\nusing this:\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<subseteq> \\<R>\n  U\\<^sub>0 \\<union> V\\<^sub>0 \\<notin> BC\n  \\<lbrakk>?U \\<in> BC; ?V \\<subseteq> ?U\\<rbrakk>\n  \\<Longrightarrow> ?V \\<in> BC\n\ngoal (1 subgoal):\n 1. \\<R> \\<notin> BC", "by auto"], ["proof (state)\nthis:\n  \\<R> \\<notin> BC\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}