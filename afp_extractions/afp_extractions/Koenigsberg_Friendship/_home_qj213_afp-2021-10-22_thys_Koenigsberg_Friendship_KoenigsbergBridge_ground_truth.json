{"file_name": "/home/qj213/afp-2021-10-22/thys/Koenigsberg_Friendship/KoenigsbergBridge.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Koenigsberg_Friendship", "problem_names": ["lemma (in valid_unMultigraph) euclerian_rev:\n  \"is_Eulerian_trail v' (rev_path ps) v=is_Eulerian_trail v ps v' \"", "theorem (in valid_unMultigraph) euclerian_cycle_ex:\n  assumes \"is_Eulerian_circuit v ps v'\" \"finite V\" \"finite E\"\n  shows \"\\<forall>v\\<in>V. even (degree v G)\"", "theorem (in valid_unMultigraph) euclerian_path_ex:\n  assumes \"is_Eulerian_trail v ps v'\" \"finite V\" \"finite E\"\n  shows \"(\\<forall>v\\<in>V. even (degree v G)) \\<or> (num_of_odd_nodes G =2)\"", "theorem \"\\<not>kon_graph.is_Eulerian_trail v1 p v2\"", "lemma (in valid_unMultigraph) eulerian_cons:\n  assumes\n    \"valid_unMultigraph.is_Eulerian_trail (del_unEdge v0 w v1 G) v1 ps v2\"\n    \"(v0,w,v1)\\<in> E\"\n  shows \"is_Eulerian_trail v0 ((v0,w,v1)#ps) v2\"", "lemma (in valid_unMultigraph) eulerian_cons':\n  assumes\n    \"valid_unMultigraph.is_Eulerian_trail (del_unEdge v2 w v3 G) v1 ps v2\"\n    \"(v2,w,v3)\\<in> E\"\n  shows \"is_Eulerian_trail v1 (ps@[(v2,w,v3)]) v3\"", "lemma eulerian_split:\n  assumes \"nodes G1 \\<inter> nodes G2 = {}\" \"edges G1 \\<inter> edges G2={}\"\n    \"valid_unMultigraph G1\" \"valid_unMultigraph G2\"\n    \"valid_unMultigraph.is_Eulerian_trail  G1 v1 ps1 v1'\"\n    \"valid_unMultigraph.is_Eulerian_trail  G2 v2 ps2 v2'\"\n  shows \"valid_unMultigraph.is_Eulerian_trail \\<lparr>nodes=nodes G1 \\<union> nodes G2,\n          edges=edges G1 \\<union> edges G2 \\<union> {(v1',w,v2),(v2,w,v1')}\\<rparr> v1 (ps1@(v1',w,v2)#ps2) v2'\"", "lemma (in valid_unMultigraph) eulerian_sufficient:\n  assumes \"finite V\" \"finite E\" \"connected\" \"V\\<noteq>{}\"\n  shows \"num_of_odd_nodes G = 2 \\<Longrightarrow>\n      (\\<exists>v\\<in>V.\\<exists>v'\\<in>V.\\<exists>ps. odd(degree v G)\\<and>odd(degree v' G)\\<and>(v\\<noteq>v')\\<and>is_Eulerian_trail v ps v')\"\n      and \"num_of_odd_nodes G=0 \\<Longrightarrow> (\\<forall>v\\<in>V.\\<exists>ps. is_Eulerian_circuit v ps v)\""], "translations": [["", "lemma (in valid_unMultigraph) euclerian_rev:\n  \"is_Eulerian_trail v' (rev_path ps) v=is_Eulerian_trail v ps v' \""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Eulerian_trail v' (rev_path ps) v = is_Eulerian_trail v ps v'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_Eulerian_trail v' (rev_path ps) v = is_Eulerian_trail v ps v'", "have \"is_trail v' (rev_path ps) v=is_trail v ps v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_trail v' (rev_path ps) v = is_trail v ps v'", "by (metis is_trail_rev)"], ["proof (state)\nthis:\n  is_trail v' (rev_path ps) v = is_trail v ps v'\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v' (rev_path ps) v = is_Eulerian_trail v ps v'", "moreover"], ["proof (state)\nthis:\n  is_trail v' (rev_path ps) v = is_trail v ps v'\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v' (rev_path ps) v = is_Eulerian_trail v ps v'", "have \"edges (rem_unPath (rev_path ps) G)=edges (rem_unPath ps G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (rem_unPath (rev_path ps) G) = edges (rem_unPath ps G)", "by (metis rem_unPath_graph)"], ["proof (state)\nthis:\n  edges (rem_unPath (rev_path ps) G) = edges (rem_unPath ps G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v' (rev_path ps) v = is_Eulerian_trail v ps v'", "ultimately"], ["proof (chain)\npicking this:\n  is_trail v' (rev_path ps) v = is_trail v ps v'\n  edges (rem_unPath (rev_path ps) G) = edges (rem_unPath ps G)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_trail v' (rev_path ps) v = is_trail v ps v'\n  edges (rem_unPath (rev_path ps) G) = edges (rem_unPath ps G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v' (rev_path ps) v = is_Eulerian_trail v ps v'", "unfolding is_Eulerian_trail_def"], ["proof (prove)\nusing this:\n  is_trail v' (rev_path ps) v = is_trail v ps v'\n  edges (rem_unPath (rev_path ps) G) = edges (rem_unPath ps G)\n\ngoal (1 subgoal):\n 1. (is_trail v' (rev_path ps) v \\<and>\n     edges (rem_unPath (rev_path ps) G) = {}) =\n    (is_trail v ps v' \\<and> edges (rem_unPath ps G) = {})", "by auto"], ["proof (state)\nthis:\n  is_Eulerian_trail v' (rev_path ps) v = is_Eulerian_trail v ps v'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*Necessary conditions for Eulerian circuits*)"], ["", "theorem (in valid_unMultigraph) euclerian_cycle_ex:\n  assumes \"is_Eulerian_circuit v ps v'\" \"finite V\" \"finite E\"\n  shows \"\\<forall>v\\<in>V. even (degree v G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "obtain v ps v' where cycle:\"is_Eulerian_circuit v ps v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v ps v'.\n        is_Eulerian_circuit v ps v' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_Eulerian_circuit v ps v'\n  finite V\n  finite E\n\ngoal (1 subgoal):\n 1. (\\<And>v ps v'.\n        is_Eulerian_circuit v ps v' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_Eulerian_circuit v ps v'\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "hence \"edges (rem_unPath ps G) = {}\""], ["proof (prove)\nusing this:\n  is_Eulerian_circuit v ps v'\n\ngoal (1 subgoal):\n 1. edges (rem_unPath ps G) = {}", "unfolding is_Eulerian_circuit_def is_Eulerian_trail_def"], ["proof (prove)\nusing this:\n  v = v' \\<and> is_trail v ps v' \\<and> edges (rem_unPath ps G) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath ps G) = {}", "by simp"], ["proof (state)\nthis:\n  edges (rem_unPath ps G) = {}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "moreover"], ["proof (state)\nthis:\n  edges (rem_unPath ps G) = {}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "have \"nodes (rem_unPath ps G)=nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (rem_unPath ps G) = V", "by auto"], ["proof (state)\nthis:\n  nodes (rem_unPath ps G) = V\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "ultimately"], ["proof (chain)\npicking this:\n  edges (rem_unPath ps G) = {}\n  nodes (rem_unPath ps G) = V", "have \"rem_unPath ps G = G \\<lparr>edges:={}\\<rparr>\""], ["proof (prove)\nusing this:\n  edges (rem_unPath ps G) = {}\n  nodes (rem_unPath ps G) = V\n\ngoal (1 subgoal):\n 1. rem_unPath ps G = G\\<lparr>edges := {}\\<rparr>", "by auto"], ["proof (state)\nthis:\n  rem_unPath ps G = G\\<lparr>edges := {}\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "hence \"num_of_odd_nodes (rem_unPath ps G) = 0\""], ["proof (prove)\nusing this:\n  rem_unPath ps G = G\\<lparr>edges := {}\\<rparr>\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (rem_unPath ps G) = 0", "by (metis assms(2) odd_nodes_no_edge)"], ["proof (state)\nthis:\n  num_of_odd_nodes (rem_unPath ps G) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "moreover"], ["proof (state)\nthis:\n  num_of_odd_nodes (rem_unPath ps G) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "have \"v=v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v'", "by (metis \\<open>is_Eulerian_circuit v ps v'\\<close> is_Eulerian_circuit_def)"], ["proof (state)\nthis:\n  v = v'\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "hence \"num_of_odd_nodes (rem_unPath ps G)=num_of_odd_nodes G\""], ["proof (prove)\nusing this:\n  v = v'\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (rem_unPath ps G) = num_of_odd_nodes G", "by (metis assms(2) assms(3) cycle is_Eulerian_circuit_def\n        is_Eulerian_trail_def rem_UnPath_cycle)"], ["proof (state)\nthis:\n  num_of_odd_nodes (rem_unPath ps G) = num_of_odd_nodes G\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "ultimately"], ["proof (chain)\npicking this:\n  num_of_odd_nodes (rem_unPath ps G) = 0\n  num_of_odd_nodes (rem_unPath ps G) = num_of_odd_nodes G", "have \"num_of_odd_nodes G=0\""], ["proof (prove)\nusing this:\n  num_of_odd_nodes (rem_unPath ps G) = 0\n  num_of_odd_nodes (rem_unPath ps G) = num_of_odd_nodes G\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G = 0", "by auto"], ["proof (state)\nthis:\n  num_of_odd_nodes G = 0\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "moreover"], ["proof (state)\nthis:\n  num_of_odd_nodes G = 0\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "have \"finite(odd_nodes_set G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (odd_nodes_set G)", "using \\<open>finite V\\<close>"], ["proof (prove)\nusing this:\n  finite V\n\ngoal (1 subgoal):\n 1. finite (odd_nodes_set G)", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  finite V\n\ngoal (1 subgoal):\n 1. finite {v \\<in> V. odd (degree v G)}", "by auto"], ["proof (state)\nthis:\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "ultimately"], ["proof (chain)\npicking this:\n  num_of_odd_nodes G = 0\n  finite (odd_nodes_set G)", "have \"odd_nodes_set G = {}\""], ["proof (prove)\nusing this:\n  num_of_odd_nodes G = 0\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. odd_nodes_set G = {}", "unfolding num_of_odd_nodes_def"], ["proof (prove)\nusing this:\n  card (odd_nodes_set G) = 0\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. odd_nodes_set G = {}", "by auto"], ["proof (state)\nthis:\n  odd_nodes_set G = {}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "thus ?thesis"], ["proof (prove)\nusing this:\n  odd_nodes_set G = {}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  {v \\<in> V. odd (degree v G)} = {}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. even (degree v G)", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>V. even (degree v G)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*Necessary conditions for Eulerian trails*)"], ["", "theorem (in valid_unMultigraph) euclerian_path_ex:\n  assumes \"is_Eulerian_trail v ps v'\" \"finite V\" \"finite E\"\n  shows \"(\\<forall>v\\<in>V. even (degree v G)) \\<or> (num_of_odd_nodes G =2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "obtain v ps v' where path:\"is_Eulerian_trail v ps v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v ps v'.\n        is_Eulerian_trail v ps v' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_Eulerian_trail v ps v'\n  finite V\n  finite E\n\ngoal (1 subgoal):\n 1. (\\<And>v ps v'.\n        is_Eulerian_trail v ps v' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_Eulerian_trail v ps v'\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "hence \"edges (rem_unPath ps G) = {}\""], ["proof (prove)\nusing this:\n  is_Eulerian_trail v ps v'\n\ngoal (1 subgoal):\n 1. edges (rem_unPath ps G) = {}", "unfolding  is_Eulerian_trail_def"], ["proof (prove)\nusing this:\n  is_trail v ps v' \\<and> edges (rem_unPath ps G) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath ps G) = {}", "by simp"], ["proof (state)\nthis:\n  edges (rem_unPath ps G) = {}\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "moreover"], ["proof (state)\nthis:\n  edges (rem_unPath ps G) = {}\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "have \"nodes (rem_unPath ps G)=nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (rem_unPath ps G) = V", "by auto"], ["proof (state)\nthis:\n  nodes (rem_unPath ps G) = V\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "ultimately"], ["proof (chain)\npicking this:\n  edges (rem_unPath ps G) = {}\n  nodes (rem_unPath ps G) = V", "have \"rem_unPath ps G = G \\<lparr>edges:={}\\<rparr>\""], ["proof (prove)\nusing this:\n  edges (rem_unPath ps G) = {}\n  nodes (rem_unPath ps G) = V\n\ngoal (1 subgoal):\n 1. rem_unPath ps G = G\\<lparr>edges := {}\\<rparr>", "by auto"], ["proof (state)\nthis:\n  rem_unPath ps G = G\\<lparr>edges := {}\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "hence odd_nodes: \"num_of_odd_nodes (rem_unPath ps G) = 0\""], ["proof (prove)\nusing this:\n  rem_unPath ps G = G\\<lparr>edges := {}\\<rparr>\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (rem_unPath ps G) = 0", "by (metis assms(2) odd_nodes_no_edge)"], ["proof (state)\nthis:\n  num_of_odd_nodes (rem_unPath ps G) = 0\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "have \"v\\<noteq>v' \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "proof (cases \"even(degree v' G)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "case True"], ["proof (state)\nthis:\n  even (degree v' G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "assume \"v\\<noteq>v'\""], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "have \"is_trail v ps v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_trail v ps v'", "by (metis is_Eulerian_trail_def path)"], ["proof (state)\nthis:\n  is_trail v ps v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "hence \"num_of_odd_nodes (rem_unPath ps G) = num_of_odd_nodes G\n          + (if even (degree v G) then 2 else 0)\""], ["proof (prove)\nusing this:\n  is_trail v ps v'\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (rem_unPath ps G) =\n    num_of_odd_nodes G + (if even (degree v G) then 2 else 0)", "using rem_UnPath_even True \\<open>finite V\\<close> \\<open>finite E\\<close> \\<open>v\\<noteq>v'\\<close>"], ["proof (prove)\nusing this:\n  is_trail v ps v'\n  \\<lbrakk>finite E; finite V; is_trail ?v ?ps ?v';\n   even (degree ?v' G)\\<rbrakk>\n  \\<Longrightarrow> num_of_odd_nodes (rem_unPath ?ps G) =\n                    num_of_odd_nodes G +\n                    (if even (degree ?v G) \\<and> ?v \\<noteq> ?v' then 2\n                     else 0)\n  even (degree v' G)\n  finite V\n  finite E\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (rem_unPath ps G) =\n    num_of_odd_nodes G + (if even (degree v G) then 2 else 0)", "by auto"], ["proof (state)\nthis:\n  num_of_odd_nodes (rem_unPath ps G) =\n  num_of_odd_nodes G + (if even (degree v G) then 2 else 0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "hence \"num_of_odd_nodes G + (if even (degree v G) then 2 else 0)=0\""], ["proof (prove)\nusing this:\n  num_of_odd_nodes (rem_unPath ps G) =\n  num_of_odd_nodes G + (if even (degree v G) then 2 else 0)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G + (if even (degree v G) then 2 else 0) = 0", "using odd_nodes"], ["proof (prove)\nusing this:\n  num_of_odd_nodes (rem_unPath ps G) =\n  num_of_odd_nodes G + (if even (degree v G) then 2 else 0)\n  num_of_odd_nodes (rem_unPath ps G) = 0\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G + (if even (degree v G) then 2 else 0) = 0", "by auto"], ["proof (state)\nthis:\n  num_of_odd_nodes G + (if even (degree v G) then 2 else 0) = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "hence \"num_of_odd_nodes G = 0\""], ["proof (prove)\nusing this:\n  num_of_odd_nodes G + (if even (degree v G) then 2 else 0) = 0\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G = 0", "by auto"], ["proof (state)\nthis:\n  num_of_odd_nodes G = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "moreover"], ["proof (state)\nthis:\n  num_of_odd_nodes G = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "have \"finite(odd_nodes_set G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (odd_nodes_set G)", "using \\<open>finite V\\<close>"], ["proof (prove)\nusing this:\n  finite V\n\ngoal (1 subgoal):\n 1. finite (odd_nodes_set G)", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  finite V\n\ngoal (1 subgoal):\n 1. finite {v \\<in> V. odd (degree v G)}", "by auto"], ["proof (state)\nthis:\n  finite (odd_nodes_set G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "ultimately"], ["proof (chain)\npicking this:\n  num_of_odd_nodes G = 0\n  finite (odd_nodes_set G)", "have \"odd_nodes_set G = {}\""], ["proof (prove)\nusing this:\n  num_of_odd_nodes G = 0\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. odd_nodes_set G = {}", "unfolding num_of_odd_nodes_def"], ["proof (prove)\nusing this:\n  card (odd_nodes_set G) = 0\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. odd_nodes_set G = {}", "by auto"], ["proof (state)\nthis:\n  odd_nodes_set G = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<noteq> v'; even (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2\n 2. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "thus ?thesis"], ["proof (prove)\nusing this:\n  odd_nodes_set G = {}\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  {v \\<in> V. odd (degree v G)} = {}\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "by auto"], ["proof (state)\nthis:\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "case False"], ["proof (state)\nthis:\n  odd (degree v' G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "assume \"v\\<noteq>v'\""], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "have \"is_trail v ps v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_trail v ps v'", "by (metis is_Eulerian_trail_def path)"], ["proof (state)\nthis:\n  is_trail v ps v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "hence \"num_of_odd_nodes (rem_unPath ps G) = num_of_odd_nodes G\n          + (if odd (degree v G) then -2 else 0)\""], ["proof (prove)\nusing this:\n  is_trail v ps v'\n\ngoal (1 subgoal):\n 1. int (num_of_odd_nodes (rem_unPath ps G)) =\n    int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0)", "using rem_UnPath_odd False \\<open>finite V\\<close> \\<open>finite E\\<close> \\<open>v\\<noteq>v'\\<close>"], ["proof (prove)\nusing this:\n  is_trail v ps v'\n  \\<lbrakk>finite E; finite V; is_trail ?v ?ps ?v';\n   odd (degree ?v' G)\\<rbrakk>\n  \\<Longrightarrow> int (num_of_odd_nodes (rem_unPath ?ps G)) =\n                    int (num_of_odd_nodes G) +\n                    (if odd (degree ?v G) \\<and> ?v \\<noteq> ?v' then - 2\n                     else 0)\n  odd (degree v' G)\n  finite V\n  finite E\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. int (num_of_odd_nodes (rem_unPath ps G)) =\n    int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0)", "by auto"], ["proof (state)\nthis:\n  int (num_of_odd_nodes (rem_unPath ps G)) =\n  int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "hence odd_nodes_if: \"num_of_odd_nodes G + (if odd (degree v G) then -2 else 0)=0\""], ["proof (prove)\nusing this:\n  int (num_of_odd_nodes (rem_unPath ps G)) =\n  int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0)\n\ngoal (1 subgoal):\n 1. int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0) = 0", "using odd_nodes"], ["proof (prove)\nusing this:\n  int (num_of_odd_nodes (rem_unPath ps G)) =\n  int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0)\n  num_of_odd_nodes (rem_unPath ps G) = 0\n\ngoal (1 subgoal):\n 1. int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0) = 0", "by auto"], ["proof (state)\nthis:\n  int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "have \"odd (degree v G) \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. odd (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "assume \"odd (degree v G)\""], ["proof (state)\nthis:\n  odd (degree v G)\n\ngoal (1 subgoal):\n 1. odd (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "hence \"num_of_odd_nodes G = 2\""], ["proof (prove)\nusing this:\n  odd (degree v G)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G = 2", "using odd_nodes_if"], ["proof (prove)\nusing this:\n  odd (degree v G)\n  int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0) = 0\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G = 2", "by auto"], ["proof (state)\nthis:\n  num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. odd (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "thus ?thesis"], ["proof (prove)\nusing this:\n  num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "by simp"], ["proof (state)\nthis:\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  odd (degree v G) \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "moreover"], ["proof (state)\nthis:\n  odd (degree v G) \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "have \"even(degree v G) \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. even (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "assume \"even (degree v G)\""], ["proof (state)\nthis:\n  even (degree v G)\n\ngoal (1 subgoal):\n 1. even (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "hence \"num_of_odd_nodes G = 0\""], ["proof (prove)\nusing this:\n  even (degree v G)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G = 0", "using odd_nodes_if"], ["proof (prove)\nusing this:\n  even (degree v G)\n  int (num_of_odd_nodes G) + (if odd (degree v G) then - 2 else 0) = 0\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G = 0", "by auto"], ["proof (state)\nthis:\n  num_of_odd_nodes G = 0\n\ngoal (1 subgoal):\n 1. even (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "moreover"], ["proof (state)\nthis:\n  num_of_odd_nodes G = 0\n\ngoal (1 subgoal):\n 1. even (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "have \"finite(odd_nodes_set G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (odd_nodes_set G)", "using \\<open>finite V\\<close>"], ["proof (prove)\nusing this:\n  finite V\n\ngoal (1 subgoal):\n 1. finite (odd_nodes_set G)", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  finite V\n\ngoal (1 subgoal):\n 1. finite {v \\<in> V. odd (degree v G)}", "by auto"], ["proof (state)\nthis:\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. even (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "ultimately"], ["proof (chain)\npicking this:\n  num_of_odd_nodes G = 0\n  finite (odd_nodes_set G)", "have \"odd_nodes_set G = {}\""], ["proof (prove)\nusing this:\n  num_of_odd_nodes G = 0\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. odd_nodes_set G = {}", "unfolding num_of_odd_nodes_def"], ["proof (prove)\nusing this:\n  card (odd_nodes_set G) = 0\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. odd_nodes_set G = {}", "by auto"], ["proof (state)\nthis:\n  odd_nodes_set G = {}\n\ngoal (1 subgoal):\n 1. even (degree v G) \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "thus ?thesis"], ["proof (prove)\nusing this:\n  odd_nodes_set G = {}\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  {v \\<in> V. odd (degree v G)} = {}\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "by auto"], ["proof (state)\nthis:\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  even (degree v G) \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> v'; odd (degree v' G)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v\\<in>V. even (degree v G)) \\<or>\n                      num_of_odd_nodes G = 2", "ultimately"], ["proof (chain)\npicking this:\n  odd (degree v G) \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n  even (degree v G) \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "show ?thesis"], ["proof (prove)\nusing this:\n  odd (degree v G) \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n  even (degree v G) \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "by auto"], ["proof (state)\nthis:\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<noteq> v' \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "moreover"], ["proof (state)\nthis:\n  v \\<noteq> v' \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "have \"v=v'\\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v' \\<Longrightarrow>\n    (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "by (metis assms(2) assms(3) euclerian_cycle_ex is_Eulerian_circuit_def path)"], ["proof (state)\nthis:\n  v = v' \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "ultimately"], ["proof (chain)\npicking this:\n  v \\<noteq> v' \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n  v = v' \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<noteq> v' \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n  v = v' \\<Longrightarrow>\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2", "by auto"], ["proof (state)\nthis:\n  (\\<forall>v\\<in>V. even (degree v G)) \\<or> num_of_odd_nodes G = 2\n\ngoal:\nNo subgoals!", "qed"], ["", "section\\<open>Specific case of the Konigsberg Bridge Problem\\<close>"], ["", "(*to denote the four landmasses*)"], ["", "datatype kon_node = a | b | c | d"], ["", "(*to denote the seven bridges*)"], ["", "datatype kon_bridge = ab1 | ab2 | ac1 | ac2 | ad1 | bd1 | cd1"], ["", "definition kon_graph :: \"(kon_node,kon_bridge) graph\" where\n  \"kon_graph\\<equiv>\\<lparr>nodes={a,b,c,d},\n              edges={(a,ab1,b), (b,ab1,a),\n                     (a,ab2,b), (b,ab2,a),\n                     (a,ac1,c), (c,ac1,a),\n                     (a,ac2,c), (c,ac2,a),\n                     (a,ad1,d), (d,ad1,a),\n                     (b,bd1,d), (d,bd1,b),\n                     (c,cd1,d), (d,cd1,c)} \\<rparr>\""], ["", "instantiation kon_node :: enum\nbegin"], ["", "definition [simp]:  \"enum_class.enum =[a,b,c,d]\""], ["", "definition  [simp]: \"enum_class.enum_all P \\<longleftrightarrow> P a \\<and> P b \\<and> P c \\<and> P d\""], ["", "definition   [simp]:\"enum_class.enum_ex P \\<longleftrightarrow> P a \\<or> P b \\<or> P c \\<or> P d\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(kon_node, enum_class)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. UNIV = set enum_class.enum\n 2. distinct enum_class.enum\n 3. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 4. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "qed (auto,(case_tac x,auto)+)"], ["", "end"], ["", "instantiation kon_bridge :: enum\nbegin"], ["", "definition [simp]:\"enum_class.enum =[ab1,ab2,ac1,ac2,ad1,cd1,bd1]\""], ["", "definition  [simp]:\"enum_class.enum_all P \\<longleftrightarrow> P ab1 \\<and> P ab2 \\<and> P ac1 \\<and> P ac2 \\<and> P ad1  \\<and> P bd1\n    \\<and> P cd1\""], ["", "definition   [simp]:\"enum_class.enum_ex P \\<longleftrightarrow>  P ab1 \\<or> P ab2 \\<or> P ac1 \\<or> P ac2 \\<or> P ad1  \\<or> P bd1\n    \\<or> P cd1\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(kon_bridge, enum_class)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. UNIV = set enum_class.enum\n 2. distinct enum_class.enum\n 3. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 4. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "qed (auto,(case_tac x,auto)+)"], ["", "end"], ["", "interpretation   kon_graph: valid_unMultigraph kon_graph"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph kon_graph", "proof (unfold_locales)"], ["proof (state)\ngoal (4 subgoals):\n 1. fst ` edges kon_graph \\<subseteq> nodes kon_graph\n 2. snd ` snd ` edges kon_graph \\<subseteq> nodes kon_graph\n 3. \\<And>v w u'.\n       ((v, w, u') \\<in> edges kon_graph) =\n       ((u', w, v) \\<in> edges kon_graph)\n 4. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "show \"fst ` edges kon_graph \\<subseteq> nodes kon_graph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` edges kon_graph \\<subseteq> nodes kon_graph", "by eval"], ["proof (state)\nthis:\n  fst ` edges kon_graph \\<subseteq> nodes kon_graph\n\ngoal (3 subgoals):\n 1. snd ` snd ` edges kon_graph \\<subseteq> nodes kon_graph\n 2. \\<And>v w u'.\n       ((v, w, u') \\<in> edges kon_graph) =\n       ((u', w, v) \\<in> edges kon_graph)\n 3. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. snd ` snd ` edges kon_graph \\<subseteq> nodes kon_graph\n 2. \\<And>v w u'.\n       ((v, w, u') \\<in> edges kon_graph) =\n       ((u', w, v) \\<in> edges kon_graph)\n 3. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "show \"snd ` snd ` edges kon_graph \\<subseteq> nodes kon_graph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` snd ` edges kon_graph \\<subseteq> nodes kon_graph", "by eval"], ["proof (state)\nthis:\n  snd ` snd ` edges kon_graph \\<subseteq> nodes kon_graph\n\ngoal (2 subgoals):\n 1. \\<And>v w u'.\n       ((v, w, u') \\<in> edges kon_graph) =\n       ((u', w, v) \\<in> edges kon_graph)\n 2. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v w u'.\n       ((v, w, u') \\<in> edges kon_graph) =\n       ((u', w, v) \\<in> edges kon_graph)\n 2. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "have \" \\<forall>v w u'. ((v, w, u') \\<in> edges kon_graph) = ((u', w, v) \\<in> edges kon_graph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v w u'.\n       ((v, w, u') \\<in> edges kon_graph) =\n       ((u', w, v) \\<in> edges kon_graph)", "by eval"], ["proof (state)\nthis:\n  \\<forall>v w u'.\n     ((v, w, u') \\<in> edges kon_graph) = ((u', w, v) \\<in> edges kon_graph)\n\ngoal (2 subgoals):\n 1. \\<And>v w u'.\n       ((v, w, u') \\<in> edges kon_graph) =\n       ((u', w, v) \\<in> edges kon_graph)\n 2. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "thus \"\\<And>v w u'. ((v, w, u') \\<in> edges kon_graph) = ((u', w, v) \\<in> edges kon_graph)\""], ["proof (prove)\nusing this:\n  \\<forall>v w u'.\n     ((v, w, u') \\<in> edges kon_graph) = ((u', w, v) \\<in> edges kon_graph)\n\ngoal (1 subgoal):\n 1. \\<And>v w u'.\n       ((v, w, u') \\<in> edges kon_graph) =\n       ((u', w, v) \\<in> edges kon_graph)", "by simp"], ["proof (state)\nthis:\n  ((?v, ?w, ?u') \\<in> edges kon_graph) =\n  ((?u', ?w, ?v) \\<in> edges kon_graph)\n\ngoal (1 subgoal):\n 1. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "have \"\\<forall>v w. (v, w, v) \\<notin> edges kon_graph\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v w. (v, w, v) \\<notin> edges kon_graph", "by eval"], ["proof (state)\nthis:\n  \\<forall>v w. (v, w, v) \\<notin> edges kon_graph\n\ngoal (1 subgoal):\n 1. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "thus \"\\<And>v w. (v, w, v) \\<notin> edges kon_graph\""], ["proof (prove)\nusing this:\n  \\<forall>v w. (v, w, v) \\<notin> edges kon_graph\n\ngoal (1 subgoal):\n 1. \\<And>v w. (v, w, v) \\<notin> edges kon_graph", "by simp"], ["proof (state)\nthis:\n  (?v, ?w, ?v) \\<notin> edges kon_graph\n\ngoal:\nNo subgoals!", "qed"], ["", "(*The specific case of the Konigsberg Bridge Problem does not have a solution*)"], ["", "theorem \"\\<not>kon_graph.is_Eulerian_trail v1 p v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> kon_graph.is_Eulerian_trail v1 p v2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "assume \"kon_graph.is_Eulerian_trail  v1 p v2\""], ["proof (state)\nthis:\n  kon_graph.is_Eulerian_trail v1 p v2\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  kon_graph.is_Eulerian_trail v1 p v2\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "have \"finite (nodes kon_graph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite kon_graph.V", "by (metis finite_code)"], ["proof (state)\nthis:\n  finite kon_graph.V\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  finite kon_graph.V\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "have \"finite (edges kon_graph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite kon_graph.E", "by (metis finite_code)"], ["proof (state)\nthis:\n  finite kon_graph.E\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  kon_graph.is_Eulerian_trail v1 p v2\n  finite kon_graph.V\n  finite kon_graph.E", "have contra:\n    \"(\\<forall>v\\<in>nodes kon_graph. even (degree v kon_graph)) \\<or>(num_of_odd_nodes kon_graph =2)\""], ["proof (prove)\nusing this:\n  kon_graph.is_Eulerian_trail v1 p v2\n  finite kon_graph.V\n  finite kon_graph.E\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>kon_graph.V. even (degree v kon_graph)) \\<or>\n    num_of_odd_nodes kon_graph = 2", "by (metis kon_graph.euclerian_path_ex)"], ["proof (state)\nthis:\n  (\\<forall>v\\<in>kon_graph.V. even (degree v kon_graph)) \\<or>\n  num_of_odd_nodes kon_graph = 2\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "have \"odd(degree a kon_graph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree a kon_graph)", "by eval"], ["proof (state)\nthis:\n  odd (degree a kon_graph)\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  odd (degree a kon_graph)\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "have \"odd(degree b kon_graph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree b kon_graph)", "by eval"], ["proof (state)\nthis:\n  odd (degree b kon_graph)\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  odd (degree b kon_graph)\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "have \"odd(degree c kon_graph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree c kon_graph)", "by eval"], ["proof (state)\nthis:\n  odd (degree c kon_graph)\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  odd (degree c kon_graph)\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "have \"odd(degree d kon_graph)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree d kon_graph)", "by eval"], ["proof (state)\nthis:\n  odd (degree d kon_graph)\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  odd (degree a kon_graph)\n  odd (degree b kon_graph)\n  odd (degree c kon_graph)\n  odd (degree d kon_graph)", "have \"\\<not>(num_of_odd_nodes kon_graph =2)\""], ["proof (prove)\nusing this:\n  odd (degree a kon_graph)\n  odd (degree b kon_graph)\n  odd (degree c kon_graph)\n  odd (degree d kon_graph)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes kon_graph \\<noteq> 2", "by eval"], ["proof (state)\nthis:\n  num_of_odd_nodes kon_graph \\<noteq> 2\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  num_of_odd_nodes kon_graph \\<noteq> 2\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "have \"\\<not>(\\<forall>v\\<in>nodes kon_graph. even (degree v kon_graph))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>v\\<in>kon_graph.V. even (degree v kon_graph))", "by eval"], ["proof (state)\nthis:\n  \\<not> (\\<forall>v\\<in>kon_graph.V. even (degree v kon_graph))\n\ngoal (1 subgoal):\n 1. kon_graph.is_Eulerian_trail v1 p v2 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  num_of_odd_nodes kon_graph \\<noteq> 2\n  \\<not> (\\<forall>v\\<in>kon_graph.V. even (degree v kon_graph))", "show False"], ["proof (prove)\nusing this:\n  num_of_odd_nodes kon_graph \\<noteq> 2\n  \\<not> (\\<forall>v\\<in>kon_graph.V. even (degree v kon_graph))\n\ngoal (1 subgoal):\n 1. False", "using contra"], ["proof (prove)\nusing this:\n  num_of_odd_nodes kon_graph \\<noteq> 2\n  \\<not> (\\<forall>v\\<in>kon_graph.V. even (degree v kon_graph))\n  (\\<forall>v\\<in>kon_graph.V. even (degree v kon_graph)) \\<or>\n  num_of_odd_nodes kon_graph = 2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "section\\<open>Sufficient conditions for Eulerian trails and circuits\\<close>"], ["", "lemma (in valid_unMultigraph) eulerian_cons:\n  assumes\n    \"valid_unMultigraph.is_Eulerian_trail (del_unEdge v0 w v1 G) v1 ps v2\"\n    \"(v0,w,v1)\\<in> E\"\n  shows \"is_Eulerian_trail v0 ((v0,w,v1)#ps) v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "have valid:\"valid_unMultigraph (del_unEdge v0 w v1 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge v0 w v1 G)", "using  valid_unMultigraph_axioms"], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge v0 w v1 G)", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "hence distinct:\"valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2\""], ["proof (prove)\nusing this:\n  valid_unMultigraph (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2", "using assms"], ["proof (prove)\nusing this:\n  valid_unMultigraph (del_unEdge v0 w v1 G)\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v0 w v1 G) v1 ps v2\n  (v0, w, v1) \\<in> E\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2", "unfolding valid_unMultigraph.is_Eulerian_trail_def[OF valid]"], ["proof (prove)\nusing this:\n  valid_unMultigraph (del_unEdge v0 w v1 G)\n  valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2 \\<and>\n  edges (rem_unPath ps (del_unEdge v0 w v1 G)) = {}\n  (v0, w, v1) \\<in> E\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "hence \"set ps \\<subseteq> edges (del_unEdge v0 w v1 G)\""], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2\n\ngoal (1 subgoal):\n 1. set ps \\<subseteq> edges (del_unEdge v0 w v1 G)", "using valid_unMultigraph.path_in_edges[OF valid]"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2\n  valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) ?v ?ps\n   ?v' \\<Longrightarrow>\n  set ?ps \\<subseteq> edges (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. set ps \\<subseteq> edges (del_unEdge v0 w v1 G)", "by auto"], ["proof (state)\nthis:\n  set ps \\<subseteq> edges (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "moreover"], ["proof (state)\nthis:\n  set ps \\<subseteq> edges (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "have \"(v0,w,v1)\\<notin>edges (del_unEdge v0 w v1 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v0, w, v1) \\<notin> edges (del_unEdge v0 w v1 G)", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v0, w, v1)\n    \\<notin> edges\n              \\<lparr>nodes = V,\n                 edges = E - {(v0, w, v1), (v1, w, v0)}\\<rparr>", "by auto"], ["proof (state)\nthis:\n  (v0, w, v1) \\<notin> edges (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "moreover"], ["proof (state)\nthis:\n  (v0, w, v1) \\<notin> edges (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "have \"(v1,w,v0)\\<notin>edges (del_unEdge v0 w v1 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v1, w, v0) \\<notin> edges (del_unEdge v0 w v1 G)", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v1, w, v0)\n    \\<notin> edges\n              \\<lparr>nodes = V,\n                 edges = E - {(v0, w, v1), (v1, w, v0)}\\<rparr>", "by auto"], ["proof (state)\nthis:\n  (v1, w, v0) \\<notin> edges (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "ultimately"], ["proof (chain)\npicking this:\n  set ps \\<subseteq> edges (del_unEdge v0 w v1 G)\n  (v0, w, v1) \\<notin> edges (del_unEdge v0 w v1 G)\n  (v1, w, v0) \\<notin> edges (del_unEdge v0 w v1 G)", "have \"(v0,w,v1)\\<notin>set ps\" \"(v1,w,v0)\\<notin>set ps\""], ["proof (prove)\nusing this:\n  set ps \\<subseteq> edges (del_unEdge v0 w v1 G)\n  (v0, w, v1) \\<notin> edges (del_unEdge v0 w v1 G)\n  (v1, w, v0) \\<notin> edges (del_unEdge v0 w v1 G)\n\ngoal (1 subgoal):\n 1. (v0, w, v1) \\<notin> set ps &&& (v1, w, v0) \\<notin> set ps", "by auto"], ["proof (state)\nthis:\n  (v0, w, v1) \\<notin> set ps\n  (v1, w, v0) \\<notin> set ps\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "moreover"], ["proof (state)\nthis:\n  (v0, w, v1) \\<notin> set ps\n  (v1, w, v0) \\<notin> set ps\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "have \"is_trail v1 ps v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_trail v1 ps v2", "using distinct_path_intro[OF distinct]"], ["proof (prove)\nusing this:\n  is_trail v1 ps v2\n\ngoal (1 subgoal):\n 1. is_trail v1 ps v2", "."], ["proof (state)\nthis:\n  is_trail v1 ps v2\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "ultimately"], ["proof (chain)\npicking this:\n  (v0, w, v1) \\<notin> set ps\n  (v1, w, v0) \\<notin> set ps\n  is_trail v1 ps v2", "have \"is_trail v0 ((v0,w,v1)#ps) v2\""], ["proof (prove)\nusing this:\n  (v0, w, v1) \\<notin> set ps\n  (v1, w, v0) \\<notin> set ps\n  is_trail v1 ps v2\n\ngoal (1 subgoal):\n 1. is_trail v0 ((v0, w, v1) # ps) v2", "using \\<open>(v0,w,v1)\\<in> E\\<close>"], ["proof (prove)\nusing this:\n  (v0, w, v1) \\<notin> set ps\n  (v1, w, v0) \\<notin> set ps\n  is_trail v1 ps v2\n  (v0, w, v1) \\<in> E\n\ngoal (1 subgoal):\n 1. is_trail v0 ((v0, w, v1) # ps) v2", "by auto"], ["proof (state)\nthis:\n  is_trail v0 ((v0, w, v1) # ps) v2\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "moreover"], ["proof (state)\nthis:\n  is_trail v0 ((v0, w, v1) # ps) v2\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "have \"edges (rem_unPath ps (del_unEdge v0 w v1 G)) ={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (rem_unPath ps (del_unEdge v0 w v1 G)) = {}", "using assms"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v0 w v1 G) v1 ps v2\n  (v0, w, v1) \\<in> E\n\ngoal (1 subgoal):\n 1. edges (rem_unPath ps (del_unEdge v0 w v1 G)) = {}", "unfolding valid_unMultigraph.is_Eulerian_trail_def[OF valid]"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_trail (del_unEdge v0 w v1 G) v1 ps v2 \\<and>\n  edges (rem_unPath ps (del_unEdge v0 w v1 G)) = {}\n  (v0, w, v1) \\<in> E\n\ngoal (1 subgoal):\n 1. edges (rem_unPath ps (del_unEdge v0 w v1 G)) = {}", "by auto"], ["proof (state)\nthis:\n  edges (rem_unPath ps (del_unEdge v0 w v1 G)) = {}\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "hence \"edges (rem_unPath ((v0,w,v1)#ps) G)={}\""], ["proof (prove)\nusing this:\n  edges (rem_unPath ps (del_unEdge v0 w v1 G)) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath ((v0, w, v1) # ps) G) = {}", "by (metis rem_unPath.simps(2))"], ["proof (state)\nthis:\n  edges (rem_unPath ((v0, w, v1) # ps) G) = {}\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "ultimately"], ["proof (chain)\npicking this:\n  is_trail v0 ((v0, w, v1) # ps) v2\n  edges (rem_unPath ((v0, w, v1) # ps) G) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  is_trail v0 ((v0, w, v1) # ps) v2\n  edges (rem_unPath ((v0, w, v1) # ps) G) = {}\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v0 ((v0, w, v1) # ps) v2", "unfolding is_Eulerian_trail_def"], ["proof (prove)\nusing this:\n  is_trail v0 ((v0, w, v1) # ps) v2\n  edges (rem_unPath ((v0, w, v1) # ps) G) = {}\n\ngoal (1 subgoal):\n 1. is_trail v0 ((v0, w, v1) # ps) v2 \\<and>\n    edges (rem_unPath ((v0, w, v1) # ps) G) = {}", "by auto"], ["proof (state)\nthis:\n  is_Eulerian_trail v0 ((v0, w, v1) # ps) v2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in valid_unMultigraph) eulerian_cons':\n  assumes\n    \"valid_unMultigraph.is_Eulerian_trail (del_unEdge v2 w v3 G) v1 ps v2\"\n    \"(v2,w,v3)\\<in> E\"\n  shows \"is_Eulerian_trail v1 (ps@[(v2,w,v3)]) v3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "have valid:\"valid_unMultigraph (del_unEdge v3 w v2 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge v3 w v2 G)", "using valid_unMultigraph_axioms del_unEdge_valid"], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n  valid_unMultigraph ?g \\<Longrightarrow>\n  valid_unMultigraph (del_unEdge ?v ?e ?v' ?g)\n\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge v3 w v2 G)", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge v3 w v2 G)\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "have \"del_unEdge v2 w v3 G=del_unEdge v3 w v2 G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. del_unEdge v2 w v3 G = del_unEdge v3 w v2 G", "by (metis delete_edge_sym)"], ["proof (state)\nthis:\n  del_unEdge v2 w v3 G = del_unEdge v3 w v2 G\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "hence \"valid_unMultigraph.is_Eulerian_trail (del_unEdge v3 w v2 G) v2\n        (rev_path ps) v1\""], ["proof (prove)\nusing this:\n  del_unEdge v2 w v3 G = del_unEdge v3 w v2 G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail (del_unEdge v3 w v2 G) v2\n     (rev_path ps) v1", "using assms valid_unMultigraph.euclerian_rev[OF valid]"], ["proof (prove)\nusing this:\n  del_unEdge v2 w v3 G = del_unEdge v3 w v2 G\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v2 w v3 G) v1 ps v2\n  (v2, w, v3) \\<in> E\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v3 w v2 G) ?v'\n   (rev_path ?ps) ?v =\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v3 w v2 G) ?v ?ps ?v'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail (del_unEdge v3 w v2 G) v2\n     (rev_path ps) v1", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v3 w v2 G) v2\n   (rev_path ps) v1\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "hence \"is_Eulerian_trail v3 ((v3,w,v2)#(rev_path ps)) v1\""], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v3 w v2 G) v2\n   (rev_path ps) v1\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v3 ((v3, w, v2) # rev_path ps) v1", "using eulerian_cons"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v3 w v2 G) v2\n   (rev_path ps) v1\n  \\<lbrakk>valid_unMultigraph.is_Eulerian_trail\n            (del_unEdge ?v0.0 ?w ?v1.0 G) ?v1.0 ?ps ?v2.0;\n   (?v0.0, ?w, ?v1.0) \\<in> E\\<rbrakk>\n  \\<Longrightarrow> is_Eulerian_trail ?v0.0 ((?v0.0, ?w, ?v1.0) # ?ps) ?v2.0\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v3 ((v3, w, v2) # rev_path ps) v1", "by (metis assms(2) corres)"], ["proof (state)\nthis:\n  is_Eulerian_trail v3 ((v3, w, v2) # rev_path ps) v1\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "hence \"is_Eulerian_trail v1 (rev_path((v3,w,v2)#(rev_path ps))) v3\""], ["proof (prove)\nusing this:\n  is_Eulerian_trail v3 ((v3, w, v2) # rev_path ps) v1\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (rev_path ((v3, w, v2) # rev_path ps)) v3", "using euclerian_rev"], ["proof (prove)\nusing this:\n  is_Eulerian_trail v3 ((v3, w, v2) # rev_path ps) v1\n  is_Eulerian_trail ?v' (rev_path ?ps) ?v = is_Eulerian_trail ?v ?ps ?v'\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (rev_path ((v3, w, v2) # rev_path ps)) v3", "by auto"], ["proof (state)\nthis:\n  is_Eulerian_trail v1 (rev_path ((v3, w, v2) # rev_path ps)) v3\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "moreover"], ["proof (state)\nthis:\n  is_Eulerian_trail v1 (rev_path ((v3, w, v2) # rev_path ps)) v3\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "have \"rev_path((v3,w,v2)#(rev_path ps)) = rev_path(rev_path ps)@[(v2,w,v3)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_path ((v3, w, v2) # rev_path ps) =\n    rev_path (rev_path ps) @ [(v2, w, v3)]", "unfolding rev_path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>(a, b, c). (c, b, a))\n     (rev ((v3, w, v2) # map (\\<lambda>(a, b, c). (c, b, a)) (rev ps))) =\n    map (\\<lambda>(a, b, c). (c, b, a))\n     (rev (map (\\<lambda>(a, b, c). (c, b, a)) (rev ps))) @\n    [(v2, w, v3)]", "by auto"], ["proof (state)\nthis:\n  rev_path ((v3, w, v2) # rev_path ps) =\n  rev_path (rev_path ps) @ [(v2, w, v3)]\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "hence \"rev_path((v3,w,v2)#(rev_path ps))=ps@[(v2,w,v3)]\""], ["proof (prove)\nusing this:\n  rev_path ((v3, w, v2) # rev_path ps) =\n  rev_path (rev_path ps) @ [(v2, w, v3)]\n\ngoal (1 subgoal):\n 1. rev_path ((v3, w, v2) # rev_path ps) = ps @ [(v2, w, v3)]", "by auto"], ["proof (state)\nthis:\n  rev_path ((v3, w, v2) # rev_path ps) = ps @ [(v2, w, v3)]\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "ultimately"], ["proof (chain)\npicking this:\n  is_Eulerian_trail v1 (rev_path ((v3, w, v2) # rev_path ps)) v3\n  rev_path ((v3, w, v2) # rev_path ps) = ps @ [(v2, w, v3)]", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Eulerian_trail v1 (rev_path ((v3, w, v2) # rev_path ps)) v3\n  rev_path ((v3, w, v2) # rev_path ps) = ps @ [(v2, w, v3)]\n\ngoal (1 subgoal):\n 1. is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3", "by auto"], ["proof (state)\nthis:\n  is_Eulerian_trail v1 (ps @ [(v2, w, v3)]) v3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eulerian_split:\n  assumes \"nodes G1 \\<inter> nodes G2 = {}\" \"edges G1 \\<inter> edges G2={}\"\n    \"valid_unMultigraph G1\" \"valid_unMultigraph G2\"\n    \"valid_unMultigraph.is_Eulerian_trail  G1 v1 ps1 v1'\"\n    \"valid_unMultigraph.is_Eulerian_trail  G2 v2 ps2 v2'\"\n  shows \"valid_unMultigraph.is_Eulerian_trail \\<lparr>nodes=nodes G1 \\<union> nodes G2,\n          edges=edges G1 \\<union> edges G2 \\<union> {(v1',w,v2),(v2,w,v1')}\\<rparr> v1 (ps1@(v1',w,v2)#ps2) v2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"valid_graph G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph G1", "using \\<open>valid_unMultigraph G1\\<close> valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G1\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G1", "by auto"], ["proof (state)\nthis:\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"valid_graph G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph G2", "using \\<open>valid_unMultigraph G2\\<close> valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G2\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G2", "by auto"], ["proof (state)\nthis:\n  valid_graph G2\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "obtain G where G:\"G=\\<lparr>nodes=nodes G1 \\<union> nodes G2, edges=edges G1 \\<union> edges G2\n      \\<union> {(v1',w,v2),(v2,w,v1')}\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>G.\n        G =\n        \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n           edges =\n             edges G1 \\<union> edges G2 \\<union>\n             {(v1', w, v2), (v2, w, v1')}\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  G =\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(v1', w, v2), (v2, w, v1')}\\<rparr>\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"v1'\\<in>nodes G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1' \\<in> nodes G1", "by (metis (full_types) \\<open>valid_graph G1\\<close> assms(3) assms(5) valid_graph.is_path_memb\n        valid_unMultigraph.is_trail_intro valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  v1' \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "moreover"], ["proof (state)\nthis:\n  v1' \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"v2\\<in>nodes G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v2 \\<in> nodes G2", "by (metis (full_types) \\<open>valid_graph G2\\<close> assms(4) assms(6) valid_graph.is_path_memb\n        valid_unMultigraph.is_trail_intro valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  v2 \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "moreover"], ["proof (state)\nthis:\n  v2 \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \\<open>ba \\<in> nodes G1\\<close> if \\<open>(aa, ab, ba) \\<in> edges G1\\<close>\n    for aa ab ba"], ["proof (prove)\ngoal (1 subgoal):\n 1. ba \\<in> nodes G1", "using that"], ["proof (prove)\nusing this:\n  (aa, ab, ba) \\<in> edges G1\n\ngoal (1 subgoal):\n 1. ba \\<in> nodes G1", "by (meson \\<open>valid_graph G1\\<close> valid_graph.E_validD(2))"], ["proof (state)\nthis:\n  (?aa, ?ab, ?ba) \\<in> edges G1 \\<Longrightarrow> ?ba \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "ultimately"], ["proof (chain)\npicking this:\n  v1' \\<in> nodes G1\n  v2 \\<in> nodes G2\n  (?aa, ?ab, ?ba) \\<in> edges G1 \\<Longrightarrow> ?ba \\<in> nodes G1", "have \"valid_unMultigraph \\<lparr>nodes=nodes G1 \\<union> nodes G2, edges=edges G1 \\<union> edges G2 \\<union>\n                   {(v1',w,v2),(v2,w,v1')}\\<rparr>\""], ["proof (prove)\nusing this:\n  v1' \\<in> nodes G1\n  v2 \\<in> nodes G2\n  (?aa, ?ab, ?ba) \\<in> edges G1 \\<Longrightarrow> ?ba \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. valid_unMultigraph\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>", "using\n      valid_unMultigraph.corres[OF \\<open>valid_unMultigraph G1\\<close>]\n      valid_unMultigraph.no_id[OF \\<open>valid_unMultigraph G1\\<close>]\n      valid_unMultigraph.corres[OF \\<open>valid_unMultigraph G2\\<close>]\n      valid_unMultigraph.no_id[OF \\<open>valid_unMultigraph G2\\<close>]\n      valid_graph.E_validD[OF \\<open>valid_graph G1\\<close>]\n      valid_graph.E_validD[OF \\<open>valid_graph G2\\<close>]\n      \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>"], ["proof (prove)\nusing this:\n  v1' \\<in> nodes G1\n  v2 \\<in> nodes G2\n  (?aa, ?ab, ?ba) \\<in> edges G1 \\<Longrightarrow> ?ba \\<in> nodes G1\n  ((?v, ?w, ?u') \\<in> edges G1) = ((?u', ?w, ?v) \\<in> edges G1)\n  (?v, ?w, ?v) \\<notin> edges G1\n  ((?v, ?w, ?u') \\<in> edges G2) = ((?u', ?w, ?v) \\<in> edges G2)\n  (?v, ?w, ?v) \\<notin> edges G2\n  (?v, ?e, ?v') \\<in> edges G1 \\<Longrightarrow> ?v \\<in> nodes G1\n  (?v, ?e, ?v') \\<in> edges G1 \\<Longrightarrow> ?v' \\<in> nodes G1\n  (?v, ?e, ?v') \\<in> edges G2 \\<Longrightarrow> ?v \\<in> nodes G2\n  (?v, ?e, ?v') \\<in> edges G2 \\<Longrightarrow> ?v' \\<in> nodes G2\n  nodes G1 \\<inter> nodes G2 = {}\n\ngoal (1 subgoal):\n 1. valid_unMultigraph\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>", "by unfold_locales auto"], ["proof (state)\nthis:\n  valid_unMultigraph\n   \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n      edges =\n        edges G1 \\<union> edges G2 \\<union>\n        {(v1', w, v2), (v2, w, v1')}\\<rparr>\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "hence valid: \"valid_unMultigraph G\""], ["proof (prove)\nusing this:\n  valid_unMultigraph\n   \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n      edges =\n        edges G1 \\<union> edges G2 \\<union>\n        {(v1', w, v2), (v2, w, v1')}\\<rparr>\n\ngoal (1 subgoal):\n 1. valid_unMultigraph G", "using G"], ["proof (prove)\nusing this:\n  valid_unMultigraph\n   \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n      edges =\n        edges G1 \\<union> edges G2 \\<union>\n        {(v1', w, v2), (v2, w, v1')}\\<rparr>\n  G =\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(v1', w, v2), (v2, w, v1')}\\<rparr>\n\ngoal (1 subgoal):\n 1. valid_unMultigraph G", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "hence valid':\"valid_graph G\""], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n\ngoal (1 subgoal):\n 1. valid_graph G", "using valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G", "by auto"], ["proof (state)\nthis:\n  valid_graph G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "moreover"], ["proof (state)\nthis:\n  valid_graph G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"valid_unMultigraph.is_trail G v1 (ps1@((v1',w,v2)#ps2)) v2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have ps1_G:\"valid_unMultigraph.is_trail G v1 ps1 v1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "have \"valid_unMultigraph.is_trail G1 v1 ps1 v1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G1 v1 ps1 v1'", "using assms"], ["proof (prove)\nusing this:\n  nodes G1 \\<inter> nodes G2 = {}\n  edges G1 \\<inter> edges G2 = {}\n  valid_unMultigraph G1\n  valid_unMultigraph G2\n  valid_unMultigraph.is_Eulerian_trail G1 v1 ps1 v1'\n  valid_unMultigraph.is_Eulerian_trail G2 v2 ps2 v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G1 v1 ps1 v1'", "by (metis valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G1 v1 ps1 v1'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "moreover"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G1 v1 ps1 v1'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "have \"edges G1 \\<subseteq> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G1 \\<subseteq> edges G", "by (metis G UnI1 Un_assoc select_convs(2) subrelI)"], ["proof (state)\nthis:\n  edges G1 \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "moreover"], ["proof (state)\nthis:\n  edges G1 \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "have \"nodes G1 \\<subseteq> nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes G1 \\<subseteq> nodes G", "by (metis G inf_sup_absorb le_iff_inf select_convs(1))"], ["proof (state)\nthis:\n  nodes G1 \\<subseteq> nodes G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "ultimately"], ["proof (chain)\npicking this:\n  valid_unMultigraph.is_trail G1 v1 ps1 v1'\n  edges G1 \\<subseteq> edges G\n  nodes G1 \\<subseteq> nodes G", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_trail G1 v1 ps1 v1'\n  edges G1 \\<subseteq> edges G\n  nodes G1 \\<subseteq> nodes G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "using distinct_path_subset[of G1 G,OF \\<open>valid_unMultigraph G1\\<close> valid]"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_trail G1 v1 ps1 v1'\n  edges G1 \\<subseteq> edges G\n  nodes G1 \\<subseteq> nodes G\n  \\<lbrakk>edges G1 \\<subseteq> edges G; nodes G1 \\<subseteq> nodes G;\n   valid_unMultigraph.is_trail G1 ?v ?ps ?v'\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_trail G ?v ?ps ?v'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 ps1 v1'", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G v1 ps1 v1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G v1 ps1 v1'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have ps2_G:\"valid_unMultigraph.is_trail G v2 ps2 v2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "have \"valid_unMultigraph.is_trail G2 v2 ps2 v2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G2 v2 ps2 v2'", "using assms"], ["proof (prove)\nusing this:\n  nodes G1 \\<inter> nodes G2 = {}\n  edges G1 \\<inter> edges G2 = {}\n  valid_unMultigraph G1\n  valid_unMultigraph G2\n  valid_unMultigraph.is_Eulerian_trail G1 v1 ps1 v1'\n  valid_unMultigraph.is_Eulerian_trail G2 v2 ps2 v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G2 v2 ps2 v2'", "by (metis valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G2 v2 ps2 v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "moreover"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G2 v2 ps2 v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "have \"edges G2 \\<subseteq> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G2 \\<subseteq> edges G", "by (metis G inf_sup_ord(3) le_supE select_convs(2))"], ["proof (state)\nthis:\n  edges G2 \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "moreover"], ["proof (state)\nthis:\n  edges G2 \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "have \"nodes G2 \\<subseteq> nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes G2 \\<subseteq> nodes G", "by (metis G inf_sup_ord(4) select_convs(1))"], ["proof (state)\nthis:\n  nodes G2 \\<subseteq> nodes G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "ultimately"], ["proof (chain)\npicking this:\n  valid_unMultigraph.is_trail G2 v2 ps2 v2'\n  edges G2 \\<subseteq> edges G\n  nodes G2 \\<subseteq> nodes G", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_trail G2 v2 ps2 v2'\n  edges G2 \\<subseteq> edges G\n  nodes G2 \\<subseteq> nodes G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "using distinct_path_subset[of G2 G,OF \\<open>valid_unMultigraph G2\\<close> valid]"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_trail G2 v2 ps2 v2'\n  edges G2 \\<subseteq> edges G\n  nodes G2 \\<subseteq> nodes G\n  \\<lbrakk>edges G2 \\<subseteq> edges G; nodes G2 \\<subseteq> nodes G;\n   valid_unMultigraph.is_trail G2 ?v ?ps ?v'\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_trail G ?v ?ps ?v'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v2 ps2 v2'", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G v2 ps2 v2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G v2 ps2 v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"valid_graph.is_path G v1 (ps1@((v1',w,v2)#ps2)) v2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"valid_graph.is_path  G v1 ps1 v1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 ps1 v1'", "by (metis ps1_G valid valid_unMultigraph.is_trail_intro)"], ["proof (state)\nthis:\n  valid_graph.is_path G v1 ps1 v1'\n\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "moreover"], ["proof (state)\nthis:\n  valid_graph.is_path G v1 ps1 v1'\n\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"valid_graph.is_path G v2 ps2 v2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph.is_path G v2 ps2 v2'", "by (metis ps2_G valid valid_unMultigraph.is_trail_intro)"], ["proof (state)\nthis:\n  valid_graph.is_path G v2 ps2 v2'\n\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "moreover"], ["proof (state)\nthis:\n  valid_graph.is_path G v2 ps2 v2'\n\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"(v1',w,v2) \\<in> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v1', w, v2) \\<in> edges G", "using G"], ["proof (prove)\nusing this:\n  G =\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(v1', w, v2), (v2, w, v1')}\\<rparr>\n\ngoal (1 subgoal):\n 1. (v1', w, v2) \\<in> edges G", "by auto"], ["proof (state)\nthis:\n  (v1', w, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "ultimately"], ["proof (chain)\npicking this:\n  valid_graph.is_path G v1 ps1 v1'\n  valid_graph.is_path G v2 ps2 v2'\n  (v1', w, v2) \\<in> edges G", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_graph.is_path G v1 ps1 v1'\n  valid_graph.is_path G v2 ps2 v2'\n  (v1', w, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "using valid_graph.is_path_split'[OF valid',of v1 ps1 v1' w v2 ps2 v2']"], ["proof (prove)\nusing this:\n  valid_graph.is_path G v1 ps1 v1'\n  valid_graph.is_path G v2 ps2 v2'\n  (v1', w, v2) \\<in> edges G\n  valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2' =\n  (valid_graph.is_path G v1 ps1 v1' \\<and>\n   (v1', w, v2) \\<in> edges G \\<and> valid_graph.is_path G v2 ps2 v2')\n\ngoal (1 subgoal):\n 1. valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "by auto"], ["proof (state)\nthis:\n  valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "moreover"], ["proof (state)\nthis:\n  valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"distinct (ps1@((v1',w,v2)#ps2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "have \"distinct ps1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ps1", "by (metis ps1_G valid valid_unMultigraph.is_trail_path)"], ["proof (state)\nthis:\n  distinct ps1\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "moreover"], ["proof (state)\nthis:\n  distinct ps1\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "have \"distinct ps2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ps2", "by (metis ps2_G valid valid_unMultigraph.is_trail_path)"], ["proof (state)\nthis:\n  distinct ps2\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "moreover"], ["proof (state)\nthis:\n  distinct ps2\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "have \"set ps1 \\<inter> set ps2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set ps2 = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set ps2 = {}", "have \"set ps1 \\<subseteq>edges G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ps1 \\<subseteq> edges G1", "by (metis assms(3) assms(5) valid_unMultigraph.is_Eulerian_trail_def\n                    valid_unMultigraph.path_in_edges)"], ["proof (state)\nthis:\n  set ps1 \\<subseteq> edges G1\n\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set ps2 = {}", "moreover"], ["proof (state)\nthis:\n  set ps1 \\<subseteq> edges G1\n\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set ps2 = {}", "have \"set ps2 \\<subseteq> edges G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ps2 \\<subseteq> edges G2", "by (metis assms(4) assms(6) valid_unMultigraph.is_Eulerian_trail_def\n                    valid_unMultigraph.path_in_edges)"], ["proof (state)\nthis:\n  set ps2 \\<subseteq> edges G2\n\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set ps2 = {}", "ultimately"], ["proof (chain)\npicking this:\n  set ps1 \\<subseteq> edges G1\n  set ps2 \\<subseteq> edges G2", "show ?thesis"], ["proof (prove)\nusing this:\n  set ps1 \\<subseteq> edges G1\n  set ps2 \\<subseteq> edges G2\n\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set ps2 = {}", "using \\<open>edges G1 \\<inter> edges G2={}\\<close>"], ["proof (prove)\nusing this:\n  set ps1 \\<subseteq> edges G1\n  set ps2 \\<subseteq> edges G2\n  edges G1 \\<inter> edges G2 = {}\n\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set ps2 = {}", "by auto"], ["proof (state)\nthis:\n  set ps1 \\<inter> set ps2 = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set ps1 \\<inter> set ps2 = {}\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "moreover"], ["proof (state)\nthis:\n  set ps1 \\<inter> set ps2 = {}\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "have \"(v1',w,v2)\\<notin>edges G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v1', w, v2) \\<notin> edges G1", "using \\<open>v2 \\<in> nodes G2\\<close> \\<open>valid_graph G1\\<close>"], ["proof (prove)\nusing this:\n  v2 \\<in> nodes G2\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. (v1', w, v2) \\<notin> edges G1", "by (metis Int_iff  all_not_in_conv assms(1) valid_graph.E_validD(2))"], ["proof (state)\nthis:\n  (v1', w, v2) \\<notin> edges G1\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "hence \"(v1',w,v2)\\<notin>set ps1\""], ["proof (prove)\nusing this:\n  (v1', w, v2) \\<notin> edges G1\n\ngoal (1 subgoal):\n 1. (v1', w, v2) \\<notin> set ps1", "by (metis (full_types) assms(3) assms(5) subsetD valid_unMultigraph.path_in_edges\n                valid_unMultigraph.is_Eulerian_trail_def )"], ["proof (state)\nthis:\n  (v1', w, v2) \\<notin> set ps1\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "moreover"], ["proof (state)\nthis:\n  (v1', w, v2) \\<notin> set ps1\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "have \"(v1',w,v2)\\<notin>edges G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v1', w, v2) \\<notin> edges G2", "using \\<open>v1' \\<in> nodes G1\\<close> \\<open>valid_graph G2\\<close>"], ["proof (prove)\nusing this:\n  v1' \\<in> nodes G1\n  valid_graph G2\n\ngoal (1 subgoal):\n 1. (v1', w, v2) \\<notin> edges G2", "by (metis  assms(1) disjoint_iff_not_equal valid_graph.E_validD(1))"], ["proof (state)\nthis:\n  (v1', w, v2) \\<notin> edges G2\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "hence  \"(v1',w,v2)\\<notin>set ps2\""], ["proof (prove)\nusing this:\n  (v1', w, v2) \\<notin> edges G2\n\ngoal (1 subgoal):\n 1. (v1', w, v2) \\<notin> set ps2", "by (metis (full_types)  assms(4) assms(6) in_mono valid_unMultigraph.path_in_edges\n                valid_unMultigraph.is_Eulerian_trail_def )"], ["proof (state)\nthis:\n  (v1', w, v2) \\<notin> set ps2\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "ultimately"], ["proof (chain)\npicking this:\n  distinct ps1\n  distinct ps2\n  set ps1 \\<inter> set ps2 = {}\n  (v1', w, v2) \\<notin> set ps1\n  (v1', w, v2) \\<notin> set ps2", "show ?thesis"], ["proof (prove)\nusing this:\n  distinct ps1\n  distinct ps2\n  set ps1 \\<inter> set ps2 = {}\n  (v1', w, v2) \\<notin> set ps1\n  (v1', w, v2) \\<notin> set ps2\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "using distinct_append"], ["proof (prove)\nusing this:\n  distinct ps1\n  distinct ps2\n  set ps1 \\<inter> set ps2 = {}\n  (v1', w, v2) \\<notin> set ps1\n  (v1', w, v2) \\<notin> set ps2\n  distinct (?xs @ ?ys) =\n  (distinct ?xs \\<and> distinct ?ys \\<and> set ?xs \\<inter> set ?ys = {})\n\ngoal (1 subgoal):\n 1. distinct (ps1 @ (v1', w, v2) # ps2)", "by auto"], ["proof (state)\nthis:\n  distinct (ps1 @ (v1', w, v2) # ps2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct (ps1 @ (v1', w, v2) # ps2)\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "moreover"], ["proof (state)\nthis:\n  distinct (ps1 @ (v1', w, v2) # ps2)\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"set (ps1@((v1',w,v2)#ps2)) \\<inter> set (rev_path (ps1@((v1',w,v2)#ps2))) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "have \"set ps1 \\<inter> set (rev_path ps1) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set (rev_path ps1) = {}", "by (metis ps1_G valid valid_unMultigraph.is_trail_path)"], ["proof (state)\nthis:\n  set ps1 \\<inter> set (rev_path ps1) = {}\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "moreover"], ["proof (state)\nthis:\n  set ps1 \\<inter> set (rev_path ps1) = {}\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "have \"set (rev_path ps2) \\<subseteq> edges G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rev_path ps2) \\<subseteq> edges G2", "by (metis assms(4) assms(6) valid_unMultigraph.is_trail_rev\n                valid_unMultigraph.is_Eulerian_trail_def valid_unMultigraph.path_in_edges)"], ["proof (state)\nthis:\n  set (rev_path ps2) \\<subseteq> edges G2\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "hence \"set ps1 \\<inter> set (rev_path ps2) = {}\""], ["proof (prove)\nusing this:\n  set (rev_path ps2) \\<subseteq> edges G2\n\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set (rev_path ps2) = {}", "using assms\n              valid_unMultigraph.path_in_edges[OF \\<open>valid_unMultigraph G1\\<close>, of v1 ps1 v1']\n              valid_unMultigraph.path_in_edges[OF \\<open>valid_unMultigraph G2\\<close>, of v2 ps2 v2']"], ["proof (prove)\nusing this:\n  set (rev_path ps2) \\<subseteq> edges G2\n  nodes G1 \\<inter> nodes G2 = {}\n  edges G1 \\<inter> edges G2 = {}\n  valid_unMultigraph G1\n  valid_unMultigraph G2\n  valid_unMultigraph.is_Eulerian_trail G1 v1 ps1 v1'\n  valid_unMultigraph.is_Eulerian_trail G2 v2 ps2 v2'\n  valid_unMultigraph.is_trail G1 v1 ps1 v1' \\<Longrightarrow>\n  set ps1 \\<subseteq> edges G1\n  valid_unMultigraph.is_trail G2 v2 ps2 v2' \\<Longrightarrow>\n  set ps2 \\<subseteq> edges G2\n\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set (rev_path ps2) = {}", "unfolding valid_unMultigraph.is_Eulerian_trail_def[OF \\<open>valid_unMultigraph G1\\<close>]\n              valid_unMultigraph.is_Eulerian_trail_def[OF \\<open>valid_unMultigraph G2\\<close>]"], ["proof (prove)\nusing this:\n  set (rev_path ps2) \\<subseteq> edges G2\n  nodes G1 \\<inter> nodes G2 = {}\n  edges G1 \\<inter> edges G2 = {}\n  valid_unMultigraph G1\n  valid_unMultigraph G2\n  valid_unMultigraph.is_trail G1 v1 ps1 v1' \\<and>\n  edges (rem_unPath ps1 G1) = {}\n  valid_unMultigraph.is_trail G2 v2 ps2 v2' \\<and>\n  edges (rem_unPath ps2 G2) = {}\n  valid_unMultigraph.is_trail G1 v1 ps1 v1' \\<Longrightarrow>\n  set ps1 \\<subseteq> edges G1\n  valid_unMultigraph.is_trail G2 v2 ps2 v2' \\<Longrightarrow>\n  set ps2 \\<subseteq> edges G2\n\ngoal (1 subgoal):\n 1. set ps1 \\<inter> set (rev_path ps2) = {}", "by auto"], ["proof (state)\nthis:\n  set ps1 \\<inter> set (rev_path ps2) = {}\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "moreover"], ["proof (state)\nthis:\n  set ps1 \\<inter> set (rev_path ps2) = {}\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "have \"set ps2 \\<inter> set (rev_path ps2) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ps2 \\<inter> set (rev_path ps2) = {}", "by (metis ps2_G valid valid_unMultigraph.is_trail_path)"], ["proof (state)\nthis:\n  set ps2 \\<inter> set (rev_path ps2) = {}\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "moreover"], ["proof (state)\nthis:\n  set ps2 \\<inter> set (rev_path ps2) = {}\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "have \"set (rev_path ps1) \\<subseteq>edges G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rev_path ps1) \\<subseteq> edges G1", "by (metis assms(3) assms(5) valid_unMultigraph.is_Eulerian_trail_def\n                valid_unMultigraph.path_in_edges valid_unMultigraph.euclerian_rev)"], ["proof (state)\nthis:\n  set (rev_path ps1) \\<subseteq> edges G1\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "hence \"set ps2 \\<inter> set (rev_path ps1) = {}\""], ["proof (prove)\nusing this:\n  set (rev_path ps1) \\<subseteq> edges G1\n\ngoal (1 subgoal):\n 1. set ps2 \\<inter> set (rev_path ps1) = {}", "by (metis calculation(2) distinct_append distinct_rev_path ps1_G ps2_G rev_path_append\n              rev_path_double valid valid_unMultigraph.is_trail_path)"], ["proof (state)\nthis:\n  set ps2 \\<inter> set (rev_path ps1) = {}\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "moreover"], ["proof (state)\nthis:\n  set ps2 \\<inter> set (rev_path ps1) = {}\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "have \"(v2,w,v1')\\<notin>set (ps1@((v1',w,v2)#ps2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "have \"(v2,w,v1')\\<notin>edges G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> edges G1", "using \\<open>v2 \\<in> nodes G2\\<close> \\<open>valid_graph G1\\<close>"], ["proof (prove)\nusing this:\n  v2 \\<in> nodes G2\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> edges G1", "by (metis Int_iff  all_not_in_conv assms(1) valid_graph.E_validD(1))"], ["proof (state)\nthis:\n  (v2, w, v1') \\<notin> edges G1\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "hence \"(v2,w,v1')\\<notin>set ps1\""], ["proof (prove)\nusing this:\n  (v2, w, v1') \\<notin> edges G1\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set ps1", "by (metis assms(3) assms(5) split_list valid_unMultigraph.is_trail_split'\n                    valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  (v2, w, v1') \\<notin> set ps1\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "moreover"], ["proof (state)\nthis:\n  (v2, w, v1') \\<notin> set ps1\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "have \"(v2,w,v1')\\<notin>edges G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> edges G2", "using \\<open>v1' \\<in> nodes G1\\<close> \\<open>valid_graph G2\\<close>"], ["proof (prove)\nusing this:\n  v1' \\<in> nodes G1\n  valid_graph G2\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> edges G2", "by (metis IntI assms(1) empty_iff valid_graph.E_validD(2))"], ["proof (state)\nthis:\n  (v2, w, v1') \\<notin> edges G2\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "hence \"(v2,w,v1')\\<notin>set ps2\""], ["proof (prove)\nusing this:\n  (v2, w, v1') \\<notin> edges G2\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set ps2", "by (metis (full_types) assms(4) assms(6) in_mono  valid_unMultigraph.path_in_edges\n                    valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  (v2, w, v1') \\<notin> set ps2\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "moreover"], ["proof (state)\nthis:\n  (v2, w, v1') \\<notin> set ps2\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "have \"(v2,w,v1')\\<noteq>(v1',w,v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<noteq> (v1', w, v2)", "using \\<open>v1' \\<in> nodes G1\\<close> \\<open>v2 \\<in> nodes G2\\<close>"], ["proof (prove)\nusing this:\n  v1' \\<in> nodes G1\n  v2 \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<noteq> (v1', w, v2)", "by (metis IntI Pair_inject  assms(1) assms(5) bex_empty)"], ["proof (state)\nthis:\n  (v2, w, v1') \\<noteq> (v1', w, v2)\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "ultimately"], ["proof (chain)\npicking this:\n  (v2, w, v1') \\<notin> set ps1\n  (v2, w, v1') \\<notin> set ps2\n  (v2, w, v1') \\<noteq> (v1', w, v2)", "show ?thesis"], ["proof (prove)\nusing this:\n  (v2, w, v1') \\<notin> set ps1\n  (v2, w, v1') \\<notin> set ps2\n  (v2, w, v1') \\<noteq> (v1', w, v2)\n\ngoal (1 subgoal):\n 1. (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "by auto"], ["proof (state)\nthis:\n  (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "ultimately"], ["proof (chain)\npicking this:\n  set ps1 \\<inter> set (rev_path ps1) = {}\n  set ps1 \\<inter> set (rev_path ps2) = {}\n  set ps2 \\<inter> set (rev_path ps2) = {}\n  set ps2 \\<inter> set (rev_path ps1) = {}\n  (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)", "show ?thesis"], ["proof (prove)\nusing this:\n  set ps1 \\<inter> set (rev_path ps1) = {}\n  set ps1 \\<inter> set (rev_path ps2) = {}\n  set ps2 \\<inter> set (rev_path ps2) = {}\n  set ps2 \\<inter> set (rev_path ps1) = {}\n  (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "using rev_path_append"], ["proof (prove)\nusing this:\n  set ps1 \\<inter> set (rev_path ps1) = {}\n  set ps1 \\<inter> set (rev_path ps2) = {}\n  set ps2 \\<inter> set (rev_path ps2) = {}\n  set ps2 \\<inter> set (rev_path ps1) = {}\n  (v2, w, v1') \\<notin> set (ps1 @ (v1', w, v2) # ps2)\n  rev_path (?xs @ ?ys) = rev_path ?ys @ rev_path ?xs\n\ngoal (1 subgoal):\n 1. set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n    set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n    {}", "by auto"], ["proof (state)\nthis:\n  set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n  set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n  set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n  {}\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "ultimately"], ["proof (chain)\npicking this:\n  valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n  distinct (ps1 @ (v1', w, v2) # ps2)\n  set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n  set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n  distinct (ps1 @ (v1', w, v2) # ps2)\n  set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n  set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n  {}\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "using valid_unMultigraph.is_trail_path[OF valid]"], ["proof (prove)\nusing this:\n  valid_graph.is_path G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n  distinct (ps1 @ (v1', w, v2) # ps2)\n  set (ps1 @ (v1', w, v2) # ps2) \\<inter>\n  set (rev_path (ps1 @ (v1', w, v2) # ps2)) =\n  {}\n  valid_unMultigraph.is_trail G ?v ?ps ?v' =\n  (valid_graph.is_path G ?v ?ps ?v' \\<and>\n   distinct ?ps \\<and> set ?ps \\<inter> set (rev_path ?ps) = {})\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "moreover"], ["proof (state)\nthis:\n  valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "have \"edges (rem_unPath (ps1@((v1',w,v2)#ps2)) G)= {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "have \"edges (rem_unPath (ps1@((v1',w,v2)#ps2)) G)=edges G -\n           (set (ps1@((v1',w,v2)#ps2)) \\<union> set (rev_path (ps1@((v1',w,v2)#ps2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n    edges G -\n    (set (ps1 @ (v1', w, v2) # ps2) \\<union>\n     set (rev_path (ps1 @ (v1', w, v2) # ps2)))", "by (metis rem_unPath_edges)"], ["proof (state)\nthis:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set (ps1 @ (v1', w, v2) # ps2) \\<union>\n   set (rev_path (ps1 @ (v1', w, v2) # ps2)))\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "also"], ["proof (state)\nthis:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set (ps1 @ (v1', w, v2) # ps2) \\<union>\n   set (rev_path (ps1 @ (v1', w, v2) # ps2)))\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "have \"...=edges G - (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union> set (rev_path ps2)\n                 \\<union> {(v1',w,v2),(v2,w,v1')})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G -\n    (set (ps1 @ (v1', w, v2) # ps2) \\<union>\n     set (rev_path (ps1 @ (v1', w, v2) # ps2))) =\n    edges G -\n    (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n     set (rev_path ps2) \\<union>\n     {(v1', w, v2), (v2, w, v1')})", "using rev_path_append"], ["proof (prove)\nusing this:\n  rev_path (?xs @ ?ys) = rev_path ?ys @ rev_path ?xs\n\ngoal (1 subgoal):\n 1. edges G -\n    (set (ps1 @ (v1', w, v2) # ps2) \\<union>\n     set (rev_path (ps1 @ (v1', w, v2) # ps2))) =\n    edges G -\n    (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n     set (rev_path ps2) \\<union>\n     {(v1', w, v2), (v2, w, v1')})", "by auto"], ["proof (state)\nthis:\n  edges G -\n  (set (ps1 @ (v1', w, v2) # ps2) \\<union>\n   set (rev_path (ps1 @ (v1', w, v2) # ps2))) =\n  edges G -\n  (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n   set (rev_path ps2) \\<union>\n   {(v1', w, v2), (v2, w, v1')})\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "finally"], ["proof (chain)\npicking this:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n   set (rev_path ps2) \\<union>\n   {(v1', w, v2), (v2, w, v1')})", "have \"edges (rem_unPath (ps1@((v1',w,v2)#ps2)) G) = edges G - (set ps1 \\<union>\n                    set ps2 \\<union> set (rev_path ps1) \\<union> set (rev_path ps2) \\<union> {(v1',w,v2),(v2,w,v1')})\""], ["proof (prove)\nusing this:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n   set (rev_path ps2) \\<union>\n   {(v1', w, v2), (v2, w, v1')})\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n    edges G -\n    (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n     set (rev_path ps2) \\<union>\n     {(v1', w, v2), (v2, w, v1')})", "."], ["proof (state)\nthis:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n   set (rev_path ps2) \\<union>\n   {(v1', w, v2), (v2, w, v1')})\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "moreover"], ["proof (state)\nthis:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n   set (rev_path ps2) \\<union>\n   {(v1', w, v2), (v2, w, v1')})\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "have \"edges (rem_unPath ps1 G1)={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (rem_unPath ps1 G1) = {}", "by (metis assms(3) assms(5) valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  edges (rem_unPath ps1 G1) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "hence \"edges G1 - (set ps1 \\<union> set (rev_path ps1))={}\""], ["proof (prove)\nusing this:\n  edges (rem_unPath ps1 G1) = {}\n\ngoal (1 subgoal):\n 1. edges G1 - (set ps1 \\<union> set (rev_path ps1)) = {}", "by (metis rem_unPath_edges)"], ["proof (state)\nthis:\n  edges G1 - (set ps1 \\<union> set (rev_path ps1)) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "moreover"], ["proof (state)\nthis:\n  edges G1 - (set ps1 \\<union> set (rev_path ps1)) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "have \"edges (rem_unPath ps2 G2)={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (rem_unPath ps2 G2) = {}", "by (metis assms(4) assms(6) valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  edges (rem_unPath ps2 G2) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "hence \"edges G2 - (set ps2 \\<union> set (rev_path ps2))={}\""], ["proof (prove)\nusing this:\n  edges (rem_unPath ps2 G2) = {}\n\ngoal (1 subgoal):\n 1. edges G2 - (set ps2 \\<union> set (rev_path ps2)) = {}", "by (metis rem_unPath_edges)"], ["proof (state)\nthis:\n  edges G2 - (set ps2 \\<union> set (rev_path ps2)) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "ultimately"], ["proof (chain)\npicking this:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n   set (rev_path ps2) \\<union>\n   {(v1', w, v2), (v2, w, v1')})\n  edges G1 - (set ps1 \\<union> set (rev_path ps1)) = {}\n  edges G2 - (set ps2 \\<union> set (rev_path ps2)) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n   set (rev_path ps2) \\<union>\n   {(v1', w, v2), (v2, w, v1')})\n  edges G1 - (set ps1 \\<union> set (rev_path ps1)) = {}\n  edges G2 - (set ps2 \\<union> set (rev_path ps2)) = {}\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "using G"], ["proof (prove)\nusing this:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) =\n  edges G -\n  (set ps1 \\<union> set ps2 \\<union> set (rev_path ps1) \\<union>\n   set (rev_path ps2) \\<union>\n   {(v1', w, v2), (v2, w, v1')})\n  edges G1 - (set ps1 \\<union> set (rev_path ps1)) = {}\n  edges G2 - (set ps2 \\<union> set (rev_path ps2)) = {}\n  G =\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(v1', w, v2), (v2, w, v1')}\\<rparr>\n\ngoal (1 subgoal):\n 1. edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "by auto"], ["proof (state)\nthis:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "ultimately"], ["proof (chain)\npicking this:\n  valid_graph G\n  valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_graph G\n  valid_unMultigraph.is_trail G v1 (ps1 @ (v1', w, v2) # ps2) v2'\n  edges (rem_unPath (ps1 @ (v1', w, v2) # ps2) G) = {}\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(v1', w, v2), (v2, w, v1')}\\<rparr>\n     v1 (ps1 @ (v1', w, v2) # ps2) v2'", "by (metis G valid valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  valid_unMultigraph.is_Eulerian_trail\n   \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n      edges =\n        edges G1 \\<union> edges G2 \\<union>\n        {(v1', w, v2), (v2, w, v1')}\\<rparr>\n   v1 (ps1 @ (v1', w, v2) # ps2) v2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in valid_unMultigraph) eulerian_sufficient:\n  assumes \"finite V\" \"finite E\" \"connected\" \"V\\<noteq>{}\"\n  shows \"num_of_odd_nodes G = 2 \\<Longrightarrow>\n      (\\<exists>v\\<in>V.\\<exists>v'\\<in>V.\\<exists>ps. odd(degree v G)\\<and>odd(degree v' G)\\<and>(v\\<noteq>v')\\<and>is_Eulerian_trail v ps v')\"\n      and \"num_of_odd_nodes G=0 \\<Longrightarrow> (\\<forall>v\\<in>V.\\<exists>ps. is_Eulerian_circuit v ps v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (num_of_odd_nodes G = 2 \\<Longrightarrow>\n     \\<exists>v\\<in>V.\n        \\<exists>v'\\<in>V.\n           \\<exists>ps.\n              odd (degree v G) \\<and>\n              odd (degree v' G) \\<and>\n              v \\<noteq> v' \\<and> is_Eulerian_trail v ps v') &&&\n    (num_of_odd_nodes G = 0 \\<Longrightarrow>\n     \\<forall>v\\<in>V. \\<exists>ps. is_Eulerian_circuit v ps v)", "using \\<open>finite E\\<close> \\<open>finite V\\<close> valid_unMultigraph_axioms  \\<open>V\\<noteq>{}\\<close> \\<open>connected\\<close>"], ["proof (prove)\nusing this:\n  finite E\n  finite V\n  valid_unMultigraph G\n  V \\<noteq> {}\n  local.connected\n\ngoal (1 subgoal):\n 1. (num_of_odd_nodes G = 2 \\<Longrightarrow>\n     \\<exists>v\\<in>V.\n        \\<exists>v'\\<in>V.\n           \\<exists>ps.\n              odd (degree v G) \\<and>\n              odd (degree v' G) \\<and>\n              v \\<noteq> v' \\<and> is_Eulerian_trail v ps v') &&&\n    (num_of_odd_nodes G = 0 \\<Longrightarrow>\n     \\<forall>v\\<in>V. \\<exists>ps. is_Eulerian_circuit v ps v)", "proof (induct \"card E\" arbitrary: G rule: less_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>card (edges ?G) < card (edges G); num_of_odd_nodes ?G = 2;\n   finite (edges ?G); finite (nodes ?G); valid_unMultigraph ?G;\n   nodes ?G \\<noteq> {}; valid_unMultigraph.connected ?G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes ?G.\n                       \\<exists>v'\\<in>nodes ?G.\n                          \\<exists>ps.\n                             odd (degree v ?G) \\<and>\n                             odd (degree v' ?G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail ?G v ps v'\n  \\<lbrakk>card (edges ?G) < card (edges G); num_of_odd_nodes ?G = 0;\n   finite (edges ?G); finite (nodes ?G); valid_unMultigraph ?G;\n   nodes ?G \\<noteq> {}; valid_unMultigraph.connected ?G\\<rbrakk>\n  \\<Longrightarrow> \\<forall>v\\<in>nodes ?G.\n                       \\<exists>ps.\n                          valid_unMultigraph.is_Eulerian_circuit ?G v ps v\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "assume \"finite (edges G)\" and \"finite (nodes G)\" and \"valid_unMultigraph G\" and \"nodes G\\<noteq>{}\"\n      and \"valid_unMultigraph.connected G\" and \"num_of_odd_nodes G = 2\""], ["proof (state)\nthis:\n  finite (edges G)\n  finite (nodes G)\n  valid_unMultigraph G\n  nodes G \\<noteq> {}\n  valid_unMultigraph.connected G\n  num_of_odd_nodes G = 2\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "have \"valid_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph G", "using \\<open>valid_unMultigraph G\\<close> valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G", "by auto"], ["proof (state)\nthis:\n  valid_graph G\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "obtain n1 n2 where\n      n1: \"n1\\<in>nodes G\" \"odd(degree n1 G)\"\n      and n2: \"n2\\<in>nodes G\" \"odd(degree n2 G)\"\n      and \"n1\\<noteq>n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>n1 \\<in> nodes G; odd (degree n1 G); n2 \\<in> nodes G;\n         odd (degree n2 G); n1 \\<noteq> n2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding num_of_odd_nodes_def odd_nodes_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>n1 \\<in> nodes G; odd (degree n1 G); n2 \\<in> nodes G;\n         odd (degree n2 G); n1 \\<noteq> n2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>n1 \\<in> nodes G; odd (degree n1 G); n2 \\<in> nodes G;\n         odd (degree n2 G); n1 \\<noteq> n2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<forall>S. card S=2 \\<longrightarrow> (\\<exists>n1 n2. n1\\<in>S\\<and>n2\\<in>S\\<and>n1\\<noteq>n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>S.\n       card S = 2 \\<longrightarrow>\n       (\\<exists>n1 n2. n1 \\<in> S \\<and> n2 \\<in> S \\<and> n1 \\<noteq> n2)", "by (metis card_eq_0_iff equals0I even_card' even_numeral zero_neq_numeral)"], ["proof (state)\nthis:\n  \\<forall>S.\n     card S = 2 \\<longrightarrow>\n     (\\<exists>n1 n2. n1 \\<in> S \\<and> n2 \\<in> S \\<and> n1 \\<noteq> n2)\n\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>n1 \\<in> nodes G; odd (degree n1 G); n2 \\<in> nodes G;\n         odd (degree n2 G); n1 \\<noteq> n2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<forall>S.\n     card S = 2 \\<longrightarrow>\n     (\\<exists>n1 n2. n1 \\<in> S \\<and> n2 \\<in> S \\<and> n1 \\<noteq> n2)", "obtain t1 t2\n          where \"t1\\<in>{v \\<in> nodes G. odd (degree v G)}\" \"t2\\<in>{v \\<in> nodes G. odd (degree v G)}\" \"t1\\<noteq>t2\""], ["proof (prove)\nusing this:\n  \\<forall>S.\n     card S = 2 \\<longrightarrow>\n     (\\<exists>n1 n2. n1 \\<in> S \\<and> n2 \\<in> S \\<and> n1 \\<noteq> n2)\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2.\n        \\<lbrakk>t1 \\<in> {v \\<in> nodes G. odd (degree v G)};\n         t2 \\<in> {v \\<in> nodes G. odd (degree v G)};\n         t1 \\<noteq> t2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>num_of_odd_nodes G = 2\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>S.\n     card S = 2 \\<longrightarrow>\n     (\\<exists>n1 n2. n1 \\<in> S \\<and> n2 \\<in> S \\<and> n1 \\<noteq> n2)\n  num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2.\n        \\<lbrakk>t1 \\<in> {v \\<in> nodes G. odd (degree v G)};\n         t2 \\<in> {v \\<in> nodes G. odd (degree v G)};\n         t1 \\<noteq> t2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding num_of_odd_nodes_def odd_nodes_set_def"], ["proof (prove)\nusing this:\n  \\<forall>S.\n     card S = 2 \\<longrightarrow>\n     (\\<exists>n1 n2. n1 \\<in> S \\<and> n2 \\<in> S \\<and> n1 \\<noteq> n2)\n  card {v \\<in> nodes G. odd (degree v G)} = 2\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2.\n        \\<lbrakk>t1 \\<in> {v \\<in> nodes G. odd (degree v G)};\n         t2 \\<in> {v \\<in> nodes G. odd (degree v G)};\n         t1 \\<noteq> t2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  t1 \\<in> {v \\<in> nodes G. odd (degree v G)}\n  t2 \\<in> {v \\<in> nodes G. odd (degree v G)}\n  t1 \\<noteq> t2\n\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>n1 \\<in> nodes G; odd (degree n1 G); n2 \\<in> nodes G;\n         odd (degree n2 G); n1 \\<noteq> n2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  t1 \\<in> {v \\<in> nodes G. odd (degree v G)}\n  t2 \\<in> {v \\<in> nodes G. odd (degree v G)}\n  t1 \\<noteq> t2\n\ngoal (1 subgoal):\n 1. thesis", "by (metis (lifting) that mem_Collect_eq)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n1 \\<in> nodes G\n  odd (degree n1 G)\n  n2 \\<in> nodes G\n  odd (degree n2 G)\n  n1 \\<noteq> n2\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "have even_except_two:\"\\<And>n. n\\<in>nodes G\\<Longrightarrow> n\\<noteq>n1 \\<Longrightarrow> n\\<noteq>n2 \\<Longrightarrow> even(degree n G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2\\<rbrakk>\n       \\<Longrightarrow> even (degree n G)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"n \\<in> nodes G\"  \"n \\<noteq> n1\" \"n \\<noteq> n2\" \"odd (degree n G)\""], ["proof (state)\nthis:\n  n \\<in> nodes G\n  n \\<noteq> n1\n  n \\<noteq> n2\n  odd (degree n G)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"n\\<in> odd_nodes_set G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> odd_nodes_set G", "by (metis (mono_tags) \\<open>n \\<in> nodes G\\<close> \\<open>odd (degree n G)\\<close> mem_Collect_eq odd_nodes_set_def)"], ["proof (state)\nthis:\n  n \\<in> odd_nodes_set G\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n \\<in> odd_nodes_set G\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"n1 \\<in> odd_nodes_set G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<in> odd_nodes_set G", "by (metis (mono_tags) mem_Collect_eq n1(1) n1(2) odd_nodes_set_def)"], ["proof (state)\nthis:\n  n1 \\<in> odd_nodes_set G\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n1 \\<in> odd_nodes_set G\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"n2 \\<in> odd_nodes_set G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n2 \\<in> odd_nodes_set G", "using n2(1) n2(2)"], ["proof (prove)\nusing this:\n  n2 \\<in> nodes G\n  odd (degree n2 G)\n\ngoal (1 subgoal):\n 1. n2 \\<in> odd_nodes_set G", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  n2 \\<in> nodes G\n  odd (degree n2 G)\n\ngoal (1 subgoal):\n 1. n2 \\<in> {v \\<in> nodes G. odd (degree v G)}", "by auto"], ["proof (state)\nthis:\n  n2 \\<in> odd_nodes_set G\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  n \\<in> odd_nodes_set G\n  n1 \\<in> odd_nodes_set G\n  n2 \\<in> odd_nodes_set G", "have \"{n,n1,n2}\\<subseteq> odd_nodes_set G\""], ["proof (prove)\nusing this:\n  n \\<in> odd_nodes_set G\n  n1 \\<in> odd_nodes_set G\n  n2 \\<in> odd_nodes_set G\n\ngoal (1 subgoal):\n 1. {n, n1, n2} \\<subseteq> odd_nodes_set G", "by auto"], ["proof (state)\nthis:\n  {n, n1, n2} \\<subseteq> odd_nodes_set G\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  {n, n1, n2} \\<subseteq> odd_nodes_set G\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"card{n,n1,n2} \\<ge>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 3 \\<le> card {n, n1, n2}", "using \\<open>n1\\<noteq>n2\\<close> \\<open>n\\<noteq>n1\\<close> \\<open>n\\<noteq>n2\\<close>"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  n \\<noteq> n1\n  n \\<noteq> n2\n\ngoal (1 subgoal):\n 1. 3 \\<le> card {n, n1, n2}", "by auto"], ["proof (state)\nthis:\n  3 \\<le> card {n, n1, n2}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  3 \\<le> card {n, n1, n2}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"finite (odd_nodes_set G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (odd_nodes_set G)", "using \\<open>finite (nodes G)\\<close>"], ["proof (prove)\nusing this:\n  finite (nodes G)\n\ngoal (1 subgoal):\n 1. finite (odd_nodes_set G)", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  finite (nodes G)\n\ngoal (1 subgoal):\n 1. finite {v \\<in> nodes G. odd (degree v G)}", "by auto"], ["proof (state)\nthis:\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  {n, n1, n2} \\<subseteq> odd_nodes_set G\n  3 \\<le> card {n, n1, n2}\n  finite (odd_nodes_set G)", "have \"card (odd_nodes_set G) \\<ge> 3\""], ["proof (prove)\nusing this:\n  {n, n1, n2} \\<subseteq> odd_nodes_set G\n  3 \\<le> card {n, n1, n2}\n  finite (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. 3 \\<le> card (odd_nodes_set G)", "using card_mono[of \"odd_nodes_set G\" \"{n, n1, n2}\"]"], ["proof (prove)\nusing this:\n  {n, n1, n2} \\<subseteq> odd_nodes_set G\n  3 \\<le> card {n, n1, n2}\n  finite (odd_nodes_set G)\n  \\<lbrakk>finite (odd_nodes_set G);\n   {n, n1, n2} \\<subseteq> odd_nodes_set G\\<rbrakk>\n  \\<Longrightarrow> card {n, n1, n2} \\<le> card (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. 3 \\<le> card (odd_nodes_set G)", "by auto"], ["proof (state)\nthis:\n  3 \\<le> card (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes G; n \\<noteq> n1; n \\<noteq> n2;\n        odd (degree n G)\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  3 \\<le> card (odd_nodes_set G)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>num_of_odd_nodes G = 2\\<close>"], ["proof (prove)\nusing this:\n  3 \\<le> card (odd_nodes_set G)\n  num_of_odd_nodes G = 2\n\ngoal (1 subgoal):\n 1. False", "unfolding num_of_odd_nodes_def"], ["proof (prove)\nusing this:\n  3 \\<le> card (odd_nodes_set G)\n  card (odd_nodes_set G) = 2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?n \\<in> nodes G; ?n \\<noteq> n1; ?n \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n G)\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "have \"{e \\<in> edges G. fst e = n1}\\<noteq>{}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {e \\<in> edges G. fst e = n1} \\<noteq> {}", "using n1"], ["proof (prove)\nusing this:\n  n1 \\<in> nodes G\n  odd (degree n1 G)\n\ngoal (1 subgoal):\n 1. {e \\<in> edges G. fst e = n1} \\<noteq> {}", "by (metis (full_types) degree_def empty_iff finite.emptyI odd_card)"], ["proof (state)\nthis:\n  {e \\<in> edges G. fst e = n1} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "then"], ["proof (chain)\npicking this:\n  {e \\<in> edges G. fst e = n1} \\<noteq> {}", "obtain v' w where \"(n1,w,v')\\<in>edges G\""], ["proof (prove)\nusing this:\n  {e \\<in> edges G. fst e = n1} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>w v'.\n        (n1, w, v') \\<in> edges G \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (n1, w, v') \\<in> edges G\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "have \"v'=n2 \\<Longrightarrow> (\\<exists>v\\<in>nodes G. \\<exists>v'\\<in>nodes G.\\<exists>ps. odd (degree v G) \\<and> odd (degree v' G)  \\<and> v \\<noteq> v'\n      \\<and> valid_unMultigraph.is_Eulerian_trail G v ps v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' = n2 \\<Longrightarrow>\n    \\<exists>v\\<in>nodes G.\n       \\<exists>v'\\<in>nodes G.\n          \\<exists>ps.\n             odd (degree v G) \\<and>\n             odd (degree v' G) \\<and>\n             v \\<noteq> v' \\<and>\n             valid_unMultigraph.is_Eulerian_trail G v ps v'", "proof (cases \"valid_unMultigraph.connected (del_unEdge n1 w n2 G)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "assume \"v'=n2\""], ["proof (state)\nthis:\n  v' = n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "assume conneted':\"valid_unMultigraph.connected (del_unEdge n1 w n2 G)\""], ["proof (state)\nthis:\n  valid_unMultigraph.connected (del_unEdge n1 w n2 G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  valid_unMultigraph.connected (del_unEdge n1 w n2 G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"num_of_odd_nodes (del_unEdge n1 w n2 G) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_of_odd_nodes (del_unEdge n1 w n2 G) = 0", "using \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>finite (edges G)\\<close> \\<open>finite (nodes G)\\<close>  \\<open>v' = n2\\<close>\n          \\<open>num_of_odd_nodes G = 2\\<close> \\<open>valid_unMultigraph G\\<close> del_UnEdge_odd_odd n1(2) n2(2)"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n  finite (edges G)\n  finite (nodes G)\n  v' = n2\n  num_of_odd_nodes G = 2\n  valid_unMultigraph G\n  \\<lbrakk>valid_unMultigraph ?G; finite (edges ?G); finite (nodes ?G);\n   (?v, ?w, ?v') \\<in> edges ?G; odd (degree ?v ?G);\n   odd (degree ?v' ?G)\\<rbrakk>\n  \\<Longrightarrow> num_of_odd_nodes ?G =\n                    num_of_odd_nodes (del_unEdge ?v ?w ?v' ?G) + 2\n  odd (degree n1 G)\n  odd (degree n2 G)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (del_unEdge n1 w n2 G) = 0", "by force"], ["proof (state)\nthis:\n  num_of_odd_nodes (del_unEdge n1 w n2 G) = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  num_of_odd_nodes (del_unEdge n1 w n2 G) = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (edges (del_unEdge n1 w n2 G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges (del_unEdge n1 w n2 G))", "using \\<open>finite (edges G)\\<close>"], ["proof (prove)\nusing this:\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. finite (edges (del_unEdge n1 w n2 G))", "by auto"], ["proof (state)\nthis:\n  finite (edges (del_unEdge n1 w n2 G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (edges (del_unEdge n1 w n2 G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (nodes (del_unEdge n1 w n2 G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes (del_unEdge n1 w n2 G))", "using \\<open>finite (nodes G)\\<close>"], ["proof (prove)\nusing this:\n  finite (nodes G)\n\ngoal (1 subgoal):\n 1. finite (nodes (del_unEdge n1 w n2 G))", "by auto"], ["proof (state)\nthis:\n  finite (nodes (del_unEdge n1 w n2 G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (nodes (del_unEdge n1 w n2 G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"edges G - {(n1,w,n2),(n2,w,n1)} \\<subset> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G - {(n1, w, n2), (n2, w, n1)} \\<subset> edges G", "using Diff_iff Diff_subset \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>v' = n2\\<close>"], ["proof (prove)\nusing this:\n  (?c \\<in> ?A - ?B) = (?c \\<in> ?A \\<and> ?c \\<notin> ?B)\n  ?A - ?B \\<subseteq> ?A\n  (n1, w, v') \\<in> edges G\n  v' = n2\n\ngoal (1 subgoal):\n 1. edges G - {(n1, w, n2), (n2, w, n1)} \\<subset> edges G", "by fast"], ["proof (state)\nthis:\n  edges G - {(n1, w, n2), (n2, w, n1)} \\<subset> edges G\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"card (edges (del_unEdge n1 w n2 G)) < card (edges G)\""], ["proof (prove)\nusing this:\n  edges G - {(n1, w, n2), (n2, w, n1)} \\<subset> edges G\n\ngoal (1 subgoal):\n 1. card (edges (del_unEdge n1 w n2 G)) < card (edges G)", "using \\<open>finite (edges G)\\<close> psubset_card_mono[of \"edges G\" \"edges G - {(n1,w,n2),(n2,w,n1)}\"]"], ["proof (prove)\nusing this:\n  edges G - {(n1, w, n2), (n2, w, n1)} \\<subset> edges G\n  finite (edges G)\n  \\<lbrakk>finite (edges G);\n   edges G - {(n1, w, n2), (n2, w, n1)} \\<subset> edges G\\<rbrakk>\n  \\<Longrightarrow> card (edges G - {(n1, w, n2), (n2, w, n1)})\n                    < card (edges G)\n\ngoal (1 subgoal):\n 1. card (edges (del_unEdge n1 w n2 G)) < card (edges G)", "unfolding del_unEdge_def"], ["proof (prove)\nusing this:\n  edges G - {(n1, w, n2), (n2, w, n1)} \\<subset> edges G\n  finite (edges G)\n  \\<lbrakk>finite (edges G);\n   edges G - {(n1, w, n2), (n2, w, n1)} \\<subset> edges G\\<rbrakk>\n  \\<Longrightarrow> card (edges G - {(n1, w, n2), (n2, w, n1)})\n                    < card (edges G)\n\ngoal (1 subgoal):\n 1. card\n     (edges\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(n1, w, n2), (n2, w, n1)}\\<rparr>)\n    < card (edges G)", "by auto"], ["proof (state)\nthis:\n  card (edges (del_unEdge n1 w n2 G)) < card (edges G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  card (edges (del_unEdge n1 w n2 G)) < card (edges G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"valid_unMultigraph (del_unEdge n1 w n2 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge n1 w n2 G)", "using \\<open>valid_unMultigraph G\\<close> del_unEdge_valid"], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n  valid_unMultigraph ?g \\<Longrightarrow>\n  valid_unMultigraph (del_unEdge ?v ?e ?v' ?g)\n\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge n1 w n2 G)", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge n1 w n2 G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge n1 w n2 G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"nodes (del_unEdge n1 w n2 G) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (del_unEdge n1 w n2 G) \\<noteq> {}", "by (metis (full_types) del_UnEdge_node empty_iff n1(1))"], ["proof (state)\nthis:\n  nodes (del_unEdge n1 w n2 G) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  valid_unMultigraph.connected (del_unEdge n1 w n2 G)\n  num_of_odd_nodes (del_unEdge n1 w n2 G) = 0\n  finite (edges (del_unEdge n1 w n2 G))\n  finite (nodes (del_unEdge n1 w n2 G))\n  card (edges (del_unEdge n1 w n2 G)) < card (edges G)\n  valid_unMultigraph (del_unEdge n1 w n2 G)\n  nodes (del_unEdge n1 w n2 G) \\<noteq> {}", "have \"\\<forall>v\\<in>nodes (del_unEdge n1 w n2 G). \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit\n          (del_unEdge n1 w n2 G) v ps v\""], ["proof (prove)\nusing this:\n  valid_unMultigraph.connected (del_unEdge n1 w n2 G)\n  num_of_odd_nodes (del_unEdge n1 w n2 G) = 0\n  finite (edges (del_unEdge n1 w n2 G))\n  finite (nodes (del_unEdge n1 w n2 G))\n  card (edges (del_unEdge n1 w n2 G)) < card (edges G)\n  valid_unMultigraph (del_unEdge n1 w n2 G)\n  nodes (del_unEdge n1 w n2 G) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes (del_unEdge n1 w n2 G).\n       \\<exists>ps.\n          valid_unMultigraph.is_Eulerian_circuit (del_unEdge n1 w n2 G) v ps\n           v", "using less.hyps[of \"del_unEdge n1 w n2 G\"]"], ["proof (prove)\nusing this:\n  valid_unMultigraph.connected (del_unEdge n1 w n2 G)\n  num_of_odd_nodes (del_unEdge n1 w n2 G) = 0\n  finite (edges (del_unEdge n1 w n2 G))\n  finite (nodes (del_unEdge n1 w n2 G))\n  card (edges (del_unEdge n1 w n2 G)) < card (edges G)\n  valid_unMultigraph (del_unEdge n1 w n2 G)\n  nodes (del_unEdge n1 w n2 G) \\<noteq> {}\n  \\<lbrakk>card (edges (del_unEdge n1 w n2 G)) < card (edges G);\n   num_of_odd_nodes (del_unEdge n1 w n2 G) = 2;\n   finite (edges (del_unEdge n1 w n2 G));\n   finite (nodes (del_unEdge n1 w n2 G));\n   valid_unMultigraph (del_unEdge n1 w n2 G);\n   nodes (del_unEdge n1 w n2 G) \\<noteq> {};\n   valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes (del_unEdge n1 w n2 G).\n                       \\<exists>v'\\<in>nodes (del_unEdge n1 w n2 G).\n                          \\<exists>ps.\n                             odd (degree v (del_unEdge n1 w n2 G)) \\<and>\n                             odd (degree v' (del_unEdge n1 w n2 G)) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail\n                              (del_unEdge n1 w n2 G) v ps v'\n  \\<lbrakk>card (edges (del_unEdge n1 w n2 G)) < card (edges G);\n   num_of_odd_nodes (del_unEdge n1 w n2 G) = 0;\n   finite (edges (del_unEdge n1 w n2 G));\n   finite (nodes (del_unEdge n1 w n2 G));\n   valid_unMultigraph (del_unEdge n1 w n2 G);\n   nodes (del_unEdge n1 w n2 G) \\<noteq> {};\n   valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>v\\<in>nodes (del_unEdge n1 w n2 G).\n                       \\<exists>ps.\n                          valid_unMultigraph.is_Eulerian_circuit\n                           (del_unEdge n1 w n2 G) v ps v\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes (del_unEdge n1 w n2 G).\n       \\<exists>ps.\n          valid_unMultigraph.is_Eulerian_circuit (del_unEdge n1 w n2 G) v ps\n           v", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>nodes (del_unEdge n1 w n2 G).\n     \\<exists>ps.\n        valid_unMultigraph.is_Eulerian_circuit (del_unEdge n1 w n2 G) v ps v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' = n2;\n     valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>nodes (del_unEdge n1 w n2 G).\n     \\<exists>ps.\n        valid_unMultigraph.is_Eulerian_circuit (del_unEdge n1 w n2 G) v ps v\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>nodes G.\n       \\<exists>v'\\<in>nodes G.\n          \\<exists>ps.\n             odd (degree v G) \\<and>\n             odd (degree v' G) \\<and>\n             v \\<noteq> v' \\<and>\n             valid_unMultigraph.is_Eulerian_trail G v ps v'", "using eulerian_cons"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>nodes (del_unEdge n1 w n2 G).\n     \\<exists>ps.\n        valid_unMultigraph.is_Eulerian_circuit (del_unEdge n1 w n2 G) v ps v\n  \\<lbrakk>valid_unMultigraph.is_Eulerian_trail\n            (del_unEdge ?v0.0 ?w ?v1.0 G) ?v1.0 ?ps ?v2.0;\n   (?v0.0, ?w, ?v1.0) \\<in> E\\<rbrakk>\n  \\<Longrightarrow> is_Eulerian_trail ?v0.0 ((?v0.0, ?w, ?v1.0) # ?ps) ?v2.0\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>nodes G.\n       \\<exists>v'\\<in>nodes G.\n          \\<exists>ps.\n             odd (degree v G) \\<and>\n             odd (degree v' G) \\<and>\n             v \\<noteq> v' \\<and>\n             valid_unMultigraph.is_Eulerian_trail G v ps v'", "by (metis \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>n1 \\<noteq> n2\\<close> \\<open>v' = n2\\<close>  \\<open>valid_unMultigraph G\\<close>\n          \\<open>valid_unMultigraph (del_unEdge n1 w n2 G)\\<close> del_UnEdge_node n1(1) n1(2) n2(1) n2(2)\n          valid_unMultigraph.eulerian_cons valid_unMultigraph.is_Eulerian_circuit_def)"], ["proof (state)\nthis:\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "assume \"v'=n2\""], ["proof (state)\nthis:\n  v' = n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "assume not_conneted:\"\\<not>valid_unMultigraph.connected (del_unEdge n1 w n2 G)\""], ["proof (state)\nthis:\n  \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have valid0:\"valid_unMultigraph (del_unEdge n1 w n2 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge n1 w n2 G)", "using \\<open>valid_unMultigraph G\\<close> del_unEdge_valid"], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n  valid_unMultigraph ?g \\<Longrightarrow>\n  valid_unMultigraph (del_unEdge ?v ?e ?v' ?g)\n\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge n1 w n2 G)", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence valid0':\"valid_graph (del_unEdge n1 w n2 G)\""], ["proof (prove)\nusing this:\n  valid_unMultigraph (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. valid_graph (del_unEdge n1 w n2 G)", "using valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph (del_unEdge n1 w n2 G)\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph (del_unEdge n1 w n2 G)", "by auto"], ["proof (state)\nthis:\n  valid_graph (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have all_even:\"\\<forall>n\\<in>nodes (del_unEdge n1 w n2 G). even(degree n (del_unEdge n1 w n2 G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n       even (degree n (del_unEdge n1 w n2 G))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n       even (degree n (del_unEdge n1 w n2 G))", "have \"even (degree n1 (del_unEdge n1 w n2 G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (degree n1 (del_unEdge n1 w n2 G))", "using \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>finite (edges G)\\<close> \\<open>v' = n2\\<close> \\<open>valid_unMultigraph G\\<close> n1"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n  finite (edges G)\n  v' = n2\n  valid_unMultigraph G\n  n1 \\<in> nodes G\n  odd (degree n1 G)\n\ngoal (1 subgoal):\n 1. even (degree n1 (del_unEdge n1 w n2 G))", "by (auto simp add: valid_unMultigraph.corres)"], ["proof (state)\nthis:\n  even (degree n1 (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n       even (degree n (del_unEdge n1 w n2 G))", "moreover"], ["proof (state)\nthis:\n  even (degree n1 (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n       even (degree n (del_unEdge n1 w n2 G))", "have \"even (degree n2 (del_unEdge n1 w n2 G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (degree n2 (del_unEdge n1 w n2 G))", "using  \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>finite (edges G)\\<close> \\<open>v' = n2\\<close> \\<open>valid_unMultigraph G\\<close> n2"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n  finite (edges G)\n  v' = n2\n  valid_unMultigraph G\n  n2 \\<in> nodes G\n  odd (degree n2 G)\n\ngoal (1 subgoal):\n 1. even (degree n2 (del_unEdge n1 w n2 G))", "by (auto simp add: valid_unMultigraph.corres)"], ["proof (state)\nthis:\n  even (degree n2 (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n       even (degree n (del_unEdge n1 w n2 G))", "moreover"], ["proof (state)\nthis:\n  even (degree n2 (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n       even (degree n (del_unEdge n1 w n2 G))", "have  \"\\<And>n. n \\<in> nodes (del_unEdge n1 w n2 G) \\<Longrightarrow> n \\<noteq> n1 \\<Longrightarrow> n \\<noteq> n2 \\<Longrightarrow>\n              even (degree n (del_unEdge n1 w n2 G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes (del_unEdge n1 w n2 G); n \\<noteq> n1;\n        n \\<noteq> n2\\<rbrakk>\n       \\<Longrightarrow> even (degree n (del_unEdge n1 w n2 G))", "using valid_unMultigraph.degree_frame[OF \\<open>valid_unMultigraph G\\<close>,\n              of _ n1 n2 w] even_except_two"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (edges G); ?x \\<notin> {n1, n2}\\<rbrakk>\n  \\<Longrightarrow> degree ?x (del_unEdge n1 w n2 G) = degree ?x G\n  \\<lbrakk>?n \\<in> nodes G; ?n \\<noteq> n1; ?n \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n G)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes (del_unEdge n1 w n2 G); n \\<noteq> n1;\n        n \\<noteq> n2\\<rbrakk>\n       \\<Longrightarrow> even (degree n (del_unEdge n1 w n2 G))", "by (metis (no_types) \\<open>finite (edges G)\\<close> del_unEdge_def empty_iff insert_iff\n              select_convs(1))"], ["proof (state)\nthis:\n  \\<lbrakk>?n \\<in> nodes (del_unEdge n1 w n2 G); ?n \\<noteq> n1;\n   ?n \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n       even (degree n (del_unEdge n1 w n2 G))", "ultimately"], ["proof (chain)\npicking this:\n  even (degree n1 (del_unEdge n1 w n2 G))\n  even (degree n2 (del_unEdge n1 w n2 G))\n  \\<lbrakk>?n \\<in> nodes (del_unEdge n1 w n2 G); ?n \\<noteq> n1;\n   ?n \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n (del_unEdge n1 w n2 G))", "show ?thesis"], ["proof (prove)\nusing this:\n  even (degree n1 (del_unEdge n1 w n2 G))\n  even (degree n2 (del_unEdge n1 w n2 G))\n  \\<lbrakk>?n \\<in> nodes (del_unEdge n1 w n2 G); ?n \\<noteq> n1;\n   ?n \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n       even (degree n (del_unEdge n1 w n2 G))", "by auto"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n     even (degree n (del_unEdge n1 w n2 G))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n     even (degree n (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"(n1,w,n2)\\<in>edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n1, w, n2) \\<in> edges G", "by (metis \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>v' = n2\\<close>)"], ["proof (state)\nthis:\n  (n1, w, n2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"(n2,w,n1)\\<in>edges G\""], ["proof (prove)\nusing this:\n  (n1, w, n2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (n2, w, n1) \\<in> edges G", "by (metis \\<open>valid_unMultigraph G\\<close> valid_unMultigraph.corres)"], ["proof (state)\nthis:\n  (n2, w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "obtain G1 G2 where\n          G1_nodes: \"nodes G1={n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w n2 G) n ps n1}\"\n          and G1_edges: \"edges G1={(n,e,n'). (n,e,n')\\<in>edges (del_unEdge n1 w n2 G)\n            \\<and> n\\<in>nodes G1 \\<and> n'\\<in>nodes G1}\"\n          and G2_nodes:\"nodes G2={n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w n2 G) n ps n2}\"\n          and G2_edges:\"edges G2={(n,e,n'). (n,e,n')\\<in>edges (del_unEdge n1 w n2 G) \\<and> n\\<in>nodes G2\n            \\<and> n'\\<in>nodes G2}\"\n          and G1_G2_edges_union:\"edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G)\"\n          and \"edges G1 \\<inter> edges G2={}\"\n          and G1_G2_nodes_union:\"nodes G1 \\<union> nodes G2=nodes (del_unEdge n1 w n2 G)\"\n          and \"nodes G1 \\<inter> nodes G2={}\"\n          and \"valid_unMultigraph G1\"\n          and \"valid_unMultigraph G2\"\n          and \"valid_unMultigraph.connected G1\"\n          and \"valid_unMultigraph.connected G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>G1 G2.\n        \\<lbrakk>nodes G1 =\n                 {n. \\<exists>ps.\n                        valid_graph.is_path (del_unEdge n1 w n2 G) n ps n1};\n         edges G1 =\n         {(n, e, n').\n          (n, e, n') \\<in> edges (del_unEdge n1 w n2 G) \\<and>\n          n \\<in> nodes G1 \\<and> n' \\<in> nodes G1};\n         nodes G2 =\n         {n. \\<exists>ps.\n                valid_graph.is_path (del_unEdge n1 w n2 G) n ps n2};\n         edges G2 =\n         {(n, e, n').\n          (n, e, n') \\<in> edges (del_unEdge n1 w n2 G) \\<and>\n          n \\<in> nodes G2 \\<and> n' \\<in> nodes G2};\n         edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G);\n         edges G1 \\<inter> edges G2 = {};\n         nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w n2 G);\n         nodes G1 \\<inter> nodes G2 = {}; valid_unMultigraph G1;\n         valid_unMultigraph G2; valid_unMultigraph.connected G1;\n         valid_unMultigraph.connected G2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using valid_unMultigraph.connectivity_split[OF \\<open>valid_unMultigraph G\\<close>\n          \\<open>valid_unMultigraph.connected G\\<close> \\<open>\\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<close>\n          \\<open>(n1, w, n2) \\<in> edges G\\<close> ]"], ["proof (prove)\nusing this:\n  (\\<And>G1 G2.\n      \\<lbrakk>nodes G1 =\n               {n. \\<exists>ps.\n                      valid_graph.is_path (del_unEdge n1 w n2 G) n ps n1};\n       edges G1 =\n       {(n, e, n').\n        (n, e, n') \\<in> edges (del_unEdge n1 w n2 G) \\<and>\n        n \\<in> nodes G1 \\<and> n' \\<in> nodes G1};\n       nodes G2 =\n       {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w n2 G) n ps n2};\n       edges G2 =\n       {(n, e, n').\n        (n, e, n') \\<in> edges (del_unEdge n1 w n2 G) \\<and>\n        n \\<in> nodes G2 \\<and> n' \\<in> nodes G2};\n       edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G);\n       edges G1 \\<inter> edges G2 = {};\n       nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w n2 G);\n       nodes G1 \\<inter> nodes G2 = {}; valid_unMultigraph G1;\n       valid_unMultigraph G2; valid_unMultigraph.connected G1;\n       valid_unMultigraph.connected G2\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>G1 G2.\n        \\<lbrakk>nodes G1 =\n                 {n. \\<exists>ps.\n                        valid_graph.is_path (del_unEdge n1 w n2 G) n ps n1};\n         edges G1 =\n         {(n, e, n').\n          (n, e, n') \\<in> edges (del_unEdge n1 w n2 G) \\<and>\n          n \\<in> nodes G1 \\<and> n' \\<in> nodes G1};\n         nodes G2 =\n         {n. \\<exists>ps.\n                valid_graph.is_path (del_unEdge n1 w n2 G) n ps n2};\n         edges G2 =\n         {(n, e, n').\n          (n, e, n') \\<in> edges (del_unEdge n1 w n2 G) \\<and>\n          n \\<in> nodes G2 \\<and> n' \\<in> nodes G2};\n         edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G);\n         edges G1 \\<inter> edges G2 = {};\n         nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w n2 G);\n         nodes G1 \\<inter> nodes G2 = {}; valid_unMultigraph G1;\n         valid_unMultigraph G2; valid_unMultigraph.connected G1;\n         valid_unMultigraph.connected G2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  nodes G1 =\n  {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w n2 G) n ps n1}\n  edges G1 =\n  {(n, e, n').\n   (n, e, n') \\<in> edges (del_unEdge n1 w n2 G) \\<and>\n   n \\<in> nodes G1 \\<and> n' \\<in> nodes G1}\n  nodes G2 =\n  {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w n2 G) n ps n2}\n  edges G2 =\n  {(n, e, n').\n   (n, e, n') \\<in> edges (del_unEdge n1 w n2 G) \\<and>\n   n \\<in> nodes G2 \\<and> n' \\<in> nodes G2}\n  edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G)\n  edges G1 \\<inter> edges G2 = {}\n  nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w n2 G)\n  nodes G1 \\<inter> nodes G2 = {}\n  valid_unMultigraph G1\n  valid_unMultigraph G2\n  valid_unMultigraph.connected G1\n  valid_unMultigraph.connected G2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"edges (del_unEdge n1 w n2 G) \\<subset> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (del_unEdge n1 w n2 G) \\<subset> edges G", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges\n     \\<lparr>nodes = nodes G,\n        edges = edges G - {(n1, w, n2), (n2, w, n1)}\\<rparr>\n    \\<subset> edges G", "using \\<open>(n1, w, n2)\\<in>edges G\\<close> \\<open>(n2, w, n1)\\<in>edges G\\<close>"], ["proof (prove)\nusing this:\n  (n1, w, n2) \\<in> edges G\n  (n2, w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges\n     \\<lparr>nodes = nodes G,\n        edges = edges G - {(n1, w, n2), (n2, w, n1)}\\<rparr>\n    \\<subset> edges G", "by auto"], ["proof (state)\nthis:\n  edges (del_unEdge n1 w n2 G) \\<subset> edges G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"card (edges G1) < card (edges G)\""], ["proof (prove)\nusing this:\n  edges (del_unEdge n1 w n2 G) \\<subset> edges G\n\ngoal (1 subgoal):\n 1. card (edges G1) < card (edges G)", "using G1_G2_edges_union"], ["proof (prove)\nusing this:\n  edges (del_unEdge n1 w n2 G) \\<subset> edges G\n  edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. card (edges G1) < card (edges G)", "by (metis (full_types) \\<open>finite (edges G)\\<close> inf_sup_absorb less_infI2 psubset_card_mono)"], ["proof (state)\nthis:\n  card (edges G1) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  card (edges G1) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (edges G1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges G1)", "using G1_G2_edges_union \\<open>finite (edges G)\\<close>"], ["proof (prove)\nusing this:\n  edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G)\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. finite (edges G1)", "by (metis \\<open>edges (del_unEdge n1 w n2 G) \\<subset> edges G\\<close> finite_Un less_imp_le rev_finite_subset)"], ["proof (state)\nthis:\n  finite (edges G1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (edges G1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"nodes G1 \\<subseteq> nodes (del_unEdge n1 w n2 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes G1 \\<subseteq> nodes (del_unEdge n1 w n2 G)", "by (metis G1_G2_nodes_union Un_upper1)"], ["proof (state)\nthis:\n  nodes G1 \\<subseteq> nodes (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"finite (nodes G1)\""], ["proof (prove)\nusing this:\n  nodes G1 \\<subseteq> nodes (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. finite (nodes G1)", "using  \\<open>finite (nodes G)\\<close> del_UnEdge_node rev_finite_subset"], ["proof (prove)\nusing this:\n  nodes G1 \\<subseteq> nodes (del_unEdge n1 w n2 G)\n  finite (nodes G)\n  (?v \\<in> nodes (del_unEdge ?u ?e ?u' ?G)) = (?v \\<in> nodes ?G)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (nodes G1)", "by auto"], ["proof (state)\nthis:\n  finite (nodes G1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (nodes G1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"n1 \\<in> nodes G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "have \"n1\\<in>nodes (del_unEdge n1 w n2 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<in> nodes (del_unEdge n1 w n2 G)", "using \\<open>n1\\<in>nodes G\\<close>"], ["proof (prove)\nusing this:\n  n1 \\<in> nodes G\n\ngoal (1 subgoal):\n 1. n1 \\<in> nodes (del_unEdge n1 w n2 G)", "by auto"], ["proof (state)\nthis:\n  n1 \\<in> nodes (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "hence \"valid_graph.is_path (del_unEdge n1 w n2 G) n1 [] n1\""], ["proof (prove)\nusing this:\n  n1 \\<in> nodes (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. valid_graph.is_path (del_unEdge n1 w n2 G) n1 [] n1", "using valid0'"], ["proof (prove)\nusing this:\n  n1 \\<in> nodes (del_unEdge n1 w n2 G)\n  valid_graph (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. valid_graph.is_path (del_unEdge n1 w n2 G) n1 [] n1", "by (metis valid_graph.is_path_simps(1))"], ["proof (state)\nthis:\n  valid_graph.is_path (del_unEdge n1 w n2 G) n1 [] n1\n\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_graph.is_path (del_unEdge n1 w n2 G) n1 [] n1\n\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "using G1_nodes"], ["proof (prove)\nusing this:\n  valid_graph.is_path (del_unEdge n1 w n2 G) n1 [] n1\n  nodes G1 =\n  {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w n2 G) n ps n1}\n\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "by auto"], ["proof (state)\nthis:\n  n1 \\<in> nodes G1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n1 \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"nodes G1 \\<noteq> {}\""], ["proof (prove)\nusing this:\n  n1 \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. nodes G1 \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  nodes G1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  nodes G1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"num_of_odd_nodes G1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "have \"valid_graph G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph G2", "using \\<open>valid_unMultigraph G2\\<close> valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G2\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G2", "by auto"], ["proof (state)\nthis:\n  valid_graph G2\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "hence \"\\<forall>n\\<in>nodes G1. degree n G1 = degree n (del_unEdge n1 w n2 G)\""], ["proof (prove)\nusing this:\n  valid_graph G2\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G1. degree n G1 = degree n (del_unEdge n1 w n2 G)", "using sub_graph_degree_frame[of G2 G1 \"(del_unEdge n1 w n2 G)\"]"], ["proof (prove)\nusing this:\n  valid_graph G2\n  \\<lbrakk>valid_graph G2;\n   edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G);\n   nodes G1 \\<inter> nodes G2 = {}; ?n \\<in> nodes G1\\<rbrakk>\n  \\<Longrightarrow> degree ?n (del_unEdge n1 w n2 G) = degree ?n G1\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G1. degree n G1 = degree n (del_unEdge n1 w n2 G)", "by (metis G1_G2_edges_union \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G1. degree n G1 = degree n (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "hence \"\\<forall>n\\<in>nodes G1. even(degree n G1)\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G1. degree n G1 = degree n (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G1. even (degree n G1)", "using all_even"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G1. degree n G1 = degree n (del_unEdge n1 w n2 G)\n  \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n     even (degree n (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G1. even (degree n G1)", "by (metis G1_G2_nodes_union Un_iff)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G1. even (degree n G1)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G1. even (degree n G1)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "unfolding num_of_odd_nodes_def odd_nodes_set_def"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G1. even (degree n G1)\n\ngoal (1 subgoal):\n 1. card {v \\<in> nodes G1. odd (degree v G1)} = 0", "by (metis (lifting) Collect_empty_eq card_eq_0_iff)"], ["proof (state)\nthis:\n  num_of_odd_nodes G1 = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  num_of_odd_nodes G1 = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  card (edges G1) < card (edges G)\n  finite (edges G1)\n  finite (nodes G1)\n  nodes G1 \\<noteq> {}\n  num_of_odd_nodes G1 = 0", "have \"\\<forall>v\\<in>nodes G1. \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G1 v ps v\""], ["proof (prove)\nusing this:\n  card (edges G1) < card (edges G)\n  finite (edges G1)\n  finite (nodes G1)\n  nodes G1 \\<noteq> {}\n  num_of_odd_nodes G1 = 0\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes G1.\n       \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G1 v ps v", "using less.hyps[of G1] \\<open>valid_unMultigraph G1\\<close> \\<open>valid_unMultigraph.connected G1\\<close>"], ["proof (prove)\nusing this:\n  card (edges G1) < card (edges G)\n  finite (edges G1)\n  finite (nodes G1)\n  nodes G1 \\<noteq> {}\n  num_of_odd_nodes G1 = 0\n  \\<lbrakk>card (edges G1) < card (edges G); num_of_odd_nodes G1 = 2;\n   finite (edges G1); finite (nodes G1); valid_unMultigraph G1;\n   nodes G1 \\<noteq> {}; valid_unMultigraph.connected G1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G1.\n                       \\<exists>v'\\<in>nodes G1.\n                          \\<exists>ps.\n                             odd (degree v G1) \\<and>\n                             odd (degree v' G1) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G1 v ps v'\n  \\<lbrakk>card (edges G1) < card (edges G); num_of_odd_nodes G1 = 0;\n   finite (edges G1); finite (nodes G1); valid_unMultigraph G1;\n   nodes G1 \\<noteq> {}; valid_unMultigraph.connected G1\\<rbrakk>\n  \\<Longrightarrow> \\<forall>v\\<in>nodes G1.\n                       \\<exists>ps.\n                          valid_unMultigraph.is_Eulerian_circuit G1 v ps v\n  valid_unMultigraph G1\n  valid_unMultigraph.connected G1\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes G1.\n       \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G1 v ps v", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>nodes G1.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G1 v ps v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "then"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>nodes G1.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G1 v ps v", "obtain ps1 where ps1:\"valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>nodes G1.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G1 v ps v\n\ngoal (1 subgoal):\n 1. (\\<And>ps1.\n        valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>n1\\<in>nodes G1\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>nodes G1.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G1 v ps v\n  n1 \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. (\\<And>ps1.\n        valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) \\<open>valid_unMultigraph G1\\<close> valid_unMultigraph.is_Eulerian_circuit_def)"], ["proof (state)\nthis:\n  valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"card (edges G2) < card (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (edges G2) < card (edges G)", "using G1_G2_edges_union \\<open>edges (del_unEdge n1 w n2 G) \\<subset> edges G\\<close>"], ["proof (prove)\nusing this:\n  edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G)\n  edges (del_unEdge n1 w n2 G) \\<subset> edges G\n\ngoal (1 subgoal):\n 1. card (edges G2) < card (edges G)", "by (metis (full_types) \\<open>finite (edges G)\\<close> inf_sup_ord(4) le_less_trans psubset_card_mono)"], ["proof (state)\nthis:\n  card (edges G2) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  card (edges G2) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (edges G2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges G2)", "using G1_G2_edges_union \\<open>finite (edges G)\\<close>"], ["proof (prove)\nusing this:\n  edges G1 \\<union> edges G2 = edges (del_unEdge n1 w n2 G)\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. finite (edges G2)", "by (metis \\<open>edges (del_unEdge n1 w n2 G) \\<subset> edges G\\<close> finite_Un less_imp_le rev_finite_subset)"], ["proof (state)\nthis:\n  finite (edges G2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (edges G2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"nodes G2 \\<subseteq> nodes (del_unEdge n1 w n2 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes G2 \\<subseteq> nodes (del_unEdge n1 w n2 G)", "by (metis G1_G2_nodes_union Un_upper2)"], ["proof (state)\nthis:\n  nodes G2 \\<subseteq> nodes (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"finite (nodes G2)\""], ["proof (prove)\nusing this:\n  nodes G2 \\<subseteq> nodes (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. finite (nodes G2)", "using  \\<open>finite (nodes G)\\<close>  del_UnEdge_node rev_finite_subset"], ["proof (prove)\nusing this:\n  nodes G2 \\<subseteq> nodes (del_unEdge n1 w n2 G)\n  finite (nodes G)\n  (?v \\<in> nodes (del_unEdge ?u ?e ?u' ?G)) = (?v \\<in> nodes ?G)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (nodes G2)", "by auto"], ["proof (state)\nthis:\n  finite (nodes G2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (nodes G2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"n2 \\<in> nodes G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "have \"n2\\<in>nodes (del_unEdge n1 w n2 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n2 \\<in> nodes (del_unEdge n1 w n2 G)", "using \\<open>n2\\<in>nodes G\\<close>"], ["proof (prove)\nusing this:\n  n2 \\<in> nodes G\n\ngoal (1 subgoal):\n 1. n2 \\<in> nodes (del_unEdge n1 w n2 G)", "by auto"], ["proof (state)\nthis:\n  n2 \\<in> nodes (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "hence \"valid_graph.is_path (del_unEdge n1 w n2 G) n2 [] n2\""], ["proof (prove)\nusing this:\n  n2 \\<in> nodes (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. valid_graph.is_path (del_unEdge n1 w n2 G) n2 [] n2", "using valid0'"], ["proof (prove)\nusing this:\n  n2 \\<in> nodes (del_unEdge n1 w n2 G)\n  valid_graph (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. valid_graph.is_path (del_unEdge n1 w n2 G) n2 [] n2", "by (metis valid_graph.is_path_simps(1))"], ["proof (state)\nthis:\n  valid_graph.is_path (del_unEdge n1 w n2 G) n2 [] n2\n\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_graph.is_path (del_unEdge n1 w n2 G) n2 [] n2\n\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "using G2_nodes"], ["proof (prove)\nusing this:\n  valid_graph.is_path (del_unEdge n1 w n2 G) n2 [] n2\n  nodes G2 =\n  {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w n2 G) n ps n2}\n\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "by auto"], ["proof (state)\nthis:\n  n2 \\<in> nodes G2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n2 \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"nodes G2 \\<noteq> {}\""], ["proof (prove)\nusing this:\n  n2 \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. nodes G2 \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  nodes G2 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  nodes G2 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"num_of_odd_nodes G2 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 0", "have \"valid_graph G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph G1", "using \\<open>valid_unMultigraph G1\\<close> valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G1\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G1", "by auto"], ["proof (state)\nthis:\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 0", "hence \"\\<forall>n\\<in>nodes G2. degree n G2 = degree n (del_unEdge n1 w n2 G)\""], ["proof (prove)\nusing this:\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2. degree n G2 = degree n (del_unEdge n1 w n2 G)", "using sub_graph_degree_frame[of G1 G2 \"(del_unEdge n1 w n2 G)\"]"], ["proof (prove)\nusing this:\n  valid_graph G1\n  \\<lbrakk>valid_graph G1;\n   edges G2 \\<union> edges G1 = edges (del_unEdge n1 w n2 G);\n   nodes G2 \\<inter> nodes G1 = {}; ?n \\<in> nodes G2\\<rbrakk>\n  \\<Longrightarrow> degree ?n (del_unEdge n1 w n2 G) = degree ?n G2\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2. degree n G2 = degree n (del_unEdge n1 w n2 G)", "by (metis G1_G2_edges_union \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close> inf_commute sup_commute)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G2. degree n G2 = degree n (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 0", "hence \"\\<forall>n\\<in>nodes G2. even(degree n G2)\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2. degree n G2 = degree n (del_unEdge n1 w n2 G)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2. even (degree n G2)", "using all_even"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2. degree n G2 = degree n (del_unEdge n1 w n2 G)\n  \\<forall>n\\<in>nodes (del_unEdge n1 w n2 G).\n     even (degree n (del_unEdge n1 w n2 G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2. even (degree n G2)", "by (metis G1_G2_nodes_union Un_iff)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G2. even (degree n G2)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2. even (degree n G2)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 0", "unfolding num_of_odd_nodes_def odd_nodes_set_def"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2. even (degree n G2)\n\ngoal (1 subgoal):\n 1. card {v \\<in> nodes G2. odd (degree v G2)} = 0", "by (metis (lifting) Collect_empty_eq card_eq_0_iff)"], ["proof (state)\nthis:\n  num_of_odd_nodes G2 = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  num_of_odd_nodes G2 = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  card (edges G2) < card (edges G)\n  finite (edges G2)\n  finite (nodes G2)\n  nodes G2 \\<noteq> {}\n  num_of_odd_nodes G2 = 0", "have \"\\<forall>v\\<in>nodes G2. \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G2 v ps v\""], ["proof (prove)\nusing this:\n  card (edges G2) < card (edges G)\n  finite (edges G2)\n  finite (nodes G2)\n  nodes G2 \\<noteq> {}\n  num_of_odd_nodes G2 = 0\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes G2.\n       \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G2 v ps v", "using less.hyps[of G2] \\<open>valid_unMultigraph G2\\<close> \\<open>valid_unMultigraph.connected G2\\<close>"], ["proof (prove)\nusing this:\n  card (edges G2) < card (edges G)\n  finite (edges G2)\n  finite (nodes G2)\n  nodes G2 \\<noteq> {}\n  num_of_odd_nodes G2 = 0\n  \\<lbrakk>card (edges G2) < card (edges G); num_of_odd_nodes G2 = 2;\n   finite (edges G2); finite (nodes G2); valid_unMultigraph G2;\n   nodes G2 \\<noteq> {}; valid_unMultigraph.connected G2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G2.\n                       \\<exists>v'\\<in>nodes G2.\n                          \\<exists>ps.\n                             odd (degree v G2) \\<and>\n                             odd (degree v' G2) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G2 v ps v'\n  \\<lbrakk>card (edges G2) < card (edges G); num_of_odd_nodes G2 = 0;\n   finite (edges G2); finite (nodes G2); valid_unMultigraph G2;\n   nodes G2 \\<noteq> {}; valid_unMultigraph.connected G2\\<rbrakk>\n  \\<Longrightarrow> \\<forall>v\\<in>nodes G2.\n                       \\<exists>ps.\n                          valid_unMultigraph.is_Eulerian_circuit G2 v ps v\n  valid_unMultigraph G2\n  valid_unMultigraph.connected G2\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes G2.\n       \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G2 v ps v", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>nodes G2.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G2 v ps v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "then"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>nodes G2.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G2 v ps v", "obtain ps2 where ps2:\"valid_unMultigraph.is_Eulerian_trail G2 n2 ps2 n2\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>nodes G2.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G2 v ps v\n\ngoal (1 subgoal):\n 1. (\\<And>ps2.\n        valid_unMultigraph.is_Eulerian_trail G2 n2 ps2 n2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>n2\\<in>nodes G2\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>nodes G2.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G2 v ps v\n  n2 \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. (\\<And>ps2.\n        valid_unMultigraph.is_Eulerian_trail G2 n2 ps2 n2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) \\<open>valid_unMultigraph G2\\<close> valid_unMultigraph.is_Eulerian_circuit_def)"], ["proof (state)\nthis:\n  valid_unMultigraph.is_Eulerian_trail G2 n2 ps2 n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"\\<lparr>nodes = nodes G1 \\<union> nodes G2, edges = edges G1 \\<union> edges G2 \\<union> {(n1, w, n2),\n          (n2, w, n1)}\\<rparr>=G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "have \"edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2),(n2, w, n1)} =edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2), (n2, w, n1)} =\n    edges G", "using \\<open>(n1,w,n2)\\<in>edges G\\<close> \\<open>(n2,w,n1)\\<in>edges G\\<close>"], ["proof (prove)\nusing this:\n  (n1, w, n2) \\<in> edges G\n  (n2, w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2), (n2, w, n1)} =\n    edges G", "unfolding del_unEdge_def"], ["proof (prove)\nusing this:\n  (n1, w, n2) \\<in> edges G\n  (n2, w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges\n     \\<lparr>nodes = nodes G,\n        edges = edges G - {(n1, w, n2), (n2, w, n1)}\\<rparr> \\<union>\n    {(n1, w, n2), (n2, w, n1)} =\n    edges G", "by auto"], ["proof (state)\nthis:\n  edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2), (n2, w, n1)} = edges G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "moreover"], ["proof (state)\nthis:\n  edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2), (n2, w, n1)} = edges G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "have   \"nodes (del_unEdge n1 w n2 G)=nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (del_unEdge n1 w n2 G) = nodes G", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes\n     \\<lparr>nodes = nodes G,\n        edges = edges G - {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    nodes G", "by auto"], ["proof (state)\nthis:\n  nodes (del_unEdge n1 w n2 G) = nodes G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "ultimately"], ["proof (chain)\npicking this:\n  edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2), (n2, w, n1)} = edges G\n  nodes (del_unEdge n1 w n2 G) = nodes G", "have \"\\<lparr>nodes = nodes (del_unEdge n1 w n2 G), edges =\n              edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2), (n2, w, n1)}\\<rparr>=G\""], ["proof (prove)\nusing this:\n  edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2), (n2, w, n1)} = edges G\n  nodes (del_unEdge n1 w n2 G) = nodes G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n       edges =\n         edges (del_unEdge n1 w n2 G) \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "by auto"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n     edges =\n       edges (del_unEdge n1 w n2 G) \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "moreover"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n     edges =\n       edges (del_unEdge n1 w n2 G) \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "have \"\\<lparr>nodes = nodes G1 \\<union> nodes G2, edges = edges G1 \\<union> edges G2 \\<union>\n              {(n1, w, n2),(n2, w, n1)}\\<rparr>=\\<lparr>nodes = nodes (del_unEdge n1 w n2 G),edges\n              = edges (del_unEdge n1 w n2 G) \\<union> {(n1, w, n2), (n2, w, n1)}\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n       edges =\n         edges (del_unEdge n1 w n2 G) \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr>", "by (metis G1_G2_edges_union G1_G2_nodes_union)"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n     edges =\n       edges (del_unEdge n1 w n2 G) \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "ultimately"], ["proof (chain)\npicking this:\n  \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n     edges =\n       edges (del_unEdge n1 w n2 G) \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n     edges =\n       edges (del_unEdge n1 w n2 G) \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n     edges =\n       edges (del_unEdge n1 w n2 G) \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  \\<lparr>nodes = nodes (del_unEdge n1 w n2 G),\n     edges =\n       edges (del_unEdge n1 w n2 G) \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n    G", "by auto"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"valid_unMultigraph.is_Eulerian_trail \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n          edges = edges G1 \\<union> edges G2 \\<union> {(n1, w, n2), (n2, w, n1)}\\<rparr> n1 (ps1 @ (n1, w, n2) # ps2) n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(n1, w, n2), (n2, w, n1)}\\<rparr>\n     n1 (ps1 @ (n1, w, n2) # ps2) n2", "using eulerian_split[of G1 G2 n1 ps1 n1 n2 ps2 n2 w]"], ["proof (prove)\nusing this:\n  \\<lbrakk>nodes G1 \\<inter> nodes G2 = {}; edges G1 \\<inter> edges G2 = {};\n   valid_unMultigraph G1; valid_unMultigraph G2;\n   valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1;\n   valid_unMultigraph.is_Eulerian_trail G2 n2 ps2 n2\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_Eulerian_trail\n                     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n                        edges =\n                          edges G1 \\<union> edges G2 \\<union>\n                          {(n1, w, n2), (n2, w, n1)}\\<rparr>\n                     n1 (ps1 @ (n1, w, n2) # ps2) n2\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_trail\n     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n        edges =\n          edges G1 \\<union> edges G2 \\<union>\n          {(n1, w, n2), (n2, w, n1)}\\<rparr>\n     n1 (ps1 @ (n1, w, n2) # ps2) n2", "by (metis \\<open>edges G1 \\<inter> edges G2 = {}\\<close> \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close> \\<open>valid_unMultigraph G1\\<close>\n          \\<open>valid_unMultigraph G2\\<close> ps1 ps2)"], ["proof (state)\nthis:\n  valid_unMultigraph.is_Eulerian_trail\n   \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n      edges =\n        edges G1 \\<union> edges G2 \\<union>\n        {(n1, w, n2), (n2, w, n1)}\\<rparr>\n   n1 (ps1 @ (n1, w, n2) # ps2) n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' = n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w n2 G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n  valid_unMultigraph.is_Eulerian_trail\n   \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n      edges =\n        edges G1 \\<union> edges G2 \\<union>\n        {(n1, w, n2), (n2, w, n1)}\\<rparr>\n   n1 (ps1 @ (n1, w, n2) # ps2) n2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, n2), (n2, w, n1)}\\<rparr> =\n  G\n  valid_unMultigraph.is_Eulerian_trail\n   \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n      edges =\n        edges G1 \\<union> edges G2 \\<union>\n        {(n1, w, n2), (n2, w, n1)}\\<rparr>\n   n1 (ps1 @ (n1, w, n2) # ps2) n2\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>nodes G.\n       \\<exists>v'\\<in>nodes G.\n          \\<exists>ps.\n             odd (degree v G) \\<and>\n             odd (degree v' G) \\<and>\n             v \\<noteq> v' \\<and>\n             valid_unMultigraph.is_Eulerian_trail G v ps v'", "by (metis \\<open>n1 \\<noteq> n2\\<close> n1(1) n1(2) n2(1) n2(2))"], ["proof (state)\nthis:\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v' = n2 \\<Longrightarrow>\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "moreover"], ["proof (state)\nthis:\n  v' = n2 \\<Longrightarrow>\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "have \"v'\\<noteq>n2 \\<Longrightarrow> (\\<exists>v\\<in>nodes G. \\<exists>v'\\<in>nodes G.\\<exists>ps. odd (degree v G) \\<and> odd (degree v' G)\n      \\<and> v \\<noteq> v' \\<and> valid_unMultigraph.is_Eulerian_trail G v ps v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<noteq> n2 \\<Longrightarrow>\n    \\<exists>v\\<in>nodes G.\n       \\<exists>v'\\<in>nodes G.\n          \\<exists>ps.\n             odd (degree v G) \\<and>\n             odd (degree v' G) \\<and>\n             v \\<noteq> v' \\<and>\n             valid_unMultigraph.is_Eulerian_trail G v ps v'", "proof (cases \"valid_unMultigraph.connected (del_unEdge n1 w v' G)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "case True"], ["proof (state)\nthis:\n  valid_unMultigraph.connected (del_unEdge n1 w v' G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "assume \"v' \\<noteq> n2\""], ["proof (state)\nthis:\n  v' \\<noteq> n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "assume connected':\"valid_unMultigraph.connected (del_unEdge n1 w v' G)\""], ["proof (state)\nthis:\n  valid_unMultigraph.connected (del_unEdge n1 w v' G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"n1 \\<in> nodes (del_unEdge n1 w v' G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<in> nodes (del_unEdge n1 w v' G)", "by (metis del_UnEdge_node n1(1))"], ["proof (state)\nthis:\n  n1 \\<in> nodes (del_unEdge n1 w v' G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence even_n1:\"even(degree n1 (del_unEdge n1 w v' G))\""], ["proof (prove)\nusing this:\n  n1 \\<in> nodes (del_unEdge n1 w v' G)\n\ngoal (1 subgoal):\n 1. even (degree n1 (del_unEdge n1 w v' G))", "using valid_unMultigraph.del_UnEdge_even[OF \\<open>valid_unMultigraph G\\<close> \\<open>(n1, w, v') \\<in> edges G\\<close>\n          \\<open>finite (edges G)\\<close>] \\<open>odd (degree n1 G)\\<close>"], ["proof (prove)\nusing this:\n  n1 \\<in> nodes (del_unEdge n1 w v' G)\n  (n1 \\<in> odd_nodes_set (del_unEdge n1 w v' G)) = even (degree n1 G)\n  odd (degree n1 G)\n\ngoal (1 subgoal):\n 1. even (degree n1 (del_unEdge n1 w v' G))", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  n1 \\<in> nodes (del_unEdge n1 w v' G)\n  (n1 \\<in> {v \\<in> nodes (del_unEdge n1 w v' G).\n             odd (degree v (del_unEdge n1 w v' G))}) =\n  even (degree n1 G)\n  odd (degree n1 G)\n\ngoal (1 subgoal):\n 1. even (degree n1 (del_unEdge n1 w v' G))", "by auto"], ["proof (state)\nthis:\n  even (degree n1 (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  even (degree n1 (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have odd_n2:\"odd(degree n2 (del_unEdge n1 w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree n2 (del_unEdge n1 w v' G))", "using valid_unMultigraph.degree_frame[OF \\<open>valid_unMultigraph G\\<close> \\<open>finite (edges G)\\<close>,\n          of n2 n1 v' w] \\<open>n1 \\<noteq> n2\\<close> \\<open>v' \\<noteq> n2\\<close>"], ["proof (prove)\nusing this:\n  n2 \\<notin> {n1, v'} \\<Longrightarrow>\n  degree n2 (del_unEdge n1 w v' G) = degree n2 G\n  n1 \\<noteq> n2\n  v' \\<noteq> n2\n\ngoal (1 subgoal):\n 1. odd (degree n2 (del_unEdge n1 w v' G))", "by (metis empty_iff insert_iff n2(2))"], ["proof (state)\nthis:\n  odd (degree n2 (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  odd (degree n2 (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"even (degree v' G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (degree v' G)", "using even_except_two[of v']"], ["proof (prove)\nusing this:\n  \\<lbrakk>v' \\<in> nodes G; v' \\<noteq> n1; v' \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree v' G)\n\ngoal (1 subgoal):\n 1. even (degree v' G)", "by (metis (full_types) \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>v' \\<noteq> n2\\<close> \\<open>valid_graph G\\<close>\n          \\<open>valid_unMultigraph G\\<close> valid_graph.E_validD(2) valid_unMultigraph.no_id)"], ["proof (state)\nthis:\n  even (degree v' G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence odd_v':\"odd(degree v' (del_unEdge n1 w v' G))\""], ["proof (prove)\nusing this:\n  even (degree v' G)\n\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge n1 w v' G))", "using valid_unMultigraph.del_UnEdge_even'[OF \\<open>valid_unMultigraph G\\<close> \\<open>(n1, w, v') \\<in> edges G\\<close>\n          \\<open>finite (edges G)\\<close>]"], ["proof (prove)\nusing this:\n  even (degree v' G)\n  (v' \\<in> odd_nodes_set (del_unEdge n1 w v' G)) = even (degree v' G)\n\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge n1 w v' G))", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  even (degree v' G)\n  (v' \\<in> {v \\<in> nodes (del_unEdge n1 w v' G).\n             odd (degree v (del_unEdge n1 w v' G))}) =\n  even (degree v' G)\n\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge n1 w v' G))", "by auto"], ["proof (state)\nthis:\n  odd (degree v' (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  even (degree n1 (del_unEdge n1 w v' G))\n  odd (degree n2 (del_unEdge n1 w v' G))\n  odd (degree v' (del_unEdge n1 w v' G))", "have two_odds:\"num_of_odd_nodes (del_unEdge n1 w v' G) = 2\""], ["proof (prove)\nusing this:\n  even (degree n1 (del_unEdge n1 w v' G))\n  odd (degree n2 (del_unEdge n1 w v' G))\n  odd (degree v' (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (del_unEdge n1 w v' G) = 2", "by (metis (lifting) \\<open>v' \\<noteq> n2\\<close> \\<open>valid_graph G\\<close> \\<open>valid_unMultigraph G\\<close>\n          \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>finite (edges G)\\<close> \\<open>finite (nodes G)\\<close> \\<open>num_of_odd_nodes G = 2\\<close>\n          del_UnEdge_odd_even even_except_two n1(2) valid_graph.E_validD(2))"], ["proof (state)\nthis:\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have valid0:\"valid_unMultigraph (del_unEdge n1 w v' G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge n1 w v' G)", "using del_unEdge_valid \\<open>valid_unMultigraph G\\<close>"], ["proof (prove)\nusing this:\n  valid_unMultigraph ?g \\<Longrightarrow>\n  valid_unMultigraph (del_unEdge ?v ?e ?v' ?g)\n  valid_unMultigraph G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge n1 w v' G)", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge n1 w v' G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge n1 w v' G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \" edges G - {(n1, w, v'), (v', w, n1)} \\<subset> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G - {(n1, w, v'), (v', w, n1)} \\<subset> edges G", "using \\<open>(n1,w,v')\\<in>edges G\\<close>"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges G - {(n1, w, v'), (v', w, n1)} \\<subset> edges G", "by auto"], ["proof (state)\nthis:\n  edges G - {(n1, w, v'), (v', w, n1)} \\<subset> edges G\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"card (edges (del_unEdge n1 w v' G)) < card (edges G)\""], ["proof (prove)\nusing this:\n  edges G - {(n1, w, v'), (v', w, n1)} \\<subset> edges G\n\ngoal (1 subgoal):\n 1. card (edges (del_unEdge n1 w v' G)) < card (edges G)", "using \\<open>finite (edges G)\\<close>"], ["proof (prove)\nusing this:\n  edges G - {(n1, w, v'), (v', w, n1)} \\<subset> edges G\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. card (edges (del_unEdge n1 w v' G)) < card (edges G)", "unfolding del_unEdge_def"], ["proof (prove)\nusing this:\n  edges G - {(n1, w, v'), (v', w, n1)} \\<subset> edges G\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. card\n     (edges\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr>)\n    < card (edges G)", "by (metis (hide_lams, no_types) psubset_card_mono select_convs(2))"], ["proof (state)\nthis:\n  card (edges (del_unEdge n1 w v' G)) < card (edges G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  card (edges (del_unEdge n1 w v' G)) < card (edges G)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (edges (del_unEdge n1 w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges (del_unEdge n1 w v' G))", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (edges\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr>)", "by (metis (full_types) \\<open>finite (edges G)\\<close> finite_Diff select_convs(2))"], ["proof (state)\nthis:\n  finite (edges (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (edges (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (nodes (del_unEdge n1 w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes (del_unEdge n1 w v' G))", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (nodes\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr>)", "by (metis \\<open>finite (nodes G)\\<close> select_convs(1))"], ["proof (state)\nthis:\n  finite (nodes (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (nodes (del_unEdge n1 w v' G))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"nodes (del_unEdge n1 w v' G) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (del_unEdge n1 w v' G) \\<noteq> {}", "by (metis (full_types) del_UnEdge_node empty_iff n1(1))"], ["proof (state)\nthis:\n  nodes (del_unEdge n1 w v' G) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n  valid_unMultigraph (del_unEdge n1 w v' G)\n  card (edges (del_unEdge n1 w v' G)) < card (edges G)\n  finite (edges (del_unEdge n1 w v' G))\n  finite (nodes (del_unEdge n1 w v' G))\n  nodes (del_unEdge n1 w v' G) \\<noteq> {}", "obtain s t ps where\n          s: \"s\\<in>nodes (del_unEdge n1 w v' G)\" \"odd (degree s (del_unEdge n1 w v' G))\"\n          and t:\"t\\<in>nodes (del_unEdge n1 w v' G)\" \"odd (degree t (del_unEdge n1 w v' G))\"\n          and \"s \\<noteq> t\"\n          and s_ps_t: \"valid_unMultigraph.is_Eulerian_trail (del_unEdge n1 w v' G) s ps t\""], ["proof (prove)\nusing this:\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n  valid_unMultigraph (del_unEdge n1 w v' G)\n  card (edges (del_unEdge n1 w v' G)) < card (edges G)\n  finite (edges (del_unEdge n1 w v' G))\n  finite (nodes (del_unEdge n1 w v' G))\n  nodes (del_unEdge n1 w v' G) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>s t ps.\n        \\<lbrakk>s \\<in> nodes (del_unEdge n1 w v' G);\n         odd (degree s (del_unEdge n1 w v' G));\n         t \\<in> nodes (del_unEdge n1 w v' G);\n         odd (degree t (del_unEdge n1 w v' G)); s \\<noteq> t;\n         valid_unMultigraph.is_Eulerian_trail (del_unEdge n1 w v' G) s ps\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using   connected' less.hyps[of \"(del_unEdge n1 w v' G)\"]"], ["proof (prove)\nusing this:\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n  valid_unMultigraph (del_unEdge n1 w v' G)\n  card (edges (del_unEdge n1 w v' G)) < card (edges G)\n  finite (edges (del_unEdge n1 w v' G))\n  finite (nodes (del_unEdge n1 w v' G))\n  nodes (del_unEdge n1 w v' G) \\<noteq> {}\n  valid_unMultigraph.connected (del_unEdge n1 w v' G)\n  \\<lbrakk>card (edges (del_unEdge n1 w v' G)) < card (edges G);\n   num_of_odd_nodes (del_unEdge n1 w v' G) = 2;\n   finite (edges (del_unEdge n1 w v' G));\n   finite (nodes (del_unEdge n1 w v' G));\n   valid_unMultigraph (del_unEdge n1 w v' G);\n   nodes (del_unEdge n1 w v' G) \\<noteq> {};\n   valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes (del_unEdge n1 w v' G).\n                       \\<exists>v'a\\<in>nodes (del_unEdge n1 w v' G).\n                          \\<exists>ps.\n                             odd (degree v (del_unEdge n1 w v' G)) \\<and>\n                             odd (degree v'a (del_unEdge n1 w v' G)) \\<and>\n                             v \\<noteq> v'a \\<and>\n                             valid_unMultigraph.is_Eulerian_trail\n                              (del_unEdge n1 w v' G) v ps v'a\n  \\<lbrakk>card (edges (del_unEdge n1 w v' G)) < card (edges G);\n   num_of_odd_nodes (del_unEdge n1 w v' G) = 0;\n   finite (edges (del_unEdge n1 w v' G));\n   finite (nodes (del_unEdge n1 w v' G));\n   valid_unMultigraph (del_unEdge n1 w v' G);\n   nodes (del_unEdge n1 w v' G) \\<noteq> {};\n   valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>v\\<in>nodes (del_unEdge n1 w v' G).\n                       \\<exists>ps.\n                          valid_unMultigraph.is_Eulerian_circuit\n                           (del_unEdge n1 w v' G) v ps v\n\ngoal (1 subgoal):\n 1. (\\<And>s t ps.\n        \\<lbrakk>s \\<in> nodes (del_unEdge n1 w v' G);\n         odd (degree s (del_unEdge n1 w v' G));\n         t \\<in> nodes (del_unEdge n1 w v' G);\n         odd (degree t (del_unEdge n1 w v' G)); s \\<noteq> t;\n         valid_unMultigraph.is_Eulerian_trail (del_unEdge n1 w v' G) s ps\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s \\<in> nodes (del_unEdge n1 w v' G)\n  odd (degree s (del_unEdge n1 w v' G))\n  t \\<in> nodes (del_unEdge n1 w v' G)\n  odd (degree t (del_unEdge n1 w v' G))\n  s \\<noteq> t\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge n1 w v' G) s ps t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"(s=n2\\<and>t=v')\\<or>(s=v'\\<and>t=n2)\""], ["proof (prove)\nusing this:\n  s \\<in> nodes (del_unEdge n1 w v' G)\n  odd (degree s (del_unEdge n1 w v' G))\n  t \\<in> nodes (del_unEdge n1 w v' G)\n  odd (degree t (del_unEdge n1 w v' G))\n  s \\<noteq> t\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge n1 w v' G) s ps t\n\ngoal (1 subgoal):\n 1. s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2", "using odd_n2 odd_v' two_odds \\<open>finite (edges G)\\<close>\\<open>valid_unMultigraph G\\<close>"], ["proof (prove)\nusing this:\n  s \\<in> nodes (del_unEdge n1 w v' G)\n  odd (degree s (del_unEdge n1 w v' G))\n  t \\<in> nodes (del_unEdge n1 w v' G)\n  odd (degree t (del_unEdge n1 w v' G))\n  s \\<noteq> t\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge n1 w v' G) s ps t\n  odd (degree n2 (del_unEdge n1 w v' G))\n  odd (degree v' (del_unEdge n1 w v' G))\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n  finite (edges G)\n  valid_unMultigraph G\n\ngoal (1 subgoal):\n 1. s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2", "by (metis (mono_tags) del_UnEdge_node empty_iff even_except_two even_n1 insert_iff\n          valid_unMultigraph.degree_frame)"], ["proof (state)\nthis:\n  s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"s=n2\\<Longrightarrow>t=v'\\<Longrightarrow>?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = n2; t = v'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "by (metis \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>n1 \\<noteq> n2\\<close> \\<open>valid_unMultigraph G\\<close> n1(1) n1(2) n2(1) n2(2)\n          s_ps_t valid0 valid_unMultigraph.euclerian_rev valid_unMultigraph.eulerian_cons)"], ["proof (state)\nthis:\n  \\<lbrakk>s = n2; t = v'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>s = n2; t = v'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"s=v'\\<Longrightarrow>t=n2\\<Longrightarrow>?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = v'; t = n2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "by (metis \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>n1 \\<noteq> n2\\<close> \\<open>valid_unMultigraph G\\<close> n1(1) n1(2) n2(1) n2(2)\n          s_ps_t valid_unMultigraph.eulerian_cons)"], ["proof (state)\nthis:\n  \\<lbrakk>s = v'; t = n2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'\n 2. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2\n  \\<lbrakk>s = n2; t = v'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n  \\<lbrakk>s = v'; t = n2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'", "show ?thesis"], ["proof (prove)\nusing this:\n  s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2\n  \\<lbrakk>s = n2; t = v'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n  \\<lbrakk>s = v'; t = n2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>nodes G.\n       \\<exists>v'\\<in>nodes G.\n          \\<exists>ps.\n             odd (degree v G) \\<and>\n             odd (degree v' G) \\<and>\n             v \\<noteq> v' \\<and>\n             valid_unMultigraph.is_Eulerian_trail G v ps v'", "by auto"], ["proof (state)\nthis:\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "case False"], ["proof (state)\nthis:\n  \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "assume \"v'\\<noteq>n2\""], ["proof (state)\nthis:\n  v' \\<noteq> n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "assume not_conneted:\"\\<not>valid_unMultigraph.connected (del_unEdge n1 w v' G)\""], ["proof (state)\nthis:\n  \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"(v',w,n1)\\<in>edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v', w, n1) \\<in> edges G", "using \\<open>(n1,w,v')\\<in>edges G\\<close>"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n\ngoal (1 subgoal):\n 1. (v', w, n1) \\<in> edges G", "by (metis \\<open>valid_unMultigraph G\\<close>  valid_unMultigraph.corres)"], ["proof (state)\nthis:\n  (v', w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have valid0:\"valid_unMultigraph (del_unEdge n1 w v' G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge n1 w v' G)", "using \\<open>valid_unMultigraph G\\<close> del_unEdge_valid"], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n  valid_unMultigraph ?g \\<Longrightarrow>\n  valid_unMultigraph (del_unEdge ?v ?e ?v' ?g)\n\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge n1 w v' G)", "by auto"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge n1 w v' G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence valid0':\"valid_graph (del_unEdge n1 w v' G)\""], ["proof (prove)\nusing this:\n  valid_unMultigraph (del_unEdge n1 w v' G)\n\ngoal (1 subgoal):\n 1. valid_graph (del_unEdge n1 w v' G)", "using valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph (del_unEdge n1 w v' G)\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph (del_unEdge n1 w v' G)", "by auto"], ["proof (state)\nthis:\n  valid_graph (del_unEdge n1 w v' G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have even_n1:\"even(degree n1 (del_unEdge n1 w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (degree n1 (del_unEdge n1 w v' G))", "using valid_unMultigraph.del_UnEdge_even[OF \\<open>valid_unMultigraph G\\<close> \\<open>(n1,w,v')\\<in>edges G\\<close>\n          \\<open>finite (edges G)\\<close>] n1"], ["proof (prove)\nusing this:\n  (n1 \\<in> odd_nodes_set (del_unEdge n1 w v' G)) = even (degree n1 G)\n  n1 \\<in> nodes G\n  odd (degree n1 G)\n\ngoal (1 subgoal):\n 1. even (degree n1 (del_unEdge n1 w v' G))", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  (n1 \\<in> {v \\<in> nodes (del_unEdge n1 w v' G).\n             odd (degree v (del_unEdge n1 w v' G))}) =\n  even (degree n1 G)\n  n1 \\<in> nodes G\n  odd (degree n1 G)\n\ngoal (1 subgoal):\n 1. even (degree n1 (del_unEdge n1 w v' G))", "by auto"], ["proof (state)\nthis:\n  even (degree n1 (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  even (degree n1 (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have odd_n2:\"odd(degree n2 (del_unEdge n1 w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree n2 (del_unEdge n1 w v' G))", "using \\<open>n1 \\<noteq> n2\\<close> \\<open>v' \\<noteq> n2\\<close> n2 valid_unMultigraph.degree_frame[OF \\<open>valid_unMultigraph G\\<close>\n          \\<open>finite (edges G)\\<close>, of n2 n1 v' w]"], ["proof (prove)\nusing this:\n  n1 \\<noteq> n2\n  v' \\<noteq> n2\n  n2 \\<in> nodes G\n  odd (degree n2 G)\n  n2 \\<notin> {n1, v'} \\<Longrightarrow>\n  degree n2 (del_unEdge n1 w v' G) = degree n2 G\n\ngoal (1 subgoal):\n 1. odd (degree n2 (del_unEdge n1 w v' G))", "by auto"], ["proof (state)\nthis:\n  odd (degree n2 (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  odd (degree n2 (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"v'\\<noteq>n1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<noteq> n1", "using valid_unMultigraph.no_id[OF \\<open>valid_unMultigraph G\\<close>] \\<open>(n1,w,v')\\<in>edges G\\<close>"], ["proof (prove)\nusing this:\n  (?v, ?w, ?v) \\<notin> edges G\n  (n1, w, v') \\<in> edges G\n\ngoal (1 subgoal):\n 1. v' \\<noteq> n1", "by auto"], ["proof (state)\nthis:\n  v' \\<noteq> n1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence odd_v':\"odd(degree v' (del_unEdge n1 w v' G))\""], ["proof (prove)\nusing this:\n  v' \\<noteq> n1\n\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge n1 w v' G))", "using  \\<open>v' \\<noteq> n2\\<close>   even_except_two[of v']\n          valid_graph.E_validD(2)[OF \\<open>valid_graph G\\<close> \\<open>(n1, w, v') \\<in> edges G\\<close>]\n          valid_unMultigraph.del_UnEdge_even'[OF  \\<open>valid_unMultigraph G\\<close> \\<open>(n1, w, v') \\<in> edges G\\<close>\n          \\<open>finite (edges G)\\<close> ]"], ["proof (prove)\nusing this:\n  v' \\<noteq> n1\n  v' \\<noteq> n2\n  \\<lbrakk>v' \\<in> nodes G; v' \\<noteq> n1; v' \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree v' G)\n  v' \\<in> nodes G\n  (v' \\<in> odd_nodes_set (del_unEdge n1 w v' G)) = even (degree v' G)\n\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge n1 w v' G))", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  v' \\<noteq> n1\n  v' \\<noteq> n2\n  \\<lbrakk>v' \\<in> nodes G; v' \\<noteq> n1; v' \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree v' G)\n  v' \\<in> nodes G\n  (v' \\<in> {v \\<in> nodes (del_unEdge n1 w v' G).\n             odd (degree v (del_unEdge n1 w v' G))}) =\n  even (degree v' G)\n\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge n1 w v' G))", "by auto"], ["proof (state)\nthis:\n  odd (degree v' (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  even (degree n1 (del_unEdge n1 w v' G))\n  odd (degree n2 (del_unEdge n1 w v' G))\n  odd (degree v' (del_unEdge n1 w v' G))", "have even_except_two':\"\\<And>n. n\\<in>nodes (del_unEdge n1 w v' G)\\<Longrightarrow> n\\<noteq>n2\n          \\<Longrightarrow> n\\<noteq>v'\\<Longrightarrow> even(degree n (del_unEdge n1 w v' G))\""], ["proof (prove)\nusing this:\n  even (degree n1 (del_unEdge n1 w v' G))\n  odd (degree n2 (del_unEdge n1 w v' G))\n  odd (degree v' (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes (del_unEdge n1 w v' G); n \\<noteq> n2;\n        n \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> even (degree n (del_unEdge n1 w v' G))", "using del_UnEdge_node[of _ n1 w v' G] even_except_two valid_unMultigraph.degree_frame[OF\n          \\<open>valid_unMultigraph G\\<close> \\<open>finite (edges G)\\<close>, of _ n1 v' w]"], ["proof (prove)\nusing this:\n  even (degree n1 (del_unEdge n1 w v' G))\n  odd (degree n2 (del_unEdge n1 w v' G))\n  odd (degree v' (del_unEdge n1 w v' G))\n  (?v \\<in> nodes (del_unEdge n1 w v' G)) = (?v \\<in> nodes G)\n  \\<lbrakk>?n \\<in> nodes G; ?n \\<noteq> n1; ?n \\<noteq> n2\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n G)\n  ?x \\<notin> {n1, v'} \\<Longrightarrow>\n  degree ?x (del_unEdge n1 w v' G) = degree ?x G\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<in> nodes (del_unEdge n1 w v' G); n \\<noteq> n2;\n        n \\<noteq> v'\\<rbrakk>\n       \\<Longrightarrow> even (degree n (del_unEdge n1 w v' G))", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>?n \\<in> nodes (del_unEdge n1 w v' G); ?n \\<noteq> n2;\n   ?n \\<noteq> v'\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "obtain G1 G2 where\n          G1_nodes: \"nodes G1={n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n ps n1}\"\n          and G1_edges: \"edges G1={(n,e,n'). (n,e,n')\\<in>edges (del_unEdge n1 w v' G) \\<and> n\\<in>nodes G1\n            \\<and> n'\\<in>nodes G1}\"\n          and G2_nodes:\"nodes G2={n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n ps v'}\"\n          and G2_edges:\"edges G2={(n,e,n'). (n,e,n')\\<in>edges (del_unEdge n1 w v' G) \\<and> n\\<in>nodes G2\n            \\<and> n'\\<in>nodes G2}\"\n          and G1_G2_edges_union:\"edges G1 \\<union> edges G2 = edges (del_unEdge n1 w v' G)\"\n          and \"edges G1 \\<inter> edges G2={}\"\n          and G1_G2_nodes_union:\"nodes G1 \\<union> nodes G2=nodes (del_unEdge n1 w v' G)\"\n          and \"nodes G1 \\<inter> nodes G2={}\"\n          and \"valid_unMultigraph G1\"\n          and \"valid_unMultigraph G2\"\n          and \"valid_unMultigraph.connected G1\"\n          and \"valid_unMultigraph.connected G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>G1 G2.\n        \\<lbrakk>nodes G1 =\n                 {n. \\<exists>ps.\n                        valid_graph.is_path (del_unEdge n1 w v' G) n ps n1};\n         edges G1 =\n         {(n, e, n').\n          (n, e, n') \\<in> edges (del_unEdge n1 w v' G) \\<and>\n          n \\<in> nodes G1 \\<and> n' \\<in> nodes G1};\n         nodes G2 =\n         {n. \\<exists>ps.\n                valid_graph.is_path (del_unEdge n1 w v' G) n ps v'};\n         edges G2 =\n         {(n, e, n').\n          (n, e, n') \\<in> edges (del_unEdge n1 w v' G) \\<and>\n          n \\<in> nodes G2 \\<and> n' \\<in> nodes G2};\n         edges G1 \\<union> edges G2 = edges (del_unEdge n1 w v' G);\n         edges G1 \\<inter> edges G2 = {};\n         nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w v' G);\n         nodes G1 \\<inter> nodes G2 = {}; valid_unMultigraph G1;\n         valid_unMultigraph G2; valid_unMultigraph.connected G1;\n         valid_unMultigraph.connected G2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using valid_unMultigraph.connectivity_split[OF \\<open>valid_unMultigraph G\\<close>\n          \\<open>valid_unMultigraph.connected G\\<close> not_conneted \\<open>(n1,w,v')\\<in>edges G\\<close>]"], ["proof (prove)\nusing this:\n  (\\<And>G1 G2.\n      \\<lbrakk>nodes G1 =\n               {n. \\<exists>ps.\n                      valid_graph.is_path (del_unEdge n1 w v' G) n ps n1};\n       edges G1 =\n       {(n, e, n').\n        (n, e, n') \\<in> edges (del_unEdge n1 w v' G) \\<and>\n        n \\<in> nodes G1 \\<and> n' \\<in> nodes G1};\n       nodes G2 =\n       {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n ps v'};\n       edges G2 =\n       {(n, e, n').\n        (n, e, n') \\<in> edges (del_unEdge n1 w v' G) \\<and>\n        n \\<in> nodes G2 \\<and> n' \\<in> nodes G2};\n       edges G1 \\<union> edges G2 = edges (del_unEdge n1 w v' G);\n       edges G1 \\<inter> edges G2 = {};\n       nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w v' G);\n       nodes G1 \\<inter> nodes G2 = {}; valid_unMultigraph G1;\n       valid_unMultigraph G2; valid_unMultigraph.connected G1;\n       valid_unMultigraph.connected G2\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>G1 G2.\n        \\<lbrakk>nodes G1 =\n                 {n. \\<exists>ps.\n                        valid_graph.is_path (del_unEdge n1 w v' G) n ps n1};\n         edges G1 =\n         {(n, e, n').\n          (n, e, n') \\<in> edges (del_unEdge n1 w v' G) \\<and>\n          n \\<in> nodes G1 \\<and> n' \\<in> nodes G1};\n         nodes G2 =\n         {n. \\<exists>ps.\n                valid_graph.is_path (del_unEdge n1 w v' G) n ps v'};\n         edges G2 =\n         {(n, e, n').\n          (n, e, n') \\<in> edges (del_unEdge n1 w v' G) \\<and>\n          n \\<in> nodes G2 \\<and> n' \\<in> nodes G2};\n         edges G1 \\<union> edges G2 = edges (del_unEdge n1 w v' G);\n         edges G1 \\<inter> edges G2 = {};\n         nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w v' G);\n         nodes G1 \\<inter> nodes G2 = {}; valid_unMultigraph G1;\n         valid_unMultigraph G2; valid_unMultigraph.connected G1;\n         valid_unMultigraph.connected G2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  nodes G1 =\n  {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n ps n1}\n  edges G1 =\n  {(n, e, n').\n   (n, e, n') \\<in> edges (del_unEdge n1 w v' G) \\<and>\n   n \\<in> nodes G1 \\<and> n' \\<in> nodes G1}\n  nodes G2 =\n  {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n ps v'}\n  edges G2 =\n  {(n, e, n').\n   (n, e, n') \\<in> edges (del_unEdge n1 w v' G) \\<and>\n   n \\<in> nodes G2 \\<and> n' \\<in> nodes G2}\n  edges G1 \\<union> edges G2 = edges (del_unEdge n1 w v' G)\n  edges G1 \\<inter> edges G2 = {}\n  nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w v' G)\n  nodes G1 \\<inter> nodes G2 = {}\n  valid_unMultigraph G1\n  valid_unMultigraph G2\n  valid_unMultigraph.connected G1\n  valid_unMultigraph.connected G2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"n2\\<in>nodes G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "using extend_distinct_path"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite E; is_trail ?v' ?ps ?v;\n   even (degree ?v' G) \\<and> ?v' \\<noteq> ?v \\<or>\n   odd (degree ?v' G) \\<and> ?v' = ?v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e v1. is_trail v1 (e # ?ps) ?v\n\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>v' ps v.\n        \\<lbrakk>finite E; is_trail v' ps v;\n         even (degree v' G) \\<and> v' \\<noteq> v \\<or>\n         odd (degree v' G) \\<and> v' = v\\<rbrakk>\n        \\<Longrightarrow> \\<exists>e v1.\n                             is_trail v1 (e # ps) v) \\<Longrightarrow>\n    n2 \\<in> nodes G2", "have \"finite (edges (del_unEdge n1 w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges (del_unEdge n1 w v' G))", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (edges\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr>)", "using \\<open>finite (edges G)\\<close>"], ["proof (prove)\nusing this:\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. finite\n     (edges\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  finite (edges (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. (\\<And>v' ps v.\n        \\<lbrakk>finite E; is_trail v' ps v;\n         even (degree v' G) \\<and> v' \\<noteq> v \\<or>\n         odd (degree v' G) \\<and> v' = v\\<rbrakk>\n        \\<Longrightarrow> \\<exists>e v1.\n                             is_trail v1 (e # ps) v) \\<Longrightarrow>\n    n2 \\<in> nodes G2", "moreover"], ["proof (state)\nthis:\n  finite (edges (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. (\\<And>v' ps v.\n        \\<lbrakk>finite E; is_trail v' ps v;\n         even (degree v' G) \\<and> v' \\<noteq> v \\<or>\n         odd (degree v' G) \\<and> v' = v\\<rbrakk>\n        \\<Longrightarrow> \\<exists>e v1.\n                             is_trail v1 (e # ps) v) \\<Longrightarrow>\n    n2 \\<in> nodes G2", "have \"num_of_odd_nodes (del_unEdge n1 w v' G) = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_of_odd_nodes (del_unEdge n1 w v' G) = 2", "by (metis \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>(v', w, n1) \\<in> edges G\\<close> \\<open>num_of_odd_nodes G = 2\\<close>\n              \\<open>v' \\<noteq> n2\\<close> \\<open>valid_graph G\\<close> del_UnEdge_even_odd delete_edge_sym even_except_two\n              \\<open>finite (edges G)\\<close> \\<open>finite (nodes G)\\<close> \\<open>valid_unMultigraph G\\<close>\n              n1(2) valid_graph.E_validD(2) valid_unMultigraph.no_id)"], ["proof (state)\nthis:\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n\ngoal (1 subgoal):\n 1. (\\<And>v' ps v.\n        \\<lbrakk>finite E; is_trail v' ps v;\n         even (degree v' G) \\<and> v' \\<noteq> v \\<or>\n         odd (degree v' G) \\<and> v' = v\\<rbrakk>\n        \\<Longrightarrow> \\<exists>e v1.\n                             is_trail v1 (e # ps) v) \\<Longrightarrow>\n    n2 \\<in> nodes G2", "ultimately"], ["proof (chain)\npicking this:\n  finite (edges (del_unEdge n1 w v' G))\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2", "have \"\\<exists>ps. valid_unMultigraph.is_trail (del_unEdge n1 w v' G) n2 ps v'\""], ["proof (prove)\nusing this:\n  finite (edges (del_unEdge n1 w v' G))\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n\ngoal (1 subgoal):\n 1. \\<exists>ps. valid_unMultigraph.is_trail (del_unEdge n1 w v' G) n2 ps v'", "using valid_unMultigraph.path_between_odds[OF valid0,of n2 v',OF odd_n2 odd_v'] \\<open>v'\\<noteq>n2\\<close>"], ["proof (prove)\nusing this:\n  finite (edges (del_unEdge n1 w v' G))\n  num_of_odd_nodes (del_unEdge n1 w v' G) = 2\n  \\<lbrakk>finite (edges (del_unEdge n1 w v' G)); n2 \\<noteq> v';\n   num_of_odd_nodes (del_unEdge n1 w v' G) = 2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ps.\n                       valid_unMultigraph.is_trail (del_unEdge n1 w v' G) n2\n                        ps v'\n  v' \\<noteq> n2\n\ngoal (1 subgoal):\n 1. \\<exists>ps. valid_unMultigraph.is_trail (del_unEdge n1 w v' G) n2 ps v'", "by auto"], ["proof (state)\nthis:\n  \\<exists>ps. valid_unMultigraph.is_trail (del_unEdge n1 w v' G) n2 ps v'\n\ngoal (1 subgoal):\n 1. (\\<And>v' ps v.\n        \\<lbrakk>finite E; is_trail v' ps v;\n         even (degree v' G) \\<and> v' \\<noteq> v \\<or>\n         odd (degree v' G) \\<and> v' = v\\<rbrakk>\n        \\<Longrightarrow> \\<exists>e v1.\n                             is_trail v1 (e # ps) v) \\<Longrightarrow>\n    n2 \\<in> nodes G2", "hence \"\\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n2 ps v'\""], ["proof (prove)\nusing this:\n  \\<exists>ps. valid_unMultigraph.is_trail (del_unEdge n1 w v' G) n2 ps v'\n\ngoal (1 subgoal):\n 1. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n2 ps v'", "by (metis valid0 valid_unMultigraph.is_trail_intro)"], ["proof (state)\nthis:\n  \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n2 ps v'\n\ngoal (1 subgoal):\n 1. (\\<And>v' ps v.\n        \\<lbrakk>finite E; is_trail v' ps v;\n         even (degree v' G) \\<and> v' \\<noteq> v \\<or>\n         odd (degree v' G) \\<and> v' = v\\<rbrakk>\n        \\<Longrightarrow> \\<exists>e v1.\n                             is_trail v1 (e # ps) v) \\<Longrightarrow>\n    n2 \\<in> nodes G2", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n2 ps v'\n\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "using G2_nodes"], ["proof (prove)\nusing this:\n  \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n2 ps v'\n  nodes G2 =\n  {n. \\<exists>ps. valid_graph.is_path (del_unEdge n1 w v' G) n ps v'}\n\ngoal (1 subgoal):\n 1. n2 \\<in> nodes G2", "by auto"], ["proof (state)\nthis:\n  n2 \\<in> nodes G2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n2 \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"v'\\<in>nodes G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<in> nodes G2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v' \\<in> nodes G2", "have \"valid_graph.is_path (del_unEdge n1 w v' G) v' [] v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph.is_path (del_unEdge n1 w v' G) v' [] v'", "by (metis (full_types) \\<open>(n1, w, v') \\<in> edges G\\<close> \\<open>valid_graph G\\<close> del_UnEdge_node\n                valid0' valid_graph.E_validD(2) valid_graph.is_path_simps(1))"], ["proof (state)\nthis:\n  valid_graph.is_path (del_unEdge n1 w v' G) v' [] v'\n\ngoal (1 subgoal):\n 1. v' \\<in> nodes G2", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_graph.is_path (del_unEdge n1 w v' G) v' [] v'\n\ngoal (1 subgoal):\n 1. v' \\<in> nodes G2", "by (metis (lifting) G2_nodes mem_Collect_eq)"], ["proof (state)\nthis:\n  v' \\<in> nodes G2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v' \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have edges_subset:\"edges (del_unEdge n1 w v' G) \\<subset> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (del_unEdge n1 w v' G) \\<subset> edges G", "using \\<open>(n1,w,v')\\<in>edges G\\<close> \\<open>(v',w,n1)\\<in>edges G\\<close>"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n  (v', w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges (del_unEdge n1 w v' G) \\<subset> edges G", "unfolding del_unEdge_def"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n  (v', w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges\n     \\<lparr>nodes = nodes G,\n        edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr>\n    \\<subset> edges G", "by auto"], ["proof (state)\nthis:\n  edges (del_unEdge n1 w v' G) \\<subset> edges G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"card (edges G1) < card (edges G)\""], ["proof (prove)\nusing this:\n  edges (del_unEdge n1 w v' G) \\<subset> edges G\n\ngoal (1 subgoal):\n 1. card (edges G1) < card (edges G)", "by (metis G1_G2_edges_union inf_sup_absorb \\<open>finite (edges G)\\<close>  less_infI2 psubset_card_mono)"], ["proof (state)\nthis:\n  card (edges G1) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  card (edges G1) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (edges G1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges G1)", "by (metis (full_types) G1_G2_edges_union edges_subset finite_Un finite_subset\n          \\<open>finite (edges G)\\<close>  less_imp_le)"], ["proof (state)\nthis:\n  finite (edges G1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (edges G1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (nodes G1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes G1)", "using G1_G2_nodes_union  \\<open>finite (nodes G)\\<close>"], ["proof (prove)\nusing this:\n  nodes G1 \\<union> nodes G2 = nodes (del_unEdge n1 w v' G)\n  finite (nodes G)\n\ngoal (1 subgoal):\n 1. finite (nodes G1)", "unfolding del_unEdge_def"], ["proof (prove)\nusing this:\n  nodes G1 \\<union> nodes G2 =\n  nodes\n   \\<lparr>nodes = nodes G,\n      edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr>\n  finite (nodes G)\n\ngoal (1 subgoal):\n 1. finite (nodes G1)", "by (metis (full_types) finite_Un select_convs(1))"], ["proof (state)\nthis:\n  finite (nodes G1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (nodes G1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"n1\\<in>nodes G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "have \"valid_graph.is_path (del_unEdge n1 w v' G) n1 [] n1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph.is_path (del_unEdge n1 w v' G) n1 [] n1", "by (metis (full_types) del_UnEdge_node n1(1) valid0' valid_graph.is_path_simps(1))"], ["proof (state)\nthis:\n  valid_graph.is_path (del_unEdge n1 w v' G) n1 [] n1\n\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_graph.is_path (del_unEdge n1 w v' G) n1 [] n1\n\ngoal (1 subgoal):\n 1. n1 \\<in> nodes G1", "by (metis (lifting) G1_nodes mem_Collect_eq)"], ["proof (state)\nthis:\n  n1 \\<in> nodes G1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n1 \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  n1 \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "hence \"nodes G1 \\<noteq> {}\""], ["proof (prove)\nusing this:\n  n1 \\<in> nodes G1\n\ngoal (1 subgoal):\n 1. nodes G1 \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  nodes G1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  nodes G1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"num_of_odd_nodes G1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "have \"\\<forall>n\\<in>nodes G1. even(degree n (del_unEdge n1 w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G1. even (degree n (del_unEdge n1 w v' G))", "using even_except_two' odd_v' odd_n2 \\<open>n2\\<in>nodes G2\\<close> \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>\n              \\<open>v'\\<in>nodes G2\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n \\<in> nodes (del_unEdge n1 w v' G); ?n \\<noteq> n2;\n   ?n \\<noteq> v'\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n (del_unEdge n1 w v' G))\n  odd (degree v' (del_unEdge n1 w v' G))\n  odd (degree n2 (del_unEdge n1 w v' G))\n  n2 \\<in> nodes G2\n  nodes G1 \\<inter> nodes G2 = {}\n  v' \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G1. even (degree n (del_unEdge n1 w v' G))", "by (metis (full_types) G1_G2_nodes_union Un_iff disjoint_iff_not_equal)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G1. even (degree n (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "moreover"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G1. even (degree n (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "have \"valid_graph G2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph G2", "using \\<open>valid_unMultigraph G2\\<close> valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G2\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G2", "by auto"], ["proof (state)\nthis:\n  valid_graph G2\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>nodes G1. even (degree n (del_unEdge n1 w v' G))\n  valid_graph G2", "have \"\\<forall>n\\<in>nodes G1. even(degree n G1)\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G1. even (degree n (del_unEdge n1 w v' G))\n  valid_graph G2\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G1. even (degree n G1)", "using sub_graph_degree_frame[of G2 G1 \"del_unEdge n1 w v' G\"]"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G1. even (degree n (del_unEdge n1 w v' G))\n  valid_graph G2\n  \\<lbrakk>valid_graph G2;\n   edges G1 \\<union> edges G2 = edges (del_unEdge n1 w v' G);\n   nodes G1 \\<inter> nodes G2 = {}; ?n \\<in> nodes G1\\<rbrakk>\n  \\<Longrightarrow> degree ?n (del_unEdge n1 w v' G) = degree ?n G1\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G1. even (degree n G1)", "by (metis G1_G2_edges_union \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G1. even (degree n G1)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G1. even (degree n G1)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G1 = 0", "unfolding num_of_odd_nodes_def odd_nodes_set_def"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G1. even (degree n G1)\n\ngoal (1 subgoal):\n 1. card {v \\<in> nodes G1. odd (degree v G1)} = 0", "by (metis (lifting) card_eq_0_iff empty_Collect_eq)"], ["proof (state)\nthis:\n  num_of_odd_nodes G1 = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  num_of_odd_nodes G1 = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  card (edges G1) < card (edges G)\n  finite (edges G1)\n  finite (nodes G1)\n  n1 \\<in> nodes G1\n  nodes G1 \\<noteq> {}\n  num_of_odd_nodes G1 = 0", "obtain ps1 where ps1:\"valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1\""], ["proof (prove)\nusing this:\n  card (edges G1) < card (edges G)\n  finite (edges G1)\n  finite (nodes G1)\n  n1 \\<in> nodes G1\n  nodes G1 \\<noteq> {}\n  num_of_odd_nodes G1 = 0\n\ngoal (1 subgoal):\n 1. (\\<And>ps1.\n        valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>valid_unMultigraph G1\\<close> \\<open>valid_unMultigraph.connected G1\\<close> less.hyps[of G1]"], ["proof (prove)\nusing this:\n  card (edges G1) < card (edges G)\n  finite (edges G1)\n  finite (nodes G1)\n  n1 \\<in> nodes G1\n  nodes G1 \\<noteq> {}\n  num_of_odd_nodes G1 = 0\n  valid_unMultigraph G1\n  valid_unMultigraph.connected G1\n  \\<lbrakk>card (edges G1) < card (edges G); num_of_odd_nodes G1 = 2;\n   finite (edges G1); finite (nodes G1); valid_unMultigraph G1;\n   nodes G1 \\<noteq> {}; valid_unMultigraph.connected G1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G1.\n                       \\<exists>v'\\<in>nodes G1.\n                          \\<exists>ps.\n                             odd (degree v G1) \\<and>\n                             odd (degree v' G1) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G1 v ps v'\n  \\<lbrakk>card (edges G1) < card (edges G); num_of_odd_nodes G1 = 0;\n   finite (edges G1); finite (nodes G1); valid_unMultigraph G1;\n   nodes G1 \\<noteq> {}; valid_unMultigraph.connected G1\\<rbrakk>\n  \\<Longrightarrow> \\<forall>v\\<in>nodes G1.\n                       \\<exists>ps.\n                          valid_unMultigraph.is_Eulerian_circuit G1 v ps v\n\ngoal (1 subgoal):\n 1. (\\<And>ps1.\n        valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis valid_unMultigraph.is_Eulerian_circuit_def)"], ["proof (state)\nthis:\n  valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"card (edges G2) < card (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (edges G2) < card (edges G)", "by (metis G1_G2_edges_union \\<open>finite (edges G)\\<close> edges_subset inf_sup_absorb less_infI2\n          psubset_card_mono sup_commute)"], ["proof (state)\nthis:\n  card (edges G2) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  card (edges G2) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (edges G2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges G2)", "by (metis (full_types) G1_G2_edges_union edges_subset finite_Un \\<open>finite (edges G)\\<close> less_le\n          rev_finite_subset)"], ["proof (state)\nthis:\n  finite (edges G2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (edges G2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"finite (nodes G2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes G2)", "by (metis (mono_tags) G1_G2_nodes_union del_UnEdge_node le_sup_iff \\<open>finite (nodes G)\\<close>\n          rev_finite_subset subsetI)"], ["proof (state)\nthis:\n  finite (nodes G2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  finite (nodes G2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"nodes G2 \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes G2 \\<noteq> {}", "using \\<open>v'\\<in>nodes G2\\<close>"], ["proof (prove)\nusing this:\n  v' \\<in> nodes G2\n\ngoal (1 subgoal):\n 1. nodes G2 \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  nodes G2 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  nodes G2 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"num_of_odd_nodes G2 = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "have \"\\<forall>n\\<in>nodes G2. n\\<notin>{n2,v'}\\<longrightarrow>even(degree n (del_unEdge n1 w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2.\n       n \\<notin> {n2, v'} \\<longrightarrow>\n       even (degree n (del_unEdge n1 w v' G))", "using even_except_two'"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n \\<in> nodes (del_unEdge n1 w v' G); ?n \\<noteq> n2;\n   ?n \\<noteq> v'\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2.\n       n \\<notin> {n2, v'} \\<longrightarrow>\n       even (degree n (del_unEdge n1 w v' G))", "by (metis (full_types) G1_G2_nodes_union Un_iff insert_iff)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     even (degree n (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "moreover"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     even (degree n (del_unEdge n1 w v' G))\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "have \"valid_graph G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph G1", "using \\<open>valid_unMultigraph G1\\<close> valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G1\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G1", "by auto"], ["proof (state)\nthis:\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     even (degree n (del_unEdge n1 w v' G))\n  valid_graph G1", "have \"\\<forall>n\\<in>nodes G2. n\\<notin>{n2,v'}\\<longrightarrow>even(degree n G2)\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     even (degree n (del_unEdge n1 w v' G))\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2.\n       n \\<notin> {n2, v'} \\<longrightarrow> even (degree n G2)", "using sub_graph_degree_frame[of G1 G2 \"del_unEdge n1 w v' G\"]"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     even (degree n (del_unEdge n1 w v' G))\n  valid_graph G1\n  \\<lbrakk>valid_graph G1;\n   edges G2 \\<union> edges G1 = edges (del_unEdge n1 w v' G);\n   nodes G2 \\<inter> nodes G1 = {}; ?n \\<in> nodes G2\\<rbrakk>\n  \\<Longrightarrow> degree ?n (del_unEdge n1 w v' G) = degree ?n G2\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2.\n       n \\<notin> {n2, v'} \\<longrightarrow> even (degree n G2)", "by (metis G1_G2_edges_union Int_commute Un_commute \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow> even (degree n G2)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "hence \"\\<forall>n\\<in>nodes G2. n\\<notin>{n2,v'}\\<longrightarrow>n\\<notin>{v \\<in> nodes G2. odd (degree v G2)}\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow> even (degree n G2)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G2.\n       n \\<notin> {n2, v'} \\<longrightarrow>\n       n \\<notin> {v \\<in> nodes G2. odd (degree v G2)}", "by (metis (lifting) mem_Collect_eq)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     n \\<notin> {v \\<in> nodes G2. odd (degree v G2)}\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "moreover"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     n \\<notin> {v \\<in> nodes G2. odd (degree v G2)}\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "have \"odd(degree n2 G2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree n2 G2)", "using sub_graph_degree_frame[of G1 G2 \"del_unEdge n1 w v' G\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>valid_graph G1;\n   edges G2 \\<union> edges G1 = edges (del_unEdge n1 w v' G);\n   nodes G2 \\<inter> nodes G1 = {}; ?n \\<in> nodes G2\\<rbrakk>\n  \\<Longrightarrow> degree ?n (del_unEdge n1 w v' G) = degree ?n G2\n\ngoal (1 subgoal):\n 1. odd (degree n2 G2)", "by (metis (hide_lams, no_types) G1_G2_edges_union \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>\n              \\<open>valid_graph G1\\<close> \\<open>n2 \\<in> nodes G2\\<close> inf_assoc inf_bot_right inf_sup_absorb\n               odd_n2 sup_bot_right sup_commute)"], ["proof (state)\nthis:\n  odd (degree n2 G2)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "hence \"n2\\<in>{v \\<in> nodes G2. odd (degree v G2)}\""], ["proof (prove)\nusing this:\n  odd (degree n2 G2)\n\ngoal (1 subgoal):\n 1. n2 \\<in> {v \\<in> nodes G2. odd (degree v G2)}", "by (metis (lifting) \\<open>n2 \\<in> nodes G2\\<close> mem_Collect_eq)"], ["proof (state)\nthis:\n  n2 \\<in> {v \\<in> nodes G2. odd (degree v G2)}\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "moreover"], ["proof (state)\nthis:\n  n2 \\<in> {v \\<in> nodes G2. odd (degree v G2)}\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "have \"odd(degree v' G2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree v' G2)", "using sub_graph_degree_frame[of G1 G2 \"del_unEdge n1 w v' G\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>valid_graph G1;\n   edges G2 \\<union> edges G1 = edges (del_unEdge n1 w v' G);\n   nodes G2 \\<inter> nodes G1 = {}; ?n \\<in> nodes G2\\<rbrakk>\n  \\<Longrightarrow> degree ?n (del_unEdge n1 w v' G) = degree ?n G2\n\ngoal (1 subgoal):\n 1. odd (degree v' G2)", "by (metis G1_G2_edges_union Int_commute Un_commute \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>\n              \\<open>v' \\<in> nodes G2\\<close> \\<open>valid_graph G1\\<close> odd_v')"], ["proof (state)\nthis:\n  odd (degree v' G2)\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "hence \"v'\\<in>{v \\<in> nodes G2. odd (degree v G2)}\""], ["proof (prove)\nusing this:\n  odd (degree v' G2)\n\ngoal (1 subgoal):\n 1. v' \\<in> {v \\<in> nodes G2. odd (degree v G2)}", "by (metis (full_types) Collect_conj_eq Collect_mem_eq Int_Collect \\<open>v' \\<in> nodes G2\\<close>)"], ["proof (state)\nthis:\n  v' \\<in> {v \\<in> nodes G2. odd (degree v G2)}\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     n \\<notin> {v \\<in> nodes G2. odd (degree v G2)}\n  n2 \\<in> {v \\<in> nodes G2. odd (degree v G2)}\n  v' \\<in> {v \\<in> nodes G2. odd (degree v G2)}", "have \"{v \\<in> nodes G2. odd (degree v G2)}={n2,v'}\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     n \\<notin> {v \\<in> nodes G2. odd (degree v G2)}\n  n2 \\<in> {v \\<in> nodes G2. odd (degree v G2)}\n  v' \\<in> {v \\<in> nodes G2. odd (degree v G2)}\n\ngoal (1 subgoal):\n 1. {v \\<in> nodes G2. odd (degree v G2)} = {n2, v'}", "using \\<open>finite (nodes G2)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>nodes G2.\n     n \\<notin> {n2, v'} \\<longrightarrow>\n     n \\<notin> {v \\<in> nodes G2. odd (degree v G2)}\n  n2 \\<in> {v \\<in> nodes G2. odd (degree v G2)}\n  v' \\<in> {v \\<in> nodes G2. odd (degree v G2)}\n  finite (nodes G2)\n\ngoal (1 subgoal):\n 1. {v \\<in> nodes G2. odd (degree v G2)} = {n2, v'}", "by (induct G2,auto)"], ["proof (state)\nthis:\n  {v \\<in> nodes G2. odd (degree v G2)} = {n2, v'}\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "thus ?thesis"], ["proof (prove)\nusing this:\n  {v \\<in> nodes G2. odd (degree v G2)} = {n2, v'}\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "using \\<open>v'\\<noteq>n2\\<close>"], ["proof (prove)\nusing this:\n  {v \\<in> nodes G2. odd (degree v G2)} = {n2, v'}\n  v' \\<noteq> n2\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes G2 = 2", "unfolding num_of_odd_nodes_def odd_nodes_set_def"], ["proof (prove)\nusing this:\n  {v \\<in> nodes G2. odd (degree v G2)} = {n2, v'}\n  v' \\<noteq> n2\n\ngoal (1 subgoal):\n 1. card {v \\<in> nodes G2. odd (degree v G2)} = 2", "by auto"], ["proof (state)\nthis:\n  num_of_odd_nodes G2 = 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  num_of_odd_nodes G2 = 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  card (edges G2) < card (edges G)\n  finite (edges G2)\n  finite (nodes G2)\n  nodes G2 \\<noteq> {}\n  num_of_odd_nodes G2 = 2", "obtain s t ps2 where\n          s: \"s\\<in>nodes G2\" \"odd (degree s G2)\"\n          and t:\"t\\<in>nodes G2\" \"odd (degree t G2)\"\n          and \"s \\<noteq> t\"\n          and s_ps2_t: \"valid_unMultigraph.is_Eulerian_trail G2 s ps2 t\""], ["proof (prove)\nusing this:\n  card (edges G2) < card (edges G)\n  finite (edges G2)\n  finite (nodes G2)\n  nodes G2 \\<noteq> {}\n  num_of_odd_nodes G2 = 2\n\ngoal (1 subgoal):\n 1. (\\<And>s t ps2.\n        \\<lbrakk>s \\<in> nodes G2; odd (degree s G2); t \\<in> nodes G2;\n         odd (degree t G2); s \\<noteq> t;\n         valid_unMultigraph.is_Eulerian_trail G2 s ps2 t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>valid_unMultigraph G2\\<close> \\<open>valid_unMultigraph.connected G2\\<close> less.hyps[of G2]"], ["proof (prove)\nusing this:\n  card (edges G2) < card (edges G)\n  finite (edges G2)\n  finite (nodes G2)\n  nodes G2 \\<noteq> {}\n  num_of_odd_nodes G2 = 2\n  valid_unMultigraph G2\n  valid_unMultigraph.connected G2\n  \\<lbrakk>card (edges G2) < card (edges G); num_of_odd_nodes G2 = 2;\n   finite (edges G2); finite (nodes G2); valid_unMultigraph G2;\n   nodes G2 \\<noteq> {}; valid_unMultigraph.connected G2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G2.\n                       \\<exists>v'\\<in>nodes G2.\n                          \\<exists>ps.\n                             odd (degree v G2) \\<and>\n                             odd (degree v' G2) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G2 v ps v'\n  \\<lbrakk>card (edges G2) < card (edges G); num_of_odd_nodes G2 = 0;\n   finite (edges G2); finite (nodes G2); valid_unMultigraph G2;\n   nodes G2 \\<noteq> {}; valid_unMultigraph.connected G2\\<rbrakk>\n  \\<Longrightarrow> \\<forall>v\\<in>nodes G2.\n                       \\<exists>ps.\n                          valid_unMultigraph.is_Eulerian_circuit G2 v ps v\n\ngoal (1 subgoal):\n 1. (\\<And>s t ps2.\n        \\<lbrakk>s \\<in> nodes G2; odd (degree s G2); t \\<in> nodes G2;\n         odd (degree t G2); s \\<noteq> t;\n         valid_unMultigraph.is_Eulerian_trail G2 s ps2 t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s \\<in> nodes G2\n  odd (degree s G2)\n  t \\<in> nodes G2\n  odd (degree t G2)\n  s \\<noteq> t\n  valid_unMultigraph.is_Eulerian_trail G2 s ps2 t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  s \\<in> nodes G2\n  odd (degree s G2)\n  t \\<in> nodes G2\n  odd (degree t G2)\n  s \\<noteq> t\n  valid_unMultigraph.is_Eulerian_trail G2 s ps2 t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"valid_graph G1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph G1", "using \\<open>valid_unMultigraph G1\\<close> valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_unMultigraph G1\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. valid_graph G1", "by auto"], ["proof (state)\nthis:\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  s \\<in> nodes G2\n  odd (degree s G2)\n  t \\<in> nodes G2\n  odd (degree t G2)\n  s \\<noteq> t\n  valid_unMultigraph.is_Eulerian_trail G2 s ps2 t\n  valid_graph G1", "have \"(s=n2\\<and>t=v')\\<or>(s=v'\\<and>t=n2)\""], ["proof (prove)\nusing this:\n  s \\<in> nodes G2\n  odd (degree s G2)\n  t \\<in> nodes G2\n  odd (degree t G2)\n  s \\<noteq> t\n  valid_unMultigraph.is_Eulerian_trail G2 s ps2 t\n  valid_graph G1\n\ngoal (1 subgoal):\n 1. s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2", "using odd_n2 odd_v' even_except_two'\n          sub_graph_degree_frame[of G1 G2 \"(del_unEdge n1 w v' G)\"]"], ["proof (prove)\nusing this:\n  s \\<in> nodes G2\n  odd (degree s G2)\n  t \\<in> nodes G2\n  odd (degree t G2)\n  s \\<noteq> t\n  valid_unMultigraph.is_Eulerian_trail G2 s ps2 t\n  valid_graph G1\n  odd (degree n2 (del_unEdge n1 w v' G))\n  odd (degree v' (del_unEdge n1 w v' G))\n  \\<lbrakk>?n \\<in> nodes (del_unEdge n1 w v' G); ?n \\<noteq> n2;\n   ?n \\<noteq> v'\\<rbrakk>\n  \\<Longrightarrow> even (degree ?n (del_unEdge n1 w v' G))\n  \\<lbrakk>valid_graph G1;\n   edges G2 \\<union> edges G1 = edges (del_unEdge n1 w v' G);\n   nodes G2 \\<inter> nodes G1 = {}; ?n \\<in> nodes G2\\<rbrakk>\n  \\<Longrightarrow> degree ?n (del_unEdge n1 w v' G) = degree ?n G2\n\ngoal (1 subgoal):\n 1. s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2", "by (metis G1_G2_edges_union G1_G2_nodes_union UnI1 \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close> inf_commute\n          sup.commute)"], ["proof (state)\nthis:\n  s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have merge_G1_G2:\"\\<lparr>nodes = nodes G1 \\<union> nodes G2, edges = edges G1 \\<union> edges G2 \\<union>\n          {(n1, w,v'),(v', w, n1)}\\<rparr>=G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "have \"edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'),(v', w, n1)} =edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'), (v', w, n1)} =\n    edges G", "using  \\<open>(n1,w,v')\\<in>edges G\\<close> \\<open>(v',w,n1)\\<in>edges G\\<close>"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n  (v', w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'), (v', w, n1)} =\n    edges G", "unfolding del_unEdge_def"], ["proof (prove)\nusing this:\n  (n1, w, v') \\<in> edges G\n  (v', w, n1) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges\n     \\<lparr>nodes = nodes G,\n        edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr> \\<union>\n    {(n1, w, v'), (v', w, n1)} =\n    edges G", "by auto"], ["proof (state)\nthis:\n  edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'), (v', w, n1)} = edges G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "moreover"], ["proof (state)\nthis:\n  edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'), (v', w, n1)} = edges G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "have \"nodes (del_unEdge n1 w v' G)=nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (del_unEdge n1 w v' G) = nodes G", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes\n     \\<lparr>nodes = nodes G,\n        edges = edges G - {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    nodes G", "by auto"], ["proof (state)\nthis:\n  nodes (del_unEdge n1 w v' G) = nodes G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "ultimately"], ["proof (chain)\npicking this:\n  edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'), (v', w, n1)} = edges G\n  nodes (del_unEdge n1 w v' G) = nodes G", "have \"\\<lparr>nodes = nodes (del_unEdge n1 w v' G), edges =\n              edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'), (v', w, n1)}\\<rparr>=G\""], ["proof (prove)\nusing this:\n  edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'), (v', w, n1)} = edges G\n  nodes (del_unEdge n1 w v' G) = nodes G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n       edges =\n         edges (del_unEdge n1 w v' G) \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "by auto"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n     edges =\n       edges (del_unEdge n1 w v' G) \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "moreover"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n     edges =\n       edges (del_unEdge n1 w v' G) \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "have \"\\<lparr>nodes = nodes G1 \\<union> nodes G2, edges = edges G1 \\<union> edges G2 \\<union>\n              {(n1, w, v'),(v', w, n1)}\\<rparr>=\\<lparr>nodes = nodes (del_unEdge n1 w v' G),edges\n              = edges (del_unEdge n1 w v' G) \\<union> {(n1, w, v'), (v', w, n1)}\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n       edges =\n         edges (del_unEdge n1 w v' G) \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr>", "by (metis G1_G2_edges_union G1_G2_nodes_union)"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n     edges =\n       edges (del_unEdge n1 w v' G) \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "ultimately"], ["proof (chain)\npicking this:\n  \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n     edges =\n       edges (del_unEdge n1 w v' G) \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n     edges =\n       edges (del_unEdge n1 w v' G) \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n     edges =\n       edges (del_unEdge n1 w v' G) \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  \\<lparr>nodes = nodes (del_unEdge n1 w v' G),\n     edges =\n       edges (del_unEdge n1 w v' G) \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n       edges =\n         edges G1 \\<union> edges G2 \\<union>\n         {(n1, w, v'), (v', w, n1)}\\<rparr> =\n    G", "by auto"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"s=n2\\<Longrightarrow>t=v'\\<Longrightarrow>?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = n2; t = v'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "using eulerian_split[of G1 G2 n1 ps1 n1 v' \"(rev_path ps2)\" n2 w] merge_G1_G2"], ["proof (prove)\nusing this:\n  \\<lbrakk>nodes G1 \\<inter> nodes G2 = {}; edges G1 \\<inter> edges G2 = {};\n   valid_unMultigraph G1; valid_unMultigraph G2;\n   valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1;\n   valid_unMultigraph.is_Eulerian_trail G2 v' (rev_path ps2) n2\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_Eulerian_trail\n                     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n                        edges =\n                          edges G1 \\<union> edges G2 \\<union>\n                          {(n1, w, v'), (v', w, n1)}\\<rparr>\n                     n1 (ps1 @ (n1, w, v') # rev_path ps2) n2\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = n2; t = v'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "by (metis \\<open>edges G1 \\<inter> edges G2 = {}\\<close> \\<open>n1 \\<noteq> n2\\<close> \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>\n            \\<open>valid_unMultigraph G1\\<close> \\<open>valid_unMultigraph G2\\<close> n1(1) n1(2) n2(1) n2(2) ps1 s_ps2_t\n            valid_unMultigraph.euclerian_rev)"], ["proof (state)\nthis:\n  \\<lbrakk>s = n2; t = v'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>s = n2; t = v'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "have \"s=v'\\<Longrightarrow>t=n2\\<Longrightarrow>?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = v'; t = n2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "using eulerian_split[of G1 G2 n1 ps1 n1 v' ps2 n2 w] merge_G1_G2"], ["proof (prove)\nusing this:\n  \\<lbrakk>nodes G1 \\<inter> nodes G2 = {}; edges G1 \\<inter> edges G2 = {};\n   valid_unMultigraph G1; valid_unMultigraph G2;\n   valid_unMultigraph.is_Eulerian_trail G1 n1 ps1 n1;\n   valid_unMultigraph.is_Eulerian_trail G2 v' ps2 n2\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_Eulerian_trail\n                     \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n                        edges =\n                          edges G1 \\<union> edges G2 \\<union>\n                          {(n1, w, v'), (v', w, n1)}\\<rparr>\n                     n1 (ps1 @ (n1, w, v') # ps2) n2\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s = v'; t = n2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "by (metis \\<open>edges G1 \\<inter> edges G2 = {}\\<close> \\<open>n1 \\<noteq> n2\\<close> \\<open>nodes G1 \\<inter> nodes G2 = {}\\<close>\n          \\<open>valid_unMultigraph G1\\<close> \\<open>valid_unMultigraph G2\\<close> n1(1) n1(2) n2(1) n2(2) ps1 s_ps2_t)"], ["proof (state)\nthis:\n  \\<lbrakk>s = v'; t = n2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v' \\<noteq> n2;\n     \\<not> valid_unMultigraph.connected (del_unEdge n1 w v' G)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                         \\<exists>v'\\<in>nodes G.\n                            \\<exists>ps.\n                               odd (degree v G) \\<and>\n                               odd (degree v' G) \\<and>\n                               v \\<noteq> v' \\<and>\n                               valid_unMultigraph.is_Eulerian_trail G v ps\n                                v'", "ultimately"], ["proof (chain)\npicking this:\n  s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n  \\<lbrakk>s = n2; t = v'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n  \\<lbrakk>s = v'; t = n2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'", "show ?thesis"], ["proof (prove)\nusing this:\n  s = n2 \\<and> t = v' \\<or> s = v' \\<and> t = n2\n  \\<lparr>nodes = nodes G1 \\<union> nodes G2,\n     edges =\n       edges G1 \\<union> edges G2 \\<union>\n       {(n1, w, v'), (v', w, n1)}\\<rparr> =\n  G\n  \\<lbrakk>s = n2; t = v'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n  \\<lbrakk>s = v'; t = n2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                       \\<exists>v'\\<in>nodes G.\n                          \\<exists>ps.\n                             odd (degree v G) \\<and>\n                             odd (degree v' G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>nodes G.\n       \\<exists>v'\\<in>nodes G.\n          \\<exists>ps.\n             odd (degree v G) \\<and>\n             odd (degree v' G) \\<and>\n             v \\<noteq> v' \\<and>\n             valid_unMultigraph.is_Eulerian_trail G v ps v'", "by auto"], ["proof (state)\nthis:\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v' \\<noteq> n2 \\<Longrightarrow>\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 2; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>nodes G.\n                            \\<exists>v'\\<in>nodes G.\n                               \\<exists>ps.\n                                  odd (degree v G) \\<and>\n                                  odd (degree v' G) \\<and>\n                                  v \\<noteq> v' \\<and>\n                                  valid_unMultigraph.is_Eulerian_trail G v\n                                   ps v'\n 2. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "ultimately"], ["proof (chain)\npicking this:\n  v' = n2 \\<Longrightarrow>\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n  v' \\<noteq> n2 \\<Longrightarrow>\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'", "show \"\\<exists>v\\<in>nodes G. \\<exists>v'\\<in>nodes G.\\<exists>ps. odd (degree v G) \\<and> odd (degree v' G) \\<and> v \\<noteq> v'\n      \\<and> valid_unMultigraph.is_Eulerian_trail G v ps v'\""], ["proof (prove)\nusing this:\n  v' = n2 \\<Longrightarrow>\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n  v' \\<noteq> n2 \\<Longrightarrow>\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>nodes G.\n       \\<exists>v'\\<in>nodes G.\n          \\<exists>ps.\n             odd (degree v G) \\<and>\n             odd (degree v' G) \\<and>\n             v \\<noteq> v' \\<and>\n             valid_unMultigraph.is_Eulerian_trail G v ps v'", "by auto"], ["proof (state)\nthis:\n  \\<exists>v\\<in>nodes G.\n     \\<exists>v'\\<in>nodes G.\n        \\<exists>ps.\n           odd (degree v G) \\<and>\n           odd (degree v' G) \\<and>\n           v \\<noteq> v' \\<and>\n           valid_unMultigraph.is_Eulerian_trail G v ps v'\n\ngoal (1 subgoal):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>card (edges ?G) < card (edges G); num_of_odd_nodes ?G = 2;\n   finite (edges ?G); finite (nodes ?G); valid_unMultigraph ?G;\n   nodes ?G \\<noteq> {}; valid_unMultigraph.connected ?G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v\\<in>nodes ?G.\n                       \\<exists>v'\\<in>nodes ?G.\n                          \\<exists>ps.\n                             odd (degree v ?G) \\<and>\n                             odd (degree v' ?G) \\<and>\n                             v \\<noteq> v' \\<and>\n                             valid_unMultigraph.is_Eulerian_trail ?G v ps v'\n  \\<lbrakk>card (edges ?G) < card (edges G); num_of_odd_nodes ?G = 0;\n   finite (edges ?G); finite (nodes ?G); valid_unMultigraph ?G;\n   nodes ?G \\<noteq> {}; valid_unMultigraph.connected ?G\\<rbrakk>\n  \\<Longrightarrow> \\<forall>v\\<in>nodes ?G.\n                       \\<exists>ps.\n                          valid_unMultigraph.is_Eulerian_circuit ?G v ps v\n\ngoal (1 subgoal):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "assume \"finite (edges G)\" and \"finite (nodes G)\" and \"valid_unMultigraph G\" and \"nodes G\\<noteq>{}\"\n      and \"valid_unMultigraph.connected G\" and \"num_of_odd_nodes G = 0\""], ["proof (state)\nthis:\n  finite (edges G)\n  finite (nodes G)\n  valid_unMultigraph G\n  nodes G \\<noteq> {}\n  valid_unMultigraph.connected G\n  num_of_odd_nodes G = 0\n\ngoal (1 subgoal):\n 1. \\<And>G.\n       \\<lbrakk>\\<And>Ga.\n                   \\<lbrakk>card (edges Ga) < card (edges G);\n                    num_of_odd_nodes Ga = 2; finite (edges Ga);\n                    finite (nodes Ga); valid_unMultigraph Ga;\n                    nodes Ga \\<noteq> {};\n                    valid_unMultigraph.connected Ga\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v\\<in>nodes Ga.\n  \\<exists>v'\\<in>nodes Ga.\n     \\<exists>ps.\n        odd (degree v Ga) \\<and>\n        odd (degree v' Ga) \\<and>\n        v \\<noteq> v' \\<and>\n        valid_unMultigraph.is_Eulerian_trail Ga v ps v';\n        \\<And>Ga.\n           \\<lbrakk>card (edges Ga) < card (edges G);\n            num_of_odd_nodes Ga = 0; finite (edges Ga); finite (nodes Ga);\n            valid_unMultigraph Ga; nodes Ga \\<noteq> {};\n            valid_unMultigraph.connected Ga\\<rbrakk>\n           \\<Longrightarrow> \\<forall>v\\<in>nodes Ga.\n                                \\<exists>ps.\n                                   valid_unMultigraph.is_Eulerian_circuit Ga\n                                    v ps v;\n        num_of_odd_nodes G = 0; finite (edges G); finite (nodes G);\n        valid_unMultigraph G; nodes G \\<noteq> {};\n        valid_unMultigraph.connected G\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                            \\<exists>ps.\n                               valid_unMultigraph.is_Eulerian_circuit G v ps\n                                v", "show \"\\<forall>v\\<in>nodes G. \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes G.\n       \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v", "proof (rule,cases \"card (nodes G)=1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) = 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) = 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "assume \"v\\<in>nodes G\""], ["proof (state)\nthis:\n  v \\<in> nodes G\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) = 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "assume \" card (nodes G) = 1 \""], ["proof (state)\nthis:\n  card (nodes G) = 1\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) = 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "hence \"nodes G={v}\""], ["proof (prove)\nusing this:\n  card (nodes G) = 1\n\ngoal (1 subgoal):\n 1. nodes G = {v}", "using \\<open>v \\<in> nodes G\\<close>  card_Suc_eq[of \"nodes G\" 0] empty_iff insert_iff[of _ v]"], ["proof (prove)\nusing this:\n  card (nodes G) = 1\n  v \\<in> nodes G\n  (card (nodes G) = Suc 0) =\n  (\\<exists>b B.\n      nodes G = insert b B \\<and>\n      b \\<notin> B \\<and>\n      card B = 0 \\<and> (0 = 0 \\<longrightarrow> B = {}))\n  (?c \\<in> {}) = False\n  (?a \\<in> insert v ?A) = (?a = v \\<or> ?a \\<in> ?A)\n\ngoal (1 subgoal):\n 1. nodes G = {v}", "by auto"], ["proof (state)\nthis:\n  nodes G = {v}\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) = 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have \"edges G={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. edges G \\<noteq> {} \\<Longrightarrow> False", "assume \"edges G \\<noteq> {}\""], ["proof (state)\nthis:\n  edges G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. edges G \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  edges G \\<noteq> {}", "obtain e1 e2 e3 where e:\"(e1,e2,e3)\\<in>edges G\""], ["proof (prove)\nusing this:\n  edges G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>e1 e2 e3.\n        (e1, e2, e3) \\<in> edges G \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_in_conv prod_cases3)"], ["proof (state)\nthis:\n  (e1, e2, e3) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edges G \\<noteq> {} \\<Longrightarrow> False", "hence \"e1=e3\""], ["proof (prove)\nusing this:\n  (e1, e2, e3) \\<in> edges G\n\ngoal (1 subgoal):\n 1. e1 = e3", "using \\<open>nodes G={v}\\<close>"], ["proof (prove)\nusing this:\n  (e1, e2, e3) \\<in> edges G\n  nodes G = {v}\n\ngoal (1 subgoal):\n 1. e1 = e3", "by (metis (hide_lams, no_types) append_Nil2 valid_unMultigraph.is_trail_rev\n                valid_unMultigraph.is_trail.simps(1) \\<open>valid_unMultigraph G\\<close> singletonE\n                valid_unMultigraph.is_trail_split valid_unMultigraph.singleton_distinct_path)"], ["proof (state)\nthis:\n  e1 = e3\n\ngoal (1 subgoal):\n 1. edges G \\<noteq> {} \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  e1 = e3\n\ngoal (1 subgoal):\n 1. False", "by (metis e \\<open>valid_unMultigraph G\\<close> valid_unMultigraph.no_id)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  edges G = {}\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) = 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "hence \"valid_unMultigraph.is_Eulerian_circuit G v [] v\""], ["proof (prove)\nusing this:\n  edges G = {}\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.is_Eulerian_circuit G v [] v", "by (metis \\<open>nodes G = {v}\\<close> insert_subset \\<open>valid_unMultigraph G\\<close> rem_unPath.simps(1)\n            subsetI valid_unMultigraph.is_trail.simps(1)\n            valid_unMultigraph.is_Eulerian_circuit_def\n            valid_unMultigraph.is_Eulerian_trail_def)"], ["proof (state)\nthis:\n  valid_unMultigraph.is_Eulerian_circuit G v [] v\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) = 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "thus \"\\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v\""], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_Eulerian_circuit G v [] v\n\ngoal (1 subgoal):\n 1. \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v", "by auto"], ["proof (state)\nthis:\n  \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "assume \"v\\<in>nodes G\""], ["proof (state)\nthis:\n  v \\<in> nodes G\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "assume \"card (nodes G) \\<noteq> 1\""], ["proof (state)\nthis:\n  card (nodes G) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  card (nodes G) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have \"card (nodes G)\\<noteq>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (nodes G) \\<noteq> 0", "using \\<open>nodes G\\<noteq>{}\\<close>"], ["proof (prove)\nusing this:\n  nodes G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. card (nodes G) \\<noteq> 0", "by (metis card_eq_0_iff \\<open>finite (nodes G)\\<close>)"], ["proof (state)\nthis:\n  card (nodes G) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "ultimately"], ["proof (chain)\npicking this:\n  card (nodes G) \\<noteq> 1\n  card (nodes G) \\<noteq> 0", "have \"card (nodes G) \\<ge>2\""], ["proof (prove)\nusing this:\n  card (nodes G) \\<noteq> 1\n  card (nodes G) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (nodes G)", "by auto"], ["proof (state)\nthis:\n  2 \\<le> card (nodes G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "then"], ["proof (chain)\npicking this:\n  2 \\<le> card (nodes G)", "obtain n where \"card (nodes G) = Suc (Suc n)\""], ["proof (prove)\nusing this:\n  2 \\<le> card (nodes G)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        card (nodes G) = Suc (Suc n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis le_iff_add add_2_eq_Suc)"], ["proof (state)\nthis:\n  card (nodes G) = Suc (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "hence \"\\<exists>n\\<in>nodes G. n\\<noteq>v\""], ["proof (prove)\nusing this:\n  card (nodes G) = Suc (Suc n)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>nodes G. n \\<noteq> v", "by (auto dest!: card_eq_SucD)"], ["proof (state)\nthis:\n  \\<exists>n\\<in>nodes G. n \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>nodes G. n \\<noteq> v", "obtain v' w where \"(v,w,v')\\<in>edges G\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>nodes G. n \\<noteq> v\n\ngoal (1 subgoal):\n 1. (\\<And>w v'.\n        (v, w, v') \\<in> edges G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>w v'. (v, w, v') \\<in> edges G \\<Longrightarrow> thesis;\n     \\<exists>n\\<in>nodes G. n \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume pre:\"\\<And>w v'. (v, w, v') \\<in> edges G \\<Longrightarrow> thesis\""], ["proof (state)\nthis:\n  (v, ?w, ?v') \\<in> edges G \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>w v'. (v, w, v') \\<in> edges G \\<Longrightarrow> thesis;\n     \\<exists>n\\<in>nodes G. n \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"\\<exists>n\\<in>nodes G. n \\<noteq> v\""], ["proof (state)\nthis:\n  \\<exists>n\\<in>nodes G. n \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>w v'. (v, w, v') \\<in> edges G \\<Longrightarrow> thesis;\n     \\<exists>n\\<in>nodes G. n \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>nodes G. n \\<noteq> v", "obtain ps where  ps:\"\\<exists>v'. valid_graph.is_path G v ps v' \\<and> ps\\<noteq>Nil\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>nodes G. n \\<noteq> v\n\ngoal (1 subgoal):\n 1. (\\<And>ps.\n        \\<exists>v'.\n           valid_graph.is_path G v ps v' \\<and>\n           ps \\<noteq> [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>nodes G. n \\<noteq> v\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. (\\<And>ps.\n        \\<exists>v'.\n           valid_graph.is_path G v ps v' \\<and>\n           ps \\<noteq> [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) \\<open>v \\<in> nodes G\\<close> \\<open>valid_unMultigraph G\\<close> valid_graph.is_path.simps(1)\n              \\<open>valid_unMultigraph.connected G\\<close> valid_unMultigraph.connected_def)"], ["proof (state)\nthis:\n  \\<exists>v'. valid_graph.is_path G v ps v' \\<and> ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>w v'. (v, w, v') \\<in> edges G \\<Longrightarrow> thesis;\n     \\<exists>n\\<in>nodes G. n \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>v'. valid_graph.is_path G v ps v' \\<and> ps \\<noteq> []", "obtain v0 w v' where \"\\<exists>ps'. ps=Cons (v0,w,v') ps'\""], ["proof (prove)\nusing this:\n  \\<exists>v'. valid_graph.is_path G v ps v' \\<and> ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>v0 w v'.\n        \\<exists>ps'. ps = (v0, w, v') # ps' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis neq_Nil_conv prod_cases3)"], ["proof (state)\nthis:\n  \\<exists>ps'. ps = (v0, w, v') # ps'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>w v'. (v, w, v') \\<in> edges G \\<Longrightarrow> thesis;\n     \\<exists>n\\<in>nodes G. n \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"v0=v\""], ["proof (prove)\nusing this:\n  \\<exists>ps'. ps = (v0, w, v') # ps'\n\ngoal (1 subgoal):\n 1. v0 = v", "using valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  \\<exists>ps'. ps = (v0, w, v') # ps'\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. v0 = v", "by (metis \\<open>valid_unMultigraph G\\<close> ps valid_graph.is_path.simps(2))"], ["proof (state)\nthis:\n  v0 = v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>w v'. (v, w, v') \\<in> edges G \\<Longrightarrow> thesis;\n     \\<exists>n\\<in>nodes G. n \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"(v,w,v')\\<in>edges G\""], ["proof (prove)\nusing this:\n  v0 = v\n\ngoal (1 subgoal):\n 1. (v, w, v') \\<in> edges G", "using valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  v0 = v\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n\ngoal (1 subgoal):\n 1. (v, w, v') \\<in> edges G", "by (metis \\<open>\\<exists>ps'. ps = (v0, w, v') # ps'\\<close> \\<open>valid_unMultigraph G\\<close> ps\n              valid_graph.is_path.simps(2))"], ["proof (state)\nthis:\n  (v, w, v') \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>w v'. (v, w, v') \\<in> edges G \\<Longrightarrow> thesis;\n     \\<exists>n\\<in>nodes G. n \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  (v, w, v') \\<in> edges G\n\ngoal (1 subgoal):\n 1. thesis", "by (metis pre)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, w, v') \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have all_even:\"\\<forall>x\\<in>nodes G. even(degree x G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>nodes G. even (degree x G)", "using \\<open>finite (nodes G)\\<close> \\<open>num_of_odd_nodes G = 0\\<close>"], ["proof (prove)\nusing this:\n  finite (nodes G)\n  num_of_odd_nodes G = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>nodes G. even (degree x G)", "unfolding num_of_odd_nodes_def odd_nodes_set_def"], ["proof (prove)\nusing this:\n  finite (nodes G)\n  card {v \\<in> nodes G. odd (degree v G)} = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>nodes G. even (degree x G)", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>nodes G. even (degree x G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have odd_v: \"odd (degree v (del_unEdge v w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree v (del_unEdge v w v' G))", "using  \\<open>v \\<in> nodes G\\<close> all_even valid_unMultigraph.del_UnEdge_even[OF \\<open>valid_unMultigraph G\\<close>\n          \\<open>(v, w, v') \\<in> edges G\\<close> \\<open>finite (edges G)\\<close>]"], ["proof (prove)\nusing this:\n  v \\<in> nodes G\n  \\<forall>x\\<in>nodes G. even (degree x G)\n  (v \\<in> odd_nodes_set (del_unEdge v w v' G)) = even (degree v G)\n\ngoal (1 subgoal):\n 1. odd (degree v (del_unEdge v w v' G))", "unfolding odd_nodes_set_def"], ["proof (prove)\nusing this:\n  v \\<in> nodes G\n  \\<forall>x\\<in>nodes G. even (degree x G)\n  (v \\<in> {va \\<in> nodes (del_unEdge v w v' G).\n            odd (degree va (del_unEdge v w v' G))}) =\n  even (degree v G)\n\ngoal (1 subgoal):\n 1. odd (degree v (del_unEdge v w v' G))", "by auto"], ["proof (state)\nthis:\n  odd (degree v (del_unEdge v w v' G))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have odd_v':  \"odd (degree v' (del_unEdge v w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge v w v' G))", "using valid_unMultigraph.del_UnEdge_even'[OF \\<open>valid_unMultigraph G\\<close> \\<open>(v, w, v') \\<in> edges G\\<close>\n          \\<open>finite (edges G)\\<close>]\n            all_even  valid_graph.E_validD(2)[OF _ \\<open>(v, w, v') \\<in> edges G\\<close>]\n            \\<open>valid_unMultigraph G\\<close>"], ["proof (prove)\nusing this:\n  (v' \\<in> odd_nodes_set (del_unEdge v w v' G)) = even (degree v' G)\n  \\<forall>x\\<in>nodes G. even (degree x G)\n  valid_graph G \\<Longrightarrow> v' \\<in> nodes G\n  valid_unMultigraph G\n\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge v w v' G))", "unfolding valid_unMultigraph_def odd_nodes_set_def"], ["proof (prove)\nusing this:\n  (v' \\<in> {va \\<in> nodes (del_unEdge v w v' G).\n             odd (degree va (del_unEdge v w v' G))}) =\n  even (degree v' G)\n  \\<forall>x\\<in>nodes G. even (degree x G)\n  valid_graph G \\<Longrightarrow> v' \\<in> nodes G\n  valid_graph G \\<and> valid_unMultigraph_axioms G\n\ngoal (1 subgoal):\n 1. odd (degree v' (del_unEdge v w v' G))", "by auto"], ["proof (state)\nthis:\n  odd (degree v' (del_unEdge v w v' G))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have valid_unMulti:\"valid_unMultigraph (del_unEdge v w v' G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph (del_unEdge v w v' G)", "by (metis del_unEdge_valid \\<open>valid_unMultigraph G\\<close>)"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge v w v' G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  valid_unMultigraph (del_unEdge v w v' G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have valid_graph: \"valid_graph (del_unEdge v w v' G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (del_unEdge v w v' G)", "using valid_unMultigraph_def del_undirected"], ["proof (prove)\nusing this:\n  valid_unMultigraph ?G \\<equiv>\n  valid_graph ?G \\<and> valid_unMultigraph_axioms ?G\n  del_unEdge ?v ?e ?v' ?g = delete_edge ?v' ?e ?v (delete_edge ?v ?e ?v' ?g)\n\ngoal (1 subgoal):\n 1. valid_graph (del_unEdge v w v' G)", "by (metis \\<open>valid_unMultigraph G\\<close> delete_edge_valid)"], ["proof (state)\nthis:\n  valid_graph (del_unEdge v w v' G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  valid_graph (del_unEdge v w v' G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have fin_E': \"finite(edges (del_unEdge v w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges (del_unEdge v w v' G))", "using \\<open>finite(edges G)\\<close>"], ["proof (prove)\nusing this:\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. finite (edges (del_unEdge v w v' G))", "unfolding del_unEdge_def"], ["proof (prove)\nusing this:\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. finite\n     (edges\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(v, w, v'), (v', w, v)}\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  finite (edges (del_unEdge v w v' G))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  finite (edges (del_unEdge v w v' G))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have fin_V': \"finite(nodes (del_unEdge v w v' G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nodes (del_unEdge v w v' G))", "using \\<open>finite(nodes G)\\<close>"], ["proof (prove)\nusing this:\n  finite (nodes G)\n\ngoal (1 subgoal):\n 1. finite (nodes (del_unEdge v w v' G))", "unfolding del_unEdge_def"], ["proof (prove)\nusing this:\n  finite (nodes G)\n\ngoal (1 subgoal):\n 1. finite\n     (nodes\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(v, w, v'), (v', w, v)}\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  finite (nodes (del_unEdge v w v' G))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  finite (nodes (del_unEdge v w v' G))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have less_card:\"card(edges (del_unEdge v w v' G))<card(edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (edges (del_unEdge v w v' G)) < card (edges G)", "unfolding del_unEdge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     (edges\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(v, w, v'), (v', w, v)}\\<rparr>)\n    < card (edges G)", "using \\<open>(v,w,v')\\<in>edges G\\<close>"], ["proof (prove)\nusing this:\n  (v, w, v') \\<in> edges G\n\ngoal (1 subgoal):\n 1. card\n     (edges\n       \\<lparr>nodes = nodes G,\n          edges = edges G - {(v, w, v'), (v', w, v)}\\<rparr>)\n    < card (edges G)", "by (metis Diff_insert2 card_Diff2_less \\<open>finite (edges G)\\<close> \\<open>valid_unMultigraph G\\<close>\n          select_convs(2) valid_unMultigraph.corres)"], ["proof (state)\nthis:\n  card (edges (del_unEdge v w v' G)) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  card (edges (del_unEdge v w v' G)) < card (edges G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have \"num_of_odd_nodes (del_unEdge v w v' G) = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_of_odd_nodes (del_unEdge v w v' G) = 2", "using \\<open>valid_unMultigraph G\\<close> \\<open>num_of_odd_nodes G = 0\\<close> \\<open>v \\<in> nodes G\\<close> all_even\n          del_UnEdge_even_even[OF \\<open>valid_unMultigraph G\\<close>  \\<open>finite (edges G)\\<close> \\<open>finite (nodes G)\\<close>\n          \\<open>(v, w, v') \\<in> edges G\\<close>] valid_graph.E_validD(2)[OF _ \\<open>(v, w, v') \\<in> edges G\\<close>]"], ["proof (prove)\nusing this:\n  valid_unMultigraph G\n  num_of_odd_nodes G = 0\n  v \\<in> nodes G\n  \\<forall>x\\<in>nodes G. even (degree x G)\n  \\<lbrakk>even (degree v G); even (degree v' G)\\<rbrakk>\n  \\<Longrightarrow> num_of_odd_nodes (del_unEdge v w v' G) =\n                    num_of_odd_nodes G + 2\n  valid_graph G \\<Longrightarrow> v' \\<in> nodes G\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (del_unEdge v w v' G) = 2", "unfolding  valid_unMultigraph_def"], ["proof (prove)\nusing this:\n  valid_graph G \\<and> valid_unMultigraph_axioms G\n  num_of_odd_nodes G = 0\n  v \\<in> nodes G\n  \\<forall>x\\<in>nodes G. even (degree x G)\n  \\<lbrakk>even (degree v G); even (degree v' G)\\<rbrakk>\n  \\<Longrightarrow> num_of_odd_nodes (del_unEdge v w v' G) =\n                    num_of_odd_nodes G + 2\n  valid_graph G \\<Longrightarrow> v' \\<in> nodes G\n\ngoal (1 subgoal):\n 1. num_of_odd_nodes (del_unEdge v w v' G) = 2", "by auto"], ["proof (state)\nthis:\n  num_of_odd_nodes (del_unEdge v w v' G) = 2\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  num_of_odd_nodes (del_unEdge v w v' G) = 2\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have \"valid_unMultigraph.connected (del_unEdge v w v' G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_unMultigraph.connected (del_unEdge v w v' G)", "using \\<open>finite (edges G)\\<close> \\<open>finite (nodes G)\\<close> \\<open>valid_unMultigraph G\\<close>\n          \\<open>valid_unMultigraph.connected G\\<close>"], ["proof (prove)\nusing this:\n  finite (edges G)\n  finite (nodes G)\n  valid_unMultigraph G\n  valid_unMultigraph.connected G\n\ngoal (1 subgoal):\n 1. valid_unMultigraph.connected (del_unEdge v w v' G)", "by (metis \\<open>(v, w, v') \\<in> edges G\\<close> all_even valid_unMultigraph.del_unEdge_even_connectivity)"], ["proof (state)\nthis:\n  valid_unMultigraph.connected (del_unEdge v w v' G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  valid_unMultigraph.connected (del_unEdge v w v' G)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have \"nodes(del_unEdge v w v' G)\\<noteq>{}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (del_unEdge v w v' G) \\<noteq> {}", "by (metis \\<open>v \\<in> nodes G\\<close> del_UnEdge_node emptyE)"], ["proof (state)\nthis:\n  nodes (del_unEdge v w v' G) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "ultimately"], ["proof (chain)\npicking this:\n  valid_unMultigraph (del_unEdge v w v' G)\n  valid_graph (del_unEdge v w v' G)\n  finite (edges (del_unEdge v w v' G))\n  finite (nodes (del_unEdge v w v' G))\n  card (edges (del_unEdge v w v' G)) < card (edges G)\n  num_of_odd_nodes (del_unEdge v w v' G) = 2\n  valid_unMultigraph.connected (del_unEdge v w v' G)\n  nodes (del_unEdge v w v' G) \\<noteq> {}", "obtain n1 n2 ps where\n          n1_n2:\n          \"n1\\<in>nodes (del_unEdge v w v' G)\"\n          \"n2\\<in>nodes (del_unEdge v w v' G)\"\n          \"odd (degree n1 (del_unEdge v w v' G))\"\n          \"odd (degree n2 (del_unEdge v w v' G))\"\n          \"n1\\<noteq>n2\"\n          and\n          ps_eulerian:\n          \"valid_unMultigraph.is_Eulerian_trail (del_unEdge v w v' G) n1 ps n2\""], ["proof (prove)\nusing this:\n  valid_unMultigraph (del_unEdge v w v' G)\n  valid_graph (del_unEdge v w v' G)\n  finite (edges (del_unEdge v w v' G))\n  finite (nodes (del_unEdge v w v' G))\n  card (edges (del_unEdge v w v' G)) < card (edges G)\n  num_of_odd_nodes (del_unEdge v w v' G) = 2\n  valid_unMultigraph.connected (del_unEdge v w v' G)\n  nodes (del_unEdge v w v' G) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>n1 n2 ps.\n        \\<lbrakk>n1 \\<in> nodes (del_unEdge v w v' G);\n         n2 \\<in> nodes (del_unEdge v w v' G);\n         odd (degree n1 (del_unEdge v w v' G));\n         odd (degree n2 (del_unEdge v w v' G)); n1 \\<noteq> n2;\n         valid_unMultigraph.is_Eulerian_trail (del_unEdge v w v' G) n1 ps\n          n2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<open>num_of_odd_nodes (del_unEdge v w v' G) = 2\\<close> less.hyps(1))"], ["proof (state)\nthis:\n  n1 \\<in> nodes (del_unEdge v w v' G)\n  n2 \\<in> nodes (del_unEdge v w v' G)\n  odd (degree n1 (del_unEdge v w v' G))\n  odd (degree n2 (del_unEdge v w v' G))\n  n1 \\<noteq> n2\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v w v' G) n1 ps n2\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have \"n1=v\\<Longrightarrow>n2=v'\\<Longrightarrow>valid_unMultigraph.is_Eulerian_circuit G v (ps@[(v',w,v)]) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = v; n2 = v'\\<rbrakk>\n    \\<Longrightarrow> valid_unMultigraph.is_Eulerian_circuit G v\n                       (ps @ [(v', w, v)]) v", "using ps_eulerian"], ["proof (prove)\nusing this:\n  valid_unMultigraph.is_Eulerian_trail (del_unEdge v w v' G) n1 ps n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = v; n2 = v'\\<rbrakk>\n    \\<Longrightarrow> valid_unMultigraph.is_Eulerian_circuit G v\n                       (ps @ [(v', w, v)]) v", "by (metis \\<open>(v, w, v') \\<in> edges G\\<close> delete_edge_sym \\<open>valid_unMultigraph G\\<close>\n          valid_unMultigraph.corres valid_unMultigraph.eulerian_cons'\n          valid_unMultigraph.is_Eulerian_circuit_def)"], ["proof (state)\nthis:\n  \\<lbrakk>n1 = v; n2 = v'\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_Eulerian_circuit G v\n                     (ps @ [(v', w, v)]) v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>n1 = v; n2 = v'\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_Eulerian_circuit G v\n                     (ps @ [(v', w, v)]) v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have \"n1=v'\\<Longrightarrow>n2=v\\<Longrightarrow>\\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 = v'; n2 = v\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ps.\n                         valid_unMultigraph.is_Eulerian_circuit G v ps v", "by (metis \\<open>(v, w, v') \\<in> edges G\\<close> \\<open>valid_unMultigraph G\\<close> ps_eulerian\n          valid_unMultigraph.eulerian_cons valid_unMultigraph.is_Eulerian_circuit_def)"], ["proof (state)\nthis:\n  \\<lbrakk>n1 = v'; n2 = v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ps.\n                       valid_unMultigraph.is_Eulerian_circuit G v ps v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>n1 = v'; n2 = v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ps.\n                       valid_unMultigraph.is_Eulerian_circuit G v ps v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "have \"(n1=v\\<and>n2=v')\\<or>(n2=v\\<and>n1=v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 = v \\<and> n2 = v' \\<or> n2 = v \\<and> n1 = v'", "by (metis (mono_tags) all_even del_UnEdge_node insert_iff \\<open>finite (edges G)\\<close>\n          \\<open>valid_unMultigraph G\\<close> n1_n2(1) n1_n2(2) n1_n2(3) n1_n2(4) n1_n2(5) singletonE\n          valid_unMultigraph.degree_frame)"], ["proof (state)\nthis:\n  n1 = v \\<and> n2 = v' \\<or> n2 = v \\<and> n1 = v'\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> nodes G; card (nodes G) \\<noteq> 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ps.\n                            valid_unMultigraph.is_Eulerian_circuit G v ps v", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>n1 = v; n2 = v'\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_Eulerian_circuit G v\n                     (ps @ [(v', w, v)]) v\n  \\<lbrakk>n1 = v'; n2 = v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ps.\n                       valid_unMultigraph.is_Eulerian_circuit G v ps v\n  n1 = v \\<and> n2 = v' \\<or> n2 = v \\<and> n1 = v'", "show \"\\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n1 = v; n2 = v'\\<rbrakk>\n  \\<Longrightarrow> valid_unMultigraph.is_Eulerian_circuit G v\n                     (ps @ [(v', w, v)]) v\n  \\<lbrakk>n1 = v'; n2 = v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ps.\n                       valid_unMultigraph.is_Eulerian_circuit G v ps v\n  n1 = v \\<and> n2 = v' \\<or> n2 = v \\<and> n1 = v'\n\ngoal (1 subgoal):\n 1. \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v", "by auto"], ["proof (state)\nthis:\n  \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>v\\<in>nodes G.\n     \\<exists>ps. valid_unMultigraph.is_Eulerian_circuit G v ps v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}