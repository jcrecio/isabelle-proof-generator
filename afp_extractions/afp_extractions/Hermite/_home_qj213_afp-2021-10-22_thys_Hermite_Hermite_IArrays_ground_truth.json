{"file_name": "/home/qj213/afp-2021-10-22/thys/Hermite/Hermite_IArrays.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hermite", "problem_names": ["lemma matrix_to_iarray_Hermite_reduce_above:\n  fixes A::\"'a::{unique_euclidean_ring}^'cols::{mod_type}^'rows::{mod_type}\"\n  assumes \"n<nrows A\"\n  shows \"matrix_to_iarray (Hermite_reduce_above A n i j res) \n  = Hermite_reduce_above_iarrays (matrix_to_iarray A) n (to_nat i) (to_nat j) res\"", "lemma matrix_to_iarray_Hermite_of_row_i[code_unfold]:\n  fixes A::\"'a::{unique_euclidean_ring}^'cols::{mod_type}^'rows::{mod_type}\"\n  shows \"matrix_to_iarray (Hermite_of_row_i ass res A i) \n  = Hermite_of_row_i_iarray ass res (matrix_to_iarray A) (to_nat i)\"", "lemma matrix_to_iarray_Hermite_of_upt_row_i:\n  fixes A::\"'a::{unique_euclidean_ring}^'cols::{mod_type}^'rows::{mod_type}\"\n  assumes i: \"i\\<le>nrows A\"\n  shows \"matrix_to_iarray (Hermite_of_upt_row_i A i ass res) \n  = Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res\"", "lemma matrix_to_iarray_Hermite_of[code_unfold]:\n  shows \"matrix_to_iarray (Hermite_of A ass res bezout) \n  = Hermite_of_iarrays (matrix_to_iarray A) ass res bezout\""], "translations": [["", "lemma matrix_to_iarray_Hermite_reduce_above:\n  fixes A::\"'a::{unique_euclidean_ring}^'cols::{mod_type}^'rows::{mod_type}\"\n  assumes \"n<nrows A\"\n  shows \"matrix_to_iarray (Hermite_reduce_above A n i j res) \n  = Hermite_reduce_above_iarrays (matrix_to_iarray A) n (to_nat i) (to_nat j) res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_reduce_above A n i j res) =\n    Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n     (mod_type_class.to_nat i) (mod_type_class.to_nat j) res", "using assms"], ["proof (prove)\nusing this:\n  n < nrows A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_reduce_above A n i j res) =\n    Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n     (mod_type_class.to_nat i) (mod_type_class.to_nat j) res", "proof (induct n arbitrary: A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       0 < nrows A \\<Longrightarrow>\n       matrix_to_iarray (Hermite_reduce_above A 0 i j res) =\n       Hermite_reduce_above_iarrays (matrix_to_iarray A) 0\n        (mod_type_class.to_nat i) (mod_type_class.to_nat j) res\n 2. \\<And>n A.\n       \\<lbrakk>\\<And>A.\n                   n < nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_reduce_above A n i j res) =\n                   Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n                    (mod_type_class.to_nat i) (mod_type_class.to_nat j) res;\n        Suc n < nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_reduce_above A (Suc n) i j res) =\n                         Hermite_reduce_above_iarrays (matrix_to_iarray A)\n                          (Suc n) (mod_type_class.to_nat i)\n                          (mod_type_class.to_nat j) res", "case 0"], ["proof (state)\nthis:\n  0 < nrows A\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       0 < nrows A \\<Longrightarrow>\n       matrix_to_iarray (Hermite_reduce_above A 0 i j res) =\n       Hermite_reduce_above_iarrays (matrix_to_iarray A) 0\n        (mod_type_class.to_nat i) (mod_type_class.to_nat j) res\n 2. \\<And>n A.\n       \\<lbrakk>\\<And>A.\n                   n < nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_reduce_above A n i j res) =\n                   Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n                    (mod_type_class.to_nat i) (mod_type_class.to_nat j) res;\n        Suc n < nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_reduce_above A (Suc n) i j res) =\n                         Hermite_reduce_above_iarrays (matrix_to_iarray A)\n                          (Suc n) (mod_type_class.to_nat i)\n                          (mod_type_class.to_nat j) res", "thus ?case"], ["proof (prove)\nusing this:\n  0 < nrows A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_reduce_above A 0 i j res) =\n    Hermite_reduce_above_iarrays (matrix_to_iarray A) 0\n     (mod_type_class.to_nat i) (mod_type_class.to_nat j) res", "by auto"], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_reduce_above A 0 i j res) =\n  Hermite_reduce_above_iarrays (matrix_to_iarray A) 0\n   (mod_type_class.to_nat i) (mod_type_class.to_nat j) res\n\ngoal (1 subgoal):\n 1. \\<And>n A.\n       \\<lbrakk>\\<And>A.\n                   n < nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_reduce_above A n i j res) =\n                   Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n                    (mod_type_class.to_nat i) (mod_type_class.to_nat j) res;\n        Suc n < nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_reduce_above A (Suc n) i j res) =\n                         Hermite_reduce_above_iarrays (matrix_to_iarray A)\n                          (Suc n) (mod_type_class.to_nat i)\n                          (mod_type_class.to_nat j) res", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n A.\n       \\<lbrakk>\\<And>A.\n                   n < nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_reduce_above A n i j res) =\n                   Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n                    (mod_type_class.to_nat i) (mod_type_class.to_nat j) res;\n        Suc n < nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_reduce_above A (Suc n) i j res) =\n                         Hermite_reduce_above_iarrays (matrix_to_iarray A)\n                          (Suc n) (mod_type_class.to_nat i)\n                          (mod_type_class.to_nat j) res", "case (Suc n)"], ["proof (state)\nthis:\n  n < nrows ?A \\<Longrightarrow>\n  matrix_to_iarray (Hermite_reduce_above ?A n i j res) =\n  Hermite_reduce_above_iarrays (matrix_to_iarray ?A) n\n   (mod_type_class.to_nat i) (mod_type_class.to_nat j) res\n  Suc n < nrows A\n\ngoal (1 subgoal):\n 1. \\<And>n A.\n       \\<lbrakk>\\<And>A.\n                   n < nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_reduce_above A n i j res) =\n                   Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n                    (mod_type_class.to_nat i) (mod_type_class.to_nat j) res;\n        Suc n < nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_reduce_above A (Suc n) i j res) =\n                         Hermite_reduce_above_iarrays (matrix_to_iarray A)\n                          (Suc n) (mod_type_class.to_nat i)\n                          (mod_type_class.to_nat j) res", "have n: \"n<nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < nrows A", "using Suc.prems"], ["proof (prove)\nusing this:\n  Suc n < nrows A\n\ngoal (1 subgoal):\n 1. n < nrows A", "unfolding nrows_def"], ["proof (prove)\nusing this:\n  Suc n < CARD('rows)\n\ngoal (1 subgoal):\n 1. n < CARD('rows)", "by simp"], ["proof (state)\nthis:\n  n < nrows A\n\ngoal (1 subgoal):\n 1. \\<And>n A.\n       \\<lbrakk>\\<And>A.\n                   n < nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_reduce_above A n i j res) =\n                   Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n                    (mod_type_class.to_nat i) (mod_type_class.to_nat j) res;\n        Suc n < nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_reduce_above A (Suc n) i j res) =\n                         Hermite_reduce_above_iarrays (matrix_to_iarray A)\n                          (Suc n) (mod_type_class.to_nat i)\n                          (mod_type_class.to_nat j) res", "obtain a::'rows where n_tna: \"n = to_nat a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        n = mod_type_class.to_nat a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Suc.prems Suc_lessD nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  n = mod_type_class.to_nat a\n\ngoal (1 subgoal):\n 1. \\<And>n A.\n       \\<lbrakk>\\<And>A.\n                   n < nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_reduce_above A n i j res) =\n                   Hermite_reduce_above_iarrays (matrix_to_iarray A) n\n                    (mod_type_class.to_nat i) (mod_type_class.to_nat j) res;\n        Suc n < nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_reduce_above A (Suc n) i j res) =\n                         Hermite_reduce_above_iarrays (matrix_to_iarray A)\n                          (Suc n) (mod_type_class.to_nat i)\n                          (mod_type_class.to_nat j) res", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_reduce_above A (Suc n) i j res) =\n    Hermite_reduce_above_iarrays (matrix_to_iarray A) (Suc n)\n     (mod_type_class.to_nat i) (mod_type_class.to_nat j) res", "unfolding Hermite_reduce_above.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (let i' = mod_type_class.from_nat n; Aij = A $ i $ j; Ai'j = A $ i' $ j\n      in Hermite_reduce_above\n          (row_add A i' i ((res Aij Ai'j - Ai'j) div Aij)) n i j res) =\n    Hermite_reduce_above_iarrays (matrix_to_iarray A) (Suc n)\n     (mod_type_class.to_nat i) (mod_type_class.to_nat j) res", "unfolding Hermite_reduce_above_iarrays.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (let i' = mod_type_class.from_nat n; Aij = A $ i $ j; Ai'j = A $ i' $ j\n      in Hermite_reduce_above\n          (row_add A i' i ((res Aij Ai'j - Ai'j) div Aij)) n i j res) =\n    (let i' = n;\n         Aij =\n           matrix_to_iarray A !! mod_type_class.to_nat i !!\n           mod_type_class.to_nat j;\n         Ai'j = matrix_to_iarray A !! i' !! mod_type_class.to_nat j\n     in Hermite_reduce_above_iarrays\n         (row_add_iarray (matrix_to_iarray A) i' (mod_type_class.to_nat i)\n           ((res Aij Ai'j - Ai'j) div Aij))\n         n (mod_type_class.to_nat i) (mod_type_class.to_nat j) res)", "unfolding Let_def sub_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (Hermite_reduce_above\n       (row_add A (mod_type_class.from_nat n) i\n         ((res (A $ i $ j) (A $ mod_type_class.from_nat n $ j) -\n           A $ mod_type_class.from_nat n $ j) div\n          A $ i $ j))\n       n i j res) =\n    Hermite_reduce_above_iarrays\n     (row_add_iarray (matrix_to_iarray A) n (mod_type_class.to_nat i)\n       ((res (matrix_to_iarray A !! mod_type_class.to_nat i !!\n              mod_type_class.to_nat j)\n          (matrix_to_iarray A !! n !! mod_type_class.to_nat j) -\n         matrix_to_iarray A !! n !! mod_type_class.to_nat j) div\n        matrix_to_iarray A !! mod_type_class.to_nat i !!\n        mod_type_class.to_nat j))\n     n (mod_type_class.to_nat i) (mod_type_class.to_nat j) res", "unfolding n_tna"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (Hermite_reduce_above\n       (row_add A (mod_type_class.from_nat (mod_type_class.to_nat a)) i\n         ((res (A $ i $ j)\n            (A $ mod_type_class.from_nat (mod_type_class.to_nat a) $ j) -\n           A $ mod_type_class.from_nat (mod_type_class.to_nat a) $ j) div\n          A $ i $ j))\n       (mod_type_class.to_nat a) i j res) =\n    Hermite_reduce_above_iarrays\n     (row_add_iarray (matrix_to_iarray A) (mod_type_class.to_nat a)\n       (mod_type_class.to_nat i)\n       ((res (matrix_to_iarray A !! mod_type_class.to_nat i !!\n              mod_type_class.to_nat j)\n          (matrix_to_iarray A !! mod_type_class.to_nat a !!\n           mod_type_class.to_nat j) -\n         matrix_to_iarray A !! mod_type_class.to_nat a !!\n         mod_type_class.to_nat j) div\n        matrix_to_iarray A !! mod_type_class.to_nat i !!\n        mod_type_class.to_nat j))\n     (mod_type_class.to_nat a) (mod_type_class.to_nat i)\n     (mod_type_class.to_nat j) res", "unfolding matrix_to_iarray_row_add[symmetric] from_nat_to_nat_id"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (Hermite_reduce_above\n       (row_add A a i\n         ((res (A $ i $ j) (A $ a $ j) - A $ a $ j) div A $ i $ j))\n       (mod_type_class.to_nat a) i j res) =\n    Hermite_reduce_above_iarrays\n     (matrix_to_iarray\n       (row_add A a i\n         ((res (matrix_to_iarray A !! mod_type_class.to_nat i !!\n                mod_type_class.to_nat j)\n            (matrix_to_iarray A !! mod_type_class.to_nat a !!\n             mod_type_class.to_nat j) -\n           matrix_to_iarray A !! mod_type_class.to_nat a !!\n           mod_type_class.to_nat j) div\n          matrix_to_iarray A !! mod_type_class.to_nat i !!\n          mod_type_class.to_nat j)))\n     (mod_type_class.to_nat a) (mod_type_class.to_nat i)\n     (mod_type_class.to_nat j) res", "unfolding matrix_to_iarray_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (Hermite_reduce_above\n       (row_add A a i\n         ((res (A $ i $ j) (A $ a $ j) - A $ a $ j) div A $ i $ j))\n       (mod_type_class.to_nat a) i j res) =\n    Hermite_reduce_above_iarrays\n     (matrix_to_iarray\n       (row_add A a i\n         ((res (A $ i $ j) (A $ a $ j) - A $ a $ j) div A $ i $ j)))\n     (mod_type_class.to_nat a) (mod_type_class.to_nat i)\n     (mod_type_class.to_nat j) res", "unfolding n_tna[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (Hermite_reduce_above\n       (row_add A a i\n         ((res (A $ i $ j) (A $ a $ j) - A $ a $ j) div A $ i $ j))\n       n i j res) =\n    Hermite_reduce_above_iarrays\n     (matrix_to_iarray\n       (row_add A a i\n         ((res (A $ i $ j) (A $ a $ j) - A $ a $ j) div A $ i $ j)))\n     n (mod_type_class.to_nat i) (mod_type_class.to_nat j) res", "by (rule Suc.hyps, auto simp add: nrows_def n[unfolded nrows_def])"], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_reduce_above A (Suc n) i j res) =\n  Hermite_reduce_above_iarrays (matrix_to_iarray A) (Suc n)\n   (mod_type_class.to_nat i) (mod_type_class.to_nat j) res\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_to_iarray_Hermite_of_row_i[code_unfold]:\n  fixes A::\"'a::{unique_euclidean_ring}^'cols::{mod_type}^'rows::{mod_type}\"\n  shows \"matrix_to_iarray (Hermite_of_row_i ass res A i) \n  = Hermite_of_row_i_iarray ass res (matrix_to_iarray A) (to_nat i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "have zero_rw: \"is_zero_iarray (matrix_to_iarray A !! to_nat i) = is_zero_row i A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i) =\n    is_zero_row i A", "by (simp add: is_zero_iarray_eq_iff is_zero_row_eq_row_zero vec_to_iarray_row')"], ["proof (state)\nthis:\n  is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i) =\n  is_zero_row i A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "proof (cases \"is_zero_row i A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)\n 2. \\<not> is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "case True"], ["proof (state)\nthis:\n  is_zero_row i A\n\ngoal (2 subgoals):\n 1. is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)\n 2. \\<not> is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_zero_row i A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "unfolding Hermite_of_row_i_def Hermite_of_row_i_iarray_def Let_def zero_rw"], ["proof (prove)\nusing this:\n  is_zero_row i A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (if is_zero_row i A then A\n      else Hermite_reduce_above\n            (mult_row A i\n              (ass (A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))) div\n               A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))))\n            (mod_type_class.to_nat i) i\n            (LEAST n. A $ i $ n \\<noteq> (0::'a)) res) =\n    (if is_zero_row i A then matrix_to_iarray A\n     else Hermite_reduce_above_iarrays\n           (mult_row_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n             (ass (matrix_to_iarray A !! mod_type_class.to_nat i !!\n                   least_non_zero_position_of_vector\n                    (matrix_to_iarray A !! mod_type_class.to_nat i)) div\n              matrix_to_iarray A !! mod_type_class.to_nat i !!\n              least_non_zero_position_of_vector\n               (matrix_to_iarray A !! mod_type_class.to_nat i)))\n           (mod_type_class.to_nat i) (mod_type_class.to_nat i)\n           (least_non_zero_position_of_vector\n             (matrix_to_iarray A !! mod_type_class.to_nat i))\n           res)", "by auto"], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_of_row_i ass res A i) =\n  Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n   (mod_type_class.to_nat i)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "case False"], ["proof (state)\nthis:\n  \\<not> is_zero_row i A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "have Ain: \"A $ i $ (LEAST n. A $ i $ n \\<noteq> 0) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) \\<noteq> (0::'a)", "using False"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row i A\n\ngoal (1 subgoal):\n 1. A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) \\<noteq> (0::'a)", "by (metis (mono_tags, lifting) LeastI is_zero_row_def')"], ["proof (state)\nthis:\n  A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "have l: \"least_non_zero_position_of_vector (matrix_to_iarray A !! to_nat i) = to_nat (LEAST n. A $ i $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least_non_zero_position_of_vector\n     (matrix_to_iarray A !! mod_type_class.to_nat i) =\n    mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. least_non_zero_position_of_vector\n     (matrix_to_iarray A !! mod_type_class.to_nat i) =\n    mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))", "have least_rw: \" (LEAST n. A $ i $ n \\<noteq> 0 \\<and> 0 \\<le> n) =  (LEAST n. A $ i $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ i $ n \\<noteq> (0::'a) \\<and> (0::'cols) \\<le> n) =\n    (LEAST n. A $ i $ n \\<noteq> (0::'a))", "by (rule Least_equality, auto simp add: least_mod_type Ain Least_le)"], ["proof (state)\nthis:\n  (LEAST n. A $ i $ n \\<noteq> (0::'a) \\<and> (0::'cols) \\<le> n) =\n  (LEAST n. A $ i $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. least_non_zero_position_of_vector\n     (matrix_to_iarray A !! mod_type_class.to_nat i) =\n    mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))", "have v_rw: \"\\<not> vector_all_zero_from_index (to_nat (0::'cols), vec_to_iarray (A $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> vector_all_zero_from_index\n            (mod_type_class.to_nat (0::'cols), vec_to_iarray (A $ i))", "using False least_mod_type"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row i A\n  (0::?'a) \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<not> vector_all_zero_from_index\n            (mod_type_class.to_nat (0::'cols), vec_to_iarray (A $ i))", "unfolding vector_all_zero_from_index_eq[of 0 \"A$i\", symmetric] is_zero_row_def'"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>j. A $ i $ j = (0::'a))\n  (0::?'a) \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<ge>0::'cols. A $ i $ m = (0::'a))", "by auto"], ["proof (state)\nthis:\n  \\<not> vector_all_zero_from_index\n          (mod_type_class.to_nat (0::'cols), vec_to_iarray (A $ i))\n\ngoal (1 subgoal):\n 1. least_non_zero_position_of_vector\n     (matrix_to_iarray A !! mod_type_class.to_nat i) =\n    mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. least_non_zero_position_of_vector\n     (matrix_to_iarray A !! mod_type_class.to_nat i) =\n    mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))", "using vec_to_iarray_least_non_zero_position_of_vector_from_index[OF v_rw]"], ["proof (prove)\nusing this:\n  least_non_zero_position_of_vector_from_index (vec_to_iarray (A $ i))\n   (mod_type_class.to_nat (0::'cols)) =\n  mod_type_class.to_nat\n   (LEAST n. A $ i $ n \\<noteq> (0::'a) \\<and> (0::'cols) \\<le> n)\n\ngoal (1 subgoal):\n 1. least_non_zero_position_of_vector\n     (matrix_to_iarray A !! mod_type_class.to_nat i) =\n    mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))", "unfolding least_rw least_non_zero_position_of_vector_def to_nat_0 vec_matrix"], ["proof (prove)\nusing this:\n  least_non_zero_position_of_vector_from_index\n   (matrix_to_iarray A !! mod_type_class.to_nat i) 0 =\n  mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. least_non_zero_position_of_vector_from_index\n     (matrix_to_iarray A !! mod_type_class.to_nat i) 0 =\n    mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))", "."], ["proof (state)\nthis:\n  least_non_zero_position_of_vector\n   (matrix_to_iarray A !! mod_type_class.to_nat i) =\n  mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  least_non_zero_position_of_vector\n   (matrix_to_iarray A !! mod_type_class.to_nat i) =\n  mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A \\<Longrightarrow>\n    matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_row_i ass res A i) =\n    Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n     (mod_type_class.to_nat i)", "unfolding Hermite_of_row_i_def Hermite_of_row_i_iarray_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (if is_zero_row i A then A\n      else Hermite_reduce_above\n            (mult_row A i\n              (ass (A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))) div\n               A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))))\n            (mod_type_class.to_nat i) i\n            (LEAST n. A $ i $ n \\<noteq> (0::'a)) res) =\n    (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n     then matrix_to_iarray A\n     else Hermite_reduce_above_iarrays\n           (mult_row_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n             (ass (matrix_to_iarray A !! mod_type_class.to_nat i !!\n                   least_non_zero_position_of_vector\n                    (matrix_to_iarray A !! mod_type_class.to_nat i)) div\n              matrix_to_iarray A !! mod_type_class.to_nat i !!\n              least_non_zero_position_of_vector\n               (matrix_to_iarray A !! mod_type_class.to_nat i)))\n           (mod_type_class.to_nat i) (mod_type_class.to_nat i)\n           (least_non_zero_position_of_vector\n             (matrix_to_iarray A !! mod_type_class.to_nat i))\n           res)", "unfolding zero_rw[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n      then A\n      else Hermite_reduce_above\n            (mult_row A i\n              (ass (A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))) div\n               A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))))\n            (mod_type_class.to_nat i) i\n            (LEAST n. A $ i $ n \\<noteq> (0::'a)) res) =\n    (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n     then matrix_to_iarray A\n     else Hermite_reduce_above_iarrays\n           (mult_row_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n             (ass (matrix_to_iarray A !! mod_type_class.to_nat i !!\n                   least_non_zero_position_of_vector\n                    (matrix_to_iarray A !! mod_type_class.to_nat i)) div\n              matrix_to_iarray A !! mod_type_class.to_nat i !!\n              least_non_zero_position_of_vector\n               (matrix_to_iarray A !! mod_type_class.to_nat i)))\n           (mod_type_class.to_nat i) (mod_type_class.to_nat i)\n           (least_non_zero_position_of_vector\n             (matrix_to_iarray A !! mod_type_class.to_nat i))\n           res)", "unfolding matrix_to_iarray_mult_row[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n      then A\n      else Hermite_reduce_above\n            (mult_row A i\n              (ass (A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))) div\n               A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))))\n            (mod_type_class.to_nat i) i\n            (LEAST n. A $ i $ n \\<noteq> (0::'a)) res) =\n    (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n     then matrix_to_iarray A\n     else Hermite_reduce_above_iarrays\n           (matrix_to_iarray\n             (mult_row A i\n               (ass (matrix_to_iarray A !! mod_type_class.to_nat i !!\n                     least_non_zero_position_of_vector\n                      (matrix_to_iarray A !! mod_type_class.to_nat i)) div\n                matrix_to_iarray A !! mod_type_class.to_nat i !!\n                least_non_zero_position_of_vector\n                 (matrix_to_iarray A !! mod_type_class.to_nat i))))\n           (mod_type_class.to_nat i) (mod_type_class.to_nat i)\n           (least_non_zero_position_of_vector\n             (matrix_to_iarray A !! mod_type_class.to_nat i))\n           res)", "unfolding l"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n      then A\n      else Hermite_reduce_above\n            (mult_row A i\n              (ass (A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))) div\n               A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))))\n            (mod_type_class.to_nat i) i\n            (LEAST n. A $ i $ n \\<noteq> (0::'a)) res) =\n    (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n     then matrix_to_iarray A\n     else Hermite_reduce_above_iarrays\n           (matrix_to_iarray\n             (mult_row A i\n               (ass (matrix_to_iarray A !! mod_type_class.to_nat i !!\n                     mod_type_class.to_nat\n                      (LEAST n. A $ i $ n \\<noteq> (0::'a))) div\n                matrix_to_iarray A !! mod_type_class.to_nat i !!\n                mod_type_class.to_nat\n                 (LEAST n. A $ i $ n \\<noteq> (0::'a)))))\n           (mod_type_class.to_nat i) (mod_type_class.to_nat i)\n           (mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a)))\n           res)", "unfolding matrix_to_iarray_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n      then A\n      else Hermite_reduce_above\n            (mult_row A i\n              (ass (A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))) div\n               A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))))\n            (mod_type_class.to_nat i) i\n            (LEAST n. A $ i $ n \\<noteq> (0::'a)) res) =\n    (if is_zero_iarray (matrix_to_iarray A !! mod_type_class.to_nat i)\n     then matrix_to_iarray A\n     else Hermite_reduce_above_iarrays\n           (matrix_to_iarray\n             (mult_row A i\n               (ass (A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a))) div\n                A $ i $ (LEAST n. A $ i $ n \\<noteq> (0::'a)))))\n           (mod_type_class.to_nat i) (mod_type_class.to_nat i)\n           (mod_type_class.to_nat (LEAST n. A $ i $ n \\<noteq> (0::'a)))\n           res)", "by (auto, rule matrix_to_iarray_Hermite_reduce_above, simp add: nrows_def to_nat_less_card)"], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_of_row_i ass res A i) =\n  Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n   (mod_type_class.to_nat i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_of_row_i ass res A i) =\n  Hermite_of_row_i_iarray ass res (matrix_to_iarray A)\n   (mod_type_class.to_nat i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_to_iarray_Hermite_of_upt_row_i:\n  fixes A::\"'a::{unique_euclidean_ring}^'cols::{mod_type}^'rows::{mod_type}\"\n  assumes i: \"i\\<le>nrows A\"\n  shows \"matrix_to_iarray (Hermite_of_upt_row_i A i ass res) \n  = Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n    Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res", "using i"], ["proof (prove)\nusing this:\n  i \\<le> nrows A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n    Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res", "proof (induct i arbitrary: A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       0 \\<le> nrows A \\<Longrightarrow>\n       matrix_to_iarray (Hermite_of_upt_row_i A 0 ass res) =\n       Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) 0 ass res\n 2. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "case 0"], ["proof (state)\nthis:\n  0 \\<le> nrows A\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       0 \\<le> nrows A \\<Longrightarrow>\n       matrix_to_iarray (Hermite_of_upt_row_i A 0 ass res) =\n       Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) 0 ass res\n 2. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "thus ?case"], ["proof (prove)\nusing this:\n  0 \\<le> nrows A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_upt_row_i A 0 ass res) =\n    Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) 0 ass res", "by (simp add: Hermite_of_upt_row_i_def Hermite_of_upt_row_i_iarrays_def)"], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_of_upt_row_i A 0 ass res) =\n  Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) 0 ass res\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "case (Suc i)"], ["proof (state)\nthis:\n  i \\<le> nrows ?A \\<Longrightarrow>\n  matrix_to_iarray (Hermite_of_upt_row_i ?A i ass res) =\n  Hermite_of_upt_row_i_iarrays (matrix_to_iarray ?A) i ass res\n  Suc i \\<le> nrows A\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "have i: \"i<nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < nrows A", "using Suc.prems"], ["proof (prove)\nusing this:\n  Suc i \\<le> nrows A\n\ngoal (1 subgoal):\n 1. i < nrows A", "unfolding nrows_def"], ["proof (prove)\nusing this:\n  Suc i \\<le> CARD('rows)\n\ngoal (1 subgoal):\n 1. i < CARD('rows)", "by simp"], ["proof (state)\nthis:\n  i < nrows A\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "have \"matrix_to_iarray (Hermite_of_upt_row_i A (Suc i) ass res) \n    = matrix_to_iarray (Hermite_of_row_i ass res (Hermite_of_upt_row_i A i ass res) (from_nat i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_upt_row_i A (Suc i) ass res) =\n    matrix_to_iarray\n     (Hermite_of_row_i ass res (Hermite_of_upt_row_i A i ass res)\n       (mod_type_class.from_nat i))", "unfolding Hermite_of_upt_row_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (foldl (Hermite_of_row_i ass res) A\n       (map mod_type_class.from_nat [0..<Suc i])) =\n    matrix_to_iarray\n     (Hermite_of_row_i ass res\n       (foldl (Hermite_of_row_i ass res) A\n         (map mod_type_class.from_nat [0..<i]))\n       (mod_type_class.from_nat i))", "by auto"], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_of_upt_row_i A (Suc i) ass res) =\n  matrix_to_iarray\n   (Hermite_of_row_i ass res (Hermite_of_upt_row_i A i ass res)\n     (mod_type_class.from_nat i))\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "also"], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_of_upt_row_i A (Suc i) ass res) =\n  matrix_to_iarray\n   (Hermite_of_row_i ass res (Hermite_of_upt_row_i A i ass res)\n     (mod_type_class.from_nat i))\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "have \"... = (Hermite_of_row_i_iarray ass res \n    (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) (to_nat (from_nat i::'rows)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (Hermite_of_row_i ass res (Hermite_of_upt_row_i A i ass res)\n       (mod_type_class.from_nat i)) =\n    Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n     (mod_type_class.to_nat (mod_type_class.from_nat i))", "unfolding matrix_to_iarray_Hermite_of_row_i"], ["proof (prove)\ngoal (1 subgoal):\n 1. Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n     (mod_type_class.to_nat (mod_type_class.from_nat i)) =\n    Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n     (mod_type_class.to_nat (mod_type_class.from_nat i))", ".."], ["proof (state)\nthis:\n  matrix_to_iarray\n   (Hermite_of_row_i ass res (Hermite_of_upt_row_i A i ass res)\n     (mod_type_class.from_nat i)) =\n  Hermite_of_row_i_iarray ass res\n   (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n   (mod_type_class.to_nat (mod_type_class.from_nat i))\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "also"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (Hermite_of_row_i ass res (Hermite_of_upt_row_i A i ass res)\n     (mod_type_class.from_nat i)) =\n  Hermite_of_row_i_iarray ass res\n   (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n   (mod_type_class.to_nat (mod_type_class.from_nat i))\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "have \"... = (Hermite_of_row_i_iarray ass res (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n     (mod_type_class.to_nat (mod_type_class.from_nat i)) =\n    Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i", "using to_nat_from_nat_id[OF i[unfolded nrows_def]]"], ["proof (prove)\nusing this:\n  mod_type_class.to_nat (mod_type_class.from_nat i) = i\n\ngoal (1 subgoal):\n 1. Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n     (mod_type_class.to_nat (mod_type_class.from_nat i)) =\n    Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i", "by simp"], ["proof (state)\nthis:\n  Hermite_of_row_i_iarray ass res\n   (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n   (mod_type_class.to_nat (mod_type_class.from_nat i)) =\n  Hermite_of_row_i_iarray ass res\n   (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "also"], ["proof (state)\nthis:\n  Hermite_of_row_i_iarray ass res\n   (matrix_to_iarray (Hermite_of_upt_row_i A i ass res))\n   (mod_type_class.to_nat (mod_type_class.from_nat i)) =\n  Hermite_of_row_i_iarray ass res\n   (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "have \"... = (Hermite_of_row_i_iarray ass res \n    (Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i =\n    Hermite_of_row_i_iarray ass res\n     (Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res) i", "using Suc.hyps i"], ["proof (prove)\nusing this:\n  i \\<le> nrows ?A \\<Longrightarrow>\n  matrix_to_iarray (Hermite_of_upt_row_i ?A i ass res) =\n  Hermite_of_upt_row_i_iarrays (matrix_to_iarray ?A) i ass res\n  i < nrows A\n\ngoal (1 subgoal):\n 1. Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i =\n    Hermite_of_row_i_iarray ass res\n     (Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res) i", "unfolding nrows_def"], ["proof (prove)\nusing this:\n  i \\<le> CARD('rows) \\<Longrightarrow>\n  matrix_to_iarray (Hermite_of_upt_row_i ?A i ass res) =\n  Hermite_of_upt_row_i_iarrays (matrix_to_iarray ?A) i ass res\n  i < CARD('rows)\n\ngoal (1 subgoal):\n 1. Hermite_of_row_i_iarray ass res\n     (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i =\n    Hermite_of_row_i_iarray ass res\n     (Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res) i", "by simp"], ["proof (state)\nthis:\n  Hermite_of_row_i_iarray ass res\n   (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i =\n  Hermite_of_row_i_iarray ass res\n   (Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res) i\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "also"], ["proof (state)\nthis:\n  Hermite_of_row_i_iarray ass res\n   (matrix_to_iarray (Hermite_of_upt_row_i A i ass res)) i =\n  Hermite_of_row_i_iarray ass res\n   (Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res) i\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "have \"... =  Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) (Suc i) ass res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hermite_of_row_i_iarray ass res\n     (Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res) i =\n    Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) (Suc i) ass res", "unfolding Hermite_of_upt_row_i_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Hermite_of_row_i_iarray ass res\n     (foldl (Hermite_of_row_i_iarray ass res) (matrix_to_iarray A) [0..<i])\n     i =\n    foldl (Hermite_of_row_i_iarray ass res) (matrix_to_iarray A) [0..<Suc i]", "by simp"], ["proof (state)\nthis:\n  Hermite_of_row_i_iarray ass res\n   (Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass res) i =\n  Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) (Suc i) ass res\n\ngoal (1 subgoal):\n 1. \\<And>i A.\n       \\<lbrakk>\\<And>A.\n                   i \\<le> nrows A \\<Longrightarrow>\n                   matrix_to_iarray (Hermite_of_upt_row_i A i ass res) =\n                   Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) i ass\n                    res;\n        Suc i \\<le> nrows A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (Hermite_of_upt_row_i A (Suc i) ass res) =\n                         Hermite_of_upt_row_i_iarrays (matrix_to_iarray A)\n                          (Suc i) ass res", "finally"], ["proof (chain)\npicking this:\n  matrix_to_iarray (Hermite_of_upt_row_i A (Suc i) ass res) =\n  Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) (Suc i) ass res", "show ?case"], ["proof (prove)\nusing this:\n  matrix_to_iarray (Hermite_of_upt_row_i A (Suc i) ass res) =\n  Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) (Suc i) ass res\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of_upt_row_i A (Suc i) ass res) =\n    Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) (Suc i) ass res", "."], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_of_upt_row_i A (Suc i) ass res) =\n  Hermite_of_upt_row_i_iarrays (matrix_to_iarray A) (Suc i) ass res\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_to_iarray_Hermite_of[code_unfold]:\n  shows \"matrix_to_iarray (Hermite_of A ass res bezout) \n  = Hermite_of_iarrays (matrix_to_iarray A) ass res bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of A ass res bezout) =\n    Hermite_of_iarrays (matrix_to_iarray A) ass res bezout", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of A ass res bezout) =\n    Hermite_of_iarrays (matrix_to_iarray A) ass res bezout", "have n: \"nrows A \\<le> nrows (echelon_form_of A bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows A \\<le> nrows (echelon_form_of A bezout)", "unfolding nrows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('c) \\<le> CARD('c)", "by simp"], ["proof (state)\nthis:\n  nrows A \\<le> nrows (echelon_form_of A bezout)\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of A ass res bezout) =\n    Hermite_of_iarrays (matrix_to_iarray A) ass res bezout", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Hermite_of A ass res bezout) =\n    Hermite_of_iarrays (matrix_to_iarray A) ass res bezout", "unfolding Hermite_of_def Hermite_of_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (Hermite_of_upt_row_i (echelon_form_of A bezout) (nrows A) ass res) =\n    Hermite_of_upt_row_i_iarrays\n     (echelon_form_of_iarrays (matrix_to_iarray A) bezout)\n     (nrows_iarray (matrix_to_iarray A)) ass res", "unfolding matrix_to_iarray_Hermite_of_upt_row_i[OF n]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Hermite_of_upt_row_i_iarrays\n     (matrix_to_iarray (echelon_form_of A bezout)) (nrows A) ass res =\n    Hermite_of_upt_row_i_iarrays\n     (echelon_form_of_iarrays (matrix_to_iarray A) bezout)\n     (nrows_iarray (matrix_to_iarray A)) ass res", "unfolding matrix_to_iarray_echelon_form_of"], ["proof (prove)\ngoal (1 subgoal):\n 1. Hermite_of_upt_row_i_iarrays\n     (echelon_form_of_iarrays (matrix_to_iarray A) bezout) (nrows A) ass\n     res =\n    Hermite_of_upt_row_i_iarrays\n     (echelon_form_of_iarrays (matrix_to_iarray A) bezout)\n     (nrows_iarray (matrix_to_iarray A)) ass res", "unfolding matrix_to_iarray_nrows"], ["proof (prove)\ngoal (1 subgoal):\n 1. Hermite_of_upt_row_i_iarrays\n     (echelon_form_of_iarrays (matrix_to_iarray A) bezout)\n     (nrows_iarray (matrix_to_iarray A)) ass res =\n    Hermite_of_upt_row_i_iarrays\n     (echelon_form_of_iarrays (matrix_to_iarray A) bezout)\n     (nrows_iarray (matrix_to_iarray A)) ass res", ".."], ["proof (state)\nthis:\n  matrix_to_iarray (Hermite_of A ass res bezout) =\n  Hermite_of_iarrays (matrix_to_iarray A) ass res bezout\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Examples of execution using immutable arrays\\<close>"], ["", "value[code] \"let A = list_of_list_to_matrix ([[37,8,6],[5,4,-8],[3,24,-7]])::int^3^3\n  in matrix_to_iarray (Hermite_of A ass_function_euclidean res_function_euclidean euclid_ext2)\""], ["", "value[code] \"let A = IArray[IArray[37,8,6::int],IArray[5,4,-8],IArray[3,24,-7]]\n  in (Hermite_of_iarrays A ass_function_euclidean res_function_euclidean euclid_ext2)\""], ["", "value[code] \"let A = list_of_list_to_matrix ([[[:3,4,5:],[:-2,1:]],[[:-1,0,2:],[:0,1,4,1:]]])::real poly^2^2\n  in matrix_to_iarray (Hermite_of A ass_function_euclidean res_function_euclidean euclid_ext2)\""], ["", "end"]]}