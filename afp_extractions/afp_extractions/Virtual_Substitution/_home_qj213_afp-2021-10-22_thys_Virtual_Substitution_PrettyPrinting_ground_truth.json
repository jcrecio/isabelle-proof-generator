{"file_name": "/home/qj213/afp-2021-10-22/thys/Virtual_Substitution/PrettyPrinting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Virtual_Substitution", "problem_names": ["lemma rat_of_real: \"rat_of_real x = r\" if \"x = of_rat r\"", "lemma rat_of_real_code[code]: \"rat_of_real (Ratreal r) = r\"", "lemma foo_eq: \"foo = (Var 0)^3 + (Const (3/2))*(Var 0)^2*(Var 1) + (Const (3))*(Var 0)^2*(Var 2) + (Const (3/4))*(Var 0)*(Var 1)^2 + (Const (3))*(Var 0)*(Var 1)*(Var 2) + (Const (3))*(Var 0)*(Var 2)^2 + (Const (1/8))*(Var 1)^3 + (Const (3/4))*(Var 1)^2*(Var 2) + (Const (3/2))*(Var 1)*(Var 2)^2 + (Var 2)^3\""], "translations": [["", "lemma rat_of_real: \"rat_of_real x = r\" if \"x = of_rat r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_real x = r", "using that"], ["proof (prove)\nusing this:\n  x = real_of_rat r\n\ngoal (1 subgoal):\n 1. rat_of_real x = r", "unfolding rat_of_real_def"], ["proof (prove)\nusing this:\n  x = real_of_rat r\n\ngoal (1 subgoal):\n 1. (if \\<exists>r. x = real_of_rat r then THE r. x = real_of_rat r\n     else 9999999999999999999999 / 10 ^ 11) =\n    r", "by simp"], ["", "lemma rat_of_real_code[code]: \"rat_of_real (Ratreal r) = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_real (Ratreal r) = r", "by (simp add: rat_of_real)"], ["", "definition \"shows_real x = shows (rat_of_real x)\""], ["", "experiment begin"], ["", "abbreviation \"foo \\<equiv> ((Var 0::real mpoly) + Const (0.5) * Var 1 + Var 2)^3\""], ["", "value [code] \"shows_mpoly True shows_real foo ''''\""], ["", "(* rhs of foo\\\\_eq is the output of this \\<open>value\\<close> command *)"], ["", "lemma foo_eq: \"foo = (Var 0)^3 + (Const (3/2))*(Var 0)^2*(Var 1) + (Const (3))*(Var 0)^2*(Var 2) + (Const (3/4))*(Var 0)*(Var 1)^2 + (Const (3))*(Var 0)*(Var 1)*(Var 2) + (Const (3))*(Var 0)*(Var 2)^2 + (Const (1/8))*(Var 1)^3 + (Const (3/4))*(Var 1)^2*(Var 2) + (Const (3/2))*(Var 1)*(Var 2)^2 + (Var 2)^3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Var 0 + Const (5 / 10) * Var 1 + Var 2) ^ 3 =\n    Var 0 ^ 3 + Const (3 / 2) * (Var 0)\\<^sup>2 * Var 1 +\n    Const 3 * (Var 0)\\<^sup>2 * Var 2 +\n    Const (3 / 4) * Var 0 * (Var 1)\\<^sup>2 +\n    Const 3 * Var 0 * Var 1 * Var 2 +\n    Const 3 * Var 0 * (Var 2)\\<^sup>2 +\n    Const (1 / 8) * Var 1 ^ 3 +\n    Const (3 / 4) * (Var 1)\\<^sup>2 * Var 2 +\n    Const (3 / 2) * Var 1 * (Var 2)\\<^sup>2 +\n    Var 2 ^ 3", "by code_simp"], ["", "value [code] \"shows_mpoly False shows_real foo ''''\""], ["", "value [code] \"shows_mpoly False (shows_paren o shows_mpoly False shows_real) (extract_var foo 0) ''''\""], ["", "value [code] \"shows_list_gen (shows_mpoly False shows_real)\n  ''[]'' ''['' '', '' '']''\n   (Polynomial.coeffs (mpoly_to_nested_poly foo 0)) ''''\""], ["", "end"], ["", "fun shows_atom :: \"bool \\<Rightarrow> atom \\<Rightarrow> shows\" where\n  \"shows_atom c (Eq p) = (shows_string ''('' +@+ shows_mpoly c shows_real p +@+ shows_string ''=0)'')\"|\n  \"shows_atom c (Less p) = (shows_string ''('' +@+ shows_mpoly c shows_real p +@+ shows_string ''<0)'')\"|\n  \"shows_atom c (Leq p) = (shows_string ''('' +@+ shows_mpoly c shows_real p +@+ shows_string ''<=0)'')\"|\n  \"shows_atom c(Neq p) = (shows_string ''('' +@+ shows_mpoly c shows_real p +@+ shows_string ''~=0)'')\""], ["", "fun depth' :: \"'a fm \\<Rightarrow> nat\"where\n  \"depth' TrueF = 1\"|\n  \"depth' FalseF = 1\"|\n  \"depth' (Atom _) = 1\"|\n  \"depth' (And \\<phi> \\<psi>) = max (depth' \\<phi>) (depth' \\<psi>) + 1\"|\n  \"depth' (Or \\<phi> \\<psi>) = max (depth' \\<phi>) (depth' \\<psi>) + 1\"|\n  \"depth' (Neg \\<phi>) = depth' \\<phi> + 1\"|\n  \"depth' (ExQ \\<phi>) = depth' \\<phi> + 1\"|\n  \"depth' (AllQ \\<phi>) = depth' \\<phi> + 1\"|\n  \"depth' (AllN i \\<phi>) = depth' \\<phi>  + i * 2 + 1\"|\n  \"depth' (ExN i \\<phi>) = depth' \\<phi>  + i * 2 + 1\""], ["", "function shows_fm :: \"bool \\<Rightarrow> atom fm \\<Rightarrow> shows\" where\n  \"shows_fm c (Atom a) = shows_atom c a\"|\n  \"shows_fm c (TrueF) = shows_string ''(T)''\"|\n  \"shows_fm c (FalseF) = shows_string ''(F)''\"|\n  \"shows_fm c (And \\<phi> \\<psi>) = (shows_string ''('' +@+ shows_fm c \\<phi> +@+ shows_string '' and '' +@+ shows_fm c \\<psi> +@+ shows_string ('')''))\"|\n  \"shows_fm c (Or \\<phi> \\<psi>) = (shows_string ''('' +@+ shows_fm c \\<phi> +@+ shows_string '' or '' +@+ shows_fm c \\<psi>  +@+ shows_string '')'')\"|\n  \"shows_fm c (Neg \\<phi>) = (shows_string ''(neg '' +@+ shows_fm c \\<phi> +@+ shows_string '')'')\"|\n  \"shows_fm c (ExQ \\<phi>) = (shows_string ''(exists'' +@+ shows_fm c \\<phi> +@+ shows_string '')'')\"|\n  \"shows_fm c (AllQ \\<phi>) = (shows_string ''(forall'' +@+ shows_fm c \\<phi> +@+ shows_string '')'')\"|\n  \"shows_fm c (ExN 0 \\<phi>) = shows_fm c \\<phi>\"|\n  \"shows_fm c (ExN (Suc n) \\<phi>) = shows_fm c (ExQ(ExN n \\<phi>))\"|\n  \"shows_fm c (AllN 0 \\<phi>) = shows_fm c \\<phi>\"|\n  \"shows_fm c (AllN (Suc n) \\<phi>) = shows_fm c (AllQ(AllN n \\<phi>))\""], ["proof (prove)\ngoal (79 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>c a. x = (c, fm.Atom a) \\<Longrightarrow> P;\n        \\<And>c. x = (c, TrueF) \\<Longrightarrow> P;\n        \\<And>c. x = (c, FalseF) \\<Longrightarrow> P;\n        \\<And>c \\<phi> \\<psi>.\n           x = (c, And \\<phi> \\<psi>) \\<Longrightarrow> P;\n        \\<And>c \\<phi> \\<psi>.\n           x = (c, Or \\<phi> \\<psi>) \\<Longrightarrow> P;\n        \\<And>c \\<phi>. x = (c, Neg \\<phi>) \\<Longrightarrow> P;\n        \\<And>c \\<phi>. x = (c, ExQ \\<phi>) \\<Longrightarrow> P;\n        \\<And>c \\<phi>. x = (c, AllQ \\<phi>) \\<Longrightarrow> P;\n        \\<And>c \\<phi>. x = (c, ExN 0 \\<phi>) \\<Longrightarrow> P;\n        \\<And>c n \\<phi>. x = (c, ExN (Suc n) \\<phi>) \\<Longrightarrow> P;\n        \\<And>c \\<phi>. x = (c, AllN 0 \\<phi>) \\<Longrightarrow> P;\n        \\<And>c n \\<phi>.\n           x = (c, AllN (Suc n) \\<phi>) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>c a ca aa.\n       (c, fm.Atom a) = (ca, fm.Atom aa) \\<Longrightarrow>\n       shows_atom c a = shows_atom ca aa\n 3. \\<And>c a ca.\n       (c, fm.Atom a) = (ca, TrueF) \\<Longrightarrow>\n       shows_atom c a = shows_string ''(T)''\n 4. \\<And>c a ca.\n       (c, fm.Atom a) = (ca, FalseF) \\<Longrightarrow>\n       shows_atom c a = shows_string ''(F)''\n 5. \\<And>c a ca \\<phi> \\<psi>.\n       (c, fm.Atom a) = (ca, And \\<phi> \\<psi>) \\<Longrightarrow>\n       shows_atom c a =\n       shows_string ''('' \\<circ>\n       (shows_fm_sumC (ca, \\<phi>) \\<circ>\n        (shows_string '' and '' \\<circ>\n         (shows_fm_sumC (ca, \\<psi>) \\<circ> shows_string '')'')))\n 6. \\<And>c a ca \\<phi> \\<psi>.\n       (c, fm.Atom a) = (ca, Or \\<phi> \\<psi>) \\<Longrightarrow>\n       shows_atom c a =\n       shows_string ''('' \\<circ>\n       (shows_fm_sumC (ca, \\<phi>) \\<circ>\n        (shows_string '' or '' \\<circ>\n         (shows_fm_sumC (ca, \\<psi>) \\<circ> shows_string '')'')))\n 7. \\<And>c a ca \\<phi>.\n       (c, fm.Atom a) = (ca, Neg \\<phi>) \\<Longrightarrow>\n       shows_atom c a =\n       shows_string ''(neg '' \\<circ>\n       (shows_fm_sumC (ca, \\<phi>) \\<circ> shows_string '')'')\n 8. \\<And>c a ca \\<phi>.\n       (c, fm.Atom a) = (ca, ExQ \\<phi>) \\<Longrightarrow>\n       shows_atom c a =\n       shows_string ''(exists'' \\<circ>\n       (shows_fm_sumC (ca, \\<phi>) \\<circ> shows_string '')'')\n 9. \\<And>c a ca \\<phi>.\n       (c, fm.Atom a) = (ca, AllQ \\<phi>) \\<Longrightarrow>\n       shows_atom c a =\n       shows_string ''(forall'' \\<circ>\n       (shows_fm_sumC (ca, \\<phi>) \\<circ> shows_string '')'')\n 10. \\<And>c a ca \\<phi>.\n        (c, fm.Atom a) = (ca, ExN 0 \\<phi>) \\<Longrightarrow>\n        shows_atom c a = shows_fm_sumC (ca, \\<phi>)\nA total of 79 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All shows_fm_dom", "apply(relation \"measures [\\<lambda>(_,A). depth' A]\")"], ["proof (prove)\ngoal (12 subgoals):\n 1. wf (measures [\\<lambda>(uu_, A). depth' A])\n 2. \\<And>c \\<phi> \\<psi> z.\n       z \\<in> range (shows_string '')'') \\<Longrightarrow>\n       ((c, \\<psi>), c, And \\<phi> \\<psi>)\n       \\<in> measures [\\<lambda>(uu_, A). depth' A]\n 3. \\<And>c \\<phi> \\<psi> z.\n       \\<lbrakk>z \\<in> range\n                         (shows_string '' and '' \\<circ>\n                          (shows_fm c \\<psi> \\<circ> shows_string '')''));\n        \\<And>z.\n           z \\<in> range (shows_string '')'') \\<Longrightarrow>\n           shows_fm_dom (c, \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> ((c, \\<phi>), c, And \\<phi> \\<psi>)\n                         \\<in> measures [\\<lambda>(uu_, A). depth' A]\n 4. \\<And>c \\<phi> \\<psi> z.\n       z \\<in> range (shows_string '')'') \\<Longrightarrow>\n       ((c, \\<psi>), c, Or \\<phi> \\<psi>)\n       \\<in> measures [\\<lambda>(uu_, A). depth' A]\n 5. \\<And>c \\<phi> \\<psi> z.\n       \\<lbrakk>z \\<in> range\n                         (shows_string '' or '' \\<circ>\n                          (shows_fm c \\<psi> \\<circ> shows_string '')''));\n        \\<And>z.\n           z \\<in> range (shows_string '')'') \\<Longrightarrow>\n           shows_fm_dom (c, \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> ((c, \\<phi>), c, Or \\<phi> \\<psi>)\n                         \\<in> measures [\\<lambda>(uu_, A). depth' A]\n 6. \\<And>c \\<phi> z.\n       z \\<in> range (shows_string '')'') \\<Longrightarrow>\n       ((c, \\<phi>), c, Neg \\<phi>)\n       \\<in> measures [\\<lambda>(uu_, A). depth' A]\n 7. \\<And>c \\<phi> z.\n       z \\<in> range (shows_string '')'') \\<Longrightarrow>\n       ((c, \\<phi>), c, ExQ \\<phi>)\n       \\<in> measures [\\<lambda>(uu_, A). depth' A]\n 8. \\<And>c \\<phi> z.\n       z \\<in> range (shows_string '')'') \\<Longrightarrow>\n       ((c, \\<phi>), c, AllQ \\<phi>)\n       \\<in> measures [\\<lambda>(uu_, A). depth' A]\n 9. \\<And>c \\<phi>.\n       ((c, \\<phi>), c, ExN 0 \\<phi>)\n       \\<in> measures [\\<lambda>(uu_, A). depth' A]\n 10. \\<And>c n \\<phi>.\n        ((c, ExQ (ExN n \\<phi>)), c, ExN (Suc n) \\<phi>)\n        \\<in> measures [\\<lambda>(uu_, A). depth' A]\nA total of 12 subgoals...", "by auto"], ["", "value \"shows_fm False (ExQ (Or (AllQ(And (Neg TrueF) (Neg FalseF))) (Atom(Eq(Const 4))))) []\""], ["", "value \"shows_fm True (ExQ (Or (AllQ(And (Neg TrueF) (Neg FalseF))) (Atom(Eq(Const 4))))) []\""], ["", "end"]]}