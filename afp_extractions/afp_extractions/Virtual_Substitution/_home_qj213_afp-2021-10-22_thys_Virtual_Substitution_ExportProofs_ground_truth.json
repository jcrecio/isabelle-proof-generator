{"file_name": "/home/qj213/afp-2021-10-22/thys/Virtual_Substitution/ExportProofs.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Virtual_Substitution", "problem_names": ["theorem \"eval (Unpower f) L = eval f L\"", "theorem VSLuckiest: \"\\<forall>xs. eval (VSLuckiest \\<phi>) xs = eval \\<phi> xs\"", "theorem VSLuckiestBlocks : \"\\<forall>xs. eval (VSLuckiestBlocks \\<phi>) xs = eval \\<phi> xs\"", "theorem VSEquality : \"\\<forall>xs. eval (VSEquality \\<phi>) xs = eval \\<phi> xs\"", "theorem VSEqualityBlocks : \"\\<forall>xs. eval (VSEqualityBlocks \\<phi>) xs = eval \\<phi> xs\"", "theorem VSGeneralBlocks : \"\\<forall>xs. eval (VSGeneralBlocks \\<phi>) xs = eval \\<phi> xs\"", "theorem VSLuckyBlocks : \"\\<forall>xs. eval (VSLuckyBlocks \\<phi>) xs = eval \\<phi> xs\"", "theorem VSLEGBlocks : \"\\<forall>xs. eval (VSLEGBlocks \\<phi>) xs = eval \\<phi> xs\"", "theorem VSEqualityBlocksLimited : \"\\<forall>xs. eval (VSEqualityBlocksLimited \\<phi>) xs = eval \\<phi> xs\"", "theorem VSEquality_3_times : \"\\<forall>xs. eval (VSEquality_3_times \\<phi>) xs = eval \\<phi> xs\"", "theorem VSGeneral:  \"\\<forall>xs. eval (VSGeneral \\<phi>) xs = eval \\<phi> xs\"", "theorem VSGeneralBlocksLimited:  \"\\<forall>xs. eval (VSGeneralBlocksLimited \\<phi>) xs = eval \\<phi> xs\"", "theorem VSBrowns:  \"\\<forall>xs. eval (VSBrowns \\<phi>) xs = eval \\<phi> xs\"", "theorem VSGeneral_3_times : \"\\<forall>xs. eval (VSGeneral_3_times \\<phi>) xs = eval \\<phi> xs\"", "theorem VSLucky: \"\\<forall>xs. eval (VSLucky \\<phi>) xs = eval \\<phi> xs\"", "theorem VSLuckyBlocksLimited: \"\\<forall>xs. eval (VSLuckyBlocksLimited \\<phi>) xs = eval \\<phi> xs\"", "theorem VSLEG: \"\\<forall>xs. eval (VSLEG \\<phi>) xs = eval \\<phi> xs\"", "theorem VSHeuristic : \"\\<forall>xs. eval(VSHeuristic \\<phi>) xs = eval \\<phi> xs\"", "theorem VSLuckiestRepeat : \"\\<forall>xs. eval (VSLuckiestRepeat \\<phi>) xs = eval \\<phi> xs\""], "translations": [["", "theorem \"eval (Unpower f) L = eval f L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (Unpower f) L = eval f L", "unfolding unpower_eval Unpower_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval f L = eval f L", "by auto"], ["", "theorem VSLuckiest: \"\\<forall>xs. eval (VSLuckiest \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSLuckiest \\<phi>) xs = eval \\<phi> xs", "unfolding VSLuckiest_def Unpower_def opt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>amount. luckiestFind) \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF luckiestFind_eval' opt_no_group] opt_no_group"], ["proof (prove)\nusing this:\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers)\n     (\\<lambda>amount. luckiestFind) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers) ?F)\n   ?L =\n  eval ?F ?L\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>amount. luckiestFind) \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSLuckiestBlocks : \"\\<forall>xs. eval (VSLuckiestBlocks \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSLuckiestBlocks \\<phi>) xs = eval \\<phi> xs", "unfolding VSLuckiestBlocks_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment luckiestFind) \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf'_eval[OF the_real_step_augment[OF luckiestFind_eval, of \"\\<lambda>x _ _. x\"] opt]"], ["proof (prove)\nusing this:\n  (\\<And>amount F \\<Gamma> xs var L Fa \\<Gamma>'.\n      length xs = var \\<Longrightarrow> length xs = var) \\<Longrightarrow>\n  eval\n   (QE_dnf'\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (the_real_step_augment luckiestFind) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment luckiestFind) \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using opt"], ["proof (prove)\nusing this:\n  (\\<And>amount F \\<Gamma> xs var L Fa \\<Gamma>'.\n      length xs = var \\<Longrightarrow> length xs = var) \\<Longrightarrow>\n  eval\n   (QE_dnf'\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (the_real_step_augment luckiestFind) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment luckiestFind) \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSEquality : \"\\<forall>xs. eval (VSEquality \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSEquality \\<phi>) xs = eval \\<phi> xs", "unfolding VSEquality_def Unpower_def opt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>x. qe_eq_repeat) \\<circ>\n          VSLuckiest \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF qe_eq_repeat_eval' opt_no_group]"], ["proof (prove)\nusing this:\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers)\n     (\\<lambda>amount. qe_eq_repeat) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>x. qe_eq_repeat) \\<circ>\n          VSLuckiest \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using  opt_no_group VSLuckiest"], ["proof (prove)\nusing this:\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers)\n     (\\<lambda>amount. qe_eq_repeat) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers) ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiest ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>x. qe_eq_repeat) \\<circ>\n          VSLuckiest \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSEqualityBlocks : \"\\<forall>xs. eval (VSEqualityBlocks \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSEqualityBlocks \\<phi>) xs = eval \\<phi> xs", "unfolding VSEqualityBlocks_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment qe_eq_repeat) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf'_eval[OF the_real_step_augment[OF qe_eq_repeat_eval, of \"\\<lambda>x _ _. x\"] opt]"], ["proof (prove)\nusing this:\n  (\\<And>amount F \\<Gamma> xs var L Fa \\<Gamma>'.\n      length xs = var \\<Longrightarrow> length xs = var) \\<Longrightarrow>\n  eval\n   (QE_dnf'\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (the_real_step_augment qe_eq_repeat) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment qe_eq_repeat) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using opt VSLuckiestBlocks"], ["proof (prove)\nusing this:\n  (\\<And>amount F \\<Gamma> xs var L Fa \\<Gamma>'.\n      length xs = var \\<Longrightarrow> length xs = var) \\<Longrightarrow>\n  eval\n   (QE_dnf'\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (the_real_step_augment qe_eq_repeat) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiestBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment qe_eq_repeat) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSGeneralBlocks : \"\\<forall>xs. eval (VSGeneralBlocks \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSGeneralBlocks \\<phi>) xs = eval \\<phi> xs", "unfolding VSGeneralBlocks_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment gen_qe) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf'_eval[OF the_real_step_augment[OF gen_qe_eval, of \"\\<lambda>x _ _. x\"] opt]"], ["proof (prove)\nusing this:\n  (\\<And>amount F \\<Gamma> xs var L Fa \\<Gamma>'.\n      length xs = var \\<Longrightarrow> length xs = var) \\<Longrightarrow>\n  eval\n   (QE_dnf'\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (the_real_step_augment gen_qe) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment gen_qe) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using opt VSLuckiestBlocks"], ["proof (prove)\nusing this:\n  (\\<And>amount F \\<Gamma> xs var L Fa \\<Gamma>'.\n      length xs = var \\<Longrightarrow> length xs = var) \\<Longrightarrow>\n  eval\n   (QE_dnf'\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (the_real_step_augment gen_qe) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiestBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment gen_qe) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSLuckyBlocks : \"\\<forall>xs. eval (VSLuckyBlocks \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSLuckyBlocks \\<phi>) xs = eval \\<phi> xs", "unfolding VSLuckyBlocks_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment luckyFind') \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf'_eval[OF the_real_step_augment[OF luckyFind'_eval, of \"\\<lambda>x _ _. x\"] opt]"], ["proof (prove)\nusing this:\n  (\\<And>amount F \\<Gamma> xs var L Fa \\<Gamma>'.\n      length xs = var \\<Longrightarrow> length xs = var) \\<Longrightarrow>\n  eval\n   (QE_dnf'\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (the_real_step_augment luckyFind') ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment luckyFind') \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using opt VSLuckiestBlocks"], ["proof (prove)\nusing this:\n  (\\<And>amount F \\<Gamma> xs var L Fa \\<Gamma>'.\n      length xs = var \\<Longrightarrow> length xs = var) \\<Longrightarrow>\n  eval\n   (QE_dnf'\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (the_real_step_augment luckyFind') ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiestBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf'\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (the_real_step_augment luckyFind') \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSLEGBlocks : \"\\<forall>xs. eval (VSLEGBlocks \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSLEGBlocks \\<phi>) xs = eval \\<phi> xs", "unfolding VSLEGBlocks_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((VSGeneralBlocks \\<circ> VSEqualityBlocks \\<circ> VSLuckyBlocks)\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using VSEqualityBlocks VSGeneralBlocks VSLuckyBlocks"], ["proof (prove)\nusing this:\n  \\<forall>xs. eval (VSEqualityBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n  \\<forall>xs. eval (VSGeneralBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n  \\<forall>xs. eval (VSLuckyBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((VSGeneralBlocks \\<circ> VSEqualityBlocks \\<circ> VSLuckyBlocks)\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSEqualityBlocksLimited : \"\\<forall>xs. eval (VSEqualityBlocksLimited \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSEqualityBlocksLimited \\<phi>) xs = eval \\<phi> xs", "unfolding VSEqualityBlocksLimited_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (step_augment qe_eq_repeat IdentityHeuristic) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF qe_eq_repeat_eval_augment opt] opt VSLuckiestBlocks"], ["proof (prove)\nusing this:\n  (\\<And>var amount new L F \\<Gamma>.\n      amount \\<le> var + 1 \\<Longrightarrow>\n      ?amount4 var amount L F \\<le> var + 1) \\<Longrightarrow>\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (\\<lambda>amount var L F.\n         step_augment qe_eq_repeat IdentityHeuristic\n          (?amount4 var amount L F) var L F)\n     ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiestBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (step_augment qe_eq_repeat IdentityHeuristic) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSEquality_3_times : \"\\<forall>xs. eval (VSEquality_3_times \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSEquality_3_times \\<phi>) xs = eval \\<phi> xs", "using VSEquality"], ["proof (prove)\nusing this:\n  \\<forall>xs. eval (VSEquality ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSEquality_3_times \\<phi>) xs = eval \\<phi> xs", "unfolding VSEquality_3_times_def"], ["proof (prove)\nusing this:\n  \\<forall>xs. eval (VSEquality ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval ((VSEquality \\<circ> VSEquality \\<circ> VSEquality) \\<phi>) xs =\n       eval \\<phi> xs", "by auto"], ["", "theorem VSGeneral:  \"\\<forall>xs. eval (VSGeneral \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSGeneral \\<phi>) xs = eval \\<phi> xs", "unfolding VSGeneral_def Unpower_def Unpower_def opt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>x. gen_qe) \\<circ>\n          VSLuckiest \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF gen_qe_eval' opt_no_group]"], ["proof (prove)\nusing this:\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers)\n     (\\<lambda>amount. gen_qe) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>x. gen_qe) \\<circ>\n          VSLuckiest \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using  opt_no_group VSLuckiest"], ["proof (prove)\nusing this:\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers)\n     (\\<lambda>amount. gen_qe) ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers) ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiest ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>x. gen_qe) \\<circ>\n          VSLuckiest \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSGeneralBlocksLimited:  \"\\<forall>xs. eval (VSGeneralBlocksLimited \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSGeneralBlocksLimited \\<phi>) xs = eval \\<phi> xs", "unfolding VSGeneralBlocksLimited_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (step_augment gen_qe IdentityHeuristic) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF gen_qe_eval_augment opt] opt VSLuckiestBlocks"], ["proof (prove)\nusing this:\n  (\\<And>var amount new L F \\<Gamma>.\n      amount \\<le> var + 1 \\<Longrightarrow>\n      ?amount4 var amount L F \\<le> var + 1) \\<Longrightarrow>\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (\\<lambda>amount var L F.\n         step_augment gen_qe IdentityHeuristic (?amount4 var amount L F) var\n          L F)\n     ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiestBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (step_augment gen_qe IdentityHeuristic) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSBrowns:  \"\\<forall>xs. eval (VSBrowns \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSBrowns \\<phi>) xs = eval \\<phi> xs", "unfolding VSBrowns_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (step_augment gen_qe brownsHeuristic) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF step_augmenter_eval[of gen_qe brownsHeuristic, OF gen_qe_eval brownHueristic_less_than] opt] opt VSLuckiestBlocks"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>var amount new L F \\<Gamma> xs vara La Fa \\<Gamma>'.\n              \\<lbrakk>amount \\<le> var + 1; length xs = vara\\<rbrakk>\n              \\<Longrightarrow> length xs = vara;\n   \\<And>var amount new L F \\<Gamma> n vara La Fa.\n      \\<lbrakk>amount \\<le> var + 1; brownsHeuristic n La Fa = vara\\<rbrakk>\n      \\<Longrightarrow> brownsHeuristic n\n                         (?L4 var amount new L F \\<Gamma> n vara La Fa)\n                         (?F4 var amount new L F \\<Gamma> n vara La Fa) =\n                        vara;\n   \\<And>var amount new L F \\<Gamma>.\n      amount \\<le> var + 1 \\<Longrightarrow>\n      ?amount6 var amount L F \\<le> var + 1\\<rbrakk>\n  \\<Longrightarrow> eval\n                     (QE_dnf\n                       (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n                        groupQuantifiers \\<circ>\n                        clearQuantifiers)\n                       (\\<lambda>amount var L F.\n                           step_augment gen_qe brownsHeuristic\n                            (?amount6 var amount L F) var L F)\n                       ?\\<phi>)\n                     ?xs =\n                    eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiestBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (step_augment gen_qe brownsHeuristic) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSGeneral_3_times : \"\\<forall>xs. eval (VSGeneral_3_times \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSGeneral_3_times \\<phi>) xs = eval \\<phi> xs", "unfolding  VSGeneral_3_times_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval ((VSGeneral \\<circ> VSGeneral \\<circ> VSGeneral) \\<phi>) xs =\n       eval \\<phi> xs", "using VSGeneral"], ["proof (prove)\nusing this:\n  \\<forall>xs. eval (VSGeneral ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval ((VSGeneral \\<circ> VSGeneral \\<circ> VSGeneral) \\<phi>) xs =\n       eval \\<phi> xs", "by auto"], ["", "theorem VSLucky: \"\\<forall>xs. eval (VSLucky \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSLucky \\<phi>) xs = eval \\<phi> xs", "unfolding VSLucky_def Unpower_def opt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>amount. luckyFind') \\<circ>\n          VSLuckiest \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF luckyFind_eval' opt_no_group] opt_no_group VSLuckiest"], ["proof (prove)\nusing this:\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers)\n     (\\<lambda>amount. luckyFind') ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ> clearQuantifiers) ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiest ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            clearQuantifiers)\n           (\\<lambda>amount. luckyFind') \\<circ>\n          VSLuckiest \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSLuckyBlocksLimited: \"\\<forall>xs. eval (VSLuckyBlocksLimited \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSLuckyBlocksLimited \\<phi>) xs = eval \\<phi> xs", "unfolding VSLuckyBlocksLimited_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (step_augment luckyFind' IdentityHeuristic) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF luckyFind_eval_augment opt] opt VSLuckiestBlocks"], ["proof (prove)\nusing this:\n  (\\<And>var amount new L F \\<Gamma>.\n      amount \\<le> var + 1 \\<Longrightarrow>\n      ?amount4 var amount L F \\<le> var + 1) \\<Longrightarrow>\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (\\<lambda>amount var L F.\n         step_augment luckyFind' IdentityHeuristic (?amount4 var amount L F)\n          var L F)\n     ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiestBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           (step_augment luckyFind' IdentityHeuristic) \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSLEG: \"\\<forall>xs. eval (VSLEG \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSLEG \\<phi>) xs = eval \\<phi> xs", "unfolding VSLEG_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval ((VSGeneral \\<circ> VSEquality \\<circ> VSLucky) \\<phi>) xs =\n       eval \\<phi> xs", "using VSLucky VSEquality VSGeneral"], ["proof (prove)\nusing this:\n  \\<forall>xs. eval (VSLucky ?\\<phi>) xs = eval ?\\<phi> xs\n  \\<forall>xs. eval (VSEquality ?\\<phi>) xs = eval ?\\<phi> xs\n  \\<forall>xs. eval (VSGeneral ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval ((VSGeneral \\<circ> VSEquality \\<circ> VSLucky) \\<phi>) xs =\n       eval \\<phi> xs", "by auto"], ["", "theorem VSHeuristic : \"\\<forall>xs. eval(VSHeuristic \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSHeuristic \\<phi>) xs = eval \\<phi> xs", "unfolding VSHeuristic_def Unpower_def opt_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           superPicker \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "using QE_dnf_eval[OF superPicker_eval opt] opt VSLuckiestBlocks"], ["proof (prove)\nusing this:\n  (\\<And>var amount new L F \\<Gamma>.\n      amount \\<le> var + 1 \\<Longrightarrow>\n      ?amount4 var amount L F \\<le> var + 1) \\<Longrightarrow>\n  eval\n   (QE_dnf\n     (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n      groupQuantifiers \\<circ>\n      clearQuantifiers)\n     (\\<lambda>amount var L F.\n         superPicker (?amount4 var amount L F) var L F)\n     ?\\<phi>)\n   ?xs =\n  eval ?\\<phi> ?xs\n  eval\n   ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n     groupQuantifiers \\<circ>\n     clearQuantifiers)\n     ?F)\n   ?L =\n  eval ?F ?L\n  \\<forall>xs. eval (VSLuckiestBlocks ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval\n        ((push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n          groupQuantifiers \\<circ>\n          clearQuantifiers \\<circ>\n          QE_dnf\n           (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n            groupQuantifiers \\<circ>\n            clearQuantifiers)\n           superPicker \\<circ>\n          VSLuckiestBlocks \\<circ>\n          (push_forall \\<circ> nnf \\<circ> unpower 0 \\<circ>\n           groupQuantifiers \\<circ>\n           clearQuantifiers))\n          \\<phi>)\n        xs =\n       eval \\<phi> xs", "by fastforce"], ["", "theorem VSLuckiestRepeat : \"\\<forall>xs. eval (VSLuckiestRepeat \\<phi>) xs = eval \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs. eval (VSLuckiestRepeat \\<phi>) xs = eval \\<phi> xs", "unfolding VSLuckiestRepeat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval (repeatAmountOfQuantifiers VSLuckiest \\<phi>) xs =\n       eval \\<phi> xs", "using repeatAmountOfQuantifiers_eval[OF]"], ["proof (prove)\nusing this:\n  (\\<And>xs F. eval F xs = eval (?step F) xs) \\<Longrightarrow>\n  eval ?F ?xs = eval (repeatAmountOfQuantifiers ?step ?F) ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval (repeatAmountOfQuantifiers VSLuckiest \\<phi>) xs =\n       eval \\<phi> xs", "using VSLuckiest"], ["proof (prove)\nusing this:\n  (\\<And>xs F. eval F xs = eval (?step F) xs) \\<Longrightarrow>\n  eval ?F ?xs = eval (repeatAmountOfQuantifiers ?step ?F) ?xs\n  \\<forall>xs. eval (VSLuckiest ?\\<phi>) xs = eval ?\\<phi> xs\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       eval (repeatAmountOfQuantifiers VSLuckiest \\<phi>) xs =\n       eval \\<phi> xs", "by blast"], ["", "export_code\n  print_mpoly\n  VSGeneral VSEquality VSLucky VSLEG VSLuckiest\n  VSGeneralBlocksLimited VSEqualityBlocksLimited VSLuckyBlocksLimited \n  VSGeneralBlocks VSEqualityBlocks VSLuckyBlocks VSLEGBlocks VSLuckiestBlocks\n  QE_dnf\n  gen_qe qe_eq_repeat\n  simpfm push_forall nnf Unpower\n  is_quantifier_free is_solved\n  add mult C V pow minus\n  Eq Or is_quantifier_free \n\nreal_of_int real_mult real_div real_plus real_minus\n\nVSGeneral_3_times VSEquality_3_times VSHeuristic VSLuckiestRepeat VSBrowns\nin SML module_name VS"], ["", "end"]]}