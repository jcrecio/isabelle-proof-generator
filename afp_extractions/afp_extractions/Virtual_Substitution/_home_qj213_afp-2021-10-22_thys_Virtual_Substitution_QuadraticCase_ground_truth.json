{"file_name": "/home/qj213/afp-2021-10-22/thys/Virtual_Substitution/QuadraticCase.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Virtual_Substitution", "problem_names": ["lemma quad_part_1_eq :\n  assumes lLength : \"length L > var\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg::nat)\"\n  assumes nonzero : \"D \\<noteq> 0\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) a = (A::real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) b = (B::real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) d = (D::real)\"\n  shows \"aEval (Eq p) (list_update L var ((A+B*C)/D)) = aEval (Eq(quadratic_part_1 var a b d (Eq p))) (list_update L var C)\"", "lemma quad_part_1_less :\n  assumes lLength : \"length L > var\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg::nat)\"\n  assumes nonzero : \"D \\<noteq> 0\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) a = (A::real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) b = (B::real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) d = (D::real)\"\n  shows \"aEval (Less p) (list_update L var ((A+B*C)/D)) = aEval (Less(quadratic_part_1 var a b d (Less p))) (list_update L var C)\"", "lemma quad_part_1_leq :\n  assumes lLength : \"length L > var\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg::nat)\"\n  assumes nonzero : \"D \\<noteq> 0\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) a = (A::real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) b = (B::real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) d = (D::real)\"\n  shows \"aEval (Leq p) (list_update L var ((A+B*C)/D)) = aEval (Leq(quadratic_part_1 var a b d (Leq p))) (list_update L var C)\"", "lemma quad_part_1_neq :\n  assumes lLength : \"length L > var\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg::nat)\"\n  assumes nonzero : \"D \\<noteq> 0\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) a = (A::real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) b = (B::real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) d = (D::real)\"\n  shows \"aEval (Neq p) (list_update L var ((A+B*C)/D)) = aEval (Neq(quadratic_part_1 var a b d (Neq p))) (list_update L var C)\"", "lemma sqrt_case : \n  assumes detGreater0 : \"SQ \\<ge> 0\"\n  shows \"((SQ^(i div 2)) * real (i mod 2) * sqrt SQ + SQ ^ (i div 2) * (1 - real (i mod 2))) = (sqrt SQ) ^ i\"", "lemma sum_over_sqrt :\n  assumes detGreater0 : \"SQ \\<ge> 0\"\n  shows \"(\\<Sum>i\\<in>{0..<n+1}. ((f i::real) * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ +f i * SQ ^ (i div 2) * (1 - real (i mod 2))))\n        =(\\<Sum>i\\<in>{0..<n+1}. ((f i::real) * ((sqrt SQ)^i)))\"", "lemma quad_part_2_eq :\n  assumes lLength : \"length L > var\"\n  assumes detGreater0 : \"SQ\\<ge>0\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg ::nat)\"\n  assumes hsq : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) sq = (SQ::real)\"\n  shows \"aEval (Eq p) (list_update L var (sqrt SQ)) = aEval (Eq(quadratic_part_2 var sq p)) (list_update L var (sqrt SQ))\"", "lemma quad_part_2_less :\n  assumes lLength : \"length L > var\"\n  assumes detGreater0 : \"SQ\\<ge>0\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg ::nat)\"\n  assumes hsq : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) sq = (SQ::real)\"\n  shows \"aEval (Less p) (list_update L var (sqrt SQ)) = aEval (Less(quadratic_part_2 var sq p)) (list_update L var (sqrt SQ))\"", "lemma quad_part_2_neq :\n  assumes lLength : \"length L > var\"\n  assumes detGreater0 : \"SQ\\<ge>0\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg ::nat)\"\n  assumes hsq : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) sq = (SQ::real)\"\n  shows \"aEval (Neq p) (list_update L var (sqrt SQ)) = aEval (Neq(quadratic_part_2 var sq p)) (list_update L var (sqrt SQ))\"", "lemma quad_part_2_leq :\n  assumes lLength : \"length L > var\"\n  assumes detGreater0 : \"SQ\\<ge>0\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg ::nat)\"\n  assumes hsq : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) sq = (SQ::real)\"\n  shows \"aEval (Leq p) (list_update L var (sqrt SQ)) = aEval (Leq(quadratic_part_2 var sq p)) (list_update L var (sqrt SQ))\"", "lemma quad_part_2_deg :\n  assumes sqfree : \"(var::nat)\\<notin>vars(sq::real mpoly)\"\n  shows \"MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1\"", "lemma quad_equality_helper :\n  assumes lLength : \"length L > var\"\n  assumes detGreat0 : \"Cv\\<ge>0\"\n  assumes hC : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (C::real mpoly) = (Cv::real)\"\n  assumes hA : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A::real mpoly) = (Av::real)\"\n  assumes hB : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (B::real mpoly) = (Bv::real)\"\n  shows \"aEval (Eq (A + B * Var var)) (list_update L var (sqrt Cv)) = eval (And (Atom(Leq (A*B))) (Atom (Eq (A^2-B^2*C)))) (list_update L var (sqrt Cv))\"", "lemma quadratic_sub_eq :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval (Eq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d (Eq p)) (list_update L var (sqrt Cv))\"", "lemma quadratic_sub_less_helper :\n  assumes lLength : \"length L > var\"\n  assumes detGreat0 : \"Cv\\<ge>0\"\n  assumes hC : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (C::real mpoly) = (Cv::real)\"\n  assumes hA : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A::real mpoly) = (Av::real)\"\n  assumes hB : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (B::real mpoly) = (Bv::real)\"\n  shows \"aEval (Less (A + B * Var var)) (list_update L var (sqrt Cv)) = eval\n     (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (Or (fm.Atom (Less A)) (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (list_update L var (sqrt Cv)) \"", "lemma quadratic_sub_less :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval (Less p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d (Less p)) (list_update L var (sqrt Cv))\"", "lemma quadratic_sub_leq_helper :\n  assumes lLength : \"length L > var\"\n  assumes detGreat0 : \"Cv\\<ge>0\"\n  assumes hC : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (C::real mpoly) = (Cv::real)\"\n  assumes hA : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A::real mpoly) = (Av::real)\"\n  assumes hB : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (B::real mpoly) = (Bv::real)\"\n  shows \"aEval (Leq (A + B * Var var)) (list_update L var (sqrt Cv)) = \n  eval (Or(And(Atom(Leq(A)))(Atom (Leq(B^2*C-A^2))))(And (Atom(Leq B)) (Atom(Leq (A^2-B^2*C))))) (list_update L var (sqrt Cv))\"", "lemma quadratic_sub_leq :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval (Leq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d (Leq p)) (list_update L var (sqrt Cv))\"", "lemma quadratic_sub_neq :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval (Neq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d (Neq p)) (list_update L var (sqrt Cv))\"", "theorem free_in_quad :\n  assumes freeA : \"var\\<notin> vars a\"\n  assumes freeB : \"var\\<notin> vars b\"\n  assumes freeC : \"var\\<notin> vars c\"\n  assumes freeD : \"var\\<notin> vars d\"\n  shows \"freeIn var (quadratic_sub var a b c d A)\"", "theorem quadratic_sub :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval A (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d A) (list_update L var (sqrt Cv))\"", "lemma free_in_quad_fm_helper :\n  assumes freeA : \"var\\<notin> vars a\"\n  assumes freeB : \"var\\<notin> vars b\"\n  assumes freeC : \"var\\<notin> vars c\"\n  assumes freeD : \"var\\<notin> vars d\"\n  shows \"freeIn (var+z) (quadratic_sub_fm_helper var a b c d F z)\"", "theorem free_in_quad_fm :\n  assumes freeA : \"var\\<notin> vars a\"\n  assumes freeB : \"var\\<notin> vars b\"\n  assumes freeC : \"var\\<notin> vars c\"\n  assumes freeD : \"var\\<notin> vars d\"\n  shows \"freeIn var (quadratic_sub_fm var a b c d A)\"", "lemma quadratic_sub_fm_helper :\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes lLength : \"length L > var+z\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update (drop z L) var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update (drop z L) var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update (drop z L) var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update (drop z L) var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"eval F (list_update L (var+z) ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub_fm_helper var a b c d F z) (list_update L (var+z) (sqrt Cv))\"", "theorem quadratic_sub_fm :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"eval F (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub_fm var a b c d F) (list_update L var (sqrt Cv))\""], "translations": [["", "lemma quad_part_1_eq :\n  assumes lLength : \"length L > var\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg::nat)\"\n  assumes nonzero : \"D \\<noteq> 0\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) a = (A::real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) b = (B::real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) d = (D::real)\"\n  shows \"aEval (Eq p) (list_update L var ((A+B*C)/D)) = aEval (Eq(quadratic_part_1 var a b d (Eq p))) (list_update L var C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "define f where \"f i = insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)\" for i"], ["proof (state)\nthis:\n  f ?i =\n  insertion (nth_default 0 (L[var := C]))\n   (isolate_variable_sparse p var ?i) *\n  (A + B * C) ^ ?i\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have h1 : \"\\<forall>i. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i)) = (insertion (nth_default 0 (list_update L var ((A+B*C)/D))) (isolate_variable_sparse p var i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) =\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i)", "by(simp add: insertion_isovarspars_free)"], ["proof (state)\nthis:\n  \\<forall>i.\n     insertion (nth_default 0 (L[var := C]))\n      (isolate_variable_sparse p var i) =\n     insertion (nth_default 0 (L[var := (A + B * C) / D]))\n      (isolate_variable_sparse p var i)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have h2 : \"((\\<Sum>i = 0..<deg+1. f i / D ^ i) = 0) =((\\<Sum>i = 0..<deg+1. (f i) * D ^ (deg - i)) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) = 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) = 0)", "using normalize_summation nonzero"], ["proof (prove)\nusing this:\n  ?B \\<noteq> 0 \\<Longrightarrow>\n  ((\\<Sum>i = 0..<?n + 1. ?f i * ?B ^ (?n - i)) = 0) =\n  ((\\<Sum>i = 0..<?n + 1. ?f i / ?B ^ i) = 0)\n  D \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) = 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) = 0)", "by(auto)"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) = 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) = 0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have \"aEval (Eq(quadratic_part_1 var a b d (Eq p))) (list_update L var C) = \n      ((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)) * D ^ (deg - i)) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i *\n         D ^ (deg - i)) =\n     0)", "by(simp add: hdeg insertion_sum insertion_add insertion_mult insertion_var insertion_pow ha hb hd lLength)"], ["proof (state)\nthis:\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have \"... =((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)) / D ^ i) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i *\n         D ^ (deg - i)) =\n     0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i) =\n     0)", "using f_def h2"], ["proof (prove)\nusing this:\n  f ?i =\n  insertion (nth_default 0 (L[var := C]))\n   (isolate_variable_sparse p var ?i) *\n  (A + B * C) ^ ?i\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) = 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) = 0)\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i *\n         D ^ (deg - i)) =\n     0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i) =\n     0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) =\n   0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) =\n   0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have \"... =((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C)^i / (D ^ i)))) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i) =\n     0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) ^ i / D ^ i)) =\n     0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i) =\n   0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i)) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i) =\n   0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i)) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have \"... =((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C)/D) ^ i)) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) ^ i / D ^ i)) =\n     0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i) =\n     0)", "by (metis (no_types, lifting) power_divide sum.cong)"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i)) =\n   0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i)) =\n   0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have \"... =((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var ((A+B*C)/D))) (isolate_variable_sparse p var i) * ((A + B * C)/D) ^ i))=0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i) =\n     0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i) =\n     0)", "using h1"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     insertion (nth_default 0 (L[var := C]))\n      (isolate_variable_sparse p var i) =\n     insertion (nth_default 0 (L[var := (A + B * C) / D]))\n      (isolate_variable_sparse p var i)\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i) =\n     0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i) =\n     0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i) =\n   0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i) =\n   0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i) =\n   0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have \"... = (insertion (nth_default 0 (list_update L var ((A+B*C)/D))) p =0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i) =\n     0) =\n    (insertion (nth_default 0 (L[var := (A + B * C) / D])) p = 0)", "using sum_over_degree_insertion hdeg lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?d\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i = 0..<?d + 1.\n                        insertion (nth_default 0 (?L[?var := ?x]))\n                         (isolate_variable_sparse ?p ?var i) *\n                        ?x ^ i) =\n                    insertion (nth_default 0 (?L[?var := ?x])) ?p\n  MPoly_Type.degree p var = deg\n  var < length L\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i) =\n     0) =\n    (insertion (nth_default 0 (L[var := (A + B * C) / D])) p = 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i) =\n   0) =\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p = 0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i) =\n   0) =\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p = 0)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "have \"... = aEval (Eq p) (list_update L var ((A+B*C)/D))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (L[var := (A + B * C) / D])) p = 0) =\n    aEval (Eq p) (L[var := (A + B * C) / D])", "using aEval.simps(1)"], ["proof (prove)\nusing this:\n  aEval (Eq ?p) ?L = (insertion (nth_default 0 ?L) ?p = 0)\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (L[var := (A + B * C) / D])) p = 0) =\n    aEval (Eq p) (L[var := (A + B * C) / D])", "by blast"], ["proof (state)\nthis:\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p = 0) =\n  aEval (Eq p) (L[var := (A + B * C) / D])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "finally"], ["proof (chain)\npicking this:\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n  aEval (Eq p) (L[var := (A + B * C) / D])", "show ?thesis"], ["proof (prove)\nusing this:\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n  aEval (Eq p) (L[var := (A + B * C) / D])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "using assms"], ["proof (prove)\nusing this:\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n  aEval (Eq p) (L[var := (A + B * C) / D])\n  var < length L\n  MPoly_Type.degree p var = deg\n  D \\<noteq> 0\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = A\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = B\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = D\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (A + B * C) / D]) =\n    aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])", "by auto"], ["proof (state)\nthis:\n  aEval (Eq p) (L[var := (A + B * C) / D]) =\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C])\n\ngoal:\nNo subgoals!", "qed"], ["", "(*------------------------------------------------------------------------------------------------*)"], ["", "lemma quad_part_1_less :\n  assumes lLength : \"length L > var\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg::nat)\"\n  assumes nonzero : \"D \\<noteq> 0\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) a = (A::real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) b = (B::real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) d = (D::real)\"\n  shows \"aEval (Less p) (list_update L var ((A+B*C)/D)) = aEval (Less(quadratic_part_1 var a b d (Less p))) (list_update L var C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "define f where \"f i = insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)\" for i"], ["proof (state)\nthis:\n  f ?i =\n  insertion (nth_default 0 (L[var := C]))\n   (isolate_variable_sparse p var ?i) *\n  (A + B * C) ^ ?i\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "have h1a : \"((\\<Sum>i = 0..<deg+1. f i / D ^ i) < 0) =((\\<Sum>i = 0..<deg+1. (f i) * D ^ (deg - i))  * D ^ (deg mod 2) < 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) < 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) < 0)", "using normalize_summation_less nonzero"], ["proof (prove)\nusing this:\n  ?B \\<noteq> 0 \\<Longrightarrow>\n  ((\\<Sum>i = 0..<?n + 1. ?f i * ?B ^ (?n - i)) * ?B ^ (?n mod 2) < 0) =\n  ((\\<Sum>i = 0..<?n + 1. ?f i / ?B ^ i) < 0)\n  D \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) < 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) < 0)", "by(auto)"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) < 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "have h4a : \"\\<forall>i. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i)) = (insertion (nth_default 0 (list_update L var ((A+B*C)/D))) (isolate_variable_sparse p var i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) =\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i)", "by(simp add: insertion_isovarspars_free)"], ["proof (state)\nthis:\n  \\<forall>i.\n     insertion (nth_default 0 (L[var := C]))\n      (isolate_variable_sparse p var i) =\n     insertion (nth_default 0 (L[var := (A + B * C) / D]))\n      (isolate_variable_sparse p var i)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "have \"((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)) * D ^ (deg - i)) * D ^ (deg mod 2) < 0)\n        =((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)) / D ^ i) < 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i *\n         D ^ (deg - i)) *\n     D ^ (deg mod 2)\n     < 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i)\n     < 0)", "using h1a f_def"], ["proof (prove)\nusing this:\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) < 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) < 0)\n  f ?i =\n  insertion (nth_default 0 (L[var := C]))\n   (isolate_variable_sparse p var ?i) *\n  (A + B * C) ^ ?i\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i *\n         D ^ (deg - i)) *\n     D ^ (deg mod 2)\n     < 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i)\n     < 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) *\n   D ^ (deg mod 2)\n   < 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i)\n   < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) *\n   D ^ (deg mod 2)\n   < 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i)\n   < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "have \"...=((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C)^i / (D ^ i)))) < 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i)\n     < 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) ^ i / D ^ i))\n     < 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i)\n   < 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i))\n   < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i)\n   < 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i))\n   < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "have \"...=((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C)/D) ^ i)) < 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) ^ i / D ^ i))\n     < 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     < 0)", "by (metis (no_types, lifting) power_divide sum.cong)"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i))\n   < 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i))\n   < 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "have \"... =((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var ((A+B*C)/D)))  (isolate_variable_sparse p var i) * ((A + B * C)/D) ^ i))<0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     < 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     < 0)", "using h4a"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     insertion (nth_default 0 (L[var := C]))\n      (isolate_variable_sparse p var i) =\n     insertion (nth_default 0 (L[var := (A + B * C) / D]))\n      (isolate_variable_sparse p var i)\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     < 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     < 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   < 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   < 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "have \"... = (insertion (nth_default 0 (list_update L var ((A+B*C)/D))) p <0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     < 0) =\n    (insertion (nth_default 0 (L[var := (A + B * C) / D])) p < 0)", "using sum_over_degree_insertion hdeg lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?d\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i = 0..<?d + 1.\n                        insertion (nth_default 0 (?L[?var := ?x]))\n                         (isolate_variable_sparse ?p ?var i) *\n                        ?x ^ i) =\n                    insertion (nth_default 0 (?L[?var := ?x])) ?p\n  MPoly_Type.degree p var = deg\n  var < length L\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     < 0) =\n    (insertion (nth_default 0 (L[var := (A + B * C) / D])) p < 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   < 0) =\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "finally"], ["proof (chain)\npicking this:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) *\n   D ^ (deg mod 2)\n   < 0) =\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p < 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) *\n   D ^ (deg mod 2)\n   < 0) =\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p < 0)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (A + B * C) / D]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])", "by(simp add: hdeg lLength insertion_add insertion_mult ha hb hd insertion_sum insertion_pow insertion_var)"], ["proof (state)\nthis:\n  aEval (Less p) (L[var := (A + B * C) / D]) =\n  aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := C])\n\ngoal:\nNo subgoals!", "qed"], ["", "(*------------------------------------------------------------------------------------------------*)"], ["", "lemma quad_part_1_leq :\n  assumes lLength : \"length L > var\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg::nat)\"\n  assumes nonzero : \"D \\<noteq> 0\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) a = (A::real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) b = (B::real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) d = (D::real)\"\n  shows \"aEval (Leq p) (list_update L var ((A+B*C)/D)) = aEval (Leq(quadratic_part_1 var a b d (Leq p))) (list_update L var C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "define f where \"f i = insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)\" for i"], ["proof (state)\nthis:\n  f ?i =\n  insertion (nth_default 0 (L[var := C]))\n   (isolate_variable_sparse p var ?i) *\n  (A + B * C) ^ ?i\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have h1a : \"((\\<Sum>i = 0..<deg+1. f i / D ^ i) < 0) =((\\<Sum>i = 0..<deg+1. (f i) * D ^ (deg - i))  * D ^ (deg mod 2) < 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) < 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) < 0)", "using normalize_summation_less nonzero"], ["proof (prove)\nusing this:\n  ?B \\<noteq> 0 \\<Longrightarrow>\n  ((\\<Sum>i = 0..<?n + 1. ?f i * ?B ^ (?n - i)) * ?B ^ (?n mod 2) < 0) =\n  ((\\<Sum>i = 0..<?n + 1. ?f i / ?B ^ i) < 0)\n  D \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) < 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) < 0)", "by(auto)"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) < 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) < 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have h1b : \"((\\<Sum>i = 0..<deg+1. f i / D ^ i) = 0) =((\\<Sum>i = 0..<deg+1. (f i) * D ^ (deg - i)) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) = 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) = 0)", "using normalize_summation nonzero"], ["proof (prove)\nusing this:\n  ?B \\<noteq> 0 \\<Longrightarrow>\n  ((\\<Sum>i = 0..<?n + 1. ?f i * ?B ^ (?n - i)) = 0) =\n  ((\\<Sum>i = 0..<?n + 1. ?f i / ?B ^ i) = 0)\n  D \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) = 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) = 0)", "by(auto)"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) = 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) = 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have h1c : \"((\\<Sum>i = 0..<deg+1. f i / D ^ i) \\<le> 0) =((\\<Sum>i = 0..<deg+1. (f i) * D ^ (deg - i))  * D ^ (deg mod 2) \\<le> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) \\<le> 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) \\<le> 0)", "using h1a h1b nonzero"], ["proof (prove)\nusing this:\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) < 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) < 0)\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) = 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) = 0)\n  D \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) \\<le> 0) =\n    ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) \\<le> 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have h4a : \"\\<forall>i. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i)) = (insertion (nth_default 0 (list_update L var ((A+B*C)/D))) (isolate_variable_sparse p var i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) =\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i)", "by(simp add: insertion_isovarspars_free)"], ["proof (state)\nthis:\n  \\<forall>i.\n     insertion (nth_default 0 (L[var := C]))\n      (isolate_variable_sparse p var i) =\n     insertion (nth_default 0 (L[var := (A + B * C) / D]))\n      (isolate_variable_sparse p var i)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have \"((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)) * D ^ (deg - i)) * D ^ (deg mod 2) \\<le> 0)=\n    ((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C) ^ i)) / D ^ i) \\<le> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i *\n         D ^ (deg - i)) *\n     D ^ (deg mod 2)\n     \\<le> 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i)\n     \\<le> 0)", "using h1c f_def"], ["proof (prove)\nusing this:\n  ((\\<Sum>i = 0..<deg + 1. f i / D ^ i) \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1. f i * D ^ (deg - i)) * D ^ (deg mod 2) \\<le> 0)\n  f ?i =\n  insertion (nth_default 0 (L[var := C]))\n   (isolate_variable_sparse p var ?i) *\n  (A + B * C) ^ ?i\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i *\n         D ^ (deg - i)) *\n     D ^ (deg mod 2)\n     \\<le> 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i)\n     \\<le> 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) *\n   D ^ (deg mod 2)\n   \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i)\n   \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) *\n   D ^ (deg mod 2)\n   \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i)\n   \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have \"...=((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C)^i / (D ^ i)))) \\<le> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         (A + B * C) ^ i /\n         D ^ i)\n     \\<le> 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) ^ i / D ^ i))\n     \\<le> 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i)\n   \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i))\n   \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i /\n       D ^ i)\n   \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i))\n   \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have \"...=((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var C)) (isolate_variable_sparse p var i) * ((A + B * C)/D) ^ i)) \\<le> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) ^ i / D ^ i))\n     \\<le> 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     \\<le> 0)", "by (metis (no_types, lifting) power_divide sum.cong)"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i))\n   \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) ^ i / D ^ i))\n   \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have \"...=((\\<Sum>i = 0..<deg+1. (insertion (nth_default 0 (list_update L var ((A+B*C)/D))) (isolate_variable_sparse p var i) * ((A + B * C)/D) ^ i))\\<le>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     \\<le> 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     \\<le> 0)", "using h4a"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     insertion (nth_default 0 (L[var := C]))\n      (isolate_variable_sparse p var i) =\n     insertion (nth_default 0 (L[var := (A + B * C) / D]))\n      (isolate_variable_sparse p var i)\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := C]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     \\<le> 0) =\n    ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     \\<le> 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "also"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   \\<le> 0) =\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "have \"... = (insertion (nth_default 0 (list_update L var ((A+B*C)/D))) p\\<le>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     \\<le> 0) =\n    (insertion (nth_default 0 (L[var := (A + B * C) / D])) p \\<le> 0)", "using sum_over_degree_insertion hdeg lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?d\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i = 0..<?d + 1.\n                        insertion (nth_default 0 (?L[?var := ?x]))\n                         (isolate_variable_sparse ?p ?var i) *\n                        ?x ^ i) =\n                    insertion (nth_default 0 (?L[?var := ?x])) ?p\n  MPoly_Type.degree p var = deg\n  var < length L\n\ngoal (1 subgoal):\n 1. ((\\<Sum>i = 0..<deg + 1.\n         insertion (nth_default 0 (L[var := (A + B * C) / D]))\n          (isolate_variable_sparse p var i) *\n         ((A + B * C) / D) ^ i)\n     \\<le> 0) =\n    (insertion (nth_default 0 (L[var := (A + B * C) / D])) p \\<le> 0)", "by auto"], ["proof (state)\nthis:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := (A + B * C) / D]))\n        (isolate_variable_sparse p var i) *\n       ((A + B * C) / D) ^ i)\n   \\<le> 0) =\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "finally"], ["proof (chain)\npicking this:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) *\n   D ^ (deg mod 2)\n   \\<le> 0) =\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p \\<le> 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  ((\\<Sum>i = 0..<deg + 1.\n       insertion (nth_default 0 (L[var := C]))\n        (isolate_variable_sparse p var i) *\n       (A + B * C) ^ i *\n       D ^ (deg - i)) *\n   D ^ (deg mod 2)\n   \\<le> 0) =\n  (insertion (nth_default 0 (L[var := (A + B * C) / D])) p \\<le> 0)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (A + B * C) / D]) =\n    aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])", "by(simp add: hdeg lLength insertion_add insertion_mult ha hb hd insertion_sum insertion_pow insertion_var)"], ["proof (state)\nthis:\n  aEval (Leq p) (L[var := (A + B * C) / D]) =\n  aEval (Leq (quadratic_part_1 var a b d (Leq p))) (L[var := C])\n\ngoal:\nNo subgoals!", "qed"], ["", "(*------------------------------------------------------------------------------------------------*)"], ["", "lemma quad_part_1_neq :\n  assumes lLength : \"length L > var\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg::nat)\"\n  assumes nonzero : \"D \\<noteq> 0\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) a = (A::real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) b = (B::real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) d = (D::real)\"\n  shows \"aEval (Neq p) (list_update L var ((A+B*C)/D)) = aEval (Neq(quadratic_part_1 var a b d (Neq p))) (list_update L var C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (A + B * C) / D]) =\n    aEval (Neq (quadratic_part_1 var a b d (Neq p))) (L[var := C])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (A + B * C) / D]) =\n    aEval (Neq (quadratic_part_1 var a b d (Neq p))) (L[var := C])", "have \"aEval (Eq(quadratic_part_1 var a b d (Eq p))) (list_update L var C) = aEval (Eq p) (list_update L var ((A+B*C)/D))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n    aEval (Eq p) (L[var := (A + B * C) / D])", "using quad_part_1_eq assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?deg;\n   ?D \\<noteq> 0;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D\\<rbrakk>\n  \\<Longrightarrow> aEval (Eq ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =\n                    aEval (Eq (quadratic_part_1 ?var ?a ?b ?d (Eq ?p)))\n                     (?L[?var := ?C])\n  var < length L\n  MPoly_Type.degree p var = deg\n  D \\<noteq> 0\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = A\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = B\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = D\n\ngoal (1 subgoal):\n 1. aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n    aEval (Eq p) (L[var := (A + B * C) / D])", "by blast"], ["proof (state)\nthis:\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n  aEval (Eq p) (L[var := (A + B * C) / D])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (A + B * C) / D]) =\n    aEval (Neq (quadratic_part_1 var a b d (Neq p))) (L[var := C])", "then"], ["proof (chain)\npicking this:\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n  aEval (Eq p) (L[var := (A + B * C) / D])", "show ?thesis"], ["proof (prove)\nusing this:\n  aEval (Eq (quadratic_part_1 var a b d (Eq p))) (L[var := C]) =\n  aEval (Eq p) (L[var := (A + B * C) / D])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (A + B * C) / D]) =\n    aEval (Neq (quadratic_part_1 var a b d (Neq p))) (L[var := C])", "by auto"], ["proof (state)\nthis:\n  aEval (Neq p) (L[var := (A + B * C) / D]) =\n  aEval (Neq (quadratic_part_1 var a b d (Neq p))) (L[var := C])\n\ngoal:\nNo subgoals!", "qed"], ["", "(*------------------------------------------------------------------------------------------------*)"], ["", "lemma sqrt_case : \n  assumes detGreater0 : \"SQ \\<ge> 0\"\n  shows \"((SQ^(i div 2)) * real (i mod 2) * sqrt SQ + SQ ^ (i div 2) * (1 - real (i mod 2))) = (sqrt SQ) ^ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "have h1 : \"i mod 2 = 0 \\<or> (odd i \\<and> (i mod 2 = 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i mod 2 = 0 \\<or> odd i \\<and> i mod 2 = 1", "by auto"], ["proof (state)\nthis:\n  i mod 2 = 0 \\<or> odd i \\<and> i mod 2 = 1\n\ngoal (1 subgoal):\n 1. SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "have h2 : \"i mod 2 = 0 \\<Longrightarrow> ((SQ^(i div 2)) * real (i mod 2) * sqrt SQ + SQ ^ (i div 2) * (1 - real (i mod 2))) = (sqrt SQ) ^ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i mod 2 = 0 \\<Longrightarrow>\n    SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "using detGreater0"], ["proof (prove)\nusing this:\n  0 \\<le> SQ\n\ngoal (1 subgoal):\n 1. i mod 2 = 0 \\<Longrightarrow>\n    SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> SQ; even i\\<rbrakk>\n    \\<Longrightarrow> SQ ^ (i div 2) = sqrt SQ ^ i", "by (simp add: real_sqrt_power_even)"], ["proof (state)\nthis:\n  i mod 2 = 0 \\<Longrightarrow>\n  SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n  SQ ^ (i div 2) * (1 - real (i mod 2)) =\n  sqrt SQ ^ i\n\ngoal (1 subgoal):\n 1. SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "have h3 : \"(odd i \\<and> (i mod 2 = 1)) \\<Longrightarrow> ((SQ^(i div 2)) * real (i mod 2) * sqrt SQ + SQ ^ (i div 2) * (1 - real (i mod 2))) = (sqrt SQ) ^ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd i \\<and> i mod 2 = 1 \\<Longrightarrow>\n    SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "using detGreater0"], ["proof (prove)\nusing this:\n  0 \\<le> SQ\n\ngoal (1 subgoal):\n 1. odd i \\<and> i mod 2 = 1 \\<Longrightarrow>\n    SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> SQ; odd i; i mod 2 = Suc 0\\<rbrakk>\n    \\<Longrightarrow> SQ ^ (i div 2) * sqrt SQ = sqrt SQ ^ i", "by (smt One_nat_def add_Suc_right mult.commute nat_arith.rule0 odd_two_times_div_two_succ power.simps(2) power_mult real_sqrt_pow2)"], ["proof (state)\nthis:\n  odd i \\<and> i mod 2 = 1 \\<Longrightarrow>\n  SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n  SQ ^ (i div 2) * (1 - real (i mod 2)) =\n  sqrt SQ ^ i\n\ngoal (1 subgoal):\n 1. SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "using h1 h2 h3"], ["proof (prove)\nusing this:\n  i mod 2 = 0 \\<or> odd i \\<and> i mod 2 = 1\n  i mod 2 = 0 \\<Longrightarrow>\n  SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n  SQ ^ (i div 2) * (1 - real (i mod 2)) =\n  sqrt SQ ^ i\n  odd i \\<and> i mod 2 = 1 \\<Longrightarrow>\n  SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n  SQ ^ (i div 2) * (1 - real (i mod 2)) =\n  sqrt SQ ^ i\n\ngoal (1 subgoal):\n 1. SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n    SQ ^ (i div 2) * (1 - real (i mod 2)) =\n    sqrt SQ ^ i", "by linarith"], ["proof (state)\nthis:\n  SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n  SQ ^ (i div 2) * (1 - real (i mod 2)) =\n  sqrt SQ ^ i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_over_sqrt :\n  assumes detGreater0 : \"SQ \\<ge> 0\"\n  shows \"(\\<Sum>i\\<in>{0..<n+1}. ((f i::real) * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ +f i * SQ ^ (i div 2) * (1 - real (i mod 2))))\n        =(\\<Sum>i\\<in>{0..<n+1}. ((f i::real) * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<n + 1. f i * sqrt SQ ^ i)", "using sqrt_case detGreater0"], ["proof (prove)\nusing this:\n  0 \\<le> ?SQ \\<Longrightarrow>\n  ?SQ ^ (?i div 2) * real (?i mod 2) * sqrt ?SQ +\n  ?SQ ^ (?i div 2) * (1 - real (?i mod 2)) =\n  sqrt ?SQ ^ ?i\n  0 \\<le> SQ\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<n + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<n + 1. f i * sqrt SQ ^ i)", "by (metis (no_types, hide_lams) distrib_left mult.assoc)"], ["", "lemma quad_part_2_eq :\n  assumes lLength : \"length L > var\"\n  assumes detGreater0 : \"SQ\\<ge>0\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg ::nat)\"\n  assumes hsq : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) sq = (SQ::real)\"\n  shows \"aEval (Eq p) (list_update L var (sqrt SQ)) = aEval (Eq(quadratic_part_2 var sq p)) (list_update L var (sqrt SQ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := sqrt SQ]) =\n    aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := sqrt SQ]) =\n    aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "define f where \"f i = insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i)\" for i"], ["proof (state)\nthis:\n  f ?i =\n  insertion (nth_default 0 (L[var := sqrt SQ]))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := sqrt SQ]) =\n    aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have h1a : \"(\\<Sum>i\\<in>{0..<deg+1}. (f i * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ +f i * SQ ^ (i div 2) * (1 - real (i mod 2))))\n             =(\\<Sum>i\\<in>{0..<deg+1}. (f i * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)", "using sum_over_sqrt detGreater0"], ["proof (prove)\nusing this:\n  0 \\<le> ?SQ \\<Longrightarrow>\n  (\\<Sum>i = 0..<?n + 1.\n      ?f i * ?SQ ^ (i div 2) * real (i mod 2) * sqrt ?SQ +\n      ?f i * ?SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<?n + 1. ?f i * sqrt ?SQ ^ i)\n  0 \\<le> SQ\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n      f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := sqrt SQ]) =\n    aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have \"(\\<Sum>i\\<in>{0..<deg+1}. (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i) * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ + (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i)) * SQ ^ (i div 2) * (1 - real (i mod 2))))\n             =(\\<Sum>i\\<in>{0..<deg+1}. (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i) * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        real (i mod 2) *\n        sqrt SQ +\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i)", "using h1a f_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<deg + 1.\n      f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n      f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)\n  f ?i =\n  insertion (nth_default 0 (L[var := sqrt SQ]))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        real (i mod 2) *\n        sqrt SQ +\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := sqrt SQ]) =\n    aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := sqrt SQ]) =\n    aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have \"... = insertion (nth_default 0 (list_update L var (sqrt SQ))) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i) =\n    insertion (nth_default 0 (L[var := sqrt SQ])) p", "using sum_over_degree_insertion hdeg lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?d\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i = 0..<?d + 1.\n                        insertion (nth_default 0 (?L[?var := ?x]))\n                         (isolate_variable_sparse ?p ?var i) *\n                        ?x ^ i) =\n                    insertion (nth_default 0 (?L[?var := ?x])) ?p\n  MPoly_Type.degree p var = deg\n  var < length L\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i) =\n    insertion (nth_default 0 (L[var := sqrt SQ])) p", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := sqrt SQ]) =\n    aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := sqrt SQ]) =\n    aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "by(simp add:hdeg hsq insertion_add insertion_sum insertion_mult insertion_pow insertion_var insertion_const lLength)"], ["proof (state)\nthis:\n  aEval (Eq p) (L[var := sqrt SQ]) =\n  aEval (Eq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quad_part_2_less :\n  assumes lLength : \"length L > var\"\n  assumes detGreater0 : \"SQ\\<ge>0\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg ::nat)\"\n  assumes hsq : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) sq = (SQ::real)\"\n  shows \"aEval (Less p) (list_update L var (sqrt SQ)) = aEval (Less(quadratic_part_2 var sq p)) (list_update L var (sqrt SQ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := sqrt SQ]) =\n    aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := sqrt SQ]) =\n    aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "define f where \"f i = insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i)\" for i"], ["proof (state)\nthis:\n  f ?i =\n  insertion (nth_default 0 (L[var := sqrt SQ]))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := sqrt SQ]) =\n    aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have h1a : \"(\\<Sum>i\\<in>{0..<deg+1}. (f i * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ +f i * SQ ^ (i div 2) * (1 - real (i mod 2))))\n             =(\\<Sum>i\\<in>{0..<deg+1}. (f i * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)", "using sum_over_sqrt detGreater0"], ["proof (prove)\nusing this:\n  0 \\<le> ?SQ \\<Longrightarrow>\n  (\\<Sum>i = 0..<?n + 1.\n      ?f i * ?SQ ^ (i div 2) * real (i mod 2) * sqrt ?SQ +\n      ?f i * ?SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<?n + 1. ?f i * sqrt ?SQ ^ i)\n  0 \\<le> SQ\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n      f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := sqrt SQ]) =\n    aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have \"(\\<Sum>i\\<in>{0..<deg+1}. (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i) * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ + (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i)) * SQ ^ (i div 2) * (1 - real (i mod 2))))\n             =(\\<Sum>i\\<in>{0..<deg+1}. (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i) * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        real (i mod 2) *\n        sqrt SQ +\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i)", "using h1a f_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<deg + 1.\n      f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n      f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)\n  f ?i =\n  insertion (nth_default 0 (L[var := sqrt SQ]))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        real (i mod 2) *\n        sqrt SQ +\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := sqrt SQ]) =\n    aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := sqrt SQ]) =\n    aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have \"... = insertion (nth_default 0 (list_update L var (sqrt SQ))) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i) =\n    insertion (nth_default 0 (L[var := sqrt SQ])) p", "using sum_over_degree_insertion hdeg lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?d\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i = 0..<?d + 1.\n                        insertion (nth_default 0 (?L[?var := ?x]))\n                         (isolate_variable_sparse ?p ?var i) *\n                        ?x ^ i) =\n                    insertion (nth_default 0 (?L[?var := ?x])) ?p\n  MPoly_Type.degree p var = deg\n  var < length L\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i) =\n    insertion (nth_default 0 (L[var := sqrt SQ])) p", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := sqrt SQ]) =\n    aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := sqrt SQ]) =\n    aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "by(simp add:hdeg hsq insertion_add insertion_sum insertion_mult insertion_pow insertion_var insertion_const lLength)"], ["proof (state)\nthis:\n  aEval (Less p) (L[var := sqrt SQ]) =\n  aEval (Less (quadratic_part_2 var sq p)) (L[var := sqrt SQ])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quad_part_2_neq :\n  assumes lLength : \"length L > var\"\n  assumes detGreater0 : \"SQ\\<ge>0\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg ::nat)\"\n  assumes hsq : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) sq = (SQ::real)\"\n  shows \"aEval (Neq p) (list_update L var (sqrt SQ)) = aEval (Neq(quadratic_part_2 var sq p)) (list_update L var (sqrt SQ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := sqrt SQ]) =\n    aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := sqrt SQ]) =\n    aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "define f where \"f i = insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i)\" for i"], ["proof (state)\nthis:\n  f ?i =\n  insertion (nth_default 0 (L[var := sqrt SQ]))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := sqrt SQ]) =\n    aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have h1a : \"(\\<Sum>i\\<in>{0..<deg+1}. (f i * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ +f i * SQ ^ (i div 2) * (1 - real (i mod 2))))\n             =(\\<Sum>i\\<in>{0..<deg+1}. (f i * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)", "using sum_over_sqrt detGreater0"], ["proof (prove)\nusing this:\n  0 \\<le> ?SQ \\<Longrightarrow>\n  (\\<Sum>i = 0..<?n + 1.\n      ?f i * ?SQ ^ (i div 2) * real (i mod 2) * sqrt ?SQ +\n      ?f i * ?SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<?n + 1. ?f i * sqrt ?SQ ^ i)\n  0 \\<le> SQ\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n      f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := sqrt SQ]) =\n    aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have \"(\\<Sum>i\\<in>{0..<deg+1}. (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i) * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ + (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i)) * SQ ^ (i div 2) * (1 - real (i mod 2))))\n             =(\\<Sum>i\\<in>{0..<deg+1}. (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i) * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        real (i mod 2) *\n        sqrt SQ +\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i)", "using h1a f_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<deg + 1.\n      f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n      f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)\n  f ?i =\n  insertion (nth_default 0 (L[var := sqrt SQ]))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        real (i mod 2) *\n        sqrt SQ +\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := sqrt SQ]) =\n    aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := sqrt SQ]) =\n    aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have \"... = insertion (nth_default 0 (list_update L var (sqrt SQ))) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i) =\n    insertion (nth_default 0 (L[var := sqrt SQ])) p", "using sum_over_degree_insertion hdeg lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?d\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i = 0..<?d + 1.\n                        insertion (nth_default 0 (?L[?var := ?x]))\n                         (isolate_variable_sparse ?p ?var i) *\n                        ?x ^ i) =\n                    insertion (nth_default 0 (?L[?var := ?x])) ?p\n  MPoly_Type.degree p var = deg\n  var < length L\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i) =\n    insertion (nth_default 0 (L[var := sqrt SQ])) p", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := sqrt SQ]) =\n    aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := sqrt SQ]) =\n    aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "by(simp add:hdeg hsq insertion_add insertion_sum insertion_mult insertion_pow insertion_var insertion_const lLength)"], ["proof (state)\nthis:\n  aEval (Neq p) (L[var := sqrt SQ]) =\n  aEval (Neq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quad_part_2_leq :\n  assumes lLength : \"length L > var\"\n  assumes detGreater0 : \"SQ\\<ge>0\"\n  assumes hdeg : \"MPoly_Type.degree (p::real mpoly) var = (deg ::nat)\"\n  assumes hsq : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) sq = (SQ::real)\"\n  shows \"aEval (Leq p) (list_update L var (sqrt SQ)) = aEval (Leq(quadratic_part_2 var sq p)) (list_update L var (sqrt SQ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := sqrt SQ]) =\n    aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := sqrt SQ]) =\n    aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "define f where \"f i = insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i)\" for i"], ["proof (state)\nthis:\n  f ?i =\n  insertion (nth_default 0 (L[var := sqrt SQ]))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := sqrt SQ]) =\n    aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have h1a : \"(\\<Sum>i\\<in>{0..<deg+1}. (f i * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ +f i * SQ ^ (i div 2) * (1 - real (i mod 2))))\n             =(\\<Sum>i\\<in>{0..<deg+1}. (f i * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)", "using sum_over_sqrt detGreater0"], ["proof (prove)\nusing this:\n  0 \\<le> ?SQ \\<Longrightarrow>\n  (\\<Sum>i = 0..<?n + 1.\n      ?f i * ?SQ ^ (i div 2) * real (i mod 2) * sqrt ?SQ +\n      ?f i * ?SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<?n + 1. ?f i * sqrt ?SQ ^ i)\n  0 \\<le> SQ\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n        f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n      f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := sqrt SQ]) =\n    aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have \"(\\<Sum>i\\<in>{0..<deg+1}. (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i) * (SQ^(i div 2)) * real (i mod 2) * sqrt SQ + (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i)) * SQ ^ (i div 2) * (1 - real (i mod 2))))\n             =(\\<Sum>i\\<in>{0..<deg+1}. (insertion (nth_default 0 (list_update L var (sqrt SQ))) (isolate_variable_sparse p var i) * ((sqrt SQ)^i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        real (i mod 2) *\n        sqrt SQ +\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i)", "using h1a f_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<deg + 1.\n      f i * SQ ^ (i div 2) * real (i mod 2) * sqrt SQ +\n      f i * SQ ^ (i div 2) * (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1. f i * sqrt SQ ^ i)\n  f ?i =\n  insertion (nth_default 0 (L[var := sqrt SQ]))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        real (i mod 2) *\n        sqrt SQ +\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        SQ ^ (i div 2) *\n        (1 - real (i mod 2))) =\n    (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := sqrt SQ]) =\n    aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := sqrt SQ]) =\n    aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "have \"... = insertion (nth_default 0 (list_update L var (sqrt SQ))) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i) =\n    insertion (nth_default 0 (L[var := sqrt SQ])) p", "using sum_over_degree_insertion hdeg lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?d\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i = 0..<?d + 1.\n                        insertion (nth_default 0 (?L[?var := ?x]))\n                         (isolate_variable_sparse ?p ?var i) *\n                        ?x ^ i) =\n                    insertion (nth_default 0 (?L[?var := ?x])) ?p\n  MPoly_Type.degree p var = deg\n  var < length L\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<deg + 1.\n        insertion (nth_default 0 (L[var := sqrt SQ]))\n         (isolate_variable_sparse p var i) *\n        sqrt SQ ^ i) =\n    insertion (nth_default 0 (L[var := sqrt SQ])) p", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      sqrt SQ ^ i) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := sqrt SQ]) =\n    aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<deg + 1.\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      real (i mod 2) *\n      sqrt SQ +\n      insertion (nth_default 0 (L[var := sqrt SQ]))\n       (isolate_variable_sparse p var i) *\n      SQ ^ (i div 2) *\n      (1 - real (i mod 2))) =\n  insertion (nth_default 0 (L[var := sqrt SQ])) p\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := sqrt SQ]) =\n    aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])", "by(simp add:hdeg hsq insertion_add insertion_sum insertion_mult insertion_pow insertion_var insertion_const lLength)"], ["proof (state)\nthis:\n  aEval (Leq p) (L[var := sqrt SQ]) =\n  aEval (Leq (quadratic_part_2 var sq p)) (L[var := sqrt SQ])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quad_part_2_deg :\n  assumes sqfree : \"(var::nat)\\<notin>vars(sq::real mpoly)\"\n  shows \"MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "define deg where \"deg = MPoly_Type.degree (p::real mpoly) var\""], ["proof (state)\nthis:\n  deg = MPoly_Type.degree p var\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "define f where \"f i = isolate_variable_sparse p var i * sq ^ (i div 2) * Const (real (i mod 2)) * Var var\" for i"], ["proof (state)\nthis:\n  f ?i =\n  isolate_variable_sparse p var ?i * sq ^ (?i div 2) *\n  Const (real (?i mod 2)) *\n  Var var\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "define g where \"g i = isolate_variable_sparse p var i * sq ^ (i div 2) * Const (1 - real (i mod 2))\" for i"], ["proof (state)\nthis:\n  g ?i =\n  isolate_variable_sparse p var ?i * sq ^ (?i div 2) *\n  Const (1 - real (?i mod 2))\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "have h1a : \"\\<forall>i. MPoly_Type.degree (isolate_variable_sparse p var i) var = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. MPoly_Type.degree (isolate_variable_sparse p var i) var = 0", "by (simp add: varNotIn_degree not_in_isovarspar)"], ["proof (state)\nthis:\n  \\<forall>i. MPoly_Type.degree (isolate_variable_sparse p var i) var = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "have h1b : \"\\<forall>i. MPoly_Type.degree (sq ^ (i div 2)) var = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. MPoly_Type.degree (sq ^ (i div 2)) var = 0", "by (simp add: sqfree varNotIn_degree not_in_pow)"], ["proof (state)\nthis:\n  \\<forall>i. MPoly_Type.degree (sq ^ (i div 2)) var = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "have h1c : \"\\<forall>i. MPoly_Type.degree (Const (real (i mod 2))) var = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. MPoly_Type.degree (Const (real (i mod 2))) var = 0", "using degree_const"], ["proof (prove)\nusing this:\n  MPoly_Type.degree (Const ?z) ?x = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i. MPoly_Type.degree (Const (real (i mod 2))) var = 0", "by blast"], ["proof (state)\nthis:\n  \\<forall>i. MPoly_Type.degree (Const (real (i mod 2))) var = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "have h1d : \"MPoly_Type.degree (Var var :: real mpoly) var = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree (Var var) var = 1", "using degree_one"], ["proof (prove)\nusing this:\n  MPoly_Type.degree (Var ?x) ?x = 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (Var var) var = 1", "by auto"], ["proof (state)\nthis:\n  MPoly_Type.degree (Var var) var = 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "have h1 : \"\\<forall>i<deg+1. MPoly_Type.degree (f i) var \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<deg + 1. MPoly_Type.degree (f i) var \\<le> 1", "using f_def degree_mult h1a h1b h1c h1d"], ["proof (prove)\nusing this:\n  f ?i =\n  isolate_variable_sparse p var ?i * sq ^ (?i div 2) *\n  Const (real (?i mod 2)) *\n  Var var\n  \\<lbrakk>?p \\<noteq> 0; ?q \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> MPoly_Type.degree (?p * ?q) ?v =\n                    MPoly_Type.degree ?p ?v + MPoly_Type.degree ?q ?v\n  \\<forall>i. MPoly_Type.degree (isolate_variable_sparse p var i) var = 0\n  \\<forall>i. MPoly_Type.degree (sq ^ (i div 2)) var = 0\n  \\<forall>i. MPoly_Type.degree (Const (real (i mod 2))) var = 0\n  MPoly_Type.degree (Var var) var = 1\n\ngoal (1 subgoal):\n 1. \\<forall>i<deg + 1. MPoly_Type.degree (f i) var \\<le> 1", "by (smt ExecutiblePolyProps.degree_one add.right_neutral mult.commute mult_eq_0_iff nat_le_linear not_one_le_zero)"], ["proof (state)\nthis:\n  \\<forall>i<deg + 1. MPoly_Type.degree (f i) var \\<le> 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "have h2a : \"\\<forall>i. MPoly_Type.degree (Const (1 - real (i mod 2))) var = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. MPoly_Type.degree (Const (1 - real (i mod 2))) var = 0", "using degree_const"], ["proof (prove)\nusing this:\n  MPoly_Type.degree (Const ?z) ?x = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i. MPoly_Type.degree (Const (1 - real (i mod 2))) var = 0", "by blast"], ["proof (state)\nthis:\n  \\<forall>i. MPoly_Type.degree (Const (1 - real (i mod 2))) var = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "have h2 : \"\\<forall>i<deg+1. MPoly_Type.degree (g i) var = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<deg + 1. MPoly_Type.degree (g i) var = 0", "using g_def degree_mult h1a h1b h2a"], ["proof (prove)\nusing this:\n  g ?i =\n  isolate_variable_sparse p var ?i * sq ^ (?i div 2) *\n  Const (1 - real (?i mod 2))\n  \\<lbrakk>?p \\<noteq> 0; ?q \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> MPoly_Type.degree (?p * ?q) ?v =\n                    MPoly_Type.degree ?p ?v + MPoly_Type.degree ?q ?v\n  \\<forall>i. MPoly_Type.degree (isolate_variable_sparse p var i) var = 0\n  \\<forall>i. MPoly_Type.degree (sq ^ (i div 2)) var = 0\n  \\<forall>i. MPoly_Type.degree (Const (1 - real (i mod 2))) var = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i<deg + 1. MPoly_Type.degree (g i) var = 0", "by (metis (no_types, lifting) add.right_neutral mult_eq_0_iff)"], ["proof (state)\nthis:\n  \\<forall>i<deg + 1. MPoly_Type.degree (g i) var = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "have h3 : \"\\<forall>i<deg+1. MPoly_Type.degree (f i + g i) var \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<deg + 1. MPoly_Type.degree (f i + g i) var \\<le> 1", "using h1 h2"], ["proof (prove)\nusing this:\n  \\<forall>i<deg + 1. MPoly_Type.degree (f i) var \\<le> 1\n  \\<forall>i<deg + 1. MPoly_Type.degree (g i) var = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i<deg + 1. MPoly_Type.degree (f i + g i) var \\<le> 1", "by (simp add: degree_add_leq)"], ["proof (state)\nthis:\n  \\<forall>i<deg + 1. MPoly_Type.degree (f i + g i) var \\<le> 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "using atLeastLessThanSuc_atLeastAtMost degree_sum f_def g_def h3 deg_def"], ["proof (prove)\nusing this:\n  {?l..<Suc ?u} = {?l..?u}\n  \\<forall>i\\<in>{0..?n}.\n     MPoly_Type.degree (?f i) ?var \\<le> ?x \\<Longrightarrow>\n  MPoly_Type.degree (sum ?f {0..?n}) ?var \\<le> ?x\n  f ?i =\n  isolate_variable_sparse p var ?i * sq ^ (?i div 2) *\n  Const (real (?i mod 2)) *\n  Var var\n  g ?i =\n  isolate_variable_sparse p var ?i * sq ^ (?i div 2) *\n  Const (1 - real (?i mod 2))\n  \\<forall>i<deg + 1. MPoly_Type.degree (f i + g i) var \\<le> 1\n  deg = MPoly_Type.degree p var\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1", "by auto"], ["proof (state)\nthis:\n  MPoly_Type.degree (quadratic_part_2 var sq p) var \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "(*------------------------------------------------------------------------------------------------*)"], ["", "lemma quad_equality_helper :\n  assumes lLength : \"length L > var\"\n  assumes detGreat0 : \"Cv\\<ge>0\"\n  assumes hC : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (C::real mpoly) = (Cv::real)\"\n  assumes hA : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A::real mpoly) = (Av::real)\"\n  assumes hB : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (B::real mpoly) = (Bv::real)\"\n  shows \"aEval (Eq (A + B * Var var)) (list_update L var (sqrt Cv)) = eval (And (Atom(Leq (A*B))) (Atom (Eq (A^2-B^2*C)))) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h1 : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A^2-(B^2)*C) = Av^2-(Bv^2)*Cv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var := x])) (A\\<^sup>2 - B\\<^sup>2 * C) =\n       Av\\<^sup>2 - Bv\\<^sup>2 * Cv", "by(simp add: hA hB hC insertion_add insertion_mult insertion_sub insertion_pow)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var := x])) (A\\<^sup>2 - B\\<^sup>2 * C) =\n     Av\\<^sup>2 - Bv\\<^sup>2 * Cv\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h2a : \"(Av + Bv * sqrt Cv = 0) = (Av = - Bv * sqrt Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Av + Bv * sqrt Cv = 0) = (Av = - Bv * sqrt Cv)", "by auto"], ["proof (state)\nthis:\n  (Av + Bv * sqrt Cv = 0) = (Av = - Bv * sqrt Cv)\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h2b : \"(Av = - Bv * sqrt Cv) \\<Longrightarrow> (Av^2 = (- Bv * sqrt Cv)^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Av = - Bv * sqrt Cv \\<Longrightarrow>\n    Av\\<^sup>2 = (- Bv * sqrt Cv)\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  Av = - Bv * sqrt Cv \\<Longrightarrow>\n  Av\\<^sup>2 = (- Bv * sqrt Cv)\\<^sup>2\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h2c : \"(Av^2 = (- Bv * sqrt Cv)^2) = (Av^2 = Bv^2 * (sqrt Cv)^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Av\\<^sup>2 = (- Bv * sqrt Cv)\\<^sup>2) =\n    (Av\\<^sup>2 = Bv\\<^sup>2 * (sqrt Cv)\\<^sup>2)", "by (simp add: power_mult_distrib)"], ["proof (state)\nthis:\n  (Av\\<^sup>2 = (- Bv * sqrt Cv)\\<^sup>2) =\n  (Av\\<^sup>2 = Bv\\<^sup>2 * (sqrt Cv)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h2d : \"(Av^2 = Bv^2 * (sqrt Cv)^2) = (Av^2 = Bv^2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Av\\<^sup>2 = Bv\\<^sup>2 * (sqrt Cv)\\<^sup>2) =\n    (Av\\<^sup>2 = Bv\\<^sup>2 * Cv)", "by (simp add: detGreat0)"], ["proof (state)\nthis:\n  (Av\\<^sup>2 = Bv\\<^sup>2 * (sqrt Cv)\\<^sup>2) =\n  (Av\\<^sup>2 = Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h2 : \"(Av + Bv * sqrt Cv = 0) \\<Longrightarrow> (Av^2 = Bv^2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Av + Bv * sqrt Cv = 0 \\<Longrightarrow> Av\\<^sup>2 = Bv\\<^sup>2 * Cv", "using h2a h2b h2c h2d"], ["proof (prove)\nusing this:\n  (Av + Bv * sqrt Cv = 0) = (Av = - Bv * sqrt Cv)\n  Av = - Bv * sqrt Cv \\<Longrightarrow>\n  Av\\<^sup>2 = (- Bv * sqrt Cv)\\<^sup>2\n  (Av\\<^sup>2 = (- Bv * sqrt Cv)\\<^sup>2) =\n  (Av\\<^sup>2 = Bv\\<^sup>2 * (sqrt Cv)\\<^sup>2)\n  (Av\\<^sup>2 = Bv\\<^sup>2 * (sqrt Cv)\\<^sup>2) =\n  (Av\\<^sup>2 = Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. Av + Bv * sqrt Cv = 0 \\<Longrightarrow> Av\\<^sup>2 = Bv\\<^sup>2 * Cv", "by blast"], ["proof (state)\nthis:\n  Av + Bv * sqrt Cv = 0 \\<Longrightarrow> Av\\<^sup>2 = Bv\\<^sup>2 * Cv\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h3a : \"(Av*Bv > 0) \\<Longrightarrow> (Av + Bv * sqrt Cv \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Av * Bv \\<Longrightarrow> Av + Bv * sqrt Cv \\<noteq> 0", "by (smt detGreat0 mult_nonneg_nonneg real_sqrt_ge_zero zero_less_mult_iff)"], ["proof (state)\nthis:\n  0 < Av * Bv \\<Longrightarrow> Av + Bv * sqrt Cv \\<noteq> 0\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h3 : \"(Av + Bv * sqrt Cv = 0) \\<Longrightarrow> (Av*Bv\\<le> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Av + Bv * sqrt Cv = 0 \\<Longrightarrow> Av * Bv \\<le> 0", "using h3a"], ["proof (prove)\nusing this:\n  0 < Av * Bv \\<Longrightarrow> Av + Bv * sqrt Cv \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Av + Bv * sqrt Cv = 0 \\<Longrightarrow> Av * Bv \\<le> 0", "by linarith"], ["proof (state)\nthis:\n  Av + Bv * sqrt Cv = 0 \\<Longrightarrow> Av * Bv \\<le> 0\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "have h4 : \"(Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv) \\<Longrightarrow> (Av + Bv * sqrt Cv = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv \\<Longrightarrow>\n    Av + Bv * sqrt Cv = 0", "apply(cases \"Av>0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv;\n     0 < Av\\<rbrakk>\n    \\<Longrightarrow> Av + Bv * sqrt Cv = 0\n 2. \\<lbrakk>Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv;\n     \\<not> 0 < Av\\<rbrakk>\n    \\<Longrightarrow> Av + Bv * sqrt Cv = 0", "apply (metis detGreat0 h2a h2c h2d mult_minus_left not_le power2_eq_iff real_sqrt_lt_0_iff zero_less_mult_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv;\n     \\<not> 0 < Av\\<rbrakk>\n    \\<Longrightarrow> Av + Bv * sqrt Cv = 0", "by (smt h2a real_sqrt_abs real_sqrt_mult zero_less_mult_iff)"], ["proof (state)\nthis:\n  Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv \\<Longrightarrow>\n  Av + Bv * sqrt Cv = 0\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n     (L[var := sqrt Cv])", "apply(simp add: hA hB h1 insertion_add insertion_mult insertion_var lLength)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Av + Bv * sqrt Cv = 0) =\n    (Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv)", "using h2 h3 h4"], ["proof (prove)\nusing this:\n  Av + Bv * sqrt Cv = 0 \\<Longrightarrow> Av\\<^sup>2 = Bv\\<^sup>2 * Cv\n  Av + Bv * sqrt Cv = 0 \\<Longrightarrow> Av * Bv \\<le> 0\n  Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv \\<Longrightarrow>\n  Av + Bv * sqrt Cv = 0\n\ngoal (1 subgoal):\n 1. (Av + Bv * sqrt Cv = 0) =\n    (Av * Bv \\<le> 0 \\<and> Av\\<^sup>2 = Bv\\<^sup>2 * Cv)", "by blast"], ["proof (state)\nthis:\n  aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * C))))\n   (L[var := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quadratic_sub_eq :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval (Eq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d (Eq p)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "define p1 where \"(p1::real mpoly) = quadratic_part_1 var a b d (Eq p)\""], ["proof (state)\nthis:\n  p1 = quadratic_part_1 var a b d (Eq p)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "define p2 where \"(p2::real mpoly) = quadratic_part_2 var c p1\""], ["proof (state)\nthis:\n  p2 = quadratic_part_2 var c p1\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "define A where \"A = isolate_variable_sparse p2 var 0\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "define B where \"B = isolate_variable_sparse p2 var 1\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h3c : \"MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1", "using freeC quad_part_2_deg p2_def"], ["proof (prove)\nusing this:\n  var \\<notin> vars c\n  ?var \\<notin> vars ?sq \\<Longrightarrow>\n  MPoly_Type.degree (quadratic_part_2 ?var ?sq ?p) ?var \\<le> 1\n  p2 = quadratic_part_2 var c p1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1", "by (meson le_neq_implies_less less_one)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h3d : \"MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0", "by(simp add: B_def isovar_greater_degree)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0", "have h3f : \"MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\""], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var", "by(simp add: h3d A_def degree0isovarspar)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h3g1 : \"MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n    p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)", "using sum_over_zero"], ["proof (prove)\nusing this:\n  ?mp =\n  (\\<Sum>i\\<le>MPoly_Type.degree ?mp ?x.\n      isolate_variable_sparse ?mp ?x i * Var ?x ^ i)\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n    p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)", "by metis"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n  p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h3g2a : \"\\<forall>f. (\\<Sum>i::nat\\<le>1. f i) = f 0 + f 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f. sum f {..1} = f 0 + f 1", "by simp"], ["proof (state)\nthis:\n  \\<forall>f. sum f {..1} = f 0 + f 1\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h3g2 : \"(\\<Sum>i::nat\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) = \n                isolate_variable_sparse p2 var 0 * Var var ^ 0 + isolate_variable_sparse p2 var 1 * Var var ^ 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n    isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n    isolate_variable_sparse p2 var 1 * Var var ^ 1", "using h3g2a"], ["proof (prove)\nusing this:\n  \\<forall>f. sum f {..1} = f 0 + f 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n    isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n    isolate_variable_sparse p2 var 1 * Var var ^ 1", "by blast"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n  isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n  isolate_variable_sparse p2 var 1 * Var var ^ 1\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h3g : \"MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var", "apply(simp add: sum_over_zero A_def B_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = Suc 0 \\<Longrightarrow>\n    p2 =\n    isolate_variable_sparse p2 var 0 +\n    isolate_variable_sparse p2 var (Suc 0) * Var var", "using h3g1 h3g2"], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n  p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\n  (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n  isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n  isolate_variable_sparse p2 var 1 * Var var ^ 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = Suc 0 \\<Longrightarrow>\n    p2 =\n    isolate_variable_sparse p2 var 0 +\n    isolate_variable_sparse p2 var (Suc 0) * Var var", "by (metis (no_types, lifting) One_nat_def mult_cancel_left2 power_0 power_one_right)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h3h : \"p2 = A + B * Var var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p2 = A + B * Var var", "using h3c h3f h3g"], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. p2 = A + B * Var var", "by auto"], ["proof (state)\nthis:\n  p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h4a : \"\\<exists>x::real. \\<forall>y::real. insertion (nth_default 0 (list_update L var y)) A = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x", "using not_contains_insertion not_in_isovarspar A_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h4b : \"\\<exists>x::real. \\<forall>y::real. insertion (nth_default 0 (list_update L var y)) B = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x", "using not_contains_insertion not_in_isovarspar B_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have \"aEval (Eq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) =  aEval (Eq p1) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    aEval (Eq p1) (L[var := sqrt Cv])", "using p1_def quad_part_1_eq nonzero ha hb hd lLength"], ["proof (prove)\nusing this:\n  p1 = quadratic_part_1 var a b d (Eq p)\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?deg;\n   ?D \\<noteq> 0;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D\\<rbrakk>\n  \\<Longrightarrow> aEval (Eq ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =\n                    aEval (Eq (quadratic_part_1 ?var ?a ?b ?d (Eq ?p)))\n                     (?L[?var := ?C])\n  Dv \\<noteq> 0\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    aEval (Eq p1) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  aEval (Eq p1) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  aEval (Eq p1) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have h2 : \"... = aEval (Eq p2) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq p1) (L[var := sqrt Cv]) = aEval (Eq p2) (L[var := sqrt Cv])", "using p2_def quad_part_2_eq lLength detGreater0 hc"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  \\<lbrakk>?var < length ?L; 0 \\<le> ?SQ; MPoly_Type.degree ?p ?var = ?deg;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?sq = ?SQ\\<rbrakk>\n  \\<Longrightarrow> aEval (Eq ?p) (?L[?var := sqrt ?SQ]) =\n                    aEval (Eq (quadratic_part_2 ?var ?sq ?p))\n                     (?L[?var := sqrt ?SQ])\n  var < length L\n  0 \\<le> Cv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n\ngoal (1 subgoal):\n 1. aEval (Eq p1) (L[var := sqrt Cv]) = aEval (Eq p2) (L[var := sqrt Cv])", "by metis"], ["proof (state)\nthis:\n  aEval (Eq p1) (L[var := sqrt Cv]) = aEval (Eq p2) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Eq p1) (L[var := sqrt Cv]) = aEval (Eq p2) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have \"... = aEval (Eq (A + B * Var var)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq p2) (L[var := sqrt Cv]) =\n    aEval (Eq (A + B * Var var)) (L[var := sqrt Cv])", "using h3h"], ["proof (prove)\nusing this:\n  p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Eq p2) (L[var := sqrt Cv]) =\n    aEval (Eq (A + B * Var var)) (L[var := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  aEval (Eq p2) (L[var := sqrt Cv]) =\n  aEval (Eq (A + B * Var var)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Eq p2) (L[var := sqrt Cv]) =\n  aEval (Eq (A + B * Var var)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have \"... = eval (And (Atom(Leq (A*B))) (Atom (Eq (A^2-B^2*c)))) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv])", "using quad_equality_helper hc detGreater0 h4a h4b lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; 0 \\<le> ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?C = ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?A = ?Av;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?B = ?Bv\\<rbrakk>\n  \\<Longrightarrow> aEval (Eq (?A + ?B * Var ?var)) (?L[?var := sqrt ?Cv]) =\n                    eval\n                     (And (fm.Atom (Leq (?A * ?B)))\n                       (fm.Atom (Eq (?A\\<^sup>2 - ?B\\<^sup>2 * ?C))))\n                     (?L[?var := sqrt ?Cv])\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  0 \\<le> Cv\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "have \"... = eval (quadratic_sub var a b c d (Eq p)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "using p2_def A_def B_def p1_def quadratic_sub.simps(1)"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  p1 = quadratic_part_1 var a b d (Eq p)\n  quadratic_sub ?var ?a ?b ?c ?d (Eq ?p) =\n  (let p1 = quadratic_part_1 ?var ?a ?b ?d (Eq ?p);\n       p2 = quadratic_part_2 ?var ?c p1;\n       A = isolate_variable_sparse p2 ?var 0;\n       B = isolate_variable_sparse p2 ?var 1\n   in And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * ?c))))\n\ngoal (1 subgoal):\n 1. eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "by metis"], ["proof (state)\nthis:\n  eval\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv]) =\n  eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "finally"], ["proof (chain)\npicking this:\n  aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "show ?thesis"], ["proof (prove)\nusing this:\n  aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Eq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Eq p)) (L[var := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "(*------------------------------------------------------------------------------------------------*)"], ["", "lemma quadratic_sub_less_helper :\n  assumes lLength : \"length L > var\"\n  assumes detGreat0 : \"Cv\\<ge>0\"\n  assumes hC : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (C::real mpoly) = (Cv::real)\"\n  assumes hA : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A::real mpoly) = (Av::real)\"\n  assumes hB : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (B::real mpoly) = (Bv::real)\"\n  shows \"aEval (Less (A + B * Var var)) (list_update L var (sqrt Cv)) = eval\n     (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (Or (fm.Atom (Less A)) (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (list_update L var (sqrt Cv)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h1 : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A^2-(B^2)*C) = Av^2-(Bv^2)*Cv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var := x])) (A\\<^sup>2 - B\\<^sup>2 * C) =\n       Av\\<^sup>2 - Bv\\<^sup>2 * Cv", "by(simp add: hA hB hC insertion_add insertion_mult insertion_sub insertion_pow)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var := x])) (A\\<^sup>2 - B\\<^sup>2 * C) =\n     Av\\<^sup>2 - Bv\\<^sup>2 * Cv\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h2 : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) ((B^2)*C-A^2) = (Bv^2)*Cv-Av^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var := x])) (B\\<^sup>2 * C - A\\<^sup>2) =\n       Bv\\<^sup>2 * Cv - Av\\<^sup>2", "by(simp add: hA hB hC insertion_add insertion_mult insertion_sub insertion_pow)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var := x])) (B\\<^sup>2 * C - A\\<^sup>2) =\n     Bv\\<^sup>2 * Cv - Av\\<^sup>2\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h3 : \"Av=0 \\<Longrightarrow> Bv=0 \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av = 0; Bv = 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                      (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and>\n                       (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>Av = 0; Bv = 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h4 : \"Av<0 \\<Longrightarrow> Bv\\<le>0 \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; Bv \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                      (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and>\n                       (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "by (metis add.right_neutral add_mono_thms_linordered_field(5) detGreat0 less_eq_real_def mult_less_0_iff mult_zero_class.mult_zero_left mult_zero_class.mult_zero_right real_sqrt_eq_zero_cancel_iff real_sqrt_gt_0_iff)"], ["proof (state)\nthis:\n  \\<lbrakk>Av < 0; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h5a : \"Av\\<ge>0 \\<Longrightarrow> Bv\\<le>0 \\<Longrightarrow> (Av < -Bv * sqrt Cv) \\<Longrightarrow> (Av\\<^sup>2 < Bv\\<^sup>2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av < - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Av\\<^sup>2 < Bv\\<^sup>2 * Cv", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av < - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Av\\<^sup>2 < Bv\\<^sup>2 * Cv", "assume a1: \"0 \\<le> Av\""], ["proof (state)\nthis:\n  0 \\<le> Av\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av < - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Av\\<^sup>2 < Bv\\<^sup>2 * Cv", "assume a2: \"Av < - Bv * sqrt Cv\""], ["proof (state)\nthis:\n  Av < - Bv * sqrt Cv\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av < - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Av\\<^sup>2 < Bv\\<^sup>2 * Cv", "assume \"Bv \\<le> 0\""], ["proof (state)\nthis:\n  Bv \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av < - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Av\\<^sup>2 < Bv\\<^sup>2 * Cv", "then"], ["proof (chain)\npicking this:\n  Bv \\<le> 0", "have \"Av < sqrt (Cv * (Bv * Bv))\""], ["proof (prove)\nusing this:\n  Bv \\<le> 0\n\ngoal (1 subgoal):\n 1. Av < sqrt (Cv * (Bv * Bv))", "using a2"], ["proof (prove)\nusing this:\n  Bv \\<le> 0\n  Av < - Bv * sqrt Cv\n\ngoal (1 subgoal):\n 1. Av < sqrt (Cv * (Bv * Bv))", "by (simp add: mult.commute real_sqrt_mult)"], ["proof (state)\nthis:\n  Av < sqrt (Cv * (Bv * Bv))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av < - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Av\\<^sup>2 < Bv\\<^sup>2 * Cv", "then"], ["proof (chain)\npicking this:\n  Av < sqrt (Cv * (Bv * Bv))", "show ?thesis"], ["proof (prove)\nusing this:\n  Av < sqrt (Cv * (Bv * Bv))\n\ngoal (1 subgoal):\n 1. Av\\<^sup>2 < Bv\\<^sup>2 * Cv", "using a1"], ["proof (prove)\nusing this:\n  Av < sqrt (Cv * (Bv * Bv))\n  0 \\<le> Av\n\ngoal (1 subgoal):\n 1. Av\\<^sup>2 < Bv\\<^sup>2 * Cv", "by (metis (no_types) mult.commute power2_eq_square real_sqrt_less_iff real_sqrt_mult real_sqrt_pow2_iff)"], ["proof (state)\nthis:\n  Av\\<^sup>2 < Bv\\<^sup>2 * Cv\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av < - Bv * sqrt Cv\\<rbrakk>\n  \\<Longrightarrow> Av\\<^sup>2 < Bv\\<^sup>2 * Cv\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h5b : \"Av\\<ge>0 \\<Longrightarrow> Bv\\<le>0 \\<Longrightarrow> (Av\\<^sup>2 < Bv\\<^sup>2 * Cv) \\<Longrightarrow> (Av < -Bv * sqrt Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av\\<^sup>2 < Bv\\<^sup>2 * Cv\\<rbrakk>\n    \\<Longrightarrow> Av < - Bv * sqrt Cv", "using real_less_rsqrt real_sqrt_mult"], ["proof (prove)\nusing this:\n  ?x\\<^sup>2 < ?y \\<Longrightarrow> ?x < sqrt ?y\n  sqrt (?x * ?y) = sqrt ?x * sqrt ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av\\<^sup>2 < Bv\\<^sup>2 * Cv\\<rbrakk>\n    \\<Longrightarrow> Av < - Bv * sqrt Cv", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av\\<^sup>2 < Bv\\<^sup>2 * Cv\\<rbrakk>\n  \\<Longrightarrow> Av < - Bv * sqrt Cv\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h5 : \"Av\\<ge>0 \\<Longrightarrow> Bv\\<le>0 \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                      (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and>\n                       (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "using h5a h5b"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av < - Bv * sqrt Cv\\<rbrakk>\n  \\<Longrightarrow> Av\\<^sup>2 < Bv\\<^sup>2 * Cv\n  \\<lbrakk>0 \\<le> Av; Bv \\<le> 0; Av\\<^sup>2 < Bv\\<^sup>2 * Cv\\<rbrakk>\n  \\<Longrightarrow> Av < - Bv * sqrt Cv\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; Bv \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                      (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and>\n                       (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> Av; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h6 : \"Av\\<ge>0 \\<Longrightarrow> Bv>0 \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; 0 < Bv\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                      (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and>\n                       (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "by (smt detGreat0 mult_nonneg_nonneg real_sqrt_ge_zero)"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> Av; 0 < Bv\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h7a : \"Av<0 \\<Longrightarrow> Bv>0 \\<Longrightarrow> (Av < -Bv * sqrt Cv) \\<Longrightarrow> (Bv\\<^sup>2 * Cv < Av\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; 0 < Bv; Av < - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Bv\\<^sup>2 * Cv < Av\\<^sup>2", "by (smt mult_minus_left real_sqrt_abs real_sqrt_le_mono real_sqrt_mult)"], ["proof (state)\nthis:\n  \\<lbrakk>Av < 0; 0 < Bv; Av < - Bv * sqrt Cv\\<rbrakk>\n  \\<Longrightarrow> Bv\\<^sup>2 * Cv < Av\\<^sup>2\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h7b : \"Av<0 \\<Longrightarrow> Bv>0 \\<Longrightarrow> (Bv\\<^sup>2 * Cv < Av\\<^sup>2) \\<Longrightarrow> (Av < -Bv * sqrt Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; 0 < Bv; Bv\\<^sup>2 * Cv < Av\\<^sup>2\\<rbrakk>\n    \\<Longrightarrow> Av < - Bv * sqrt Cv", "by (metis abs_of_nonneg abs_real_def add.commute less_eq_real_def mult.assoc mult_minus_left power2_eq_square real_add_less_0_iff real_sqrt_less_iff real_sqrt_mult real_sqrt_mult_self)"], ["proof (state)\nthis:\n  \\<lbrakk>Av < 0; 0 < Bv; Bv\\<^sup>2 * Cv < Av\\<^sup>2\\<rbrakk>\n  \\<Longrightarrow> Av < - Bv * sqrt Cv\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "have h7 : \"Av<0 \\<Longrightarrow> Bv>0 \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; 0 < Bv\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                      (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and>\n                       (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "using h7a h7b"], ["proof (prove)\nusing this:\n  \\<lbrakk>Av < 0; 0 < Bv; Av < - Bv * sqrt Cv\\<rbrakk>\n  \\<Longrightarrow> Bv\\<^sup>2 * Cv < Av\\<^sup>2\n  \\<lbrakk>Av < 0; 0 < Bv; Bv\\<^sup>2 * Cv < Av\\<^sup>2\\<rbrakk>\n  \\<Longrightarrow> Av < - Bv * sqrt Cv\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; 0 < Bv\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                      (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and>\n                       (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>Av < 0; 0 < Bv\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n     (L[var := sqrt Cv])", "apply(simp add: hA hB h1 h2 insertion_add insertion_mult insertion_var lLength)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Av + Bv * sqrt Cv < 0) =\n    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n     Bv \\<le> 0 \\<and> (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "using h3 h4 h5 h6 h7"], ["proof (prove)\nusing this:\n  \\<lbrakk>Av = 0; Bv = 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n  \\<lbrakk>Av < 0; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n  \\<lbrakk>0 \\<le> Av; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n  \\<lbrakk>0 \\<le> Av; 0 < Bv\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n  \\<lbrakk>Av < 0; 0 < Bv\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv < 0) =\n                    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and>\n                     (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))\n\ngoal (1 subgoal):\n 1. (Av + Bv * sqrt Cv < 0) =\n    (Av < 0 \\<and> Bv\\<^sup>2 * Cv < Av\\<^sup>2 \\<or>\n     Bv \\<le> 0 \\<and> (Av < 0 \\<or> Av\\<^sup>2 < Bv\\<^sup>2 * Cv))", "by smt"], ["proof (state)\nthis:\n  aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * C - A\\<^sup>2))))\n     (And (fm.Atom (Leq B))\n       (Or (fm.Atom (Less A))\n         (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * C))))))\n   (L[var := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quadratic_sub_less :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval (Less p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d (Less p)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "define p1 where \"(p1::real mpoly) = quadratic_part_1 var a b d (Less p)\""], ["proof (state)\nthis:\n  p1 = quadratic_part_1 var a b d (Less p)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "define p2 where \"(p2::real mpoly) = quadratic_part_2 var c p1\""], ["proof (state)\nthis:\n  p2 = quadratic_part_2 var c p1\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "define A where \"A = isolate_variable_sparse p2 var 0\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "define B where \"B = isolate_variable_sparse p2 var 1\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h3b : \"MPoly_Type.degree p2 var \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var \\<le> 1", "using freeC quad_part_2_deg p2_def"], ["proof (prove)\nusing this:\n  var \\<notin> vars c\n  ?var \\<notin> vars ?sq \\<Longrightarrow>\n  MPoly_Type.degree (quadratic_part_2 ?var ?sq ?p) ?var \\<le> 1\n  p2 = quadratic_part_2 var c p1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var \\<le> 1", "by blast"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var \\<le> 1\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  MPoly_Type.degree p2 var \\<le> 1", "have h3c : \"MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\""], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var \\<le> 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1", "by auto"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h3d : \"MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0", "by(simp add: B_def isovar_greater_degree)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0", "have h3f : \"MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\""], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var", "by(simp add: h3d A_def degree0isovarspar)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h3g1 : \"MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n    p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)", "using sum_over_zero"], ["proof (prove)\nusing this:\n  ?mp =\n  (\\<Sum>i\\<le>MPoly_Type.degree ?mp ?x.\n      isolate_variable_sparse ?mp ?x i * Var ?x ^ i)\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n    p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)", "by metis"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n  p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h3g2a : \"\\<forall>f. (\\<Sum>i::nat\\<le>1. f i) = f 0 + f 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f. sum f {..1} = f 0 + f 1", "by simp"], ["proof (state)\nthis:\n  \\<forall>f. sum f {..1} = f 0 + f 1\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h3g2 : \"(\\<Sum>i::nat\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) = \n                isolate_variable_sparse p2 var 0 * Var var ^ 0 + isolate_variable_sparse p2 var 1 * Var var ^ 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n    isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n    isolate_variable_sparse p2 var 1 * Var var ^ 1", "using h3g2a"], ["proof (prove)\nusing this:\n  \\<forall>f. sum f {..1} = f 0 + f 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n    isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n    isolate_variable_sparse p2 var 1 * Var var ^ 1", "by blast"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n  isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n  isolate_variable_sparse p2 var 1 * Var var ^ 1\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h3g : \"MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var", "apply(simp add: sum_over_zero A_def B_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = Suc 0 \\<Longrightarrow>\n    p2 =\n    isolate_variable_sparse p2 var 0 +\n    isolate_variable_sparse p2 var (Suc 0) * Var var", "using h3g1 h3g2"], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n  p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\n  (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n  isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n  isolate_variable_sparse p2 var 1 * Var var ^ 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = Suc 0 \\<Longrightarrow>\n    p2 =\n    isolate_variable_sparse p2 var 0 +\n    isolate_variable_sparse p2 var (Suc 0) * Var var", "by (metis (no_types, lifting) One_nat_def mult_cancel_left2 power_0 power_one_right)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h3h : \"p2 = A + B * Var var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p2 = A + B * Var var", "using h3c h3f h3g"], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. p2 = A + B * Var var", "by auto"], ["proof (state)\nthis:\n  p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h4a : \"\\<exists>x::real. \\<forall>y::real. insertion (nth_default 0(list_update L var y)) A = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x", "using not_contains_insertion not_in_isovarspar A_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h4b : \"\\<exists>x::real. \\<forall>y::real. insertion (nth_default 0(list_update L var y)) B = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x", "using not_contains_insertion not_in_isovarspar B_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have h1 : \"aEval (Less p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = aEval (Less (quadratic_part_1 var a b d (Less p))) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := sqrt Cv])", "using quad_part_1_less assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?deg;\n   ?D \\<noteq> 0;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D\\<rbrakk>\n  \\<Longrightarrow> aEval (Less ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =\n                    aEval (Less (quadratic_part_1 ?var ?a ?b ?d (Less ?p)))\n                     (?L[?var := ?C])\n  var < length L\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have \"... = aEval (Less p1) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := sqrt Cv]) =\n    aEval (Less p1) (L[var := sqrt Cv])", "using p1_def"], ["proof (prove)\nusing this:\n  p1 = quadratic_part_1 var a b d (Less p)\n\ngoal (1 subgoal):\n 1. aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := sqrt Cv]) =\n    aEval (Less p1) (L[var := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := sqrt Cv]) =\n  aEval (Less p1) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Less (quadratic_part_1 var a b d (Less p))) (L[var := sqrt Cv]) =\n  aEval (Less p1) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have \"... = aEval (Less (quadratic_part_2 var c p1)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less p1) (L[var := sqrt Cv]) =\n    aEval (Less (quadratic_part_2 var c p1)) (L[var := sqrt Cv])", "using quad_part_2_less assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; 0 \\<le> ?SQ; MPoly_Type.degree ?p ?var = ?deg;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?sq = ?SQ\\<rbrakk>\n  \\<Longrightarrow> aEval (Less ?p) (?L[?var := sqrt ?SQ]) =\n                    aEval (Less (quadratic_part_2 ?var ?sq ?p))\n                     (?L[?var := sqrt ?SQ])\n  var < length L\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. aEval (Less p1) (L[var := sqrt Cv]) =\n    aEval (Less (quadratic_part_2 var c p1)) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Less p1) (L[var := sqrt Cv]) =\n  aEval (Less (quadratic_part_2 var c p1)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Less p1) (L[var := sqrt Cv]) =\n  aEval (Less (quadratic_part_2 var c p1)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have \"... = aEval (Less p2) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less (quadratic_part_2 var c p1)) (L[var := sqrt Cv]) =\n    aEval (Less p2) (L[var := sqrt Cv])", "using p2_def"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n\ngoal (1 subgoal):\n 1. aEval (Less (quadratic_part_2 var c p1)) (L[var := sqrt Cv]) =\n    aEval (Less p2) (L[var := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  aEval (Less (quadratic_part_2 var c p1)) (L[var := sqrt Cv]) =\n  aEval (Less p2) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Less (quadratic_part_2 var c p1)) (L[var := sqrt Cv]) =\n  aEval (Less p2) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have \"... = aEval (Less (A + B * Var var)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less p2) (L[var := sqrt Cv]) =\n    aEval (Less (A + B * Var var)) (L[var := sqrt Cv])", "using h3h"], ["proof (prove)\nusing this:\n  p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Less p2) (L[var := sqrt Cv]) =\n    aEval (Less (A + B * Var var)) (L[var := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  aEval (Less p2) (L[var := sqrt Cv]) =\n  aEval (Less (A + B * Var var)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Less p2) (L[var := sqrt Cv]) =\n  aEval (Less (A + B * Var var)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have \"... = eval\n     (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (Or (fm.Atom (Less A)) (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n     (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n     (L[var := sqrt Cv])", "using quadratic_sub_less_helper hc detGreater0 h4a h4b lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; 0 \\<le> ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?C = ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?A = ?Av;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?B = ?Bv\\<rbrakk>\n  \\<Longrightarrow> aEval (Less (?A + ?B * Var ?var))\n                     (?L[?var := sqrt ?Cv]) =\n                    eval\n                     (Or (And (fm.Atom (Less ?A))\n                           (fm.Atom (Less (?B\\<^sup>2 * ?C - ?A\\<^sup>2))))\n                       (And (fm.Atom (Leq ?B))\n                         (Or (fm.Atom (Less ?A))\n                           (fm.Atom\n                             (Less (?A\\<^sup>2 - ?B\\<^sup>2 * ?C))))))\n                     (?L[?var := sqrt ?Cv])\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  0 \\<le> Cv\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n     (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B))\n       (Or (fm.Atom (Less A))\n         (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Less (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B))\n       (Or (fm.Atom (Less A))\n         (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "have  \"... = eval (quadratic_sub var a b c d (Less p)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n     (L[var := sqrt Cv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "using p2_def A_def B_def p1_def quadratic_sub.simps(2)"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  p1 = quadratic_part_1 var a b d (Less p)\n  quadratic_sub ?var ?a ?b ?c ?d (Less ?p) =\n  (let p1 = quadratic_part_1 ?var ?a ?b ?d (Less ?p);\n       p2 = quadratic_part_2 ?var ?c p1;\n       A = isolate_variable_sparse p2 ?var 0;\n       B = isolate_variable_sparse p2 ?var 1\n   in Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * ?c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * ?c))))))\n\ngoal (1 subgoal):\n 1. eval\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n     (L[var := sqrt Cv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "by metis"], ["proof (state)\nthis:\n  eval\n   (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B))\n       (Or (fm.Atom (Less A))\n         (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n   (L[var := sqrt Cv]) =\n  eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "finally"], ["proof (chain)\npicking this:\n  aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "show ?thesis"], ["proof (prove)\nusing this:\n  aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Less p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Less p)) (L[var := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "(*------------------------------------------------------------------------------------------------*)"], ["", "lemma quadratic_sub_leq_helper :\n  assumes lLength : \"length L > var\"\n  assumes detGreat0 : \"Cv\\<ge>0\"\n  assumes hC : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (C::real mpoly) = (Cv::real)\"\n  assumes hA : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A::real mpoly) = (Av::real)\"\n  assumes hB : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (B::real mpoly) = (Bv::real)\"\n  shows \"aEval (Leq (A + B * Var var)) (list_update L var (sqrt Cv)) = \n  eval (Or(And(Atom(Leq(A)))(Atom (Leq(B^2*C-A^2))))(And (Atom(Leq B)) (Atom(Leq (A^2-B^2*C))))) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h1 : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (A^2-(B^2)*C) = Av^2-(Bv^2)*Cv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var := x])) (A\\<^sup>2 - B\\<^sup>2 * C) =\n       Av\\<^sup>2 - Bv\\<^sup>2 * Cv", "by(simp add: hA hB hC insertion_add insertion_mult insertion_sub insertion_pow)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var := x])) (A\\<^sup>2 - B\\<^sup>2 * C) =\n     Av\\<^sup>2 - Bv\\<^sup>2 * Cv\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h2 : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) ((B^2)*C-A^2) = (Bv^2)*Cv-Av^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var := x])) (B\\<^sup>2 * C - A\\<^sup>2) =\n       Bv\\<^sup>2 * Cv - Av\\<^sup>2", "by(simp add: hA hB hC insertion_add insertion_mult insertion_sub insertion_pow)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var := x])) (B\\<^sup>2 * C - A\\<^sup>2) =\n     Bv\\<^sup>2 * Cv - Av\\<^sup>2\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h3 : \"Av=0 \\<Longrightarrow> Bv=0 \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) = (Av \\<le> 0 \\<and> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av = 0; Bv = 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                      (Av \\<le> 0 \\<and>\n                       Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>Av = 0; Bv = 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h4 : \"Av<0 \\<Longrightarrow> Bv\\<le>0 \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) = (Av \\<le> 0 \\<and> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; Bv \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                      (Av \\<le> 0 \\<and>\n                       Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "by (smt detGreat0 real_sqrt_ge_zero zero_less_mult_iff)"], ["proof (state)\nthis:\n  \\<lbrakk>Av < 0; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h5 : \"Av=0 \\<Longrightarrow> Bv\\<le>0 \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) = (Av \\<le> 0 \\<and> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av = 0; Bv \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                      (Av \\<le> 0 \\<and>\n                       Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "by (smt detGreat0 real_sqrt_ge_zero zero_less_mult_iff)"], ["proof (state)\nthis:\n  \\<lbrakk>Av = 0; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h6 : \"Av\\<ge>0 \\<Longrightarrow> Bv>0 \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) = (Av \\<le> 0 \\<and> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> Av; 0 < Bv\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                      (Av \\<le> 0 \\<and>\n                       Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "by (smt detGreat0 mult_nonneg_nonneg mult_pos_pos real_sqrt_gt_0_iff real_sqrt_zero zero_le_power2 zero_less_mult_pos zero_less_power2)"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> Av; 0 < Bv\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h7a : \"Av<0 \\<Longrightarrow> Bv>0 \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) \\<Longrightarrow> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; 0 < Bv; Av + Bv * sqrt Cv \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2", "by (smt real_sqrt_abs real_sqrt_less_mono real_sqrt_mult)"], ["proof (state)\nthis:\n  \\<lbrakk>Av < 0; 0 < Bv; Av + Bv * sqrt Cv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h7b : \"Av<0 \\<Longrightarrow> Bv>0 \\<Longrightarrow>  Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; 0 < Bv; Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2\\<rbrakk>\n    \\<Longrightarrow> Av + Bv * sqrt Cv \\<le> 0", "by (smt real_sqrt_abs real_sqrt_less_mono real_sqrt_mult)"], ["proof (state)\nthis:\n  \\<lbrakk>Av < 0; 0 < Bv; Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2\\<rbrakk>\n  \\<Longrightarrow> Av + Bv * sqrt Cv \\<le> 0\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h7 : \"Av<0 \\<Longrightarrow> Bv>0 \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) = (Av \\<le> 0 \\<and> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; 0 < Bv\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                      (Av \\<le> 0 \\<and>\n                       Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "using h7a h7b"], ["proof (prove)\nusing this:\n  \\<lbrakk>Av < 0; 0 < Bv; Av + Bv * sqrt Cv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2\n  \\<lbrakk>Av < 0; 0 < Bv; Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2\\<rbrakk>\n  \\<Longrightarrow> Av + Bv * sqrt Cv \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Av < 0; 0 < Bv\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                      (Av \\<le> 0 \\<and>\n                       Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>Av < 0; 0 < Bv\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h8c : \"(-Bv * sqrt Cv)^2 = Bv\\<^sup>2 * Cv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- Bv * sqrt Cv)\\<^sup>2 = Bv\\<^sup>2 * Cv", "by (simp add: detGreat0 power_mult_distrib)"], ["proof (state)\nthis:\n  (- Bv * sqrt Cv)\\<^sup>2 = Bv\\<^sup>2 * Cv\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h8a : \"Av>0 \\<Longrightarrow> Bv\\<le>0  \\<Longrightarrow> (Av \\<le> -Bv * sqrt Cv) \\<Longrightarrow>  Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < Av; Bv \\<le> 0; Av \\<le> - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv", "using detGreat0 h8c power_both_sides"], ["proof (prove)\nusing this:\n  0 \\<le> Cv\n  (- Bv * sqrt Cv)\\<^sup>2 = Bv\\<^sup>2 * Cv\n  \\<lbrakk>0 \\<le> ?A; 0 \\<le> ?B\\<rbrakk>\n  \\<Longrightarrow> (?A \\<le> ?B) = (?A\\<^sup>2 \\<le> ?B\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < Av; Bv \\<le> 0; Av \\<le> - Bv * sqrt Cv\\<rbrakk>\n    \\<Longrightarrow> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv", "by smt"], ["proof (state)\nthis:\n  \\<lbrakk>0 < Av; Bv \\<le> 0; Av \\<le> - Bv * sqrt Cv\\<rbrakk>\n  \\<Longrightarrow> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h8b : \"Av>0 \\<Longrightarrow> Bv\\<le>0  \\<Longrightarrow>   Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < Av; Bv \\<le> 0; Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv\\<rbrakk>\n    \\<Longrightarrow> Av + Bv * sqrt Cv \\<le> 0", "using detGreat0 h8c power_both_sides"], ["proof (prove)\nusing this:\n  0 \\<le> Cv\n  (- Bv * sqrt Cv)\\<^sup>2 = Bv\\<^sup>2 * Cv\n  \\<lbrakk>0 \\<le> ?A; 0 \\<le> ?B\\<rbrakk>\n  \\<Longrightarrow> (?A \\<le> ?B) = (?A\\<^sup>2 \\<le> ?B\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < Av; Bv \\<le> 0; Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv\\<rbrakk>\n    \\<Longrightarrow> Av + Bv * sqrt Cv \\<le> 0", "by (smt mult_minus_left real_sqrt_ge_zero zero_less_mult_iff)"], ["proof (state)\nthis:\n  \\<lbrakk>0 < Av; Bv \\<le> 0; Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv\\<rbrakk>\n  \\<Longrightarrow> Av + Bv * sqrt Cv \\<le> 0\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "have h8 : \"Av>0 \\<Longrightarrow> Bv\\<le>0 \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) = (Av \\<le> 0 \\<and> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or> Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < Av; Bv \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                      (Av \\<le> 0 \\<and>\n                       Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "using h8a h8b"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < Av; Bv \\<le> 0; Av \\<le> - Bv * sqrt Cv\\<rbrakk>\n  \\<Longrightarrow> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv\n  \\<lbrakk>0 < Av; Bv \\<le> 0; Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv\\<rbrakk>\n  \\<Longrightarrow> Av + Bv * sqrt Cv \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < Av; Bv \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                      (Av \\<le> 0 \\<and>\n                       Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                       Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>0 < Av; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n     (L[var := sqrt Cv])", "apply(simp add: hA hB h1 h2 insertion_add insertion_mult insertion_var lLength)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Av + Bv * sqrt Cv \\<le> 0) =\n    (Av \\<le> 0 \\<and> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "using h3 h4 h5 h6 h7 h8"], ["proof (prove)\nusing this:\n  \\<lbrakk>Av = 0; Bv = 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n  \\<lbrakk>Av < 0; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n  \\<lbrakk>Av = 0; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n  \\<lbrakk>0 \\<le> Av; 0 < Bv\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n  \\<lbrakk>Av < 0; 0 < Bv\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n  \\<lbrakk>0 < Av; Bv \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Av + Bv * sqrt Cv \\<le> 0) =\n                    (Av \\<le> 0 \\<and>\n                     Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n                     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)\n\ngoal (1 subgoal):\n 1. (Av + Bv * sqrt Cv \\<le> 0) =\n    (Av \\<le> 0 \\<and> Bv\\<^sup>2 * Cv \\<le> Av\\<^sup>2 \\<or>\n     Bv \\<le> 0 \\<and> Av\\<^sup>2 \\<le> Bv\\<^sup>2 * Cv)", "by smt"], ["proof (state)\nthis:\n  aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * C - A\\<^sup>2))))\n     (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * C)))))\n   (L[var := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quadratic_sub_leq :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval (Leq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d (Leq p)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "define p1 where \"(p1::real mpoly) = quadratic_part_1 var a b d (Leq p)\""], ["proof (state)\nthis:\n  p1 = quadratic_part_1 var a b d (Leq p)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "define p2 where \"(p2::real mpoly) = quadratic_part_2 var c p1\""], ["proof (state)\nthis:\n  p2 = quadratic_part_2 var c p1\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "define A where \"A = isolate_variable_sparse p2 var 0\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "define B where \"B = isolate_variable_sparse p2 var 1\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h3b : \"MPoly_Type.degree p2 var \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var \\<le> 1", "using freeC quad_part_2_deg p2_def lLength"], ["proof (prove)\nusing this:\n  var \\<notin> vars c\n  ?var \\<notin> vars ?sq \\<Longrightarrow>\n  MPoly_Type.degree (quadratic_part_2 ?var ?sq ?p) ?var \\<le> 1\n  p2 = quadratic_part_2 var c p1\n  var < length L\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var \\<le> 1", "by metis"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var \\<le> 1\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  MPoly_Type.degree p2 var \\<le> 1", "have h3c : \"MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\""], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var \\<le> 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1", "by auto"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h3d : \"MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0", "by(simp add: B_def isovar_greater_degree)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0", "have h3f : \"MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\""], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var", "by(simp add: h3d A_def degree0isovarspar)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h3g1 : \"MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n    p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)", "using sum_over_zero"], ["proof (prove)\nusing this:\n  ?mp =\n  (\\<Sum>i\\<le>MPoly_Type.degree ?mp ?x.\n      isolate_variable_sparse ?mp ?x i * Var ?x ^ i)\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n    p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)", "by metis"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n  p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h3g2a : \"\\<forall>f. (\\<Sum>i::nat\\<le>1. f i) = f 0 + f 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f. sum f {..1} = f 0 + f 1", "by simp"], ["proof (state)\nthis:\n  \\<forall>f. sum f {..1} = f 0 + f 1\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h3g2 : \"(\\<Sum>i::nat\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) = \n                isolate_variable_sparse p2 var 0 * Var var ^ 0 + isolate_variable_sparse p2 var 1 * Var var ^ 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n    isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n    isolate_variable_sparse p2 var 1 * Var var ^ 1", "using h3g2a"], ["proof (prove)\nusing this:\n  \\<forall>f. sum f {..1} = f 0 + f 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n    isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n    isolate_variable_sparse p2 var 1 * Var var ^ 1", "by blast"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n  isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n  isolate_variable_sparse p2 var 1 * Var var ^ 1\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h3g : \"MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var", "apply(simp add: sum_over_zero A_def B_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = Suc 0 \\<Longrightarrow>\n    p2 =\n    isolate_variable_sparse p2 var 0 +\n    isolate_variable_sparse p2 var (Suc 0) * Var var", "using h3g1 h3g2"], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n  p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\n  (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n  isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n  isolate_variable_sparse p2 var 1 * Var var ^ 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = Suc 0 \\<Longrightarrow>\n    p2 =\n    isolate_variable_sparse p2 var 0 +\n    isolate_variable_sparse p2 var (Suc 0) * Var var", "by (metis (no_types, lifting) One_nat_def mult_cancel_left2 power_0 power_one_right)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h3h : \"p2 = A + B * Var var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p2 = A + B * Var var", "using h3c h3f h3g"], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. p2 = A + B * Var var", "by auto"], ["proof (state)\nthis:\n  p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h4a : \"\\<exists>x::real. \\<forall>y::real. insertion (nth_default 0 (list_update L var y)) A = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x", "using not_contains_insertion not_in_isovarspar A_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h4b : \"\\<exists>x::real. \\<forall>y::real. insertion (nth_default 0 (list_update L var y)) B = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x", "using not_contains_insertion not_in_isovarspar B_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have \"aEval (Leq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = aEval (Leq p1) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    aEval (Leq p1) (L[var := sqrt Cv])", "using quad_part_1_leq nonzero ha hb hd p1_def lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?deg;\n   ?D \\<noteq> 0;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D\\<rbrakk>\n  \\<Longrightarrow> aEval (Leq ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =\n                    aEval (Leq (quadratic_part_1 ?var ?a ?b ?d (Leq ?p)))\n                     (?L[?var := ?C])\n  Dv \\<noteq> 0\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n  p1 = quadratic_part_1 var a b d (Leq p)\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    aEval (Leq p1) (L[var := sqrt Cv])", "by metis"], ["proof (state)\nthis:\n  aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  aEval (Leq p1) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  aEval (Leq p1) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have \"... = aEval (Leq p2) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq p1) (L[var := sqrt Cv]) = aEval (Leq p2) (L[var := sqrt Cv])", "using p2_def quad_part_2_leq hc detGreater0 lLength"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  \\<lbrakk>?var < length ?L; 0 \\<le> ?SQ; MPoly_Type.degree ?p ?var = ?deg;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?sq = ?SQ\\<rbrakk>\n  \\<Longrightarrow> aEval (Leq ?p) (?L[?var := sqrt ?SQ]) =\n                    aEval (Leq (quadratic_part_2 ?var ?sq ?p))\n                     (?L[?var := sqrt ?SQ])\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  0 \\<le> Cv\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Leq p1) (L[var := sqrt Cv]) = aEval (Leq p2) (L[var := sqrt Cv])", "by metis"], ["proof (state)\nthis:\n  aEval (Leq p1) (L[var := sqrt Cv]) = aEval (Leq p2) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Leq p1) (L[var := sqrt Cv]) = aEval (Leq p2) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have \"... = aEval (Leq (A + B * Var var)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq p2) (L[var := sqrt Cv]) =\n    aEval (Leq (A + B * Var var)) (L[var := sqrt Cv])", "using h3h"], ["proof (prove)\nusing this:\n  p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Leq p2) (L[var := sqrt Cv]) =\n    aEval (Leq (A + B * Var var)) (L[var := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  aEval (Leq p2) (L[var := sqrt Cv]) =\n  aEval (Leq (A + B * Var var)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Leq p2) (L[var := sqrt Cv]) =\n  aEval (Leq (A + B * Var var)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have h4 : \"... = eval\n     (Or\n      (And\n        (Atom(Leq(A)))\n        (Atom (Leq(B^2*c-A^2))))\n      (And\n        (Atom(Leq B))\n        (Atom(Leq (A^2-B^2*c)))))\n     (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n     (L[var := sqrt Cv])", "using quadratic_sub_leq_helper hc detGreater0 h4a h4b lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; 0 \\<le> ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?C = ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?A = ?Av;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?B = ?Bv\\<rbrakk>\n  \\<Longrightarrow> aEval (Leq (?A + ?B * Var ?var))\n                     (?L[?var := sqrt ?Cv]) =\n                    eval\n                     (Or (And (fm.Atom (Leq ?A))\n                           (fm.Atom (Leq (?B\\<^sup>2 * ?C - ?A\\<^sup>2))))\n                       (And (fm.Atom (Leq ?B))\n                         (fm.Atom (Leq (?A\\<^sup>2 - ?B\\<^sup>2 * ?C)))))\n                     (?L[?var := sqrt ?Cv])\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  0 \\<le> Cv\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n     (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Leq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "have \"... = eval (quadratic_sub var a b c d (Leq p)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n     (L[var := sqrt Cv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "using p1_def quadratic_sub.simps(3) p2_def A_def B_def"], ["proof (prove)\nusing this:\n  p1 = quadratic_part_1 var a b d (Leq p)\n  quadratic_sub ?var ?a ?b ?c ?d (Leq ?p) =\n  (let p1 = quadratic_part_1 ?var ?a ?b ?d (Leq ?p);\n       p2 = quadratic_part_2 ?var ?c p1;\n       A = isolate_variable_sparse p2 ?var 0;\n       B = isolate_variable_sparse p2 ?var 1\n   in Or (And (fm.Atom (Leq A))\n           (fm.Atom (Leq (B\\<^sup>2 * ?c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * ?c)))))\n  p2 = quadratic_part_2 var c p1\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. eval\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n     (L[var := sqrt Cv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "by metis"], ["proof (state)\nthis:\n  eval\n   (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n   (L[var := sqrt Cv]) =\n  eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "finally"], ["proof (chain)\npicking this:\n  aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "show ?thesis"], ["proof (prove)\nusing this:\n  aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Leq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Leq p)) (L[var := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "(*------------------------------------------------------------------------------------------------*)"], ["", "lemma quadratic_sub_neq :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval (Neq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d (Neq p)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "define p1 where \"(p1::real mpoly) = quadratic_part_1 var a b d (Neq p)\""], ["proof (state)\nthis:\n  p1 = quadratic_part_1 var a b d (Neq p)\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "define p2 where \"(p2::real mpoly) = quadratic_part_2 var c p1\""], ["proof (state)\nthis:\n  p2 = quadratic_part_2 var c p1\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "define A where \"A = isolate_variable_sparse p2 var 0\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "define B where \"B = isolate_variable_sparse p2 var 1\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h3b : \"MPoly_Type.degree p2 var \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var \\<le> 1", "using freeC quad_part_2_deg p2_def lLength"], ["proof (prove)\nusing this:\n  var \\<notin> vars c\n  ?var \\<notin> vars ?sq \\<Longrightarrow>\n  MPoly_Type.degree (quadratic_part_2 ?var ?sq ?p) ?var \\<le> 1\n  p2 = quadratic_part_2 var c p1\n  var < length L\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var \\<le> 1", "by metis"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var \\<le> 1\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  MPoly_Type.degree p2 var \\<le> 1", "have h3c : \"MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\""], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var \\<le> 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1", "by auto"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h3d : \"MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0", "by(simp add: B_def isovar_greater_degree)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0", "have h3f : \"MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\""], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> B = 0\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var", "by(simp add: h3d A_def degree0isovarspar)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h3g1 : \"MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n    p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)", "using sum_over_zero"], ["proof (prove)\nusing this:\n  ?mp =\n  (\\<Sum>i\\<le>MPoly_Type.degree ?mp ?x.\n      isolate_variable_sparse ?mp ?x i * Var ?x ^ i)\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n    p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)", "by metis"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n  p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h3g2a : \"\\<forall>f. (\\<Sum>i::nat\\<le>1. f i) = f 0 + f 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f. sum f {..1} = f 0 + f 1", "by simp"], ["proof (state)\nthis:\n  \\<forall>f. sum f {..1} = f 0 + f 1\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h3g2 : \"(\\<Sum>i::nat\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) = \n                isolate_variable_sparse p2 var 0 * Var var ^ 0 + isolate_variable_sparse p2 var 1 * Var var ^ 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n    isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n    isolate_variable_sparse p2 var 1 * Var var ^ 1", "using h3g2a"], ["proof (prove)\nusing this:\n  \\<forall>f. sum f {..1} = f 0 + f 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n    isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n    isolate_variable_sparse p2 var 1 * Var var ^ 1", "by blast"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n  isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n  isolate_variable_sparse p2 var 1 * Var var ^ 1\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h3g : \"MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var", "apply(simp add: sum_over_zero A_def B_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = Suc 0 \\<Longrightarrow>\n    p2 =\n    isolate_variable_sparse p2 var 0 +\n    isolate_variable_sparse p2 var (Suc 0) * Var var", "using h3g1 h3g2"], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow>\n  p2 = (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i)\n  (\\<Sum>i\\<le>1. isolate_variable_sparse p2 var i * Var var ^ i) =\n  isolate_variable_sparse p2 var 0 * Var var ^ 0 +\n  isolate_variable_sparse p2 var 1 * Var var ^ 1\n\ngoal (1 subgoal):\n 1. MPoly_Type.degree p2 var = Suc 0 \\<Longrightarrow>\n    p2 =\n    isolate_variable_sparse p2 var 0 +\n    isolate_variable_sparse p2 var (Suc 0) * Var var", "by (metis (no_types, lifting) One_nat_def mult_cancel_left2 power_0 power_one_right)"], ["proof (state)\nthis:\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h3h : \"p2 = A + B * Var var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p2 = A + B * Var var", "using h3c h3f h3g"], ["proof (prove)\nusing this:\n  MPoly_Type.degree p2 var = 0 \\<or> MPoly_Type.degree p2 var = 1\n  MPoly_Type.degree p2 var = 0 \\<Longrightarrow> p2 = A + B * Var var\n  MPoly_Type.degree p2 var = 1 \\<Longrightarrow> p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. p2 = A + B * Var var", "by auto"], ["proof (state)\nthis:\n  p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h4a : \"\\<exists>x::real. \\<forall>y::real. insertion (nth_default 0 (list_update L var y)) A = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x", "using not_contains_insertion not_in_isovarspar A_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h4b : \"\\<exists>x::real. \\<forall>y::real. insertion (nth_default 0 (list_update L var y)) B = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x", "using not_contains_insertion not_in_isovarspar B_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h4c : \"aEval (Eq (A + B * Var var)) (list_update L var (sqrt Cv))\n           = eval (And (Atom(Leq (A*B))) (Atom (Eq (A^2-B^2*c)))) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv])", "using quad_equality_helper hc detGreater0 h4a h4b lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; 0 \\<le> ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?C = ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?A = ?Av;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?B = ?Bv\\<rbrakk>\n  \\<Longrightarrow> aEval (Eq (?A + ?B * Var ?var)) (?L[?var := sqrt ?Cv]) =\n                    eval\n                     (And (fm.Atom (Leq (?A * ?B)))\n                       (fm.Atom (Eq (?A\\<^sup>2 - ?B\\<^sup>2 * ?C))))\n                     (?L[?var := sqrt ?Cv])\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  0 \\<le> Cv\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) A = x\n  \\<exists>x. \\<forall>y. insertion (nth_default 0 (L[var := y])) B = x\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h4d : \"aEval (Neq (A + B * Var var)) (list_update L var (sqrt Cv))\n           = (\\<not> (eval (And (Atom(Leq (A*B))) (Atom (Eq (A^2-B^2*c)))) (list_update L var (sqrt Cv))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Neq (A + B * Var var)) (L[var := sqrt Cv]) =\n    (\\<not> eval\n             (And (fm.Atom (Leq (A * B)))\n               (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n             (L[var := sqrt Cv]))", "using aEval.simps(1) aEval.simps(4) h4c"], ["proof (prove)\nusing this:\n  aEval (Eq ?p) ?L = (insertion (nth_default 0 ?L) ?p = 0)\n  aEval (Neq ?p) ?L = (insertion (nth_default 0 ?L) ?p \\<noteq> 0)\n  aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq (A + B * Var var)) (L[var := sqrt Cv]) =\n    (\\<not> eval\n             (And (fm.Atom (Leq (A * B)))\n               (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n             (L[var := sqrt Cv]))", "by blast"], ["proof (state)\nthis:\n  aEval (Neq (A + B * Var var)) (L[var := sqrt Cv]) =\n  (\\<not> eval\n           (And (fm.Atom (Leq (A * B)))\n             (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n           (L[var := sqrt Cv]))\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have h4e : \"(\\<not> (eval (And (Atom(Leq (A*B))) (Atom (Eq (A^2-B^2*c)))) (list_update L var (sqrt Cv))))\n                = eval (Or (Atom(Less(-A*B))) (Atom (Neq(A^2-B^2*c)))) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> eval\n             (And (fm.Atom (Leq (A * B)))\n               (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n             (L[var := sqrt Cv])) =\n    eval\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv])", "by (metis aNeg.simps(2) aNeg.simps(3) aNeg_aEval eval.simps(1) eval.simps(4) eval.simps(5) mult_minus_left)"], ["proof (state)\nthis:\n  (\\<not> eval\n           (And (fm.Atom (Leq (A * B)))\n             (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n           (L[var := sqrt Cv])) =\n  eval\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have \"aEval (Neq p) (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = aEval (Neq p1) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    aEval (Neq p1) (L[var := sqrt Cv])", "using quad_part_1_neq nonzero ha hb hd p1_def lLength"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var < length ?L; MPoly_Type.degree ?p ?var = ?deg;\n   ?D \\<noteq> 0;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D\\<rbrakk>\n  \\<Longrightarrow> aEval (Neq ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =\n                    aEval (Neq (quadratic_part_1 ?var ?a ?b ?d (Neq ?p)))\n                     (?L[?var := ?C])\n  Dv \\<noteq> 0\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n  p1 = quadratic_part_1 var a b d (Neq p)\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    aEval (Neq p1) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  aEval (Neq p1) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  aEval (Neq p1) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have \"... = aEval (Neq p2) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Neq p1) (L[var := sqrt Cv]) = aEval (Neq p2) (L[var := sqrt Cv])", "using p2_def quad_part_2_neq hc detGreater0 lLength"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  \\<lbrakk>?var < length ?L; 0 \\<le> ?SQ; MPoly_Type.degree ?p ?var = ?deg;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?sq = ?SQ\\<rbrakk>\n  \\<Longrightarrow> aEval (Neq ?p) (?L[?var := sqrt ?SQ]) =\n                    aEval (Neq (quadratic_part_2 ?var ?sq ?p))\n                     (?L[?var := sqrt ?SQ])\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  0 \\<le> Cv\n  var < length L\n\ngoal (1 subgoal):\n 1. aEval (Neq p1) (L[var := sqrt Cv]) = aEval (Neq p2) (L[var := sqrt Cv])", "by metis"], ["proof (state)\nthis:\n  aEval (Neq p1) (L[var := sqrt Cv]) = aEval (Neq p2) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Neq p1) (L[var := sqrt Cv]) = aEval (Neq p2) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have \"... = aEval (Neq (A + B * Var var)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Neq p2) (L[var := sqrt Cv]) =\n    aEval (Neq (A + B * Var var)) (L[var := sqrt Cv])", "using h3h"], ["proof (prove)\nusing this:\n  p2 = A + B * Var var\n\ngoal (1 subgoal):\n 1. aEval (Neq p2) (L[var := sqrt Cv]) =\n    aEval (Neq (A + B * Var var)) (L[var := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  aEval (Neq p2) (L[var := sqrt Cv]) =\n  aEval (Neq (A + B * Var var)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Neq p2) (L[var := sqrt Cv]) =\n  aEval (Neq (A + B * Var var)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have \"... = eval (Or\n      (Atom(Less(-A*B)))\n      (Atom (Neq(A^2-B^2*c)))) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval (Neq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv])", "using h4c h4d h4e"], ["proof (prove)\nusing this:\n  aEval (Eq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n  aEval (Neq (A + B * Var var)) (L[var := sqrt Cv]) =\n  (\\<not> eval\n           (And (fm.Atom (Leq (A * B)))\n             (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n           (L[var := sqrt Cv]))\n  (\\<not> eval\n           (And (fm.Atom (Leq (A * B)))\n             (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n           (L[var := sqrt Cv])) =\n  eval\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq (A + B * Var var)) (L[var := sqrt Cv]) =\n    eval\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  aEval (Neq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "also"], ["proof (state)\nthis:\n  aEval (Neq (A + B * Var var)) (L[var := sqrt Cv]) =\n  eval\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "have \"... = eval (quadratic_sub var a b c d (Neq p)) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "using p2_def A_def B_def p1_def quadratic_sub.simps(4) quadratic_part_1.simps(1) quadratic_part_1.simps(4)"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  p1 = quadratic_part_1 var a b d (Neq p)\n  quadratic_sub ?var ?a ?b ?c ?d (Neq ?p) =\n  (let p1 = quadratic_part_1 ?var ?a ?b ?d (Neq ?p);\n       p2 = quadratic_part_2 ?var ?c p1;\n       A = isolate_variable_sparse p2 ?var 0;\n       B = isolate_variable_sparse p2 ?var 1\n   in Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * ?c))))\n  quadratic_part_1 ?var ?a ?b ?d (Eq ?p) =\n  (let deg = MPoly_Type.degree ?p ?var\n   in \\<Sum>i = 0..<deg + 1.\n         isolate_variable_sparse ?p ?var i * (?a + ?b * Var ?var) ^ i *\n         ?d ^ (deg - i))\n  quadratic_part_1 ?var ?a ?b ?d (Neq ?p) =\n  (let deg = MPoly_Type.degree ?p ?var\n   in \\<Sum>i = 0..<deg + 1.\n         isolate_variable_sparse ?p ?var i * (?a + ?b * Var ?var) ^ i *\n         ?d ^ (deg - i))\n\ngoal (1 subgoal):\n 1. eval\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n     (L[var := sqrt Cv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  eval\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n   (L[var := sqrt Cv]) =\n  eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "finally"], ["proof (chain)\npicking this:\n  aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "show ?thesis"], ["proof (prove)\nusing this:\n  aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval (Neq p) (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d (Neq p)) (L[var := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "(*-----------------------------------------------------------------------------------------------*)"], ["", "theorem free_in_quad :\n  assumes freeA : \"var\\<notin> vars a\"\n  assumes freeB : \"var\\<notin> vars b\"\n  assumes freeC : \"var\\<notin> vars c\"\n  assumes freeD : \"var\\<notin> vars d\"\n  shows \"freeIn var (quadratic_sub var a b c d A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "proof(cases A)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "case (Less p)"], ["proof (state)\nthis:\n  A = Less p\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define p1 where \"(p1::real mpoly) = quadratic_part_1 var a b d (Less p)\""], ["proof (state)\nthis:\n  p1 = quadratic_part_1 var a b d (Less p)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define p2 where \"(p2::real mpoly) = quadratic_part_2 var c p1\""], ["proof (state)\nthis:\n  p2 = quadratic_part_2 var c p1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define A where \"A = isolate_variable_sparse p2 var 0\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p2 var 0\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define B where \"B = isolate_variable_sparse p2 var 1\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p2 var 1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h1 : \"freeIn var (quadratic_sub var a b c d (Less p)) = freeIn var (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (Or (fm.Atom (Less A)) (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d (Less p)) =\n    freeIn var\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))", "using p2_def A_def B_def p1_def quadratic_sub.simps(2)"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  p1 = quadratic_part_1 var a b d (Less p)\n  quadratic_sub ?var ?a ?b ?c ?d (Less ?p) =\n  (let p1 = quadratic_part_1 ?var ?a ?b ?d (Less ?p);\n       p2 = quadratic_part_2 ?var ?c p1;\n       A = isolate_variable_sparse p2 ?var 0;\n       B = isolate_variable_sparse p2 ?var 1\n   in Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * ?c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * ?c))))))\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d (Less p)) =\n    freeIn var\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))", "by metis"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var a b c d (Less p)) =\n  freeIn var\n   (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B))\n       (Or (fm.Atom (Less A))\n         (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h2d : \"var\\<notin>vars(4::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis freeB not_in_add not_in_pow numeral_Bit0 one_add_one power_0)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h2 : \"freeIn var ((Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (Or (fm.Atom (Less A)) (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c)))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))", "using vars_mult not_in_isovarspar A_def B_def not_in_sub not_in_mult not_in_neg not_in_pow not_in_isovarspar h2d freeC"], ["proof (prove)\nusing this:\n  vars (?p * ?q) \\<subseteq> vars ?p \\<union> vars ?q\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p - ?q)\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p * ?q)\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n  ?var \\<notin> vars ?p \\<Longrightarrow> ?var \\<notin> vars (?p ^ ?i)\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  var \\<notin> vars 4\n  var \\<notin> vars c\n\ngoal (1 subgoal):\n 1. freeIn var\n     (Or (And (fm.Atom (Less A))\n           (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B))\n         (Or (fm.Atom (Less A))\n           (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))", "by (simp)"], ["proof (state)\nthis:\n  freeIn var\n   (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B))\n       (Or (fm.Atom (Less A))\n         (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "using h1 h2 Less"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var a b c d (Less p)) =\n  freeIn var\n   (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B))\n       (Or (fm.Atom (Less A))\n         (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n  freeIn var\n   (Or (And (fm.Atom (Less A)) (fm.Atom (Less (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B))\n       (Or (fm.Atom (Less A))\n         (fm.Atom (Less (A\\<^sup>2 - B\\<^sup>2 * c))))))\n  A = Less p\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "by blast"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var a b c d A)\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "case (Eq p)"], ["proof (state)\nthis:\n  A = Eq p\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define p1 where \"(p1::real mpoly) = quadratic_part_1 var a b d (Eq p)\""], ["proof (state)\nthis:\n  p1 = quadratic_part_1 var a b d (Eq p)\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define p2 where \"(p2::real mpoly) = quadratic_part_2 var c p1\""], ["proof (state)\nthis:\n  p2 = quadratic_part_2 var c p1\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define A where \"A = isolate_variable_sparse p2 var 0\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p2 var 0\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define B where \"B = isolate_variable_sparse p2 var 1\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p2 var 1\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h1 : \"freeIn var (quadratic_sub var a b c d (Eq p)) = freeIn var (And (Atom(Leq (A*B))) (Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d (Eq p)) =\n    freeIn var\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))", "using p2_def A_def B_def p1_def quadratic_sub.simps(1)"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  p1 = quadratic_part_1 var a b d (Eq p)\n  quadratic_sub ?var ?a ?b ?c ?d (Eq ?p) =\n  (let p1 = quadratic_part_1 ?var ?a ?b ?d (Eq ?p);\n       p2 = quadratic_part_2 ?var ?c p1;\n       A = isolate_variable_sparse p2 ?var 0;\n       B = isolate_variable_sparse p2 ?var 1\n   in And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * ?c))))\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d (Eq p)) =\n    freeIn var\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))", "by metis"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var a b c d (Eq p)) =\n  freeIn var\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h2d : \"var\\<notin>vars(4::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis freeB not_in_add not_in_pow numeral_Bit0 one_add_one power_0)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h2 : \"freeIn var (And (Atom(Leq (A*B))) (Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))", "using vars_mult not_in_isovarspar A_def B_def not_in_sub not_in_mult not_in_neg not_in_pow not_in_isovarspar h2d freeC"], ["proof (prove)\nusing this:\n  vars (?p * ?q) \\<subseteq> vars ?p \\<union> vars ?q\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p - ?q)\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p * ?q)\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n  ?var \\<notin> vars ?p \\<Longrightarrow> ?var \\<notin> vars (?p ^ ?i)\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  var \\<notin> vars 4\n  var \\<notin> vars c\n\ngoal (1 subgoal):\n 1. freeIn var\n     (And (fm.Atom (Leq (A * B)))\n       (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))", "by (simp)"], ["proof (state)\nthis:\n  freeIn var\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "using h1 h2 Eq"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var a b c d (Eq p)) =\n  freeIn var\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n  freeIn var\n   (And (fm.Atom (Leq (A * B))) (fm.Atom (Eq (A\\<^sup>2 - B\\<^sup>2 * c))))\n  A = Eq p\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "by blast"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var a b c d A)\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "case (Leq p)"], ["proof (state)\nthis:\n  A = Leq p\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define p1 where \"(p1::real mpoly) = quadratic_part_1 var a b d (Leq p)\""], ["proof (state)\nthis:\n  p1 = quadratic_part_1 var a b d (Leq p)\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define p2 where \"(p2::real mpoly) = quadratic_part_2 var c p1\""], ["proof (state)\nthis:\n  p2 = quadratic_part_2 var c p1\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define A where \"A = isolate_variable_sparse p2 var 0\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p2 var 0\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define B where \"B = isolate_variable_sparse p2 var 1\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p2 var 1\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h1 : \"freeIn var (quadratic_sub var a b c d (Leq p)) = freeIn var (Or(And(Atom(Leq(A)))(Atom (Leq(B^2*c-A^2))))(And(Atom(Leq B))(Atom(Leq (A^2-B^2*c)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d (Leq p)) =\n    freeIn var\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))", "using p2_def A_def B_def p1_def quadratic_sub.simps(3)"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  p1 = quadratic_part_1 var a b d (Leq p)\n  quadratic_sub ?var ?a ?b ?c ?d (Leq ?p) =\n  (let p1 = quadratic_part_1 ?var ?a ?b ?d (Leq ?p);\n       p2 = quadratic_part_2 ?var ?c p1;\n       A = isolate_variable_sparse p2 ?var 0;\n       B = isolate_variable_sparse p2 ?var 1\n   in Or (And (fm.Atom (Leq A))\n           (fm.Atom (Leq (B\\<^sup>2 * ?c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * ?c)))))\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d (Leq p)) =\n    freeIn var\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))", "by metis"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var a b c d (Leq p)) =\n  freeIn var\n   (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h2d : \"var\\<notin>vars(4::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis freeB not_in_add not_in_pow numeral_Bit0 one_add_one power_0)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h2 : \"freeIn var (Or(And(Atom(Leq(A)))(Atom (Leq(B^2*c-A^2))))(And(Atom(Leq B))(Atom(Leq (A^2-B^2*c)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))", "using vars_mult not_in_isovarspar A_def B_def not_in_sub not_in_mult not_in_neg not_in_pow not_in_isovarspar h2d freeC"], ["proof (prove)\nusing this:\n  vars (?p * ?q) \\<subseteq> vars ?p \\<union> vars ?q\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p - ?q)\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p * ?q)\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n  ?var \\<notin> vars ?p \\<Longrightarrow> ?var \\<notin> vars (?p ^ ?i)\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  var \\<notin> vars 4\n  var \\<notin> vars c\n\ngoal (1 subgoal):\n 1. freeIn var\n     (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n       (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))", "by (simp)"], ["proof (state)\nthis:\n  freeIn var\n   (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "using h1 h2 Leq"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var a b c d (Leq p)) =\n  freeIn var\n   (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n  freeIn var\n   (Or (And (fm.Atom (Leq A)) (fm.Atom (Leq (B\\<^sup>2 * c - A\\<^sup>2))))\n     (And (fm.Atom (Leq B)) (fm.Atom (Leq (A\\<^sup>2 - B\\<^sup>2 * c)))))\n  A = Leq p\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "by blast"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var a b c d A)\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "case (Neq p)"], ["proof (state)\nthis:\n  A = Neq p\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define p1 where \"(p1::real mpoly) = quadratic_part_1 var a b d (Neq p)\""], ["proof (state)\nthis:\n  p1 = quadratic_part_1 var a b d (Neq p)\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define p2 where \"(p2::real mpoly) = quadratic_part_2 var c p1\""], ["proof (state)\nthis:\n  p2 = quadratic_part_2 var c p1\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define A where \"A = isolate_variable_sparse p2 var 0\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p2 var 0\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "define B where \"B = isolate_variable_sparse p2 var 1\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p2 var 1\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h1 : \"freeIn var (quadratic_sub var a b c d (Neq p)) = freeIn var (Or (Atom(Less(-A*B))) (Atom (Neq(A^2-B^2*c))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d (Neq p)) =\n    freeIn var\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))", "using p2_def A_def B_def p1_def quadratic_sub.simps(4)"], ["proof (prove)\nusing this:\n  p2 = quadratic_part_2 var c p1\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  p1 = quadratic_part_1 var a b d (Neq p)\n  quadratic_sub ?var ?a ?b ?c ?d (Neq ?p) =\n  (let p1 = quadratic_part_1 ?var ?a ?b ?d (Neq ?p);\n       p2 = quadratic_part_2 ?var ?c p1;\n       A = isolate_variable_sparse p2 ?var 0;\n       B = isolate_variable_sparse p2 ?var 1\n   in Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * ?c))))\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d (Neq p)) =\n    freeIn var\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))", "by metis"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var a b c d (Neq p)) =\n  freeIn var\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h2d : \"var\\<notin>vars(4::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis freeB not_in_add not_in_pow numeral_Bit0 one_add_one power_0)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "have h2 : \"freeIn var (Or (Atom(Less(-A*B))) (Atom (Neq(A^2-B^2*c))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))", "using vars_mult not_in_isovarspar A_def B_def not_in_sub not_in_mult not_in_neg not_in_pow not_in_isovarspar h2d freeC"], ["proof (prove)\nusing this:\n  vars (?p * ?q) \\<subseteq> vars ?p \\<union> vars ?q\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  A = isolate_variable_sparse p2 var 0\n  B = isolate_variable_sparse p2 var 1\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p - ?q)\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p * ?q)\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n  ?var \\<notin> vars ?p \\<Longrightarrow> ?var \\<notin> vars (?p ^ ?i)\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  var \\<notin> vars 4\n  var \\<notin> vars c\n\ngoal (1 subgoal):\n 1. freeIn var\n     (Or (fm.Atom (Less (- A * B)))\n       (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))", "by (simp)"], ["proof (state)\nthis:\n  freeIn var\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow> freeIn var (quadratic_sub var a b c d A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "using h1 h2 Neq"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var a b c d (Neq p)) =\n  freeIn var\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n  freeIn var\n   (Or (fm.Atom (Less (- A * B)))\n     (fm.Atom (Neq (A\\<^sup>2 - B\\<^sup>2 * c))))\n  A = Neq p\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var a b c d A)", "by blast"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var a b c d A)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem quadratic_sub :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"aEval A (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub var a b c d A) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "proof(cases A)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "case (Less x1)"], ["proof (state)\nthis:\n  A = Less x1\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       A = Less x1 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 2. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 3. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 4. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  A = Less x1", "show ?thesis"], ["proof (prove)\nusing this:\n  A = Less x1\n\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "using quadratic_sub_less assms"], ["proof (prove)\nusing this:\n  A = Less x1\n  \\<lbrakk>?var < length ?L; ?Dv \\<noteq> 0; 0 \\<le> ?Cv;\n   ?var \\<notin> vars ?c;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv\\<rbrakk>\n  \\<Longrightarrow> aEval (Less ?p)\n                     (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =\n                    eval (quadratic_sub ?var ?a ?b ?c ?d (Less ?p))\n                     (?L[?var := sqrt ?Cv])\n  var < length L\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "case (Eq x2)"], ["proof (state)\nthis:\n  A = Eq x2\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       A = Eq x2 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 2. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 3. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  A = Eq x2", "show ?thesis"], ["proof (prove)\nusing this:\n  A = Eq x2\n\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "using quadratic_sub_eq assms"], ["proof (prove)\nusing this:\n  A = Eq x2\n  \\<lbrakk>?var < length ?L; ?Dv \\<noteq> 0; 0 \\<le> ?Cv;\n   ?var \\<notin> vars ?c;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv\\<rbrakk>\n  \\<Longrightarrow> aEval (Eq ?p)\n                     (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =\n                    eval (quadratic_sub ?var ?a ?b ?c ?d (Eq ?p))\n                     (?L[?var := sqrt ?Cv])\n  var < length L\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "case (Leq x3)"], ["proof (state)\nthis:\n  A = Leq x3\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       A = Leq x3 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n 2. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  A = Leq x3", "show ?thesis"], ["proof (prove)\nusing this:\n  A = Leq x3\n\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "using quadratic_sub_leq assms"], ["proof (prove)\nusing this:\n  A = Leq x3\n  \\<lbrakk>?var < length ?L; ?Dv \\<noteq> 0; 0 \\<le> ?Cv;\n   ?var \\<notin> vars ?c;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv\\<rbrakk>\n  \\<Longrightarrow> aEval (Leq ?p)\n                     (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =\n                    eval (quadratic_sub ?var ?a ?b ?c ?d (Leq ?p))\n                     (?L[?var := sqrt ?Cv])\n  var < length L\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "case (Neq x4)"], ["proof (state)\nthis:\n  A = Neq x4\n\ngoal (1 subgoal):\n 1. \\<And>x4.\n       A = Neq x4 \\<Longrightarrow>\n       aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n       eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  A = Neq x4", "show ?thesis"], ["proof (prove)\nusing this:\n  A = Neq x4\n\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "using quadratic_sub_neq assms"], ["proof (prove)\nusing this:\n  A = Neq x4\n  \\<lbrakk>?var < length ?L; ?Dv \\<noteq> 0; 0 \\<le> ?Cv;\n   ?var \\<notin> vars ?c;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;\n   \\<forall>x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv\\<rbrakk>\n  \\<Longrightarrow> aEval (Neq ?p)\n                     (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =\n                    eval (quadratic_sub ?var ?a ?b ?c ?d (Neq ?p))\n                     (?L[?var := sqrt ?Cv])\n  var < length L\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])", "by blast"], ["proof (state)\nthis:\n  aEval A (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub var a b c d A) (L[var := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma free_in_quad_fm_helper :\n  assumes freeA : \"var\\<notin> vars a\"\n  assumes freeB : \"var\\<notin> vars b\"\n  assumes freeC : \"var\\<notin> vars c\"\n  assumes freeD : \"var\\<notin> vars d\"\n  shows \"freeIn (var+z) (quadratic_sub_fm_helper var a b c d F z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d F z)", "proof(induction F arbitrary: z)"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>z. freeIn (var + z) (quadratic_sub_fm_helper var a b c d TrueF z)\n 2. \\<And>z. freeIn (var + z) (quadratic_sub_fm_helper var a b c d FalseF z)\n 3. \\<And>x z.\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n 4. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 5. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 6. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 7. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 8. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 9. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 10. \\<And>x1 F z.\n        (\\<And>z.\n            freeIn (var + z)\n             (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n        freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case TrueF"], ["proof (state)\nthis:\n  \n\ngoal (10 subgoals):\n 1. \\<And>z. freeIn (var + z) (quadratic_sub_fm_helper var a b c d TrueF z)\n 2. \\<And>z. freeIn (var + z) (quadratic_sub_fm_helper var a b c d FalseF z)\n 3. \\<And>x z.\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n 4. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 5. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 6. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 7. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 8. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 9. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 10. \\<And>x1 F z.\n        (\\<And>z.\n            freeIn (var + z)\n             (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n        freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d TrueF z)", "by auto"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d TrueF z)\n\ngoal (9 subgoals):\n 1. \\<And>z. freeIn (var + z) (quadratic_sub_fm_helper var a b c d FalseF z)\n 2. \\<And>x z.\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n 3. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 4. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 6. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 7. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 8. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 9. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>z. freeIn (var + z) (quadratic_sub_fm_helper var a b c d FalseF z)\n 2. \\<And>x z.\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n 3. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 4. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 6. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 7. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 8. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 9. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case FalseF"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>z. freeIn (var + z) (quadratic_sub_fm_helper var a b c d FalseF z)\n 2. \\<And>x z.\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n 3. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 4. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 6. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 7. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 8. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 9. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d FalseF z)", "by auto"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d FalseF z)\n\ngoal (8 subgoals):\n 1. \\<And>x z.\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n 2. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 3. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 6. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 7. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 8. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x z.\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n 2. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 3. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 6. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 7. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 8. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case (Atom x)"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. \\<And>x z.\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n 2. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 3. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 6. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 7. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 8. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)", "using free_in_quad[OF not_in_lift[OF assms(1)] not_in_lift[OF assms(2)] not_in_lift[OF assms(3)] not_in_lift[OF assms(4)], of z]"], ["proof (prove)\nusing this:\n  freeIn (var + z)\n   (quadratic_sub (var + z) (liftPoly 0 z a) (liftPoly 0 z b)\n     (liftPoly 0 z c) (liftPoly 0 z d) ?A)\n\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)", "by auto"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n\ngoal (7 subgoals):\n 1. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 2. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 6. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 7. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 2. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 6. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 7. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case (And F1 F2)"], ["proof (state)\nthis:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F1 ?z)\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F2 ?z)\n\ngoal (7 subgoals):\n 1. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n 2. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 5. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 6. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 7. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "then"], ["proof (chain)\npicking this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F1 ?z)\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F2 ?z)", "show ?case"], ["proof (prove)\nusing this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F1 ?z)\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F2 ?z)\n\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (And F1 F2) z)", "by auto"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d (And F1 F2) z)\n\ngoal (6 subgoals):\n 1. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 5. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 6. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 5. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 6. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case (Or F1 F2)"], ["proof (state)\nthis:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F1 ?z)\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F2 ?z)\n\ngoal (6 subgoals):\n 1. \\<And>F1 F2 z.\n       \\<lbrakk>\\<And>z.\n                   freeIn (var + z)\n                    (quadratic_sub_fm_helper var a b c d F1 z);\n        \\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F2 z)\\<rbrakk>\n       \\<Longrightarrow> freeIn (var + z)\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 4. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 5. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 6. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "then"], ["proof (chain)\npicking this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F1 ?z)\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F2 ?z)", "show ?case"], ["proof (prove)\nusing this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F1 ?z)\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F2 ?z)\n\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)", "by auto"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n\ngoal (5 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 4. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 5. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 4. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 5. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case (Neg F)"], ["proof (state)\nthis:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)\n\ngoal (5 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 3. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 4. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 5. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "then"], ["proof (chain)\npicking this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)", "show ?case"], ["proof (prove)\nusing this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)\n\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)", "by auto"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d (Neg F) z)\n\ngoal (4 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 3. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 4. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 3. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 4. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case (ExQ F)"], ["proof (state)\nthis:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)\n\ngoal (4 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n 2. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 3. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 4. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)", "using ExQ[of \"z+1\"]"], ["proof (prove)\nusing this:\n  freeIn (var + (z + 1)) (quadratic_sub_fm_helper var a b c d F (z + 1))\n\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)", "by simp"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n\ngoal (3 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 2. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 3. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 2. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 3. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case (AllQ F)"], ["proof (state)\nthis:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)\n\ngoal (3 subgoals):\n 1. \\<And>F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n 2. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 3. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)", "using AllQ[of \"z+1\"]"], ["proof (prove)\nusing this:\n  freeIn (var + (z + 1)) (quadratic_sub_fm_helper var a b c d F (z + 1))\n\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)", "by simp"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n\ngoal (2 subgoals):\n 1. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 2. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 2. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case (ExN x1 F)"], ["proof (state)\nthis:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)\n\ngoal (2 subgoals):\n 1. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n 2. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "then"], ["proof (chain)\npicking this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)", "show ?case"], ["proof (prove)\nusing this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)\n\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)", "by (metis (no_types, lifting) add.assoc freeIn.simps(13) liftmap.simps(10) quadratic_sub_fm_helper.simps)"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n\ngoal (1 subgoal):\n 1. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "case (AllN x1 F)"], ["proof (state)\nthis:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)\n\ngoal (1 subgoal):\n 1. \\<And>x1 F z.\n       (\\<And>z.\n           freeIn (var + z)\n            (quadratic_sub_fm_helper var a b c d F z)) \\<Longrightarrow>\n       freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "then"], ["proof (chain)\npicking this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)", "show ?case"], ["proof (prove)\nusing this:\n  freeIn (var + ?z) (quadratic_sub_fm_helper var a b c d F ?z)\n\ngoal (1 subgoal):\n 1. freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)", "by (metis (no_types, lifting) freeIn.simps(12) group_cancel.add1 liftmap.simps(9) quadratic_sub_fm_helper.simps)"], ["proof (state)\nthis:\n  freeIn (var + z) (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem free_in_quad_fm :\n  assumes freeA : \"var\\<notin> vars a\"\n  assumes freeB : \"var\\<notin> vars b\"\n  assumes freeC : \"var\\<notin> vars c\"\n  assumes freeD : \"var\\<notin> vars d\"\n  shows \"freeIn var (quadratic_sub_fm var a b c d A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub_fm var a b c d A)", "using free_in_quad_fm_helper[OF assms, of 0]"], ["proof (prove)\nusing this:\n  freeIn (var + 0) (quadratic_sub_fm_helper var a b c d ?F 0)\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub_fm var a b c d A)", "by auto"], ["", "lemma quadratic_sub_fm_helper :\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes lLength : \"length L > var+z\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update (drop z L) var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update (drop z L) var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update (drop z L) var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update (drop z L) var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"eval F (list_update L (var+z) ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub_fm_helper var a b c d F z) (list_update L (var+z) (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval F (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv])", "using assms"], ["proof (prove)\nusing this:\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. eval F (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv])", "proof(induction F arbitrary: z L)"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval TrueF\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval (quadratic_sub_fm_helper var a b c d TrueF z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval FalseF\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval (quadratic_sub_fm_helper var a b c d FalseF z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 9. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 10. \\<And>x1 F z L.\n        \\<lbrakk>\\<And>z L.\n                    \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                     var + z < length L;\n                     \\<forall>x.\n                        insertion (nth_default 0 ((drop z L)[var := x])) a =\n                        Av;\n                     \\<forall>x.\n                        insertion (nth_default 0 ((drop z L)[var := x])) b =\n                        Bv;\n                     \\<forall>x.\n                        insertion (nth_default 0 ((drop z L)[var := x])) c =\n                        Cv;\n                     \\<forall>x.\n                        insertion (nth_default 0 ((drop z L)[var := x])) d =\n                        Dv\\<rbrakk>\n                    \\<Longrightarrow> eval F\n (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\neval (quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n         Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n         \\<forall>x.\n            insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n         \\<forall>x.\n            insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n         \\<forall>x.\n            insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n         \\<forall>x.\n            insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n        \\<Longrightarrow> eval (AllN x1 F)\n                           (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                          eval\n                           (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                             z)\n                           (L[var + z := sqrt Cv])", "case TrueF"], ["proof (state)\nthis:\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (10 subgoals):\n 1. \\<And>z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval TrueF\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval (quadratic_sub_fm_helper var a b c d TrueF z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval FalseF\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval (quadratic_sub_fm_helper var a b c d FalseF z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 9. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 10. \\<And>x1 F z L.\n        \\<lbrakk>\\<And>z L.\n                    \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                     var + z < length L;\n                     \\<forall>x.\n                        insertion (nth_default 0 ((drop z L)[var := x])) a =\n                        Av;\n                     \\<forall>x.\n                        insertion (nth_default 0 ((drop z L)[var := x])) b =\n                        Bv;\n                     \\<forall>x.\n                        insertion (nth_default 0 ((drop z L)[var := x])) c =\n                        Cv;\n                     \\<forall>x.\n                        insertion (nth_default 0 ((drop z L)[var := x])) d =\n                        Dv\\<rbrakk>\n                    \\<Longrightarrow> eval F\n (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\neval (quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n         Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n         \\<forall>x.\n            insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n         \\<forall>x.\n            insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n         \\<forall>x.\n            insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n         \\<forall>x.\n            insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n        \\<Longrightarrow> eval (AllN x1 F)\n                           (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                          eval\n                           (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                             z)\n                           (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv", "show ?case"], ["proof (prove)\nusing this:\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. eval TrueF (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d TrueF z)\n     (L[var + z := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  eval TrueF (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d TrueF z) (L[var + z := sqrt Cv])\n\ngoal (9 subgoals):\n 1. \\<And>z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval FalseF\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval (quadratic_sub_fm_helper var a b c d FalseF z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 9. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval FalseF\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval (quadratic_sub_fm_helper var a b c d FalseF z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 9. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case FalseF"], ["proof (state)\nthis:\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (9 subgoals):\n 1. \\<And>z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval FalseF\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval (quadratic_sub_fm_helper var a b c d FalseF z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 9. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv", "show ?case"], ["proof (prove)\nusing this:\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. eval FalseF (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d FalseF z)\n     (L[var + z := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  eval FalseF (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d FalseF z)\n   (L[var + z := sqrt Cv])\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case (Atom x)"], ["proof (state)\nthis:\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "define L1 where \"L1 = drop z L\""], ["proof (state)\nthis:\n  L1 = drop z L\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "define L2 where \"L2 = take z L\""], ["proof (state)\nthis:\n  L2 = take z L\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have L_def : \"L = L2 @ L1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L = L2 @ L1", "using L1_def L2_def"], ["proof (prove)\nusing this:\n  L1 = drop z L\n  L2 = take z L\n\ngoal (1 subgoal):\n 1. L = L2 @ L1", "by auto"], ["proof (state)\nthis:\n  L = L2 @ L1\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have lengthl2 : \"length L2 = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length L2 = z", "using L2_def"], ["proof (prove)\nusing this:\n  L2 = take z L\n\ngoal (1 subgoal):\n 1. length L2 = z", "using Atom.prems(4)"], ["proof (prove)\nusing this:\n  L2 = take z L\n  var + z < length L\n\ngoal (1 subgoal):\n 1. length L2 = z", "by auto"], ["proof (state)\nthis:\n  length L2 = z\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"eval (Atom(Eq (a-Const Av))) ([] @ L1) = eval (liftFm 0 z (Atom(Eq (a- Const Av)))) ([] @ L2 @ L1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (fm.Atom (Eq (a - Const Av))) ([] @ L1) =\n    eval (liftFm 0 z (fm.Atom (Eq (a - Const Av)))) ([] @ L2 @ L1)", "by (metis eval_liftFm_helper lengthl2 list.size(3))"], ["proof (state)\nthis:\n  eval (fm.Atom (Eq (a - Const Av))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (a - Const Av)))) ([] @ L2 @ L1)\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  eval (fm.Atom (Eq (a - Const Av))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (a - Const Av)))) ([] @ L2 @ L1)", "have \"(insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) = 0)\""], ["proof (prove)\nusing this:\n  eval (fm.Atom (Eq (a - Const Av))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (a - Const Av)))) ([] @ L2 @ L1)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) = 0", "apply(simp add: insertion_sub insertion_const)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 L1) a = Av) =\n    (insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) = 0", "using Atom(5)"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 L1) a = Av) =\n    (insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) = 0", "unfolding L1_def"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (drop z L)) a = Av) =\n    (insertion (nth_default 0 (L2 @ drop z L))\n      (liftPoly 0 z (a - Const Av)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ drop z L))\n     (liftPoly 0 z (a - Const Av)) =\n    0", "by (metis list_update_id)"], ["proof (state)\nthis:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) = 0\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) = 0", "have \"insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z a) = Av\""], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) = 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z a) = Av", "using lift_minus"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (a - Const Av)) = 0\n  insertion ?f (liftPoly 0 ?z (?c - Const ?C)) = 0 \\<Longrightarrow>\n  insertion ?f (liftPoly 0 ?z ?c) = ?C\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z a) = Av", "by blast"], ["proof (state)\nthis:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z a) = Av\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z a) = Av", "have a1 : \"\\<forall>x. insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z a) = Av\""], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z a) = Av\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z a) = Av", "unfolding L_def"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z a) = Av\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z a) =\n       Av", "by (metis (no_types, lifting) Atom.prems(5) L1_def add.right_neutral add_diff_cancel_right' append_eq_append_conv append_eq_append_conv2 length_append lengthl2 lift_insertion list.size(3) list_update_append not_add_less2)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z a) = Av\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"eval (Atom(Eq (b-Const Bv))) ([] @ L1) = eval (liftFm 0 z (Atom(Eq (b- Const Bv)))) ([] @ L2 @ L1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (fm.Atom (Eq (b - Const Bv))) ([] @ L1) =\n    eval (liftFm 0 z (fm.Atom (Eq (b - Const Bv)))) ([] @ L2 @ L1)", "by (metis eval_liftFm_helper lengthl2 list.size(3))"], ["proof (state)\nthis:\n  eval (fm.Atom (Eq (b - Const Bv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (b - Const Bv)))) ([] @ L2 @ L1)\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  eval (fm.Atom (Eq (b - Const Bv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (b - Const Bv)))) ([] @ L2 @ L1)", "have \"(insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) = 0)\""], ["proof (prove)\nusing this:\n  eval (fm.Atom (Eq (b - Const Bv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (b - Const Bv)))) ([] @ L2 @ L1)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) = 0", "apply(simp add: insertion_sub insertion_const)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 L1) b = Bv) =\n    (insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) = 0", "using Atom(6)"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 L1) b = Bv) =\n    (insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) = 0", "unfolding L1_def"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (drop z L)) b = Bv) =\n    (insertion (nth_default 0 (L2 @ drop z L))\n      (liftPoly 0 z (b - Const Bv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ drop z L))\n     (liftPoly 0 z (b - Const Bv)) =\n    0", "by (metis list_update_id)"], ["proof (state)\nthis:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) = 0\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) = 0", "have \"insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z b) = Bv\""], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) = 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z b) = Bv", "using lift_minus"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (b - Const Bv)) = 0\n  insertion ?f (liftPoly 0 ?z (?c - Const ?C)) = 0 \\<Longrightarrow>\n  insertion ?f (liftPoly 0 ?z ?c) = ?C\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z b) = Bv", "by blast"], ["proof (state)\nthis:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z b) = Bv\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z b) = Bv", "have a2 : \"\\<forall>x. insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z b) = Bv\""], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z b) = Bv\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z b) = Bv", "unfolding L_def"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z b) = Bv\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z b) =\n       Bv", "using Atom(6) L1_def"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z b) = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  L1 = drop z L\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z b) =\n       Bv", "by (metis L_def add_diff_cancel_right' append.simps(1) lengthl2 lift_insertion list.size(3) list_update_append not_add_less2)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z b) = Bv\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"eval (Atom(Eq (c-Const Cv))) ([] @ L1) = eval (liftFm 0 z (Atom(Eq (c- Const Cv)))) ([] @ L2 @ L1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (fm.Atom (Eq (c - Const Cv))) ([] @ L1) =\n    eval (liftFm 0 z (fm.Atom (Eq (c - Const Cv)))) ([] @ L2 @ L1)", "by (metis eval_liftFm_helper lengthl2 list.size(3))"], ["proof (state)\nthis:\n  eval (fm.Atom (Eq (c - Const Cv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (c - Const Cv)))) ([] @ L2 @ L1)\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  eval (fm.Atom (Eq (c - Const Cv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (c - Const Cv)))) ([] @ L2 @ L1)", "have \"(insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) = 0)\""], ["proof (prove)\nusing this:\n  eval (fm.Atom (Eq (c - Const Cv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (c - Const Cv)))) ([] @ L2 @ L1)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) = 0", "apply(simp add: insertion_sub insertion_const)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 L1) c = Cv) =\n    (insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) = 0", "using Atom(7)"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 L1) c = Cv) =\n    (insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) = 0", "unfolding L1_def"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (drop z L)) c = Cv) =\n    (insertion (nth_default 0 (L2 @ drop z L))\n      (liftPoly 0 z (c - Const Cv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ drop z L))\n     (liftPoly 0 z (c - Const Cv)) =\n    0", "by (metis list_update_id)"], ["proof (state)\nthis:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) = 0\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) = 0", "have \"insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = Cv\""], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) = 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = Cv", "using lift_minus"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (c - Const Cv)) = 0\n  insertion ?f (liftPoly 0 ?z (?c - Const ?C)) = 0 \\<Longrightarrow>\n  insertion ?f (liftPoly 0 ?z ?c) = ?C\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = Cv", "by blast"], ["proof (state)\nthis:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = Cv\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = Cv", "have a3 : \"\\<forall>x. insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z c) = Cv\""], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = Cv\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z c) = Cv", "unfolding L_def"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = Cv\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "obtain nn :: \"(nat \\<Rightarrow> real) \\<Rightarrow> (nat \\<Rightarrow> real) \\<Rightarrow> real mpoly \\<Rightarrow> nat\" where\n      \"\\<forall>x0 x1 x2. (\\<exists>v3. v3 \\<in> vars x2 \\<and> x1 v3 \\<noteq> x0 v3) = (nn x0 x1 x2 \\<in> vars x2 \\<and> x1 (nn x0 x1 x2) \\<noteq> x0 (nn x0 x1 x2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nn.\n        \\<forall>x0 x1 x2.\n           (\\<exists>v3. v3 \\<in> vars x2 \\<and> x1 v3 \\<noteq> x0 v3) =\n           (nn x0 x1 x2 \\<in> vars x2 \\<and>\n            x1 (nn x0 x1 x2) \\<noteq> x0 (nn x0 x1 x2)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3. v3 \\<in> vars x2 \\<and> x1 v3 \\<noteq> x0 v3) =\n     (nn x0 x1 x2 \\<in> vars x2 \\<and>\n      x1 (nn x0 x1 x2) \\<noteq> x0 (nn x0 x1 x2))\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "then"], ["proof (chain)\npicking this:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3. v3 \\<in> vars x2 \\<and> x1 v3 \\<noteq> x0 v3) =\n     (nn x0 x1 x2 \\<in> vars x2 \\<and>\n      x1 (nn x0 x1 x2) \\<noteq> x0 (nn x0 x1 x2))", "have f1: \"\\<forall>m f fa. nn fa f m \\<in> vars m \\<and> f (nn fa f m) \\<noteq> fa (nn fa f m) \\<or> insertion f m = insertion fa m\""], ["proof (prove)\nusing this:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3. v3 \\<in> vars x2 \\<and> x1 v3 \\<noteq> x0 v3) =\n     (nn x0 x1 x2 \\<in> vars x2 \\<and>\n      x1 (nn x0 x1 x2) \\<noteq> x0 (nn x0 x1 x2))\n\ngoal (1 subgoal):\n 1. \\<forall>m f fa.\n       nn fa f m \\<in> vars m \\<and>\n       f (nn fa f m) \\<noteq> fa (nn fa f m) \\<or>\n       insertion f m = insertion fa m", "by (meson insertion_irrelevant_vars)"], ["proof (state)\nthis:\n  \\<forall>m f fa.\n     nn fa f m \\<in> vars m \\<and>\n     f (nn fa f m) \\<noteq> fa (nn fa f m) \\<or>\n     insertion f m = insertion fa m\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "obtain rr :: real where\n      \"(\\<exists>v0. insertion (nth_default 0 ((L2 @ L1)[var + z := v0])) (liftPoly 0 z c) \\<noteq> Cv) = (insertion (nth_default 0 ((L2 @ L1)[var + z := rr])) (liftPoly 0 z c) \\<noteq> Cv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>rr.\n        (\\<exists>v0.\n            insertion (nth_default 0 ((L2 @ L1)[var + z := v0]))\n             (liftPoly 0 z c) \\<noteq>\n            Cv) =\n        (insertion (nth_default 0 ((L2 @ L1)[var + z := rr]))\n          (liftPoly 0 z c) \\<noteq>\n         Cv) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<exists>v0.\n      insertion (nth_default 0 ((L2 @ L1)[var + z := v0]))\n       (liftPoly 0 z c) \\<noteq>\n      Cv) =\n  (insertion (nth_default 0 ((L2 @ L1)[var + z := rr]))\n    (liftPoly 0 z c) \\<noteq>\n   Cv)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "moreover"], ["proof (state)\nthis:\n  (\\<exists>v0.\n      insertion (nth_default 0 ((L2 @ L1)[var + z := v0]))\n       (liftPoly 0 z c) \\<noteq>\n      Cv) =\n  (insertion (nth_default 0 ((L2 @ L1)[var + z := rr]))\n    (liftPoly 0 z c) \\<noteq>\n   Cv)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "{"], ["proof (state)\nthis:\n  (\\<exists>v0.\n      insertion (nth_default 0 ((L2 @ L1)[var + z := v0]))\n       (liftPoly 0 z c) \\<noteq>\n      Cv) =\n  (insertion (nth_default 0 ((L2 @ L1)[var + z := rr]))\n    (liftPoly 0 z c) \\<noteq>\n   Cv)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "assume \"var + z \\<noteq> nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)\""], ["proof (state)\nthis:\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "moreover"], ["proof (state)\nthis:\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "{"], ["proof (state)\nthis:\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "assume \"(nth_default 0 (L2 @ L1) (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) = nth_default 0 ((L2 @ L1)[var + z := rr]) (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c))) \\<noteq> ((L2 @ L1) ! nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = (L2 @ L1)[var + z := rr] ! nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c))\""], ["proof (state)\nthis:\n  (nth_default 0 (L2 @ L1)\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c)) =\n   nth_default 0 ((L2 @ L1)[var + z := rr])\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c))) \\<noteq>\n  ((L2 @ L1) !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c) =\n   (L2 @ L1)[var + z := rr] !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c))\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "then"], ["proof (chain)\npicking this:\n  (nth_default 0 (L2 @ L1)\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c)) =\n   nth_default 0 ((L2 @ L1)[var + z := rr])\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c))) \\<noteq>\n  ((L2 @ L1) !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c) =\n   (L2 @ L1)[var + z := rr] !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c))", "have \"nth_default 0 ((L2 @ L1)[var + z := rr]) (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) \\<noteq> (L2 @ L1)[var + z := rr] ! nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) \\<or> nth_default 0 (L2 @ L1) (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) \\<noteq> (L2 @ L1) ! nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)\""], ["proof (prove)\nusing this:\n  (nth_default 0 (L2 @ L1)\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c)) =\n   nth_default 0 ((L2 @ L1)[var + z := rr])\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c))) \\<noteq>\n  ((L2 @ L1) !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c) =\n   (L2 @ L1)[var + z := rr] !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c))\n\ngoal (1 subgoal):\n 1. nth_default 0 ((L2 @ L1)[var + z := rr])\n     (nn (nth_default 0 ((L2 @ L1)[var + z := rr]))\n       (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) \\<noteq>\n    (L2 @ L1)[var + z := rr] !\n    nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c) \\<or>\n    nth_default 0 (L2 @ L1)\n     (nn (nth_default 0 ((L2 @ L1)[var + z := rr]))\n       (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) \\<noteq>\n    (L2 @ L1) !\n    nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)", "by linarith"], ["proof (state)\nthis:\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) \\<noteq>\n  (L2 @ L1)[var + z := rr] !\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) \\<noteq>\n  (L2 @ L1) !\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "then"], ["proof (chain)\npicking this:\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) \\<noteq>\n  (L2 @ L1)[var + z := rr] !\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) \\<noteq>\n  (L2 @ L1) !\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)", "have \"nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) \\<notin> vars (liftPoly 0 z c) \\<or> nth_default 0 (L2 @ L1) (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) = nth_default 0 ((L2 @ L1)[var + z := rr]) (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c))\""], ["proof (prove)\nusing this:\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) \\<noteq>\n  (L2 @ L1)[var + z := rr] !\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) \\<noteq>\n  (L2 @ L1) !\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n\ngoal (1 subgoal):\n 1. nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)\n    \\<notin> vars (liftPoly 0 z c) \\<or>\n    nth_default 0 (L2 @ L1)\n     (nn (nth_default 0 ((L2 @ L1)[var + z := rr]))\n       (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) =\n    nth_default 0 ((L2 @ L1)[var + z := rr])\n     (nn (nth_default 0 ((L2 @ L1)[var + z := rr]))\n       (nth_default 0 (L2 @ L1)) (liftPoly 0 z c))", "by (metis (no_types) append_Nil2 length_list_update nth_default_append)"], ["proof (state)\nthis:\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "}"], ["proof (state)\nthis:\n  (nth_default 0 (L2 @ L1)\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c)) =\n   nth_default 0 ((L2 @ L1)[var + z := rr])\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c))) \\<noteq>\n  ((L2 @ L1) !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c) =\n   (L2 @ L1)[var + z := rr] !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c)) \\<Longrightarrow>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "ultimately"], ["proof (chain)\npicking this:\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  (nth_default 0 (L2 @ L1)\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c)) =\n   nth_default 0 ((L2 @ L1)[var + z := rr])\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c))) \\<noteq>\n  ((L2 @ L1) !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c) =\n   (L2 @ L1)[var + z := rr] !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c)) \\<Longrightarrow>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))", "have \"nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) \\<notin> vars (liftPoly 0 z c) \\<or> nth_default 0 (L2 @ L1) (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) = nth_default 0 ((L2 @ L1)[var + z := rr]) (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1)) (liftPoly 0 z c))\""], ["proof (prove)\nusing this:\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  (nth_default 0 (L2 @ L1)\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c)) =\n   nth_default 0 ((L2 @ L1)[var + z := rr])\n    (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n      (liftPoly 0 z c))) \\<noteq>\n  ((L2 @ L1) !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c) =\n   (L2 @ L1)[var + z := rr] !\n   nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n    (liftPoly 0 z c)) \\<Longrightarrow>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))\n\ngoal (1 subgoal):\n 1. nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)\n    \\<notin> vars (liftPoly 0 z c) \\<or>\n    nth_default 0 (L2 @ L1)\n     (nn (nth_default 0 ((L2 @ L1)[var + z := rr]))\n       (nth_default 0 (L2 @ L1)) (liftPoly 0 z c)) =\n    nth_default 0 ((L2 @ L1)[var + z := rr])\n     (nn (nth_default 0 ((L2 @ L1)[var + z := rr]))\n       (nth_default 0 (L2 @ L1)) (liftPoly 0 z c))", "by force"], ["proof (state)\nthis:\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "}"], ["proof (state)\nthis:\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c) \\<Longrightarrow>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) =\n    Cv \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z c) =\n       Cv", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>v0.\n      insertion (nth_default 0 ((L2 @ L1)[var + z := v0]))\n       (liftPoly 0 z c) \\<noteq>\n      Cv) =\n  (insertion (nth_default 0 ((L2 @ L1)[var + z := rr]))\n    (liftPoly 0 z c) \\<noteq>\n   Cv)\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c) \\<Longrightarrow>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))", "show \"\\<forall>r. insertion (nth_default 0 ((L2 @ L1)[var + z := r])) (liftPoly 0 z c) = Cv\""], ["proof (prove)\nusing this:\n  (\\<exists>v0.\n      insertion (nth_default 0 ((L2 @ L1)[var + z := v0]))\n       (liftPoly 0 z c) \\<noteq>\n      Cv) =\n  (insertion (nth_default 0 ((L2 @ L1)[var + z := rr]))\n    (liftPoly 0 z c) \\<noteq>\n   Cv)\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c) \\<Longrightarrow>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))\n\ngoal (1 subgoal):\n 1. \\<forall>r.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := r]))\n        (liftPoly 0 z c) =\n       Cv", "using f1"], ["proof (prove)\nusing this:\n  (\\<exists>v0.\n      insertion (nth_default 0 ((L2 @ L1)[var + z := v0]))\n       (liftPoly 0 z c) \\<noteq>\n      Cv) =\n  (insertion (nth_default 0 ((L2 @ L1)[var + z := rr]))\n    (liftPoly 0 z c) \\<noteq>\n   Cv)\n  var + z \\<noteq>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c) \\<Longrightarrow>\n  nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n   (liftPoly 0 z c)\n  \\<notin> vars (liftPoly 0 z c) \\<or>\n  nth_default 0 (L2 @ L1)\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c)) =\n  nth_default 0 ((L2 @ L1)[var + z := rr])\n   (nn (nth_default 0 ((L2 @ L1)[var + z := rr])) (nth_default 0 (L2 @ L1))\n     (liftPoly 0 z c))\n  \\<forall>m f fa.\n     nn fa f m \\<in> vars m \\<and>\n     f (nn fa f m) \\<noteq> fa (nn fa f m) \\<or>\n     insertion f m = insertion fa m\n\ngoal (1 subgoal):\n 1. \\<forall>r.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := r]))\n        (liftPoly 0 z c) =\n       Cv", "by (metis (full_types) Atom.prems(3) \\<open>insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z c) = Cv\\<close> not_in_lift)"], ["proof (state)\nthis:\n  \\<forall>r.\n     insertion (nth_default 0 ((L2 @ L1)[var + z := r])) (liftPoly 0 z c) =\n     Cv\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z c) = Cv\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"eval (Atom(Eq (d-Const Dv))) ([] @ L1) = eval (liftFm 0 z (Atom(Eq (d- Const Dv)))) ([] @ L2 @ L1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (fm.Atom (Eq (d - Const Dv))) ([] @ L1) =\n    eval (liftFm 0 z (fm.Atom (Eq (d - Const Dv)))) ([] @ L2 @ L1)", "by (metis eval_liftFm_helper lengthl2 list.size(3))"], ["proof (state)\nthis:\n  eval (fm.Atom (Eq (d - Const Dv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (d - Const Dv)))) ([] @ L2 @ L1)\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  eval (fm.Atom (Eq (d - Const Dv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (d - Const Dv)))) ([] @ L2 @ L1)", "have \"(insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) = 0)\""], ["proof (prove)\nusing this:\n  eval (fm.Atom (Eq (d - Const Dv))) ([] @ L1) =\n  eval (liftFm 0 z (fm.Atom (Eq (d - Const Dv)))) ([] @ L2 @ L1)\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) = 0", "apply(simp add: insertion_sub insertion_const)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 L1) d = Dv) =\n    (insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) = 0", "using Atom(8)"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 L1) d = Dv) =\n    (insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) = 0", "unfolding L1_def"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (drop z L)) d = Dv) =\n    (insertion (nth_default 0 (L2 @ drop z L))\n      (liftPoly 0 z (d - Const Dv)) =\n     0) \\<Longrightarrow>\n    insertion (nth_default 0 (L2 @ drop z L))\n     (liftPoly 0 z (d - Const Dv)) =\n    0", "by (metis list_update_id)"], ["proof (state)\nthis:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) = 0\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) = 0", "have \"insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z d) = Dv\""], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) = 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z d) = Dv", "using lift_minus"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z (d - Const Dv)) = 0\n  insertion ?f (liftPoly 0 ?z (?c - Const ?C)) = 0 \\<Longrightarrow>\n  insertion ?f (liftPoly 0 ?z ?c) = ?C\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z d) = Dv", "by blast"], ["proof (state)\nthis:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z d) = Dv\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z d) = Dv", "have a4 : \"\\<forall>x. insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z d) = Dv\""], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z d) = Dv\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z d) = Dv", "unfolding L_def"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (L2 @ L1)) (liftPoly 0 z d) = Dv\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 ((L2 @ L1)[var + z := x]))\n        (liftPoly 0 z d) =\n       Dv", "by (metis Atom(8) L1_def L_def add_diff_cancel_right' append.simps(1) lengthl2 lift_insertion list.size(3) list_update_append not_add_less2)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z d) = Dv\n\ngoal (8 subgoals):\n 1. \\<And>x z L.\n       \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n        var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (fm.Atom x)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (fm.Atom x)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 8. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z d) = Dv", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z d) = Dv\n\ngoal (1 subgoal):\n 1. eval (fm.Atom x) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n     (L[var + z := sqrt Cv])", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z d) =\n       Dv \\<Longrightarrow>\n    aEval x (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval\n     (quadratic_sub (var + z) (liftPoly 0 z a) (liftPoly 0 z b)\n       (liftPoly 0 z c) (liftPoly 0 z d) x)\n     (L[var + z := sqrt Cv])", "using quadratic_sub[OF Atom(4) Atom(1) Atom(2) not_in_lift[OF Atom(3)], of \"(liftPoly 0 z a)\" Av \"(liftPoly 0 z b)\" Bv \"(liftPoly 0 z d)\" x\n        , OF a1 a2 a3 a4]"], ["proof (prove)\nusing this:\n  aEval x (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval\n   (quadratic_sub (var + z) (liftPoly 0 z a) (liftPoly 0 z b)\n     (liftPoly 0 z c) (liftPoly 0 z d) x)\n   (L[var + z := sqrt Cv])\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (L[var + z := x])) (liftPoly 0 z d) =\n       Dv \\<Longrightarrow>\n    aEval x (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval\n     (quadratic_sub (var + z) (liftPoly 0 z a) (liftPoly 0 z b)\n       (liftPoly 0 z c) (liftPoly 0 z d) x)\n     (L[var + z := sqrt Cv])", "."], ["proof (state)\nthis:\n  eval (fm.Atom x) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (fm.Atom x) z)\n   (L[var + z := sqrt Cv])\n\ngoal (7 subgoals):\n 1. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case (And F1 F2)"], ["proof (state)\nthis:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F1 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F1 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F2 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F2 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (7 subgoals):\n 1. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (And F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (And F1 F2)\n                            z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 7. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F1 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F1 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F2 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F2 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F1 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F1 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F2 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F2 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. eval (And F1 F2) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d (And F1 F2) z)\n     (L[var + z := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  eval (And F1 F2) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (And F1 F2) z)\n   (L[var + z := sqrt Cv])\n\ngoal (6 subgoals):\n 1. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case (Or F1 F2)"], ["proof (state)\nthis:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F1 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F1 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F2 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F2 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (6 subgoals):\n 1. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F1\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F1 z) (L[var + z := sqrt Cv]);\n        \\<And>z L.\n           \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n            var + z < length L;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n            \\<forall>x.\n               insertion (nth_default 0 ((drop z L)[var := x])) d =\n               Dv\\<rbrakk>\n           \\<Longrightarrow> eval F2\n                              (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                             eval (quadratic_sub_fm_helper var a b c d F2 z)\n                              (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Or F1 F2)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 6. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F1 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F1 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F2 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F2 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F1 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F1 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F2 (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F2 ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. eval (Or F1 F2) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n     (L[var + z := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  eval (Or F1 F2) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (Or F1 F2) z)\n   (L[var + z := sqrt Cv])\n\ngoal (5 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case (Neg F)"], ["proof (state)\nthis:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (5 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (Neg F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (Neg F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 5. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. eval (Neg F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d (Neg F) z)\n     (L[var + z := sqrt Cv])", "by auto"], ["proof (state)\nthis:\n  eval (Neg F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (Neg F) z)\n   (L[var + z := sqrt Cv])\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case (ExQ F)"], ["proof (state)\nthis:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have lengthG : \"var + (z + 1) < length (x#L)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. var + (z + 1) < length (x # L)", "using ExQ(5)"], ["proof (prove)\nusing this:\n  var + z < length L\n\ngoal (1 subgoal):\n 1. var + (z + 1) < length (x # L)", "by auto"], ["proof (state)\nthis:\n  var + (z + 1) < length (?x # L)\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have forall : \"\\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av \\<Longrightarrow> \n      \\<forall>x. insertion (nth_default 0 ((drop (z + 1) (x1 # L))[var := x])) a = Av\" for x1 a Av"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 ((drop z L)[var := x])) a =\n       Av \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((drop (z + 1) (x1 # L))[var := x])) a = Av", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 ((drop z L)[var := x])) ?a =\n     ?Av \\<Longrightarrow>\n  \\<forall>x.\n     insertion (nth_default 0 ((drop (z + 1) (?x1.0 # L))[var := x])) ?a =\n     ?Av\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have l : \"x # L[var + z := v] = ((x#L)[var+(z+1):=v])\" for x v"], ["proof (prove)\ngoal (1 subgoal):\n 1. x # L[var + z := v] = (x # L)[var + (z + 1) := v]", "by auto"], ["proof (state)\nthis:\n  ?x # L[var + z := ?v] = (?x # L)[var + (z + 1) := ?v]\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"eval (ExQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    (\\<exists>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (ExQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    (\\<exists>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]))", "by(simp)"], ["proof (state)\nthis:\n  eval (ExQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  (\\<exists>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]))\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "also"], ["proof (state)\nthis:\n  eval (ExQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  (\\<exists>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]))\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"... = (\\<exists>x. eval\n          (liftmap\n            (\\<lambda>x. quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n            F (z + 1))\n          (x # L[var + z := sqrt Cv]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n    (\\<exists>x.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + 1))\n         (x # L[var + z := sqrt Cv]))", "apply(rule ex_cong1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + 1))\n        (x # L[var + z := sqrt Cv])", "unfolding l"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval F ((x # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + 1))\n        ((x # L)[var + (z + 1) := sqrt Cv])", "using ExQ(1)[OF ExQ(2) ExQ(3) ExQ(4) lengthG forall[OF ExQ(6)] forall[OF ExQ(7)] forall[OF ExQ(8)] forall[OF ExQ(9)]]"], ["proof (prove)\nusing this:\n  eval F ((?x1.2 # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d F (z + 1))\n   ((?x1.2 # L)[var + (z + 1) := sqrt Cv])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval F ((x # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + 1))\n        ((x # L)[var + (z + 1) := sqrt Cv])", "unfolding quadratic_sub_fm_helper.simps liftmap.simps"], ["proof (prove)\nusing this:\n  eval F ((?x1.2 # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n          (liftPoly 0 x c) (liftPoly 0 x d))\n     F (z + 1))\n   ((?x1.2 # L)[var + (z + 1) := sqrt Cv])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval F ((x # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + 1))\n        ((x # L)[var + (z + 1) := sqrt Cv])", "by simp"], ["proof (state)\nthis:\n  (\\<exists>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n  (\\<exists>x.\n      eval\n       (liftmap\n         (\\<lambda>x.\n             quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n              (liftPoly 0 x c) (liftPoly 0 x d))\n         F (z + 1))\n       (x # L[var + z := sqrt Cv]))\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "also"], ["proof (state)\nthis:\n  (\\<exists>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n  (\\<exists>x.\n      eval\n       (liftmap\n         (\\<lambda>x.\n             quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n              (liftPoly 0 x c) (liftPoly 0 x d))\n         F (z + 1))\n       (x # L[var + z := sqrt Cv]))\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"... = eval (quadratic_sub_fm_helper var a b c d (ExQ F) z) (L[var + z := sqrt Cv])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + 1))\n         (x # L[var + z := sqrt Cv])) =\n    eval (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n     (L[var + z := sqrt Cv])", "unfolding quadratic_sub_fm_helper.simps liftmap.simps eval.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + 1))\n         (x # L[var + z := sqrt Cv])) =\n    (\\<exists>x.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + 1))\n         (x # L[var + z := sqrt Cv]))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>x.\n      eval\n       (liftmap\n         (\\<lambda>x.\n             quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n              (liftPoly 0 x c) (liftPoly 0 x d))\n         F (z + 1))\n       (x # L[var + z := sqrt Cv])) =\n  eval (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n   (L[var + z := sqrt Cv])\n\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 4. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "finally"], ["proof (chain)\npicking this:\n  eval (ExQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n   (L[var + z := sqrt Cv])", "show ?case"], ["proof (prove)\nusing this:\n  eval (ExQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n   (L[var + z := sqrt Cv])\n\ngoal (1 subgoal):\n 1. eval (ExQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n     (L[var + z := sqrt Cv])", "by simp"], ["proof (state)\nthis:\n  eval (ExQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (ExQ F) z)\n   (L[var + z := sqrt Cv])\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case (AllQ F)"], ["proof (state)\nthis:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have lengthG : \"var + (z + 1) < length (x#L)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. var + (z + 1) < length (x # L)", "using AllQ(5)"], ["proof (prove)\nusing this:\n  var + z < length L\n\ngoal (1 subgoal):\n 1. var + (z + 1) < length (x # L)", "by auto"], ["proof (state)\nthis:\n  var + (z + 1) < length (?x # L)\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have forall : \"\\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av \\<Longrightarrow> \n      \\<forall>x. insertion (nth_default 0 ((drop (z + 1) (x1 # L))[var := x])) a = Av\" for x1 a Av"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 ((drop z L)[var := x])) a =\n       Av \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 ((drop (z + 1) (x1 # L))[var := x])) a = Av", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 ((drop z L)[var := x])) ?a =\n     ?Av \\<Longrightarrow>\n  \\<forall>x.\n     insertion (nth_default 0 ((drop (z + 1) (?x1.0 # L))[var := x])) ?a =\n     ?Av\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have l : \"x # L[var + z := v] = ((x#L)[var+(z+1):=v])\" for x v"], ["proof (prove)\ngoal (1 subgoal):\n 1. x # L[var + z := v] = (x # L)[var + (z + 1) := v]", "by auto"], ["proof (state)\nthis:\n  ?x # L[var + z := ?v] = (?x # L)[var + (z + 1) := ?v]\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"eval (AllQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    (\\<forall>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (AllQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    (\\<forall>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]))", "by(simp)"], ["proof (state)\nthis:\n  eval (AllQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  (\\<forall>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]))\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "also"], ["proof (state)\nthis:\n  eval (AllQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  (\\<forall>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]))\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"... = (\\<forall>x. eval\n          (liftmap\n            (\\<lambda>x. quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n            F (z + 1))\n          (x # L[var + z := sqrt Cv]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n    (\\<forall>x.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + 1))\n         (x # L[var + z := sqrt Cv]))", "apply(rule all_cong1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + 1))\n        (x # L[var + z := sqrt Cv])", "unfolding l"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval F ((x # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + 1))\n        ((x # L)[var + (z + 1) := sqrt Cv])", "using AllQ(1)[OF AllQ(2) AllQ(3) AllQ(4) lengthG forall[OF AllQ(6)] forall[OF AllQ(7)] forall[OF AllQ(8)] forall[OF AllQ(9)]]"], ["proof (prove)\nusing this:\n  eval F ((?x1.2 # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d F (z + 1))\n   ((?x1.2 # L)[var + (z + 1) := sqrt Cv])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval F ((x # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + 1))\n        ((x # L)[var + (z + 1) := sqrt Cv])", "unfolding quadratic_sub_fm_helper.simps liftmap.simps"], ["proof (prove)\nusing this:\n  eval F ((?x1.2 # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n          (liftPoly 0 x c) (liftPoly 0 x d))\n     F (z + 1))\n   ((?x1.2 # L)[var + (z + 1) := sqrt Cv])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval F ((x # L)[var + (z + 1) := (Av + Bv * sqrt Cv) / Dv]) =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + 1))\n        ((x # L)[var + (z + 1) := sqrt Cv])", "by simp"], ["proof (state)\nthis:\n  (\\<forall>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n  (\\<forall>x.\n      eval\n       (liftmap\n         (\\<lambda>x.\n             quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n              (liftPoly 0 x c) (liftPoly 0 x d))\n         F (z + 1))\n       (x # L[var + z := sqrt Cv]))\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "also"], ["proof (state)\nthis:\n  (\\<forall>x. eval F (x # L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n  (\\<forall>x.\n      eval\n       (liftmap\n         (\\<lambda>x.\n             quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n              (liftPoly 0 x c) (liftPoly 0 x d))\n         F (z + 1))\n       (x # L[var + z := sqrt Cv]))\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have \"... = eval (quadratic_sub_fm_helper var a b c d (AllQ F) z) (L[var + z := sqrt Cv])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + 1))\n         (x # L[var + z := sqrt Cv])) =\n    eval (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n     (L[var + z := sqrt Cv])", "unfolding quadratic_sub_fm_helper.simps liftmap.simps eval.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + 1))\n         (x # L[var + z := sqrt Cv])) =\n    (\\<forall>x.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + 1))\n         (x # L[var + z := sqrt Cv]))", "by auto"], ["proof (state)\nthis:\n  (\\<forall>x.\n      eval\n       (liftmap\n         (\\<lambda>x.\n             quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n              (liftPoly 0 x c) (liftPoly 0 x d))\n         F (z + 1))\n       (x # L[var + z := sqrt Cv])) =\n  eval (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n   (L[var + z := sqrt Cv])\n\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllQ F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 3. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "finally"], ["proof (chain)\npicking this:\n  eval (AllQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n   (L[var + z := sqrt Cv])", "show ?case"], ["proof (prove)\nusing this:\n  eval (AllQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n   (L[var + z := sqrt Cv])\n\ngoal (1 subgoal):\n 1. eval (AllQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n     (L[var + z := sqrt Cv])", "by simp"], ["proof (state)\nthis:\n  eval (AllQ F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (AllQ F) z)\n   (L[var + z := sqrt Cv])\n\ngoal (2 subgoals):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case (ExN x1 F)"], ["proof (state)\nthis:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (2 subgoals):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have list : \"\\<And>l. length l=x1 \\<Longrightarrow> ((drop (z + x1) l @ drop (z + x1 - length l) L)) = ((drop z L))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       length l = x1 \\<Longrightarrow>\n       drop (z + x1) l @ drop (z + x1 - length l) L = drop z L", "by auto"], ["proof (state)\nthis:\n  length ?l = x1 \\<Longrightarrow>\n  drop (z + x1) ?l @ drop (z + x1 - length ?l) L = drop z L\n\ngoal (2 subgoals):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have map : \"\\<And> z L. eval (liftmap (\\<lambda>x A. (quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d) A)) F (z + x1))\n      L = eval (liftmap (\\<lambda>x A. (quadratic_sub (var + x1 + x) (liftPoly 0 (x+x1) a) (liftPoly 0 (x+x1) b) (liftPoly 0 (x+x1) c) (liftPoly 0 (x+x1) d) A)) F z)\n      L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z L.\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          F z)\n        L", "apply(induction F)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>z L.\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          TrueF (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          TrueF z)\n        L\n 2. \\<And>z L.\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          FalseF (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          FalseF z)\n        L\n 3. \\<And>x z L.\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (fm.Atom x) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (fm.Atom x) z)\n        L\n 4. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   eval\n                    (liftmap\n                      (\\<lambda>x.\n                          quadratic_sub (var + x) (liftPoly 0 x a)\n                           (liftPoly 0 x b) (liftPoly 0 x c)\n                           (liftPoly 0 x d))\n                      F1 (z + x1))\n                    L =\n                   eval\n                    (liftmap\n                      (\\<lambda>x.\n                          quadratic_sub (var + x1 + x)\n                           (liftPoly 0 (x + x1) a) (liftPoly 0 (x + x1) b)\n                           (liftPoly 0 (x + x1) c) (liftPoly 0 (x + x1) d))\n                      F1 z)\n                    L;\n        \\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F2 (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F2 z)\n            L\\<rbrakk>\n       \\<Longrightarrow> eval\n                          (liftmap\n                            (\\<lambda>x.\n                                quadratic_sub (var + x) (liftPoly 0 x a)\n                                 (liftPoly 0 x b) (liftPoly 0 x c)\n                                 (liftPoly 0 x d))\n                            (And F1 F2) (z + x1))\n                          L =\n                         eval\n                          (liftmap\n                            (\\<lambda>x.\n                                quadratic_sub (var + x1 + x)\n                                 (liftPoly 0 (x + x1) a)\n                                 (liftPoly 0 (x + x1) b)\n                                 (liftPoly 0 (x + x1) c)\n                                 (liftPoly 0 (x + x1) d))\n                            (And F1 F2) z)\n                          L\n 5. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   eval\n                    (liftmap\n                      (\\<lambda>x.\n                          quadratic_sub (var + x) (liftPoly 0 x a)\n                           (liftPoly 0 x b) (liftPoly 0 x c)\n                           (liftPoly 0 x d))\n                      F1 (z + x1))\n                    L =\n                   eval\n                    (liftmap\n                      (\\<lambda>x.\n                          quadratic_sub (var + x1 + x)\n                           (liftPoly 0 (x + x1) a) (liftPoly 0 (x + x1) b)\n                           (liftPoly 0 (x + x1) c) (liftPoly 0 (x + x1) d))\n                      F1 z)\n                    L;\n        \\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F2 (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F2 z)\n            L\\<rbrakk>\n       \\<Longrightarrow> eval\n                          (liftmap\n                            (\\<lambda>x.\n                                quadratic_sub (var + x) (liftPoly 0 x a)\n                                 (liftPoly 0 x b) (liftPoly 0 x c)\n                                 (liftPoly 0 x d))\n                            (Or F1 F2) (z + x1))\n                          L =\n                         eval\n                          (liftmap\n                            (\\<lambda>x.\n                                quadratic_sub (var + x1 + x)\n                                 (liftPoly 0 (x + x1) a)\n                                 (liftPoly 0 (x + x1) b)\n                                 (liftPoly 0 (x + x1) c)\n                                 (liftPoly 0 (x + x1) d))\n                            (Or F1 F2) z)\n                          L\n 6. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (Neg F) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (Neg F) z)\n        L\n 7. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (ExQ F) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (ExQ F) z)\n        L\n 8. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (AllQ F) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (AllQ F) z)\n        L\n 9. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (ExN x1a F) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (ExN x1a F) z)\n        L\n 10. \\<And>x1a F z L.\n        (\\<And>z L.\n            eval\n             (liftmap\n               (\\<lambda>x.\n                   quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                    (liftPoly 0 x c) (liftPoly 0 x d))\n               F (z + x1))\n             L =\n            eval\n             (liftmap\n               (\\<lambda>x.\n                   quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                    (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                    (liftPoly 0 (x + x1) d))\n               F z)\n             L) \\<Longrightarrow>\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           (AllN x1a F) (z + x1))\n         L =\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                (liftPoly 0 (x + x1) d))\n           (AllN x1a F) z)\n         L", "apply(simp_all add:add.commute add.left_commute)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<exists>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (Suc (z + x1)))\n            (x # L)) =\n       (\\<exists>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (Suc z))\n            (x # L))\n 2. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (Suc (z + x1)))\n            (x # L)) =\n       (\\<forall>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (Suc z))\n            (x # L))\n 3. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))\n 4. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))", "apply force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (Suc (z + x1)))\n            (x # L)) =\n       (\\<forall>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (Suc z))\n            (x # L))\n 2. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))\n 3. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))\n 2. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))", "by (metis (mono_tags, lifting) ab_semigroup_add_class.add_ac(1))+"], ["proof (state)\nthis:\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n          (liftPoly 0 x c) (liftPoly 0 x d))\n     F (?z + x1))\n   ?L =\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n          (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n          (liftPoly 0 (x + x1) d))\n     F ?z)\n   ?L\n\ngoal (2 subgoals):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (ExN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n                          (L[var + z := sqrt Cv])\n 2. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (ExN x1 F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n     (L[var + z := sqrt Cv])", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l.\n        length l = x1 \\<and>\n        eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n    (\\<exists>l.\n        length l = x1 \\<and>\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + x1))\n         (l @ L[var + z := sqrt Cv]))", "apply(rule ex_cong1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       (length l = x1 \\<and>\n        eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n       (length l = x1 \\<and>\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + x1))\n         (l @ L[var + z := sqrt Cv]))", "subgoal for l"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length l = x1 \\<and>\n     eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n    (length l = x1 \\<and>\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n             (liftPoly 0 x c) (liftPoly 0 x d))\n        F (z + x1))\n      (l @ L[var + z := sqrt Cv]))", "using map[of z] list[of l] ExN(1)[OF ExN(2-4), of \"z+x1\" \"l@L\"] ExN(5-9) list_update_append"], ["proof (prove)\nusing this:\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n          (liftPoly 0 x c) (liftPoly 0 x d))\n     F (z + x1))\n   ?L =\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n          (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n          (liftPoly 0 (x + x1) d))\n     F z)\n   ?L\n  length l = x1 \\<Longrightarrow>\n  drop (z + x1) l @ drop (z + x1 - length l) L = drop z L\n  \\<lbrakk>var + (z + x1) < length (l @ L);\n   \\<forall>x.\n      insertion (nth_default 0 ((drop (z + x1) (l @ L))[var := x])) a = Av;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop (z + x1) (l @ L))[var := x])) b = Bv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop (z + x1) (l @ L))[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop (z + x1) (l @ L))[var := x])) d =\n      Dv\\<rbrakk>\n  \\<Longrightarrow> eval F\n                     ((l @ L)[var + (z + x1) := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F (z + x1))\n                     ((l @ L)[var + (z + x1) := sqrt Cv])\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n  (?xs @ ?ys)[?n := ?x] =\n  (if ?n < length ?xs then ?xs[?n := ?x] @ ?ys\n   else ?xs @ ?ys[?n - length ?xs := ?x])\n\ngoal (1 subgoal):\n 1. (length l = x1 \\<and>\n     eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n    (length l = x1 \\<and>\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n             (liftPoly 0 x c) (liftPoly 0 x d))\n        F (z + x1))\n      (l @ L[var + z := sqrt Cv]))", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>L.\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + x) (liftPoly 0 x a)\n                        (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n                   F (z + length l))\n                 L =\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + length l + x)\n                        (liftPoly 0 (x + length l) a)\n                        (liftPoly 0 (x + length l) b)\n                        (liftPoly 0 (x + length l) c)\n                        (liftPoly 0 (x + length l) d))\n                   F z)\n                 L;\n     var + z < length L;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv;\n     \\<And>xs ys n x.\n        (xs @ ys)[n := x] =\n        (if n < length xs then xs[n := x] @ ys\n         else xs @ ys[n - length xs := x]);\n     eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv]); x1 = length l;\n     eval F ((l @ L)[var + (z + length l) := (Av + Bv * sqrt Cv) / Dv]);\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + length l + x) (liftPoly 0 (x + length l) a)\n             (liftPoly 0 (x + length l) b) (liftPoly 0 (x + length l) c)\n             (liftPoly 0 (x + length l) d))\n        F z)\n      ((l @ L)[var + (z + length l) := sqrt Cv])\\<rbrakk>\n    \\<Longrightarrow> eval\n                       (liftmap\n                         (\\<lambda>x.\n                             quadratic_sub (var + length l + x)\n                              (liftPoly 0 (x + length l) a)\n                              (liftPoly 0 (x + length l) b)\n                              (liftPoly 0 (x + length l) c)\n                              (liftPoly 0 (x + length l) d))\n                         F z)\n                       (l @ L[var + z := sqrt Cv])\n 2. \\<lbrakk>\\<And>L.\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + x) (liftPoly 0 x a)\n                        (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n                   F (z + length l))\n                 L =\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + length l + x)\n                        (liftPoly 0 (x + length l) a)\n                        (liftPoly 0 (x + length l) b)\n                        (liftPoly 0 (x + length l) c)\n                        (liftPoly 0 (x + length l) d))\n                   F z)\n                 L;\n     var + z < length L;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv;\n     \\<And>xs ys n x.\n        (xs @ ys)[n := x] =\n        (if n < length xs then xs[n := x] @ ys\n         else xs @ ys[n - length xs := x]);\n     eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv]); x1 = length l;\n     \\<not> eval F\n             ((l @ L)[var + (z + length l) := (Av + Bv * sqrt Cv) / Dv]);\n     \\<not> eval\n             (liftmap\n               (\\<lambda>x.\n                   quadratic_sub (var + length l + x)\n                    (liftPoly 0 (x + length l) a)\n                    (liftPoly 0 (x + length l) b)\n                    (liftPoly 0 (x + length l) c)\n                    (liftPoly 0 (x + length l) d))\n               F z)\n             ((l @ L)[var + (z + length l) := sqrt Cv])\\<rbrakk>\n    \\<Longrightarrow> eval\n                       (liftmap\n                         (\\<lambda>x.\n                             quadratic_sub (var + length l + x)\n                              (liftPoly 0 (x + length l) a)\n                              (liftPoly 0 (x + length l) b)\n                              (liftPoly 0 (x + length l) c)\n                              (liftPoly 0 (x + length l) d))\n                         F z)\n                       (l @ L[var + z := sqrt Cv])\n 3. \\<lbrakk>\\<And>L.\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + x) (liftPoly 0 x a)\n                        (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n                   F (z + length l))\n                 L =\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + length l + x)\n                        (liftPoly 0 (x + length l) a)\n                        (liftPoly 0 (x + length l) b)\n                        (liftPoly 0 (x + length l) c)\n                        (liftPoly 0 (x + length l) d))\n                   F z)\n                 L;\n     var + z < length L;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv;\n     \\<And>xs ys n x.\n        (xs @ ys)[n := x] =\n        (if n < length xs then xs[n := x] @ ys\n         else xs @ ys[n - length xs := x]);\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + length l + x) (liftPoly 0 (x + length l) a)\n             (liftPoly 0 (x + length l) b) (liftPoly 0 (x + length l) c)\n             (liftPoly 0 (x + length l) d))\n        F z)\n      (l @ L[var + z := sqrt Cv]);\n     x1 = length l;\n     eval F ((l @ L)[var + (z + length l) := (Av + Bv * sqrt Cv) / Dv]);\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + length l + x) (liftPoly 0 (x + length l) a)\n             (liftPoly 0 (x + length l) b) (liftPoly 0 (x + length l) c)\n             (liftPoly 0 (x + length l) d))\n        F z)\n      ((l @ L)[var + (z + length l) := sqrt Cv])\\<rbrakk>\n    \\<Longrightarrow> eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])\n 4. \\<lbrakk>\\<And>L.\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + x) (liftPoly 0 x a)\n                        (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n                   F (z + length l))\n                 L =\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + length l + x)\n                        (liftPoly 0 (x + length l) a)\n                        (liftPoly 0 (x + length l) b)\n                        (liftPoly 0 (x + length l) c)\n                        (liftPoly 0 (x + length l) d))\n                   F z)\n                 L;\n     var + z < length L;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv;\n     \\<And>xs ys n x.\n        (xs @ ys)[n := x] =\n        (if n < length xs then xs[n := x] @ ys\n         else xs @ ys[n - length xs := x]);\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + length l + x) (liftPoly 0 (x + length l) a)\n             (liftPoly 0 (x + length l) b) (liftPoly 0 (x + length l) c)\n             (liftPoly 0 (x + length l) d))\n        F z)\n      (l @ L[var + z := sqrt Cv]);\n     x1 = length l;\n     \\<not> eval F\n             ((l @ L)[var + (z + length l) := (Av + Bv * sqrt Cv) / Dv]);\n     \\<not> eval\n             (liftmap\n               (\\<lambda>x.\n                   quadratic_sub (var + length l + x)\n                    (liftPoly 0 (x + length l) a)\n                    (liftPoly 0 (x + length l) b)\n                    (liftPoly 0 (x + length l) c)\n                    (liftPoly 0 (x + length l) d))\n               F z)\n             ((l @ L)[var + (z + length l) := sqrt Cv])\\<rbrakk>\n    \\<Longrightarrow> eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])", "by (simp add: list_update_append) +"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eval (ExN x1 F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (ExN x1 F) z)\n   (L[var + z := sqrt Cv])\n\ngoal (1 subgoal):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "case (AllN x1 F)"], ["proof (state)\nthis:\n  \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n   var + ?z < length ?L;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop ?z ?L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop ?z ?L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F (?L[var + ?z := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F ?z)\n                     (?L[var + ?z := sqrt Cv])\n  Dv \\<noteq> 0\n  0 \\<le> Cv\n  var \\<notin> vars c\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have list : \"\\<And>l. length l=x1 \\<Longrightarrow> ((drop (z + x1) l @ drop (z + x1 - length l) L)) = ((drop z L))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       length l = x1 \\<Longrightarrow>\n       drop (z + x1) l @ drop (z + x1 - length l) L = drop z L", "by auto"], ["proof (state)\nthis:\n  length ?l = x1 \\<Longrightarrow>\n  drop (z + x1) ?l @ drop (z + x1 - length ?l) L = drop z L\n\ngoal (1 subgoal):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "have map : \"\\<And> z L. eval (liftmap (\\<lambda>x A. (quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d) A)) F (z + x1))\n      L = eval (liftmap (\\<lambda>x A. (quadratic_sub (var + x1 + x) (liftPoly 0 (x+x1) a) (liftPoly 0 (x+x1) b) (liftPoly 0 (x+x1) c) (liftPoly 0 (x+x1) d) A)) F z)\n      L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z L.\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          F (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          F z)\n        L", "apply(induction F)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>z L.\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          TrueF (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          TrueF z)\n        L\n 2. \\<And>z L.\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          FalseF (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          FalseF z)\n        L\n 3. \\<And>x z L.\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (fm.Atom x) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (fm.Atom x) z)\n        L\n 4. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   eval\n                    (liftmap\n                      (\\<lambda>x.\n                          quadratic_sub (var + x) (liftPoly 0 x a)\n                           (liftPoly 0 x b) (liftPoly 0 x c)\n                           (liftPoly 0 x d))\n                      F1 (z + x1))\n                    L =\n                   eval\n                    (liftmap\n                      (\\<lambda>x.\n                          quadratic_sub (var + x1 + x)\n                           (liftPoly 0 (x + x1) a) (liftPoly 0 (x + x1) b)\n                           (liftPoly 0 (x + x1) c) (liftPoly 0 (x + x1) d))\n                      F1 z)\n                    L;\n        \\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F2 (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F2 z)\n            L\\<rbrakk>\n       \\<Longrightarrow> eval\n                          (liftmap\n                            (\\<lambda>x.\n                                quadratic_sub (var + x) (liftPoly 0 x a)\n                                 (liftPoly 0 x b) (liftPoly 0 x c)\n                                 (liftPoly 0 x d))\n                            (And F1 F2) (z + x1))\n                          L =\n                         eval\n                          (liftmap\n                            (\\<lambda>x.\n                                quadratic_sub (var + x1 + x)\n                                 (liftPoly 0 (x + x1) a)\n                                 (liftPoly 0 (x + x1) b)\n                                 (liftPoly 0 (x + x1) c)\n                                 (liftPoly 0 (x + x1) d))\n                            (And F1 F2) z)\n                          L\n 5. \\<And>F1 F2 z L.\n       \\<lbrakk>\\<And>z L.\n                   eval\n                    (liftmap\n                      (\\<lambda>x.\n                          quadratic_sub (var + x) (liftPoly 0 x a)\n                           (liftPoly 0 x b) (liftPoly 0 x c)\n                           (liftPoly 0 x d))\n                      F1 (z + x1))\n                    L =\n                   eval\n                    (liftmap\n                      (\\<lambda>x.\n                          quadratic_sub (var + x1 + x)\n                           (liftPoly 0 (x + x1) a) (liftPoly 0 (x + x1) b)\n                           (liftPoly 0 (x + x1) c) (liftPoly 0 (x + x1) d))\n                      F1 z)\n                    L;\n        \\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F2 (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F2 z)\n            L\\<rbrakk>\n       \\<Longrightarrow> eval\n                          (liftmap\n                            (\\<lambda>x.\n                                quadratic_sub (var + x) (liftPoly 0 x a)\n                                 (liftPoly 0 x b) (liftPoly 0 x c)\n                                 (liftPoly 0 x d))\n                            (Or F1 F2) (z + x1))\n                          L =\n                         eval\n                          (liftmap\n                            (\\<lambda>x.\n                                quadratic_sub (var + x1 + x)\n                                 (liftPoly 0 (x + x1) a)\n                                 (liftPoly 0 (x + x1) b)\n                                 (liftPoly 0 (x + x1) c)\n                                 (liftPoly 0 (x + x1) d))\n                            (Or F1 F2) z)\n                          L\n 6. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (Neg F) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (Neg F) z)\n        L\n 7. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (ExQ F) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (ExQ F) z)\n        L\n 8. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (AllQ F) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (AllQ F) z)\n        L\n 9. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n               (liftPoly 0 x c) (liftPoly 0 x d))\n          (ExN x1a F) (z + x1))\n        L =\n       eval\n        (liftmap\n          (\\<lambda>x.\n              quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n               (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n               (liftPoly 0 (x + x1) d))\n          (ExN x1a F) z)\n        L\n 10. \\<And>x1a F z L.\n        (\\<And>z L.\n            eval\n             (liftmap\n               (\\<lambda>x.\n                   quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                    (liftPoly 0 x c) (liftPoly 0 x d))\n               F (z + x1))\n             L =\n            eval\n             (liftmap\n               (\\<lambda>x.\n                   quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                    (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                    (liftPoly 0 (x + x1) d))\n               F z)\n             L) \\<Longrightarrow>\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           (AllN x1a F) (z + x1))\n         L =\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n                (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                (liftPoly 0 (x + x1) d))\n           (AllN x1a F) z)\n         L", "apply(simp_all add:add.commute add.left_commute)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<exists>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (Suc (z + x1)))\n            (x # L)) =\n       (\\<exists>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (Suc z))\n            (x # L))\n 2. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (Suc (z + x1)))\n            (x # L)) =\n       (\\<forall>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (Suc z))\n            (x # L))\n 3. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))\n 4. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))", "apply force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (Suc (z + x1)))\n            (x # L)) =\n       (\\<forall>x.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (Suc z))\n            (x # L))\n 2. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))\n 3. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<exists>l.\n           length l = x1a \\<and>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))\n 2. \\<And>x1a F z L.\n       (\\<And>z L.\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (z + x1))\n            L =\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F z)\n            L) \\<Longrightarrow>\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + var) (liftPoly 0 x a) (liftPoly 0 x b)\n                   (liftPoly 0 x c) (liftPoly 0 x d))\n              F (x1a + (z + x1)))\n            (l @ L)) =\n       (\\<forall>l.\n           length l = x1a \\<longrightarrow>\n           eval\n            (liftmap\n              (\\<lambda>x.\n                  quadratic_sub (x + (var + x1)) (liftPoly 0 (x + x1) a)\n                   (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n                   (liftPoly 0 (x + x1) d))\n              F (x1a + z))\n            (l @ L))", "by (metis (mono_tags, lifting) ab_semigroup_add_class.add_ac(1))+"], ["proof (state)\nthis:\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n          (liftPoly 0 x c) (liftPoly 0 x d))\n     F (?z + x1))\n   ?L =\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n          (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n          (liftPoly 0 (x + x1) d))\n     F ?z)\n   ?L\n\ngoal (1 subgoal):\n 1. \\<And>x1 F z L.\n       \\<lbrakk>\\<And>z L.\n                   \\<lbrakk>Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c;\n                    var + z < length L;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) a =\n                       Av;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) b =\n                       Bv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) c =\n                       Cv;\n                    \\<forall>x.\n                       insertion (nth_default 0 ((drop z L)[var := x])) d =\n                       Dv\\<rbrakk>\n                   \\<Longrightarrow> eval F\n(L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                                     eval\n(quadratic_sub_fm_helper var a b c d F z) (L[var + z := sqrt Cv]);\n        Dv \\<noteq> 0; 0 \\<le> Cv; var \\<notin> vars c; var + z < length L;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n        \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n        \\<forall>x.\n           insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\\<rbrakk>\n       \\<Longrightarrow> eval (AllN x1 F)\n                          (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n                         eval\n                          (quadratic_sub_fm_helper var a b c d (AllN x1 F)\n                            z)\n                          (L[var + z := sqrt Cv])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (AllN x1 F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)\n     (L[var + z := sqrt Cv])", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>l.\n        length l = x1 \\<longrightarrow>\n        eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n    (\\<forall>l.\n        length l = x1 \\<longrightarrow>\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + x1))\n         (l @ L[var + z := sqrt Cv]))", "apply(rule all_cong1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       (length l = x1 \\<longrightarrow>\n        eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n       (length l = x1 \\<longrightarrow>\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n                (liftPoly 0 x c) (liftPoly 0 x d))\n           F (z + x1))\n         (l @ L[var + z := sqrt Cv]))", "subgoal for l"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length l = x1 \\<longrightarrow>\n     eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n    (length l = x1 \\<longrightarrow>\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n             (liftPoly 0 x c) (liftPoly 0 x d))\n        F (z + x1))\n      (l @ L[var + z := sqrt Cv]))", "using map[of z] list[of l] AllN(1)[OF AllN(2-4), of \"z+x1\" \"l@L\"] AllN(5-9)"], ["proof (prove)\nusing this:\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n          (liftPoly 0 x c) (liftPoly 0 x d))\n     F (z + x1))\n   ?L =\n  eval\n   (liftmap\n     (\\<lambda>x.\n         quadratic_sub (var + x1 + x) (liftPoly 0 (x + x1) a)\n          (liftPoly 0 (x + x1) b) (liftPoly 0 (x + x1) c)\n          (liftPoly 0 (x + x1) d))\n     F z)\n   ?L\n  length l = x1 \\<Longrightarrow>\n  drop (z + x1) l @ drop (z + x1 - length l) L = drop z L\n  \\<lbrakk>var + (z + x1) < length (l @ L);\n   \\<forall>x.\n      insertion (nth_default 0 ((drop (z + x1) (l @ L))[var := x])) a = Av;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop (z + x1) (l @ L))[var := x])) b = Bv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop (z + x1) (l @ L))[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop (z + x1) (l @ L))[var := x])) d =\n      Dv\\<rbrakk>\n  \\<Longrightarrow> eval F\n                     ((l @ L)[var + (z + x1) := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F (z + x1))\n                     ((l @ L)[var + (z + x1) := sqrt Cv])\n  var + z < length L\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. (length l = x1 \\<longrightarrow>\n     eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])) =\n    (length l = x1 \\<longrightarrow>\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + x) (liftPoly 0 x a) (liftPoly 0 x b)\n             (liftPoly 0 x c) (liftPoly 0 x d))\n        F (z + x1))\n      (l @ L[var + z := sqrt Cv]))", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>L.\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + x) (liftPoly 0 x a)\n                        (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n                   F (z + length l))\n                 L =\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + length l + x)\n                        (liftPoly 0 (x + length l) a)\n                        (liftPoly 0 (x + length l) b)\n                        (liftPoly 0 (x + length l) c)\n                        (liftPoly 0 (x + length l) d))\n                   F z)\n                 L;\n     var + z < length L;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv;\n     eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv]); x1 = length l;\n     eval F ((l @ L)[var + (z + length l) := (Av + Bv * sqrt Cv) / Dv]);\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + length l + x) (liftPoly 0 (x + length l) a)\n             (liftPoly 0 (x + length l) b) (liftPoly 0 (x + length l) c)\n             (liftPoly 0 (x + length l) d))\n        F z)\n      ((l @ L)[var + (z + length l) := sqrt Cv])\\<rbrakk>\n    \\<Longrightarrow> eval\n                       (liftmap\n                         (\\<lambda>x.\n                             quadratic_sub (var + length l + x)\n                              (liftPoly 0 (x + length l) a)\n                              (liftPoly 0 (x + length l) b)\n                              (liftPoly 0 (x + length l) c)\n                              (liftPoly 0 (x + length l) d))\n                         F z)\n                       (l @ L[var + z := sqrt Cv])\n 2. \\<lbrakk>\\<And>L.\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + x) (liftPoly 0 x a)\n                        (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n                   F (z + length l))\n                 L =\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + length l + x)\n                        (liftPoly 0 (x + length l) a)\n                        (liftPoly 0 (x + length l) b)\n                        (liftPoly 0 (x + length l) c)\n                        (liftPoly 0 (x + length l) d))\n                   F z)\n                 L;\n     var + z < length L;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv;\n     eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv]); x1 = length l;\n     \\<not> eval F\n             ((l @ L)[var + (z + length l) := (Av + Bv * sqrt Cv) / Dv]);\n     \\<not> eval\n             (liftmap\n               (\\<lambda>x.\n                   quadratic_sub (var + length l + x)\n                    (liftPoly 0 (x + length l) a)\n                    (liftPoly 0 (x + length l) b)\n                    (liftPoly 0 (x + length l) c)\n                    (liftPoly 0 (x + length l) d))\n               F z)\n             ((l @ L)[var + (z + length l) := sqrt Cv])\\<rbrakk>\n    \\<Longrightarrow> eval\n                       (liftmap\n                         (\\<lambda>x.\n                             quadratic_sub (var + length l + x)\n                              (liftPoly 0 (x + length l) a)\n                              (liftPoly 0 (x + length l) b)\n                              (liftPoly 0 (x + length l) c)\n                              (liftPoly 0 (x + length l) d))\n                         F z)\n                       (l @ L[var + z := sqrt Cv])\n 3. \\<lbrakk>\\<And>L.\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + x) (liftPoly 0 x a)\n                        (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n                   F (z + length l))\n                 L =\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + length l + x)\n                        (liftPoly 0 (x + length l) a)\n                        (liftPoly 0 (x + length l) b)\n                        (liftPoly 0 (x + length l) c)\n                        (liftPoly 0 (x + length l) d))\n                   F z)\n                 L;\n     var + z < length L;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv;\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + length l + x) (liftPoly 0 (x + length l) a)\n             (liftPoly 0 (x + length l) b) (liftPoly 0 (x + length l) c)\n             (liftPoly 0 (x + length l) d))\n        F z)\n      (l @ L[var + z := sqrt Cv]);\n     x1 = length l;\n     eval F ((l @ L)[var + (z + length l) := (Av + Bv * sqrt Cv) / Dv]);\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + length l + x) (liftPoly 0 (x + length l) a)\n             (liftPoly 0 (x + length l) b) (liftPoly 0 (x + length l) c)\n             (liftPoly 0 (x + length l) d))\n        F z)\n      ((l @ L)[var + (z + length l) := sqrt Cv])\\<rbrakk>\n    \\<Longrightarrow> eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])\n 4. \\<lbrakk>\\<And>L.\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + x) (liftPoly 0 x a)\n                        (liftPoly 0 x b) (liftPoly 0 x c) (liftPoly 0 x d))\n                   F (z + length l))\n                 L =\n                eval\n                 (liftmap\n                   (\\<lambda>x.\n                       quadratic_sub (var + length l + x)\n                        (liftPoly 0 (x + length l) a)\n                        (liftPoly 0 (x + length l) b)\n                        (liftPoly 0 (x + length l) c)\n                        (liftPoly 0 (x + length l) d))\n                   F z)\n                 L;\n     var + z < length L;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) a = Av;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) b = Bv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) c = Cv;\n     \\<forall>x. insertion (nth_default 0 ((drop z L)[var := x])) d = Dv;\n     eval\n      (liftmap\n        (\\<lambda>x.\n            quadratic_sub (var + length l + x) (liftPoly 0 (x + length l) a)\n             (liftPoly 0 (x + length l) b) (liftPoly 0 (x + length l) c)\n             (liftPoly 0 (x + length l) d))\n        F z)\n      (l @ L[var + z := sqrt Cv]);\n     x1 = length l;\n     \\<not> eval F\n             ((l @ L)[var + (z + length l) := (Av + Bv * sqrt Cv) / Dv]);\n     \\<not> eval\n             (liftmap\n               (\\<lambda>x.\n                   quadratic_sub (var + length l + x)\n                    (liftPoly 0 (x + length l) a)\n                    (liftPoly 0 (x + length l) b)\n                    (liftPoly 0 (x + length l) c)\n                    (liftPoly 0 (x + length l) d))\n               F z)\n             ((l @ L)[var + (z + length l) := sqrt Cv])\\<rbrakk>\n    \\<Longrightarrow> eval F (l @ L[var + z := (Av + Bv * sqrt Cv) / Dv])", "by (simp add: list_update_append) +"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eval (AllN x1 F) (L[var + z := (Av + Bv * sqrt Cv) / Dv]) =\n  eval (quadratic_sub_fm_helper var a b c d (AllN x1 F) z)\n   (L[var + z := sqrt Cv])\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem quadratic_sub_fm :\n  assumes lLength : \"length L > var\"\n  assumes nonzero : \"Dv \\<noteq> 0\"\n  assumes detGreater0 : \"Cv \\<ge> 0\"\n  assumes freeC : \"var \\<notin> vars c\"\n  assumes ha : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (a::real mpoly) = (Av :: real)\"\n  assumes hb : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (b::real mpoly) = (Bv :: real)\"\n  assumes hc : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (c::real mpoly) = (Cv :: real)\"\n  assumes hd : \"\\<forall>x. insertion (nth_default 0 (list_update L var x)) (d::real mpoly) = (Dv :: real)\"\n  shows \"eval F (list_update L var ((Av+Bv*sqrt(Cv))/Dv)) = eval (quadratic_sub_fm var a b c d F) (list_update L var (sqrt Cv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval F (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm var a b c d F) (L[var := sqrt Cv])", "unfolding quadratic_sub_fm.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval F (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d F 0) (L[var := sqrt Cv])", "using quadratic_sub_fm_helper[OF assms(2) assms(3) assms(4), of 0 L a Av b Bv d F] assms(1) assms(5) assms(6) assms(7) assms(8)"], ["proof (prove)\nusing this:\n  \\<lbrakk>var + 0 < length L;\n   \\<forall>x. insertion (nth_default 0 ((drop 0 L)[var := x])) a = Av;\n   \\<forall>x. insertion (nth_default 0 ((drop 0 L)[var := x])) b = Bv;\n   \\<forall>x. insertion (nth_default 0 ((drop 0 L)[var := x])) c = Cv;\n   \\<forall>x.\n      insertion (nth_default 0 ((drop 0 L)[var := x])) d = Dv\\<rbrakk>\n  \\<Longrightarrow> eval F (L[var + 0 := (Av + Bv * sqrt Cv) / Dv]) =\n                    eval (quadratic_sub_fm_helper var a b c d F 0)\n                     (L[var + 0 := sqrt Cv])\n  var < length L\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) a = Av\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) b = Bv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) c = Cv\n  \\<forall>x. insertion (nth_default 0 (L[var := x])) d = Dv\n\ngoal (1 subgoal):\n 1. eval F (L[var := (Av + Bv * sqrt Cv) / Dv]) =\n    eval (quadratic_sub_fm_helper var a b c d F 0) (L[var := sqrt Cv])", "by (simp add: lLength)"], ["", "end"]]}