{"file_name": "/home/qj213/afp-2021-10-22/thys/Virtual_Substitution/EliminateVariable.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Virtual_Substitution", "problem_names": ["lemma elimVar_eq :\n  assumes hlength : \"length xs = var\"\n  assumes in_list : \"Eq p \\<in> set(L)\"\n  assumes low_pow : \"MPoly_Type.degree p var = 1 \\<or> MPoly_Type.degree p var = 2\"\n  shows \"((\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    ((\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)))\\<or> (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)))\"", "lemma freeIn_elimVar_eq : \"freeIn var (elimVar var L F (Eq p))\"", "lemma elimVar_eq_2 :\n  assumes hlength : \"length xs = var\"\n  assumes in_list : \"Eq p \\<in> set(L)\"\n  assumes low_pow : \"MPoly_Type.degree p var = 1 \\<or> MPoly_Type.degree p var = 2\"\n  assumes nonzero : \"\\<forall>x. \n              insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 2) \\<noteq> 0\n            \\<or> insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 1) \\<noteq> 0\n            \\<or> insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 0) \\<noteq> 0\" (is ?non0)\n  shows \"(\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n         (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\""], "translations": [["", "lemma elimVar_eq :\n  assumes hlength : \"length xs = var\"\n  assumes in_list : \"Eq p \\<in> set(L)\"\n  assumes low_pow : \"MPoly_Type.degree p var = 1 \\<or> MPoly_Type.degree p var = 2\"\n  shows \"((\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    ((\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)))\\<or> (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define A where \"A = (isolate_variable_sparse p var 2)\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p var 2\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define B where \"B = (isolate_variable_sparse p var 1)\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p var 1\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define C where \"C = (isolate_variable_sparse p var 0)\""], ["proof (state)\nthis:\n  C = isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have freeA : \"var \\<notin> vars A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars A", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 2)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars A\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have freeB : \"var \\<notin> vars B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars B", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 1)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars B\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have freeC : \"var \\<notin> vars C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars C", "unfolding C_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 0)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "assume \"eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)\""], ["proof (state)\nthis:\n  eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)", "have h : \"(\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and> (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\""], ["proof (prove)\nusing this:\n  eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))", "apply(simp add:eval_list_conj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>fm.Atom ` set L \\<union> set F.\n       eval f (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    \\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)", "by (meson Un_iff eval.simps(1) image_eqI)"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define X where \"X=xs@x#\\<Gamma>\""], ["proof (state)\nthis:\n  X = xs @ x # \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have Xlength : \"length X > var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var < length X", "using X_def hlength"], ["proof (prove)\nusing this:\n  X = xs @ x # \\<Gamma>\n  length xs = var\n\ngoal (1 subgoal):\n 1. var < length X", "by auto"], ["proof (state)\nthis:\n  var < length X\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define Aval where \"Aval = insertion (nth_default 0 (list_update X var x)) A\""], ["proof (state)\nthis:\n  Aval = insertion (nth_default 0 (X[var := x])) A\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define Bval where \"Bval = insertion (nth_default 0 (list_update X var x)) B\""], ["proof (state)\nthis:\n  Bval = insertion (nth_default 0 (X[var := x])) B\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define Cval where \"Cval = insertion (nth_default 0 (list_update X var x)) C\""], ["proof (state)\nthis:\n  Cval = insertion (nth_default 0 (X[var := x])) C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have hinsert : \"(xs @ x # \\<Gamma>)[var := x] = (xs @ x #\\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ x # \\<Gamma>)[var := x] = xs @ x # \\<Gamma>", "using hlength"], ["proof (prove)\nusing this:\n  length xs = var\n\ngoal (1 subgoal):\n 1. (xs @ x # \\<Gamma>)[var := x] = xs @ x # \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  (xs @ x # \\<Gamma>)[var := x] = xs @ x # \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have allAval : \"\\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval", "using Aval_def"], ["proof (prove)\nusing this:\n  Aval = insertion (nth_default 0 (X[var := x])) A\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval", "using not_contains_insertion[where var=\"var\", where p = \"A\", OF freeA, where L = \"xs @ x #\\<Gamma>\", where x=\"x\", where val=\"Aval\"]"], ["proof (prove)\nusing this:\n  Aval = insertion (nth_default 0 (X[var := x])) A\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := x])) A =\n  Aval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) A = Aval\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval", "unfolding X_def hinsert"], ["proof (prove)\nusing this:\n  Aval = insertion (nth_default 0 (xs @ x # \\<Gamma>)) A\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) A = Aval\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval", "using hlength"], ["proof (prove)\nusing this:\n  Aval = insertion (nth_default 0 (xs @ x # \\<Gamma>)) A\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) A = Aval\n  length xs = var\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have allBval : \"\\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval", "using Bval_def"], ["proof (prove)\nusing this:\n  Bval = insertion (nth_default 0 (X[var := x])) B\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval", "using not_contains_insertion[where var=\"var\", where p = \"B\", OF freeB, where L = \"xs @ x #\\<Gamma>\", where x=\"x\", where val=\"Bval\"]"], ["proof (prove)\nusing this:\n  Bval = insertion (nth_default 0 (X[var := x])) B\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := x])) B =\n  Bval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) B = Bval\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval", "unfolding X_def hinsert"], ["proof (prove)\nusing this:\n  Bval = insertion (nth_default 0 (xs @ x # \\<Gamma>)) B\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) B = Bval\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval", "using hlength"], ["proof (prove)\nusing this:\n  Bval = insertion (nth_default 0 (xs @ x # \\<Gamma>)) B\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) B = Bval\n  length xs = var\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have allCval : \"\\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval", "using Cval_def"], ["proof (prove)\nusing this:\n  Cval = insertion (nth_default 0 (X[var := x])) C\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval", "using not_contains_insertion[where var=\"var\", where p = \"C\", OF freeC, where L = \"xs @ x #\\<Gamma>\", where x=\"x\", where val=\"Cval\"]"], ["proof (prove)\nusing this:\n  Cval = insertion (nth_default 0 (X[var := x])) C\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := x])) C =\n  Cval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) C = Cval\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval", "unfolding X_def hinsert"], ["proof (prove)\nusing this:\n  Cval = insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) C = Cval\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval", "using hlength"], ["proof (prove)\nusing this:\n  Cval = insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval \\<Longrightarrow>\n  insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := ?y])) C = Cval\n  length xs = var\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have insertion_p : \"insertion (nth_default 0 X) p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 X) p = 0", "using in_list h aEval.simps(1) X_def"], ["proof (prove)\nusing this:\n  Eq p \\<in> set L\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n  aEval (Eq ?p) ?L = (insertion (nth_default 0 ?L) ?p = 0)\n  X = xs @ x # \\<Gamma>\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 X) p = 0", "by fastforce"], ["proof (state)\nthis:\n  insertion (nth_default 0 X) p = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have express_p : \"p = A * Var var ^ 2 + B * Var var + C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = A * (Var var)\\<^sup>2 + B * Var var + C", "using express_poly[OF low_pow]"], ["proof (prove)\nusing this:\n  p =\n  isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n  isolate_variable_sparse p var 1 * Var var +\n  isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. p = A * (Var var)\\<^sup>2 + B * Var var + C", "unfolding A_def B_def C_def"], ["proof (prove)\nusing this:\n  p =\n  isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n  isolate_variable_sparse p var 1 * Var var +\n  isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. p =\n    isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n    isolate_variable_sparse p var 1 * Var var +\n    isolate_variable_sparse p var 0", "by fastforce"], ["proof (state)\nthis:\n  p = A * (Var var)\\<^sup>2 + B * Var var + C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have insertion_p' : \"Aval *x^2+Bval *x+Cval = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval * x\\<^sup>2 + Bval * x + Cval = 0", "using express_p insertion_p"], ["proof (prove)\nusing this:\n  p = A * (Var var)\\<^sup>2 + B * Var var + C\n  insertion (nth_default 0 X) p = 0\n\ngoal (1 subgoal):\n 1. Aval * x\\<^sup>2 + Bval * x + Cval = 0", "unfolding Aval_def Bval_def Cval_def X_def hinsert"], ["proof (prove)\nusing this:\n  p = A * (Var var)\\<^sup>2 + B * Var var + C\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) p = 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A * x\\<^sup>2 +\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) B * x +\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n    0", "apply(simp add: insertion_add insertion_mult insertion_pow)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = A * (Var var)\\<^sup>2 + B * Var var + C;\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n     (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var))\\<^sup>2 +\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) B *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) +\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n     0\\<rbrakk>\n    \\<Longrightarrow> insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n                      x\\<^sup>2 +\n                      insertion (nth_default 0 (xs @ x # \\<Gamma>)) B * x +\n                      insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n                      0", "using  insertion_var"], ["proof (prove)\nusing this:\n  ?var < length ?L \\<Longrightarrow>\n  insertion (nth_default (0::?'a) (?L[?var := ?x])) (Var ?var) = ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = A * (Var var)\\<^sup>2 + B * Var var + C;\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n     (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var))\\<^sup>2 +\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) B *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) +\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n     0\\<rbrakk>\n    \\<Longrightarrow> insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n                      x\\<^sup>2 +\n                      insertion (nth_default 0 (xs @ x # \\<Gamma>)) B * x +\n                      insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n                      0", "by (metis X_def Xlength hinsert)"], ["proof (state)\nthis:\n  Aval * x\\<^sup>2 + Bval * x + Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have biglemma : \"\n       ((Aval = 0 \\<and>\n        Bval \\<noteq> 0 \\<and>\n        (\\<forall>f\\<in>set L. aEval (linear_substitution var (-C) B f) (xs @ x # \\<Gamma>)) \\<and> \n        (\\<forall>f\\<in>set F. eval (linear_substitution_fm var (-C) B f) (xs @ x # \\<Gamma>)) \\<or>\n        Aval \\<noteq> 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * \n        Aval *\n        Cval\n        \\<le> (Bval)\\<^sup>2 \\<and>\n        ((\\<forall>f\\<in>set L. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>))\\<and>\n         (\\<forall>f\\<in>set F. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>)) \\<or>\n         (\\<forall>f\\<in>set L. eval (quadratic_sub var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>)) \\<and>\n         (\\<forall>f\\<in>set F. eval (quadratic_sub_fm var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>))) \\<or>\n        Aval = 0 \\<and>\n        Bval = 0 \\<and>\n        Cval = 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"Aval=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Aval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Aval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  Aval = 0\n\ngoal (2 subgoals):\n 1. Aval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Aval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Aval = 0", "have aval0 : \"Aval=0\""], ["proof (prove)\nusing this:\n  Aval = 0\n\ngoal (1 subgoal):\n 1. Aval = 0", "by simp"], ["proof (state)\nthis:\n  Aval = 0\n\ngoal (2 subgoals):\n 1. Aval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Aval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"Bval=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Bval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  Bval = 0\n\ngoal (2 subgoals):\n 1. Bval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Bval = 0", "have bval0 :  \"Bval=0\""], ["proof (prove)\nusing this:\n  Bval = 0\n\ngoal (1 subgoal):\n 1. Bval = 0", "by simp"], ["proof (state)\nthis:\n  Bval = 0\n\ngoal (2 subgoals):\n 1. Bval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h : \"eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)", "using hlength h"], ["proof (prove)\nusing this:\n  length xs = var\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)", "unfolding X_def"], ["proof (prove)\nusing this:\n  length xs = var\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)", "using \\<open>eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)\\<close>"], ["proof (prove)\nusing this:\n  length xs = var\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n  eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)", "by blast"], ["proof (state)\nthis:\n  eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)\n\ngoal (2 subgoals):\n 1. Bval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"Cval=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Cval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Cval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  Cval = 0\n\ngoal (2 subgoals):\n 1. Cval = 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Cval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by(simp add:aval0 True bval0)"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. Cval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Cval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  Cval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Cval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using insertion_p' aval0 bval0 False"], ["proof (prove)\nusing this:\n  Aval * x\\<^sup>2 + Bval * x + Cval = 0\n  Aval = 0\n  Bval = 0\n  Cval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by(simp)"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  Bval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have bh : \"insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval", "using allBval"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval", "unfolding X_def"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := - Cval / Bval]))\n     B =\n    Bval", "using Bval_def X_def freeB not_contains_insertion"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n  Bval = insertion (nth_default 0 (X[var := x])) B\n  X = xs @ x # \\<Gamma>\n  var \\<notin> vars B\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := - Cval / Bval]))\n     B =\n    Bval", "by blast"], ["proof (state)\nthis:\n  insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have ch : \"insertion (nth_default 0 (X[var := - Cval / Bval])) C = Cval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := - Cval / Bval])) C = Cval", "using allCval"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := - Cval / Bval])) C = Cval", "unfolding X_def"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := - Cval / Bval]))\n     C =\n    Cval", "using Cval_def X_def freeC not_contains_insertion"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n  Cval = insertion (nth_default 0 (X[var := x])) C\n  X = xs @ x # \\<Gamma>\n  var \\<notin> vars C\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := - Cval / Bval]))\n     C =\n    Cval", "by blast"], ["proof (state)\nthis:\n  insertion (nth_default 0 (X[var := - Cval / Bval])) C = Cval\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have xh : \"x=-Cval/Bval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = - Cval / Bval", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x = - Cval / Bval", "have \"Bval*x+Cval = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bval * x + Cval = 0", "using insertion_p' aval0"], ["proof (prove)\nusing this:\n  Aval * x\\<^sup>2 + Bval * x + Cval = 0\n  Aval = 0\n\ngoal (1 subgoal):\n 1. Bval * x + Cval = 0", "by simp"], ["proof (state)\nthis:\n  Bval * x + Cval = 0\n\ngoal (1 subgoal):\n 1. x = - Cval / Bval", "then"], ["proof (chain)\npicking this:\n  Bval * x + Cval = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Bval * x + Cval = 0\n\ngoal (1 subgoal):\n 1. x = - Cval / Bval", "using False"], ["proof (prove)\nusing this:\n  Bval * x + Cval = 0\n  Bval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x = - Cval / Bval", "by (smt nonzero_mult_div_cancel_left)"], ["proof (state)\nthis:\n  x = - Cval / Bval\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = - Cval / Bval\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have freecneg : \"var \\<notin> vars (-C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (- C)", "using freeC not_in_neg"], ["proof (prove)\nusing this:\n  var \\<notin> vars C\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (- C)", "by auto"], ["proof (state)\nthis:\n  var \\<notin> vars (- C)\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1:  \"(\\<forall>a\\<in>set L. aEval (linear_substitution var (-C) (B) a) (X[var := x]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set L.\n       aEval (linear_substitution var (- C) B a) (X[var := x])", "using h xh Bval_def Cval_def False LinearCase.linear[OF Xlength False freecneg freeB, of \"-Cval\"] freeB freeC freecneg"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n  x = - Cval / Bval\n  Bval = insertion (nth_default 0 (X[var := x])) B\n  Cval = insertion (nth_default 0 (X[var := x])) C\n  Bval \\<noteq> 0\n  \\<lbrakk>insertion (nth_default 0 (X[var := - Cval / Bval])) (- C) =\n           - Cval;\n   insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval\\<rbrakk>\n  \\<Longrightarrow> aEval ?A (X[var := - Cval / Bval]) =\n                    aEval (linear_substitution var (- C) B ?A)\n                     (X[var := ?v])\n  var \\<notin> vars B\n  var \\<notin> vars C\n  var \\<notin> vars (- C)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set L.\n       aEval (linear_substitution var (- C) B a) (X[var := x])", "by (metis X_def hinsert insertion_neg)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set L.\n     aEval (linear_substitution var (- C) B a) (X[var := x])\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h2 : \"\\<forall>f\\<in>set F. eval (linear_substitution_fm var (-C) B f) (X[var := x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set F.\n       eval (linear_substitution_fm var (- C) B f) (X[var := x])", "using h xh Bval_def Cval_def False LinearCase.linear_fm[OF Xlength False freecneg freeB, of \"-Cval\"] freeB freeC"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n  x = - Cval / Bval\n  Bval = insertion (nth_default 0 (X[var := x])) B\n  Cval = insertion (nth_default 0 (X[var := x])) C\n  Bval \\<noteq> 0\n  \\<lbrakk>insertion (nth_default 0 (X[var := - Cval / Bval])) (- C) =\n           - Cval;\n   insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval\\<rbrakk>\n  \\<Longrightarrow> eval ?F (X[var := - Cval / Bval]) =\n                    (\\<forall>v.\n                        eval (linear_substitution_fm var (- C) B ?F)\n                         (X[var := v]))\n  var \\<notin> vars B\n  var \\<notin> vars C\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set F.\n       eval (linear_substitution_fm var (- C) B f) (X[var := x])", "by (metis X_def hinsert insertion_neg)"], ["proof (state)\nthis:\n  \\<forall>f\\<in>set F.\n     eval (linear_substitution_fm var (- C) B f) (X[var := x])\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using h1 h2"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set L.\n     aEval (linear_substitution var (- C) B a) (X[var := x])\n  \\<forall>f\\<in>set F.\n     eval (linear_substitution_fm var (- C) B f) (X[var := x])\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "apply(simp add:aval0 False)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                aEval (linear_substitution var (- C) B a) (X[var := x]);\n     \\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           f 0)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>f\\<in>set L.\n                          aEval (linear_substitution var (- C) B f)\n                           (xs @ x # \\<Gamma>)) \\<and>\n                      (\\<forall>f\\<in>set F.\n                          eval\n                           (liftmap\n                             (\\<lambda>x A.\n                                 fm.Atom\n                                  (linear_substitution (var + x)\n                                    (liftPoly 0 x (- C)) (liftPoly 0 x B)\n                                    A))\n                             f 0)\n                           (xs @ x # \\<Gamma>))", "using X_def hlength"], ["proof (prove)\nusing this:\n  X = xs @ x # \\<Gamma>\n  length xs = var\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                aEval (linear_substitution var (- C) B a) (X[var := x]);\n     \\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           f 0)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>f\\<in>set L.\n                          aEval (linear_substitution var (- C) B f)\n                           (xs @ x # \\<Gamma>)) \\<and>\n                      (\\<forall>f\\<in>set F.\n                          eval\n                           (liftmap\n                             (\\<lambda>x A.\n                                 fm.Atom\n                                  (linear_substitution (var + x)\n                                    (liftPoly 0 x (- C)) (liftPoly 0 x B)\n                                    A))\n                             f 0)\n                           (xs @ x # \\<Gamma>))", "using hinsert"], ["proof (prove)\nusing this:\n  X = xs @ x # \\<Gamma>\n  length xs = var\n  (xs @ x # \\<Gamma>)[var := x] = xs @ x # \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                aEval (linear_substitution var (- C) B a) (X[var := x]);\n     \\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           f 0)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>f\\<in>set L.\n                          aEval (linear_substitution var (- C) B f)\n                           (xs @ x # \\<Gamma>)) \\<and>\n                      (\\<forall>f\\<in>set F.\n                          eval\n                           (liftmap\n                             (\\<lambda>x A.\n                                 fm.Atom\n                                  (linear_substitution (var + x)\n                                    (liftPoly 0 x (- C)) (liftPoly 0 x B)\n                                    A))\n                             f 0)\n                           (xs @ x # \\<Gamma>))", "by auto"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  Aval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Aval \\<noteq> 0", "have aval0 : \"Aval \\<noteq>0\""], ["proof (prove)\nusing this:\n  Aval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  Aval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h4 : \"insertion (nth_default 0 (X[var := x])) 4 = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := x])) 4 = 4", "using insertion_const[where f = \"(nth_default 0 (X[var := x]))\", where c=\"4\"]"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (X[var := x])) (Const 4) = 4\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := x])) 4 = 4", "by (metis MPoly_Type.insertion_one insertion_add numeral_Bit0 one_add_one)"], ["proof (state)\nthis:\n  insertion (nth_default 0 (X[var := x])) 4 = 4\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"4 * Aval * Cval \\<le> Bval\\<^sup>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1a : \"var\\<notin>vars(-B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (- B)", "by(simp add: freeB not_in_neg)"], ["proof (state)\nthis:\n  var \\<notin> vars (- B)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1b : \"var\\<notin>vars(1::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 1", "using isolate_var_one not_in_isovarspar"], ["proof (prove)\nusing this:\n  isolate_variable_sparse (Var ?x) ?x 1 = 1\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n\ngoal (1 subgoal):\n 1. var \\<notin> vars 1", "by blast"], ["proof (state)\nthis:\n  var \\<notin> vars 1\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1c : \"var\\<notin>vars(-1::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (- 1)", "by(simp add: h1b not_in_neg)"], ["proof (state)\nthis:\n  var \\<notin> vars (- 1)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1d : \"var\\<notin>vars(4::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis h1b not_in_add numeral_Bit0 one_add_one)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1e : \"var\\<notin>vars(B^2-4*A*C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (B\\<^sup>2 - 4 * A * C)", "by(simp add: freeB h1d freeA freeC not_in_mult not_in_pow not_in_sub)"], ["proof (state)\nthis:\n  var \\<notin> vars (B\\<^sup>2 - 4 * A * C)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1f : \"var\\<notin>vars(2::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 2", "using h1b not_in_add"], ["proof (prove)\nusing this:\n  var \\<notin> vars 1\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p + ?q)\n\ngoal (1 subgoal):\n 1. var \\<notin> vars 2", "by fastforce"], ["proof (state)\nthis:\n  var \\<notin> vars 2\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1g : \"var\\<notin>vars(2*A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (2 * A)", "by(simp add: freeA h1f not_in_mult)"], ["proof (state)\nthis:\n  var \\<notin> vars (2 * A)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1h : \"freeIn var (quadratic_sub var (-B) (1) (B^2-4*A*C) (2*A) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)", "using free_in_quad h1a h1b h1e h1g"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?a; ?var \\<notin> vars ?b;\n   ?var \\<notin> vars ?c; ?var \\<notin> vars ?d\\<rbrakk>\n  \\<Longrightarrow> freeIn ?var (quadratic_sub ?var ?a ?b ?c ?d ?A)\n  var \\<notin> vars (- B)\n  var \\<notin> vars 1\n  var \\<notin> vars (B\\<^sup>2 - 4 * A * C)\n  var \\<notin> vars (2 * A)\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)", "by blast"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1i : \"freeIn var (quadratic_sub var (-B) (-1) (B^2-4*A*C) (2*A) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var\n     (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)", "using free_in_quad h1a h1c h1e h1g"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?a; ?var \\<notin> vars ?b;\n   ?var \\<notin> vars ?c; ?var \\<notin> vars ?d\\<rbrakk>\n  \\<Longrightarrow> freeIn ?var (quadratic_sub ?var ?a ?b ?c ?d ?A)\n  var \\<notin> vars (- B)\n  var \\<notin> vars (- 1)\n  var \\<notin> vars (B\\<^sup>2 - 4 * A * C)\n  var \\<notin> vars (2 * A)\n\ngoal (1 subgoal):\n 1. freeIn var\n     (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)", "by blast"], ["proof (state)\nthis:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h2 : \"2*Aval \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * Aval \\<noteq> 0", "using aval0"], ["proof (prove)\nusing this:\n  Aval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 * Aval \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  2 * Aval \\<noteq> 0\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h3 : \"0 \\<le> (Bval^2-4*Aval*Cval)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> Bval\\<^sup>2 - 4 * Aval * Cval", "using True"], ["proof (prove)\nusing this:\n  4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 \\<le> Bval\\<^sup>2 - 4 * Aval * Cval", "by auto"], ["proof (state)\nthis:\n  0 \\<le> Bval\\<^sup>2 - 4 * Aval * Cval\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h4a : \"var \\<notin> vars 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis monom_numeral notInKeys_notInVars not_in_add not_in_isovarspar not_in_pow one_add_one power.simps(1) rel_simps(76) vars_monom_keys)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h4 : \"var \\<notin> vars (B^2-4*A*C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (B\\<^sup>2 - 4 * A * C)", "by(simp add: h4a freeA freeB freeC not_in_pow not_in_mult not_in_sub)"], ["proof (state)\nthis:\n  var \\<notin> vars (B\\<^sup>2 - 4 * A * C)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h5 : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) (-B) = -Bval \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (- B) = - Bval", "using allBval"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (- B) = - Bval", "apply(simp add: insertion_neg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) B =\n       Bval \\<Longrightarrow>\n    \\<forall>x. insertion (nth_default 0 (X[var := x])) B = Bval", "by (simp add: B_def Bval_def insertion_isovarspars_free)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) (- B) = - Bval\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h6 : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) 1 = 1", "by simp"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 1 = 1\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h6a : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) (-1) = (-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (- 1) = - 1", "using h6"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 1 = 1\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (- 1) = - 1", "by (simp add: insertion_neg)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) (- 1) = - 1\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h7a : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) 4 = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) 4 = 4", "by (metis h6 insertion_add numeral_Bit0 one_add_one)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 4 = 4\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h7b : \"var \\<notin> vars(4*A*C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (4 * A * C)", "using freeA freeC"], ["proof (prove)\nusing this:\n  var \\<notin> vars A\n  var \\<notin> vars C\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (4 * A * C)", "by (simp add: h4a not_in_mult)"], ["proof (state)\nthis:\n  var \\<notin> vars (4 * A * C)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h7c : \"var \\<notin> vars(B^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (B\\<^sup>2)", "using freeB not_in_pow"], ["proof (prove)\nusing this:\n  var \\<notin> vars B\n  ?var \\<notin> vars ?p \\<Longrightarrow> ?var \\<notin> vars (?p ^ ?i)\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (B\\<^sup>2)", "by auto"], ["proof (state)\nthis:\n  var \\<notin> vars (B\\<^sup>2)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h7 : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) (B^2-4*A*C) = (Bval^2-4*Aval*Cval)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (X[var := x])) (B\\<^sup>2 - 4 * A * C) =\n       Bval\\<^sup>2 - 4 * Aval * Cval", "using h7a allAval allBval allCval"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 4 = 4\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (X[var := x])) (B\\<^sup>2 - 4 * A * C) =\n       Bval\\<^sup>2 - 4 * Aval * Cval", "unfolding X_def"], ["proof (prove)\nusing this:\n  \\<forall>xa.\n     insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa])) 4 = 4\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n\ngoal (1 subgoal):\n 1. \\<forall>xa.\n       insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa]))\n        (B\\<^sup>2 - 4 * A * C) =\n       Bval\\<^sup>2 - 4 * Aval * Cval", "using hlength"], ["proof (prove)\nusing this:\n  \\<forall>xa.\n     insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa])) 4 = 4\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n  length xs = var\n\ngoal (1 subgoal):\n 1. \\<forall>xa.\n       insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa]))\n        (B\\<^sup>2 - 4 * A * C) =\n       Bval\\<^sup>2 - 4 * Aval * Cval", "apply (simp add: insertion_mult insertion_sub power2_eq_square)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xa.\n                insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa]))\n                 4 =\n                4;\n     \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval;\n     \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval;\n     \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval;\n     length xs = var\\<rbrakk>\n    \\<Longrightarrow> \\<forall>xa.\n                         insertion\n                          (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa]))\n                          B *\n                         insertion\n                          (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa]))\n                          B -\n                         4 *\n                         insertion\n                          (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa]))\n                          A *\n                         insertion\n                          (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa]))\n                          C =\n                         Bval * Bval - 4 * Aval * Cval", "by (metis A_def Aval_def Bval_def C_def Cval_def X_def freeB insertion_isovarspars_free not_contains_insertion)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (X[var := x])) (B\\<^sup>2 - 4 * A * C) =\n     Bval\\<^sup>2 - 4 * Aval * Cval\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h8a : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) 2 = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) 2 = 2", "by (metis h6 insertion_add one_add_one)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 2 = 2\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h8 : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) (2*A) = (2*Aval)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (2 * A) = 2 * Aval", "apply(simp add: allAval h8a insertion_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) A = Aval", "by (simp add: A_def Aval_def insertion_isovarspars_free)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) (2 * A) = 2 * Aval\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1 : \"- Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0", "using True"], ["proof (prove)\nusing this:\n  4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (1 subgoal):\n 1. - Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0", "by simp"], ["proof (state)\nthis:\n  - Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have xh : \"x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\\<or>x=(- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval) \\<or>\n    x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)", "using insertion_p' aval0 h1\n            discriminant_iff"], ["proof (prove)\nusing this:\n  Aval * x\\<^sup>2 + Bval * x + Cval = 0\n  Aval \\<noteq> 0\n  - Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0\n  ?a \\<noteq> 0 \\<Longrightarrow>\n  (?a * ?x\\<^sup>2 + ?b * ?x + ?c = 0) =\n  (0 \\<le> discrim ?a ?b ?c \\<and>\n   (?x = (- ?b + sqrt (discrim ?a ?b ?c)) / (2 * ?a) \\<or>\n    ?x = (- ?b - sqrt (discrim ?a ?b ?c)) / (2 * ?a)))\n\ngoal (1 subgoal):\n 1. x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval) \\<or>\n    x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)", "unfolding discrim_def"], ["proof (prove)\nusing this:\n  Aval * x\\<^sup>2 + Bval * x + Cval = 0\n  Aval \\<noteq> 0\n  - Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0\n  ?a \\<noteq> 0 \\<Longrightarrow>\n  (?a * ?x\\<^sup>2 + ?b * ?x + ?c = 0) =\n  (0 \\<le> ?b\\<^sup>2 - 4 * ?a * ?c \\<and>\n   (?x = (- ?b + sqrt (?b\\<^sup>2 - 4 * ?a * ?c)) / (2 * ?a) \\<or>\n    ?x = (- ?b - sqrt (?b\\<^sup>2 - 4 * ?a * ?c)) / (2 * ?a)))\n\ngoal (1 subgoal):\n 1. x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval) \\<or>\n    x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)", "by blast"], ["proof (state)\nthis:\n  x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval) \\<or>\n  x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have p1 : \"x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval) \\<Longrightarrow> \n                                                            ((\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x]))\n                                                      \\<and>(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "assume x_def : \"x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\""], ["proof (state)\nthis:\n  x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "then"], ["proof (chain)\npicking this:\n  x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)", "have h : \"(\\<forall>a\\<in>set L. aEval a (X[var := (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)])) \\<and> (\\<forall>f\\<in>set F. eval f (X[var := (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\""], ["proof (prove)\nusing this:\n  x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval a\n         (X[var :=\n              (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)])) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval f\n         (X[var :=\n              (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)]))", "using h"], ["proof (prove)\nusing this:\n  x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval a\n         (X[var :=\n              (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)])) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval f\n         (X[var :=\n              (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)]))", "using X_def hinsert"], ["proof (prove)\nusing this:\n  x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n  X = xs @ x # \\<Gamma>\n  (xs @ x # \\<Gamma>)[var := x] = xs @ x # \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval a\n         (X[var :=\n              (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)])) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval f\n         (X[var :=\n              (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)]))", "by auto"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "{"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "assume in_list : \"a\\<in> set L\""], ["proof (state)\nthis:\n  a \\<in> set L\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "have \"eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a) (X[var := x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using free_in_quad[where a=\"-B\",where b=\"1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\",OF h1a h1b h1e h1g]"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using quadratic_sub[where a=\"-B\",where b=\"1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\", where L=\"X\", OF Xlength,\n                  where Dv=\"2*Aval\", OF h2, where Cv=\"(Bval^2-4*Aval*Cval)\", OF h3, where Av=\"-Bval\", OF h4 h5, where Bv=\"1\", OF h6 h7 h8]\n                  h in_list"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  a \\<in> set L\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using var_not_in_eval"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  a \\<in> set L\n  \\<forall>var L.\n     freeIn var ?\\<phi> \\<longrightarrow>\n     (\\<exists>x. eval ?\\<phi> (L[var := x])) =\n     (\\<forall>x. eval ?\\<phi> (L[var := x]))\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "by fastforce"], ["proof (state)\nthis:\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "}"], ["proof (state)\nthis:\n  ?aa3 \\<in> set L \\<Longrightarrow>\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "then"], ["proof (chain)\npicking this:\n  ?aa3 \\<in> set L \\<Longrightarrow>\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])", "have left : \"(\\<forall>a\\<in>set L. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a) (X[var := x]))\""], ["proof (prove)\nusing this:\n  ?aa3 \\<in> set L \\<Longrightarrow>\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "{"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "assume in_list : \"a\\<in> set F\""], ["proof (state)\nthis:\n  a \\<in> set F\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "have \"eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a) (X[var := x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using free_in_quad_fm[where a=\"-B\",where b=\"1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\",OF h1a h1b h1e h1g]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using quadratic_sub_fm[where a=\"-B\",where b=\"1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\", where L=\"X\", OF Xlength,\n                  where Dv=\"2*Aval\", OF h2, where Cv=\"(Bval^2-4*Aval*Cval)\", OF h3, where Av=\"-Bval\", OF h4 h5, where Bv=\"1\", OF h6 h7 h8]\n                  h in_list"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  eval ?F\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?F)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  a \\<in> set F\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using var_not_in_eval"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  eval ?F\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?F)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  a \\<in> set F\n  \\<forall>var L.\n     freeIn var ?\\<phi> \\<longrightarrow>\n     (\\<exists>x. eval ?\\<phi> (L[var := x])) =\n     (\\<forall>x. eval ?\\<phi> (L[var := x]))\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "by fastforce"], ["proof (state)\nthis:\n  eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "}"], ["proof (state)\nthis:\n  ?aa3 \\<in> set F \\<Longrightarrow>\n  eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "then"], ["proof (chain)\npicking this:\n  ?aa3 \\<in> set F \\<Longrightarrow>\n  eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])", "have right : \"(\\<forall>a\\<in>set F. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a) (X[var := x]))\""], ["proof (prove)\nusing this:\n  ?aa3 \\<in> set F \\<Longrightarrow>\n  eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set F.\n     eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "using right left"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set F.\n     eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x]))", "by simp"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x =\n  (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n  (2 * Aval) \\<Longrightarrow>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x]))\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have p2 : \"x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval) \\<Longrightarrow> \n                                                            ((\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) (-1) (B^2-4*A*C) (2*A) a) (X[var := x]))\n                                                      \\<and>(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) (-1) (B^2-4*A*C) (2*A) a) (X[var := x])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "assume x_def : \"x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\""], ["proof (state)\nthis:\n  x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "then"], ["proof (chain)\npicking this:\n  x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)", "have h : \"(\\<forall>a\\<in>set L. aEval a (X[var := (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)])) \\<and> (\\<forall>f\\<in>set F. eval f (X[var := (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\""], ["proof (prove)\nusing this:\n  x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval a\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)])) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval f\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)]))", "using h"], ["proof (prove)\nusing this:\n  x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval a\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)])) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval f\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)]))", "using X_def hinsert"], ["proof (prove)\nusing this:\n  x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n  (\\<forall>a\\<in>set L. aEval a (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F. eval f (xs @ x # \\<Gamma>))\n  X = xs @ x # \\<Gamma>\n  (xs @ x # \\<Gamma>)[var := x] = xs @ x # \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval a\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)])) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval f\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)]))", "by auto"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "then"], ["proof (chain)\npicking this:\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))", "have \"(\\<forall>a\\<in>set L. aEval a (X[var := (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)])) \\<and> (\\<forall>f\\<in>set F. eval f (X[var := (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\""], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval a\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)])) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval f\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)]))", "using h"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval a\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)])) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval f\n         (X[var :=\n              (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n              (2 * Aval)]))", "by simp"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "{"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "assume in_list : \"a\\<in> set L\""], ["proof (state)\nthis:\n  a \\<in> set L\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "have \"eval (quadratic_sub var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) a) (X[var := x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using free_in_quad[where a=\"-B\",where b=\"-1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\",OF h1a h1c h1e h1g]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using quadratic_sub[where a=\"-B\",where b=\"-1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\", where L=\"X\", OF Xlength,\n                  where Dv=\"2*Aval\", OF h2, where Cv=\"(Bval^2-4*Aval*Cval)\", OF h3, where Av=\"-Bval\", OF h4 h5, where Bv=\"-1\", OF h6a h7 h8]\n                  h in_list"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  a \\<in> set L\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using var_not_in_eval"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  a \\<in> set L\n  \\<forall>var L.\n     freeIn var ?\\<phi> \\<longrightarrow>\n     (\\<exists>x. eval ?\\<phi> (L[var := x])) =\n     (\\<forall>x. eval ?\\<phi> (L[var := x]))\n\ngoal (1 subgoal):\n 1. eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "by fastforce"], ["proof (state)\nthis:\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "}"], ["proof (state)\nthis:\n  ?aa3 \\<in> set L \\<Longrightarrow>\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "then"], ["proof (chain)\npicking this:\n  ?aa3 \\<in> set L \\<Longrightarrow>\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])", "have left : \"(\\<forall>a\\<in>set L. eval (quadratic_sub var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) a) (X[var := x]))\""], ["proof (prove)\nusing this:\n  ?aa3 \\<in> set L \\<Longrightarrow>\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "{"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "assume in_list : \"a\\<in> set F\""], ["proof (state)\nthis:\n  a \\<in> set F\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "have \"eval (quadratic_sub_fm var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) a) (X[var := x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\n     (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using free_in_quad_fm[where a=\"-B\",where b=\"-1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\",OF h1a h1c h1e h1g]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n\ngoal (1 subgoal):\n 1. eval\n     (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using quadratic_sub_fm[where a=\"-B\",where b=\"-1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\", where L=\"X\", OF Xlength,\n                  where Dv=\"2*Aval\", OF h2, where Cv=\"(Bval^2-4*Aval*Cval)\", OF h3, where Av=\"-Bval\", OF h4 h5, where Bv=\"-1\", OF h6a h7 h8]\n                  h in_list"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  eval ?F\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?F)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  a \\<in> set F\n\ngoal (1 subgoal):\n 1. eval\n     (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "using var_not_in_eval"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  eval ?F\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?F)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  (\\<forall>a\\<in>set L.\n      aEval a\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n            (2 * Aval)])) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval f\n       (X[var :=\n            (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)]))\n  a \\<in> set F\n  \\<forall>var L.\n     freeIn var ?\\<phi> \\<longrightarrow>\n     (\\<exists>x. eval ?\\<phi> (L[var := x])) =\n     (\\<forall>x. eval ?\\<phi> (L[var := x]))\n\ngoal (1 subgoal):\n 1. eval\n     (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n     (X[var := x])", "by fastforce"], ["proof (state)\nthis:\n  eval (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "}"], ["proof (state)\nthis:\n  ?aa3 \\<in> set F \\<Longrightarrow>\n  eval\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "then"], ["proof (chain)\npicking this:\n  ?aa3 \\<in> set F \\<Longrightarrow>\n  eval\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])", "have right : \"(\\<forall>a\\<in>set F. eval (quadratic_sub_fm var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) a) (X[var := x]))\""], ["proof (prove)\nusing this:\n  ?aa3 \\<in> set F \\<Longrightarrow>\n  eval\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?aa3)\n   (X[var := x])\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set F.\n     eval\n      (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. x =\n    (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n    (2 * Aval) \\<Longrightarrow>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "using right left"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set F.\n     eval\n      (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "by simp"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x =\n  (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n  (2 * Aval) \\<Longrightarrow>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x]))\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have subst4 : \"insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 = 4", "using h7a hlength X_def"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 4 = 4\n  length xs = var\n  X = xs @ x # \\<Gamma>\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 = 4", "by auto"], ["proof (state)\nthis:\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 = 4\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have disj: \"(\\<forall>a\\<in>set L. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a) (xs @ x # \\<Gamma>)) \\<and>\n                                                            (\\<forall>a\\<in>set F. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a) (xs @ x # \\<Gamma>)) \\<or> \n                                                            (\\<forall>a\\<in>set L. eval (quadratic_sub var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) a) (xs @ x # \\<Gamma>)) \\<and>\n                                                            (\\<forall>a\\<in>set F. eval (quadratic_sub_fm var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) a) (xs @ x # \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (xs @ x # \\<Gamma>))", "using xh p1 p2"], ["proof (prove)\nusing this:\n  x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval) \\<or>\n  x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n  x =\n  (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n  (2 * Aval) \\<Longrightarrow>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x]))\n  x =\n  (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n  (2 * Aval) \\<Longrightarrow>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x]))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (xs @ x # \\<Gamma>))", "unfolding X_def hinsert"], ["proof (prove)\nusing this:\n  x = (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval) \\<or>\n  x = (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) / (2 * Aval)\n  x =\n  (- Bval + sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n  (2 * Aval) \\<Longrightarrow>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>))\n  x =\n  (- Bval - sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n  (2 * Aval) \\<Longrightarrow>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (xs @ x # \\<Gamma>))", "by blast"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>))\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "apply(simp add: aval0 True h7a subst4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>f\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x (- B)) (liftPoly 0 x 1)\n                (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                (liftPoly 0 x (2 * A)))\n           f 0)\n         (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>f\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x (- B))\n                (liftPoly 0 x (- 1)) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                (liftPoly 0 x (2 * A)))\n           f 0)\n         (xs @ x # \\<Gamma>))", "using disj"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<forall>f\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x (- B)) (liftPoly 0 x 1)\n                (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                (liftPoly 0 x (2 * A)))\n           f 0)\n         (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>f\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x (- B))\n                (liftPoly 0 x (- 1)) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                (liftPoly 0 x (2 * A)))\n           f 0)\n         (xs @ x # \\<Gamma>))", "unfolding X_def hinsert"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<forall>f\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x (- B)) (liftPoly 0 x 1)\n                (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                (liftPoly 0 x (2 * A)))\n           f 0)\n         (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>f\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x.\n               quadratic_sub (var + x) (liftPoly 0 x (- B))\n                (liftPoly 0 x (- 1)) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                (liftPoly 0 x (2 * A)))\n           f 0)\n         (xs @ x # \\<Gamma>))", "by auto"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2", "have det : \"0 < - Bval\\<^sup>2 + 4 * Aval * Cval\""], ["proof (prove)\nusing this:\n  \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 < - Bval\\<^sup>2 + 4 * Aval * Cval", "by simp"], ["proof (state)\nthis:\n  0 < - Bval\\<^sup>2 + 4 * Aval * Cval\n\ngoal (1 subgoal):\n 1. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>set L.\n        aEval (linear_substitution var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval (linear_substitution_fm var (- C) B f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            f)\n          (xs @ x # \\<Gamma>))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "apply(simp add: aval0 False h4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x 1) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x (- 1)) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)))", "using discriminant_negative"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<noteq> 0; discrim ?a ?b ?c < 0\\<rbrakk>\n  \\<Longrightarrow> ?a * ?x\\<^sup>2 + ?b * ?x + ?c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x 1) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x (- 1)) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)))", "unfolding discrim_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<noteq> 0; ?b\\<^sup>2 - 4 * ?a * ?c < 0\\<rbrakk>\n  \\<Longrightarrow> ?a * ?x\\<^sup>2 + ?b * ?x + ?c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x 1) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x (- 1)) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)))", "using insertion_p'"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<noteq> 0; ?b\\<^sup>2 - 4 * ?a * ?c < 0\\<rbrakk>\n  \\<Longrightarrow> ?a * ?x\\<^sup>2 + ?b * ?x + ?c \\<noteq> 0\n  Aval * x\\<^sup>2 + Bval * x + Cval = 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x 1) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x (- 1)) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)))", "using aval0 det"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<noteq> 0; ?b\\<^sup>2 - 4 * ?a * ?c < 0\\<rbrakk>\n  \\<Longrightarrow> ?a * ?x\\<^sup>2 + ?b * ?x + ?c \\<noteq> 0\n  Aval * x\\<^sup>2 + Bval * x + Cval = 0\n  Aval \\<noteq> 0\n  0 < - Bval\\<^sup>2 + 4 * Aval * Cval\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x 1) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (liftmap\n            (\\<lambda>x.\n                quadratic_sub (var + x) (liftPoly 0 x (- B))\n                 (liftPoly 0 x (- 1)) (liftPoly 0 x (B\\<^sup>2 - 4 * A * C))\n                 (liftPoly 0 x (2 * A)))\n            f 0)\n          (xs @ x # \\<Gamma>)))", "by auto"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have \"(\\<exists>x.\n       (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n        (\\<forall>f\\<in>set L. aEval (linear_substitution var (-C) (B) f) (xs @ x # \\<Gamma>)) \\<and> \n        (\\<forall>f\\<in>set F. eval (linear_substitution_fm var (-C) B f) (xs @ x # \\<Gamma>)) \\<or>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * \n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n        \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n        ((\\<forall>f\\<in>set L. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>))\\<and>\n         (\\<forall>f\\<in>set F. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>)) \\<or>\n         (\\<forall>f\\<in>set L. eval (quadratic_sub var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>)) \\<and>\n         (\\<forall>f\\<in>set F. eval (quadratic_sub_fm var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>)))) \\<or>\n        (Aval = 0 \\<and>\n        Bval = 0 \\<and>\n        Cval = 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n        (\\<forall>f\\<in>set L.\n            aEval (linear_substitution var (- C) B f)\n             (xs @ x # \\<Gamma>)) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval (linear_substitution_fm var (- C) B f)\n             (xs @ x # \\<Gamma>)) \\<or>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n        \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>))\n                B)\\<^sup>2 \\<and>\n        ((\\<forall>f\\<in>set L.\n             eval\n              (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n              (xs @ x # \\<Gamma>)) \\<and>\n         (\\<forall>f\\<in>set F.\n             eval\n              (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A)\n                f)\n              (xs @ x # \\<Gamma>)) \\<or>\n         (\\<forall>f\\<in>set L.\n             eval\n              (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n                f)\n              (xs @ x # \\<Gamma>)) \\<and>\n         (\\<forall>f\\<in>set F.\n             eval\n              (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                (2 * A) f)\n              (xs @ x # \\<Gamma>)))) \\<or>\n       Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "apply(rule exI[where x=x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n     (\\<forall>f\\<in>set L.\n         aEval (linear_substitution var (- C) B f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval (linear_substitution_fm var (- C) B f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n     \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n     ((\\<forall>f\\<in>set L.\n          eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval\n           (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<or>\n      (\\<forall>f\\<in>set L.\n          eval\n           (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval\n           (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n             f)\n           (xs @ x # \\<Gamma>)))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using biglemma"], ["proof (prove)\nusing this:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n     (\\<forall>f\\<in>set L.\n         aEval (linear_substitution var (- C) B f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval (linear_substitution_fm var (- C) B f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n     \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n     ((\\<forall>f\\<in>set L.\n          eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval\n           (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<or>\n      (\\<forall>f\\<in>set L.\n          eval\n           (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval\n           (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n             f)\n           (xs @ x # \\<Gamma>)))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using allAval allBval allCval"], ["proof (prove)\nusing this:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval (linear_substitution_fm var (- C) B f) (xs @ x # \\<Gamma>)) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n     (\\<forall>f\\<in>set L.\n         aEval (linear_substitution var (- C) B f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval (linear_substitution_fm var (- C) B f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n     \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n     ((\\<forall>f\\<in>set L.\n          eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval\n           (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<or>\n      (\\<forall>f\\<in>set L.\n          eval\n           (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval\n           (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n             f)\n           (xs @ x # \\<Gamma>)))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "unfolding A_def B_def C_def Aval_def Bval_def Cval_def X_def hinsert"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var 2) =\n  0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var 1) \\<noteq>\n  0 \\<and>\n  (\\<forall>f\\<in>set L.\n      aEval\n       (linear_substitution var (- isolate_variable_sparse p var 0)\n         (isolate_variable_sparse p var 1) f)\n       (xs @ x # \\<Gamma>)) \\<and>\n  (\\<forall>f\\<in>set F.\n      eval\n       (linear_substitution_fm var (- isolate_variable_sparse p var 0)\n         (isolate_variable_sparse p var 1) f)\n       (xs @ x # \\<Gamma>)) \\<or>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var 2) \\<noteq>\n  0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var 2) *\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var 0)\n  \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>))\n          (isolate_variable_sparse p var 1))\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- isolate_variable_sparse p var 1) 1\n          ((isolate_variable_sparse p var 1)\\<^sup>2 -\n           4 * isolate_variable_sparse p var 2 *\n           isolate_variable_sparse p var 0)\n          (2 * isolate_variable_sparse p var 2) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- isolate_variable_sparse p var 1) 1\n          ((isolate_variable_sparse p var 1)\\<^sup>2 -\n           4 * isolate_variable_sparse p var 2 *\n           isolate_variable_sparse p var 0)\n          (2 * isolate_variable_sparse p var 2) f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   (\\<forall>f\\<in>set L.\n       eval\n        (quadratic_sub var (- isolate_variable_sparse p var 1) (- 1)\n          ((isolate_variable_sparse p var 1)\\<^sup>2 -\n           4 * isolate_variable_sparse p var 2 *\n           isolate_variable_sparse p var 0)\n          (2 * isolate_variable_sparse p var 2) f)\n        (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- isolate_variable_sparse p var 1) (- 1)\n          ((isolate_variable_sparse p var 1)\\<^sup>2 -\n           4 * isolate_variable_sparse p var 2 *\n           isolate_variable_sparse p var 0)\n          (2 * isolate_variable_sparse p var 2) f)\n        (xs @ x # \\<Gamma>))) \\<or>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var 2) =\n  0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var 1) =\n  0 \\<and>\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var 0) =\n  0\n  \\<forall>xa.\n     insertion (nth_default 0 (xs @ xa # \\<Gamma>))\n      (isolate_variable_sparse p var 2) =\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 2)\n  \\<forall>xa.\n     insertion (nth_default 0 (xs @ xa # \\<Gamma>))\n      (isolate_variable_sparse p var 1) =\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 1)\n  \\<forall>xa.\n     insertion (nth_default 0 (xs @ xa # \\<Gamma>))\n      (isolate_variable_sparse p var 0) =\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 0)\n\ngoal (1 subgoal):\n 1. (insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 2) =\n     0 \\<and>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 1) \\<noteq>\n     0 \\<and>\n     (\\<forall>f\\<in>set L.\n         aEval\n          (linear_substitution var (- isolate_variable_sparse p var 0)\n            (isolate_variable_sparse p var 1) f)\n          (xs @ x # \\<Gamma>)) \\<and>\n     (\\<forall>f\\<in>set F.\n         eval\n          (linear_substitution_fm var (- isolate_variable_sparse p var 0)\n            (isolate_variable_sparse p var 1) f)\n          (xs @ x # \\<Gamma>)) \\<or>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 2) \\<noteq>\n     0 \\<and>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 2) *\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 0)\n     \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>))\n             (isolate_variable_sparse p var 1))\\<^sup>2 \\<and>\n     ((\\<forall>f\\<in>set L.\n          eval\n           (quadratic_sub var (- isolate_variable_sparse p var 1) 1\n             ((isolate_variable_sparse p var 1)\\<^sup>2 -\n              4 * isolate_variable_sparse p var 2 *\n              isolate_variable_sparse p var 0)\n             (2 * isolate_variable_sparse p var 2) f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval\n           (quadratic_sub_fm var (- isolate_variable_sparse p var 1) 1\n             ((isolate_variable_sparse p var 1)\\<^sup>2 -\n              4 * isolate_variable_sparse p var 2 *\n              isolate_variable_sparse p var 0)\n             (2 * isolate_variable_sparse p var 2) f)\n           (xs @ x # \\<Gamma>)) \\<or>\n      (\\<forall>f\\<in>set L.\n          eval\n           (quadratic_sub var (- isolate_variable_sparse p var 1) (- 1)\n             ((isolate_variable_sparse p var 1)\\<^sup>2 -\n              4 * isolate_variable_sparse p var 2 *\n              isolate_variable_sparse p var 0)\n             (2 * isolate_variable_sparse p var 2) f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval\n           (quadratic_sub_fm var (- isolate_variable_sparse p var 1) (- 1)\n             ((isolate_variable_sparse p var 1)\\<^sup>2 -\n              4 * isolate_variable_sparse p var 2 *\n              isolate_variable_sparse p var 0)\n             (2 * isolate_variable_sparse p var 2) f)\n           (xs @ x # \\<Gamma>)))) \\<or>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>))\n     (isolate_variable_sparse p var 2) =\n    0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>))\n     (isolate_variable_sparse p var 1) =\n    0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>))\n     (isolate_variable_sparse p var 0) =\n    0", "by auto"], ["proof (state)\nthis:\n  \\<exists>x.\n     (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n      (\\<forall>f\\<in>set L.\n          aEval (linear_substitution var (- C) B f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval (linear_substitution_fm var (- C) B f)\n           (xs @ x # \\<Gamma>)) \\<or>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n      \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n      ((\\<forall>f\\<in>set L.\n           eval\n            (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n            (xs @ x # \\<Gamma>)) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval\n            (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n            (xs @ x # \\<Gamma>)) \\<or>\n       (\\<forall>f\\<in>set L.\n           eval\n            (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n              f)\n            (xs @ x # \\<Gamma>)) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval\n            (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n              (2 * A) f)\n            (xs @ x # \\<Gamma>)))) \\<or>\n     Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n      (\\<forall>f\\<in>set L.\n          aEval (linear_substitution var (- C) B f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval (linear_substitution_fm var (- C) B f)\n           (xs @ x # \\<Gamma>)) \\<or>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n      \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n      ((\\<forall>f\\<in>set L.\n           eval\n            (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n            (xs @ x # \\<Gamma>)) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval\n            (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n            (xs @ x # \\<Gamma>)) \\<or>\n       (\\<forall>f\\<in>set L.\n           eval\n            (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n              f)\n            (xs @ x # \\<Gamma>)) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval\n            (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n              (2 * A) f)\n            (xs @ x # \\<Gamma>)))) \\<or>\n     Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "obtain x where x : \"(insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n        (\\<forall>f\\<in>set L. aEval (linear_substitution var (-C) (B) f) (xs @ x # \\<Gamma>)) \\<and> \n        (\\<forall>f\\<in>set F. eval (linear_substitution_fm var (-C) B f) (xs @ x # \\<Gamma>)) \\<or>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 * \n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n        \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n        ((\\<forall>f\\<in>set L. eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>))\\<and>\n         (\\<forall>f\\<in>set F. eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>)) \\<or>\n         (\\<forall>f\\<in>set L. eval (quadratic_sub var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>)) \\<and>\n         (\\<forall>f\\<in>set F. eval (quadratic_sub_fm var (- B) (-1) (B\\<^sup>2 - 4 * A * C) (2 * A) f) (xs @ x # \\<Gamma>)))) \\<or>\n        (Aval = 0 \\<and>\n        Bval = 0 \\<and>\n        Cval = 0)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n      (\\<forall>f\\<in>set L.\n          aEval (linear_substitution var (- C) B f)\n           (xs @ x # \\<Gamma>)) \\<and>\n      (\\<forall>f\\<in>set F.\n          eval (linear_substitution_fm var (- C) B f)\n           (xs @ x # \\<Gamma>)) \\<or>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n      insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n      \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n      ((\\<forall>f\\<in>set L.\n           eval\n            (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n            (xs @ x # \\<Gamma>)) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval\n            (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n            (xs @ x # \\<Gamma>)) \\<or>\n       (\\<forall>f\\<in>set L.\n           eval\n            (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n              f)\n            (xs @ x # \\<Gamma>)) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval\n            (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n              (2 * A) f)\n            (xs @ x # \\<Gamma>)))) \\<or>\n     Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n         insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n         (\\<forall>f\\<in>set L.\n             aEval (linear_substitution var (- C) B f)\n              (xs @ x # \\<Gamma>)) \\<and>\n         (\\<forall>f\\<in>set F.\n             eval (linear_substitution_fm var (- C) B f)\n              (xs @ x # \\<Gamma>)) \\<or>\n         insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n         insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n         insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n         insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n         \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>))\n                 B)\\<^sup>2 \\<and>\n         ((\\<forall>f\\<in>set L.\n              eval\n               (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n               (xs @ x # \\<Gamma>)) \\<and>\n          (\\<forall>f\\<in>set F.\n              eval\n               (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A)\n                 f)\n               (xs @ x # \\<Gamma>)) \\<or>\n          (\\<forall>f\\<in>set L.\n              eval\n               (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                 (2 * A) f)\n               (xs @ x # \\<Gamma>)) \\<and>\n          (\\<forall>f\\<in>set F.\n              eval\n               (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                 (2 * A) f)\n               (xs @ x # \\<Gamma>)))) \\<or>\n        Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n   (\\<forall>f\\<in>set L.\n       aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (linear_substitution_fm var (- C) B f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n   \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n   ((\\<forall>f\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>f\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           f)\n         (xs @ x # \\<Gamma>)))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have h : \"(\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\\<or>(Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"(Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0 \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> (Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (2 subgoals):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0 \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> (Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by simp"], ["proof (state)\nthis:\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<not> (Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  \\<not> (Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have \"(\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)", "apply(rule exI[where x=x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)", "apply(simp add: eval_list_conj insertion_mult insertion_sub insertion_pow insertion_add \n            del:  quadratic_sub.simps linear_substitution.simps quadratic_sub_fm.simps linear_substitution_fm.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>))\n     (isolate_variable_sparse p var 2) =\n    0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>))\n     (isolate_variable_sparse p var (Suc 0)) \\<noteq>\n    0 \\<and>\n    (\\<forall>f\\<in>(\\<lambda>a.\n                        fm.Atom\n                         (linear_substitution var\n                           (- isolate_variable_sparse p var 0)\n                           (isolate_variable_sparse p var (Suc 0)) a)) `\n                    set L \\<union>\n                    linear_substitution_fm var\n                     (- isolate_variable_sparse p var 0)\n                     (isolate_variable_sparse p var (Suc 0)) `\n                    set F.\n        eval f (xs @ x # \\<Gamma>)) \\<or>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>))\n     (isolate_variable_sparse p var 2) \\<noteq>\n    0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n    insertion (nth_default 0 (xs @ x # \\<Gamma>))\n     (isolate_variable_sparse p var 2) *\n    insertion (nth_default 0 (xs @ x # \\<Gamma>))\n     (isolate_variable_sparse p var 0)\n    \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>))\n            (isolate_variable_sparse p var (Suc 0)))\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>quadratic_sub var\n                      (- isolate_variable_sparse p var (Suc 0)) 1\n                      ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set L \\<union>\n                     quadratic_sub_fm var\n                      (- isolate_variable_sparse p var (Suc 0)) 1\n                      ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set F.\n         eval f (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>quadratic_sub var\n                      (- isolate_variable_sparse p var (Suc 0)) (- 1)\n                      ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set L \\<union>\n                     quadratic_sub_fm var\n                      (- isolate_variable_sparse p var (Suc 0)) (- 1)\n                      ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set F.\n         eval f (xs @ x # \\<Gamma>)))", "unfolding A_def[symmetric] B_def[symmetric] C_def[symmetric] One_nat_def[symmetric] X_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>(\\<lambda>a.\n                        fm.Atom (linear_substitution var (- C) B a)) `\n                    set L \\<union>\n                    linear_substitution_fm var (- C) B ` set F.\n        eval f (xs @ x # \\<Gamma>)) \\<or>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n    \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set L \\<union>\n                     quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set F.\n         eval f (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set L \\<union>\n                     quadratic_sub_fm var (- B) (- 1)\n                      (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                     set F.\n         eval f (xs @ x # \\<Gamma>)))", "using hlength x"], ["proof (prove)\nusing this:\n  length xs = var\n  (insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n   (\\<forall>f\\<in>set L.\n       aEval (linear_substitution var (- C) B f) (xs @ x # \\<Gamma>)) \\<and>\n   (\\<forall>f\\<in>set F.\n       eval (linear_substitution_fm var (- C) B f)\n        (xs @ x # \\<Gamma>)) \\<or>\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n   insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n   \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n   ((\\<forall>f\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>f\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) f)\n         (xs @ x # \\<Gamma>)) \\<and>\n    (\\<forall>f\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           f)\n         (xs @ x # \\<Gamma>)))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) B \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>(\\<lambda>a.\n                        fm.Atom (linear_substitution var (- C) B a)) `\n                    set L \\<union>\n                    linear_substitution_fm var (- C) B ` set F.\n        eval f (xs @ x # \\<Gamma>)) \\<or>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) A \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) 4 *\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n    insertion (nth_default 0 (xs @ x # \\<Gamma>)) C\n    \\<le> (insertion (nth_default 0 (xs @ x # \\<Gamma>)) B)\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set L \\<union>\n                     quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set F.\n         eval f (xs @ x # \\<Gamma>)) \\<or>\n     (\\<forall>f\\<in>quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set L \\<union>\n                     quadratic_sub_fm var (- B) (- 1)\n                      (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                     set F.\n         eval f (xs @ x # \\<Gamma>)))", "by (auto simp add:False)"], ["proof (state)\nthis:\n  \\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<not> (Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by auto"], ["proof (state)\nthis:\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have \"(\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\\<or>(\\<forall>x. aEval (Eq p) (xs@ x# \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "proof(cases \"(\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n 2. \\<nexists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "case True"], ["proof (state)\nthis:\n  \\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)\n\ngoal (2 subgoals):\n 1. \\<exists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n 2. \\<nexists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<nexists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)", "have \"(Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0)\""], ["proof (prove)\nusing this:\n  \\<nexists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using h"], ["proof (prove)\nusing this:\n  \\<nexists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by auto"], ["proof (state)\nthis:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have \"(\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\""], ["proof (prove)\nusing this:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)", "unfolding express_p"], ["proof (prove)\nusing this:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       aEval (Eq (A * (Var var)\\<^sup>2 + B * Var var + C))\n        (xs @ x # \\<Gamma>)", "apply(simp add:insertion_add insertion_mult insertion_pow)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0 \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n       (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var))\\<^sup>2 +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) B *\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n       0", "using allAval allBval allCval"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = Aval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = Bval\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = Cval\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0 \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n       (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var))\\<^sup>2 +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) B *\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n       0", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "}"], ["proof (state)\nthis:\n  eval (list_conj (map fm.Atom L @ F))\n   (xs @ ?x2 # \\<Gamma>) \\<Longrightarrow>\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  eval (list_conj (map fm.Atom L @ F))\n   (xs @ ?x2 # \\<Gamma>) \\<Longrightarrow>\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have left : \"(\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) \\<Longrightarrow>\n                        ((\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\\<or>(\\<forall>x. aEval (Eq p) (xs@ x# \\<Gamma>)))\""], ["proof (prove)\nusing this:\n  eval (list_conj (map fm.Atom L @ F))\n   (xs @ ?x2 # \\<Gamma>) \\<Longrightarrow>\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       eval (list_conj (map fm.Atom L @ F))\n        (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "by blast"], ["proof (state)\nthis:\n  \\<exists>x.\n     eval (list_conj (map fm.Atom L @ F))\n      (xs @ x # \\<Gamma>) \\<Longrightarrow>\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "{"], ["proof (state)\nthis:\n  \\<exists>x.\n     eval (list_conj (map fm.Atom L @ F))\n      (xs @ x # \\<Gamma>) \\<Longrightarrow>\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "assume hlength : \"length (xs::real list) = var\""], ["proof (state)\nthis:\n  length xs = var\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define A where \"A = (isolate_variable_sparse p var 2)\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p var 2\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define B where \"B = (isolate_variable_sparse p var 1)\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p var 1\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define C where \"C = (isolate_variable_sparse p var 0)\""], ["proof (state)\nthis:\n  C = isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have freeA : \"var \\<notin> vars A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars A", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 2)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars A\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have freeB : \"var \\<notin> vars B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars B", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 1)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars B\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have freeC : \"var \\<notin> vars C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars C", "unfolding C_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 0)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have express_p : \"p = A*(Var var)^2+B*(Var var)+C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = A * (Var var)\\<^sup>2 + B * Var var + C", "using express_poly[OF low_pow]"], ["proof (prove)\nusing this:\n  p =\n  isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n  isolate_variable_sparse p var 1 * Var var +\n  isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. p = A * (Var var)\\<^sup>2 + B * Var var + C", "unfolding A_def B_def C_def"], ["proof (prove)\nusing this:\n  p =\n  isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n  isolate_variable_sparse p var 1 * Var var +\n  isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. p =\n    isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n    isolate_variable_sparse p var 1 * Var var +\n    isolate_variable_sparse p var 0", "by fastforce"], ["proof (state)\nthis:\n  p = A * (Var var)\\<^sup>2 + B * Var var + C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "assume h : \"(\\<exists>x. (eval (elimVar var L F (Eq p)) (list_update (xs@x#\\<Gamma>) var x)))\""], ["proof (state)\nthis:\n  \\<exists>x. eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x])\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define X where \"X=xs@x#\\<Gamma>\""], ["proof (state)\nthis:\n  X = xs @ x # \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have Xlength : \"length X > var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var < length X", "using X_def hlength"], ["proof (prove)\nusing this:\n  X = xs @ x # \\<Gamma>\n  length xs = var\n\ngoal (1 subgoal):\n 1. var < length X", "by auto"], ["proof (state)\nthis:\n  var < length X\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define Aval where \"Aval = insertion (nth_default 0 (list_update X var x)) A\""], ["proof (state)\nthis:\n  Aval = insertion (nth_default 0 (X[var := x])) A\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define Bval where \"Bval = insertion (nth_default 0 (list_update X var x)) B\""], ["proof (state)\nthis:\n  Bval = insertion (nth_default 0 (X[var := x])) B\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "define Cval where \"Cval = insertion (nth_default 0 (list_update X var x)) C\""], ["proof (state)\nthis:\n  Cval = insertion (nth_default 0 (X[var := x])) C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have allAval : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) A = Aval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) A = Aval", "using freeA Aval_def"], ["proof (prove)\nusing this:\n  var \\<notin> vars A\n  Aval = insertion (nth_default 0 (X[var := x])) A\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) A = Aval", "using not_contains_insertion"], ["proof (prove)\nusing this:\n  var \\<notin> vars A\n  Aval = insertion (nth_default 0 (X[var := x])) A\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) A = Aval", "by blast"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) A = Aval\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have allBval : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) B = Bval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) B = Bval", "using freeB Bval_def"], ["proof (prove)\nusing this:\n  var \\<notin> vars B\n  Bval = insertion (nth_default 0 (X[var := x])) B\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) B = Bval", "using not_contains_insertion"], ["proof (prove)\nusing this:\n  var \\<notin> vars B\n  Bval = insertion (nth_default 0 (X[var := x])) B\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) B = Bval", "by blast"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) B = Bval\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have allCval : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) C = Cval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) C = Cval", "using freeC Cval_def"], ["proof (prove)\nusing this:\n  var \\<notin> vars C\n  Cval = insertion (nth_default 0 (X[var := x])) C\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) C = Cval", "using not_contains_insertion"], ["proof (prove)\nusing this:\n  var \\<notin> vars C\n  Cval = insertion (nth_default 0 (X[var := x])) C\n  \\<lbrakk>?var \\<notin> vars ?p;\n   insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val\\<rbrakk>\n  \\<Longrightarrow> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) C = Cval", "by blast"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) C = Cval\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "assume \"(eval (elimVar var L F (Eq p)) (list_update (xs@x#\\<Gamma>) var x))\""], ["proof (state)\nthis:\n  eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x])\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x])", "have h : \"(eval (elimVar var L F (Eq p)) (list_update X var x))\""], ["proof (prove)\nusing this:\n  eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x])\n\ngoal (1 subgoal):\n 1. eval (elimVar var L F (Eq p)) (X[var := x])", "unfolding X_def"], ["proof (prove)\nusing this:\n  eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x])\n\ngoal (1 subgoal):\n 1. eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x])", "."], ["proof (state)\nthis:\n  eval (elimVar var L F (Eq p)) (X[var := x])\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have \"(Aval = 0 \\<and> Bval \\<noteq> 0 \\<and>\n          (\\<forall>f\\<in>(\\<lambda>a. Atom(linear_substitution var (-C) B a)) ` set L \\<union>\n             linear_substitution_fm var (-C) B `\n             set F.\n            eval f (X[var := x])) \\<or>\n          Aval \\<noteq> 0 \\<and>\n          insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval  \\<le> Bval\\<^sup>2 \\<and>\n          ((\\<forall>f\\<in>(quadratic_sub var (-B) 1 (B^2-4*A*C) (2*A)) `\n             set L \\<union>\n             (quadratic_sub_fm var (-B) 1 (B^2-4*A*C) (2*A)) `\n             set F.\n            eval f (X[var := x]))\n          \\<or>(\\<forall>f\\<in>(quadratic_sub var (-B) (-1) (B^2-4*A*C) (2*A)) `\n             set L \\<union>\n             (quadratic_sub_fm var (-B) (-1) (B^2-4*A*C) (2*A)) `\n             set F.\n            eval f (X[var := x]))\n          ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>f\\<in>(\\<lambda>a.\n                        fm.Atom (linear_substitution var (- C) B a)) `\n                    set L \\<union>\n                    linear_substitution_fm var (- C) B ` set F.\n        eval f (X[var := x])) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set L \\<union>\n                     quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set F.\n         eval f (X[var := x])) \\<or>\n     (\\<forall>f\\<in>quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                      (2 * A) `\n                     set L \\<union>\n                     quadratic_sub_fm var (- B) (- 1)\n                      (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                     set F.\n         eval f (X[var := x])))", "unfolding Aval_def Bval_def Cval_def A_def B_def C_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 2) =\n    0 \\<and>\n    insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 1) \\<noteq>\n    0 \\<and>\n    (\\<forall>f\\<in>(\\<lambda>a.\n                        fm.Atom\n                         (linear_substitution var\n                           (- isolate_variable_sparse p var 0)\n                           (isolate_variable_sparse p var 1) a)) `\n                    set L \\<union>\n                    linear_substitution_fm var\n                     (- isolate_variable_sparse p var 0)\n                     (isolate_variable_sparse p var 1) `\n                    set F.\n        eval f (X[var := x])) \\<or>\n    insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 2) \\<noteq>\n    0 \\<and>\n    insertion (nth_default 0 (X[var := x])) 4 *\n    insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 2) *\n    insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 0)\n    \\<le> (insertion (nth_default 0 (X[var := x]))\n            (isolate_variable_sparse p var 1))\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>quadratic_sub var (- isolate_variable_sparse p var 1) 1\n                      ((isolate_variable_sparse p var 1)\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set L \\<union>\n                     quadratic_sub_fm var\n                      (- isolate_variable_sparse p var 1) 1\n                      ((isolate_variable_sparse p var 1)\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set F.\n         eval f (X[var := x])) \\<or>\n     (\\<forall>f\\<in>quadratic_sub var (- isolate_variable_sparse p var 1)\n                      (- 1)\n                      ((isolate_variable_sparse p var 1)\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set L \\<union>\n                     quadratic_sub_fm var\n                      (- isolate_variable_sparse p var 1) (- 1)\n                      ((isolate_variable_sparse p var 1)\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set F.\n         eval f (X[var := x])))", "using h"], ["proof (prove)\nusing this:\n  eval (elimVar var L F (Eq p)) (X[var := x])\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 2) =\n    0 \\<and>\n    insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 1) \\<noteq>\n    0 \\<and>\n    (\\<forall>f\\<in>(\\<lambda>a.\n                        fm.Atom\n                         (linear_substitution var\n                           (- isolate_variable_sparse p var 0)\n                           (isolate_variable_sparse p var 1) a)) `\n                    set L \\<union>\n                    linear_substitution_fm var\n                     (- isolate_variable_sparse p var 0)\n                     (isolate_variable_sparse p var 1) `\n                    set F.\n        eval f (X[var := x])) \\<or>\n    insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 2) \\<noteq>\n    0 \\<and>\n    insertion (nth_default 0 (X[var := x])) 4 *\n    insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 2) *\n    insertion (nth_default 0 (X[var := x]))\n     (isolate_variable_sparse p var 0)\n    \\<le> (insertion (nth_default 0 (X[var := x]))\n            (isolate_variable_sparse p var 1))\\<^sup>2 \\<and>\n    ((\\<forall>f\\<in>quadratic_sub var (- isolate_variable_sparse p var 1) 1\n                      ((isolate_variable_sparse p var 1)\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set L \\<union>\n                     quadratic_sub_fm var\n                      (- isolate_variable_sparse p var 1) 1\n                      ((isolate_variable_sparse p var 1)\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set F.\n         eval f (X[var := x])) \\<or>\n     (\\<forall>f\\<in>quadratic_sub var (- isolate_variable_sparse p var 1)\n                      (- 1)\n                      ((isolate_variable_sparse p var 1)\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set L \\<union>\n                     quadratic_sub_fm var\n                      (- isolate_variable_sparse p var 1) (- 1)\n                      ((isolate_variable_sparse p var 1)\\<^sup>2 -\n                       4 * isolate_variable_sparse p var 2 *\n                       isolate_variable_sparse p var 0)\n                      (2 * isolate_variable_sparse p var 2) `\n                     set F.\n         eval f (X[var := x])))", "by(simp add: eval_list_conj insertion_mult insertion_sub insertion_pow insertion_add insertion_var Xlength)"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>(\\<lambda>a.\n                      fm.Atom (linear_substitution var (- C) B a)) `\n                  set L \\<union>\n                  linear_substitution_fm var (- C) B ` set F.\n      eval f (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set L \\<union>\n                   quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set F.\n       eval f (X[var := x])) \\<or>\n   (\\<forall>f\\<in>quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set L \\<union>\n                   quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set F.\n       eval f (X[var := x])))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>(\\<lambda>a.\n                      fm.Atom (linear_substitution var (- C) B a)) `\n                  set L \\<union>\n                  linear_substitution_fm var (- C) B ` set F.\n      eval f (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set L \\<union>\n                   quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set F.\n       eval f (X[var := x])) \\<or>\n   (\\<forall>f\\<in>quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set L \\<union>\n                   quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set F.\n       eval f (X[var := x])))", "have h : \"(Aval = 0 \\<and> Bval \\<noteq> 0 \\<and>\n                            ((\\<forall>a\\<in> set L. aEval (linear_substitution var (-C) B a) (X[var := x])) \\<and>\n                            (\\<forall>a\\<in> set F. eval (linear_substitution_fm var (-C) B a) (X[var := x]))) \\<or>\n                            Aval \\<noteq> 0 \\<and> insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<and>\n                            (((\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x]))\n                            \\<and>(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x])))\n                            \\<or>((\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) (-1) (B^2-4*A*C) (2*A) a) (X[var := x]))\n                            \\<and>(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) (-1) (B^2-4*A*C) (2*A) a) (X[var := x])))))\n                          \""], ["proof (prove)\nusing this:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>f\\<in>(\\<lambda>a.\n                      fm.Atom (linear_substitution var (- C) B a)) `\n                  set L \\<union>\n                  linear_substitution_fm var (- C) B ` set F.\n      eval f (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>f\\<in>quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set L \\<union>\n                   quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set F.\n       eval f (X[var := x])) \\<or>\n   (\\<forall>f\\<in>quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set L \\<union>\n                   quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                    (2 * A) `\n                   set F.\n       eval f (X[var := x])))\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and>\n    Bval \\<noteq> 0 \\<and>\n    (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval (linear_substitution_fm var (- C) B a) (X[var := x])) \\<or>\n    Aval \\<noteq> 0 \\<and>\n    insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n    \\<le> Bval\\<^sup>2 \\<and>\n    ((\\<forall>a\\<in>set L.\n         eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n          (X[var := x])) \\<and>\n     (\\<forall>a\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n          (X[var := x])) \\<or>\n     (\\<forall>a\\<in>set L.\n         eval\n          (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n          (X[var := x])) \\<and>\n     (\\<forall>a\\<in>set F.\n         eval\n          (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n            a)\n          (X[var := x])))", "apply(cases \"Aval = 0 \")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Aval = 0 \\<and>\n             Bval \\<noteq> 0 \\<and>\n             (\\<forall>f\\<in>(\\<lambda>a.\n                                 fm.Atom\n                                  (linear_substitution var (- C) B a)) `\n                             set L \\<union>\n                             linear_substitution_fm var (- C) B ` set F.\n                 eval f (X[var := x])) \\<or>\n             Aval \\<noteq> 0 \\<and>\n             insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n             \\<le> Bval\\<^sup>2 \\<and>\n             ((\\<forall>f\\<in>quadratic_sub var (- B) 1\n                               (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                              set L \\<union>\n                              quadratic_sub_fm var (- B) 1\n                               (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                              set F.\n                  eval f (X[var := x])) \\<or>\n              (\\<forall>f\\<in>quadratic_sub var (- B) (- 1)\n                               (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                              set L \\<union>\n                              quadratic_sub_fm var (- B) (- 1)\n                               (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                              set F.\n                  eval f (X[var := x])));\n     Aval = 0\\<rbrakk>\n    \\<Longrightarrow> Aval = 0 \\<and>\n                      Bval \\<noteq> 0 \\<and>\n                      (\\<forall>a\\<in>set L.\n                          aEval (linear_substitution var (- C) B a)\n                           (X[var := x])) \\<and>\n                      (\\<forall>a\\<in>set F.\n                          eval (linear_substitution_fm var (- C) B a)\n                           (X[var := x])) \\<or>\n                      Aval \\<noteq> 0 \\<and>\n                      insertion (nth_default 0 (X[var := x])) 4 * Aval *\n                      Cval\n                      \\<le> Bval\\<^sup>2 \\<and>\n                      ((\\<forall>a\\<in>set L.\n                           eval\n                            (quadratic_sub var (- B) 1\n                              (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n                            (X[var := x])) \\<and>\n                       (\\<forall>a\\<in>set F.\n                           eval\n                            (quadratic_sub_fm var (- B) 1\n                              (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n                            (X[var := x])) \\<or>\n                       (\\<forall>a\\<in>set L.\n                           eval\n                            (quadratic_sub var (- B) (- 1)\n                              (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n                            (X[var := x])) \\<and>\n                       (\\<forall>a\\<in>set F.\n                           eval\n                            (quadratic_sub_fm var (- B) (- 1)\n                              (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n                            (X[var := x])))\n 2. \\<lbrakk>Aval = 0 \\<and>\n             Bval \\<noteq> 0 \\<and>\n             (\\<forall>f\\<in>(\\<lambda>a.\n                                 fm.Atom\n                                  (linear_substitution var (- C) B a)) `\n                             set L \\<union>\n                             linear_substitution_fm var (- C) B ` set F.\n                 eval f (X[var := x])) \\<or>\n             Aval \\<noteq> 0 \\<and>\n             insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n             \\<le> Bval\\<^sup>2 \\<and>\n             ((\\<forall>f\\<in>quadratic_sub var (- B) 1\n                               (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                              set L \\<union>\n                              quadratic_sub_fm var (- B) 1\n                               (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                              set F.\n                  eval f (X[var := x])) \\<or>\n              (\\<forall>f\\<in>quadratic_sub var (- B) (- 1)\n                               (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                              set L \\<union>\n                              quadratic_sub_fm var (- B) (- 1)\n                               (B\\<^sup>2 - 4 * A * C) (2 * A) `\n                              set F.\n                  eval f (X[var := x])));\n     Aval \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> Aval = 0 \\<and>\n                      Bval \\<noteq> 0 \\<and>\n                      (\\<forall>a\\<in>set L.\n                          aEval (linear_substitution var (- C) B a)\n                           (X[var := x])) \\<and>\n                      (\\<forall>a\\<in>set F.\n                          eval (linear_substitution_fm var (- C) B a)\n                           (X[var := x])) \\<or>\n                      Aval \\<noteq> 0 \\<and>\n                      insertion (nth_default 0 (X[var := x])) 4 * Aval *\n                      Cval\n                      \\<le> Bval\\<^sup>2 \\<and>\n                      ((\\<forall>a\\<in>set L.\n                           eval\n                            (quadratic_sub var (- B) 1\n                              (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n                            (X[var := x])) \\<and>\n                       (\\<forall>a\\<in>set F.\n                           eval\n                            (quadratic_sub_fm var (- B) 1\n                              (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n                            (X[var := x])) \\<or>\n                       (\\<forall>a\\<in>set L.\n                           eval\n                            (quadratic_sub var (- B) (- 1)\n                              (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n                            (X[var := x])) \\<and>\n                       (\\<forall>a\\<in>set F.\n                           eval\n                            (quadratic_sub_fm var (- B) (- 1)\n                              (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n                            (X[var := x])))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Aval = 0; a \\<in> set L; Bval \\<noteq> 0;\n        \\<forall>f\\<in>(\\<lambda>a.\n                           fm.Atom (linear_substitution var (- C) B a)) `\n                       set L \\<union>\n                       (\\<lambda>x.\n                           liftmap\n                            (\\<lambda>x A.\n                                fm.Atom\n                                 (linear_substitution (var + x)\n                                   (liftPoly 0 x (- C)) (liftPoly 0 x B) A))\n                            x 0) `\n                       set F.\n           eval f (X[var := x])\\<rbrakk>\n       \\<Longrightarrow> aEval (linear_substitution var (- C) B a)\n                          (X[var := x])", "by (meson Un_iff eval.simps(1) imageI)"], ["proof (state)\nthis:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>a\\<in>set L.\n      aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (linear_substitution_fm var (- C) B a) (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>a\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<or>\n   (\\<forall>a\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have h : \"(\\<exists>x. ((\\<forall>a\\<in>set L . aEval a ((xs@x#\\<Gamma>)[var := x])) \\<and> (\\<forall>f\\<in>set F. eval f ((xs@x#\\<Gamma>)[var := x]))))\\<or>(Aval=0\\<and>Bval=0\\<and>Cval=0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"Aval=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Aval = 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Aval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  Aval = 0\n\ngoal (2 subgoals):\n 1. Aval = 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Aval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Aval = 0", "have aval0 : \"Aval=0\""], ["proof (prove)\nusing this:\n  Aval = 0\n\ngoal (1 subgoal):\n 1. Aval = 0", "by simp"], ["proof (state)\nthis:\n  Aval = 0\n\ngoal (2 subgoals):\n 1. Aval = 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Aval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"Bval = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Bval = 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  Bval = 0\n\ngoal (2 subgoals):\n 1. Bval = 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Bval = 0", "have bval0 : \"Bval = 0\""], ["proof (prove)\nusing this:\n  Bval = 0\n\ngoal (1 subgoal):\n 1. Bval = 0", "by simp"], ["proof (state)\nthis:\n  Bval = 0\n\ngoal (2 subgoals):\n 1. Bval = 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"Cval=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Cval = 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Cval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  Cval = 0\n\ngoal (2 subgoals):\n 1. Cval = 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. Cval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Cval = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using aval0 bval0 True"], ["proof (prove)\nusing this:\n  Cval = 0\n  Aval = 0\n  Bval = 0\n  Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by auto"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. Cval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Cval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  Cval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Cval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Cval \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Cval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using h"], ["proof (prove)\nusing this:\n  Cval \\<noteq> 0\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>a\\<in>set L.\n      aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (linear_substitution_fm var (- C) B a) (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>a\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<or>\n   (\\<forall>a\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])))\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by(simp add:aval0 bval0 False)"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  Bval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have hb :  \"insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval", "using allBval"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) B = Bval\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval", "by simp"], ["proof (state)\nthis:\n  insertion (nth_default 0 (X[var := - Cval / Bval])) B = Bval\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have hc : \"insertion (nth_default 0 (X[var := - Cval / Bval])) (-C) = -Cval\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := - Cval / Bval])) (- C) = - Cval", "using allCval"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) C = Cval\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := - Cval / Bval])) (- C) = - Cval", "by (simp add: insertion_neg)"], ["proof (state)\nthis:\n  insertion (nth_default 0 (X[var := - Cval / Bval])) (- C) = - Cval\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have freecneg : \"var\\<notin>vars(-C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (- C)", "using freeC not_in_neg"], ["proof (prove)\nusing this:\n  var \\<notin> vars C\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (- C)", "by auto"], ["proof (state)\nthis:\n  var \\<notin> vars (- C)\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have p1 : \"(\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set L.\n       aEval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval])", "using h"], ["proof (prove)\nusing this:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>a\\<in>set L.\n      aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (linear_substitution_fm var (- C) B a) (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>a\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<or>\n   (\\<forall>a\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])))\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set L.\n       aEval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval])", "apply(simp add: False aval0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           a 0)\n         (X[var := x])) \\<Longrightarrow>\n    \\<forall>a\\<in>set L.\n       aEval a ((xs @ x # \\<Gamma>)[var := - (Cval / Bval)])", "using linear[OF Xlength False freecneg freeB hc hb]\n            list_update_length var_not_in_linear[OF freecneg freeB]"], ["proof (prove)\nusing this:\n  aEval ?A (X[var := - Cval / Bval]) =\n  aEval (linear_substitution var (- C) B ?A) (X[var := ?v])\n  (?xs @ ?x # ?ys)[length ?xs := ?y] = ?xs @ ?y # ?ys\n  freeIn var (fm.Atom (linear_substitution var (- C) B ?A))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           a 0)\n         (X[var := x])) \\<Longrightarrow>\n    \\<forall>a\\<in>set L.\n       aEval a ((xs @ x # \\<Gamma>)[var := - (Cval / Bval)])", "unfolding X_def"], ["proof (prove)\nusing this:\n  aEval ?A ((xs @ x # \\<Gamma>)[var := - Cval / Bval]) =\n  aEval (linear_substitution var (- C) B ?A)\n   ((xs @ x # \\<Gamma>)[var := ?v])\n  (?xs @ ?x # ?ys)[length ?xs := ?y] = ?xs @ ?y # ?ys\n  freeIn var (fm.Atom (linear_substitution var (- C) B ?A))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a)\n         ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           a 0)\n         ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    \\<forall>a\\<in>set L.\n       aEval a ((xs @ x # \\<Gamma>)[var := - (Cval / Bval)])", "using hlength"], ["proof (prove)\nusing this:\n  aEval ?A ((xs @ x # \\<Gamma>)[var := - Cval / Bval]) =\n  aEval (linear_substitution var (- C) B ?A)\n   ((xs @ x # \\<Gamma>)[var := ?v])\n  (?xs @ ?x # ?ys)[length ?xs := ?y] = ?xs @ ?y # ?ys\n  freeIn var (fm.Atom (linear_substitution var (- C) B ?A))\n  length xs = var\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a)\n         ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           a 0)\n         ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    \\<forall>a\\<in>set L.\n       aEval a ((xs @ x # \\<Gamma>)[var := - (Cval / Bval)])", "by (metis divide_minus_left)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval])\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have p2 : \"(\\<forall>a\\<in>set F. eval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set F. eval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval])", "using h"], ["proof (prove)\nusing this:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>a\\<in>set L.\n      aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (linear_substitution_fm var (- C) B a) (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>a\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<or>\n   (\\<forall>a\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])))\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set F. eval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval])", "apply(simp add: False aval0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           a 0)\n         (X[var := x])) \\<Longrightarrow>\n    \\<forall>a\\<in>set F.\n       eval a ((xs @ x # \\<Gamma>)[var := - (Cval / Bval)])", "using linear_fm[OF Xlength False freecneg freeB hc hb]\n            list_update_length var_not_in_linear_fm[OF freecneg freeB]"], ["proof (prove)\nusing this:\n  eval ?F (X[var := - Cval / Bval]) =\n  (\\<forall>v. eval (linear_substitution_fm var (- C) B ?F) (X[var := v]))\n  (?xs @ ?x # ?ys)[length ?xs := ?y] = ?xs @ ?y # ?ys\n  freeIn var (linear_substitution_fm var (- C) B ?F)\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           a 0)\n         (X[var := x])) \\<Longrightarrow>\n    \\<forall>a\\<in>set F.\n       eval a ((xs @ x # \\<Gamma>)[var := - (Cval / Bval)])", "unfolding X_def"], ["proof (prove)\nusing this:\n  eval ?F ((xs @ x # \\<Gamma>)[var := - Cval / Bval]) =\n  (\\<forall>v.\n      eval (linear_substitution_fm var (- C) B ?F)\n       ((xs @ x # \\<Gamma>)[var := v]))\n  (?xs @ ?x # ?ys)[length ?xs := ?y] = ?xs @ ?y # ?ys\n  freeIn var (linear_substitution_fm var (- C) B ?F)\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a)\n         ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           a 0)\n         ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    \\<forall>a\\<in>set F.\n       eval a ((xs @ x # \\<Gamma>)[var := - (Cval / Bval)])", "using hlength var_not_in_eval"], ["proof (prove)\nusing this:\n  eval ?F ((xs @ x # \\<Gamma>)[var := - Cval / Bval]) =\n  (\\<forall>v.\n      eval (linear_substitution_fm var (- C) B ?F)\n       ((xs @ x # \\<Gamma>)[var := v]))\n  (?xs @ ?x # ?ys)[length ?xs := ?y] = ?xs @ ?y # ?ys\n  freeIn var (linear_substitution_fm var (- C) B ?F)\n  length xs = var\n  \\<forall>var L.\n     freeIn var ?\\<phi> \\<longrightarrow>\n     (\\<exists>x. eval ?\\<phi> (L[var := x])) =\n     (\\<forall>x. eval ?\\<phi> (L[var := x]))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        aEval (linear_substitution var (- C) B a)\n         ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (liftmap\n           (\\<lambda>x A.\n               fm.Atom\n                (linear_substitution (var + x) (liftPoly 0 x (- C))\n                  (liftPoly 0 x B) A))\n           a 0)\n         ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    \\<forall>a\\<in>set F.\n       eval a ((xs @ x # \\<Gamma>)[var := - (Cval / Bval)])", "by (metis divide_minus_left linear_substitution_fm.elims linear_substitution_fm_helper.elims)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set F. eval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval])\n\ngoal (1 subgoal):\n 1. Bval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using p1 p2 hlength"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval])\n  \\<forall>a\\<in>set F. eval a ((xs @ x # \\<Gamma>)[var := - Cval / Bval])\n  length xs = var\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by fastforce"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  Aval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  Aval \\<noteq> 0", "have aval0 : \"Aval \\<noteq> 0\""], ["proof (prove)\nusing this:\n  Aval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  Aval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h4 : \"insertion (nth_default 0 (X[var := x])) 4 = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := x])) 4 = 4", "using insertion_const[where f = \"(nth_default 0 (X[var := x]))\", where c=\"4\"]"], ["proof (prove)\nusing this:\n  insertion (nth_default 0 (X[var := x])) (Const 4) = 4\n\ngoal (1 subgoal):\n 1. insertion (nth_default 0 (X[var := x])) 4 = 4", "by (metis MPoly_Type.insertion_one insertion_add numeral_Bit0 one_add_one)"], ["proof (state)\nthis:\n  insertion (nth_default 0 (X[var := x])) 4 = 4\n\ngoal (1 subgoal):\n 1. Aval \\<noteq> 0 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "proof(cases \"4 * Aval * Cval \\<le> Bval\\<^sup>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case True"], ["proof (state)\nthis:\n  4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  4 * Aval * Cval \\<le> Bval\\<^sup>2", "have h1 :  \"- Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0\""], ["proof (prove)\nusing this:\n  4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (1 subgoal):\n 1. - Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0", "by simp"], ["proof (state)\nthis:\n  - Bval\\<^sup>2 + 4 * Aval * Cval \\<le> 0\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h : \"(((\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x]))\n                        \\<and>(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x])))\n                        \\<or>((\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) (-1) (B^2-4*A*C) (2*A) a) (X[var := x]))\n                        \\<and>(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) (-1) (B^2-4*A*C) (2*A) a) (X[var := x]))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<or>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "using h"], ["proof (prove)\nusing this:\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>a\\<in>set L.\n      aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (linear_substitution_fm var (- C) B a) (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>a\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<or>\n   (\\<forall>a\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])))\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set L.\n        eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<or>\n    (\\<forall>a\\<in>set L.\n        eval\n         (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])) \\<and>\n    (\\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x]))", "by(simp add: h1 aval0)"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<or>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x]))\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1a : \"var\\<notin>vars(-B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (- B)", "by(simp add: freeB not_in_neg)"], ["proof (state)\nthis:\n  var \\<notin> vars (- B)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1b : \"var\\<notin>vars(1::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 1", "using isolate_var_one not_in_isovarspar"], ["proof (prove)\nusing this:\n  isolate_variable_sparse (Var ?x) ?x 1 = 1\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n\ngoal (1 subgoal):\n 1. var \\<notin> vars 1", "by blast"], ["proof (state)\nthis:\n  var \\<notin> vars 1\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1c : \"var\\<notin>vars(-1::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (- 1)", "by(simp add: h1b not_in_neg)"], ["proof (state)\nthis:\n  var \\<notin> vars (- 1)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1d : \"var\\<notin>vars(4::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis h1b not_in_add numeral_Bit0 one_add_one)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1e : \"var\\<notin>vars(B^2-4*A*C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (B\\<^sup>2 - 4 * A * C)", "by(simp add: freeB h1d freeA freeC not_in_mult not_in_pow not_in_sub)"], ["proof (state)\nthis:\n  var \\<notin> vars (B\\<^sup>2 - 4 * A * C)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1f : \"var\\<notin>vars(2::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 2", "using h1b not_in_add"], ["proof (prove)\nusing this:\n  var \\<notin> vars 1\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p + ?q)\n\ngoal (1 subgoal):\n 1. var \\<notin> vars 2", "by fastforce"], ["proof (state)\nthis:\n  var \\<notin> vars 2\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1g : \"var\\<notin>vars(2*A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (2 * A)", "by(simp add: freeA h1f not_in_mult)"], ["proof (state)\nthis:\n  var \\<notin> vars (2 * A)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1h : \"freeIn var (quadratic_sub var (-B) (1) (B^2-4*A*C) (2*A) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)", "using free_in_quad h1a h1b h1e h1g"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?a; ?var \\<notin> vars ?b;\n   ?var \\<notin> vars ?c; ?var \\<notin> vars ?d\\<rbrakk>\n  \\<Longrightarrow> freeIn ?var (quadratic_sub ?var ?a ?b ?c ?d ?A)\n  var \\<notin> vars (- B)\n  var \\<notin> vars 1\n  var \\<notin> vars (B\\<^sup>2 - 4 * A * C)\n  var \\<notin> vars (2 * A)\n\ngoal (1 subgoal):\n 1. freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)", "by blast"], ["proof (state)\nthis:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h1i : \"freeIn var (quadratic_sub var (-B) (-1) (B^2-4*A*C) (2*A) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var\n     (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)", "using free_in_quad h1a h1c h1e h1g"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?a; ?var \\<notin> vars ?b;\n   ?var \\<notin> vars ?c; ?var \\<notin> vars ?d\\<rbrakk>\n  \\<Longrightarrow> freeIn ?var (quadratic_sub ?var ?a ?b ?c ?d ?A)\n  var \\<notin> vars (- B)\n  var \\<notin> vars (- 1)\n  var \\<notin> vars (B\\<^sup>2 - 4 * A * C)\n  var \\<notin> vars (2 * A)\n\ngoal (1 subgoal):\n 1. freeIn var\n     (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)", "by blast"], ["proof (state)\nthis:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h2 : \"2*Aval \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * Aval \\<noteq> 0", "using aval0"], ["proof (prove)\nusing this:\n  Aval \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 * Aval \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  2 * Aval \\<noteq> 0\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h3 : \"0 \\<le> (Bval^2-4*Aval*Cval)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> Bval\\<^sup>2 - 4 * Aval * Cval", "using True"], ["proof (prove)\nusing this:\n  4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (1 subgoal):\n 1. 0 \\<le> Bval\\<^sup>2 - 4 * Aval * Cval", "by auto"], ["proof (state)\nthis:\n  0 \\<le> Bval\\<^sup>2 - 4 * Aval * Cval\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h4a : \"var \\<notin> vars 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis monom_numeral notInKeys_notInVars not_in_add not_in_isovarspar not_in_pow one_add_one power.simps(1) rel_simps(76) vars_monom_keys)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h4 : \"var \\<notin> vars (B^2-4*A*C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (B\\<^sup>2 - 4 * A * C)", "by(simp add: h4a freeA freeB freeC not_in_pow not_in_mult not_in_sub)"], ["proof (state)\nthis:\n  var \\<notin> vars (B\\<^sup>2 - 4 * A * C)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h5 : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) (-B) = -Bval \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (- B) = - Bval", "using allBval"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) B = Bval\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (- B) = - Bval", "by(simp add: insertion_neg)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) (- B) = - Bval\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h6 : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) 1 = 1", "by simp"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 1 = 1\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h6a : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) (-1) = (-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (- 1) = - 1", "using h6"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 1 = 1\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (- 1) = - 1", "by (simp add: insertion_neg)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) (- 1) = - 1\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h7a : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) 4 = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) 4 = 4", "by (metis h6 insertion_add numeral_Bit0 one_add_one)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 4 = 4\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h7b : \"var \\<notin> vars(4*A*C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (4 * A * C)", "using freeA freeC"], ["proof (prove)\nusing this:\n  var \\<notin> vars A\n  var \\<notin> vars C\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (4 * A * C)", "by (simp add: h4a not_in_mult)"], ["proof (state)\nthis:\n  var \\<notin> vars (4 * A * C)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h7c : \"var \\<notin> vars(B^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (B\\<^sup>2)", "using freeB not_in_pow"], ["proof (prove)\nusing this:\n  var \\<notin> vars B\n  ?var \\<notin> vars ?p \\<Longrightarrow> ?var \\<notin> vars (?p ^ ?i)\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (B\\<^sup>2)", "by auto"], ["proof (state)\nthis:\n  var \\<notin> vars (B\\<^sup>2)\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h7 : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) (B^2-4*A*C) = (Bval^2-4*Aval*Cval)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       insertion (nth_default 0 (X[var := x])) (B\\<^sup>2 - 4 * A * C) =\n       Bval\\<^sup>2 - 4 * Aval * Cval", "by (simp add: h7a allAval allBval allCval insertion_mult insertion_sub power2_eq_square)"], ["proof (state)\nthis:\n  \\<forall>x.\n     insertion (nth_default 0 (X[var := x])) (B\\<^sup>2 - 4 * A * C) =\n     Bval\\<^sup>2 - 4 * Aval * Cval\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h8a : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) 2 = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) 2 = 2", "by (metis h6 insertion_add one_add_one)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) 2 = 2\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have h8 : \"\\<forall>x. insertion (nth_default 0 (list_update X var x)) (2*A) = (2*Aval)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (X[var := x])) (2 * A) = 2 * Aval", "by(simp add: allAval h8a insertion_mult)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) (2 * A) = 2 * Aval\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have p1 : \"(\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x]))\n                        \\<Longrightarrow>(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x]))\n                          \\<Longrightarrow> \\<exists>x. length xs = var \\<and> ((\\<forall>a\\<in>set L . aEval a ((xs@x#\\<Gamma>)[var := x])) \\<and> (\\<forall>f\\<in>set F. eval f ((xs@x#\\<Gamma>)[var := x])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A)\n                   a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A)\n                   a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "assume p1 : \"(\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x]))\""], ["proof (state)\nthis:\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A)\n                   a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "assume p2 : \"(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) 1 (B^2-4*A*C) (2*A) a) (X[var := x]))\""], ["proof (state)\nthis:\n  \\<forall>a\\<in>set F.\n     eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A)\n                   a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       length xs = var \\<and>\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))", "using free_in_quad[where a=\"-B\",where b=\"1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\",OF h1a h1b h1e h1g]"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       length xs = var \\<and>\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))", "using quadratic_sub[where a=\"-B\",where b=\"1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\", where L=\"X\", OF Xlength,\n                where Dv=\"2*Aval\", OF h2, where Cv=\"(Bval^2-4*Aval*Cval)\", OF h3, where Av=\"-Bval\", OF h4 h5, where Bv=\"1\", OF h6 h7 h8]"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       length xs = var \\<and>\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))", "using free_in_quad_fm[where a=\"-B\",where b=\"1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\",OF h1a h1b h1e h1g]"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  freeIn var\n   (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       length xs = var \\<and>\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))", "using quadratic_sub_fm[where a=\"-B\",where b=\"1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\", where L=\"X\", OF Xlength,\n                where Dv=\"2*Aval\", OF h2, where Cv=\"(Bval^2-4*Aval*Cval)\", OF h3, where Av=\"-Bval\", OF h4 h5, where Bv=\"1\", OF h6 h7 h8]\n                p1 p2"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  freeIn var\n   (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  eval ?F\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?F)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n  \\<forall>a\\<in>set F.\n     eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       length xs = var \\<and>\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))", "using var_not_in_eval"], ["proof (prove)\nusing this:\n  freeIn var (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  freeIn var\n   (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  eval ?F\n   (X[var :=\n        (- Bval + 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) ?F)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  \\<forall>a\\<in>set L.\n     eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n  \\<forall>a\\<in>set F.\n     eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n      (X[var := x])\n  \\<forall>var L.\n     freeIn var ?\\<phi> \\<longrightarrow>\n     (\\<exists>x. eval ?\\<phi> (L[var := x])) =\n     (\\<forall>x. eval ?\\<phi> (L[var := x]))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       length xs = var \\<and>\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))", "by (metis X_def hlength list_update_length)"], ["proof (state)\nthis:\n  \\<exists>x.\n     length xs = var \\<and>\n     (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n     (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a\\<in>set L.\n              eval\n               (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n               (X[var := x]);\n   \\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       length xs = var \\<and>\n                       (\\<forall>a\\<in>set L.\n                           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                       (\\<forall>f\\<in>set F.\n                           eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have p2 : \"(\\<forall>a\\<in> set L. eval (quadratic_sub var (-B) (-1) (B^2-4*A*C) (2*A) a) (X[var := x]))\n                        \\<Longrightarrow>(\\<forall>a\\<in> set F. eval (quadratic_sub_fm var (-B) (-1) (B^2-4*A*C) (2*A) a) (X[var := x]))\n                          \\<Longrightarrow>\\<exists>x. length xs = var \\<and> ((\\<forall>a\\<in>set L . aEval a ((xs@x#\\<Gamma>)[var := x])) \\<and> (\\<forall>f\\<in>set F. eval f ((xs@x#\\<Gamma>)[var := x])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                   (2 * A) a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "using free_in_quad[where a=\"-B\",where b=\"-1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\",OF h1a h1c h1e h1g]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                   (2 * A) a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "using quadratic_sub[where a=\"-B\",where b=\"-1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\", where L=\"X\", OF Xlength,\n              where Dv=\"2*Aval\", OF h2, where Cv=\"(Bval^2-4*Aval*Cval)\", OF h3, where Av=\"-Bval\", OF h4 h5, where Bv=\"-1\", OF h6a h7 h8]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                   (2 * A) a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "using free_in_quad_fm[where a=\"-B\",where b=\"-1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\",OF h1a h1c h1e h1g]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  freeIn var\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                   (2 * A) a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "using quadratic_sub_fm[where a=\"-B\",where b=\"-1\", where c=\"(B^2-4*A*C)\", where d=\"2*A\",where var=\"var\", where L=\"X\", OF Xlength,\n              where Dv=\"2*Aval\", OF h2, where Cv=\"(Bval^2-4*Aval*Cval)\", OF h3, where Av=\"-Bval\", OF h4 h5, where Bv=\"-1\", OF h6a h7 h8]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  freeIn var\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  eval ?F\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?F)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                   (2 * A) a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "using var_not_in_eval"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  aEval ?A\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  freeIn var\n   (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?A)\n  eval ?F\n   (X[var :=\n        (- Bval + - 1 * sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)) /\n        (2 * Aval)]) =\n  eval (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) ?F)\n   (X[var := sqrt (Bval\\<^sup>2 - 4 * Aval * Cval)])\n  \\<forall>var L.\n     freeIn var ?\\<phi> \\<longrightarrow>\n     (\\<exists>x. eval ?\\<phi> (L[var := x])) =\n     (\\<forall>x. eval ?\\<phi> (L[var := x]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>set L.\n                eval\n                 (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                   (2 * A) a)\n                 (X[var := x]);\n     \\<forall>a\\<in>set F.\n        eval\n         (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A)\n           a)\n         (X[var := x])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         length xs = var \\<and>\n                         (\\<forall>a\\<in>set L.\n                             aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                         (\\<forall>f\\<in>set F.\n                             eval f ((xs @ x # \\<Gamma>)[var := x]))", "by (metis X_def hlength list_update_length)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a\\<in>set L.\n              eval\n               (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                 (2 * A) a)\n               (X[var := x]);\n   \\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       length xs = var \\<and>\n                       (\\<forall>a\\<in>set L.\n                           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                       (\\<forall>f\\<in>set F.\n                           eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal (2 subgoals):\n 1. 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n 2. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a\\<in>set L.\n              eval\n               (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                 (2 * A) a)\n               (X[var := x]);\n   \\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       length xs = var \\<and>\n                       (\\<forall>a\\<in>set L.\n                           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                       (\\<forall>f\\<in>set F.\n                           eval f ((xs @ x # \\<Gamma>)[var := x]))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a\\<in>set L.\n              eval\n               (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                 (2 * A) a)\n               (X[var := x]);\n   \\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       length xs = var \\<and>\n                       (\\<forall>a\\<in>set L.\n                           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                       (\\<forall>f\\<in>set F.\n                           eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using h p1 p2"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a\\<in>set L.\n              eval\n               (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                 (2 * A) a)\n               (X[var := x]);\n   \\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       length xs = var \\<and>\n                       (\\<forall>a\\<in>set L.\n                           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                       (\\<forall>f\\<in>set F.\n                           eval f ((xs @ x # \\<Gamma>)[var := x]))\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<or>\n  (\\<forall>a\\<in>set L.\n      eval (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x]))\n  \\<lbrakk>\\<forall>a\\<in>set L.\n              eval\n               (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n               (X[var := x]);\n   \\<forall>a\\<in>set F.\n      eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       length xs = var \\<and>\n                       (\\<forall>a\\<in>set L.\n                           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                       (\\<forall>f\\<in>set F.\n                           eval f ((xs @ x # \\<Gamma>)[var := x]))\n  \\<lbrakk>\\<forall>a\\<in>set L.\n              eval\n               (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C)\n                 (2 * A) a)\n               (X[var := x]);\n   \\<forall>a\\<in>set F.\n      eval\n       (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n       (X[var := x])\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       length xs = var \\<and>\n                       (\\<forall>a\\<in>set L.\n                           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                       (\\<forall>f\\<in>set F.\n                           eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by blast"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "case False"], ["proof (state)\nthis:\n  \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2 \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "then"], ["proof (chain)\npicking this:\n  \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using h"], ["proof (prove)\nusing this:\n  \\<not> 4 * Aval * Cval \\<le> Bval\\<^sup>2\n  Aval = 0 \\<and>\n  Bval \\<noteq> 0 \\<and>\n  (\\<forall>a\\<in>set L.\n      aEval (linear_substitution var (- C) B a) (X[var := x])) \\<and>\n  (\\<forall>a\\<in>set F.\n      eval (linear_substitution_fm var (- C) B a) (X[var := x])) \\<or>\n  Aval \\<noteq> 0 \\<and>\n  insertion (nth_default 0 (X[var := x])) 4 * Aval * Cval\n  \\<le> Bval\\<^sup>2 \\<and>\n  ((\\<forall>a\\<in>set L.\n       eval (quadratic_sub var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval (quadratic_sub_fm var (- B) 1 (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<or>\n   (\\<forall>a\\<in>set L.\n       eval\n        (quadratic_sub var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])) \\<and>\n   (\\<forall>a\\<in>set F.\n       eval\n        (quadratic_sub_fm var (- B) (- 1) (B\\<^sup>2 - 4 * A * C) (2 * A) a)\n        (X[var := x])))\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by(simp add: aval0 False h4)"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have \"(\\<exists>x.((\\<forall>a\\<in>set L . aEval a ((xs@x#\\<Gamma>)[var := x])) \\<and> (\\<forall>f\\<in>set F. eval f ((xs@x#\\<Gamma>)[var := x]))))\\<or>(\\<forall>x. aEval (Eq p) (xs @ x#\\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "proof(cases \"(\\<exists>x.((\\<forall>a\\<in>set L . aEval a ((xs@x#\\<Gamma>)[var := x])) \\<and> (\\<forall>f\\<in>set F. eval f ((xs@x#\\<Gamma>)[var := x]))))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n 2. \\<nexists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "case True"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n     (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal (2 subgoals):\n 1. \\<exists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n 2. \\<nexists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n     (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n     (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "case False"], ["proof (state)\nthis:\n  \\<nexists>x.\n     (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n     (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<nexists>x.\n     (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n     (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))", "have \"Aval=0\\<and>Bval=0\\<and>Cval=0\""], ["proof (prove)\nusing this:\n  \\<nexists>x.\n     (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n     (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "using h"], ["proof (prove)\nusing this:\n  \\<nexists>x.\n     (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n     (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "by auto"], ["proof (state)\nthis:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0", "have \"(\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\""], ["proof (prove)\nusing this:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)", "unfolding express_p"], ["proof (prove)\nusing this:\n  Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       aEval (Eq (A * (Var var)\\<^sup>2 + B * Var var + C))\n        (xs @ x # \\<Gamma>)", "apply(simp add:insertion_add insertion_mult insertion_pow)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0 \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n       (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var))\\<^sup>2 +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) B *\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n       0", "using allAval allBval allCval hlength"], ["proof (prove)\nusing this:\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) A = Aval\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) B = Bval\n  \\<forall>x. insertion (nth_default 0 (X[var := x])) C = Cval\n  length xs = var\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0 \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n       (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var))\\<^sup>2 +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) B *\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n       0", "unfolding X_def"], ["proof (prove)\nusing this:\n  \\<forall>xa.\n     insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa])) A = Aval\n  \\<forall>xa.\n     insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa])) B = Bval\n  \\<forall>xa.\n     insertion (nth_default 0 ((xs @ x # \\<Gamma>)[var := xa])) C = Cval\n  length xs = var\n\ngoal (1 subgoal):\n 1. Aval = 0 \\<and> Bval = 0 \\<and> Cval = 0 \\<Longrightarrow>\n    \\<forall>x.\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) A *\n       (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var))\\<^sup>2 +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) B *\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) +\n       insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n       0", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       (\\<forall>a\\<in>set L.\n           aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n       (\\<forall>f\\<in>set F.\n           eval f ((xs @ x # \\<Gamma>)[var := x])) \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set L.\n            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n        (\\<forall>f\\<in>set F.\n            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set L. aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n      (\\<forall>f\\<in>set F. eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>length xs = var;\n   \\<exists>x.\n      eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x]);\n   eval (elimVar var L F (Eq p))\n    ((xs @ ?x2 # \\<Gamma>)[var := ?x2])\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x.\n                        (\\<forall>a\\<in>set L.\n                            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                        (\\<forall>f\\<in>set F.\n                            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n                    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length xs = var;\n   \\<exists>x.\n      eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x]);\n   eval (elimVar var L F (Eq p))\n    ((xs @ ?x2 # \\<Gamma>)[var := ?x2])\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x.\n                        (\\<forall>a\\<in>set L.\n                            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                        (\\<forall>f\\<in>set F.\n                            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n                    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "have right : \"(\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<Longrightarrow>\n               ((\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>))\\<or>(\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length xs = var;\n   \\<exists>x.\n      eval (elimVar var L F (Eq p)) ((xs @ x # \\<Gamma>)[var := x]);\n   eval (elimVar var L F (Eq p))\n    ((xs @ ?x2 # \\<Gamma>)[var := ?x2])\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x.\n                        (\\<forall>a\\<in>set L.\n                            aEval a ((xs @ x # \\<Gamma>)[var := x])) \\<and>\n                        (\\<forall>f\\<in>set F.\n                            eval f ((xs @ x # \\<Gamma>)[var := x]))) \\<or>\n                    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n    (\\<exists>x.\n        eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "by (smt UnE eval.simps(1) eval_list_conj hlength imageE list_update_length set_append set_map)"], ["proof (state)\nthis:\n  \\<exists>x.\n     eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n  (\\<exists>x.\n      eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "using right left"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n  (\\<exists>x.\n      eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n  \\<exists>x.\n     eval (list_conj (map fm.Atom L @ F))\n      (xs @ x # \\<Gamma>) \\<Longrightarrow>\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n    (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<or>\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \"simply states that the variable is free in the equality case of the elimVar function\""], ["", "lemma freeIn_elimVar_eq : \"freeIn var (elimVar var L F (Eq p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have h4 : \"var \\<notin> vars(4:: real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "using var_not_in_Const"], ["proof (prove)\nusing this:\n  ?var \\<notin> vars (Const ?x)\n\ngoal (1 subgoal):\n 1. var \\<notin> vars 4", "by (metis (full_types) isolate_var_one monom_numeral not_in_isovarspar numeral_One vars_monom_keys zero_neq_numeral)"], ["proof (state)\nthis:\n  var \\<notin> vars 4\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have hlinear: \"\\<forall>f\\<in>set(map (\\<lambda>a. Atom(linear_substitution var (-isolate_variable_sparse p var 0) (isolate_variable_sparse p var (Suc 0)) a)) L @\n        map (linear_substitution_fm var (-isolate_variable_sparse p var 0) (isolate_variable_sparse p var (Suc 0)))\n         F). freeIn var f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set (map (\\<lambda>a.\n                                fm.Atom\n                                 (linear_substitution var\n                                   (- isolate_variable_sparse p var 0)\n                                   (isolate_variable_sparse p var (Suc 0))\n                                   a))\n                         L @\n                        map (linear_substitution_fm var\n                              (- isolate_variable_sparse p var 0)\n                              (isolate_variable_sparse p var (Suc 0)))\n                         F).\n       freeIn var f", "using\n      var_not_in_linear[where c=\"(isolate_variable_sparse p var (Suc 0))\", where b=\"(- isolate_variable_sparse p var 0)\", where var=\"var\"]\n      var_not_in_linear_fm[where c=\"(isolate_variable_sparse p var (Suc 0))\", where b=\"(-isolate_variable_sparse p var 0)\", where var=\"var\"]\n      not_in_isovarspar not_in_neg"], ["proof (prove)\nusing this:\n  \\<lbrakk>var \\<notin> vars (- isolate_variable_sparse p var 0);\n   var \\<notin> vars (isolate_variable_sparse p var (Suc 0))\\<rbrakk>\n  \\<Longrightarrow> freeIn var\n                     (fm.Atom\n                       (linear_substitution var\n                         (- isolate_variable_sparse p var 0)\n                         (isolate_variable_sparse p var (Suc 0)) ?A))\n  \\<lbrakk>var \\<notin> vars (- isolate_variable_sparse p var 0);\n   var \\<notin> vars (isolate_variable_sparse p var (Suc 0))\\<rbrakk>\n  \\<Longrightarrow> freeIn var\n                     (linear_substitution_fm var\n                       (- isolate_variable_sparse p var 0)\n                       (isolate_variable_sparse p var (Suc 0)) ?F)\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set (map (\\<lambda>a.\n                                fm.Atom\n                                 (linear_substitution var\n                                   (- isolate_variable_sparse p var 0)\n                                   (isolate_variable_sparse p var (Suc 0))\n                                   a))\n                         L @\n                        map (linear_substitution_fm var\n                              (- isolate_variable_sparse p var 0)\n                              (isolate_variable_sparse p var (Suc 0)))\n                         F).\n       freeIn var f", "by auto"], ["proof (state)\nthis:\n  \\<forall>f\\<in>set (map (\\<lambda>a.\n                              fm.Atom\n                               (linear_substitution var\n                                 (- isolate_variable_sparse p var 0)\n                                 (isolate_variable_sparse p var (Suc 0)) a))\n                       L @\n                      map (linear_substitution_fm var\n                            (- isolate_variable_sparse p var 0)\n                            (isolate_variable_sparse p var (Suc 0)))\n                       F).\n     freeIn var f\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have freeA : \"var \\<notin> vars (- isolate_variable_sparse p var (Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (- isolate_variable_sparse p var (Suc 0))", "using not_in_isovarspar not_in_neg"], ["proof (prove)\nusing this:\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (- isolate_variable_sparse p var (Suc 0))", "by auto"], ["proof (state)\nthis:\n  var \\<notin> vars (- isolate_variable_sparse p var (Suc 0))\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have freeB1 : \"var \\<notin> vars (1::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars 1", "by (metis h4 monom_numeral monom_one notInKeys_notInVars vars_monom_keys zero_neq_numeral)"], ["proof (state)\nthis:\n  var \\<notin> vars 1\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have freeC : \"var \\<notin> vars (((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n                    4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var\n    \\<notin> vars\n              ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n               4 * isolate_variable_sparse p var 2 *\n               isolate_variable_sparse p var 0)", "using not_in_isovarspar not_in_pow not_in_sub not_in_mult h4"], ["proof (prove)\nusing this:\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  ?var \\<notin> vars ?p \\<Longrightarrow> ?var \\<notin> vars (?p ^ ?i)\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p - ?q)\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p * ?q)\n  var \\<notin> vars 4\n\ngoal (1 subgoal):\n 1. var\n    \\<notin> vars\n              ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n               4 * isolate_variable_sparse p var 2 *\n               isolate_variable_sparse p var 0)", "by auto"], ["proof (state)\nthis:\n  var\n  \\<notin> vars\n            ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n             4 * isolate_variable_sparse p var 2 *\n             isolate_variable_sparse p var 0)\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have freeD : \"var \\<notin> vars ((2 * isolate_variable_sparse p var 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (2 * isolate_variable_sparse p var 2)", "using not_in_isovarspar not_in_mult"], ["proof (prove)\nusing this:\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p * ?q)\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (2 * isolate_variable_sparse p var 2)", "by (metis mult_2 not_in_add)"], ["proof (state)\nthis:\n  var \\<notin> vars (2 * isolate_variable_sparse p var 2)\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have freeB2 : \"var\\<notin>vars (-1::real mpoly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (- 1)", "using freeB1 not_in_neg"], ["proof (prove)\nusing this:\n  var \\<notin> vars 1\n  (?var \\<notin> vars ?p) = (?var \\<notin> vars (- ?p))\n\ngoal (1 subgoal):\n 1. var \\<notin> vars (- 1)", "by auto"], ["proof (state)\nthis:\n  var \\<notin> vars (- 1)\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have quadratic1 : \"\\<forall>f\\<in>set(map (quadratic_sub var (- isolate_variable_sparse p var (Suc 0)) 1\n              ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n               4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0)\n              (2 * isolate_variable_sparse p var 2))\n         L @\n        map (quadratic_sub_fm var (- isolate_variable_sparse p var (Suc 0)) 1\n              ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n               4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0)\n              (2 * isolate_variable_sparse p var 2))\n         F). freeIn var f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set (map (quadratic_sub var\n                              (- isolate_variable_sparse p var (Suc 0)) 1\n                              ((isolate_variable_sparse p var\n                                 (Suc 0))\\<^sup>2 -\n                               4 * isolate_variable_sparse p var 2 *\n                               isolate_variable_sparse p var 0)\n                              (2 * isolate_variable_sparse p var 2))\n                         L @\n                        map (quadratic_sub_fm var\n                              (- isolate_variable_sparse p var (Suc 0)) 1\n                              ((isolate_variable_sparse p var\n                                 (Suc 0))\\<^sup>2 -\n                               4 * isolate_variable_sparse p var 2 *\n                               isolate_variable_sparse p var 0)\n                              (2 * isolate_variable_sparse p var 2))\n                         F).\n       freeIn var f", "using free_in_quad[OF freeA freeB1 freeC freeD]\n      free_in_quad_fm[OF freeA freeB1 freeC freeD]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- isolate_variable_sparse p var (Suc 0)) 1\n     ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n      4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0)\n     (2 * isolate_variable_sparse p var 2) ?A)\n  freeIn var\n   (quadratic_sub_fm var (- isolate_variable_sparse p var (Suc 0)) 1\n     ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n      4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0)\n     (2 * isolate_variable_sparse p var 2) ?A)\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set (map (quadratic_sub var\n                              (- isolate_variable_sparse p var (Suc 0)) 1\n                              ((isolate_variable_sparse p var\n                                 (Suc 0))\\<^sup>2 -\n                               4 * isolate_variable_sparse p var 2 *\n                               isolate_variable_sparse p var 0)\n                              (2 * isolate_variable_sparse p var 2))\n                         L @\n                        map (quadratic_sub_fm var\n                              (- isolate_variable_sparse p var (Suc 0)) 1\n                              ((isolate_variable_sparse p var\n                                 (Suc 0))\\<^sup>2 -\n                               4 * isolate_variable_sparse p var 2 *\n                               isolate_variable_sparse p var 0)\n                              (2 * isolate_variable_sparse p var 2))\n                         F).\n       freeIn var f", "by auto"], ["proof (state)\nthis:\n  \\<forall>f\\<in>set (map (quadratic_sub var\n                            (- isolate_variable_sparse p var (Suc 0)) 1\n                            ((isolate_variable_sparse p var\n                               (Suc 0))\\<^sup>2 -\n                             4 * isolate_variable_sparse p var 2 *\n                             isolate_variable_sparse p var 0)\n                            (2 * isolate_variable_sparse p var 2))\n                       L @\n                      map (quadratic_sub_fm var\n                            (- isolate_variable_sparse p var (Suc 0)) 1\n                            ((isolate_variable_sparse p var\n                               (Suc 0))\\<^sup>2 -\n                             4 * isolate_variable_sparse p var 2 *\n                             isolate_variable_sparse p var 0)\n                            (2 * isolate_variable_sparse p var 2))\n                       F).\n     freeIn var f\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "have quadratic2 : \"\\<forall>f\\<in>set(map (quadratic_sub var (- isolate_variable_sparse p var (Suc 0)) (-1)\n              ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n               4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0)\n              (2 * isolate_variable_sparse p var 2))\n         L @\n        map (quadratic_sub_fm var (- isolate_variable_sparse p var (Suc 0)) (-1)\n              ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n               4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0)\n              (2 * isolate_variable_sparse p var 2))\n         F). freeIn var f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set (map (quadratic_sub var\n                              (- isolate_variable_sparse p var (Suc 0))\n                              (- 1)\n                              ((isolate_variable_sparse p var\n                                 (Suc 0))\\<^sup>2 -\n                               4 * isolate_variable_sparse p var 2 *\n                               isolate_variable_sparse p var 0)\n                              (2 * isolate_variable_sparse p var 2))\n                         L @\n                        map (quadratic_sub_fm var\n                              (- isolate_variable_sparse p var (Suc 0))\n                              (- 1)\n                              ((isolate_variable_sparse p var\n                                 (Suc 0))\\<^sup>2 -\n                               4 * isolate_variable_sparse p var 2 *\n                               isolate_variable_sparse p var 0)\n                              (2 * isolate_variable_sparse p var 2))\n                         F).\n       freeIn var f", "using free_in_quad[OF freeA freeB2 freeC freeD]\n      free_in_quad_fm[OF freeA freeB2 freeC freeD]"], ["proof (prove)\nusing this:\n  freeIn var\n   (quadratic_sub var (- isolate_variable_sparse p var (Suc 0)) (- 1)\n     ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n      4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0)\n     (2 * isolate_variable_sparse p var 2) ?A)\n  freeIn var\n   (quadratic_sub_fm var (- isolate_variable_sparse p var (Suc 0)) (- 1)\n     ((isolate_variable_sparse p var (Suc 0))\\<^sup>2 -\n      4 * isolate_variable_sparse p var 2 * isolate_variable_sparse p var 0)\n     (2 * isolate_variable_sparse p var 2) ?A)\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set (map (quadratic_sub var\n                              (- isolate_variable_sparse p var (Suc 0))\n                              (- 1)\n                              ((isolate_variable_sparse p var\n                                 (Suc 0))\\<^sup>2 -\n                               4 * isolate_variable_sparse p var 2 *\n                               isolate_variable_sparse p var 0)\n                              (2 * isolate_variable_sparse p var 2))\n                         L @\n                        map (quadratic_sub_fm var\n                              (- isolate_variable_sparse p var (Suc 0))\n                              (- 1)\n                              ((isolate_variable_sparse p var\n                                 (Suc 0))\\<^sup>2 -\n                               4 * isolate_variable_sparse p var 2 *\n                               isolate_variable_sparse p var 0)\n                              (2 * isolate_variable_sparse p var 2))\n                         F).\n       freeIn var f", "by auto"], ["proof (state)\nthis:\n  \\<forall>f\\<in>set (map (quadratic_sub var\n                            (- isolate_variable_sparse p var (Suc 0)) (- 1)\n                            ((isolate_variable_sparse p var\n                               (Suc 0))\\<^sup>2 -\n                             4 * isolate_variable_sparse p var 2 *\n                             isolate_variable_sparse p var 0)\n                            (2 * isolate_variable_sparse p var 2))\n                       L @\n                      map (quadratic_sub_fm var\n                            (- isolate_variable_sparse p var (Suc 0)) (- 1)\n                            ((isolate_variable_sparse p var\n                               (Suc 0))\\<^sup>2 -\n                             4 * isolate_variable_sparse p var 2 *\n                             isolate_variable_sparse p var 0)\n                            (2 * isolate_variable_sparse p var 2))\n                       F).\n     freeIn var f\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "using not_in_mult not_in_add h4 not_in_pow not_in_sub freeIn_list_conj not_in_isovarspar hlinear quadratic1 quadratic2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p * ?q)\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p + ?q)\n  var \\<notin> vars 4\n  ?var \\<notin> vars ?p \\<Longrightarrow> ?var \\<notin> vars (?p ^ ?i)\n  \\<lbrakk>?var \\<notin> vars ?p; ?var \\<notin> vars ?q\\<rbrakk>\n  \\<Longrightarrow> ?var \\<notin> vars (?p - ?q)\n  \\<forall>f\\<in>set ?F. freeIn ?var f \\<Longrightarrow>\n  freeIn ?var (list_conj ?F)\n  isolate_variable_sparse ?p ?var ?x = ?q \\<Longrightarrow>\n  ?var \\<notin> vars ?q\n  \\<forall>f\\<in>set (map (\\<lambda>a.\n                              fm.Atom\n                               (linear_substitution var\n                                 (- isolate_variable_sparse p var 0)\n                                 (isolate_variable_sparse p var (Suc 0)) a))\n                       L @\n                      map (linear_substitution_fm var\n                            (- isolate_variable_sparse p var 0)\n                            (isolate_variable_sparse p var (Suc 0)))\n                       F).\n     freeIn var f\n  \\<forall>f\\<in>set (map (quadratic_sub var\n                            (- isolate_variable_sparse p var (Suc 0)) 1\n                            ((isolate_variable_sparse p var\n                               (Suc 0))\\<^sup>2 -\n                             4 * isolate_variable_sparse p var 2 *\n                             isolate_variable_sparse p var 0)\n                            (2 * isolate_variable_sparse p var 2))\n                       L @\n                      map (quadratic_sub_fm var\n                            (- isolate_variable_sparse p var (Suc 0)) 1\n                            ((isolate_variable_sparse p var\n                               (Suc 0))\\<^sup>2 -\n                             4 * isolate_variable_sparse p var 2 *\n                             isolate_variable_sparse p var 0)\n                            (2 * isolate_variable_sparse p var 2))\n                       F).\n     freeIn var f\n  \\<forall>f\\<in>set (map (quadratic_sub var\n                            (- isolate_variable_sparse p var (Suc 0)) (- 1)\n                            ((isolate_variable_sparse p var\n                               (Suc 0))\\<^sup>2 -\n                             4 * isolate_variable_sparse p var 2 *\n                             isolate_variable_sparse p var 0)\n                            (2 * isolate_variable_sparse p var 2))\n                       L @\n                      map (quadratic_sub_fm var\n                            (- isolate_variable_sparse p var (Suc 0)) (- 1)\n                            ((isolate_variable_sparse p var\n                               (Suc 0))\\<^sup>2 -\n                             4 * isolate_variable_sparse p var 2 *\n                             isolate_variable_sparse p var 0)\n                            (2 * isolate_variable_sparse p var 2))\n                       F).\n     freeIn var f\n\ngoal (1 subgoal):\n 1. freeIn var (elimVar var L F (Eq p))", "by(simp add: )"], ["proof (state)\nthis:\n  freeIn var (elimVar var L F (Eq p))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \"Theorem 20.2 in the textbook\""], ["", "lemma elimVar_eq_2 :\n  assumes hlength : \"length xs = var\"\n  assumes in_list : \"Eq p \\<in> set(L)\"\n  assumes low_pow : \"MPoly_Type.degree p var = 1 \\<or> MPoly_Type.degree p var = 2\"\n  assumes nonzero : \"\\<forall>x. \n              insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 2) \\<noteq> 0\n            \\<or> insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 1) \\<noteq> 0\n            \\<or> insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 0) \\<noteq> 0\" (is ?non0)\n  shows \"(\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n         (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "define A where \"A = (isolate_variable_sparse p var 2)\""], ["proof (state)\nthis:\n  A = isolate_variable_sparse p var 2\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "define B where \"B = (isolate_variable_sparse p var 1)\""], ["proof (state)\nthis:\n  B = isolate_variable_sparse p var 1\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "define C where \"C = (isolate_variable_sparse p var 0)\""], ["proof (state)\nthis:\n  C = isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have freeA : \"var \\<notin> vars A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars A", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 2)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars A\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have freeB : \"var \\<notin> vars B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars B", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 1)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars B\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have freeC : \"var \\<notin> vars C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars C", "unfolding C_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 0)", "by (simp add: not_in_isovarspar)"], ["proof (state)\nthis:\n  var \\<notin> vars C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have express_p : \"p = A*(Var var)^2+B*(Var var)+C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = A * (Var var)\\<^sup>2 + B * Var var + C", "using express_poly[OF low_pow]"], ["proof (prove)\nusing this:\n  p =\n  isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n  isolate_variable_sparse p var 1 * Var var +\n  isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. p = A * (Var var)\\<^sup>2 + B * Var var + C", "unfolding A_def B_def C_def"], ["proof (prove)\nusing this:\n  p =\n  isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n  isolate_variable_sparse p var 1 * Var var +\n  isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. p =\n    isolate_variable_sparse p var 2 * (Var var)\\<^sup>2 +\n    isolate_variable_sparse p var 1 * Var var +\n    isolate_variable_sparse p var 0", "by fastforce"], ["proof (state)\nthis:\n  p = A * (Var var)\\<^sup>2 + B * Var var + C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have af : \"isolate_variable_sparse p var 2 = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isolate_variable_sparse p var 2 = A", "using A_def"], ["proof (prove)\nusing this:\n  A = isolate_variable_sparse p var 2\n\ngoal (1 subgoal):\n 1. isolate_variable_sparse p var 2 = A", "by auto"], ["proof (state)\nthis:\n  isolate_variable_sparse p var 2 = A\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have bf : \"isolate_variable_sparse p var (Suc 0) = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isolate_variable_sparse p var (Suc 0) = B", "using B_def"], ["proof (prove)\nusing this:\n  B = isolate_variable_sparse p var 1\n\ngoal (1 subgoal):\n 1. isolate_variable_sparse p var (Suc 0) = B", "by auto"], ["proof (state)\nthis:\n  isolate_variable_sparse p var (Suc 0) = B\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have cf : \"isolate_variable_sparse p var 0 = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isolate_variable_sparse p var 0 = C", "using C_def"], ["proof (prove)\nusing this:\n  C = isolate_variable_sparse p var 0\n\ngoal (1 subgoal):\n 1. isolate_variable_sparse p var 0 = C", "by auto"], ["proof (state)\nthis:\n  isolate_variable_sparse p var 0 = C\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have xlength : \"\\<forall>x. (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var))= x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) = x", "using hlength insertion_var"], ["proof (prove)\nusing this:\n  length xs = var\n  ?var < length ?L \\<Longrightarrow>\n  insertion (nth_default (0::?'a) (?L[?var := ?x])) (Var ?var) = ?x\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) = x", "by (metis add.commute add_strict_increasing length_append length_greater_0_conv list.distinct(1) list_update_id nth_append_length order_refl)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) (Var var) = x\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "define c where \"c i = (insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var i))\" for i"], ["proof (state)\nthis:\n  c ?i =\n  insertion (nth_default 0 (xs @ x # \\<Gamma>))\n   (isolate_variable_sparse p var ?i)\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have c2 : \"\\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = c 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = c 2", "using freeA"], ["proof (prove)\nusing this:\n  var \\<notin> vars A\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = c 2", "apply(simp add: A_def c_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 2) \\<Longrightarrow>\n    \\<forall>xa.\n       insertion (nth_default 0 (xs @ xa # \\<Gamma>))\n        (isolate_variable_sparse p var 2) =\n       insertion (nth_default 0 (xs @ x # \\<Gamma>))\n        (isolate_variable_sparse p var 2)", "by (simp add: hlength insertion_lowerPoly1)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = c 2\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have c1 : \"\\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = c 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = c 1", "using freeB"], ["proof (prove)\nusing this:\n  var \\<notin> vars B\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = c 1", "apply(simp add: B_def c_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. var\n    \\<notin> vars (isolate_variable_sparse p var (Suc 0)) \\<Longrightarrow>\n    \\<forall>xa.\n       insertion (nth_default 0 (xs @ xa # \\<Gamma>))\n        (isolate_variable_sparse p var (Suc 0)) =\n       insertion (nth_default 0 (xs @ x # \\<Gamma>))\n        (isolate_variable_sparse p var (Suc 0))", "by (simp add: hlength insertion_lowerPoly1)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = c 1\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have c0 : \"\\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = c 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = c 0", "using freeC"], ["proof (prove)\nusing this:\n  var \\<notin> vars C\n\ngoal (1 subgoal):\n 1. \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = c 0", "apply(simp add: C_def c_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> vars (isolate_variable_sparse p var 0) \\<Longrightarrow>\n    \\<forall>xa.\n       insertion (nth_default 0 (xs @ xa # \\<Gamma>))\n        (isolate_variable_sparse p var 0) =\n       insertion (nth_default 0 (xs @ x # \\<Gamma>))\n        (isolate_variable_sparse p var 0)", "by (simp add: hlength insertion_lowerPoly1)"], ["proof (state)\nthis:\n  \\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = c 0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have sum : \"\\<forall>x. c 2 * x\\<^sup>2 + c (Suc 0) * x + c 0 = (\\<Sum>i\\<le>2. c i * x ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       c 2 * x\\<^sup>2 + c (Suc 0) * x + c 0 = (\\<Sum>i\\<le>2. c i * x ^ i)", "by (simp add: numerals(2))"], ["proof (state)\nthis:\n  \\<forall>x.\n     c 2 * x\\<^sup>2 + c (Suc 0) * x + c 0 = (\\<Sum>i\\<le>2. c i * x ^ i)\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "have \"(\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)) = (\\<not>?non0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)) =\n    (\\<not> (\\<forall>x.\n                insertion (nth_default 0 (xs @ x # \\<Gamma>))\n                 (isolate_variable_sparse p var 2) \\<noteq>\n                0 \\<or>\n                insertion (nth_default 0 (xs @ x # \\<Gamma>))\n                 (isolate_variable_sparse p var 1) \\<noteq>\n                0 \\<or>\n                insertion (nth_default 0 (xs @ x # \\<Gamma>))\n                 (isolate_variable_sparse p var 0) \\<noteq>\n                0))", "apply(simp add : af bf cf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) p = 0) =\n    (\\<exists>x.\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = 0)", "unfolding express_p"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        insertion (nth_default 0 (xs @ x # \\<Gamma>))\n         (A * (Var var)\\<^sup>2 + B * Var var + C) =\n        0) =\n    (\\<exists>x.\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = 0)", "apply(simp add:insertion_add insertion_mult insertion_pow xlength)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A * x\\<^sup>2 +\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) B * x +\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) C =\n        0) =\n    (\\<exists>x.\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) B = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) A = 0 \\<and>\n        insertion (nth_default 0 (xs @ x # \\<Gamma>)) C = 0)", "apply(simp add:c2 c1 c0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. c 2 * x\\<^sup>2 + c (Suc 0) * x + c 0 = 0) =\n    (c (Suc 0) = 0 \\<and> c 2 = 0 \\<and> c 0 = 0)", "apply(simp add: sum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. (\\<Sum>i\\<le>2. c i * x ^ i) = 0) =\n    (c (Suc 0) = 0 \\<and> c 2 = 0 \\<and> c 0 = 0)", "using polyfun_eq_0[where c=\"c\", where n=\"2\"]"], ["proof (prove)\nusing this:\n  (\\<forall>x. (\\<Sum>i\\<le>2. c i * x ^ i) = 0) =\n  (\\<forall>i\\<le>2. c i = 0)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. (\\<Sum>i\\<le>2. c i * x ^ i) = 0) =\n    (c (Suc 0) = 0 \\<and> c 2 = 0 \\<and> c 0 = 0)", "using sum"], ["proof (prove)\nusing this:\n  (\\<forall>x. (\\<Sum>i\\<le>2. c i * x ^ i) = 0) =\n  (\\<forall>i\\<le>2. c i = 0)\n  \\<forall>x.\n     c 2 * x\\<^sup>2 + c (Suc 0) * x + c 0 = (\\<Sum>i\\<le>2. c i * x ^ i)\n\ngoal (1 subgoal):\n 1. (\\<forall>x. (\\<Sum>i\\<le>2. c i * x ^ i) = 0) =\n    (c (Suc 0) = 0 \\<and> c 2 = 0 \\<and> c 0 = 0)", "by auto"], ["proof (state)\nthis:\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)) =\n  (\\<not> (\\<forall>x.\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 2) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 1) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 0) \\<noteq>\n              0))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)) =\n  (\\<not> (\\<forall>x.\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 2) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 1) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 0) \\<noteq>\n              0))", "have \"\\<not>(\\<forall>x. aEval (Eq p) (xs @ x \\<Gamma>))\""], ["proof (prove)\nusing this:\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)) =\n  (\\<not> (\\<forall>x.\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 2) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 1) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 0) \\<noteq>\n              0))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x. aEval (Eq p) (xs @ x \\<Gamma>))", "using nonzero"], ["proof (prove)\nusing this:\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)) =\n  (\\<not> (\\<forall>x.\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 2) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 1) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 0) \\<noteq>\n              0))\n  \\<forall>x.\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 2) \\<noteq>\n     0 \\<or>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 1) \\<noteq>\n     0 \\<or>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 0) \\<noteq>\n     0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x. aEval (Eq p) (xs @ x \\<Gamma>))", "by auto"], ["proof (state)\nthis:\n  \\<not> (\\<forall>x. aEval (Eq p) (xs @ x \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>x. aEval (Eq p) (xs @ x \\<Gamma>))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>x. aEval (Eq p) (xs @ x \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "using disjE[OF elimVar_eq[OF hlength in_list, where F=\"F\", where \\<Gamma>=\"\\<Gamma>\"], where R=\"?thesis\"]"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>x. aEval (Eq p) (xs @ x \\<Gamma>))\n  \\<lbrakk>MPoly_Type.degree p var = 1 \\<or> MPoly_Type.degree p var = 2;\n   (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n   (\\<exists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<Longrightarrow>\n   (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n   (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>));\n   \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n   (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n   (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x.\n                        eval (list_conj (map fm.Atom L @ F))\n                         (xs @ x # \\<Gamma>)) =\n                    (\\<exists>x.\n                        eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "using \\<open>(\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)) = (\\<not> (\\<forall>x. insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 2) \\<noteq> 0 \\<or> insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 1) \\<noteq> 0 \\<or> insertion (nth_default 0 (xs @ x # \\<Gamma>)) (isolate_variable_sparse p var 0) \\<noteq> 0))\\<close> low_pow nonzero"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>x. aEval (Eq p) (xs @ x \\<Gamma>))\n  \\<lbrakk>MPoly_Type.degree p var = 1 \\<or> MPoly_Type.degree p var = 2;\n   (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n   (\\<exists>x.\n       eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>)) \\<Longrightarrow>\n   (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n   (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>));\n   \\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>) \\<Longrightarrow>\n   (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n   (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x.\n                        eval (list_conj (map fm.Atom L @ F))\n                         (xs @ x # \\<Gamma>)) =\n                    (\\<exists>x.\n                        eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\n  (\\<forall>x. aEval (Eq p) (xs @ x # \\<Gamma>)) =\n  (\\<not> (\\<forall>x.\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 2) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 1) \\<noteq>\n              0 \\<or>\n              insertion (nth_default 0 (xs @ x # \\<Gamma>))\n               (isolate_variable_sparse p var 0) \\<noteq>\n              0))\n  MPoly_Type.degree p var = 1 \\<or> MPoly_Type.degree p var = 2\n  \\<forall>x.\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 2) \\<noteq>\n     0 \\<or>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 1) \\<noteq>\n     0 \\<or>\n     insertion (nth_default 0 (xs @ x # \\<Gamma>))\n      (isolate_variable_sparse p var 0) \\<noteq>\n     0\n\ngoal (1 subgoal):\n 1. (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n    (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \\<Gamma>)) =\n  (\\<exists>x. eval (elimVar var L F (Eq p)) (xs @ x # \\<Gamma>))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}