{"file_name": "/home/qj213/afp-2021-10-22/thys/Density_Compiler/PDF_Target_Density_Contexts.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Density_Compiler", "problem_names": ["lemma set_shift_vars[simp]: \"set (shift_vars vs) = shift_var_set (set vs)\"", "lemma is_density_exprI:\n  \"case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL \\<Longrightarrow>\n    free_vars e \\<subseteq> shift_var_set (set vs') \\<Longrightarrow>\n    nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e \\<Longrightarrow>\n    is_density_expr (vs, vs', \\<Gamma>, \\<delta>) t e\"", "lemma is_density_exprD:\n  assumes \"is_density_expr (vs, vs', \\<Gamma>, \\<delta>) t e\"\n  shows \"case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL\" \"free_vars e \\<subseteq> shift_var_set (set vs')\"\n    and is_density_exprD_nonneg: \"nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e\"", "lemma density_context_\\<alpha>:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  shows \"density_context (set vs) (set vs') \\<Gamma> (\\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>))\"", "lemma free_vars_marg_dens_cexpr:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  shows \"free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>) \\<subseteq> shift_var_set (set vs')\"", "lemma cexpr_typing_marg_dens_cexpr[intro]:\n  \"\\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL \\<Longrightarrow> case_nat (\\<Gamma> x) \\<Gamma> \\<turnstile>\\<^sub>c marg_dens_cexpr \\<Gamma> vs x \\<delta> : REAL\"", "lemma cexpr_sem_marg_dens:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes x: \"x \\<in> set vs\" and \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  shows \"AE v in stock_measure (\\<Gamma> x).\n           ennreal (extract_real (cexpr_sem (case_nat v \\<rho>) (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n               marg_dens (dens_ctxt_\\<alpha> (vs,vs',\\<Gamma>,\\<delta>)) x \\<rho> v\"", "lemma nonneg_cexpr_sem_marg_dens:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes x: \"x \\<in> set vs\" and \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  assumes v: \"v \\<in> type_universe (\\<Gamma> x)\"\n  shows \"extract_real (cexpr_sem (case_nat v \\<rho>) (marg_dens_cexpr \\<Gamma> vs x \\<delta>)) \\<ge> 0\"", "lemma free_vars_marg_dens2_cexpr:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  shows \"free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>) \\<subseteq> shift_var_set (set vs')\"", "lemma cexpr_typing_marg_dens2_cexpr[intro]:\n  assumes \"\\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\"\n  shows \"case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma> \\<turnstile>\\<^sub>c marg_dens2_cexpr \\<Gamma> vs x y \\<delta> : REAL\"", "lemma cexpr_sem_marg_dens2:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes x: \"x \\<in> set vs\" and y: \"y \\<in> set vs\" and \"x \\<noteq> y\"\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  shows \"AE z in stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)).\n           ennreal (extract_real (cexpr_sem (case_nat z \\<rho>) (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n               marg_dens2 (dens_ctxt_\\<alpha> (vs,vs',\\<Gamma>,\\<delta>)) x y \\<rho> z\"", "lemma nonneg_cexpr_sem_marg_dens2:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes x: \"x \\<in> set vs\" and y: \"y \\<in> set vs\" and \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  assumes v: \"v \\<in> type_universe (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\"\n  shows \"extract_real (cexpr_sem (case_nat v \\<rho>) (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)) \\<ge> 0\"", "lemma free_vars_branch_prob_cexpr[simp]:\n    \"free_vars (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)) = free_vars \\<delta> - set vs\"", "lemma cexpr_typing_branch_prob_cexpr[intro]:\n  \"\\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL \\<Longrightarrow> \\<Gamma> \\<turnstile>\\<^sub>c branch_prob_cexpr (vs,vs',\\<Gamma>,\\<delta>) : REAL\"", "lemma cexpr_sem_branch_prob:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  shows \"ennreal (extract_real (cexpr_sem \\<rho> (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n             branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>\"", "lemma subprob_imp_subprob_cexpr:\n  assumes \"density_context V V' \\<Gamma> (\\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>))\"\n  shows \"subprob_cexpr V V' \\<Gamma> \\<delta>\""], "translations": [["", "lemma set_shift_vars[simp]: \"set (shift_vars vs) = shift_var_set (set vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (shift_vars vs) = shift_var_set (set vs)", "unfolding shift_vars_def shift_var_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (0 # map Suc vs) = insert 0 (Suc ` set vs)", "by simp"], ["", "definition is_density_expr :: \"cdens_ctxt \\<Rightarrow> pdf_type \\<Rightarrow> cexpr \\<Rightarrow> bool\" where\n  \"is_density_expr \\<equiv> \\<lambda>(vs,vs',\\<Gamma>,\\<delta>) t e.\n    case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL \\<and>\n    free_vars e \\<subseteq> shift_var_set (set vs') \\<and>\n    nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e\""], ["", "lemma is_density_exprI:\n  \"case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL \\<Longrightarrow>\n    free_vars e \\<subseteq> shift_var_set (set vs') \\<Longrightarrow>\n    nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e \\<Longrightarrow>\n    is_density_expr (vs, vs', \\<Gamma>, \\<delta>) t e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL;\n     free_vars e \\<subseteq> shift_var_set (set vs');\n     nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e\\<rbrakk>\n    \\<Longrightarrow> is_density_expr (vs, vs', \\<Gamma>, \\<delta>) t e", "unfolding is_density_expr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL;\n     free_vars e \\<subseteq> shift_var_set (set vs');\n     nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e\\<rbrakk>\n    \\<Longrightarrow> (case (vs, vs', \\<Gamma>, \\<delta>) of\n                       (vs, vs', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                         \\<lambda>t e.\n                            case_nat t \\<Gamma> \\<turnstile>\\<^sub>c\n                             e : REAL \\<and>\n                            free_vars e\n                            \\<subseteq> shift_var_set (set vs') \\<and>\n                            nonneg_cexpr (shift_var_set (set vs'))\n                             (case_nat t \\<Gamma>) e)\n                       t e", "by simp"], ["", "lemma is_density_exprD:\n  assumes \"is_density_expr (vs, vs', \\<Gamma>, \\<delta>) t e\"\n  shows \"case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL\" \"free_vars e \\<subseteq> shift_var_set (set vs')\"\n    and is_density_exprD_nonneg: \"nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL &&&\n     free_vars e \\<subseteq> shift_var_set (set vs')) &&&\n    nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e", "using assms"], ["proof (prove)\nusing this:\n  is_density_expr (vs, vs', \\<Gamma>, \\<delta>) t e\n\ngoal (1 subgoal):\n 1. (case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL &&&\n     free_vars e \\<subseteq> shift_var_set (set vs')) &&&\n    nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e", "unfolding is_density_expr_def"], ["proof (prove)\nusing this:\n  (case (vs, vs', \\<Gamma>, \\<delta>) of\n   (vs, vs', \\<Gamma>, \\<delta>) \\<Rightarrow>\n     \\<lambda>t e.\n        case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL \\<and>\n        free_vars e \\<subseteq> shift_var_set (set vs') \\<and>\n        nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e)\n   t e\n\ngoal (1 subgoal):\n 1. (case_nat t \\<Gamma> \\<turnstile>\\<^sub>c e : REAL &&&\n     free_vars e \\<subseteq> shift_var_set (set vs')) &&&\n    nonneg_cexpr (shift_var_set (set vs')) (case_nat t \\<Gamma>) e", "by simp_all"], ["", "lemma density_context_\\<alpha>:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  shows \"density_context (set vs) (set vs') \\<Gamma> (\\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context (set vs) (set vs') \\<Gamma>\n     (\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))", "proof (unfold density_context_def, intro allI ballI conjI impI subprob_spaceI)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. (\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n    \\<in> borel_measurable\n           (state_measure (set vs \\<union> set vs') \\<Gamma>)\n 6. set vs \\<inter> set vs' = {}", "show \"(\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<in> borel_measurable (state_measure (set vs \\<union> set vs') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n    \\<in> borel_measurable\n           (state_measure (set vs \\<union> set vs') \\<Gamma>)", "apply (intro measurable_compose[OF _ measurable_ennreal] measurable_compose[OF _ measurable_extract_real])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. cexpr_sem x \\<delta>)\n    \\<in> state_measure (set vs \\<union> set vs')\n           \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure REAL", "apply (insert cdens_ctxt_invarD[OF assms], auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n  \\<in> borel_measurable (state_measure (set vs \\<union> set vs') \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "note [measurable] = this"], ["proof (state)\nthis:\n  (\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n  \\<in> borel_measurable (state_measure (set vs \\<union> set vs') \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "fix \\<rho>"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "assume \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\""], ["proof (state)\nthis:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "let ?M = \"dens_ctxt_measure (set vs, set vs', \\<Gamma>, \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>))) \\<rho>\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)", "have \"(\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                    \\<in> measurable (state_measure (set vs) \\<Gamma>) (state_measure (set vs \\<union> set vs') \\<Gamma>)\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n    \\<in> state_measure (set vs) \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (set vs \\<union> set vs') \\<Gamma>", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  \\<rho>\n  \\<in> space\n         (Pi\\<^sub>M (set vs') (\\<lambda>x. stock_measure (\\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n    \\<in> Pi\\<^sub>M (set vs)\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (set vs \\<union> set vs')\n           (\\<lambda>x. stock_measure (\\<Gamma> x))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n  \\<in> state_measure (set vs) \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (set vs \\<union> set vs') \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "hence \"emeasure ?M (space ?M) =\n             \\<integral>\\<^sup>+x. ennreal (extract_real (cexpr_sem (merge (set vs) (set vs') (x, \\<rho>)) \\<delta>))\n                \\<partial>state_measure (set vs) \\<Gamma>\" (is \"_ = ?I\")"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n  \\<in> state_measure (set vs) \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (set vs \\<union> set vs') \\<Gamma>\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure\n       (set vs, set vs', \\<Gamma>,\n        \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (set vs, set vs', \\<Gamma>,\n          \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma>", "using \\<rho>"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n  \\<in> state_measure (set vs) \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (set vs \\<union> set vs') \\<Gamma>\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure\n       (set vs, set vs', \\<Gamma>,\n        \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (set vs, set vs', \\<Gamma>,\n          \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma>", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n  \\<in> state_measure (set vs) \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (set vs \\<union> set vs') \\<Gamma>\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     ((case (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>))) of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     (space\n       ((case (set vs, set vs', \\<Gamma>,\n               \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>))) of\n         (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n           \\<lambda>\\<rho>.\n              density\n               (distr (state_measure V \\<Gamma>)\n                 (state_measure (V \\<union> V') \\<Gamma>)\n                 (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n               \\<delta>)\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma>", "by (simp add: emeasure_density nn_integral_distr, intro nn_integral_cong)\n       (simp_all split: split_indicator add: merge_in_state_measure)"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure\n     (set vs, set vs', \\<Gamma>,\n      \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (set vs, set vs', \\<Gamma>,\n        \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n       \\<rho>)) =\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (x, \\<rho>))\n                              \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "also"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure\n     (set vs, set vs', \\<Gamma>,\n      \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (set vs, set vs', \\<Gamma>,\n        \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n       \\<rho>)) =\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (x, \\<rho>))\n                              \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "from cdens_ctxt_invarD[OF assms]"], ["proof (chain)\npicking this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>", "have \"subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\""], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>", "by simp"], ["proof (state)\nthis:\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "with \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>", "have \"?I \\<le> 1\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma>\n    \\<le> 1", "unfolding subprob_cexpr_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  \\<forall>\\<rho>\\<in>space (state_measure (set vs') \\<Gamma>).\n     \\<integral>\\<^sup>+ x. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge (set vs) (set vs') (x, \\<rho>))\n                                 \\<delta>))\n                        \\<partial>state_measure (set vs) \\<Gamma>\n     \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma>\n    \\<le> 1", "by blast"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (x, \\<rho>))\n                              \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma>\n  \\<le> 1\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>)\n        (space\n          (dens_ctxt_measure\n            (set vs, set vs', \\<Gamma>,\n             \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 3. finite (set vs)\n 4. finite (set vs')\n 5. set vs \\<inter> set vs' = {}", "finally"], ["proof (chain)\npicking this:\n  emeasure\n   (dens_ctxt_measure\n     (set vs, set vs', \\<Gamma>,\n      \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (set vs, set vs', \\<Gamma>,\n        \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n       \\<rho>))\n  \\<le> 1", "show \"emeasure ?M (space ?M) \\<le> 1\""], ["proof (prove)\nusing this:\n  emeasure\n   (dens_ctxt_measure\n     (set vs, set vs', \\<Gamma>,\n      \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (set vs, set vs', \\<Gamma>,\n        \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n       \\<rho>))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure\n       (set vs, set vs', \\<Gamma>,\n        \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (set vs, set vs', \\<Gamma>,\n          \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n         \\<rho>))\n    \\<le> 1", "."], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure\n     (set vs, set vs', \\<Gamma>,\n      \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (set vs, set vs', \\<Gamma>,\n        \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n       \\<rho>))\n  \\<le> 1\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space (state_measure (set vs') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure\n          (set vs, set vs', \\<Gamma>,\n           \\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))\n          \\<rho>) \\<noteq>\n       {}\n 2. finite (set vs)\n 3. finite (set vs')\n 4. set vs \\<inter> set vs' = {}", "qed (insert cdens_ctxt_invarD[OF assms], simp_all add: nonneg_cexpr_def)"], ["", "subsection \\<open>Expressions for density context operations\\<close>"], ["", "definition marg_dens_cexpr :: \"tyenv \\<Rightarrow> vname list \\<Rightarrow> vname \\<Rightarrow> cexpr \\<Rightarrow> cexpr\" where\n  \"marg_dens_cexpr \\<Gamma> vs x e =\n      map_vars (\\<lambda>y. if y = x then 0 else Suc y) (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs) e)\""], ["", "lemma free_vars_marg_dens_cexpr:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  shows \"free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>) \\<subseteq> shift_var_set (set vs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "have \"free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>) \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n    \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)", "unfolding marg_dens_cexpr_def shift_var_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars\n     (map_vars (\\<lambda>y. if y = x then 0 else Suc y)\n       (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n         \\<delta>))\n    \\<subseteq> insert 0 (Suc ` (free_vars \\<delta> - set vs))", "by auto"], ["proof (state)\nthis:\n  free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n  \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)\n\ngoal (1 subgoal):\n 1. free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "also"], ["proof (state)\nthis:\n  free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n  \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)\n\ngoal (1 subgoal):\n 1. free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "from cdens_ctxt_invarD[OF assms]"], ["proof (chain)\npicking this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>", "have \"... \\<subseteq> shift_var_set (set vs')\""], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. shift_var_set (free_vars \\<delta> - set vs)\n    \\<subseteq> shift_var_set (set vs')", "unfolding shift_var_set_def"], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. insert 0 (Suc ` (free_vars \\<delta> - set vs))\n    \\<subseteq> insert 0 (Suc ` set vs')", "by auto"], ["proof (state)\nthis:\n  shift_var_set (free_vars \\<delta> - set vs)\n  \\<subseteq> shift_var_set (set vs')\n\ngoal (1 subgoal):\n 1. free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "finally"], ["proof (chain)\npicking this:\n  free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n  \\<subseteq> shift_var_set (set vs')", "show ?thesis"], ["proof (prove)\nusing this:\n  free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n  \\<subseteq> shift_var_set (set vs')\n\ngoal (1 subgoal):\n 1. free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "."], ["proof (state)\nthis:\n  free_vars (marg_dens_cexpr \\<Gamma> vs x \\<delta>)\n  \\<subseteq> shift_var_set (set vs')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cexpr_typing_marg_dens_cexpr[intro]:\n  \"\\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL \\<Longrightarrow> case_nat (\\<Gamma> x) \\<Gamma> \\<turnstile>\\<^sub>c marg_dens_cexpr \\<Gamma> vs x \\<delta> : REAL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL \\<Longrightarrow>\n    case_nat (\\<Gamma> x) \\<Gamma> \\<turnstile>\\<^sub>c\n     marg_dens_cexpr \\<Gamma> vs x \\<delta> : REAL", "unfolding marg_dens_cexpr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL \\<Longrightarrow>\n    case_nat (\\<Gamma> x) \\<Gamma> \\<turnstile>\\<^sub>c\n     map_vars (\\<lambda>y. if y = x then 0 else Suc y)\n      (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n        \\<delta>) :\n     REAL", "by (rule cexpr_typing_map_vars, rule cexpr_typing_cong', erule cexpr_typing_integrate_vars) simp"], ["", "lemma cexpr_sem_marg_dens:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes x: \"x \\<in> set vs\" and \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  shows \"AE v in stock_measure (\\<Gamma> x).\n           ennreal (extract_real (cexpr_sem (case_nat v \\<rho>) (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n               marg_dens (dens_ctxt_\\<alpha> (vs,vs',\\<Gamma>,\\<delta>)) x \\<rho> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "note invar = cdens_ctxt_invarD[OF assms(1)]"], ["proof (state)\nthis:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "let ?vs = \"filter (\\<lambda>y. y \\<noteq> x) vs\""], ["proof (state)\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "note cdens_ctxt_invar_imp_integrable[OF assms(1) \\<rho>]"], ["proof (state)\nthis:\n  integrable (state_measure (set vs) \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "moreover"], ["proof (state)\nthis:\n  integrable (state_measure (set vs) \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "from x"], ["proof (chain)\npicking this:\n  x \\<in> set vs", "have insert_eq: \"insert x {xa \\<in> set vs. xa \\<noteq> x} = set vs\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n\ngoal (1 subgoal):\n 1. insert x {xa \\<in> set vs. xa \\<noteq> x} = set vs", "by auto"], ["proof (state)\nthis:\n  insert x {xa \\<in> set vs. xa \\<noteq> x} = set vs\n\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "ultimately"], ["proof (chain)\npicking this:\n  integrable (state_measure (set vs) \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n  insert x {xa \\<in> set vs. xa \\<noteq> x} = set vs", "have integrable:\n    \"AE v in stock_measure (\\<Gamma> x).\n          integrable (state_measure (set ?vs) \\<Gamma>)\n              (\\<lambda>\\<sigma>. extract_real (cexpr_sem (merge (set ?vs) (insert x (set vs')) (\\<sigma>, \\<rho>(x := v))) \\<delta>))\""], ["proof (prove)\nusing this:\n  integrable (state_measure (set vs) \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n  insert x {xa \\<in> set vs. xa \\<noteq> x} = set vs\n\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). integrable\n                    (state_measure\n                      (set (filter (\\<lambda>y. y \\<noteq> x) vs)) \\<Gamma>)\n                    (\\<lambda>\\<sigma>.\n                        extract_real\n                         (cexpr_sem\n                           (merge\n                             (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                             (insert x (set vs'))\n                             (\\<sigma>, \\<rho>(x := v)))\n                           \\<delta>))", "using invar x \\<rho>"], ["proof (prove)\nusing this:\n  integrable (state_measure (set vs) \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n  insert x {xa \\<in> set vs. xa \\<noteq> x} = set vs\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n  x \\<in> set vs\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). integrable\n                    (state_measure\n                      (set (filter (\\<lambda>y. y \\<noteq> x) vs)) \\<Gamma>)\n                    (\\<lambda>\\<sigma>.\n                        extract_real\n                         (cexpr_sem\n                           (merge\n                             (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                             (insert x (set vs'))\n                             (\\<sigma>, \\<rho>(x := v)))\n                           \\<delta>))", "by (intro integrable_cexpr_projection) auto"], ["proof (state)\nthis:\n  AE v in stock_measure\n           (\\<Gamma>\n             x). integrable\n                  (state_measure\n                    (set (filter (\\<lambda>y. y \\<noteq> x) vs)) \\<Gamma>)\n                  (\\<lambda>\\<sigma>.\n                      extract_real\n                       (cexpr_sem\n                         (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                           (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                         \\<delta>))\n\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE v in stock_measure\n             (\\<Gamma>\n               x). ennreal\n                    (extract_real\n                      (cexpr_sem (case_nat v \\<rho>)\n                        (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                   marg_dens\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                    \\<rho> v", "proof (rule AE_mp[OF integrable], rule AE_I2, intro impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "assume v: \"v \\<in> space (stock_measure (\\<Gamma> x))\""], ["proof (state)\nthis:\n  v \\<in> space (stock_measure (\\<Gamma> x))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "assume integrable:\n      \"integrable (state_measure (set ?vs) \\<Gamma>)\n           (\\<lambda>\\<sigma>. extract_real (cexpr_sem (merge (set ?vs) (insert x (set vs')) (\\<sigma>, \\<rho>(x := v))) \\<delta>))\""], ["proof (state)\nthis:\n  integrable\n   (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs)) \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem\n          (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n            (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n          \\<delta>))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "from v and \\<rho>"], ["proof (chain)\npicking this:\n  v \\<in> space (stock_measure (\\<Gamma> x))\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)", "have \\<rho>': \"(\\<rho>(x := v)) \\<in> space (state_measure (set (x#vs')) \\<Gamma>)\""], ["proof (prove)\nusing this:\n  v \\<in> space (stock_measure (\\<Gamma> x))\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<rho>(x := v) \\<in> space (state_measure (set (x # vs')) \\<Gamma>)", "by (auto simp: state_measure_def space_PiM split: if_split_asm)"], ["proof (state)\nthis:\n  \\<rho>(x := v) \\<in> space (state_measure (set (x # vs')) \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "have \"cexpr_sem (case_nat v \\<rho>) (marg_dens_cexpr \\<Gamma> vs x \\<delta>) =\n            cexpr_sem (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n                   (integrate_vars \\<Gamma> [y\\<leftarrow>vs . y \\<noteq> x] \\<delta>)\" (is \"_ = ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. cexpr_sem (case_nat v \\<rho>) (marg_dens_cexpr \\<Gamma> vs x \\<delta>) =\n    cexpr_sem\n     (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n     (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n       \\<delta>)", "unfolding marg_dens_cexpr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cexpr_sem (case_nat v \\<rho>)\n     (map_vars (\\<lambda>y. if y = x then 0 else Suc y)\n       (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n         \\<delta>)) =\n    cexpr_sem\n     (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n     (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n       \\<delta>)", "by (simp add: cexpr_sem_map_vars)"], ["proof (state)\nthis:\n  cexpr_sem (case_nat v \\<rho>) (marg_dens_cexpr \\<Gamma> vs x \\<delta>) =\n  cexpr_sem\n   (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n   (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs) \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "also"], ["proof (state)\nthis:\n  cexpr_sem (case_nat v \\<rho>) (marg_dens_cexpr \\<Gamma> vs x \\<delta>) =\n  cexpr_sem\n   (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n   (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs) \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "have \"\\<And>y. y \\<in> free_vars (integrate_vars \\<Gamma> [y\\<leftarrow>vs . y \\<noteq> x] \\<delta>)\n                  \\<Longrightarrow> (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)) y = (\\<rho>(x := v)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> free_vars\n                (integrate_vars \\<Gamma>\n                  (filter (\\<lambda>y. y \\<noteq> x) vs)\n                  \\<delta>) \\<Longrightarrow>\n       (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n        y =\n       (\\<rho>(x := v)) y", "unfolding o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> free_vars\n                (integrate_vars \\<Gamma>\n                  (filter (\\<lambda>y. y \\<noteq> x) vs)\n                  \\<delta>) \\<Longrightarrow>\n       (case if y = x then 0 else Suc y of 0 \\<Rightarrow> v\n        | Suc x \\<Rightarrow> \\<rho> x) =\n       (\\<rho>(x := v)) y", "by simp"], ["proof (state)\nthis:\n  ?y \\<in> free_vars\n            (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n              \\<delta>) \\<Longrightarrow>\n  (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)) ?y =\n  (\\<rho>(x := v)) ?y\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "hence \"?A = cexpr_sem (\\<rho>(x := v)) (integrate_vars \\<Gamma> [y\\<leftarrow>vs . y \\<noteq> x] \\<delta>)\""], ["proof (prove)\nusing this:\n  ?y \\<in> free_vars\n            (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n              \\<delta>) \\<Longrightarrow>\n  (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)) ?y =\n  (\\<rho>(x := v)) ?y\n\ngoal (1 subgoal):\n 1. cexpr_sem\n     (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n     (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n       \\<delta>) =\n    cexpr_sem (\\<rho>(x := v))\n     (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n       \\<delta>)", "by (rule cexpr_sem_eq_on_vars)"], ["proof (state)\nthis:\n  cexpr_sem\n   (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n   (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n     \\<delta>) =\n  cexpr_sem (\\<rho>(x := v))\n   (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs) \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "also"], ["proof (state)\nthis:\n  cexpr_sem\n   (case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y))\n   (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n     \\<delta>) =\n  cexpr_sem (\\<rho>(x := v))\n   (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs) \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "from x"], ["proof (chain)\npicking this:\n  x \\<in> set vs", "have \"insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' = set vs \\<union> set vs'\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n\ngoal (1 subgoal):\n 1. insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n    set vs \\<union> set vs'", "by auto"], ["proof (state)\nthis:\n  insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "hence \"extract_real (cexpr_sem (\\<rho>(x := v)) (integrate_vars \\<Gamma> [y\\<leftarrow>vs . y \\<noteq> x] \\<delta>)) =\n                  \\<integral>\\<^sup>+\\<sigma>. extract_real (cexpr_sem (merge (set ?vs) (insert x (set vs')) (\\<sigma>, \\<rho>(x := v))) \\<delta>)\n                     \\<partial>state_measure (set ?vs) \\<Gamma>\""], ["proof (prove)\nusing this:\n  insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem (\\<rho>(x := v))\n         (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n           \\<delta>))) =\n    \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge\n                                   (set (filter (\\<lambda>y. y \\<noteq> x)\n    vs))\n                                   (insert x (set vs'))\n                                   (xa, \\<rho>(x := v)))\n                                 \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter (\\<lambda>y. y \\<noteq> x)\n   vs))\n                                  \\<Gamma>", "using \\<rho>' invar integrable"], ["proof (prove)\nusing this:\n  insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n  set vs \\<union> set vs'\n  \\<rho>(x := v) \\<in> space (state_measure (set (x # vs')) \\<Gamma>)\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n  integrable\n   (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs)) \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem\n          (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n            (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n          \\<delta>))\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem (\\<rho>(x := v))\n         (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n           \\<delta>))) =\n    \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge\n                                   (set (filter (\\<lambda>y. y \\<noteq> x)\n    vs))\n                                   (insert x (set vs'))\n                                   (xa, \\<rho>(x := v)))\n                                 \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter (\\<lambda>y. y \\<noteq> x)\n   vs))\n                                  \\<Gamma>", "by (subst cexpr_sem_integrate_vars') (auto )"], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem (\\<rho>(x := v))\n       (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n         \\<delta>))) =\n  \\<integral>\\<^sup>+ xa. ennreal\n                           (extract_real\n                             (cexpr_sem\n                               (merge\n                                 (set (filter (\\<lambda>y. y \\<noteq> x)\n  vs))\n                                 (insert x (set vs')) (xa, \\<rho>(x := v)))\n                               \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                                \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "also"], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem (\\<rho>(x := v))\n       (integrate_vars \\<Gamma> (filter (\\<lambda>y. y \\<noteq> x) vs)\n         \\<delta>))) =\n  \\<integral>\\<^sup>+ xa. ennreal\n                           (extract_real\n                             (cexpr_sem\n                               (merge\n                                 (set (filter (\\<lambda>y. y \\<noteq> x)\n  vs))\n                                 (insert x (set vs')) (xa, \\<rho>(x := v)))\n                               \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                                \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "from x"], ["proof (chain)\npicking this:\n  x \\<in> set vs", "have \"(\\<lambda>\\<sigma>. merge (set ?vs) (insert x (set vs')) (\\<sigma>, \\<rho>(x := v))) =\n                         (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>(x := v), \\<rho>))\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n         (insert x (set vs')) (\\<sigma>, \\<rho>(x := v))) =\n    (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>(x := v), \\<rho>))", "by (intro ext) (auto simp: merge_def)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>.\n      merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n       (insert x (set vs')) (\\<sigma>, \\<rho>(x := v))) =\n  (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>(x := v), \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "also"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>.\n      merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n       (insert x (set vs')) (\\<sigma>, \\<rho>(x := v))) =\n  (\\<lambda>\\<sigma>. merge (set vs) (set vs') (\\<sigma>(x := v), \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "from x"], ["proof (chain)\npicking this:\n  x \\<in> set vs", "have \"set ?vs = set vs - {x}\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n\ngoal (1 subgoal):\n 1. set (filter (\\<lambda>y. y \\<noteq> x) vs) = set vs - {x}", "by auto"], ["proof (state)\nthis:\n  set (filter (\\<lambda>y. y \\<noteq> x) vs) = set vs - {x}\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "also"], ["proof (state)\nthis:\n  set (filter (\\<lambda>y. y \\<noteq> x) vs) = set vs - {x}\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "have \"(\\<integral>\\<^sup>+\\<sigma>. extract_real (cexpr_sem (merge (set vs) (set vs') (\\<sigma>(x := v), \\<rho>)) \\<delta>)\n                     \\<partial>state_measure (set vs - {x}) \\<Gamma>) =\n                 marg_dens (dens_ctxt_\\<alpha> (vs,vs',\\<Gamma>,\\<delta>)) x \\<rho> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge (set vs) (set vs')\n                                   (xa(x := v), \\<rho>))\n                                 \\<delta>))\n                       \\<partial>state_measure (set vs - {x}) \\<Gamma> =\n    marg_dens (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x \\<rho> v", "unfolding marg_dens_def dens_ctxt_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge (set vs) (set vs')\n                                   (xa(x := v), \\<rho>))\n                                 \\<delta>))\n                       \\<partial>state_measure (set vs - {x}) \\<Gamma> =\n    (case case case (vs, vs', \\<Gamma>, \\<delta>) of\n               (vs, vs', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                 (set vs, set vs', \\<Gamma>,\n                  \\<lambda>\\<sigma>.\n                     extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow>\n                  (x, case y of\n                      (x, y) \\<Rightarrow>\n                        (x, \\<lambda>x. ennreal (y x)))) of\n     (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n       \\<lambda>x \\<rho> v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V' (\\<sigma>(x := v), \\<rho>))\n                             \\<partial>state_measure (V - {x}) \\<Gamma>)\n     x \\<rho> v", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ xa. ennreal\n                           (extract_real\n                             (cexpr_sem\n                               (merge (set vs) (set vs')\n                                 (xa(x := v), \\<rho>))\n                               \\<delta>))\n                     \\<partial>state_measure (set vs - {x}) \\<Gamma> =\n  marg_dens (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x \\<rho> v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        integrable\n         (state_measure (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n           \\<Gamma>)\n         (\\<lambda>\\<sigma>.\n             extract_real\n              (cexpr_sem\n                (merge (set (filter (\\<lambda>y. y \\<noteq> x) vs))\n                  (insert x (set vs')) (\\<sigma>, \\<rho>(x := v)))\n                \\<delta>))\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem (case_nat v \\<rho>)\n                              (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                         marg_dens\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x \\<rho> v", "finally"], ["proof (chain)\npicking this:\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (\\<lambda>a.\n           case a of 0 \\<Rightarrow> v | Suc a \\<Rightarrow> \\<rho> a)\n       (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n  marg_dens (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x \\<rho> v", "show \"ennreal (extract_real (cexpr_sem (\\<lambda>a. case a of 0 \\<Rightarrow> v | Suc a \\<Rightarrow> \\<rho> a)\n                                               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                    marg_dens (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x \\<rho> v\""], ["proof (prove)\nusing this:\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (\\<lambda>a.\n           case a of 0 \\<Rightarrow> v | Suc a \\<Rightarrow> \\<rho> a)\n       (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n  marg_dens (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x \\<rho> v\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem\n         (\\<lambda>a.\n             case a of 0 \\<Rightarrow> v | Suc a \\<Rightarrow> \\<rho> a)\n         (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n    marg_dens (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x \\<rho> v", "."], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (\\<lambda>a.\n           case a of 0 \\<Rightarrow> v | Suc a \\<Rightarrow> \\<rho> a)\n       (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n  marg_dens (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x \\<rho> v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE v in stock_measure\n           (\\<Gamma>\n             x). ennreal\n                  (extract_real\n                    (cexpr_sem (case_nat v \\<rho>)\n                      (marg_dens_cexpr \\<Gamma> vs x \\<delta>))) =\n                 marg_dens\n                  (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                  \\<rho> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonneg_cexpr_sem_marg_dens:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes x: \"x \\<in> set vs\" and \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  assumes v: \"v \\<in> type_universe (\\<Gamma> x)\"\n  shows \"extract_real (cexpr_sem (case_nat v \\<rho>) (marg_dens_cexpr \\<Gamma> vs x \\<delta>)) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))", "note invar = cdens_ctxt_invarD[OF assms(1)]"], ["proof (state)\nthis:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))", "from assms"], ["proof (chain)\npicking this:\n  cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\n  x \\<in> set vs\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  v \\<in> type_universe (\\<Gamma> x)", "have \\<rho>: \"case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)\n                        \\<in> space (state_measure (set (x#vs')) \\<Gamma>)\""], ["proof (prove)\nusing this:\n  cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\n  x \\<in> set vs\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  v \\<in> type_universe (\\<Gamma> x)\n\ngoal (1 subgoal):\n 1. case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)\n    \\<in> space (state_measure (set (x # vs')) \\<Gamma>)", "by (force simp: state_measure_def space_PiM o_def split: if_split_asm)"], ["proof (state)\nthis:\n  case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)\n  \\<in> space (state_measure (set (x # vs')) \\<Gamma>)\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))", "moreover"], ["proof (state)\nthis:\n  case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)\n  \\<in> space (state_measure (set (x # vs')) \\<Gamma>)\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))", "from x"], ["proof (chain)\npicking this:\n  x \\<in> set vs", "have \"insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' = set vs \\<union> set vs'\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n\ngoal (1 subgoal):\n 1. insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n    set vs \\<union> set vs'", "by auto"], ["proof (state)\nthis:\n  insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))", "ultimately"], ["proof (chain)\npicking this:\n  case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)\n  \\<in> space (state_measure (set (x # vs')) \\<Gamma>)\n  insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n  set vs \\<union> set vs'", "show ?thesis"], ["proof (prove)\nusing this:\n  case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)\n  \\<in> space (state_measure (set (x # vs')) \\<Gamma>)\n  insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))", "using assms invar"], ["proof (prove)\nusing this:\n  case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)\n  \\<in> space (state_measure (set (x # vs')) \\<Gamma>)\n  insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n  set vs \\<union> set vs'\n  cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\n  x \\<in> set vs\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  v \\<in> type_universe (\\<Gamma> x)\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens_cexpr \\<Gamma> vs x \\<delta>))", "unfolding marg_dens_cexpr_def"], ["proof (prove)\nusing this:\n  case_nat v \\<rho> \\<circ> (\\<lambda>y. if y = x then 0 else Suc y)\n  \\<in> space (state_measure (set (x # vs')) \\<Gamma>)\n  insert x {xa \\<in> set vs. xa \\<noteq> x} \\<union> set vs' =\n  set vs \\<union> set vs'\n  cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\n  x \\<in> set vs\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  v \\<in> type_universe (\\<Gamma> x)\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (map_vars (\\<lambda>y. if y = x then 0 else Suc y)\n                 (integrate_vars \\<Gamma>\n                   (filter (\\<lambda>y. y \\<noteq> x) vs) \\<delta>)))", "by (subst cexpr_sem_map_vars, intro nonneg_cexpr_sem_integrate_vars[of _ \"set (x#vs')\"]) auto"], ["proof (state)\nthis:\n  0 \\<le> extract_real\n           (cexpr_sem (case_nat v \\<rho>)\n             (marg_dens_cexpr \\<Gamma> vs x \\<delta>))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition marg_dens2_cexpr :: \"tyenv \\<Rightarrow> vname list \\<Rightarrow> vname \\<Rightarrow> vname \\<Rightarrow> cexpr \\<Rightarrow> cexpr\" where\n  \"marg_dens2_cexpr \\<Gamma> vs x y e =\n     (cexpr_comp_aux (Suc x) (fst\\<^sub>c (CVar 0))\n        (cexpr_comp_aux (Suc y) (snd\\<^sub>c (CVar 0))\n            (map_vars Suc (integrate_vars \\<Gamma> (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) e))))\""], ["", "lemma free_vars_marg_dens2_cexpr:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  shows \"free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>) \\<subseteq> shift_var_set (set vs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "have \"free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>) \\<subseteq>\n            shift_var_set (free_vars \\<delta> - set vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n    \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)", "unfolding marg_dens2_cexpr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars\n     (cexpr_comp_aux (Suc x) (fst\\<^sub>c (CVar 0))\n       (cexpr_comp_aux (Suc y) (snd\\<^sub>c (CVar 0))\n         (map_vars Suc\n           (integrate_vars \\<Gamma>\n             (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n             \\<delta>))))\n    \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)", "using cdens_ctxt_invarD[OF assms(1)]"], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. free_vars\n     (cexpr_comp_aux (Suc x) (fst\\<^sub>c (CVar 0))\n       (cexpr_comp_aux (Suc y) (snd\\<^sub>c (CVar 0))\n         (map_vars Suc\n           (integrate_vars \\<Gamma>\n             (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n             \\<delta>))))\n    \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)", "apply (intro order.trans[OF free_vars_cexpr_comp_aux] Un_least)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vs @ vs');\n     free_vars \\<delta> \\<subseteq> set (vs @ vs');\n     \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL;\n     nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>;\n     subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\\<rbrakk>\n    \\<Longrightarrow> free_vars\n                       (cexpr_comp_aux (Suc y) (snd\\<^sub>c (CVar 0))\n                         (map_vars Suc\n                           (integrate_vars \\<Gamma>\n                             (filter\n                               (\\<lambda>z.\n                                   z \\<noteq> x \\<and> z \\<noteq> y)\n                               vs)\n                             \\<delta>))) -\n                      {Suc x}\n                      \\<subseteq> shift_var_set\n                                   (free_vars \\<delta> - set vs)\n 2. \\<lbrakk>distinct (vs @ vs');\n     free_vars \\<delta> \\<subseteq> set (vs @ vs');\n     \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL;\n     nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>;\n     subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\\<rbrakk>\n    \\<Longrightarrow> free_vars (fst\\<^sub>c (CVar 0))\n                      \\<subseteq> shift_var_set\n                                   (free_vars \\<delta> - set vs)", "apply (subst Diff_subset_conv, intro order.trans[OF free_vars_cexpr_comp_aux])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vs @ vs');\n     free_vars \\<delta> \\<subseteq> set (vs @ vs');\n     \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL;\n     nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>;\n     subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\\<rbrakk>\n    \\<Longrightarrow> free_vars\n                       (map_vars Suc\n                         (integrate_vars \\<Gamma>\n                           (filter\n                             (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                             vs)\n                           \\<delta>)) -\n                      {Suc y} \\<union>\n                      free_vars (snd\\<^sub>c (CVar 0))\n                      \\<subseteq> {Suc x} \\<union>\n                                  shift_var_set\n                                   (free_vars \\<delta> - set vs)\n 2. \\<lbrakk>distinct (vs @ vs');\n     free_vars \\<delta> \\<subseteq> set (vs @ vs');\n     \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL;\n     nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>;\n     subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\\<rbrakk>\n    \\<Longrightarrow> free_vars (fst\\<^sub>c (CVar 0))\n                      \\<subseteq> shift_var_set\n                                   (free_vars \\<delta> - set vs)", "apply (auto simp: shift_var_set_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n  \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)\n\ngoal (1 subgoal):\n 1. free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "also"], ["proof (state)\nthis:\n  free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n  \\<subseteq> shift_var_set (free_vars \\<delta> - set vs)\n\ngoal (1 subgoal):\n 1. free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "from cdens_ctxt_invarD[OF assms(1)]"], ["proof (chain)\npicking this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>", "have \"... \\<subseteq> shift_var_set (set vs')\""], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. shift_var_set (free_vars \\<delta> - set vs)\n    \\<subseteq> shift_var_set (set vs')", "unfolding shift_var_set_def"], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. insert 0 (Suc ` (free_vars \\<delta> - set vs))\n    \\<subseteq> insert 0 (Suc ` set vs')", "by auto"], ["proof (state)\nthis:\n  shift_var_set (free_vars \\<delta> - set vs)\n  \\<subseteq> shift_var_set (set vs')\n\ngoal (1 subgoal):\n 1. free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "finally"], ["proof (chain)\npicking this:\n  free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n  \\<subseteq> shift_var_set (set vs')", "show ?thesis"], ["proof (prove)\nusing this:\n  free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n  \\<subseteq> shift_var_set (set vs')\n\ngoal (1 subgoal):\n 1. free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n    \\<subseteq> shift_var_set (set vs')", "."], ["proof (state)\nthis:\n  free_vars (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)\n  \\<subseteq> shift_var_set (set vs')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cexpr_typing_marg_dens2_cexpr[intro]:\n  assumes \"\\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\"\n  shows \"case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma> \\<turnstile>\\<^sub>c marg_dens2_cexpr \\<Gamma> vs x y \\<delta> : REAL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>\n     \\<turnstile>\\<^sub>c marg_dens2_cexpr \\<Gamma> vs x y \\<delta> : REAL", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>\n     \\<turnstile>\\<^sub>c marg_dens2_cexpr \\<Gamma> vs x y \\<delta> : REAL", "have A: \"(case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>) (Suc x := \\<Gamma> x, Suc y := \\<Gamma> y) \\<circ> Suc = \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>)\n    (Suc x := \\<Gamma> x, Suc y := \\<Gamma> y) \\<circ> Suc =\n    \\<Gamma>", "by (intro ext) (auto split: nat.split)"], ["proof (state)\nthis:\n  (case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>)\n  (Suc x := \\<Gamma> x, Suc y := \\<Gamma> y) \\<circ> Suc =\n  \\<Gamma>\n\ngoal (1 subgoal):\n 1. case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>\n     \\<turnstile>\\<^sub>c marg_dens2_cexpr \\<Gamma> vs x y \\<delta> : REAL", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>\n     \\<turnstile>\\<^sub>c marg_dens2_cexpr \\<Gamma> vs x y \\<delta> : REAL", "unfolding marg_dens2_cexpr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>\n     \\<turnstile>\\<^sub>c\n     cexpr_comp_aux (Suc x) (fst\\<^sub>c (CVar 0))\n      (cexpr_comp_aux (Suc y) (snd\\<^sub>c (CVar 0))\n        (map_vars Suc\n          (integrate_vars \\<Gamma>\n            (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n            \\<delta>))) :\n     REAL", "apply (rule cexpr_typing_cexpr_comp_aux[of _ _ \"\\<Gamma> x\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>)\n     (Suc x := \\<Gamma> x) \\<turnstile>\\<^sub>c\n     cexpr_comp_aux (Suc y) (snd\\<^sub>c (CVar 0))\n      (map_vars Suc\n        (integrate_vars \\<Gamma>\n          (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n          \\<delta>)) :\n     REAL\n 2. case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>\n     \\<turnstile>\\<^sub>c fst\\<^sub>c (CVar 0) : \\<Gamma> x", "apply (rule cexpr_typing_cexpr_comp_aux[of _ _ \"\\<Gamma> y\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>)\n     (Suc x := \\<Gamma> x, Suc y := \\<Gamma> y) \\<turnstile>\\<^sub>c\n     map_vars Suc\n      (integrate_vars \\<Gamma>\n        (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n        \\<delta>) :\n     REAL\n 2. (case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>)\n     (Suc x := \\<Gamma> x) \\<turnstile>\\<^sub>c\n     snd\\<^sub>c (CVar 0) : \\<Gamma> y\n 3. case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>\n     \\<turnstile>\\<^sub>c fst\\<^sub>c (CVar 0) : \\<Gamma> x", "apply (rule cexpr_typing_map_vars, subst A, rule cexpr_typing_integrate_vars[OF assms])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>)\n     (Suc x := \\<Gamma> x) \\<turnstile>\\<^sub>c\n     snd\\<^sub>c (CVar 0) : \\<Gamma> y\n 2. case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma>\n     \\<turnstile>\\<^sub>c fst\\<^sub>c (CVar 0) : \\<Gamma> x", "apply (rule cet_op, rule cet_var, simp, rule cet_op, rule cet_var, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  case_nat (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<Gamma> \\<turnstile>\\<^sub>c\n   marg_dens2_cexpr \\<Gamma> vs x y \\<delta> : REAL\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cexpr_sem_marg_dens2:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes x: \"x \\<in> set vs\" and y: \"y \\<in> set vs\" and \"x \\<noteq> y\"\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  shows \"AE z in stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)).\n           ennreal (extract_real (cexpr_sem (case_nat z \\<rho>) (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n               marg_dens2 (dens_ctxt_\\<alpha> (vs,vs',\\<Gamma>,\\<delta>)) x y \\<rho> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "note invar = cdens_ctxt_invarD[OF assms(1)]"], ["proof (state)\nthis:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "let ?f = \"\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "let ?vs = \"filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs\""], ["proof (state)\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "interpret product_sigma_finite \"\\<lambda>x. stock_measure (\\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. product_sigma_finite (\\<lambda>x. stock_measure (\\<Gamma> x))", "unfolding product_sigma_finite_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. sigma_finite_measure (stock_measure (\\<Gamma> i))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "interpret sf_PiM: sigma_finite_measure \"PiM (set ?vs) (\\<lambda>x. stock_measure (\\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure\n     (Pi\\<^sub>M\n       (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n       (\\<lambda>x. stock_measure (\\<Gamma> x)))", "by (intro sigma_finite) simp"], ["proof (state)\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "have meas: \"(\\<lambda>\\<sigma>. extract_real (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n                 \\<in> borel_measurable (state_measure (set vs) \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        extract_real\n         (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n    \\<in> borel_measurable (state_measure (set vs) \\<Gamma>)", "using assms invar"], ["proof (prove)\nusing this:\n  cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\n  x \\<in> set vs\n  y \\<in> set vs\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        extract_real\n         (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n    \\<in> borel_measurable (state_measure (set vs) \\<Gamma>)", "by (intro measurable_cexpr_sem') simp_all"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>.\n      extract_real\n       (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n  \\<in> borel_measurable (state_measure (set vs) \\<Gamma>)\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "from x y"], ["proof (chain)\npicking this:\n  x \\<in> set vs\n  y \\<in> set vs", "have insert_eq: \"insert x (insert y (set ?vs)) = set vs\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n  y \\<in> set vs\n\ngoal (1 subgoal):\n 1. insert x\n     (insert y\n       (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))) =\n    set vs", "by auto"], ["proof (state)\nthis:\n  insert x\n   (insert y\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))) =\n  set vs\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "from x y"], ["proof (chain)\npicking this:\n  x \\<in> set vs\n  y \\<in> set vs", "have insert_eq': \"insert y (insert x (set ?vs)) = set vs\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n  y \\<in> set vs\n\ngoal (1 subgoal):\n 1. insert y\n     (insert x\n       (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))) =\n    set vs", "by auto"], ["proof (state)\nthis:\n  insert y\n   (insert x\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))) =\n  set vs\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "have meas_upd1: \"(\\<lambda>(\\<sigma>,v). \\<sigma>(y := v)) \\<in>\n      measurable (PiM (insert x (set vs)) (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> y))\n                 (PiM (insert y (insert x (set vs))) (\\<lambda>x. stock_measure (\\<Gamma> x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(\\<sigma>, v). \\<sigma>(y := v))\n    \\<in> Pi\\<^sub>M (insert x (set vs))\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<Otimes>\\<^sub>M\n          stock_measure (\\<Gamma> y) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (insert y (insert x (set vs)))\n           (\\<lambda>x. stock_measure (\\<Gamma> x))", "using measurable_add_dim[of y \"insert x (set ?vs)\" \"\\<lambda>x. stock_measure (\\<Gamma> x)\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>(f, ya). f(y := ya))\n  \\<in> Pi\\<^sub>M\n         (insert x\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)))\n         (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<Otimes>\\<^sub>M\n        stock_measure (\\<Gamma> y) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M\n         (insert y\n           (insert x\n             (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                    vs))))\n         (\\<lambda>x. stock_measure (\\<Gamma> x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(\\<sigma>, v). \\<sigma>(y := v))\n    \\<in> Pi\\<^sub>M (insert x (set vs))\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<Otimes>\\<^sub>M\n          stock_measure (\\<Gamma> y) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (insert y (insert x (set vs)))\n           (\\<lambda>x. stock_measure (\\<Gamma> x))", "by (simp only: insert_eq', simp)"], ["proof (state)\nthis:\n  (\\<lambda>(\\<sigma>, v). \\<sigma>(y := v))\n  \\<in> Pi\\<^sub>M (insert x (set vs))\n         (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<Otimes>\\<^sub>M\n        stock_measure (\\<Gamma> y) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (insert y (insert x (set vs)))\n         (\\<lambda>x. stock_measure (\\<Gamma> x))\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "hence meas_upd2: \"(\\<lambda>xa. (snd xa) (x := fst (fst xa), y := snd (fst xa)))\n           \\<in> measurable ((stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> y)) \\<Otimes>\\<^sub>M\n                           Pi\\<^sub>M (set ?vs) (\\<lambda>y. stock_measure (\\<Gamma> y)))\n                        (Pi\\<^sub>M (set vs) (\\<lambda>y. stock_measure (\\<Gamma> y)))\""], ["proof (prove)\nusing this:\n  (\\<lambda>(\\<sigma>, v). \\<sigma>(y := v))\n  \\<in> Pi\\<^sub>M (insert x (set vs))\n         (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<Otimes>\\<^sub>M\n        stock_measure (\\<Gamma> y) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (insert y (insert x (set vs)))\n         (\\<lambda>x. stock_measure (\\<Gamma> x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>xa. (snd xa)(x := fst (fst xa), y := snd (fst xa)))\n    \\<in> (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n           stock_measure (\\<Gamma> y)) \\<Otimes>\\<^sub>M\n          Pi\\<^sub>M\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n           (\\<lambda>y. stock_measure (\\<Gamma> y)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (set vs) (\\<lambda>y. stock_measure (\\<Gamma> y))", "by (subst insert_eq'[symmetric], intro measurable_Pair_compose_split[OF measurable_add_dim])\n       (simp_all del: fun_upd_apply)"], ["proof (state)\nthis:\n  (\\<lambda>xa. (snd xa)(x := fst (fst xa), y := snd (fst xa)))\n  \\<in> (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n         stock_measure (\\<Gamma> y)) \\<Otimes>\\<^sub>M\n        Pi\\<^sub>M\n         (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n         (\\<lambda>y. stock_measure (\\<Gamma> y)) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (set vs) (\\<lambda>y. stock_measure (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "from x y"], ["proof (chain)\npicking this:\n  x \\<in> set vs\n  y \\<in> set vs", "have A: \"set vs = {x, y} \\<union> set ?vs\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n  y \\<in> set vs\n\ngoal (1 subgoal):\n 1. set vs =\n    {x, y} \\<union>\n    set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)", "by auto"], ["proof (state)\nthis:\n  set vs =\n  {x, y} \\<union>\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "have \"(\\<integral>\\<^sup>+\\<sigma>. ?f (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<partial>state_measure (set vs) \\<Gamma>) =\n               (\\<integral>\\<^sup>+\\<sigma>'. \\<integral>\\<^sup>+\\<sigma>. ?f (merge (set vs) (set vs') (merge {x, y} (set ?vs) (\\<sigma>', \\<sigma>), \\<rho>))\n                  \\<partial>state_measure (set ?vs) \\<Gamma> \\<partial>state_measure {x,y} \\<Gamma>)\" (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                              \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>'.\n                         \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (merge {x, y}\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 (\\<sigma>', \\<sigma>),\n                \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                       \\<partial>state_measure {x, y} \\<Gamma>", "using meas insert_eq"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>.\n      extract_real\n       (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n  \\<in> borel_measurable (state_measure (set vs) \\<Gamma>)\n  insert x\n   (insert y\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))) =\n  set vs\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                              \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>'.\n                         \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (merge {x, y}\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 (\\<sigma>', \\<sigma>),\n                \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                       \\<partial>state_measure {x, y} \\<Gamma>", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>.\n      extract_real\n       (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n  \\<in> borel_measurable\n         (Pi\\<^sub>M (set vs) (\\<lambda>x. stock_measure (\\<Gamma> x)))\n  insert x\n   (insert y\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))) =\n  set vs\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                              \\<delta>))\n                       \\<partial>Pi\\<^sub>M (set vs)\n                                  (\\<lambda>x. stock_measure (\\<Gamma> x)) =\n    \\<integral>\\<^sup>+ \\<sigma>'.\n                         \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (merge {x, y}\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 (\\<sigma>', \\<sigma>),\n                \\<rho>))\n             \\<delta>))\n      \\<partial>Pi\\<^sub>M\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 (\\<lambda>x. stock_measure (\\<Gamma> x))\n                       \\<partial>Pi\\<^sub>M {x, y}\n                                  (\\<lambda>x. stock_measure (\\<Gamma> x))", "by (subst A, subst product_nn_integral_fold) (simp_all add: measurable_compose[OF _ measurable_ennreal])"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>'.\n                       \\<integral>\\<^sup>+ \\<sigma>.\n      ennreal\n       (extract_real\n         (cexpr_sem\n           (merge (set vs) (set vs')\n             (merge {x, y}\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               (\\<sigma>', \\<sigma>),\n              \\<rho>))\n           \\<delta>))\n    \\<partial>state_measure\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               \\<Gamma>\n                     \\<partial>state_measure {x, y} \\<Gamma>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>'.\n                       \\<integral>\\<^sup>+ \\<sigma>.\n      ennreal\n       (extract_real\n         (cexpr_sem\n           (merge (set vs) (set vs')\n             (merge {x, y}\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               (\\<sigma>', \\<sigma>),\n              \\<rho>))\n           \\<delta>))\n    \\<partial>state_measure\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               \\<Gamma>\n                     \\<partial>state_measure {x, y} \\<Gamma>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "have \"\\<And>\\<sigma>' \\<sigma>. merge (set vs) (set vs') (merge {x, y} (set ?vs) (\\<sigma>', \\<sigma>), \\<rho>) =\n                       merge (set vs) (set vs') (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' \\<sigma>.\n       merge (set vs) (set vs')\n        (merge {x, y}\n          (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n          (\\<sigma>', \\<sigma>),\n         \\<rho>) =\n       merge (set vs) (set vs')\n        (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>)", "by (intro ext) (auto simp: merge_def)"], ["proof (state)\nthis:\n  merge (set vs) (set vs')\n   (merge {x, y}\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n     (?\\<sigma>', ?\\<sigma>),\n    \\<rho>) =\n  merge (set vs) (set vs')\n   (?\\<sigma>(x := ?\\<sigma>' x, y := ?\\<sigma>' y), \\<rho>)\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "hence \"?I = (\\<integral>\\<^sup>+\\<sigma>'. \\<integral>\\<^sup>+\\<sigma>. ?f (merge (set vs) (set vs') (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>))\n                  \\<partial>state_measure (set ?vs) \\<Gamma> \\<partial>state_measure {x,y} \\<Gamma>)\""], ["proof (prove)\nusing this:\n  merge (set vs) (set vs')\n   (merge {x, y}\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n     (?\\<sigma>', ?\\<sigma>),\n    \\<rho>) =\n  merge (set vs) (set vs')\n   (?\\<sigma>(x := ?\\<sigma>' x, y := ?\\<sigma>' y), \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>'.\n                         \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (merge {x, y}\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 (\\<sigma>', \\<sigma>),\n                \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                       \\<partial>state_measure {x, y} \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>'.\n                         \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                       \\<partial>state_measure {x, y} \\<Gamma>", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>'.\n                       \\<integral>\\<^sup>+ \\<sigma>.\n      ennreal\n       (extract_real\n         (cexpr_sem\n           (merge (set vs) (set vs')\n             (merge {x, y}\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               (\\<sigma>', \\<sigma>),\n              \\<rho>))\n           \\<delta>))\n    \\<partial>state_measure\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               \\<Gamma>\n                     \\<partial>state_measure {x, y} \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>'.\n                       \\<integral>\\<^sup>+ \\<sigma>.\n      ennreal\n       (extract_real\n         (cexpr_sem\n           (merge (set vs) (set vs')\n             (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>))\n           \\<delta>))\n    \\<partial>state_measure\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               \\<Gamma>\n                     \\<partial>state_measure {x, y} \\<Gamma>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>'.\n                       \\<integral>\\<^sup>+ \\<sigma>.\n      ennreal\n       (extract_real\n         (cexpr_sem\n           (merge (set vs) (set vs')\n             (merge {x, y}\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               (\\<sigma>', \\<sigma>),\n              \\<rho>))\n           \\<delta>))\n    \\<partial>state_measure\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               \\<Gamma>\n                     \\<partial>state_measure {x, y} \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>'.\n                       \\<integral>\\<^sup>+ \\<sigma>.\n      ennreal\n       (extract_real\n         (cexpr_sem\n           (merge (set vs) (set vs')\n             (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>))\n           \\<delta>))\n    \\<partial>state_measure\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               \\<Gamma>\n                     \\<partial>state_measure {x, y} \\<Gamma>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "have \"... = \\<integral>\\<^sup>+z. \\<integral>\\<^sup>+\\<sigma>. ?f (merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n                     \\<partial>state_measure (set ?vs) \\<Gamma> \\<partial>(stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> y))\"\n    (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>'.\n                         \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                       \\<partial>state_measure {x, y} \\<Gamma> =\n    \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n          ennreal\n           (extract_real\n             (cexpr_sem\n               (merge (set vs) (set vs')\n                 (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n               \\<delta>))\n        \\<partial>state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y)", "using \\<open>x \\<noteq> y\\<close> meas_upd2 \\<rho> invar"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  (\\<lambda>xa. (snd xa)(x := fst (fst xa), y := snd (fst xa)))\n  \\<in> (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n         stock_measure (\\<Gamma> y)) \\<Otimes>\\<^sub>M\n        Pi\\<^sub>M\n         (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n         (\\<lambda>y. stock_measure (\\<Gamma> y)) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (set vs) (\\<lambda>y. stock_measure (\\<Gamma> y))\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>'.\n                         \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                       \\<partial>state_measure {x, y} \\<Gamma> =\n    \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n          ennreal\n           (extract_real\n             (cexpr_sem\n               (merge (set vs) (set vs')\n                 (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n               \\<delta>))\n        \\<partial>state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y)", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  (\\<lambda>xa. (snd xa)(x := fst (fst xa), y := snd (fst xa)))\n  \\<in> (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n         stock_measure (\\<Gamma> y)) \\<Otimes>\\<^sub>M\n        Pi\\<^sub>M\n         (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n         (\\<lambda>y. stock_measure (\\<Gamma> y)) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (set vs) (\\<lambda>y. stock_measure (\\<Gamma> y))\n  \\<rho>\n  \\<in> space\n         (Pi\\<^sub>M (set vs') (\\<lambda>x. stock_measure (\\<Gamma> x)))\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>'.\n                         \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>))\n             \\<delta>))\n      \\<partial>Pi\\<^sub>M\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 (\\<lambda>x. stock_measure (\\<Gamma> x))\n                       \\<partial>Pi\\<^sub>M {x, y}\n                                  (\\<lambda>x. stock_measure (\\<Gamma> x)) =\n    \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n          ennreal\n           (extract_real\n             (cexpr_sem\n               (merge (set vs) (set vs')\n                 (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n               \\<delta>))\n        \\<partial>Pi\\<^sub>M\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   (\\<lambda>x. stock_measure (\\<Gamma> x))\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y)", "by (subst product_nn_integral_pair, subst measurable_split_conv,\n        intro sf_PiM.borel_measurable_nn_integral)\n       (auto simp: measurable_split_conv state_measure_def intro!: measurable_compose[OF _ measurable_ennreal]\n            measurable_compose[OF _ measurable_cexpr_sem'] measurable_Pair )"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>'.\n                       \\<integral>\\<^sup>+ \\<sigma>.\n      ennreal\n       (extract_real\n         (cexpr_sem\n           (merge (set vs) (set vs')\n             (\\<sigma>(x := \\<sigma>' x, y := \\<sigma>' y), \\<rho>))\n           \\<delta>))\n    \\<partial>state_measure\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               \\<Gamma>\n                     \\<partial>state_measure {x, y} \\<Gamma> =\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "finally"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)", "have \"(\\<integral>\\<^sup>+\\<sigma>. ?f (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<partial>state_measure (set vs) \\<Gamma>) = ?I\""], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                              \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> =\n    \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n          ennreal\n           (extract_real\n             (cexpr_sem\n               (merge (set vs) (set vs')\n                 (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n               \\<delta>))\n        \\<partial>state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y)", "."], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "moreover"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "have \"(\\<integral>\\<^sup>+\\<sigma>. ?f (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<partial>state_measure (set vs) \\<Gamma>) \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                              \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> \\<noteq>\n    \\<infinity>", "using cdens_ctxt_invar_imp_integrable[OF assms(1) \\<rho>]"], ["proof (prove)\nusing this:\n  integrable (state_measure (set vs) \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                              \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> \\<noteq>\n    \\<infinity>", "unfolding real_integrable_def"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>.\n      extract_real\n       (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>))\n  \\<in> borel_measurable (state_measure (set vs) \\<Gamma>) \\<and>\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (x, \\<rho>))\n                              \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> \\<noteq>\n  \\<infinity> \\<and>\n  \\<integral>\\<^sup>+ x. ennreal\n                          (- extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                              \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> \\<noteq>\n    \\<infinity>", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "ultimately"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> \\<noteq>\n  \\<infinity>", "have \"?I \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs') (\\<sigma>, \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n          ennreal\n           (extract_real\n             (cexpr_sem\n               (merge (set vs) (set vs')\n                 (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n               \\<delta>))\n        \\<partial>state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y) \\<noteq>\n    \\<infinity>", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y) \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "hence \"AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> y).\n           (\\<integral>\\<^sup>+\\<sigma>. ?f (merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n               \\<partial>state_measure (set ?vs) \\<Gamma>) \\<noteq> \\<infinity>\" (is \"AE z in _. ?P z\")"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y) \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n            stock_measure\n             (\\<Gamma>\n               y). \\<integral>\\<^sup>+ \\<sigma>.\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n       \\<delta>))\n\\<partial>state_measure\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n           \\<Gamma> \\<noteq>\n                   \\<infinity>", "using meas_upd2 \\<rho> invar"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>state_measure\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y) \\<noteq>\n  \\<infinity>\n  (\\<lambda>xa. (snd xa)(x := fst (fst xa), y := snd (fst xa)))\n  \\<in> (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n         stock_measure (\\<Gamma> y)) \\<Otimes>\\<^sub>M\n        Pi\\<^sub>M\n         (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n         (\\<lambda>y. stock_measure (\\<Gamma> y)) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (set vs) (\\<lambda>y. stock_measure (\\<Gamma> y))\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n            stock_measure\n             (\\<Gamma>\n               y). \\<integral>\\<^sup>+ \\<sigma>.\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n       \\<delta>))\n\\<partial>state_measure\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n           \\<Gamma> \\<noteq>\n                   \\<infinity>", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ z. \\<integral>\\<^sup>+ \\<sigma>.\n        ennreal\n         (extract_real\n           (cexpr_sem\n             (merge (set vs) (set vs')\n               (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n             \\<delta>))\n      \\<partial>Pi\\<^sub>M\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 (\\<lambda>x. stock_measure (\\<Gamma> x))\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y) \\<noteq>\n  \\<infinity>\n  (\\<lambda>xa. (snd xa)(x := fst (fst xa), y := snd (fst xa)))\n  \\<in> (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n         stock_measure (\\<Gamma> y)) \\<Otimes>\\<^sub>M\n        Pi\\<^sub>M\n         (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n         (\\<lambda>y. stock_measure (\\<Gamma> y)) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (set vs) (\\<lambda>y. stock_measure (\\<Gamma> y))\n  \\<rho>\n  \\<in> space\n         (Pi\\<^sub>M (set vs') (\\<lambda>x. stock_measure (\\<Gamma> x)))\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n            stock_measure\n             (\\<Gamma>\n               y). \\<integral>\\<^sup>+ \\<sigma>.\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n       \\<delta>))\n\\<partial>Pi\\<^sub>M\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<noteq>\n                   \\<infinity>", "by (intro nn_integral_PInf_AE sf_PiM.borel_measurable_nn_integral)\n       (auto intro!: measurable_compose[OF _ measurable_ennreal] measurable_compose[OF _ measurable_cexpr_sem']\n             measurable_Pair simp: measurable_split_conv state_measure_def)"], ["proof (state)\nthis:\n  AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n          stock_measure\n           (\\<Gamma>\n             y). \\<integral>\\<^sup>+ \\<sigma>.\nennreal\n (extract_real\n   (cexpr_sem\n     (merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n     \\<delta>))\n                                    \\<partial>state_measure\n         (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n         \\<Gamma> \\<noteq>\n                 \\<infinity>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "hence \"AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> y).\n          ennreal (extract_real (cexpr_sem (case_nat (case_prod PairVal z) \\<rho>) (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n               marg_dens2 (dens_ctxt_\\<alpha> (vs,vs',\\<Gamma>,\\<delta>)) x y \\<rho> (case_prod PairVal z)\""], ["proof (prove)\nusing this:\n  AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n          stock_measure\n           (\\<Gamma>\n             y). \\<integral>\\<^sup>+ \\<sigma>.\nennreal\n (extract_real\n   (cexpr_sem\n     (merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n     \\<delta>))\n                                    \\<partial>state_measure\n         (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n         \\<Gamma> \\<noteq>\n                 \\<infinity>\n\ngoal (1 subgoal):\n 1. AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n            stock_measure\n             (\\<Gamma>\n               y). ennreal\n                    (extract_real\n                      (cexpr_sem\n                        (case_nat\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                          \\<rho>)\n                        (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                   marg_dens2\n                    (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y\n                    \\<rho> (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "proof (rule AE_mp[OF _ AE_I2[OF impI]])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "assume z: \"z \\<in> space (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> y))\""], ["proof (state)\nthis:\n  z \\<in> space\n           (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "assume fin: \"?P z\""], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs')\n                              (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma> \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have \"\\<And>\\<sigma>. merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>) =\n                 merge (set ?vs) ({x,y} \\<union> set vs') (\\<sigma>, \\<rho>(x := fst z, y := snd z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>) =\n       merge\n        (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n        ({x, y} \\<union> set vs') (\\<sigma>, \\<rho>(x := fst z, y := snd z))", "using x y"], ["proof (prove)\nusing this:\n  x \\<in> set vs\n  y \\<in> set vs\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>) =\n       merge\n        (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n        ({x, y} \\<union> set vs') (\\<sigma>, \\<rho>(x := fst z, y := snd z))", "by (intro ext) (simp add: merge_def)"], ["proof (state)\nthis:\n  merge (set vs) (set vs') (?\\<sigma>(x := fst z, y := snd z), \\<rho>) =\n  merge (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n   ({x, y} \\<union> set vs') (?\\<sigma>, \\<rho>(x := fst z, y := snd z))\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "hence A: \"(\\<integral>\\<^sup>+\\<sigma>. ?f (merge (set vs) (set vs') (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n                 \\<partial>state_measure (set ?vs) \\<Gamma>) =\n              (\\<integral>\\<^sup>+\\<sigma>. ?f (merge (set ?vs) ({x,y} \\<union> set vs') (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n                   \\<partial>state_measure (set ?vs) \\<Gamma>)\" (is \"_ = \\<integral>\\<^sup>+\\<sigma>. ennreal (?g \\<sigma>) \\<partial>?M\")"], ["proof (prove)\nusing this:\n  merge (set vs) (set vs') (?\\<sigma>(x := fst z, y := snd z), \\<rho>) =\n  merge (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n   ({x, y} \\<union> set vs') (?\\<sigma>, \\<rho>(x := fst z, y := snd z))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs')\n                                (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n                              \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                ({x, y} \\<union> set vs')\n                                (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n                              \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma>", "by (intro nn_integral_cong) simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs')\n                              (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge\n                              (set (filter\n                                     (\\<lambda>z.\n   z \\<noteq> x \\<and> z \\<noteq> y)\n                                     vs))\n                              ({x, y} \\<union> set vs')\n                              (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n                            \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have \\<rho>': \"\\<rho>(x := fst z, y := snd z) \\<in> space (state_measure ({x, y} \\<union> set vs') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho>(x := fst z, y := snd z)\n    \\<in> space (state_measure ({x, y} \\<union> set vs') \\<Gamma>)", "using z \\<rho>"], ["proof (prove)\nusing this:\n  z \\<in> space\n           (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> y))\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<rho>(x := fst z, y := snd z)\n    \\<in> space (state_measure ({x, y} \\<union> set vs') \\<Gamma>)", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  z \\<in> space\n           (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> y))\n  \\<rho>\n  \\<in> space\n         (Pi\\<^sub>M (set vs') (\\<lambda>x. stock_measure (\\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. \\<rho>(x := fst z, y := snd z)\n    \\<in> space\n           (Pi\\<^sub>M ({x, y} \\<union> set vs')\n             (\\<lambda>x. stock_measure (\\<Gamma> x)))", "by (auto simp: space_PiM space_pair_measure split: if_split_asm)"], ["proof (state)\nthis:\n  \\<rho>(x := fst z, y := snd z)\n  \\<in> space (state_measure ({x, y} \\<union> set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have integrable: \"integrable ?M ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable\n     (state_measure\n       (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n       \\<Gamma>)\n     (\\<lambda>\\<sigma>.\n         extract_real\n          (cexpr_sem\n            (merge\n              (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                     vs))\n              ({x, y} \\<union> set vs')\n              (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n            \\<delta>))", "proof (intro integrableI_nonneg[OF _ AE_I2])"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>\\<sigma>.\n        extract_real\n         (cexpr_sem\n           (merge\n             (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                    vs))\n             ({x, y} \\<union> set vs')\n             (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n           \\<delta>))\n    \\<in> borel_measurable\n           (state_measure\n             (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                    vs))\n             \\<Gamma>)\n 2. \\<And>xa.\n       xa \\<in> space\n                 (state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>) \\<Longrightarrow>\n       0 \\<le> extract_real\n                (cexpr_sem\n                  (merge\n                    (set (filter\n                           (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                           vs))\n                    ({x, y} \\<union> set vs')\n                    (xa, \\<rho>(x := fst z, y := snd z)))\n                  \\<delta>)\n 3. \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge\n                                   (set (filter\n    (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                   ({x, y} \\<union> set vs')\n                                   (xa, \\<rho>(x := fst z, y := snd z)))\n                                 \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma>\n    < \\<infinity>", "show \"?g \\<in> borel_measurable ?M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        extract_real\n         (cexpr_sem\n           (merge\n             (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                    vs))\n             ({x, y} \\<union> set vs')\n             (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n           \\<delta>))\n    \\<in> borel_measurable\n           (state_measure\n             (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                    vs))\n             \\<Gamma>)", "using invar \\<rho>'"], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n  \\<rho>(x := fst z, y := snd z)\n  \\<in> space (state_measure ({x, y} \\<union> set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        extract_real\n         (cexpr_sem\n           (merge\n             (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                    vs))\n             ({x, y} \\<union> set vs')\n             (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n           \\<delta>))\n    \\<in> borel_measurable\n           (state_measure\n             (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                    vs))\n             \\<Gamma>)", "by (intro measurable_cexpr_sem') auto"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>.\n      extract_real\n       (cexpr_sem\n         (merge\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n           ({x, y} \\<union> set vs')\n           (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n         \\<delta>))\n  \\<in> borel_measurable\n         (state_measure\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n           \\<Gamma>)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> space\n                 (state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>) \\<Longrightarrow>\n       0 \\<le> extract_real\n                (cexpr_sem\n                  (merge\n                    (set (filter\n                           (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                           vs))\n                    ({x, y} \\<union> set vs')\n                    (xa, \\<rho>(x := fst z, y := snd z)))\n                  \\<delta>)\n 2. \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge\n                                   (set (filter\n    (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                   ({x, y} \\<union> set vs')\n                                   (xa, \\<rho>(x := fst z, y := snd z)))\n                                 \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma>\n    < \\<infinity>", "show \"(\\<integral>\\<^sup>+\\<sigma>. ennreal (?g \\<sigma>) \\<partial>?M) < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                ({x, y} \\<union> set vs')\n                                (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n                              \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma>\n    < \\<infinity>", "using fin A"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs')\n                              (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma> \\<noteq>\n  \\<infinity>\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge (set vs) (set vs')\n                              (\\<sigma>(x := fst z, y := snd z), \\<rho>))\n                            \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge\n                              (set (filter\n                                     (\\<lambda>z.\n   z \\<noteq> x \\<and> z \\<noteq> y)\n                                     vs))\n                              ({x, y} \\<union> set vs')\n                              (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n                            \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                ({x, y} \\<union> set vs')\n                                (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n                              \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma>\n    < \\<infinity>", "by (simp add: top_unique less_top)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       ennreal\n                        (extract_real\n                          (cexpr_sem\n                            (merge\n                              (set (filter\n                                     (\\<lambda>z.\n   z \\<noteq> x \\<and> z \\<noteq> y)\n                                     vs))\n                              ({x, y} \\<union> set vs')\n                              (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n                            \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma>\n  < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> space\n                 (state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>) \\<Longrightarrow>\n       0 \\<le> extract_real\n                (cexpr_sem\n                  (merge\n                    (set (filter\n                           (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                           vs))\n                    ({x, y} \\<union> set vs')\n                    (xa, \\<rho>(x := fst z, y := snd z)))\n                  \\<delta>)", "fix \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> space\n                 (state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>) \\<Longrightarrow>\n       0 \\<le> extract_real\n                (cexpr_sem\n                  (merge\n                    (set (filter\n                           (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                           vs))\n                    ({x, y} \\<union> set vs')\n                    (xa, \\<rho>(x := fst z, y := snd z)))\n                  \\<delta>)", "assume \\<sigma>: \"\\<sigma> \\<in> space ?M\""], ["proof (state)\nthis:\n  \\<sigma>\n  \\<in> space\n         (state_measure\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n           \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> space\n                 (state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>) \\<Longrightarrow>\n       0 \\<le> extract_real\n                (cexpr_sem\n                  (merge\n                    (set (filter\n                           (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                           vs))\n                    ({x, y} \\<union> set vs')\n                    (xa, \\<rho>(x := fst z, y := snd z)))\n                  \\<delta>)", "from x y"], ["proof (chain)\npicking this:\n  x \\<in> set vs\n  y \\<in> set vs", "have \"set ?vs \\<union> ({x,y} \\<union> set vs') = set vs \\<union> set vs'\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n  y \\<in> set vs\n\ngoal (1 subgoal):\n 1. set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n    ({x, y} \\<union> set vs') =\n    set vs \\<union> set vs'", "by auto"], ["proof (state)\nthis:\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n  ({x, y} \\<union> set vs') =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> space\n                 (state_measure\n                   (set (filter\n                          (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                          vs))\n                   \\<Gamma>) \\<Longrightarrow>\n       0 \\<le> extract_real\n                (cexpr_sem\n                  (merge\n                    (set (filter\n                           (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                           vs))\n                    ({x, y} \\<union> set vs')\n                    (xa, \\<rho>(x := fst z, y := snd z)))\n                  \\<delta>)", "thus \"?g \\<sigma> \\<ge> 0\""], ["proof (prove)\nusing this:\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n  ({x, y} \\<union> set vs') =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem\n               (merge\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 ({x, y} \\<union> set vs')\n                 (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n               \\<delta>)", "using merge_in_state_measure[OF \\<sigma> \\<rho>']"], ["proof (prove)\nusing this:\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n  ({x, y} \\<union> set vs') =\n  set vs \\<union> set vs'\n  merge (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n   ({x, y} \\<union> set vs') (\\<sigma>, \\<rho>(x := fst z, y := snd z))\n  \\<in> space\n         (state_measure\n           (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                  vs) \\<union>\n            ({x, y} \\<union> set vs'))\n           \\<Gamma>)\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem\n               (merge\n                 (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                        vs))\n                 ({x, y} \\<union> set vs')\n                 (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n               \\<delta>)", "by (intro nonneg_cexprD[OF invar(4)]) simp_all"], ["proof (state)\nthis:\n  0 \\<le> extract_real\n           (cexpr_sem\n             (merge\n               (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n                      vs))\n               ({x, y} \\<union> set vs')\n               (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n             \\<delta>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integrable\n   (state_measure\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n     \\<Gamma>)\n   (\\<lambda>\\<sigma>.\n       extract_real\n        (cexpr_sem\n          (merge\n            (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n            ({x, y} \\<union> set vs')\n            (\\<sigma>, \\<rho>(x := fst z, y := snd z)))\n          \\<delta>))\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "from x y"], ["proof (chain)\npicking this:\n  x \\<in> set vs\n  y \\<in> set vs", "have B: \"(set ?vs \\<union> ({x, y} \\<union> set vs')) = set vs \\<union> set vs'\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n  y \\<in> set vs\n\ngoal (1 subgoal):\n 1. set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n    ({x, y} \\<union> set vs') =\n    set vs \\<union> set vs'", "by auto"], ["proof (state)\nthis:\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n  ({x, y} \\<union> set vs') =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have nonneg: \"nonneg_cexpr (set [z\\<leftarrow>vs . z \\<noteq> x \\<and> z \\<noteq> y] \\<union> ({x, y} \\<union> set vs')) \\<Gamma> \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_cexpr\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n            vs) \\<union>\n      ({x, y} \\<union> set vs'))\n     \\<Gamma> \\<delta>", "using invar"], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. nonneg_cexpr\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n            vs) \\<union>\n      ({x, y} \\<union> set vs'))\n     \\<Gamma> \\<delta>", "by (subst B) simp"], ["proof (state)\nthis:\n  nonneg_cexpr\n   (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n    ({x, y} \\<union> set vs'))\n   \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have \"ennreal (extract_real (cexpr_sem (case_nat (case_prod PairVal z) \\<rho>) (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n            extract_real (cexpr_sem ((case_nat <|fst z, snd z|> \\<rho>) (Suc x := fst z, Suc y := snd z) \\<circ> Suc)\n                               (integrate_vars \\<Gamma> ?vs \\<delta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem\n         (case_nat (case z of (x, xa) \\<Rightarrow> <|x, xa|>) \\<rho>)\n         (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n    ennreal\n     (extract_real\n       (cexpr_sem\n         ((case_nat <|fst z, snd z|> \\<rho>)\n          (Suc x := fst z, Suc y := snd z) \\<circ> Suc)\n         (integrate_vars \\<Gamma>\n           (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n           \\<delta>)))", "unfolding marg_dens2_cexpr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem\n         (case_nat (case z of (x, xa) \\<Rightarrow> <|x, xa|>) \\<rho>)\n         (cexpr_comp_aux (Suc x) (fst\\<^sub>c (CVar 0))\n           (cexpr_comp_aux (Suc y) (snd\\<^sub>c (CVar 0))\n             (map_vars Suc\n               (integrate_vars \\<Gamma>\n                 (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n                 \\<delta>)))))) =\n    ennreal\n     (extract_real\n       (cexpr_sem\n         ((case_nat <|fst z, snd z|> \\<rho>)\n          (Suc x := fst z, Suc y := snd z) \\<circ> Suc)\n         (integrate_vars \\<Gamma>\n           (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n           \\<delta>)))", "by (simp add: cexpr_sem_cexpr_comp_aux cexpr_sem_map_vars split: prod.split)"], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (case_nat (case z of (x, xa) \\<Rightarrow> <|x, xa|>) \\<rho>)\n       (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n  ennreal\n   (extract_real\n     (cexpr_sem\n       ((case_nat <|fst z, snd z|> \\<rho>)\n        (Suc x := fst z, Suc y := snd z) \\<circ> Suc)\n       (integrate_vars \\<Gamma>\n         (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n         \\<delta>)))\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "also"], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (case_nat (case z of (x, xa) \\<Rightarrow> <|x, xa|>) \\<rho>)\n       (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n  ennreal\n   (extract_real\n     (cexpr_sem\n       ((case_nat <|fst z, snd z|> \\<rho>)\n        (Suc x := fst z, Suc y := snd z) \\<circ> Suc)\n       (integrate_vars \\<Gamma>\n         (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n         \\<delta>)))\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have \"((case_nat <|fst z, snd z|> \\<rho>) (Suc x := fst z, Suc y := snd z)) \\<circ> Suc =\n                   \\<rho>(x := fst z, y := snd z)\" (is \"?\\<rho>1 = ?\\<rho>2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case_nat <|fst z, snd z|> \\<rho>)\n    (Suc x := fst z, Suc y := snd z) \\<circ> Suc =\n    \\<rho>(x := fst z, y := snd z)", "by (intro ext) (simp split: nat.split)"], ["proof (state)\nthis:\n  (case_nat <|fst z, snd z|> \\<rho>)(Suc x := fst z, Suc y := snd z) \\<circ>\n  Suc =\n  \\<rho>(x := fst z, y := snd z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "also"], ["proof (state)\nthis:\n  (case_nat <|fst z, snd z|> \\<rho>)(Suc x := fst z, Suc y := snd z) \\<circ>\n  Suc =\n  \\<rho>(x := fst z, y := snd z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have \"ennreal (extract_real (cexpr_sem (\\<rho>(x := fst z, y := snd z))\n               (integrate_vars \\<Gamma> [z\\<leftarrow>vs . z \\<noteq> x \\<and> z \\<noteq> y] \\<delta>))) =\n             \\<integral>\\<^sup>+xa. ?f (merge (set ?vs) ({x, y} \\<union> set vs') (xa, \\<rho>(x := fst z, y := snd z))) \\<partial>?M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem (\\<rho>(x := fst z, y := snd z))\n         (integrate_vars \\<Gamma>\n           (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n           \\<delta>))) =\n    \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge\n                                   (set (filter\n    (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                   ({x, y} \\<union> set vs')\n                                   (xa, \\<rho>(x := fst z, y := snd z)))\n                                 \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma>", "using invar assms"], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n  cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\n  x \\<in> set vs\n  y \\<in> set vs\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem (\\<rho>(x := fst z, y := snd z))\n         (integrate_vars \\<Gamma>\n           (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n           \\<delta>))) =\n    \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge\n                                   (set (filter\n    (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                   ({x, y} \\<union> set vs')\n                                   (xa, \\<rho>(x := fst z, y := snd z)))\n                                 \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma>", "by (intro cexpr_sem_integrate_vars'[OF \\<rho>' _ _ nonneg integrable]) auto"], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem (\\<rho>(x := fst z, y := snd z))\n       (integrate_vars \\<Gamma>\n         (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n         \\<delta>))) =\n  \\<integral>\\<^sup>+ xa. ennreal\n                           (extract_real\n                             (cexpr_sem\n                               (merge\n                                 (set (filter\n  (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                 ({x, y} \\<union> set vs')\n                                 (xa, \\<rho>(x := fst z, y := snd z)))\n                               \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "also"], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem (\\<rho>(x := fst z, y := snd z))\n       (integrate_vars \\<Gamma>\n         (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n         \\<delta>))) =\n  \\<integral>\\<^sup>+ xa. ennreal\n                           (extract_real\n                             (cexpr_sem\n                               (merge\n                                 (set (filter\n  (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                 ({x, y} \\<union> set vs')\n                                 (xa, \\<rho>(x := fst z, y := snd z)))\n                               \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have C: \"set ?vs = set vs - {x, y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) =\n    set vs - {x, y}", "by auto"], ["proof (state)\nthis:\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) =\n  set vs - {x, y}\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "have \"(\\<integral>\\<^sup>+xa. ?f (merge (set ?vs) ({x, y} \\<union> set vs') (xa, \\<rho>(x := fst z, y := snd z))) \\<partial>?M) =\n                 marg_dens2 (dens_ctxt_\\<alpha> (vs,vs',\\<Gamma>,\\<delta>)) x y \\<rho> (case_prod PairVal z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge\n                                   (set (filter\n    (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                   ({x, y} \\<union> set vs')\n                                   (xa, \\<rho>(x := fst z, y := snd z)))\n                                 \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma> =\n    marg_dens2 (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y \\<rho>\n     (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "unfolding marg_dens2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ xa. ennreal\n                             (extract_real\n                               (cexpr_sem\n                                 (merge\n                                   (set (filter\n    (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                   ({x, y} \\<union> set vs')\n                                   (xa, \\<rho>(x := fst z, y := snd z)))\n                                 \\<delta>))\n                       \\<partial>state_measure\n                                  (set (filter\n   (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                  \\<Gamma> =\n    (case dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>) of\n     (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n       \\<lambda>x y \\<rho> v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>\n                                   (x := fst (extract_pair v),\n                                    y := snd (extract_pair v)),\n                                   \\<rho>))\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma>)\n     x y \\<rho> (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "by (subst A[symmetric], subst C, simp only: dens_ctxt_\\<alpha>_def prod.case)\n         (auto intro!: nn_integral_cong split: prod.split)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ xa. ennreal\n                           (extract_real\n                             (cexpr_sem\n                               (merge\n                                 (set (filter\n  (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                 ({x, y} \\<union> set vs')\n                                 (xa, \\<rho>(x := fst z, y := snd z)))\n                               \\<delta>))\n                     \\<partial>state_measure\n                                (set (filter\n (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n                                \\<Gamma> =\n  marg_dens2 (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y \\<rho>\n   (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> space\n                         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                          stock_measure (\\<Gamma> y));\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             ennreal\n                              (extract_real\n                                (cexpr_sem\n                                  (merge (set vs) (set vs')\n                                    (\\<sigma>(x := fst z, y := snd z),\n                                     \\<rho>))\n                                  \\<delta>))\n                           \\<partial>state_measure\n(set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs))\n\\<Gamma> \\<noteq>\n        \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (case_nat\n                                (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                                \\<rho>)\n                              (marg_dens2_cexpr \\<Gamma> vs x y\n                                \\<delta>))) =\n                         marg_dens2\n                          (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>))\n                          x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "finally"], ["proof (chain)\npicking this:\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (\\<lambda>a.\n           case a of 0 \\<Rightarrow> case z of (a, b) \\<Rightarrow> <|a, b|>\n           | Suc a \\<Rightarrow> \\<rho> a)\n       (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n  marg_dens2 (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y \\<rho>\n   (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "show \"ennreal (extract_real (cexpr_sem (case_nat (case_prod PairVal z) \\<rho>)\n                                            (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2 (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y \\<rho> (case_prod PairVal z)\""], ["proof (prove)\nusing this:\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (\\<lambda>a.\n           case a of 0 \\<Rightarrow> case z of (a, b) \\<Rightarrow> <|a, b|>\n           | Suc a \\<Rightarrow> \\<rho> a)\n       (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n  marg_dens2 (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y \\<rho>\n   (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem\n         (case_nat (case z of (x, xa) \\<Rightarrow> <|x, xa|>) \\<rho>)\n         (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n    marg_dens2 (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y \\<rho>\n     (case z of (x, xa) \\<Rightarrow> <|x, xa|>)", "."], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem\n       (case_nat (case z of (x, xa) \\<Rightarrow> <|x, xa|>) \\<rho>)\n       (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n  marg_dens2 (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y \\<rho>\n   (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n          stock_measure\n           (\\<Gamma>\n             y). ennreal\n                  (extract_real\n                    (cexpr_sem\n                      (case_nat (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                        \\<rho>)\n                      (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                 marg_dens2\n                  (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y\n                  \\<rho> (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "thus ?thesis"], ["proof (prove)\nusing this:\n  AE z in stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n          stock_measure\n           (\\<Gamma>\n             y). ennreal\n                  (extract_real\n                    (cexpr_sem\n                      (case_nat (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                        \\<rho>)\n                      (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                 marg_dens2\n                  (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y\n                  \\<rho> (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n\ngoal (1 subgoal):\n 1. AE z in stock_measure\n             (PRODUCT (\\<Gamma> x)\n               (\\<Gamma>\n                 y)). ennreal\n                       (extract_real\n                         (cexpr_sem (case_nat z \\<rho>)\n                           (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                      marg_dens2\n                       (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x\n                       y \\<rho> z", "by (subst stock_measure.simps, subst AE_embed_measure[OF inj_PairVal]) simp"], ["proof (state)\nthis:\n  AE z in stock_measure\n           (PRODUCT (\\<Gamma> x)\n             (\\<Gamma>\n               y)). ennreal\n                     (extract_real\n                       (cexpr_sem (case_nat z \\<rho>)\n                         (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))) =\n                    marg_dens2\n                     (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) x y\n                     \\<rho> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonneg_cexpr_sem_marg_dens2:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes x: \"x \\<in> set vs\" and y: \"y \\<in> set vs\" and \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  assumes v: \"v \\<in> type_universe (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\"\n  shows \"extract_real (cexpr_sem (case_nat v \\<rho>) (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>)) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "from v"], ["proof (chain)\npicking this:\n  v \\<in> type_universe (PRODUCT (\\<Gamma> x) (\\<Gamma> y))", "obtain a b where v': \"v = <|a, b|>\" \"a \\<in> type_universe (\\<Gamma> x)\" \"b \\<in> type_universe (\\<Gamma> y)\""], ["proof (prove)\nusing this:\n  v \\<in> type_universe (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>v = <|a, b|>; a \\<in> type_universe (\\<Gamma> x);\n         b \\<in> type_universe (\\<Gamma> y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: val_type_eq_PRODUCT)"], ["proof (state)\nthis:\n  v = <|a, b|>\n  a \\<in> type_universe (\\<Gamma> x)\n  b \\<in> type_universe (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "let ?vs = \"filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs\""], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "note invar = cdens_ctxt_invarD[OF assms(1)]"], ["proof (state)\nthis:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "have A: \"((case_nat v \\<rho>) (Suc x := fst (extract_pair v), Suc y := snd (extract_pair v))) \\<circ> Suc =\n               \\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case_nat v \\<rho>)\n    (Suc x := fst (extract_pair v), Suc y := snd (extract_pair v)) \\<circ>\n    Suc =\n    \\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))", "by (intro ext) auto"], ["proof (state)\nthis:\n  (case_nat v \\<rho>)\n  (Suc x := fst (extract_pair v), Suc y := snd (extract_pair v)) \\<circ>\n  Suc =\n  \\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "have B: \"\\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))\n                     \\<in> space (state_measure (set vs' \\<union> {x,y}) \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))\n    \\<in> space (state_measure (set vs' \\<union> {x, y}) \\<Gamma>)", "using x y v' \\<rho>"], ["proof (prove)\nusing this:\n  x \\<in> set vs\n  y \\<in> set vs\n  v = <|a, b|>\n  a \\<in> type_universe (\\<Gamma> x)\n  b \\<in> type_universe (\\<Gamma> y)\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))\n    \\<in> space (state_measure (set vs' \\<union> {x, y}) \\<Gamma>)", "by (auto simp: space_state_measure split: if_split_asm)"], ["proof (state)\nthis:\n  \\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))\n  \\<in> space (state_measure (set vs' \\<union> {x, y}) \\<Gamma>)\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "from x y"], ["proof (chain)\npicking this:\n  x \\<in> set vs\n  y \\<in> set vs", "have \"set ?vs \\<union> (set vs' \\<union> {x, y}) = set vs \\<union> set vs'\""], ["proof (prove)\nusing this:\n  x \\<in> set vs\n  y \\<in> set vs\n\ngoal (1 subgoal):\n 1. set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n    (set vs' \\<union> {x, y}) =\n    set vs \\<union> set vs'", "by auto"], ["proof (state)\nthis:\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n  (set vs' \\<union> {x, y}) =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "with invar"], ["proof (chain)\npicking this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n  (set vs' \\<union> {x, y}) =\n  set vs \\<union> set vs'", "have \"nonneg_cexpr (set ?vs \\<union> (set vs' \\<union> {x, y})) \\<Gamma> \\<delta>\""], ["proof (prove)\nusing this:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n  set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n  (set vs' \\<union> {x, y}) =\n  set vs \\<union> set vs'\n\ngoal (1 subgoal):\n 1. nonneg_cexpr\n     (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y)\n            vs) \\<union>\n      (set vs' \\<union> {x, y}))\n     \\<Gamma> \\<delta>", "by simp"], ["proof (state)\nthis:\n  nonneg_cexpr\n   (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n    (set vs' \\<union> {x, y}))\n   \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  nonneg_cexpr\n   (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n    (set vs' \\<union> {x, y}))\n   \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "using assms invar(1-3) A"], ["proof (prove)\nusing this:\n  nonneg_cexpr\n   (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n    (set vs' \\<union> {x, y}))\n   \\<Gamma> \\<delta>\n  cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\n  x \\<in> set vs\n  y \\<in> set vs\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  v \\<in> type_universe (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  (case_nat v \\<rho>)\n  (Suc x := fst (extract_pair v), Suc y := snd (extract_pair v)) \\<circ>\n  Suc =\n  \\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))", "unfolding marg_dens2_cexpr_def"], ["proof (prove)\nusing this:\n  nonneg_cexpr\n   (set (filter (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs) \\<union>\n    (set vs' \\<union> {x, y}))\n   \\<Gamma> \\<delta>\n  cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\n  x \\<in> set vs\n  y \\<in> set vs\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  v \\<in> type_universe (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  (case_nat v \\<rho>)\n  (Suc x := fst (extract_pair v), Suc y := snd (extract_pair v)) \\<circ>\n  Suc =\n  \\<rho>(x := fst (extract_pair v), y := snd (extract_pair v))\n\ngoal (1 subgoal):\n 1. 0 \\<le> extract_real\n             (cexpr_sem (case_nat v \\<rho>)\n               (cexpr_comp_aux (Suc x) (fst\\<^sub>c (CVar 0))\n                 (cexpr_comp_aux (Suc y) (snd\\<^sub>c (CVar 0))\n                   (map_vars Suc\n                     (integrate_vars \\<Gamma>\n                       (filter\n                         (\\<lambda>z. z \\<noteq> x \\<and> z \\<noteq> y) vs)\n                       \\<delta>)))))", "by (auto simp: cexpr_sem_cexpr_comp_aux cexpr_sem_map_vars intro!: nonneg_cexpr_sem_integrate_vars[OF B])"], ["proof (state)\nthis:\n  0 \\<le> extract_real\n           (cexpr_sem (case_nat v \\<rho>)\n             (marg_dens2_cexpr \\<Gamma> vs x y \\<delta>))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition branch_prob_cexpr :: \"cdens_ctxt \\<Rightarrow> cexpr\" where\n  \"branch_prob_cexpr \\<equiv> \\<lambda>(vs, vs', \\<Gamma>, \\<delta>). integrate_vars \\<Gamma> vs \\<delta>\""], ["", "lemma free_vars_branch_prob_cexpr[simp]:\n    \"free_vars (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)) = free_vars \\<delta> - set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)) =\n    free_vars \\<delta> - set vs", "unfolding branch_prob_cexpr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars\n     (case (vs, vs', \\<Gamma>, \\<delta>) of\n      (vs, vs', \\<Gamma>, \\<delta>) \\<Rightarrow>\n        integrate_vars \\<Gamma> vs \\<delta>) =\n    free_vars \\<delta> - set vs", "by simp"], ["", "lemma cexpr_typing_branch_prob_cexpr[intro]:\n  \"\\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL \\<Longrightarrow> \\<Gamma> \\<turnstile>\\<^sub>c branch_prob_cexpr (vs,vs',\\<Gamma>,\\<delta>) : REAL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL \\<Longrightarrow>\n    \\<Gamma> \\<turnstile>\\<^sub>c\n     branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>) : REAL", "unfolding branch_prob_cexpr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL \\<Longrightarrow>\n    \\<Gamma> \\<turnstile>\\<^sub>c\n     case (vs, vs', \\<Gamma>, \\<delta>) of\n     (vs, vs', \\<Gamma>, \\<delta>) \\<Rightarrow>\n       integrate_vars \\<Gamma> vs \\<delta> :\n     REAL", "by (simp only: prod.case, rule cexpr_typing_integrate_vars)"], ["", "lemma cexpr_sem_branch_prob:\n  assumes \"cdens_ctxt_invar vs vs' \\<Gamma> \\<delta>\"\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\"\n  shows \"ennreal (extract_real (cexpr_sem \\<rho> (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n             branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "note invar = cdens_ctxt_invarD[OF assms(1)]"], ["proof (state)\nthis:\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "interpret density_context \"set vs\" \"set vs'\" \\<Gamma> \"\\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context (set vs) (set vs') \\<Gamma>\n     (\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))", "by (rule density_context_\\<alpha>) fact"], ["proof (state)\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "have \"ennreal (extract_real (cexpr_sem \\<rho> (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n          \\<integral>\\<^sup>+\\<sigma>. extract_real (cexpr_sem (merge (set vs) (set vs') (\\<sigma>, \\<rho>)) \\<delta>)\n                   \\<partial>state_measure (set vs) \\<Gamma>\" (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma>", "using assms(2) invar"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma>", "unfolding branch_prob_cexpr_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n  distinct (vs @ vs')\n  free_vars \\<delta> \\<subseteq> set (vs @ vs')\n  \\<Gamma> \\<turnstile>\\<^sub>c \\<delta> : REAL\n  nonneg_cexpr (set vs \\<union> set vs') \\<Gamma> \\<delta>\n  subprob_cexpr (set vs) (set vs') \\<Gamma> \\<delta>\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (case (vs, vs', \\<Gamma>, \\<delta>) of\n          (vs, vs', \\<Gamma>, \\<delta>) \\<Rightarrow>\n            integrate_vars \\<Gamma> vs \\<delta>))) =\n    \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma>", "by (simp only: prod.case, subst cexpr_sem_integrate_vars')\n       (auto intro!: cdens_ctxt_invar_imp_integrable assms)"], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem \\<rho> (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (x, \\<rho>))\n                              \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma>\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "also"], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem \\<rho> (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (x, \\<rho>))\n                              \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma>\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "have \"... = branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "using \\<rho>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "unfolding dens_ctxt_\\<alpha>_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (set vs') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem\n                                (merge (set vs) (set vs') (x, \\<rho>))\n                                \\<delta>))\n                       \\<partial>state_measure (set vs) \\<Gamma> =\n    branch_prob\n     (case case (vs, vs', \\<Gamma>, \\<delta>) of\n           (vs, vs', \\<Gamma>, \\<delta>) \\<Rightarrow>\n             (set vs, set vs', \\<Gamma>,\n              \\<lambda>\\<sigma>.\n                 extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n      (x, y) \\<Rightarrow>\n        (x, case y of\n            (x, y) \\<Rightarrow>\n              (x, case y of\n                  (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n     \\<rho>", "by (simp only: prod.case branch_prob_altdef[of \\<rho>])"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem\n                              (merge (set vs) (set vs') (x, \\<rho>))\n                              \\<delta>))\n                     \\<partial>state_measure (set vs) \\<Gamma> =\n  branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "finally"], ["proof (chain)\npicking this:\n  ennreal\n   (extract_real\n     (cexpr_sem \\<rho> (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n  branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "show ?thesis"], ["proof (prove)\nusing this:\n  ennreal\n   (extract_real\n     (cexpr_sem \\<rho> (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n  branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>\n\ngoal (1 subgoal):\n 1. ennreal\n     (extract_real\n       (cexpr_sem \\<rho>\n         (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n    branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>", "."], ["proof (state)\nthis:\n  ennreal\n   (extract_real\n     (cexpr_sem \\<rho> (branch_prob_cexpr (vs, vs', \\<Gamma>, \\<delta>)))) =\n  branch_prob (dens_ctxt_\\<alpha> (vs, vs', \\<Gamma>, \\<delta>)) \\<rho>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subprob_imp_subprob_cexpr:\n  assumes \"density_context V V' \\<Gamma> (\\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>))\"\n  shows \"subprob_cexpr V V' \\<Gamma> \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subprob_cexpr V V' \\<Gamma> \\<delta>", "proof (intro subprob_cexprI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "interpret density_context V V' \\<Gamma> \"\\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context V V' \\<Gamma>\n     (\\<lambda>x. ennreal (extract_real (cexpr_sem x \\<delta>)))", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "fix \\<rho>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "assume \\<rho>: \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\""], ["proof (state)\nthis:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "let ?M = \"dens_ctxt_measure (V, V', \\<Gamma>, \\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>)) \\<rho>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"(\\<integral>\\<^sup>+ x. ennreal (extract_real (cexpr_sem (merge V V' (x, \\<rho>)) \\<delta>)) \\<partial>state_measure V \\<Gamma>) =\n                   branch_prob (V, V', \\<Gamma>, \\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>)) \\<rho>\" (is \"?I = _\")"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem (merge V V' (x, \\<rho>)) \\<delta>))\n                       \\<partial>state_measure V \\<Gamma> =\n    branch_prob\n     (case (V, V', \\<Gamma>,\n            \\<lambda>\\<sigma>.\n               extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n      (x, y) \\<Rightarrow>\n        (x, case y of\n            (x, y) \\<Rightarrow>\n              (x, case y of\n                  (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n     \\<rho>", "by (subst branch_prob_altdef[symmetric]) simp_all"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem (merge V V' (x, \\<rho>)) \\<delta>))\n                     \\<partial>state_measure V \\<Gamma> =\n  branch_prob\n   (case (V, V', \\<Gamma>,\n          \\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n    (x, y) \\<Rightarrow>\n      (x, case y of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n   \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem (merge V V' (x, \\<rho>)) \\<delta>))\n                     \\<partial>state_measure V \\<Gamma> =\n  branch_prob\n   (case (V, V', \\<Gamma>,\n          \\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n    (x, y) \\<Rightarrow>\n      (x, case y of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n   \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "have \"... = emeasure ?M (space ?M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. branch_prob\n     (case (V, V', \\<Gamma>,\n            \\<lambda>\\<sigma>.\n               extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n      (x, y) \\<Rightarrow>\n        (x, case y of\n            (x, y) \\<Rightarrow>\n              (x, case y of\n                  (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n     \\<rho> =\n    emeasure\n     (dens_ctxt_measure\n       (case (V, V', \\<Gamma>,\n              \\<lambda>\\<sigma>.\n                 extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n        (x, y) \\<Rightarrow>\n          (x, case y of\n              (x, y) \\<Rightarrow>\n                (x, case y of\n                    (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (case (V, V', \\<Gamma>,\n                \\<lambda>\\<sigma>.\n                   extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow>\n                  (x, case y of\n                      (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n         \\<rho>))", "unfolding branch_prob_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure\n       (case (V, V', \\<Gamma>,\n              \\<lambda>\\<sigma>.\n                 extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n        (x, y) \\<Rightarrow>\n          (x, case y of\n              (x, y) \\<Rightarrow>\n                (x, case y of\n                    (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (case (V, V', \\<Gamma>,\n                \\<lambda>\\<sigma>.\n                   extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow>\n                  (x, case y of\n                      (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n         \\<rho>)) =\n    emeasure\n     (dens_ctxt_measure\n       (case (V, V', \\<Gamma>,\n              \\<lambda>\\<sigma>.\n                 extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n        (x, y) \\<Rightarrow>\n          (x, case y of\n              (x, y) \\<Rightarrow>\n                (x, case y of\n                    (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (case (V, V', \\<Gamma>,\n                \\<lambda>\\<sigma>.\n                   extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow>\n                  (x, case y of\n                      (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n         \\<rho>))", "by simp"], ["proof (state)\nthis:\n  branch_prob\n   (case (V, V', \\<Gamma>,\n          \\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n    (x, y) \\<Rightarrow>\n      (x, case y of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n   \\<rho> =\n  emeasure\n   (dens_ctxt_measure\n     (case (V, V', \\<Gamma>,\n            \\<lambda>\\<sigma>.\n               extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n      (x, y) \\<Rightarrow>\n        (x, case y of\n            (x, y) \\<Rightarrow>\n              (x, case y of\n                  (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (case (V, V', \\<Gamma>,\n              \\<lambda>\\<sigma>.\n                 extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n        (x, y) \\<Rightarrow>\n          (x, case y of\n              (x, y) \\<Rightarrow>\n                (x, case y of\n                    (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n       \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "also"], ["proof (state)\nthis:\n  branch_prob\n   (case (V, V', \\<Gamma>,\n          \\<lambda>\\<sigma>. extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n    (x, y) \\<Rightarrow>\n      (x, case y of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n   \\<rho> =\n  emeasure\n   (dens_ctxt_measure\n     (case (V, V', \\<Gamma>,\n            \\<lambda>\\<sigma>.\n               extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n      (x, y) \\<Rightarrow>\n        (x, case y of\n            (x, y) \\<Rightarrow>\n              (x, case y of\n                  (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (case (V, V', \\<Gamma>,\n              \\<lambda>\\<sigma>.\n                 extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n        (x, y) \\<Rightarrow>\n          (x, case y of\n              (x, y) \\<Rightarrow>\n                (x, case y of\n                    (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n       \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "have \"... \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure\n       (case (V, V', \\<Gamma>,\n              \\<lambda>\\<sigma>.\n                 extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n        (x, y) \\<Rightarrow>\n          (x, case y of\n              (x, y) \\<Rightarrow>\n                (x, case y of\n                    (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (case (V, V', \\<Gamma>,\n                \\<lambda>\\<sigma>.\n                   extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n          (x, y) \\<Rightarrow>\n            (x, case y of\n                (x, y) \\<Rightarrow>\n                  (x, case y of\n                      (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n         \\<rho>))\n    \\<le> 1", "by (rule subprob_space.emeasure_space_le_1) (simp add: subprob_space_dens \\<rho>)"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure\n     (case (V, V', \\<Gamma>,\n            \\<lambda>\\<sigma>.\n               extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n      (x, y) \\<Rightarrow>\n        (x, case y of\n            (x, y) \\<Rightarrow>\n              (x, case y of\n                  (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (case (V, V', \\<Gamma>,\n              \\<lambda>\\<sigma>.\n                 extract_real (cexpr_sem \\<sigma> \\<delta>)) of\n        (x, y) \\<Rightarrow>\n          (x, case y of\n              (x, y) \\<Rightarrow>\n                (x, case y of\n                    (x, y) \\<Rightarrow> (x, \\<lambda>x. ennreal (y x)))))\n       \\<rho>))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ x. ennreal\n                               (extract_real\n                                 (cexpr_sem (merge V V' (x, \\<rho>))\n                                   \\<delta>))\n                          \\<partial>state_measure V \\<Gamma>\n       \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem (merge V V' (x, \\<rho>)) \\<delta>))\n                     \\<partial>state_measure V \\<Gamma>\n  \\<le> 1", "show \"?I \\<le> 1\""], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem (merge V V' (x, \\<rho>)) \\<delta>))\n                     \\<partial>state_measure V \\<Gamma>\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (extract_real\n                              (cexpr_sem (merge V V' (x, \\<rho>)) \\<delta>))\n                       \\<partial>state_measure V \\<Gamma>\n    \\<le> 1", "."], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (extract_real\n                            (cexpr_sem (merge V V' (x, \\<rho>)) \\<delta>))\n                     \\<partial>state_measure V \\<Gamma>\n  \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}