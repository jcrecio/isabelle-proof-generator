{"file_name": "/home/qj213/afp-2021-10-22/thys/Density_Compiler/PDF_Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Density_Compiler", "problem_names": ["lemma measurable_subprob_algebra_density:\n  assumes \"sigma_finite_measure N\"\n  assumes \"space N \\<noteq> {}\"\n  assumes [measurable]: \"case_prod f \\<in> borel_measurable (M \\<Otimes>\\<^sub>M N)\"\n  assumes \"\\<And>x. x \\<in> space M \\<Longrightarrow> (\\<integral>\\<^sup>+y. f x y \\<partial>N) \\<le> 1\"\n  shows \"(\\<lambda>x. density N (f x)) \\<in> measurable M (subprob_algebra N)\"", "lemma measurable_bernoulli_density[measurable]:\n  \"case_prod bernoulli_density \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)\"", "lemma measurable_bernoulli[measurable]: \"bernoulli \\<in> measurable REAL (subprob_algebra BOOL)\"", "lemma measurable_uniform_density_int[measurable]:\n  \"(case_prod uniform_int_density)\n       \\<in> borel_measurable ((count_space UNIV \\<Otimes>\\<^sub>M count_space UNIV) \\<Otimes>\\<^sub>M count_space UNIV)\"", "lemma measurable_uniform_density_real[measurable]:\n  \"(case_prod uniform_real_density) \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\"", "lemma if_bounded: \"(if a \\<le> i \\<and> i \\<le> b then v else 0) = (v::real) * indicator {a .. b} i\"", "lemma measurable_uniform_int[measurable]:\n  \"uniform_int \\<in> measurable (PRODUCT INTEG INTEG) (subprob_algebra INTEG)\"", "lemma density_cong':\n  \"(\\<And>x. x \\<in> space M \\<Longrightarrow> f x = g x) \\<Longrightarrow> density M f = density M g\"", "lemma measurable_uniform_real[measurable]:\n  \"uniform_real \\<in> measurable (PRODUCT REAL REAL) (subprob_algebra REAL)\"", "lemma measurable_gaussian_density[measurable]:\n  \"case_prod gaussian_density \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\"", "lemma measurable_gaussian[measurable]: \"gaussian \\<in> measurable (PRODUCT REAL REAL) (subprob_algebra REAL)\"", "lemma measurable_poisson_density'[measurable]:\n    \"case_prod poisson_density' \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)\"", "lemma measurable_poisson[measurable]: \"poisson \\<in> measurable REAL (subprob_algebra INTEG)\"", "lemma free_vars_expr_code[code]:\n  \"free_vars (e::expr) = free_vars_expr_code e\"", "lemma measurable_dist_measure[measurable]:\n  \"dist_measure d \\<in> measurable (dist_param_type d) (subprob_algebra (dist_result_type d))\"", "lemma sets_dist_measure[simp]:\n  \"val_type x = dist_param_type dst \\<Longrightarrow>\n       sets (dist_measure dst x) = sets (stock_measure (dist_result_type dst))\"", "lemma space_dist_measure[simp]:\n  \"val_type x = dist_param_type dst \\<Longrightarrow>\n       space (dist_measure dst x) = type_universe (dist_result_type dst)\"", "lemma measurable_dist_dens[measurable]:\n    assumes \"f \\<in> measurable M (stock_measure (dist_param_type dst))\" (is \"_ \\<in> measurable M ?N\")\n    assumes \"g \\<in> measurable M (stock_measure (dist_result_type dst))\" (is \"_ \\<in> measurable M ?R\")\n    shows \"(\\<lambda>x. dist_dens dst (f x) (g x)) \\<in> borel_measurable M\"", "lemma dist_measure_has_density:\n  \"v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n       has_density (dist_measure dst v) (stock_measure (dist_result_type dst)) (dist_dens dst v)\"", "lemma subprob_space_dist_measure:\n    \"v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow> subprob_space (dist_measure dst v)\"", "lemma dist_measure_has_subprob_density:\n  \"v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n       has_subprob_density (dist_measure dst v) (stock_measure (dist_result_type dst)) (dist_dens dst v)\"", "lemma dist_dens_integral_space:\n  assumes \"v \\<in> type_universe (dist_param_type dst)\"\n  shows \"(\\<integral>\\<^sup>+u. dist_dens dst v u \\<partial>stock_measure (dist_result_type dst)) \\<le> 1\"", "lemma expr_typing_cong':\n  \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> (\\<And>x. x \\<in> free_vars e \\<Longrightarrow> \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow> \\<Gamma>' \\<turnstile> e : t\"", "lemma expr_typing_cong:\n  \"(\\<And>x. x \\<in> free_vars e \\<Longrightarrow> \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow> \\<Gamma> \\<turnstile> e : t \\<longleftrightarrow> \\<Gamma>' \\<turnstile> e : t\"", "lemma expr_typing_unique:\n  \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow> t = t'\"", "lemma expr_type_Some_iff: \"expr_type \\<Gamma> e = Some t \\<longleftrightarrow> \\<Gamma> \\<turnstile> e : t\"", "lemmas expr_typing_code[code_unfold] = expr_type_Some_iff[symmetric]", "lemma countable_type_countable[dest]:\n    \"countable_type t \\<Longrightarrow> countable (space (stock_measure t))\"", "lemma countable_type_imp_count_space:\n  \"countable_type t \\<Longrightarrow> stock_measure t = count_space (type_universe t)\"", "lemma return_val_countable:\n  assumes \"countable_type (val_type v)\"\n  shows \"return_val v = density (stock_measure (val_type v)) (indicator {v})\" (is \"?M1 = ?M2\")", "lemma measurable_bool_to_int[measurable]:\n  \"bool_to_int \\<in> measurable (count_space UNIV) (count_space UNIV)\"", "lemma measurable_bool_to_real[measurable]:\n  \"bool_to_real \\<in> borel_measurable (count_space UNIV)\"", "lemma safe_ln_gt_0[simp]: \"x > 0 \\<Longrightarrow> safe_ln x = ln x\"", "lemma borel_measurable_safe_ln[measurable]: \"safe_ln \\<in> borel_measurable borel\"", "lemma safe_sqrt_ge_0[simp]: \"x \\<ge> 0 \\<Longrightarrow> safe_sqrt x = sqrt x\"", "lemma borel_measurable_safe_sqrt[measurable]: \"safe_sqrt \\<in> borel_measurable borel\"", "lemma expr_sem_pair_vars: \"expr_sem \\<sigma> <Var x, Var y> = return_val <|\\<sigma> x, \\<sigma> y|>\"", "lemma op_sem_val_type:\n    \"op_type oper (val_type v) = Some t' \\<Longrightarrow> val_type (op_sem oper v) = t'\"", "lemma sets_expr_sem:\n  \"\\<Gamma> \\<turnstile> w : t \\<Longrightarrow> (\\<forall>x \\<in> free_vars w. val_type (\\<sigma> x) = \\<Gamma> x) \\<Longrightarrow>\n       sets (expr_sem \\<sigma> w) = sets (stock_measure t)\"", "lemma space_expr_sem:\n    \"\\<Gamma> \\<turnstile> w : t \\<Longrightarrow> (\\<forall>x \\<in> free_vars w. val_type (\\<sigma> x) = \\<Gamma> x)\n      \\<Longrightarrow> space (expr_sem \\<sigma> w) = type_universe t\"", "lemma measurable_expr_sem_eq:\n    \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> \\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow> free_vars e \\<subseteq> V \\<Longrightarrow>\n       measurable (expr_sem \\<sigma> e) = measurable (stock_measure t)\"", "lemma measurable_expr_semI:\n    \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> \\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow> free_vars e \\<subseteq> V \\<Longrightarrow>\n       f \\<in> measurable (stock_measure t) M \\<Longrightarrow> f \\<in> measurable (expr_sem \\<sigma> e) M\"", "lemma expr_sem_eq_on_vars:\n  \"(\\<And>x. x\\<in>free_vars e \\<Longrightarrow> \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 e = expr_sem \\<sigma>\\<^sub>2 e\"", "lemma borel_measurable_eq[measurable (raw)]:\n  assumes [measurable]: \"f \\<in> borel_measurable M\" \"g \\<in> borel_measurable M\"\n  shows \"Measurable.pred M (\\<lambda>x. f x = (g x::real))\"", "lemma measurable_equals:\n  \"(\\<lambda>(x,y). x = y) \\<in> measurable (stock_measure t \\<Otimes>\\<^sub>M stock_measure t) (count_space UNIV)\"", "lemma measurable_equals_stock_measure[measurable (raw)]:\n  assumes \"f \\<in> measurable M (stock_measure t)\" \"g \\<in> measurable M (stock_measure t)\"\n  shows \"Measurable.pred M (\\<lambda>x. f x = g x)\"", "lemma measurable_op_sem:\n  assumes \"op_type oper t = Some t'\"\n  shows \"op_sem oper \\<in> measurable (stock_measure t) (stock_measure t')\"", "lemma shift_var_set_0[simp]: \"0 \\<in> shift_var_set V\"", "lemma shift_var_set_Suc[simp]: \"Suc x \\<in> shift_var_set V \\<longleftrightarrow> x \\<in> V\"", "lemma case_nat_update_0[simp]: \"(case_nat x \\<sigma>)(0 := y) = case_nat y \\<sigma>\"", "lemma case_nat_delete_var_1[simp]:\n    \"case_nat x (case_nat y \\<sigma>) \\<circ> case_nat 0 (\\<lambda>x. Suc (Suc x)) = case_nat x \\<sigma>\"", "lemma delete_var_1_vimage[simp]:\n    \"case_nat 0 (\\<lambda>x. Suc (Suc x)) -` (shift_var_set (shift_var_set V)) = shift_var_set V\"", "lemma measurable_case_nat[measurable]:\n  assumes \"g \\<in> measurable R N\" \"h \\<in> measurable R (Pi\\<^sub>M V M)\"\n  shows \"(\\<lambda>x. case_nat (g x) (h x)) \\<in> measurable R (Pi\\<^sub>M (shift_var_set V) (case_nat N M))\"", "lemma measurable_case_nat'[measurable]:\n  assumes \"g \\<in> measurable R (stock_measure t)\" \"h \\<in> measurable R (state_measure V \\<Gamma>)\"\n  shows \"(\\<lambda>x. case_nat (g x) (h x)) \\<in>\n           measurable R (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\"", "lemma case_nat_in_state_measure[intro]:\n  assumes \"x \\<in> type_universe t1\" \"\\<sigma> \\<in> space (state_measure V \\<Gamma>)\"\n  shows \"case_nat x \\<sigma> \\<in> space (state_measure (shift_var_set V) (case_nat t1 \\<Gamma>))\"", "lemma subset_shift_var_set:\n    \"Suc -` A \\<subseteq> V \\<Longrightarrow> A \\<subseteq> shift_var_set V\"", "lemma measurable_expr_sem[measurable]:\n  assumes \"\\<Gamma> \\<turnstile> e : t\" and \"free_vars e \\<subseteq> V\"\n  shows \"(\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<in> measurable (state_measure V \\<Gamma>)\n                                         (subprob_algebra (stock_measure t))\"", "lemma measurable_expr_sem_rf[measurable]:\n  \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> randomfree e \\<Longrightarrow> free_vars e \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e) \\<in> measurable (state_measure V \\<Gamma>) (stock_measure t)\"", "lemma expr_sem_rf_sound:\n  \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> randomfree e \\<Longrightarrow> free_vars e \\<subseteq> V \\<Longrightarrow> \\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\"", "lemma val_type_expr_sem_rf:\n  assumes \"\\<Gamma> \\<turnstile> e : t\" \"randomfree e\" \"free_vars e \\<subseteq> V\" \"\\<sigma> \\<in> space (state_measure V \\<Gamma>)\"\n  shows \"val_type (expr_sem_rf \\<sigma> e) = t\"", "lemma expr_sem_rf_eq_on_vars:\n  \"(\\<And>x. x\\<in>free_vars e \\<Longrightarrow> \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow> expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e\""], "translations": [["", "lemma measurable_subprob_algebra_density:\n  assumes \"sigma_finite_measure N\"\n  assumes \"space N \\<noteq> {}\"\n  assumes [measurable]: \"case_prod f \\<in> borel_measurable (M \\<Otimes>\\<^sub>M N)\"\n  assumes \"\\<And>x. x \\<in> space M \\<Longrightarrow> (\\<integral>\\<^sup>+y. f x y \\<partial>N) \\<le> 1\"\n  shows \"(\\<lambda>x. density N (f x)) \\<in> measurable M (subprob_algebra N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. density N (f x))\n    \\<in> M \\<rightarrow>\\<^sub>M subprob_algebra N", "proof (rule measurable_subprob_algebra)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> subprob_space (density N (f a))\n 2. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 3. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> subprob_space (density N (f a))\n 2. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 3. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "assume \"x \\<in> space M\""], ["proof (state)\nthis:\n  x \\<in> space M\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> subprob_space (density N (f a))\n 2. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 3. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "with assms"], ["proof (chain)\npicking this:\n  sigma_finite_measure N\n  space N \\<noteq> {}\n  (\\<lambda>(x, y). f x y) \\<in> borel_measurable (M \\<Otimes>\\<^sub>M N)\n  ?x \\<in> space M \\<Longrightarrow> integral\\<^sup>N N (f ?x) \\<le> 1\n  x \\<in> space M", "show \"subprob_space (density N (f x))\""], ["proof (prove)\nusing this:\n  sigma_finite_measure N\n  space N \\<noteq> {}\n  (\\<lambda>(x, y). f x y) \\<in> borel_measurable (M \\<Otimes>\\<^sub>M N)\n  ?x \\<in> space M \\<Longrightarrow> integral\\<^sup>N N (f ?x) \\<le> 1\n  x \\<in> space M\n\ngoal (1 subgoal):\n 1. subprob_space (density N (f x))", "by (intro subprob_spaceI) (auto simp: emeasure_density cong: nn_integral_cong')"], ["proof (state)\nthis:\n  subprob_space (density N (f x))\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "interpret sigma_finite_measure N"], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure N", "by fact"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "assume X: \"X \\<in> sets N\""], ["proof (state)\nthis:\n  X \\<in> sets N\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "hence \"(\\<lambda>x. (\\<integral>\\<^sup>+y. f x y * indicator X y \\<partial>N)) \\<in> borel_measurable M\""], ["proof (prove)\nusing this:\n  X \\<in> sets N\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. set_nn_integral N X (f x)) \\<in> borel_measurable M", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. set_nn_integral N X (f x)) \\<in> borel_measurable M\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>x. set_nn_integral N X (f x)) \\<in> borel_measurable M\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "from X and assms"], ["proof (chain)\npicking this:\n  X \\<in> sets N\n  sigma_finite_measure N\n  space N \\<noteq> {}\n  (\\<lambda>(x, y). f x y) \\<in> borel_measurable (M \\<Otimes>\\<^sub>M N)\n  ?x \\<in> space M \\<Longrightarrow> integral\\<^sup>N N (f ?x) \\<le> 1", "have\n      \"\\<And>x. x \\<in> space M \\<Longrightarrow> emeasure (density N (f x)) X = (\\<integral>\\<^sup>+y. f x y * indicator X y \\<partial>N)\""], ["proof (prove)\nusing this:\n  X \\<in> sets N\n  sigma_finite_measure N\n  space N \\<noteq> {}\n  (\\<lambda>(x, y). f x y) \\<in> borel_measurable (M \\<Otimes>\\<^sub>M N)\n  ?x \\<in> space M \\<Longrightarrow> integral\\<^sup>N N (f ?x) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space M \\<Longrightarrow>\n       emeasure (density N (f x)) X = set_nn_integral N X (f x)", "by (simp add: emeasure_density)"], ["proof (state)\nthis:\n  ?x \\<in> space M \\<Longrightarrow>\n  emeasure (density N (f ?x)) X = set_nn_integral N X (f ?x)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       (\\<lambda>a. emeasure (density N (f a)) A) \\<in> borel_measurable M", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>x. set_nn_integral N X (f x)) \\<in> borel_measurable M\n  ?x \\<in> space M \\<Longrightarrow>\n  emeasure (density N (f ?x)) X = set_nn_integral N X (f ?x)", "show \"(\\<lambda>x. emeasure (density N (f x)) X) \\<in> borel_measurable M\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. set_nn_integral N X (f x)) \\<in> borel_measurable M\n  ?x \\<in> space M \\<Longrightarrow>\n  emeasure (density N (f ?x)) X = set_nn_integral N X (f ?x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. emeasure (density N (f x)) X) \\<in> borel_measurable M", "by (simp only: cong: measurable_cong)"], ["proof (state)\nthis:\n  (\\<lambda>x. emeasure (density N (f x)) X) \\<in> borel_measurable M\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> space M \\<Longrightarrow> sets (density N (f a)) = sets N", "qed simp_all"], ["", "section \\<open>Built-in Probability Distributions\\<close>"], ["", "subsection \\<open>Bernoulli\\<close>"], ["", "definition bernoulli_density :: \"real \\<Rightarrow> bool \\<Rightarrow> ennreal\" where\n  \"bernoulli_density p b = (if p \\<in> {0..1} then (if b then p else 1 - p) else 0)\""], ["", "definition bernoulli :: \"val \\<Rightarrow> val measure\" where\n  \"bernoulli p = density BOOL (bernoulli_density (extract_real p) o extract_bool)\""], ["", "lemma measurable_bernoulli_density[measurable]:\n  \"case_prod bernoulli_density \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). bernoulli_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)", "unfolding bernoulli_density_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(p, b).\n        ennreal (if p \\<in> {0..1} then if b then p else 1 - p else 0))\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)", "by measurable"], ["", "lemma measurable_bernoulli[measurable]: \"bernoulli \\<in> measurable REAL (subprob_algebra BOOL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli\n    \\<in> stock_measure REAL \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure BOOL)", "unfolding bernoulli_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p.\n        density (stock_measure BOOL)\n         (bernoulli_density (extract_real p) \\<circ> extract_bool))\n    \\<in> stock_measure REAL \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure BOOL)", "by (auto intro!: measurable_subprob_algebra_density\n           simp: measurable_split_conv nn_integral_BoolVal bernoulli_density_def\n             ennreal_plus[symmetric]\n           simp del: ennreal_plus)"], ["", "subsection \\<open>Uniform\\<close>"], ["", "definition uniform_real_density :: \"real \\<times> real \\<Rightarrow> real \\<Rightarrow> ennreal\" where\n  \"uniform_real_density \\<equiv> \\<lambda>(a,b) x. ennreal (if a < b \\<and> x \\<in> {a..b} then inverse (b - a) else 0)\""], ["", "definition uniform_int_density :: \"int \\<times> int \\<Rightarrow> int \\<Rightarrow> ennreal\" where\n  \"uniform_int_density \\<equiv> \\<lambda>(a,b) x. (if x \\<in> {a..b} then inverse (nat (b - a + 1)) else 0)\""], ["", "lemma measurable_uniform_density_int[measurable]:\n  \"(case_prod uniform_int_density)\n       \\<in> borel_measurable ((count_space UNIV \\<Otimes>\\<^sub>M count_space UNIV) \\<Otimes>\\<^sub>M count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). uniform_int_density x y)\n    \\<in> borel_measurable\n           ((count_space UNIV \\<Otimes>\\<^sub>M\n             count_space UNIV) \\<Otimes>\\<^sub>M\n            count_space UNIV)", "by (simp add: pair_measure_countable)"], ["", "lemma measurable_uniform_density_real[measurable]:\n  \"(case_prod uniform_real_density) \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). uniform_real_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). uniform_real_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "have \"(case_prod uniform_real_density) =\n            (\\<lambda>x. uniform_real_density (fst (fst x), snd (fst x)) (snd x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). uniform_real_density x y) =\n    (\\<lambda>x. uniform_real_density (fst (fst x), snd (fst x)) (snd x))", "by (rule ext) (simp split: prod.split)"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). uniform_real_density x y) =\n  (\\<lambda>x. uniform_real_density (fst (fst x), snd (fst x)) (snd x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). uniform_real_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "also"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). uniform_real_density x y) =\n  (\\<lambda>x. uniform_real_density (fst (fst x), snd (fst x)) (snd x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). uniform_real_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "have \"... \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. uniform_real_density (fst (fst x), snd (fst x)) (snd x))\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "unfolding uniform_real_density_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case (fst (fst x), snd (fst x)) of\n         (a, b) \\<Rightarrow>\n           \\<lambda>x.\n              ennreal\n               (if a < b \\<and> x \\<in> {a..b} then inverse (b - a) else 0))\n         (snd x))\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "by (simp only: prod.case) (simp add: borel_prod[symmetric])"], ["proof (state)\nthis:\n  (\\<lambda>x. uniform_real_density (fst (fst x), snd (fst x)) (snd x))\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). uniform_real_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>(x, y). uniform_real_density x y)\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>(x, y). uniform_real_density x y)\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). uniform_real_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "."], ["proof (state)\nthis:\n  (\\<lambda>(x, y). uniform_real_density x y)\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition uniform_int :: \"val \\<Rightarrow> val measure\" where\n  \"uniform_int = map_int_pair (\\<lambda>l u. density INTEG (uniform_int_density (l,u) o extract_int)) (\\<lambda>_. undefined)\""], ["", "definition uniform_real :: \"val \\<Rightarrow> val measure\" where\n  \"uniform_real = map_real_pair (\\<lambda>l u. density REAL (uniform_real_density (l,u) o extract_real)) (\\<lambda>_. undefined)\""], ["", "lemma if_bounded: \"(if a \\<le> i \\<and> i \\<le> b then v else 0) = (v::real) * indicator {a .. b} i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if a \\<le> i \\<and> i \\<le> b then v else 0) =\n    v * indicat_real {a..b} i", "by auto"], ["", "lemma measurable_uniform_int[measurable]:\n  \"uniform_int \\<in> measurable (PRODUCT INTEG INTEG) (subprob_algebra INTEG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_int\n    \\<in> stock_measure (PRODUCT INTEG INTEG) \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure INTEG)", "unfolding uniform_int_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_int_pair\n     (\\<lambda>l u.\n         density (stock_measure INTEG)\n          (uniform_int_density (l, u) \\<circ> extract_int))\n     (\\<lambda>_. undefined)\n    \\<in> stock_measure (PRODUCT INTEG INTEG) \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure INTEG)", "proof (rule measurable measurable_subprob_algebra_density)+"], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (uniform_int_density (fst x, snd x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           ((count_space UNIV \\<Otimes>\\<^sub>M\n             count_space UNIV) \\<Otimes>\\<^sub>M\n            stock_measure INTEG)\n 4. \\<And>x.\n       x \\<in> space\n                (count_space UNIV \\<Otimes>\\<^sub>M\n                 count_space UNIV) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n       \\<le> 1", "fix x :: \"int \\<times> int\""], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (uniform_int_density (fst x, snd x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           ((count_space UNIV \\<Otimes>\\<^sub>M\n             count_space UNIV) \\<Otimes>\\<^sub>M\n            stock_measure INTEG)\n 4. \\<And>x.\n       x \\<in> space\n                (count_space UNIV \\<Otimes>\\<^sub>M\n                 count_space UNIV) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n       \\<le> 1", "show \"integral\\<^sup>N INTEG (uniform_int_density (fst x, snd x) \\<circ> extract_int) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure INTEG)\n     (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n    \\<le> 1", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure INTEG)\n     (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure INTEG)\n     (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n    \\<le> 1", "assume \"fst x \\<le> snd x\""], ["proof (state)\nthis:\n  fst x \\<le> snd x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure INTEG)\n     (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure INTEG)\n     (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n    \\<le> 1", "then"], ["proof (chain)\npicking this:\n  fst x \\<le> snd x", "show ?thesis"], ["proof (prove)\nusing this:\n  fst x \\<le> snd x\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure INTEG)\n     (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n    \\<le> 1", "by (cases x)\n         (simp add: uniform_int_density_def comp_def nn_integral_IntVal nn_integral_cmult\n                    nn_integral_set_ennreal[symmetric] ennreal_of_nat_eq_real_of_nat\n                    if_bounded[where 'a=int] ennreal_mult[symmetric]\n               del: ennreal_plus)"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure INTEG)\n   (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> fst x \\<le> snd x \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure INTEG)\n     (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n    \\<le> 1", "qed (simp add: uniform_int_density_def comp_def split_beta' if_bounded[where 'a=int])"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure INTEG)\n   (uniform_int_density (fst x, snd x) \\<circ> extract_int)\n  \\<le> 1\n\ngoal (3 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (uniform_int_density (fst x, snd x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           ((count_space UNIV \\<Otimes>\\<^sub>M\n             count_space UNIV) \\<Otimes>\\<^sub>M\n            stock_measure INTEG)", "qed (auto simp: comp_def)"], ["", "lemma density_cong':\n  \"(\\<And>x. x \\<in> space M \\<Longrightarrow> f x = g x) \\<Longrightarrow> density M f = density M g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> space M \\<Longrightarrow> f x = g x) \\<Longrightarrow>\n    density M f = density M g", "unfolding density_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> space M \\<Longrightarrow> f x = g x) \\<Longrightarrow>\n    measure_of (space M) (sets M) (\\<lambda>A. set_nn_integral M A f) =\n    measure_of (space M) (sets M) (\\<lambda>A. set_nn_integral M A g)", "by (auto dest: sets.sets_into_space intro!: nn_integral_cong measure_of_eq)"], ["", "lemma measurable_uniform_real[measurable]:\n  \"uniform_real \\<in> measurable (PRODUCT REAL REAL) (subprob_algebra REAL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_real\n    \\<in> stock_measure (PRODUCT REAL REAL) \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure REAL)", "unfolding uniform_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_real_pair\n     (\\<lambda>l u.\n         density (stock_measure REAL)\n          (uniform_real_density (l, u) \\<circ> extract_real))\n     (\\<lambda>_. undefined)\n    \\<in> stock_measure (PRODUCT REAL REAL) \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure REAL)", "proof (rule measurable measurable_subprob_algebra_density)+"], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure REAL)\n 2. space (stock_measure REAL) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (uniform_real_density (fst x, snd x) \\<circ> extract_real) y)\n    \\<in> borel_measurable\n           ((borel \\<Otimes>\\<^sub>M borel) \\<Otimes>\\<^sub>M\n            stock_measure REAL)\n 4. \\<And>x.\n       x \\<in> space (borel \\<Otimes>\\<^sub>M borel) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure REAL)\n        (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n       \\<le> 1", "fix x :: \"real \\<times> real\""], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure REAL)\n 2. space (stock_measure REAL) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (uniform_real_density (fst x, snd x) \\<circ> extract_real) y)\n    \\<in> borel_measurable\n           ((borel \\<Otimes>\\<^sub>M borel) \\<Otimes>\\<^sub>M\n            stock_measure REAL)\n 4. \\<And>x.\n       x \\<in> space (borel \\<Otimes>\\<^sub>M borel) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure REAL)\n        (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n       \\<le> 1", "obtain l u where [simp]: \"x = (l, u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l u. x = (l, u) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases x) auto"], ["proof (state)\nthis:\n  x = (l, u)\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure REAL)\n 2. space (stock_measure REAL) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (uniform_real_density (fst x, snd x) \\<circ> extract_real) y)\n    \\<in> borel_measurable\n           ((borel \\<Otimes>\\<^sub>M borel) \\<Otimes>\\<^sub>M\n            stock_measure REAL)\n 4. \\<And>x.\n       x \\<in> space (borel \\<Otimes>\\<^sub>M borel) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure REAL)\n        (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n       \\<le> 1", "show \"(\\<integral>\\<^sup>+y. (uniform_real_density (fst x, snd x) o extract_real) y \\<partial>REAL) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure REAL)\n     (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "assume \"l < u\""], ["proof (state)\nthis:\n  l < u\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "then"], ["proof (chain)\npicking this:\n  l < u", "show ?thesis"], ["proof (prove)\nusing this:\n  l < u\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure REAL)\n     (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "by (simp add: nn_integral_RealVal uniform_real_density_def if_bounded nn_integral_cmult\n                    nn_integral_set_ennreal[symmetric] ennreal_mult[symmetric])"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure REAL)\n   (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> l < u \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "qed (simp add: uniform_real_density_def comp_def)"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure REAL)\n   (uniform_real_density (fst x, snd x) \\<circ> extract_real)\n  \\<le> 1\n\ngoal (3 subgoals):\n 1. sigma_finite_measure (stock_measure REAL)\n 2. space (stock_measure REAL) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (uniform_real_density (fst x, snd x) \\<circ> extract_real) y)\n    \\<in> borel_measurable\n           ((borel \\<Otimes>\\<^sub>M borel) \\<Otimes>\\<^sub>M\n            stock_measure REAL)", "qed (auto simp: comp_def borel_prod)"], ["", "subsection \\<open>Gaussian\\<close>"], ["", "definition gaussian_density :: \"real \\<times> real \\<Rightarrow> real \\<Rightarrow> ennreal\" where\n  \"gaussian_density \\<equiv>\n      \\<lambda>(m,s) x. (if s > 0 then exp (-(x - m)\\<^sup>2 / (2 * s\\<^sup>2)) / sqrt (2 * pi * s\\<^sup>2) else 0)\""], ["", "lemma measurable_gaussian_density[measurable]:\n  \"case_prod gaussian_density \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). gaussian_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). gaussian_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "have \"case_prod gaussian_density =\n              (\\<lambda>(x,y). (if snd x > 0 then exp (-((y - fst x)^2) / (2 * snd x^2)) /\n                             sqrt (2 * pi * snd x^2) else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). gaussian_density x y) =\n    (\\<lambda>x.\n        ennreal\n         (case x of\n          (x, y) \\<Rightarrow>\n            if 0 < snd x\n            then exp (- (y - fst x)\\<^sup>2 / (2 * (snd x)\\<^sup>2)) /\n                 sqrt (2 * pi * (snd x)\\<^sup>2)\n            else 0))", "unfolding gaussian_density_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, xa).\n        ennreal\n         ((case x of\n           (m, s) \\<Rightarrow>\n             \\<lambda>x.\n                if 0 < s\n                then exp (- (x - m)\\<^sup>2 / (2 * s\\<^sup>2)) /\n                     sqrt (2 * pi * s\\<^sup>2)\n                else 0)\n           xa)) =\n    (\\<lambda>x.\n        ennreal\n         (case x of\n          (x, y) \\<Rightarrow>\n            if 0 < snd x\n            then exp (- (y - fst x)\\<^sup>2 / (2 * (snd x)\\<^sup>2)) /\n                 sqrt (2 * pi * (snd x)\\<^sup>2)\n            else 0))", "by (intro ext) (simp split: prod.split)"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). gaussian_density x y) =\n  (\\<lambda>x.\n      ennreal\n       (case x of\n        (x, y) \\<Rightarrow>\n          if 0 < snd x\n          then exp (- (y - fst x)\\<^sup>2 / (2 * (snd x)\\<^sup>2)) /\n               sqrt (2 * pi * (snd x)\\<^sup>2)\n          else 0))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). gaussian_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "also"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). gaussian_density x y) =\n  (\\<lambda>x.\n      ennreal\n       (case x of\n        (x, y) \\<Rightarrow>\n          if 0 < snd x\n          then exp (- (y - fst x)\\<^sup>2 / (2 * (snd x)\\<^sup>2)) /\n               sqrt (2 * pi * (snd x)\\<^sup>2)\n          else 0))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). gaussian_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "have \"... \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        ennreal\n         (case x of\n          (x, y) \\<Rightarrow>\n            if 0 < snd x\n            then exp (- (y - fst x)\\<^sup>2 / (2 * (snd x)\\<^sup>2)) /\n                 sqrt (2 * pi * (snd x)\\<^sup>2)\n            else 0))\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "by (simp add: borel_prod[symmetric])"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      ennreal\n       (case x of\n        (x, y) \\<Rightarrow>\n          if 0 < snd x\n          then exp (- (y - fst x)\\<^sup>2 / (2 * (snd x)\\<^sup>2)) /\n               sqrt (2 * pi * (snd x)\\<^sup>2)\n          else 0))\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). gaussian_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>(x, y). gaussian_density x y)\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>(x, y). gaussian_density x y)\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). gaussian_density x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)", "."], ["proof (state)\nthis:\n  (\\<lambda>(x, y). gaussian_density x y)\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M borel)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition gaussian :: \"val \\<Rightarrow> val measure\" where\n  \"gaussian = map_real_pair (\\<lambda>m s. density REAL (gaussian_density (m,s) o extract_real)) undefined\""], ["", "lemma measurable_gaussian[measurable]: \"gaussian \\<in> measurable (PRODUCT REAL REAL) (subprob_algebra REAL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gaussian\n    \\<in> stock_measure (PRODUCT REAL REAL) \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure REAL)", "unfolding gaussian_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_real_pair\n     (\\<lambda>m s.\n         density (stock_measure REAL)\n          (gaussian_density (m, s) \\<circ> extract_real))\n     undefined\n    \\<in> stock_measure (PRODUCT REAL REAL) \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure REAL)", "proof (rule measurable measurable_subprob_algebra_density)+"], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure REAL)\n 2. space (stock_measure REAL) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (gaussian_density (fst x, snd x) \\<circ> extract_real) y)\n    \\<in> borel_measurable\n           ((borel \\<Otimes>\\<^sub>M borel) \\<Otimes>\\<^sub>M\n            stock_measure REAL)\n 4. \\<And>x.\n       x \\<in> space (borel \\<Otimes>\\<^sub>M borel) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure REAL)\n        (gaussian_density (fst x, snd x) \\<circ> extract_real)\n       \\<le> 1", "fix x :: \"real \\<times> real\""], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure REAL)\n 2. space (stock_measure REAL) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (gaussian_density (fst x, snd x) \\<circ> extract_real) y)\n    \\<in> borel_measurable\n           ((borel \\<Otimes>\\<^sub>M borel) \\<Otimes>\\<^sub>M\n            stock_measure REAL)\n 4. \\<And>x.\n       x \\<in> space (borel \\<Otimes>\\<^sub>M borel) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure REAL)\n        (gaussian_density (fst x, snd x) \\<circ> extract_real)\n       \\<le> 1", "show \"integral\\<^sup>N (stock_measure REAL) (gaussian_density (fst x, snd x) \\<circ> extract_real) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "assume \"snd x > 0\""], ["proof (state)\nthis:\n  0 < snd x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "then"], ["proof (chain)\npicking this:\n  0 < snd x", "have \"integral\\<^sup>N lborel (gaussian_density x) = (\\<integral>\\<^sup>+y. normal_density (fst x) (snd x) y \\<partial>lborel)\""], ["proof (prove)\nusing this:\n  0 < snd x\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N lborel (gaussian_density x) =\n    \\<integral>\\<^sup>+ xa. ennreal (normal_density (fst x) (snd x) xa)\n                       \\<partial>lborel", "by (auto simp add: gaussian_density_def normal_density_def split_beta' intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  integral\\<^sup>N lborel (gaussian_density x) =\n  \\<integral>\\<^sup>+ xa. ennreal (normal_density (fst x) (snd x) xa)\n                     \\<partial>lborel\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N lborel (gaussian_density x) =\n  \\<integral>\\<^sup>+ xa. ennreal (normal_density (fst x) (snd x) xa)\n                     \\<partial>lborel\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "have \"\\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ xa. ennreal (normal_density (fst x) (snd x) xa)\n                       \\<partial>lborel =\n    1", "using \\<open>snd x > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < snd x\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ xa. ennreal (normal_density (fst x) (snd x) xa)\n                       \\<partial>lborel =\n    1", "by (subst nn_integral_eq_integral) (auto intro!: normal_density_nonneg)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ xa. ennreal (normal_density (fst x) (snd x) xa)\n                     \\<partial>lborel =\n  1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N lborel (gaussian_density x) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N lborel (gaussian_density x) = 1\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "by (cases x) (simp add: nn_integral_RealVal comp_def)"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure REAL)\n   (gaussian_density (fst x, snd x) \\<circ> extract_real)\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> 0 < snd x \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < snd x \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "assume \"\\<not> snd x > 0\""], ["proof (state)\nthis:\n  \\<not> 0 < snd x\n\ngoal (1 subgoal):\n 1. \\<not> 0 < snd x \\<Longrightarrow>\n    integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "then"], ["proof (chain)\npicking this:\n  \\<not> 0 < snd x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> 0 < snd x\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure REAL)\n     (gaussian_density (fst x, snd x) \\<circ> extract_real)\n    \\<le> 1", "by (cases x)\n         (simp add: nn_integral_RealVal comp_def gaussian_density_def zero_ennreal_def[symmetric])"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure REAL)\n   (gaussian_density (fst x, snd x) \\<circ> extract_real)\n  \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure REAL)\n   (gaussian_density (fst x, snd x) \\<circ> extract_real)\n  \\<le> 1\n\ngoal (3 subgoals):\n 1. sigma_finite_measure (stock_measure REAL)\n 2. space (stock_measure REAL) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (gaussian_density (fst x, snd x) \\<circ> extract_real) y)\n    \\<in> borel_measurable\n           ((borel \\<Otimes>\\<^sub>M borel) \\<Otimes>\\<^sub>M\n            stock_measure REAL)", "qed (auto simp: comp_def borel_prod)"], ["", "subsection \\<open>Poisson\\<close>"], ["", "definition poisson_density' :: \"real \\<Rightarrow> int \\<Rightarrow> ennreal\" where\n  \"poisson_density' rate k = pmf (poisson_pmf rate) (nat k) * indicator ({0 <..} \\<times> {0..}) (rate, k)\""], ["", "lemma measurable_poisson_density'[measurable]:\n    \"case_prod poisson_density' \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). poisson_density' x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). poisson_density' x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)", "have \"case_prod poisson_density' =\n    (\\<lambda>(rate, k). rate ^ nat k / real_of_nat (fact (nat k)) * exp (-rate) * indicator ({0 <..} \\<times> {0..}) (rate, k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). poisson_density' x y) =\n    (\\<lambda>x.\n        ennreal\n         (case x of\n          (rate, k) \\<Rightarrow>\n            rate ^ nat k / real (fact (nat k)) * exp (- rate) *\n            indicat_real ({0<..} \\<times> {0..}) (rate, k)))", "by (auto split: split_indicator simp: fun_eq_iff poisson_density'_def)"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). poisson_density' x y) =\n  (\\<lambda>x.\n      ennreal\n       (case x of\n        (rate, k) \\<Rightarrow>\n          rate ^ nat k / real (fact (nat k)) * exp (- rate) *\n          indicat_real ({0<..} \\<times> {0..}) (rate, k)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). poisson_density' x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>(x, y). poisson_density' x y) =\n  (\\<lambda>x.\n      ennreal\n       (case x of\n        (rate, k) \\<Rightarrow>\n          rate ^ nat k / real (fact (nat k)) * exp (- rate) *\n          indicat_real ({0<..} \\<times> {0..}) (rate, k)))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>(x, y). poisson_density' x y) =\n  (\\<lambda>x.\n      ennreal\n       (case x of\n        (rate, k) \\<Rightarrow>\n          rate ^ nat k / real (fact (nat k)) * exp (- rate) *\n          indicat_real ({0<..} \\<times> {0..}) (rate, k)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). poisson_density' x y)\n    \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). poisson_density' x y)\n  \\<in> borel_measurable (borel \\<Otimes>\\<^sub>M count_space UNIV)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition poisson :: \"val \\<Rightarrow> val measure\" where\n  \"poisson rate = density INTEG (poisson_density' (extract_real rate) o extract_int)\""], ["", "lemma measurable_poisson[measurable]: \"poisson \\<in> measurable REAL (subprob_algebra INTEG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poisson\n    \\<in> stock_measure REAL \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure INTEG)", "unfolding poisson_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>rate.\n        density (stock_measure INTEG)\n         (poisson_density' (extract_real rate) \\<circ> extract_int))\n    \\<in> stock_measure REAL \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure INTEG)", "proof (rule measurable measurable_subprob_algebra_density)+"], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "fix r :: real"], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "have [simp]: \"nat ` {0..} = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat ` {0..} = UNIV", "by (auto simp: image_iff intro!: bexI[of _ \"int x\" for x])"], ["proof (state)\nthis:\n  nat ` {0..} = UNIV\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "{"], ["proof (state)\nthis:\n  nat ` {0..} = UNIV\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "assume \"0 < r\""], ["proof (state)\nthis:\n  0 < r\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "then"], ["proof (chain)\npicking this:\n  0 < r", "have \"(\\<integral>\\<^sup>+ x. ennreal (r ^ nat x * exp (- r) * indicator ({0<..} \\<times> {0..}) (r, x) / (fact (nat x))) \\<partial>count_space UNIV)\n      = (\\<integral>\\<^sup>+ x. ennreal (pmf (poisson_pmf r) (nat x)) \\<partial>count_space {0 ..})\""], ["proof (prove)\nusing this:\n  0 < r\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (r ^ nat x * exp (- r) *\n                             indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                             fact (nat x))\n                       \\<partial>count_space UNIV =\n    \\<integral>\\<^sup>+ x. ennreal (pmf (poisson_pmf r) (nat x))\n                       \\<partial>count_space {0..}", "by (auto intro!: nn_integral_cong simp add: nn_integral_count_space_indicator split: split_indicator)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (r ^ nat x * exp (- r) *\n                           indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                           fact (nat x))\n                     \\<partial>count_space UNIV =\n  \\<integral>\\<^sup>+ x. ennreal (pmf (poisson_pmf r) (nat x))\n                     \\<partial>count_space {0..}\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (r ^ nat x * exp (- r) *\n                           indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                           fact (nat x))\n                     \\<partial>count_space UNIV =\n  \\<integral>\\<^sup>+ x. ennreal (pmf (poisson_pmf r) (nat x))\n                     \\<partial>count_space {0..}\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "have \"\\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (pmf (poisson_pmf r) (nat x))\n                       \\<partial>count_space {0..} =\n    1", "using measure_pmf.emeasure_space_1[of \"poisson_pmf r\"]"], ["proof (prove)\nusing this:\n  emeasure (measure_pmf (poisson_pmf r))\n   (space (measure_pmf (poisson_pmf r))) =\n  1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (pmf (poisson_pmf r) (nat x))\n                       \\<partial>count_space {0..} =\n    1", "by (subst nn_integral_pmf') (auto simp: inj_on_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (pmf (poisson_pmf r) (nat x))\n                     \\<partial>count_space {0..} =\n  1\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (r ^ nat x * exp (- r) *\n                           indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                           fact (nat x))\n                     \\<partial>count_space UNIV =\n  1", "have \"(\\<integral>\\<^sup>+ x. ennreal (r ^ nat x * exp (- r) * indicator ({0<..} \\<times> {0..}) (r, x) / (fact (nat x))) \\<partial>count_space UNIV) = 1\""], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (r ^ nat x * exp (- r) *\n                           indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                           fact (nat x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (r ^ nat x * exp (- r) *\n                             indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                             fact (nat x))\n                       \\<partial>count_space UNIV =\n    1", "."], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (r ^ nat x * exp (- r) *\n                           indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                           fact (nat x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "}"], ["proof (state)\nthis:\n  0 < r \\<Longrightarrow>\n  \\<integral>\\<^sup>+ x. ennreal\n                          (r ^ nat x * exp (- r) *\n                           indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                           fact (nat x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (4 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)\n 4. \\<And>rate.\n       rate \\<in> space (stock_measure REAL) \\<Longrightarrow>\n       integral\\<^sup>N (stock_measure INTEG)\n        (poisson_density' (extract_real rate) \\<circ> extract_int)\n       \\<le> 1", "then"], ["proof (chain)\npicking this:\n  0 < r \\<Longrightarrow>\n  \\<integral>\\<^sup>+ x. ennreal\n                          (r ^ nat x * exp (- r) *\n                           indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                           fact (nat x))\n                     \\<partial>count_space UNIV =\n  1", "show \"integral\\<^sup>N INTEG (poisson_density' r \\<circ> extract_int) \\<le> 1\""], ["proof (prove)\nusing this:\n  0 < r \\<Longrightarrow>\n  \\<integral>\\<^sup>+ x. ennreal\n                          (r ^ nat x * exp (- r) *\n                           indicat_real ({0<..} \\<times> {0..}) (r, x) /\n                           fact (nat x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure INTEG)\n     (poisson_density' r \\<circ> extract_int)\n    \\<le> 1", "by (cases \"0 < r\")\n       (auto simp: nn_integral_IntVal poisson_density'_def zero_ennreal_def[symmetric])"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure INTEG)\n   (poisson_density' r \\<circ> extract_int)\n  \\<le> 1\n\ngoal (3 subgoals):\n 1. sigma_finite_measure (stock_measure INTEG)\n 2. space (stock_measure INTEG) \\<noteq> {}\n 3. (\\<lambda>(x, y).\n        (poisson_density' (extract_real x) \\<circ> extract_int) y)\n    \\<in> borel_measurable\n           (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure INTEG)", "qed (auto simp: comp_def)"], ["", "section \\<open>Source Language Syntax and Semantics\\<close>"], ["", "subsection \\<open>Expressions\\<close>"], ["", "class expr = fixes free_vars :: \"'a \\<Rightarrow> vname set\""], ["", "datatype pdf_dist = Bernoulli | UniformInt | UniformReal | Poisson | Gaussian"], ["", "datatype pdf_operator = Fst | Snd | Add | Mult | Minus | Less | Equals | And | Not | Or | Pow |\n                        Sqrt | Exp | Ln | Fact | Inverse | Pi | Cast pdf_type"], ["", "datatype expr =\n      Var vname\n    | Val val\n    | LetVar expr expr (\"LET _ IN _\" [0, 60] 61)\n    | Operator pdf_operator expr (infixl \"$$\" 999)\n    | Pair expr expr  (\"<_ ,  _>\"  [0, 60] 1000)\n    | Random pdf_dist expr\n    | IfThenElse expr expr expr (\"IF _ THEN _ ELSE _\" [0, 0, 70] 71)\n    | Fail pdf_type"], ["", "type_synonym tyenv = \"vname \\<Rightarrow> pdf_type\""], ["", "instantiation expr :: expr\nbegin"], ["", "primrec free_vars_expr :: \"expr \\<Rightarrow> vname set\" where\n  \"free_vars_expr (Var x) = {x}\"\n| \"free_vars_expr (Val _) = {}\"\n| \"free_vars_expr (LetVar e1 e2) = free_vars_expr e1 \\<union> Suc -` free_vars_expr e2\"\n| \"free_vars_expr (Operator _ e) = free_vars_expr e\"\n| \"free_vars_expr (<e1, e2>) = free_vars_expr e1 \\<union> free_vars_expr e2\"\n| \"free_vars_expr (Random _ e) = free_vars_expr e\"\n| \"free_vars_expr (IF b THEN e1 ELSE e2) =\n       free_vars_expr b \\<union> free_vars_expr e1 \\<union> free_vars_expr e2\"\n| \"free_vars_expr (Fail _) = {}\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(expr, expr_class)", ".."], ["", "end"], ["", "primrec free_vars_expr_code :: \"expr \\<Rightarrow> vname set\" where\n  \"free_vars_expr_code (Var x) = {x}\"\n| \"free_vars_expr_code (Val _) = {}\"\n| \"free_vars_expr_code (LetVar e1 e2) =\n      free_vars_expr_code e1 \\<union> (\\<lambda>x. x - 1) ` (free_vars_expr_code e2 - {0})\"\n| \"free_vars_expr_code (Operator _ e) = free_vars_expr_code e\"\n| \"free_vars_expr_code (<e1, e2>) = free_vars_expr_code e1 \\<union> free_vars_expr_code e2\"\n| \"free_vars_expr_code (Random _ e) = free_vars_expr_code e\"\n| \"free_vars_expr_code (IF b THEN e1 ELSE e2) =\n       free_vars_expr_code b \\<union> free_vars_expr_code e1 \\<union> free_vars_expr_code e2\"\n| \"free_vars_expr_code (Fail _) = {}\""], ["", "lemma free_vars_expr_code[code]:\n  \"free_vars (e::expr) = free_vars_expr_code e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_vars e = free_vars_expr_code e", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. free_vars e = free_vars_expr_code e", "have \"\\<And>A. Suc -` A = (\\<lambda>x. x - 1) ` (A - {0})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. Suc -` A = (\\<lambda>x. x - 1) ` (A - {0})", "by force"], ["proof (state)\nthis:\n  Suc -` ?A = (\\<lambda>x. x - 1) ` (?A - {0})\n\ngoal (1 subgoal):\n 1. free_vars e = free_vars_expr_code e", "thus ?thesis"], ["proof (prove)\nusing this:\n  Suc -` ?A = (\\<lambda>x. x - 1) ` (?A - {0})\n\ngoal (1 subgoal):\n 1. free_vars e = free_vars_expr_code e", "by (induction e) simp_all"], ["proof (state)\nthis:\n  free_vars e = free_vars_expr_code e\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec dist_param_type where\n  \"dist_param_type Bernoulli = REAL\"\n| \"dist_param_type Poisson = REAL\"\n| \"dist_param_type Gaussian = PRODUCT REAL REAL\"\n| \"dist_param_type UniformInt = PRODUCT INTEG INTEG\"\n| \"dist_param_type UniformReal = PRODUCT REAL REAL\""], ["", "primrec dist_result_type where\n  \"dist_result_type Bernoulli = BOOL\"\n| \"dist_result_type UniformInt = INTEG\"\n| \"dist_result_type UniformReal = REAL\"\n| \"dist_result_type Poisson = INTEG\"\n| \"dist_result_type Gaussian = REAL\""], ["", "primrec dist_measure :: \"pdf_dist \\<Rightarrow> val \\<Rightarrow> val measure\" where\n  \"dist_measure Bernoulli = bernoulli\"\n| \"dist_measure UniformInt = uniform_int\"\n| \"dist_measure UniformReal = uniform_real\"\n| \"dist_measure Poisson = poisson\"\n| \"dist_measure Gaussian = gaussian\""], ["", "lemma measurable_dist_measure[measurable]:\n  \"dist_measure d \\<in> measurable (dist_param_type d) (subprob_algebra (dist_result_type d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist_measure d\n    \\<in> stock_measure (dist_param_type d) \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure (dist_result_type d))", "by (cases d) simp_all"], ["", "lemma sets_dist_measure[simp]:\n  \"val_type x = dist_param_type dst \\<Longrightarrow>\n       sets (dist_measure dst x) = sets (stock_measure (dist_result_type dst))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_type x = dist_param_type dst \\<Longrightarrow>\n    sets (dist_measure dst x) = sets (stock_measure (dist_result_type dst))", "by (rule sets_kernel[OF measurable_dist_measure]) simp"], ["", "lemma space_dist_measure[simp]:\n  \"val_type x = dist_param_type dst \\<Longrightarrow>\n       space (dist_measure dst x) = type_universe (dist_result_type dst)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_type x = dist_param_type dst \\<Longrightarrow>\n    space (dist_measure dst x) = type_universe (dist_result_type dst)", "by (subst space_stock_measure[symmetric]) (intro sets_eq_imp_space_eq sets_dist_measure)"], ["", "primrec dist_dens :: \"pdf_dist \\<Rightarrow> val \\<Rightarrow> val \\<Rightarrow> ennreal\" where\n  \"dist_dens Bernoulli x y = bernoulli_density (extract_real x) (extract_bool y)\"\n| \"dist_dens UniformInt x y = uniform_int_density (extract_int_pair x) (extract_int y)\"\n| \"dist_dens UniformReal x y = uniform_real_density (extract_real_pair x) (extract_real y)\"\n| \"dist_dens Gaussian x y = gaussian_density (extract_real_pair x) (extract_real y)\"\n| \"dist_dens Poisson x y = poisson_density' (extract_real x) (extract_int y)\""], ["", "lemma measurable_dist_dens[measurable]:\n    assumes \"f \\<in> measurable M (stock_measure (dist_param_type dst))\" (is \"_ \\<in> measurable M ?N\")\n    assumes \"g \\<in> measurable M (stock_measure (dist_result_type dst))\" (is \"_ \\<in> measurable M ?R\")\n    shows \"(\\<lambda>x. dist_dens dst (f x) (g x)) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. dist_dens dst (f x) (g x)) \\<in> borel_measurable M", "apply (rule measurable_Pair_compose_split[of \"dist_dens dst\", OF _ assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). dist_dens dst x y)\n    \\<in> borel_measurable\n           (stock_measure (dist_param_type dst) \\<Otimes>\\<^sub>M\n            stock_measure (dist_result_type dst))", "apply (subst dist_dens_def, cases dst, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dist_measure_has_density:\n  \"v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n       has_density (dist_measure dst v) (stock_measure (dist_result_type dst)) (dist_dens dst v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    has_density (dist_measure dst v) (stock_measure (dist_result_type dst))\n     (dist_dens dst v)", "proof (intro has_densityI)"], ["proof (state)\ngoal (3 subgoals):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    dist_dens dst v\n    \\<in> borel_measurable (stock_measure (dist_result_type dst))\n 2. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    dist_measure dst v =\n    density (stock_measure (dist_result_type dst)) (dist_dens dst v)\n 3. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    space (stock_measure (dist_result_type dst)) \\<noteq> {}", "fix v"], ["proof (state)\ngoal (3 subgoals):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    dist_dens dst v\n    \\<in> borel_measurable (stock_measure (dist_result_type dst))\n 2. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    dist_measure dst v =\n    density (stock_measure (dist_result_type dst)) (dist_dens dst v)\n 3. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    space (stock_measure (dist_result_type dst)) \\<noteq> {}", "assume \"v \\<in> type_universe (dist_param_type dst)\""], ["proof (state)\nthis:\n  v \\<in> type_universe (dist_param_type dst)\n\ngoal (3 subgoals):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    dist_dens dst v\n    \\<in> borel_measurable (stock_measure (dist_result_type dst))\n 2. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    dist_measure dst v =\n    density (stock_measure (dist_result_type dst)) (dist_dens dst v)\n 3. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    space (stock_measure (dist_result_type dst)) \\<noteq> {}", "thus \"dist_measure dst v = density (stock_measure (dist_result_type dst)) (dist_dens dst v)\""], ["proof (prove)\nusing this:\n  v \\<in> type_universe (dist_param_type dst)\n\ngoal (1 subgoal):\n 1. dist_measure dst v =\n    density (stock_measure (dist_result_type dst)) (dist_dens dst v)", "by (cases dst)\n       (auto simp: bernoulli_def uniform_int_def uniform_real_def poisson_def gaussian_def\n             intro!: density_cong' elim!: PROD_E REAL_E INTEG_E)"], ["proof (state)\nthis:\n  dist_measure dst v =\n  density (stock_measure (dist_result_type dst)) (dist_dens dst v)\n\ngoal (2 subgoals):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    dist_dens dst v\n    \\<in> borel_measurable (stock_measure (dist_result_type dst))\n 2. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    space (stock_measure (dist_result_type dst)) \\<noteq> {}", "qed simp_all"], ["", "lemma subprob_space_dist_measure:\n    \"v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow> subprob_space (dist_measure dst v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    subprob_space (dist_measure dst v)", "using subprob_space_kernel[OF measurable_dist_measure, of v dst]"], ["proof (prove)\nusing this:\n  v \\<in> space (stock_measure (dist_param_type dst)) \\<Longrightarrow>\n  subprob_space (dist_measure dst v)\n\ngoal (1 subgoal):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    subprob_space (dist_measure dst v)", "by simp"], ["", "lemma dist_measure_has_subprob_density:\n  \"v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n       has_subprob_density (dist_measure dst v) (stock_measure (dist_result_type dst)) (dist_dens dst v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    has_subprob_density (dist_measure dst v)\n     (stock_measure (dist_result_type dst)) (dist_dens dst v)", "unfolding has_subprob_density_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> type_universe (dist_param_type dst) \\<Longrightarrow>\n    has_density (dist_measure dst v) (stock_measure (dist_result_type dst))\n     (dist_dens dst v) \\<and>\n    subprob_space (dist_measure dst v)", "by (auto intro: subprob_space_dist_measure dist_measure_has_density)"], ["", "lemma dist_dens_integral_space:\n  assumes \"v \\<in> type_universe (dist_param_type dst)\"\n  shows \"(\\<integral>\\<^sup>+u. dist_dens dst v u \\<partial>stock_measure (dist_result_type dst)) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "let ?M = \"density (stock_measure (dist_result_type dst)) (dist_dens dst v)\""], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> type_universe (dist_param_type dst)", "have \"(\\<integral>\\<^sup>+u. dist_dens dst v u \\<partial>stock_measure (dist_result_type dst)) =\n                       emeasure ?M (space ?M)\""], ["proof (prove)\nusing this:\n  v \\<in> type_universe (dist_param_type dst)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v) =\n    emeasure\n     (density (stock_measure (dist_result_type dst)) (dist_dens dst v))\n     (space\n       (density (stock_measure (dist_result_type dst)) (dist_dens dst v)))", "by (subst space_density, subst emeasure_density)\n       (auto intro!: measurable_dist_dens cong: nn_integral_cong')"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure (dist_result_type dst))\n   (dist_dens dst v) =\n  emeasure\n   (density (stock_measure (dist_result_type dst)) (dist_dens dst v))\n   (space\n     (density (stock_measure (dist_result_type dst)) (dist_dens dst v)))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure (dist_result_type dst))\n   (dist_dens dst v) =\n  emeasure\n   (density (stock_measure (dist_result_type dst)) (dist_dens dst v))\n   (space\n     (density (stock_measure (dist_result_type dst)) (dist_dens dst v)))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "have \"?M = dist_measure dst v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density (stock_measure (dist_result_type dst)) (dist_dens dst v) =\n    dist_measure dst v", "using dist_measure_has_density[OF assms]"], ["proof (prove)\nusing this:\n  has_density (dist_measure dst v) (stock_measure (dist_result_type dst))\n   (dist_dens dst v)\n\ngoal (1 subgoal):\n 1. density (stock_measure (dist_result_type dst)) (dist_dens dst v) =\n    dist_measure dst v", "by (auto dest: has_densityD)"], ["proof (state)\nthis:\n  density (stock_measure (dist_result_type dst)) (dist_dens dst v) =\n  dist_measure dst v\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "also"], ["proof (state)\nthis:\n  density (stock_measure (dist_result_type dst)) (dist_dens dst v) =\n  dist_measure dst v\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> type_universe (dist_param_type dst)", "have \"emeasure ... (space ...) \\<le> 1\""], ["proof (prove)\nusing this:\n  v \\<in> type_universe (dist_param_type dst)\n\ngoal (1 subgoal):\n 1. emeasure (dist_measure dst v) (space (dist_measure dst v)) \\<le> 1", "by (intro subprob_space.emeasure_space_le_1 subprob_space_dist_measure)"], ["proof (state)\nthis:\n  emeasure (dist_measure dst v) (space (dist_measure dst v)) \\<le> 1\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (stock_measure (dist_result_type dst)) (dist_dens dst v)\n  \\<le> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (stock_measure (dist_result_type dst)) (dist_dens dst v)\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure (dist_result_type dst))\n     (dist_dens dst v)\n    \\<le> 1", "."], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure (dist_result_type dst)) (dist_dens dst v)\n  \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Typing\\<close>"], ["", "primrec op_type :: \"pdf_operator \\<Rightarrow> pdf_type \\<Rightarrow> pdf_type option\" where\n  \"op_type Add x =\n      (case x of\n         PRODUCT INTEG INTEG \\<Rightarrow> Some INTEG\n       | PRODUCT REAL REAL \\<Rightarrow> Some REAL\n       | _ \\<Rightarrow> None)\"\n| \"op_type Mult x =\n      (case x of\n         PRODUCT INTEG INTEG \\<Rightarrow> Some INTEG\n       | PRODUCT REAL REAL \\<Rightarrow> Some REAL\n       | _ \\<Rightarrow> None)\"\n| \"op_type Minus x =\n      (case x of\n         INTEG \\<Rightarrow> Some INTEG\n       | REAL \\<Rightarrow> Some REAL\n       | _ \\<Rightarrow> None)\"\n| \"op_type Equals x =\n      (case x of\n         PRODUCT t1 t2 \\<Rightarrow> if t1 = t2 then Some BOOL else None\n       | _ \\<Rightarrow> None)\"\n| \"op_type Less x =\n      (case x of\n         PRODUCT INTEG INTEG \\<Rightarrow> Some BOOL\n       | PRODUCT REAL REAL \\<Rightarrow> Some BOOL\n       | _ \\<Rightarrow> None)\"\n| \"op_type (Cast t) x =\n      (case (x, t) of\n         (BOOL, INTEG) \\<Rightarrow> Some INTEG\n       | (BOOL, REAL) \\<Rightarrow> Some REAL\n       | (INTEG, REAL) \\<Rightarrow> Some REAL\n       | (REAL, INTEG) \\<Rightarrow> Some INTEG\n       | _ \\<Rightarrow> None)\"\n| \"op_type Or x = (case x of PRODUCT BOOL BOOL \\<Rightarrow> Some BOOL | _ \\<Rightarrow> None)\"\n| \"op_type And x = (case x of PRODUCT BOOL BOOL \\<Rightarrow> Some BOOL | _ \\<Rightarrow> None)\"\n| \"op_type Not x = (case x of BOOL \\<Rightarrow> Some BOOL | _ \\<Rightarrow> None)\"\n| \"op_type Inverse x = (case x of REAL \\<Rightarrow> Some REAL | _ \\<Rightarrow> None)\"\n| \"op_type Fact x = (case x of INTEG \\<Rightarrow> Some INTEG | _ \\<Rightarrow> None)\"\n| \"op_type Sqrt x = (case x of REAL \\<Rightarrow> Some REAL | _ \\<Rightarrow> None)\"\n| \"op_type Exp x = (case x of REAL \\<Rightarrow> Some REAL | _ \\<Rightarrow> None)\"\n| \"op_type Ln x = (case x of REAL \\<Rightarrow> Some REAL | _ \\<Rightarrow> None)\"\n| \"op_type Pi x = (case x of UNIT \\<Rightarrow> Some REAL | _ \\<Rightarrow> None)\"\n| \"op_type Pow x = (case x of\n                      PRODUCT REAL INTEG \\<Rightarrow> Some REAL\n                    | PRODUCT INTEG INTEG \\<Rightarrow> Some INTEG\n                    | _ \\<Rightarrow> None)\"\n| \"op_type Fst x = (case x of PRODUCT t _  \\<Rightarrow> Some t | _ \\<Rightarrow> None)\"\n| \"op_type Snd x = (case x of PRODUCT _ t  \\<Rightarrow> Some t | _ \\<Rightarrow> None)\""], ["", "subsection \\<open>Semantics\\<close>"], ["", "abbreviation (input) de_bruijn_insert (infixr \"\\<cdot>\" 65) where\n  \"de_bruijn_insert x f \\<equiv> case_nat x f\""], ["", "inductive expr_typing :: \"tyenv \\<Rightarrow> expr \\<Rightarrow> pdf_type \\<Rightarrow> bool\" (\"(1_/ \\<turnstile>/ (_ :/ _))\" [50,0,50] 50) where\n  et_var:  \"\\<Gamma> \\<turnstile> Var x : \\<Gamma> x\"\n| et_val:  \"\\<Gamma> \\<turnstile> Val v : val_type v\"\n| et_let:  \"\\<Gamma> \\<turnstile> e1 : t1 \\<Longrightarrow> t1 \\<cdot> \\<Gamma> \\<turnstile> e2 : t2 \\<Longrightarrow> \\<Gamma> \\<turnstile> LetVar e1 e2 : t2\"\n| et_op:   \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> op_type oper t = Some t' \\<Longrightarrow> \\<Gamma> \\<turnstile> Operator oper e : t'\"\n| et_pair: \"\\<Gamma> \\<turnstile> e1 : t1  \\<Longrightarrow> \\<Gamma> \\<turnstile> e2 : t2 \\<Longrightarrow>  \\<Gamma> \\<turnstile> <e1, e2> : PRODUCT t1 t2\"\n| et_rand: \"\\<Gamma> \\<turnstile> e : dist_param_type dst \\<Longrightarrow> \\<Gamma> \\<turnstile> Random dst e :  dist_result_type dst\"\n| et_if:   \"\\<Gamma> \\<turnstile> b : BOOL \\<Longrightarrow> \\<Gamma> \\<turnstile> e1 : t \\<Longrightarrow> \\<Gamma> \\<turnstile> e2 : t \\<Longrightarrow> \\<Gamma> \\<turnstile> IF b THEN e1 ELSE e2 : t\"\n| et_fail: \"\\<Gamma> \\<turnstile> Fail t : t\""], ["", "lemma expr_typing_cong':\n  \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> (\\<And>x. x \\<in> free_vars e \\<Longrightarrow> \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow> \\<Gamma>' \\<turnstile> e : t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n     \\<And>x.\n        x \\<in> free_vars e \\<Longrightarrow>\n        \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>' \\<turnstile> e : t", "proof (induction arbitrary: \\<Gamma>' rule: expr_typing.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x \\<Gamma>'.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<Gamma> xa = \\<Gamma>' xa) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Var x : \\<Gamma> x\n 2. \\<And>\\<Gamma> v \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Val v) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Val v : val_type v\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               (case x of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x) =\n               \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> LET e1 IN e2 : t2\n 4. \\<And>\\<Gamma> e t oper t' \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : t;\n        op_type oper t = Some t';\n        \\<And>x.\n           x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> oper $$ e : t'\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> <e1 ,  e2> : PRODUCT t1 t2\n 6. \\<And>\\<Gamma> e dst \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : dist_param_type dst;\n        \\<And>x.\n           x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile>\n                          Random dst e : dist_result_type dst\n 7. \\<And>\\<Gamma> b e1 t e2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars b \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> b : BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t;\n        \\<And>x.\n           x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> IF b THEN e1 ELSE e2 : t\n 8. \\<And>\\<Gamma> t \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Fail t) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Fail t : t", "case (et_let \\<Gamma> e1 t1 e2 t2 \\<Gamma>')"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  (\\<And>x.\n      x \\<in> free_vars e1 \\<Longrightarrow>\n      \\<Gamma> x = ?\\<Gamma>' x) \\<Longrightarrow>\n  ?\\<Gamma>' \\<turnstile> e1 : t1\n  (\\<And>x.\n      x \\<in> free_vars e2 \\<Longrightarrow>\n      (case x of 0 \\<Rightarrow> t1 | Suc x \\<Rightarrow> \\<Gamma> x) =\n      ?\\<Gamma>' x) \\<Longrightarrow>\n  ?\\<Gamma>' \\<turnstile> e2 : t2\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<Gamma> ?x = \\<Gamma>' ?x\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x \\<Gamma>'.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<Gamma> xa = \\<Gamma>' xa) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Var x : \\<Gamma> x\n 2. \\<And>\\<Gamma> v \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Val v) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Val v : val_type v\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               (case x of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x) =\n               \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> LET e1 IN e2 : t2\n 4. \\<And>\\<Gamma> e t oper t' \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : t;\n        op_type oper t = Some t';\n        \\<And>x.\n           x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> oper $$ e : t'\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> <e1 ,  e2> : PRODUCT t1 t2\n 6. \\<And>\\<Gamma> e dst \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : dist_param_type dst;\n        \\<And>x.\n           x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile>\n                          Random dst e : dist_result_type dst\n 7. \\<And>\\<Gamma> b e1 t e2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars b \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> b : BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t;\n        \\<And>x.\n           x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> IF b THEN e1 ELSE e2 : t\n 8. \\<And>\\<Gamma> t \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Fail t) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Fail t : t", "have \"\\<Gamma>' \\<turnstile> e1 : t1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<turnstile> e1 : t1", "using et_let.prems"], ["proof (prove)\nusing this:\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<Gamma> ?x = \\<Gamma>' ?x\n\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<turnstile> e1 : t1", "by (intro et_let.IH(1)) auto"], ["proof (state)\nthis:\n  \\<Gamma>' \\<turnstile> e1 : t1\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x \\<Gamma>'.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<Gamma> xa = \\<Gamma>' xa) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Var x : \\<Gamma> x\n 2. \\<And>\\<Gamma> v \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Val v) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Val v : val_type v\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               (case x of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x) =\n               \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> LET e1 IN e2 : t2\n 4. \\<And>\\<Gamma> e t oper t' \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : t;\n        op_type oper t = Some t';\n        \\<And>x.\n           x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> oper $$ e : t'\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> <e1 ,  e2> : PRODUCT t1 t2\n 6. \\<And>\\<Gamma> e dst \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : dist_param_type dst;\n        \\<And>x.\n           x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile>\n                          Random dst e : dist_result_type dst\n 7. \\<And>\\<Gamma> b e1 t e2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars b \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> b : BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t;\n        \\<And>x.\n           x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> IF b THEN e1 ELSE e2 : t\n 8. \\<And>\\<Gamma> t \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Fail t) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Fail t : t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>' \\<turnstile> e1 : t1\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x \\<Gamma>'.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<Gamma> xa = \\<Gamma>' xa) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Var x : \\<Gamma> x\n 2. \\<And>\\<Gamma> v \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Val v) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Val v : val_type v\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               (case x of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x) =\n               \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> LET e1 IN e2 : t2\n 4. \\<And>\\<Gamma> e t oper t' \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : t;\n        op_type oper t = Some t';\n        \\<And>x.\n           x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> oper $$ e : t'\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> <e1 ,  e2> : PRODUCT t1 t2\n 6. \\<And>\\<Gamma> e dst \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : dist_param_type dst;\n        \\<And>x.\n           x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile>\n                          Random dst e : dist_result_type dst\n 7. \\<And>\\<Gamma> b e1 t e2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars b \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> b : BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t;\n        \\<And>x.\n           x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> IF b THEN e1 ELSE e2 : t\n 8. \\<And>\\<Gamma> t \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Fail t) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Fail t : t", "have \"case_nat t1 \\<Gamma>' \\<turnstile> e2 : t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat t1 \\<Gamma>' \\<turnstile> e2 : t2", "using et_let.prems"], ["proof (prove)\nusing this:\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<Gamma> ?x = \\<Gamma>' ?x\n\ngoal (1 subgoal):\n 1. case_nat t1 \\<Gamma>' \\<turnstile> e2 : t2", "by (intro et_let.IH(2)) (auto split: nat.split)"], ["proof (state)\nthis:\n  case_nat t1 \\<Gamma>' \\<turnstile> e2 : t2\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x \\<Gamma>'.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<Gamma> xa = \\<Gamma>' xa) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Var x : \\<Gamma> x\n 2. \\<And>\\<Gamma> v \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Val v) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Val v : val_type v\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               (case x of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x) =\n               \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> LET e1 IN e2 : t2\n 4. \\<And>\\<Gamma> e t oper t' \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : t;\n        op_type oper t = Some t';\n        \\<And>x.\n           x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> oper $$ e : t'\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> <e1 ,  e2> : PRODUCT t1 t2\n 6. \\<And>\\<Gamma> e dst \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : dist_param_type dst;\n        \\<And>x.\n           x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile>\n                          Random dst e : dist_result_type dst\n 7. \\<And>\\<Gamma> b e1 t e2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars b \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> b : BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t;\n        \\<And>x.\n           x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> IF b THEN e1 ELSE e2 : t\n 8. \\<And>\\<Gamma> t \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Fail t) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Fail t : t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>' \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma>' \\<turnstile> e2 : t2", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>' \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma>' \\<turnstile> e2 : t2\n\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<turnstile> LET e1 IN e2 : t2", "by (auto intro!: expr_typing.intros)"], ["proof (state)\nthis:\n  \\<Gamma>' \\<turnstile> LET e1 IN e2 : t2\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x \\<Gamma>'.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<Gamma> xa = \\<Gamma>' xa) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Var x : \\<Gamma> x\n 2. \\<And>\\<Gamma> v \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Val v) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Val v : val_type v\n 3. \\<And>\\<Gamma> e t oper t' \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : t;\n        op_type oper t = Some t';\n        \\<And>x.\n           x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> oper $$ e : t'\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> <e1 ,  e2> : PRODUCT t1 t2\n 5. \\<And>\\<Gamma> e dst \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e : dist_param_type dst;\n        \\<And>x.\n           x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile>\n                          Random dst e : dist_result_type dst\n 6. \\<And>\\<Gamma> b e1 t e2 \\<Gamma>'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars b \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> b : BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e1 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e1 : t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<Gamma>'.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n           \\<Gamma>' \\<turnstile> e2 : t;\n        \\<And>x.\n           x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>' \\<turnstile> IF b THEN e1 ELSE e2 : t\n 7. \\<And>\\<Gamma> t \\<Gamma>'.\n       (\\<And>x.\n           x \\<in> free_vars (Fail t) \\<Longrightarrow>\n           \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n       \\<Gamma>' \\<turnstile> Fail t : t", "qed (auto intro!: expr_typing.intros)"], ["", "lemma expr_typing_cong:\n  \"(\\<And>x. x \\<in> free_vars e \\<Longrightarrow> \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow> \\<Gamma> \\<turnstile> e : t \\<longleftrightarrow> \\<Gamma>' \\<turnstile> e : t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> free_vars e \\<Longrightarrow>\n        \\<Gamma> x = \\<Gamma>' x) \\<Longrightarrow>\n    (\\<Gamma> \\<turnstile> e : t) = (\\<Gamma>' \\<turnstile> e : t)", "by (intro iffI) (simp_all add: expr_typing_cong')"], ["", "inductive_cases expr_typing_valE[elim]:  \"\\<Gamma> \\<turnstile> Val v : t\""], ["", "inductive_cases expr_typing_varE[elim]:  \"\\<Gamma> \\<turnstile> Var x : t\""], ["", "inductive_cases expr_typing_letE[elim]:  \"\\<Gamma> \\<turnstile> LetVar e1 e2 : t\""], ["", "inductive_cases expr_typing_ifE[elim]:  \"\\<Gamma> \\<turnstile> IfThenElse b e1 e2 : t\""], ["", "inductive_cases expr_typing_opE[elim]:   \"\\<Gamma> \\<turnstile> Operator oper e : t\""], ["", "inductive_cases expr_typing_pairE[elim]: \"\\<Gamma> \\<turnstile> <e1, e2> : t\""], ["", "inductive_cases expr_typing_randE[elim]: \"\\<Gamma> \\<turnstile> Random dst e : t\""], ["", "inductive_cases expr_typing_failE[elim]: \"\\<Gamma> \\<turnstile> Fail t : t'\""], ["", "lemma expr_typing_unique:\n  \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow> t = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n     \\<Gamma> \\<turnstile> e : t'\\<rbrakk>\n    \\<Longrightarrow> t = t'", "apply (induction arbitrary: t' rule: expr_typing.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x t'.\n       \\<Gamma> \\<turnstile> Var x : t' \\<Longrightarrow> \\<Gamma> x = t'\n 2. \\<And>\\<Gamma> v t'.\n       \\<Gamma> \\<turnstile> Val v : t' \\<Longrightarrow> val_type v = t'\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t1 = t';\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>t'.\n           case_nat t1 \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow>\n           t2 = t';\n        \\<Gamma> \\<turnstile> LET e1 IN e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t2 = t'\n 4. \\<And>\\<Gamma> e t oper t' t'a.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow> t = t';\n        op_type oper t = Some t';\n        \\<Gamma> \\<turnstile> oper $$ e : t'a\\<rbrakk>\n       \\<Longrightarrow> t' = t'a\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t1 = t';\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t2 = t';\n        \\<Gamma> \\<turnstile> <e1 ,  e2> : t'\\<rbrakk>\n       \\<Longrightarrow> PRODUCT t1 t2 = t'\n 6. \\<And>\\<Gamma> e dst t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>t'.\n           \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow>\n           dist_param_type dst = t';\n        \\<Gamma> \\<turnstile> Random dst e : t'\\<rbrakk>\n       \\<Longrightarrow> dist_result_type dst = t'\n 7. \\<And>\\<Gamma> b e1 t e2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>t'. \\<Gamma> \\<turnstile> b : t' \\<Longrightarrow> BOOL = t';\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> IF b THEN e1 ELSE e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t = t'\n 8. \\<And>\\<Gamma> t t'.\n       \\<Gamma> \\<turnstile> Fail t : t' \\<Longrightarrow> t = t'", "apply blast"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> v t'.\n       \\<Gamma> \\<turnstile> Val v : t' \\<Longrightarrow> val_type v = t'\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t1 = t';\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>t'.\n           case_nat t1 \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow>\n           t2 = t';\n        \\<Gamma> \\<turnstile> LET e1 IN e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t2 = t'\n 3. \\<And>\\<Gamma> e t oper t' t'a.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow> t = t';\n        op_type oper t = Some t';\n        \\<Gamma> \\<turnstile> oper $$ e : t'a\\<rbrakk>\n       \\<Longrightarrow> t' = t'a\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t1 = t';\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t2 = t';\n        \\<Gamma> \\<turnstile> <e1 ,  e2> : t'\\<rbrakk>\n       \\<Longrightarrow> PRODUCT t1 t2 = t'\n 5. \\<And>\\<Gamma> e dst t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>t'.\n           \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow>\n           dist_param_type dst = t';\n        \\<Gamma> \\<turnstile> Random dst e : t'\\<rbrakk>\n       \\<Longrightarrow> dist_result_type dst = t'\n 6. \\<And>\\<Gamma> b e1 t e2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>t'. \\<Gamma> \\<turnstile> b : t' \\<Longrightarrow> BOOL = t';\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> IF b THEN e1 ELSE e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t = t'\n 7. \\<And>\\<Gamma> t t'.\n       \\<Gamma> \\<turnstile> Fail t : t' \\<Longrightarrow> t = t'", "apply blast"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t1 = t';\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>t'.\n           case_nat t1 \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow>\n           t2 = t';\n        \\<Gamma> \\<turnstile> LET e1 IN e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t2 = t'\n 2. \\<And>\\<Gamma> e t oper t' t'a.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow> t = t';\n        op_type oper t = Some t';\n        \\<Gamma> \\<turnstile> oper $$ e : t'a\\<rbrakk>\n       \\<Longrightarrow> t' = t'a\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t1 = t';\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t2 = t';\n        \\<Gamma> \\<turnstile> <e1 ,  e2> : t'\\<rbrakk>\n       \\<Longrightarrow> PRODUCT t1 t2 = t'\n 4. \\<And>\\<Gamma> e dst t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>t'.\n           \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow>\n           dist_param_type dst = t';\n        \\<Gamma> \\<turnstile> Random dst e : t'\\<rbrakk>\n       \\<Longrightarrow> dist_result_type dst = t'\n 5. \\<And>\\<Gamma> b e1 t e2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>t'. \\<Gamma> \\<turnstile> b : t' \\<Longrightarrow> BOOL = t';\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> IF b THEN e1 ELSE e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t = t'\n 6. \\<And>\\<Gamma> t t'.\n       \\<Gamma> \\<turnstile> Fail t : t' \\<Longrightarrow> t = t'", "apply (erule expr_typing_letE, blast)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' t'a.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow> t = t';\n        op_type oper t = Some t';\n        \\<Gamma> \\<turnstile> oper $$ e : t'a\\<rbrakk>\n       \\<Longrightarrow> t' = t'a\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t1 = t';\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t2 = t';\n        \\<Gamma> \\<turnstile> <e1 ,  e2> : t'\\<rbrakk>\n       \\<Longrightarrow> PRODUCT t1 t2 = t'\n 3. \\<And>\\<Gamma> e dst t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>t'.\n           \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow>\n           dist_param_type dst = t';\n        \\<Gamma> \\<turnstile> Random dst e : t'\\<rbrakk>\n       \\<Longrightarrow> dist_result_type dst = t'\n 4. \\<And>\\<Gamma> b e1 t e2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>t'. \\<Gamma> \\<turnstile> b : t' \\<Longrightarrow> BOOL = t';\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> IF b THEN e1 ELSE e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t = t'\n 5. \\<And>\\<Gamma> t t'.\n       \\<Gamma> \\<turnstile> Fail t : t' \\<Longrightarrow> t = t'", "apply (erule expr_typing_opE, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t1 = t';\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t2 = t';\n        \\<Gamma> \\<turnstile> <e1 ,  e2> : t'\\<rbrakk>\n       \\<Longrightarrow> PRODUCT t1 t2 = t'\n 2. \\<And>\\<Gamma> e dst t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>t'.\n           \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow>\n           dist_param_type dst = t';\n        \\<Gamma> \\<turnstile> Random dst e : t'\\<rbrakk>\n       \\<Longrightarrow> dist_result_type dst = t'\n 3. \\<And>\\<Gamma> b e1 t e2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>t'. \\<Gamma> \\<turnstile> b : t' \\<Longrightarrow> BOOL = t';\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> IF b THEN e1 ELSE e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t = t'\n 4. \\<And>\\<Gamma> t t'.\n       \\<Gamma> \\<turnstile> Fail t : t' \\<Longrightarrow> t = t'", "apply (erule expr_typing_pairE, blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>t'.\n           \\<Gamma> \\<turnstile> e : t' \\<Longrightarrow>\n           dist_param_type dst = t';\n        \\<Gamma> \\<turnstile> Random dst e : t'\\<rbrakk>\n       \\<Longrightarrow> dist_result_type dst = t'\n 2. \\<And>\\<Gamma> b e1 t e2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>t'. \\<Gamma> \\<turnstile> b : t' \\<Longrightarrow> BOOL = t';\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> IF b THEN e1 ELSE e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t = t'\n 3. \\<And>\\<Gamma> t t'.\n       \\<Gamma> \\<turnstile> Fail t : t' \\<Longrightarrow> t = t'", "apply (erule expr_typing_randE, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 t'.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>t'. \\<Gamma> \\<turnstile> b : t' \\<Longrightarrow> BOOL = t';\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e1 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>t'. \\<Gamma> \\<turnstile> e2 : t' \\<Longrightarrow> t = t';\n        \\<Gamma> \\<turnstile> IF b THEN e1 ELSE e2 : t'\\<rbrakk>\n       \\<Longrightarrow> t = t'\n 2. \\<And>\\<Gamma> t t'.\n       \\<Gamma> \\<turnstile> Fail t : t' \\<Longrightarrow> t = t'", "apply (erule expr_typing_ifE, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> t t'.\n       \\<Gamma> \\<turnstile> Fail t : t' \\<Longrightarrow> t = t'", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun expr_type :: \"tyenv \\<Rightarrow> expr \\<Rightarrow> pdf_type option\" where\n  \"expr_type \\<Gamma> (Var x) = Some (\\<Gamma> x)\"\n| \"expr_type \\<Gamma> (Val v) = Some (val_type v)\"\n| \"expr_type \\<Gamma> (LetVar e1 e2) =\n       (case expr_type \\<Gamma> e1 of\n          Some t \\<Rightarrow> expr_type (case_nat t \\<Gamma>) e2\n        | None \\<Rightarrow> None)\"\n| \"expr_type \\<Gamma> (Operator oper e) =\n       (case expr_type \\<Gamma> e of Some t \\<Rightarrow> op_type oper t | None \\<Rightarrow> None)\"\n| \"expr_type \\<Gamma> (<e1, e2>) =\n       (case (expr_type \\<Gamma> e1, expr_type \\<Gamma> e2) of\n          (Some t1, Some t2) \\<Rightarrow> Some (PRODUCT t1 t2)\n        |  _ \\<Rightarrow> None)\"\n| \"expr_type \\<Gamma> (Random dst e) =\n       (if expr_type \\<Gamma> e = Some (dist_param_type dst) then\n           Some (dist_result_type dst)\n        else None)\"\n| \"expr_type \\<Gamma> (IF b THEN e1 ELSE e2) =\n       (if expr_type \\<Gamma> b = Some BOOL then\n          (case (expr_type \\<Gamma> e1, expr_type \\<Gamma> e2) of\n             (Some t, Some t') \\<Rightarrow> if t = t' then Some t else None\n           | _ \\<Rightarrow> None) else None)\"\n| \"expr_type \\<Gamma> (Fail t) = Some t\""], ["", "lemma expr_type_Some_iff: \"expr_type \\<Gamma> e = Some t \\<longleftrightarrow> \\<Gamma> \\<turnstile> e : t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (expr_type \\<Gamma> e = Some t) = (\\<Gamma> \\<turnstile> e : t)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. expr_type \\<Gamma> e = Some t \\<Longrightarrow>\n    \\<Gamma> \\<turnstile> e : t\n 2. \\<Gamma> \\<turnstile> e : t \\<Longrightarrow>\n    expr_type \\<Gamma> e = Some t", "apply (induction e arbitrary: \\<Gamma> t,\n         auto intro!: expr_typing.intros split: option.split_asm if_split_asm) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> e : t \\<Longrightarrow>\n    expr_type \\<Gamma> e = Some t", "apply (induction rule: expr_typing.induct, auto simp del: fun_upd_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas expr_typing_code[code_unfold] = expr_type_Some_iff[symmetric]"], ["", "subsubsection \\<open>Countable types\\<close>"], ["", "primrec countable_type :: \"pdf_type \\<Rightarrow> bool\" where\n  \"countable_type UNIT = True\"\n| \"countable_type BOOL = True\"\n| \"countable_type INTEG = True\"\n| \"countable_type REAL = False\"\n| \"countable_type (PRODUCT t1 t2) = (countable_type t1 \\<and> countable_type t2)\""], ["", "lemma countable_type_countable[dest]:\n    \"countable_type t \\<Longrightarrow> countable (space (stock_measure t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable_type t \\<Longrightarrow> countable (space (stock_measure t))", "by (induction t)\n     (auto simp: pair_measure_countable space_embed_measure space_pair_measure stock_measure.simps)"], ["", "lemma countable_type_imp_count_space:\n  \"countable_type t \\<Longrightarrow> stock_measure t = count_space (type_universe t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable_type t \\<Longrightarrow>\n    stock_measure t = count_space (type_universe t)", "proof (subst space_stock_measure[symmetric], induction t)"], ["proof (state)\ngoal (5 subgoals):\n 1. countable_type UNIT \\<Longrightarrow>\n    stock_measure UNIT = count_space (space (stock_measure UNIT))\n 2. countable_type BOOL \\<Longrightarrow>\n    stock_measure BOOL = count_space (space (stock_measure BOOL))\n 3. countable_type INTEG \\<Longrightarrow>\n    stock_measure INTEG = count_space (space (stock_measure INTEG))\n 4. countable_type REAL \\<Longrightarrow>\n    stock_measure REAL = count_space (space (stock_measure REAL))\n 5. \\<And>t1 t2.\n       \\<lbrakk>countable_type t1 \\<Longrightarrow>\n                stock_measure t1 = count_space (space (stock_measure t1));\n        countable_type t2 \\<Longrightarrow>\n        stock_measure t2 = count_space (space (stock_measure t2));\n        countable_type (PRODUCT t1 t2)\\<rbrakk>\n       \\<Longrightarrow> stock_measure (PRODUCT t1 t2) =\n                         count_space (space (stock_measure (PRODUCT t1 t2)))", "case (PRODUCT t1 t2)"], ["proof (state)\nthis:\n  countable_type t1 \\<Longrightarrow>\n  stock_measure t1 = count_space (space (stock_measure t1))\n  countable_type t2 \\<Longrightarrow>\n  stock_measure t2 = count_space (space (stock_measure t2))\n  countable_type (PRODUCT t1 t2)\n\ngoal (5 subgoals):\n 1. countable_type UNIT \\<Longrightarrow>\n    stock_measure UNIT = count_space (space (stock_measure UNIT))\n 2. countable_type BOOL \\<Longrightarrow>\n    stock_measure BOOL = count_space (space (stock_measure BOOL))\n 3. countable_type INTEG \\<Longrightarrow>\n    stock_measure INTEG = count_space (space (stock_measure INTEG))\n 4. countable_type REAL \\<Longrightarrow>\n    stock_measure REAL = count_space (space (stock_measure REAL))\n 5. \\<And>t1 t2.\n       \\<lbrakk>countable_type t1 \\<Longrightarrow>\n                stock_measure t1 = count_space (space (stock_measure t1));\n        countable_type t2 \\<Longrightarrow>\n        stock_measure t2 = count_space (space (stock_measure t2));\n        countable_type (PRODUCT t1 t2)\\<rbrakk>\n       \\<Longrightarrow> stock_measure (PRODUCT t1 t2) =\n                         count_space (space (stock_measure (PRODUCT t1 t2)))", "hence countable: \"countable_type t1\" \"countable_type t2\""], ["proof (prove)\nusing this:\n  countable_type t1 \\<Longrightarrow>\n  stock_measure t1 = count_space (space (stock_measure t1))\n  countable_type t2 \\<Longrightarrow>\n  stock_measure t2 = count_space (space (stock_measure t2))\n  countable_type (PRODUCT t1 t2)\n\ngoal (1 subgoal):\n 1. countable_type t1 &&& countable_type t2", "by simp_all"], ["proof (state)\nthis:\n  countable_type t1\n  countable_type t2\n\ngoal (5 subgoals):\n 1. countable_type UNIT \\<Longrightarrow>\n    stock_measure UNIT = count_space (space (stock_measure UNIT))\n 2. countable_type BOOL \\<Longrightarrow>\n    stock_measure BOOL = count_space (space (stock_measure BOOL))\n 3. countable_type INTEG \\<Longrightarrow>\n    stock_measure INTEG = count_space (space (stock_measure INTEG))\n 4. countable_type REAL \\<Longrightarrow>\n    stock_measure REAL = count_space (space (stock_measure REAL))\n 5. \\<And>t1 t2.\n       \\<lbrakk>countable_type t1 \\<Longrightarrow>\n                stock_measure t1 = count_space (space (stock_measure t1));\n        countable_type t2 \\<Longrightarrow>\n        stock_measure t2 = count_space (space (stock_measure t2));\n        countable_type (PRODUCT t1 t2)\\<rbrakk>\n       \\<Longrightarrow> stock_measure (PRODUCT t1 t2) =\n                         count_space (space (stock_measure (PRODUCT t1 t2)))", "note A = PRODUCT.IH(1)[OF countable(1)] and B = PRODUCT.IH(2)[OF countable(2)]"], ["proof (state)\nthis:\n  stock_measure t1 = count_space (space (stock_measure t1))\n  stock_measure t2 = count_space (space (stock_measure t2))\n\ngoal (5 subgoals):\n 1. countable_type UNIT \\<Longrightarrow>\n    stock_measure UNIT = count_space (space (stock_measure UNIT))\n 2. countable_type BOOL \\<Longrightarrow>\n    stock_measure BOOL = count_space (space (stock_measure BOOL))\n 3. countable_type INTEG \\<Longrightarrow>\n    stock_measure INTEG = count_space (space (stock_measure INTEG))\n 4. countable_type REAL \\<Longrightarrow>\n    stock_measure REAL = count_space (space (stock_measure REAL))\n 5. \\<And>t1 t2.\n       \\<lbrakk>countable_type t1 \\<Longrightarrow>\n                stock_measure t1 = count_space (space (stock_measure t1));\n        countable_type t2 \\<Longrightarrow>\n        stock_measure t2 = count_space (space (stock_measure t2));\n        countable_type (PRODUCT t1 t2)\\<rbrakk>\n       \\<Longrightarrow> stock_measure (PRODUCT t1 t2) =\n                         count_space (space (stock_measure (PRODUCT t1 t2)))", "show \"stock_measure (PRODUCT t1 t2) = count_space (space (stock_measure (PRODUCT t1 t2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stock_measure (PRODUCT t1 t2) =\n    count_space (space (stock_measure (PRODUCT t1 t2)))", "apply (subst (1 2) stock_measure.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. embed_measure (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t2)\n     (\\<lambda>(x, y). <|x, y|>) =\n    count_space\n     (space\n       (embed_measure (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>(x, y). <|x, y|>)))", "apply (subst (1 2) A, subst (1 2) B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. embed_measure\n     (count_space (space (stock_measure t1)) \\<Otimes>\\<^sub>M\n      count_space (space (stock_measure t2)))\n     (\\<lambda>(x, y). <|x, y|>) =\n    count_space\n     (space\n       (embed_measure\n         (count_space (space (stock_measure t1)) \\<Otimes>\\<^sub>M\n          count_space (space (stock_measure t2)))\n         (\\<lambda>(x, y). <|x, y|>)))", "apply (subst (1 2) pair_measure_countable)"], ["proof (prove)\ngoal (3 subgoals):\n 1. countable (space (stock_measure t1))\n 2. countable (space (stock_measure t2))\n 3. embed_measure\n     (count_space\n       (space (stock_measure t1) \\<times> space (stock_measure t2)))\n     (\\<lambda>(x, y). <|x, y|>) =\n    count_space\n     (space\n       (embed_measure\n         (count_space\n           (space (stock_measure t1) \\<times> space (stock_measure t2)))\n         (\\<lambda>(x, y). <|x, y|>)))", "apply (auto intro: countable_type_countable simp: countable simp del: space_stock_measure) [2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. embed_measure\n     (count_space\n       (space (stock_measure t1) \\<times> space (stock_measure t2)))\n     (\\<lambda>(x, y). <|x, y|>) =\n    count_space\n     (space\n       (embed_measure\n         (count_space\n           (space (stock_measure t1) \\<times> space (stock_measure t2)))\n         (\\<lambda>(x, y). <|x, y|>)))", "apply (subst (1 2) embed_measure_count_space, force intro: injI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. count_space\n     ((\\<lambda>(x, y). <|x, y|>) `\n      (space (stock_measure t1) \\<times> space (stock_measure t2))) =\n    count_space\n     (space\n       (count_space\n         ((\\<lambda>(x, y). <|x, y|>) `\n          (space (stock_measure t1) \\<times> space (stock_measure t2)))))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  stock_measure (PRODUCT t1 t2) =\n  count_space (space (stock_measure (PRODUCT t1 t2)))\n\ngoal (4 subgoals):\n 1. countable_type UNIT \\<Longrightarrow>\n    stock_measure UNIT = count_space (space (stock_measure UNIT))\n 2. countable_type BOOL \\<Longrightarrow>\n    stock_measure BOOL = count_space (space (stock_measure BOOL))\n 3. countable_type INTEG \\<Longrightarrow>\n    stock_measure INTEG = count_space (space (stock_measure INTEG))\n 4. countable_type REAL \\<Longrightarrow>\n    stock_measure REAL = count_space (space (stock_measure REAL))", "qed (simp_all add: stock_measure.simps)"], ["", "lemma return_val_countable:\n  assumes \"countable_type (val_type v)\"\n  shows \"return_val v = density (stock_measure (val_type v)) (indicator {v})\" (is \"?M1 = ?M2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. return_val v = density (stock_measure (val_type v)) (indicator {v})", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "let ?M3 = \"count_space (type_universe (val_type v))\""], ["proof (state)\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "assume asm: \"X \\<in> ?M1\""], ["proof (state)\nthis:\n  X \\<in> sets (return_val v)\n\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "with assms"], ["proof (chain)\npicking this:\n  countable_type (val_type v)\n  X \\<in> sets (return_val v)", "have \"emeasure ?M2 X = \\<integral>\\<^sup>+ x. indicator {v} x * indicator X x\n                                              \\<partial>count_space (type_universe (val_type v))\""], ["proof (prove)\nusing this:\n  countable_type (val_type v)\n  X \\<in> sets (return_val v)\n\ngoal (1 subgoal):\n 1. emeasure (density (stock_measure (val_type v)) (indicator {v})) X =\n    set_nn_integral (count_space (type_universe (val_type v))) X\n     (indicator {v})", "by (simp add: return_val_def emeasure_density countable_type_imp_count_space)"], ["proof (state)\nthis:\n  emeasure (density (stock_measure (val_type v)) (indicator {v})) X =\n  set_nn_integral (count_space (type_universe (val_type v))) X\n   (indicator {v})\n\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "also"], ["proof (state)\nthis:\n  emeasure (density (stock_measure (val_type v)) (indicator {v})) X =\n  set_nn_integral (count_space (type_universe (val_type v))) X\n   (indicator {v})\n\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "have \"(\\<lambda>x. indicator {v} x * indicator X x :: ennreal) = (\\<lambda>x. indicator (X \\<inter> {v}) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. indicator {v} x * indicator X x) =\n    indicator (X \\<inter> {v})", "by (rule ext, subst Int_commute) (simp split: split_indicator)"], ["proof (state)\nthis:\n  (\\<lambda>x. indicator {v} x * indicator X x) = indicator (X \\<inter> {v})\n\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. indicator {v} x * indicator X x) = indicator (X \\<inter> {v})\n\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "have \"nn_integral ?M3 ... = emeasure ?M3 (X \\<inter> {v})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (count_space (type_universe (val_type v)))\n     (indicator (X \\<inter> {v})) =\n    emeasure (count_space (type_universe (val_type v))) (X \\<inter> {v})", "by (subst nn_integral_indicator[symmetric]) auto"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (type_universe (val_type v)))\n   (indicator (X \\<inter> {v})) =\n  emeasure (count_space (type_universe (val_type v))) (X \\<inter> {v})\n\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (count_space (type_universe (val_type v)))\n   (indicator (X \\<inter> {v})) =\n  emeasure (count_space (type_universe (val_type v))) (X \\<inter> {v})\n\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "from asm"], ["proof (chain)\npicking this:\n  X \\<in> sets (return_val v)", "have \"... = emeasure ?M1 X\""], ["proof (prove)\nusing this:\n  X \\<in> sets (return_val v)\n\ngoal (1 subgoal):\n 1. emeasure (count_space (type_universe (val_type v))) (X \\<inter> {v}) =\n    emeasure (return_val v) X", "by (auto simp: return_val_def split: split_indicator)"], ["proof (state)\nthis:\n  emeasure (count_space (type_universe (val_type v))) (X \\<inter> {v}) =\n  emeasure (return_val v) X\n\ngoal (2 subgoals):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))\n 2. \\<And>A.\n       A \\<in> sets (return_val v) \\<Longrightarrow>\n       emeasure (return_val v) A =\n       emeasure (density (stock_measure (val_type v)) (indicator {v})) A", "finally"], ["proof (chain)\npicking this:\n  emeasure (density (stock_measure (val_type v)) (indicator {v})) X =\n  emeasure (return_val v) X", "show \"emeasure ?M1 X = emeasure ?M2 X\""], ["proof (prove)\nusing this:\n  emeasure (density (stock_measure (val_type v)) (indicator {v})) X =\n  emeasure (return_val v) X\n\ngoal (1 subgoal):\n 1. emeasure (return_val v) X =\n    emeasure (density (stock_measure (val_type v)) (indicator {v})) X", ".."], ["proof (state)\nthis:\n  emeasure (return_val v) X =\n  emeasure (density (stock_measure (val_type v)) (indicator {v})) X\n\ngoal (1 subgoal):\n 1. sets (return_val v) =\n    sets (density (stock_measure (val_type v)) (indicator {v}))", "qed (simp add: return_val_def)"], ["", "subsection \\<open>Semantics\\<close>"], ["", "definition bool_to_int :: \"bool \\<Rightarrow> int\" where\n  \"bool_to_int b = (if b then 1 else 0)\""], ["", "lemma measurable_bool_to_int[measurable]:\n  \"bool_to_int \\<in> measurable (count_space UNIV) (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bool_to_int\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M count_space UNIV", "by (rule measurable_count_space)"], ["", "definition bool_to_real :: \"bool \\<Rightarrow> real\" where\n  \"bool_to_real b = (if b then 1 else 0)\""], ["", "lemma measurable_bool_to_real[measurable]:\n  \"bool_to_real \\<in> borel_measurable (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bool_to_real \\<in> borel_measurable (count_space UNIV)", "by (rule borel_measurable_count_space)"], ["", "definition safe_ln :: \"real \\<Rightarrow> real\" where\n  \"safe_ln x = (if x > 0 then ln x else 0)\""], ["", "lemma safe_ln_gt_0[simp]: \"x > 0 \\<Longrightarrow> safe_ln x = ln x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> safe_ln x = ln x", "by (simp add: safe_ln_def)"], ["", "lemma borel_measurable_safe_ln[measurable]: \"safe_ln \\<in> borel_measurable borel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_ln \\<in> borel_measurable borel", "unfolding safe_ln_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if 0 < x then ln x else 0) \\<in> borel_measurable borel", "by simp"], ["", "definition safe_sqrt :: \"real \\<Rightarrow> real\" where\n  \"safe_sqrt x = (if x \\<ge> 0 then sqrt x else 0)\""], ["", "lemma safe_sqrt_ge_0[simp]: \"x \\<ge> 0 \\<Longrightarrow> safe_sqrt x = sqrt x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<Longrightarrow> safe_sqrt x = sqrt x", "by (simp add: safe_sqrt_def)"], ["", "lemma borel_measurable_safe_sqrt[measurable]: \"safe_sqrt \\<in> borel_measurable borel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_sqrt \\<in> borel_measurable borel", "unfolding safe_sqrt_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if 0 \\<le> x then sqrt x else 0)\n    \\<in> borel_measurable borel", "by simp"], ["", "fun op_sem :: \"pdf_operator \\<Rightarrow> val \\<Rightarrow> val\" where\n  \"op_sem Add = lift_RealIntVal2 (+) (+)\"\n| \"op_sem Mult = lift_RealIntVal2 (*) (*)\"\n| \"op_sem Minus = lift_RealIntVal uminus uminus\"\n| \"op_sem Equals = (\\<lambda> <|v1, v2|> \\<Rightarrow> BoolVal (v1 = v2))\"\n| \"op_sem Less = lift_Comp (<) (<)\"\n| \"op_sem Or = (\\<lambda> <|BoolVal a, BoolVal b|> \\<Rightarrow> BoolVal (a \\<or> b))\"\n| \"op_sem And = (\\<lambda> <|BoolVal a, BoolVal b|> \\<Rightarrow> BoolVal (a \\<and> b))\"\n| \"op_sem Not = (\\<lambda> BoolVal a \\<Rightarrow> BoolVal (\\<not>a))\"\n| \"op_sem (Cast t) = (case t of\n                        INTEG \\<Rightarrow> (\\<lambda> BoolVal b \\<Rightarrow> IntVal (bool_to_int b)\n                                  | RealVal r \\<Rightarrow> IntVal (floor r))\n                      | REAL \\<Rightarrow>  (\\<lambda> BoolVal b \\<Rightarrow> RealVal (bool_to_real b)\n                                  | IntVal i \\<Rightarrow> RealVal (real_of_int i)))\"\n| \"op_sem Inverse = lift_RealVal inverse\"\n| \"op_sem Fact = lift_IntVal (\\<lambda>i::int. fact (nat i))\"\n| \"op_sem Sqrt = lift_RealVal safe_sqrt\"\n| \"op_sem Exp = lift_RealVal exp\"\n| \"op_sem Ln = lift_RealVal safe_ln\"\n| \"op_sem Pi = (\\<lambda>_. RealVal pi)\"\n| \"op_sem Pow = (\\<lambda> <|RealVal x, IntVal n|> \\<Rightarrow> if n < 0 then RealVal 0 else RealVal (x ^ nat n)\n                 | <|IntVal x, IntVal n|> \\<Rightarrow> if n < 0 then IntVal 0 else IntVal (x ^ nat n))\"\n| \"op_sem Fst = fst \\<circ> extract_pair\"\n| \"op_sem Snd = snd \\<circ> extract_pair\""], ["", "text \\<open>The semantics of expressions. Assumes that the expression given is well-typed.\\<close>"], ["", "primrec expr_sem :: \"state \\<Rightarrow> expr \\<Rightarrow> val measure\" where\n  \"expr_sem \\<sigma> (Var x) = return_val (\\<sigma> x)\"\n| \"expr_sem \\<sigma> (Val v) = return_val v\"\n| \"expr_sem \\<sigma> (LET e1 IN e2) =\n      do {\n        v \\<leftarrow> expr_sem \\<sigma> e1;\n        expr_sem (v \\<cdot> \\<sigma>) e2\n      }\"\n| \"expr_sem \\<sigma> (oper $$ e) =\n      do {\n        x \\<leftarrow> expr_sem \\<sigma> e;\n        return_val (op_sem oper x)\n      }\"\n| \"expr_sem \\<sigma> <v, w> =\n      do {\n        x \\<leftarrow> expr_sem \\<sigma> v;\n        y \\<leftarrow> expr_sem \\<sigma> w;\n        return_val <|x, y|>\n      }\"\n| \"expr_sem \\<sigma> (IF b THEN e1 ELSE e2) =\n     do {\n       b' \\<leftarrow> expr_sem \\<sigma> b;\n       if b' = TRUE then expr_sem \\<sigma> e1 else expr_sem \\<sigma> e2\n     }\"\n| \"expr_sem \\<sigma> (Random dst e) =\n     do {\n       x \\<leftarrow> expr_sem \\<sigma> e;\n       dist_measure dst x\n     }\"\n| \"expr_sem \\<sigma> (Fail t) = null_measure (stock_measure t)\""], ["", "lemma expr_sem_pair_vars: \"expr_sem \\<sigma> <Var x, Var y> = return_val <|\\<sigma> x, \\<sigma> y|>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> <Var x ,  Var y> =\n    return_val <|\\<sigma> x, \\<sigma> y|>", "by (simp add: return_val_def bind_return[where N=\"PRODUCT (val_type (\\<sigma> x)) (val_type (\\<sigma> y))\"]\n           cong: bind_cong_simp)"], ["", "text \\<open>\n  Well-typed expressions produce a result in the measure space that corresponds to their type\n\\<close>"], ["", "lemma op_sem_val_type:\n    \"op_type oper (val_type v) = Some t' \\<Longrightarrow> val_type (op_sem oper v) = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_type oper (val_type v) = Some t' \\<Longrightarrow>\n    val_type (op_sem oper v) = t'", "by (cases oper) (auto split: val.split if_split_asm pdf_type.split_asm\n                        simp: lift_RealIntVal_def lift_Comp_def\n                              lift_IntVal_def lift_RealVal_def lift_RealIntVal2_def\n                        elim!: PROD_E INTEG_E REAL_E)"], ["", "lemma sets_expr_sem:\n  \"\\<Gamma> \\<turnstile> w : t \\<Longrightarrow> (\\<forall>x \\<in> free_vars w. val_type (\\<sigma> x) = \\<Gamma> x) \\<Longrightarrow>\n       sets (expr_sem \\<sigma> w) = sets (stock_measure t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> w : t;\n     \\<forall>x\\<in>free_vars w. val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n    \\<Longrightarrow> sets (expr_sem \\<sigma> w) = sets (stock_measure t)", "proof (induction arbitrary: \\<sigma> rule: expr_typing.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x \\<sigma>.\n       \\<forall>x\\<in>free_vars (Var x).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Var x)) = sets (stock_measure (\\<Gamma> x))\n 2. \\<And>\\<Gamma> v \\<sigma>.\n       \\<forall>x\\<in>free_vars (Val v).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Val v)) = sets (stock_measure (val_type v))\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 4. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 6. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 7. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 8. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "case (et_var \\<Gamma> x \\<sigma>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>free_vars (Var x). val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x \\<sigma>.\n       \\<forall>x\\<in>free_vars (Var x).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Var x)) = sets (stock_measure (\\<Gamma> x))\n 2. \\<And>\\<Gamma> v \\<sigma>.\n       \\<forall>x\\<in>free_vars (Val v).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Val v)) = sets (stock_measure (val_type v))\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 4. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 6. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 7. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 8. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>free_vars (Var x). val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> (Var x)) = sets (stock_measure (\\<Gamma> x))", "by (simp add: return_val_def)"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> (Var x)) = sets (stock_measure (\\<Gamma> x))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> v \\<sigma>.\n       \\<forall>x\\<in>free_vars (Val v).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Val v)) = sets (stock_measure (val_type v))\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 3. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 5. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 6. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 7. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> v \\<sigma>.\n       \\<forall>x\\<in>free_vars (Val v).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Val v)) = sets (stock_measure (val_type v))\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 3. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 5. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 6. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 7. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "case (et_val \\<Gamma> v \\<sigma>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>free_vars (Val v). val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> v \\<sigma>.\n       \\<forall>x\\<in>free_vars (Val v).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Val v)) = sets (stock_measure (val_type v))\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 3. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 5. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 6. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 7. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>free_vars (Val v). val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> (Val v)) = sets (stock_measure (val_type v))", "by (simp add: return_val_def)"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> (Val v)) = sets (stock_measure (val_type v))\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 6. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 6. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "case (et_let \\<Gamma> e1 t1 e2 t2 \\<sigma>)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<forall>x\\<in>free_vars e1.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e1) = sets (stock_measure t1)\n  \\<forall>x\\<in>free_vars e2.\n     val_type (?\\<sigma> x) =\n     (case x of 0 \\<Rightarrow> t1\n      | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e2) = sets (stock_measure t2)\n  \\<forall>x\\<in>free_vars (LET e1 IN e2).\n     val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 6. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "hence \"sets (expr_sem \\<sigma> e1) = sets (stock_measure t1)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<forall>x\\<in>free_vars e1.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e1) = sets (stock_measure t1)\n  \\<forall>x\\<in>free_vars e2.\n     val_type (?\\<sigma> x) =\n     (case x of 0 \\<Rightarrow> t1\n      | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e2) = sets (stock_measure t2)\n  \\<forall>x\\<in>free_vars (LET e1 IN e2).\n     val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> e1) = sets (stock_measure t1)", "by simp"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> e1) = sets (stock_measure t1)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 6. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "from sets_eq_imp_space_eq[OF this]"], ["proof (chain)\npicking this:\n  space (expr_sem \\<sigma> e1) = space (stock_measure t1)", "have A: \"space (expr_sem \\<sigma> e1) = type_universe t1\""], ["proof (prove)\nusing this:\n  space (expr_sem \\<sigma> e1) = space (stock_measure t1)\n\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> e1) = type_universe t1", "by (simp add:)"], ["proof (state)\nthis:\n  space (expr_sem \\<sigma> e1) = type_universe t1\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 6. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "hence B: \"(SOME x. x \\<in> space (expr_sem \\<sigma> e1)) \\<in> space (expr_sem \\<sigma> e1)\" (is \"?v \\<in> _\")"], ["proof (prove)\nusing this:\n  space (expr_sem \\<sigma> e1) = type_universe t1\n\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n    \\<in> space (expr_sem \\<sigma> e1)", "unfolding some_in_eq"], ["proof (prove)\nusing this:\n  space (expr_sem \\<sigma> e1) = type_universe t1\n\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> e1) \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n  \\<in> space (expr_sem \\<sigma> e1)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 6. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "with A et_let"], ["proof (chain)\npicking this:\n  space (expr_sem \\<sigma> e1) = type_universe t1\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<forall>x\\<in>free_vars e1.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e1) = sets (stock_measure t1)\n  \\<forall>x\\<in>free_vars e2.\n     val_type (?\\<sigma> x) =\n     (case x of 0 \\<Rightarrow> t1\n      | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e2) = sets (stock_measure t2)\n  \\<forall>x\\<in>free_vars (LET e1 IN e2).\n     val_type (\\<sigma> x) = \\<Gamma> x\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n  \\<in> space (expr_sem \\<sigma> e1)", "have \"sets (expr_sem (case_nat ?v \\<sigma>) e2) = sets (stock_measure t2)\""], ["proof (prove)\nusing this:\n  space (expr_sem \\<sigma> e1) = type_universe t1\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<forall>x\\<in>free_vars e1.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e1) = sets (stock_measure t1)\n  \\<forall>x\\<in>free_vars e2.\n     val_type (?\\<sigma> x) =\n     (case x of 0 \\<Rightarrow> t1\n      | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e2) = sets (stock_measure t2)\n  \\<forall>x\\<in>free_vars (LET e1 IN e2).\n     val_type (\\<sigma> x) = \\<Gamma> x\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n  \\<in> space (expr_sem \\<sigma> e1)\n\ngoal (1 subgoal):\n 1. sets\n     (expr_sem\n       (case_nat (SOME x. x \\<in> space (expr_sem \\<sigma> e1)) \\<sigma>)\n       e2) =\n    sets (stock_measure t2)", "by (intro et_let.IH(2)) (auto split: nat.split)"], ["proof (state)\nthis:\n  sets\n   (expr_sem\n     (case_nat (SOME x. x \\<in> space (expr_sem \\<sigma> e1)) \\<sigma>)\n     e2) =\n  sets (stock_measure t2)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) =\n              (case x of 0 \\<Rightarrow> t1\n               | Suc x \\<Rightarrow> \\<Gamma> x) \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars (LET e1 IN e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (LET e1 IN e2)) =\n                         sets (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 6. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "with B"], ["proof (chain)\npicking this:\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n  \\<in> space (expr_sem \\<sigma> e1)\n  sets\n   (expr_sem\n     (case_nat (SOME x. x \\<in> space (expr_sem \\<sigma> e1)) \\<sigma>)\n     e2) =\n  sets (stock_measure t2)", "show \"sets (expr_sem \\<sigma> (LetVar e1 e2)) = sets (stock_measure t2)\""], ["proof (prove)\nusing this:\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n  \\<in> space (expr_sem \\<sigma> e1)\n  sets\n   (expr_sem\n     (case_nat (SOME x. x \\<in> space (expr_sem \\<sigma> e1)) \\<sigma>)\n     e2) =\n  sets (stock_measure t2)\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> (LET e1 IN e2)) = sets (stock_measure t2)", "by (subst expr_sem.simps, subst bind_nonempty) auto"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> (LET e1 IN e2)) = sets (stock_measure t2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 5. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 5. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "case (et_op \\<Gamma> e t oper t' \\<sigma>)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n  \\<forall>x\\<in>free_vars e.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e) = sets (stock_measure t)\n  \\<forall>x\\<in>free_vars (oper $$ e). val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 5. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "from et_op.IH[of \\<sigma>] and et_op.prems"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>free_vars e.\n     val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem \\<sigma> e) = sets (stock_measure t)\n  \\<forall>x\\<in>free_vars (oper $$ e). val_type (\\<sigma> x) = \\<Gamma> x", "have [simp]: \"sets (expr_sem \\<sigma> e) = sets (stock_measure t)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>free_vars e.\n     val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem \\<sigma> e) = sets (stock_measure t)\n  \\<forall>x\\<in>free_vars (oper $$ e). val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> e) = sets (stock_measure t)", "by simp"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> e) = sets (stock_measure t)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 5. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "from sets_eq_imp_space_eq[OF this]"], ["proof (chain)\npicking this:\n  space (expr_sem \\<sigma> e) = space (stock_measure t)", "have [simp]: \"space (expr_sem \\<sigma> e) = type_universe t\""], ["proof (prove)\nusing this:\n  space (expr_sem \\<sigma> e) = space (stock_measure t)\n\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> e) = type_universe t", "by (simp add:)"], ["proof (state)\nthis:\n  space (expr_sem \\<sigma> e) = type_universe t\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 5. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "have \"(SOME x. x \\<in> space (expr_sem \\<sigma> e)) \\<in> space (expr_sem \\<sigma> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> space (expr_sem \\<sigma> e))\n    \\<in> space (expr_sem \\<sigma> e)", "unfolding some_in_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> e) \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e))\n  \\<in> space (expr_sem \\<sigma> e)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) = sets (stock_measure t);\n        op_type oper t = Some t';\n        \\<forall>x\\<in>free_vars (oper $$ e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (oper $$ e)) =\n                         sets (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 5. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "with et_op"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n  \\<forall>x\\<in>free_vars e.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e) = sets (stock_measure t)\n  \\<forall>x\\<in>free_vars (oper $$ e). val_type (\\<sigma> x) = \\<Gamma> x\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e))\n  \\<in> space (expr_sem \\<sigma> e)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n  \\<forall>x\\<in>free_vars e.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e) = sets (stock_measure t)\n  \\<forall>x\\<in>free_vars (oper $$ e). val_type (\\<sigma> x) = \\<Gamma> x\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e))\n  \\<in> space (expr_sem \\<sigma> e)\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> (oper $$ e)) = sets (stock_measure t')", "by (simp add: bind_nonempty return_val_def op_sem_val_type)"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> (oper $$ e)) = sets (stock_measure t')\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 4. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 4. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "case (et_pair \\<Gamma> e1 t1 e2 t2 \\<sigma>)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  \\<forall>x\\<in>free_vars e1.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e1) = sets (stock_measure t1)\n  \\<forall>x\\<in>free_vars e2.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e2) = sets (stock_measure t2)\n  \\<forall>x\\<in>free_vars <e1 ,  e2>. val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 4. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "hence [simp]: \"space (expr_sem \\<sigma> e1) = type_universe t1\"\n                \"space (expr_sem \\<sigma> e2) = type_universe t2\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  \\<forall>x\\<in>free_vars e1.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e1) = sets (stock_measure t1)\n  \\<forall>x\\<in>free_vars e2.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e2) = sets (stock_measure t2)\n  \\<forall>x\\<in>free_vars <e1 ,  e2>. val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> e1) = type_universe t1 &&&\n    space (expr_sem \\<sigma> e2) = type_universe t2", "by (simp_all add: sets_eq_imp_space_eq)"], ["proof (state)\nthis:\n  space (expr_sem \\<sigma> e1) = type_universe t1\n  space (expr_sem \\<sigma> e2) = type_universe t2\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 4. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "have \"(SOME x. x \\<in> space (expr_sem \\<sigma> e1)) \\<in> space (expr_sem \\<sigma> e1)\"\n       \"(SOME x. x \\<in> space (expr_sem \\<sigma> e2)) \\<in> space (expr_sem \\<sigma> e2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n    \\<in> space (expr_sem \\<sigma> e1) &&&\n    (SOME x. x \\<in> space (expr_sem \\<sigma> e2))\n    \\<in> space (expr_sem \\<sigma> e2)", "unfolding some_in_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> e1) \\<noteq> {} &&&\n    space (expr_sem \\<sigma> e2) \\<noteq> {}", "by simp_all"], ["proof (state)\nthis:\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n  \\<in> space (expr_sem \\<sigma> e1)\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e2))\n  \\<in> space (expr_sem \\<sigma> e2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t2);\n        \\<forall>x\\<in>free_vars <e1 ,  e2>.\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> <e1 ,  e2>) =\n                         sets (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 4. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "with et_pair.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n  \\<in> space (expr_sem \\<sigma> e1)\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e2))\n  \\<in> space (expr_sem \\<sigma> e2)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e1))\n  \\<in> space (expr_sem \\<sigma> e1)\n  (SOME x. x \\<in> space (expr_sem \\<sigma> e2))\n  \\<in> space (expr_sem \\<sigma> e2)\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> <e1 ,  e2>) =\n    sets (stock_measure (PRODUCT t1 t2))", "by (simp add: bind_nonempty return_val_def)"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> <e1 ,  e2>) = sets (stock_measure (PRODUCT t1 t2))\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 2. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 3. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 2. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 3. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "case (et_rand \\<Gamma> e dst \\<sigma>)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e : dist_param_type dst\n  \\<forall>x\\<in>free_vars e.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e) = sets (stock_measure (dist_param_type dst))\n  \\<forall>x\\<in>free_vars (Random dst e).\n     val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 2. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 3. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "from et_rand.IH[of \\<sigma>] et_rand.prems"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>free_vars e.\n     val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem \\<sigma> e) = sets (stock_measure (dist_param_type dst))\n  \\<forall>x\\<in>free_vars (Random dst e).\n     val_type (\\<sigma> x) = \\<Gamma> x", "have \"sets (expr_sem \\<sigma> e) = sets (stock_measure (dist_param_type dst))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>free_vars e.\n     val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem \\<sigma> e) = sets (stock_measure (dist_param_type dst))\n  \\<forall>x\\<in>free_vars (Random dst e).\n     val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> e) = sets (stock_measure (dist_param_type dst))", "by simp"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> e) = sets (stock_measure (dist_param_type dst))\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e) =\n           sets (stock_measure (dist_param_type dst));\n        \\<forall>x\\<in>free_vars (Random dst e).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (Random dst e)) =\n                         sets (stock_measure (dist_result_type dst))\n 2. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 3. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "from this sets_eq_imp_space_eq[OF this]"], ["proof (chain)\npicking this:\n  sets (expr_sem \\<sigma> e) = sets (stock_measure (dist_param_type dst))\n  space (expr_sem \\<sigma> e) = space (stock_measure (dist_param_type dst))", "show ?case"], ["proof (prove)\nusing this:\n  sets (expr_sem \\<sigma> e) = sets (stock_measure (dist_param_type dst))\n  space (expr_sem \\<sigma> e) = space (stock_measure (dist_param_type dst))\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> (Random dst e)) =\n    sets (stock_measure (dist_result_type dst))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sets (expr_sem \\<sigma> e) =\n             sets (stock_measure (dist_param_type dst));\n     space (expr_sem \\<sigma> e) =\n     type_universe (dist_param_type dst)\\<rbrakk>\n    \\<Longrightarrow> sets (expr_sem \\<sigma> e \\<bind> dist_measure dst) =\n                      sets (stock_measure (dist_result_type dst))", "apply (subst sets_bind)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>sets (expr_sem \\<sigma> e) =\n                sets (stock_measure (dist_param_type dst));\n        space (expr_sem \\<sigma> e) = type_universe (dist_param_type dst);\n        x \\<in> space (expr_sem \\<sigma> e)\\<rbrakk>\n       \\<Longrightarrow> sets (dist_measure dst x) = sets ?N3\n 2. \\<lbrakk>sets (expr_sem \\<sigma> e) =\n             sets (stock_measure (dist_param_type dst));\n     space (expr_sem \\<sigma> e) =\n     type_universe (dist_param_type dst)\\<rbrakk>\n    \\<Longrightarrow> space (expr_sem \\<sigma> e) \\<noteq> {}\n 3. \\<lbrakk>sets (expr_sem \\<sigma> e) =\n             sets (stock_measure (dist_param_type dst));\n     space (expr_sem \\<sigma> e) =\n     type_universe (dist_param_type dst)\\<rbrakk>\n    \\<Longrightarrow> sets ?N3 = sets (stock_measure (dist_result_type dst))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> (Random dst e)) =\n  sets (stock_measure (dist_result_type dst))\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 2. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 2. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "case (et_if \\<Gamma> b e1 t e2 \\<sigma>)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> b : BOOL\n  \\<Gamma> \\<turnstile> e1 : t\n  \\<Gamma> \\<turnstile> e2 : t\n  \\<forall>x\\<in>free_vars b.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> b) = sets (stock_measure BOOL)\n  \\<forall>x\\<in>free_vars e1.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e1) = sets (stock_measure t)\n  \\<forall>x\\<in>free_vars e2.\n     val_type (?\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n  sets (expr_sem ?\\<sigma> e2) = sets (stock_measure t)\n  \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n     val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 2. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "have \"sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL)", "using et_if.prems"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n     val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL)", "by (intro et_if.IH) simp"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL)\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 2. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "from sets_eq_imp_space_eq[OF this]"], ["proof (chain)\npicking this:\n  space (expr_sem \\<sigma> b) = space (stock_measure BOOL)", "have \"space (expr_sem \\<sigma> b) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  space (expr_sem \\<sigma> b) = space (stock_measure BOOL)\n\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> b) \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  space (expr_sem \\<sigma> b) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 2. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "moreover"], ["proof (state)\nthis:\n  space (expr_sem \\<sigma> b) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 2. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "have \"sets (expr_sem \\<sigma> e1) = sets (stock_measure t)\"\n                \"sets (expr_sem \\<sigma> e2) = sets (stock_measure t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> e1) = sets (stock_measure t) &&&\n    sets (expr_sem \\<sigma> e2) = sets (stock_measure t)", "using et_if.prems"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n     val_type (\\<sigma> x) = \\<Gamma> x\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> e1) = sets (stock_measure t) &&&\n    sets (expr_sem \\<sigma> e2) = sets (stock_measure t)", "by (intro et_if.IH, simp)+"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> e1) = sets (stock_measure t)\n  sets (expr_sem \\<sigma> e2) = sets (stock_measure t)\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars b.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> b) = sets (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e1.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e1) = sets (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>\\<sigma>.\n           \\<forall>x\\<in>free_vars e2.\n              val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n           sets (expr_sem \\<sigma> e2) = sets (stock_measure t);\n        \\<forall>x\\<in>free_vars (IF b THEN e1 ELSE e2).\n           val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n       \\<Longrightarrow> sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         sets (stock_measure t)\n 2. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "ultimately"], ["proof (chain)\npicking this:\n  space (expr_sem \\<sigma> b) \\<noteq> {}\n  sets (expr_sem \\<sigma> e1) = sets (stock_measure t)\n  sets (expr_sem \\<sigma> e2) = sets (stock_measure t)", "show ?case"], ["proof (prove)\nusing this:\n  space (expr_sem \\<sigma> b) \\<noteq> {}\n  sets (expr_sem \\<sigma> e1) = sets (stock_measure t)\n  sets (expr_sem \\<sigma> e2) = sets (stock_measure t)\n\ngoal (1 subgoal):\n 1. sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) = sets (stock_measure t)", "by (simp add: bind_nonempty)"], ["proof (state)\nthis:\n  sets (expr_sem \\<sigma> (IF b THEN e1 ELSE e2)) = sets (stock_measure t)\n\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> t \\<sigma>.\n       \\<forall>x\\<in>free_vars (Fail t).\n          val_type (\\<sigma> x) = \\<Gamma> x \\<Longrightarrow>\n       sets (expr_sem \\<sigma> (Fail t)) = sets (stock_measure t)", "qed simp_all"], ["", "lemma space_expr_sem:\n    \"\\<Gamma> \\<turnstile> w : t \\<Longrightarrow> (\\<forall>x \\<in> free_vars w. val_type (\\<sigma> x) = \\<Gamma> x)\n      \\<Longrightarrow> space (expr_sem \\<sigma> w) = type_universe t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> w : t;\n     \\<forall>x\\<in>free_vars w. val_type (\\<sigma> x) = \\<Gamma> x\\<rbrakk>\n    \\<Longrightarrow> space (expr_sem \\<sigma> w) = type_universe t", "by (subst space_stock_measure[symmetric]) (intro sets_expr_sem sets_eq_imp_space_eq)"], ["", "lemma measurable_expr_sem_eq:\n    \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> \\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow> free_vars e \\<subseteq> V \\<Longrightarrow>\n       measurable (expr_sem \\<sigma> e) = measurable (stock_measure t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n     \\<sigma> \\<in> space (state_measure V \\<Gamma>);\n     free_vars e \\<subseteq> V\\<rbrakk>\n    \\<Longrightarrow> (\\<rightarrow>\\<^sub>M) (expr_sem \\<sigma> e) =\n                      (\\<rightarrow>\\<^sub>M) (stock_measure t)", "by (intro ext measurable_cong_sets sets_expr_sem)\n     (auto simp: state_measure_def space_PiM dest: PiE_mem)"], ["", "lemma measurable_expr_semI:\n    \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> \\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow> free_vars e \\<subseteq> V \\<Longrightarrow>\n       f \\<in> measurable (stock_measure t) M \\<Longrightarrow> f \\<in> measurable (expr_sem \\<sigma> e) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n     \\<sigma> \\<in> space (state_measure V \\<Gamma>);\n     free_vars e \\<subseteq> V;\n     f \\<in> stock_measure t \\<rightarrow>\\<^sub>M M\\<rbrakk>\n    \\<Longrightarrow> f \\<in> expr_sem \\<sigma> e \\<rightarrow>\\<^sub>M M", "by (subst measurable_expr_sem_eq)"], ["", "lemma expr_sem_eq_on_vars:\n  \"(\\<And>x. x\\<in>free_vars e \\<Longrightarrow> \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 e = expr_sem \\<sigma>\\<^sub>2 e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> free_vars e \\<Longrightarrow>\n        \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n    expr_sem \\<sigma>\\<^sub>1 e = expr_sem \\<sigma>\\<^sub>2 e", "proof (induction e arbitrary: \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (LET e1 IN e2) =\n                         expr_sem \\<sigma>\\<^sub>2 (LET e1 IN e2)\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (x1a $$ e) =\n                         expr_sem \\<sigma>\\<^sub>2 (x1a $$ e)\n 5. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 6. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 7. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 8. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "case (LetVar e1 e2 \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars e1 \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 e1 = expr_sem ?\\<sigma>\\<^sub>2 e1\n  (\\<And>x.\n      x \\<in> free_vars e2 \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 e2 = expr_sem ?\\<sigma>\\<^sub>2 e2\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (LET e1 IN e2) =\n                         expr_sem \\<sigma>\\<^sub>2 (LET e1 IN e2)\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (x1a $$ e) =\n                         expr_sem \\<sigma>\\<^sub>2 (x1a $$ e)\n 5. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 6. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 7. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 8. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "from LetVar.prems"], ["proof (chain)\npicking this:\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x", "have A: \"expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\""], ["proof (prove)\nusing this:\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1", "by (rule LetVar.IH(1)) simp_all"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (LET e1 IN e2) =\n                         expr_sem \\<sigma>\\<^sub>2 (LET e1 IN e2)\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (x1a $$ e) =\n                         expr_sem \\<sigma>\\<^sub>2 (x1a $$ e)\n 5. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 6. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 7. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 8. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "from LetVar.prems"], ["proof (chain)\npicking this:\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x", "show ?case"], ["proof (prove)\nusing this:\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 (LET e1 IN e2) = expr_sem \\<sigma>2 (LET e1 IN e2)", "by (subst (1 2) expr_sem.simps, subst A)\n         (auto intro!: bind_cong LetVar.IH(2) split: nat.split)"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 (LET e1 IN e2) = expr_sem \\<sigma>2 (LET e1 IN e2)\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (x1a $$ e) =\n                         expr_sem \\<sigma>\\<^sub>2 (x1a $$ e)\n 4. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (x1a $$ e) =\n                         expr_sem \\<sigma>\\<^sub>2 (x1a $$ e)\n 4. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "case (Operator oper e \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars e \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 e = expr_sem ?\\<sigma>\\<^sub>2 e\n  ?x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (x1a $$ e) =\n                         expr_sem \\<sigma>\\<^sub>2 (x1a $$ e)\n 4. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "from Operator.IH[OF Operator.prems]"], ["proof (chain)\npicking this:\n  (\\<And>x.\n      x \\<in> free_vars e \\<Longrightarrow>\n      ?x1 x \\<in> free_vars (oper $$ e)) \\<Longrightarrow>\n  expr_sem (\\<lambda>a. \\<sigma>1 (?x1 a)) e =\n  expr_sem (\\<lambda>a. \\<sigma>2 (?x1 a)) e", "show ?case"], ["proof (prove)\nusing this:\n  (\\<And>x.\n      x \\<in> free_vars e \\<Longrightarrow>\n      ?x1 x \\<in> free_vars (oper $$ e)) \\<Longrightarrow>\n  expr_sem (\\<lambda>a. \\<sigma>1 (?x1 a)) e =\n  expr_sem (\\<lambda>a. \\<sigma>2 (?x1 a)) e\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 (oper $$ e) = expr_sem \\<sigma>2 (oper $$ e)", "by simp"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 (oper $$ e) = expr_sem \\<sigma>2 (oper $$ e)\n\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "case (Pair e1 e2 \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars e1 \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 e1 = expr_sem ?\\<sigma>\\<^sub>2 e1\n  (\\<And>x.\n      x \\<in> free_vars e2 \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 e2 = expr_sem ?\\<sigma>\\<^sub>2 e2\n  ?x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "from Pair.prems"], ["proof (chain)\npicking this:\n  ?x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x", "have \"expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\""], ["proof (prove)\nusing this:\n  ?x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1", "by (intro Pair.IH) auto"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\n\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "moreover"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\n\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "from Pair.prems"], ["proof (chain)\npicking this:\n  ?x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x", "have \"expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2\""], ["proof (prove)\nusing this:\n  ?x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2", "by (intro Pair.IH) auto"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2\n\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 <e1 ,  e2> =\n                         expr_sem \\<sigma>\\<^sub>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "ultimately"], ["proof (chain)\npicking this:\n  expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\n  expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2", "show ?case"], ["proof (prove)\nusing this:\n  expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\n  expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 <e1 ,  e2> = expr_sem \\<sigma>2 <e1 ,  e2>", "by simp"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 <e1 ,  e2> = expr_sem \\<sigma>2 <e1 ,  e2>\n\ngoal (5 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 4. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 5. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 4. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 5. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "case (Random dst e \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars e \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 e = expr_sem ?\\<sigma>\\<^sub>2 e\n  ?x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (5 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 4. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 5. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "from Random.prems"], ["proof (chain)\npicking this:\n  ?x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x", "have A: \"expr_sem \\<sigma>1 e = expr_sem \\<sigma>2 e\""], ["proof (prove)\nusing this:\n  ?x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 e = expr_sem \\<sigma>2 e", "by (rule Random.IH) simp_all"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 e = expr_sem \\<sigma>2 e\n\ngoal (5 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>x1a e \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e =\n                   expr_sem \\<sigma>\\<^sub>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (Random x1a e) =\n                         expr_sem \\<sigma>\\<^sub>2 (Random x1a e)\n 4. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 5. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 (Random dst e) = expr_sem \\<sigma>2 (Random dst e)", "by (subst (1 2) expr_sem.simps, subst A) (auto intro!: bind_cong)"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 (Random dst e) = expr_sem \\<sigma>2 (Random dst e)\n\ngoal (4 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 4. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 4. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "case (IfThenElse b e1 e2 \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars b \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 b = expr_sem ?\\<sigma>\\<^sub>2 b\n  (\\<And>x.\n      x \\<in> free_vars e1 \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 e1 = expr_sem ?\\<sigma>\\<^sub>2 e1\n  (\\<And>x.\n      x \\<in> free_vars e2 \\<Longrightarrow>\n      ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n  expr_sem ?\\<sigma>\\<^sub>1 e2 = expr_sem ?\\<sigma>\\<^sub>2 e2\n  ?x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (4 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 4. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "have A: \"expr_sem \\<sigma>1 b = expr_sem \\<sigma>2 b\"\n          \"expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\"\n          \"expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 b = expr_sem \\<sigma>2 b &&&\n    expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1 &&&\n    expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2", "using IfThenElse.prems"], ["proof (prove)\nusing this:\n  ?x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 b = expr_sem \\<sigma>2 b &&&\n    expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1 &&&\n    expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2", "by (intro IfThenElse.IH, simp)+"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 b = expr_sem \\<sigma>2 b\n  expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\n  expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2\n\ngoal (4 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>e1 e2 e3 \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       \\<lbrakk>\\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>\\<^sub>1 x =\n                       \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n                   expr_sem \\<sigma>\\<^sub>1 e1 =\n                   expr_sem \\<sigma>\\<^sub>2 e1;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e2 = expr_sem \\<sigma>\\<^sub>2 e2;\n        \\<And>\\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x) \\<Longrightarrow>\n           expr_sem \\<sigma>\\<^sub>1 e3 = expr_sem \\<sigma>\\<^sub>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem \\<sigma>\\<^sub>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem \\<sigma>\\<^sub>2 (IF e1 THEN e2 ELSE e3)\n 4. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "thus ?case"], ["proof (prove)\nusing this:\n  expr_sem \\<sigma>1 b = expr_sem \\<sigma>2 b\n  expr_sem \\<sigma>1 e1 = expr_sem \\<sigma>2 e1\n  expr_sem \\<sigma>1 e2 = expr_sem \\<sigma>2 e2\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma>1 (IF b THEN e1 ELSE e2) =\n    expr_sem \\<sigma>2 (IF b THEN e1 ELSE e2)", "by (simp only: expr_sem.simps A)"], ["proof (state)\nthis:\n  expr_sem \\<sigma>1 (IF b THEN e1 ELSE e2) =\n  expr_sem \\<sigma>2 (IF b THEN e1 ELSE e2)\n\ngoal (3 subgoals):\n 1. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Var x) = expr_sem \\<sigma>\\<^sub>2 (Var x)\n 2. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Val x) = expr_sem \\<sigma>\\<^sub>2 (Val x)\n 3. \\<And>x \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>\\<^sub>1 xa = \\<sigma>\\<^sub>2 xa) \\<Longrightarrow>\n       expr_sem \\<sigma>\\<^sub>1 (Fail x) =\n       expr_sem \\<sigma>\\<^sub>2 (Fail x)", "qed simp_all"], ["", "subsection \\<open>Measurability\\<close>"], ["", "lemma borel_measurable_eq[measurable (raw)]:\n  assumes [measurable]: \"f \\<in> borel_measurable M\" \"g \\<in> borel_measurable M\"\n  shows \"Measurable.pred M (\\<lambda>x. f x = (g x::real))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x = g x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x = g x)", "have *: \"(\\<lambda>x. f x = g x) = (\\<lambda>x. f x - g x = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x = g x) = (\\<lambda>x. f x - g x = 0)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. f x = g x) = (\\<lambda>x. f x - g x = 0)\n\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x = g x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x = g x)", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x - g x = 0)", "by measurable"], ["proof (state)\nthis:\n  Measurable.pred M (\\<lambda>x. f x = g x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_equals:\n  \"(\\<lambda>(x,y). x = y) \\<in> measurable (stock_measure t \\<Otimes>\\<^sub>M stock_measure t) (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stock_measure t \\<Otimes>\\<^sub>M stock_measure t)\n     (\\<lambda>(x, y). x = y)", "proof (induction t)"], ["proof (state)\ngoal (5 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 4. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 5. \\<And>t1 t2.\n       \\<lbrakk>Measurable.pred\n                 (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n                 (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y);\n        Measurable.pred\n         (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred\n                          (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                           stock_measure (PRODUCT t1 t2))\n                          (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "case REAL"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 4. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 5. \\<And>t1 t2.\n       \\<lbrakk>Measurable.pred\n                 (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n                 (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y);\n        Measurable.pred\n         (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred\n                          (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                           stock_measure (PRODUCT t1 t2))\n                          (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "let ?f = \"\\<lambda>x. extract_real (fst x) = extract_real (snd x)\""], ["proof (state)\ngoal (5 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 4. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 5. \\<And>t1 t2.\n       \\<lbrakk>Measurable.pred\n                 (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n                 (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y);\n        Measurable.pred\n         (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred\n                          (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                           stock_measure (PRODUCT t1 t2))\n                          (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "proof (subst measurable_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>w.\n       w \\<in> space\n                (stock_measure REAL \\<Otimes>\\<^sub>M\n                 stock_measure REAL) \\<Longrightarrow>\n       (case w of (x, xa) \\<Rightarrow> x = xa) = ?g w\n 2. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL) ?g", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>w.\n       w \\<in> space\n                (stock_measure REAL \\<Otimes>\\<^sub>M\n                 stock_measure REAL) \\<Longrightarrow>\n       (case w of (x, xa) \\<Rightarrow> x = xa) = ?g w\n 2. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL) ?g", "assume \"x \\<in> space (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\""], ["proof (state)\nthis:\n  x \\<in> space (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n\ngoal (2 subgoals):\n 1. \\<And>w.\n       w \\<in> space\n                (stock_measure REAL \\<Otimes>\\<^sub>M\n                 stock_measure REAL) \\<Longrightarrow>\n       (case w of (x, xa) \\<Rightarrow> x = xa) = ?g w\n 2. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL) ?g", "thus \"(\\<lambda>(x,y). x = y) x = ?f x\""], ["proof (prove)\nusing this:\n  x \\<in> space (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n\ngoal (1 subgoal):\n 1. (case x of (x, y) \\<Rightarrow> x = y) =\n    (extract_real (fst x) = extract_real (snd x))", "by (auto simp: space_pair_measure elim!: REAL_E)"], ["proof (state)\nthis:\n  (case x of (x, y) \\<Rightarrow> x = y) =\n  (extract_real (fst x) = extract_real (snd x))\n\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n     (\\<lambda>w. extract_real (fst w) = extract_real (snd w))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n     (\\<lambda>w. extract_real (fst w) = extract_real (snd w))", "show \"?f \\<in> measurable (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL) (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n     (\\<lambda>x. extract_real (fst x) = extract_real (snd x))", "by measurable"], ["proof (state)\nthis:\n  Measurable.pred (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n   (\\<lambda>x. extract_real (fst x) = extract_real (snd x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Measurable.pred (stock_measure REAL \\<Otimes>\\<^sub>M stock_measure REAL)\n   (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n\ngoal (4 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 4. \\<And>t1 t2.\n       \\<lbrakk>Measurable.pred\n                 (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n                 (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y);\n        Measurable.pred\n         (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred\n                          (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                           stock_measure (PRODUCT t1 t2))\n                          (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 4. \\<And>t1 t2.\n       \\<lbrakk>Measurable.pred\n                 (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n                 (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y);\n        Measurable.pred\n         (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred\n                          (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                           stock_measure (PRODUCT t1 t2))\n                          (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "case (PRODUCT t1 t2)"], ["proof (state)\nthis:\n  Measurable.pred (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n   (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n  Measurable.pred (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n   (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n\ngoal (4 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 4. \\<And>t1 t2.\n       \\<lbrakk>Measurable.pred\n                 (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n                 (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y);\n        Measurable.pred\n         (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred\n                          (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                           stock_measure (PRODUCT t1 t2))\n                          (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "let ?g = \"\\<lambda>(x,y). x = y\""], ["proof (state)\ngoal (4 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 4. \\<And>t1 t2.\n       \\<lbrakk>Measurable.pred\n                 (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n                 (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y);\n        Measurable.pred\n         (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred\n                          (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                           stock_measure (PRODUCT t1 t2))\n                          (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "let ?f = \"\\<lambda>x. ?g (fst (extract_pair (fst x)), fst (extract_pair (snd x))) \\<and>\n                ?g (snd (extract_pair (fst x)), snd (extract_pair (snd x)))\""], ["proof (state)\ngoal (4 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 4. \\<And>t1 t2.\n       \\<lbrakk>Measurable.pred\n                 (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n                 (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y);\n        Measurable.pred\n         (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n         (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred\n                          (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                           stock_measure (PRODUCT t1 t2))\n                          (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n      stock_measure (PRODUCT t1 t2))\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "proof (subst measurable_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>w.\n       w \\<in> space\n                (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                 stock_measure (PRODUCT t1 t2)) \\<Longrightarrow>\n       (case w of (x, xa) \\<Rightarrow> x = xa) = ?g w\n 2. Measurable.pred\n     (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n      stock_measure (PRODUCT t1 t2))\n     ?g", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>w.\n       w \\<in> space\n                (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                 stock_measure (PRODUCT t1 t2)) \\<Longrightarrow>\n       (case w of (x, xa) \\<Rightarrow> x = xa) = ?g w\n 2. Measurable.pred\n     (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n      stock_measure (PRODUCT t1 t2))\n     ?g", "assume \"x \\<in> space (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M stock_measure (PRODUCT t1 t2))\""], ["proof (state)\nthis:\n  x \\<in> space\n           (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n            stock_measure (PRODUCT t1 t2))\n\ngoal (2 subgoals):\n 1. \\<And>w.\n       w \\<in> space\n                (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n                 stock_measure (PRODUCT t1 t2)) \\<Longrightarrow>\n       (case w of (x, xa) \\<Rightarrow> x = xa) = ?g w\n 2. Measurable.pred\n     (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n      stock_measure (PRODUCT t1 t2))\n     ?g", "thus \"(\\<lambda>(x,y). x = y) x = ?f x\""], ["proof (prove)\nusing this:\n  x \\<in> space\n           (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n            stock_measure (PRODUCT t1 t2))\n\ngoal (1 subgoal):\n 1. (case x of (x, y) \\<Rightarrow> x = y) =\n    ((case (fst (extract_pair (fst x)), fst (extract_pair (snd x))) of\n      (x, y) \\<Rightarrow> x = y) \\<and>\n     (case (snd (extract_pair (fst x)), snd (extract_pair (snd x))) of\n      (x, y) \\<Rightarrow> x = y))", "apply (auto simp: space_pair_measure)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa y.\n       \\<lbrakk>val_type xa = PRODUCT t1 t2; val_type y = PRODUCT t1 t2;\n        x = (xa, y); fst (extract_pair xa) = fst (extract_pair y);\n        snd (extract_pair xa) = snd (extract_pair y)\\<rbrakk>\n       \\<Longrightarrow> xa = y", "apply (elim PROD_E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa y a b aa ba.\n       \\<lbrakk>x = (xa, y); fst (extract_pair xa) = fst (extract_pair y);\n        snd (extract_pair xa) = snd (extract_pair y); val_type a = t1;\n        val_type b = t2; xa = <|a, b|>; val_type aa = t1; val_type ba = t2;\n        y = <|aa, ba|>\\<rbrakk>\n       \\<Longrightarrow> xa = y", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (case x of (x, y) \\<Rightarrow> x = y) =\n  ((case (fst (extract_pair (fst x)), fst (extract_pair (snd x))) of\n    (x, y) \\<Rightarrow> x = y) \\<and>\n   (case (snd (extract_pair (fst x)), snd (extract_pair (snd x))) of\n    (x, y) \\<Rightarrow> x = y))\n\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n      stock_measure (PRODUCT t1 t2))\n     (\\<lambda>w.\n         (case (fst (extract_pair (fst w)), fst (extract_pair (snd w))) of\n          (x, y) \\<Rightarrow> x = y) \\<and>\n         (case (snd (extract_pair (fst w)), snd (extract_pair (snd w))) of\n          (x, y) \\<Rightarrow> x = y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n      stock_measure (PRODUCT t1 t2))\n     (\\<lambda>w.\n         (case (fst (extract_pair (fst w)), fst (extract_pair (snd w))) of\n          (x, y) \\<Rightarrow> x = y) \\<and>\n         (case (snd (extract_pair (fst w)), snd (extract_pair (snd w))) of\n          (x, y) \\<Rightarrow> x = y))", "note PRODUCT[measurable]"], ["proof (state)\nthis:\n  Measurable.pred (stock_measure t1 \\<Otimes>\\<^sub>M stock_measure t1)\n   (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n  Measurable.pred (stock_measure t2 \\<Otimes>\\<^sub>M stock_measure t2)\n   (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n      stock_measure (PRODUCT t1 t2))\n     (\\<lambda>w.\n         (case (fst (extract_pair (fst w)), fst (extract_pair (snd w))) of\n          (x, y) \\<Rightarrow> x = y) \\<and>\n         (case (snd (extract_pair (fst w)), snd (extract_pair (snd w))) of\n          (x, y) \\<Rightarrow> x = y))", "show \"Measurable.pred (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M stock_measure (PRODUCT t1 t2)) ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred\n     (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n      stock_measure (PRODUCT t1 t2))\n     (\\<lambda>x.\n         (case (fst (extract_pair (fst x)), fst (extract_pair (snd x))) of\n          (x, y) \\<Rightarrow> x = y) \\<and>\n         (case (snd (extract_pair (fst x)), snd (extract_pair (snd x))) of\n          (x, y) \\<Rightarrow> x = y))", "by measurable"], ["proof (state)\nthis:\n  Measurable.pred\n   (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n    stock_measure (PRODUCT t1 t2))\n   (\\<lambda>x.\n       (case (fst (extract_pair (fst x)), fst (extract_pair (snd x))) of\n        (x, y) \\<Rightarrow> x = y) \\<and>\n       (case (snd (extract_pair (fst x)), snd (extract_pair (snd x))) of\n        (x, y) \\<Rightarrow> x = y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Measurable.pred\n   (stock_measure (PRODUCT t1 t2) \\<Otimes>\\<^sub>M\n    stock_measure (PRODUCT t1 t2))\n   (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n\ngoal (3 subgoals):\n 1. Measurable.pred\n     (stock_measure UNIT \\<Otimes>\\<^sub>M stock_measure UNIT)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 2. Measurable.pred\n     (stock_measure BOOL \\<Otimes>\\<^sub>M stock_measure BOOL)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)\n 3. Measurable.pred\n     (stock_measure INTEG \\<Otimes>\\<^sub>M stock_measure INTEG)\n     (\\<lambda>a. case a of (x, y) \\<Rightarrow> x = y)", "qed (simp_all add: pair_measure_countable stock_measure.simps)"], ["", "lemma measurable_equals_stock_measure[measurable (raw)]:\n  assumes \"f \\<in> measurable M (stock_measure t)\" \"g \\<in> measurable M (stock_measure t)\"\n  shows \"Measurable.pred M (\\<lambda>x. f x = g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x = g x)", "using measurable_compose[OF measurable_Pair[OF assms] measurable_equals]"], ["proof (prove)\nusing this:\n  Measurable.pred M\n   (\\<lambda>x. case (f x, g x) of (x, y) \\<Rightarrow> x = y)\n\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x = g x)", "by simp"], ["", "lemma measurable_op_sem:\n  assumes \"op_type oper t = Some t'\"\n  shows \"op_sem oper \\<in> measurable (stock_measure t) (stock_measure t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'", "proof (cases oper)"], ["proof (state)\ngoal (18 subgoals):\n 1. oper = Fst \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Snd \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Equals \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Or \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 18 subgoals...", "case Fst"], ["proof (state)\nthis:\n  oper = Fst\n\ngoal (18 subgoals):\n 1. oper = Fst \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Snd \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Equals \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Or \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 18 subgoals...", "with assms"], ["proof (chain)\npicking this:\n  op_type oper t = Some t'\n  oper = Fst", "show ?thesis"], ["proof (prove)\nusing this:\n  op_type oper t = Some t'\n  oper = Fst\n\ngoal (1 subgoal):\n 1. op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'", "by (simp split: pdf_type.split_asm)"], ["proof (state)\nthis:\n  op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n\ngoal (17 subgoals):\n 1. oper = Snd \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = Equals \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = pdf_operator.Pow \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. oper = Snd \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = Equals \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = pdf_operator.Pow \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 17 subgoals...", "case Snd"], ["proof (state)\nthis:\n  oper = Snd\n\ngoal (17 subgoals):\n 1. oper = Snd \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = Equals \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = pdf_operator.Pow \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 17 subgoals...", "with assms"], ["proof (chain)\npicking this:\n  op_type oper t = Some t'\n  oper = Snd", "show ?thesis"], ["proof (prove)\nusing this:\n  op_type oper t = Some t'\n  oper = Snd\n\ngoal (1 subgoal):\n 1. op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'", "by (simp split: pdf_type.split_asm)"], ["proof (state)\nthis:\n  op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n\ngoal (16 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = Equals \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = pdf_operator.Pow \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Sqrt \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = Equals \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = pdf_operator.Pow \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Sqrt \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 16 subgoals...", "case Equals"], ["proof (state)\nthis:\n  oper = Equals\n\ngoal (16 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = Equals \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = pdf_operator.Pow \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Sqrt \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 16 subgoals...", "with assms"], ["proof (chain)\npicking this:\n  op_type oper t = Some t'\n  oper = Equals", "show ?thesis"], ["proof (prove)\nusing this:\n  op_type oper t = Some t'\n  oper = Equals\n\ngoal (1 subgoal):\n 1. op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'", "by (auto intro!: val_case_stock_measurable split: if_split_asm)"], ["proof (state)\nthis:\n  op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n\ngoal (15 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = pdf_operator.Pow \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Sqrt \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Exp \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = pdf_operator.Pow \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Sqrt \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Exp \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 15 subgoals...", "case Pow"], ["proof (state)\nthis:\n  oper = pdf_operator.Pow\n\ngoal (15 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = pdf_operator.Pow \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Sqrt \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Exp \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 15 subgoals...", "with assms"], ["proof (chain)\npicking this:\n  op_type oper t = Some t'\n  oper = pdf_operator.Pow", "show ?thesis"], ["proof (prove)\nusing this:\n  op_type oper t = Some t'\n  oper = pdf_operator.Pow\n\ngoal (1 subgoal):\n 1. op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'", "apply (auto intro!: val_case_stock_measurable split: pdf_type.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oper = pdf_operator.Pow; t = PRODUCT REAL INTEG;\n     t' = REAL\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>(y, z).\n                          case y of\n                          IntVal x \\<Rightarrow>\n                            case z of\n                            IntVal n \\<Rightarrow>\n                              if n < 0 then IntVal 0 else IntVal (x ^ nat n)\n                          | RealVal x \\<Rightarrow>\n                              case z of\n                              IntVal n \\<Rightarrow>\n                                if n < 0 then RealVal 0\n                                else RealVal (x ^ nat n))\n                      \\<in> stock_measure REAL \\<Otimes>\\<^sub>M\n                            stock_measure INTEG \\<rightarrow>\\<^sub>M\n                            stock_measure REAL", "apply (subst measurable_cong[where\n      g=\"\\<lambda>(x, n). if extract_int n < 0 then RealVal 0 else RealVal (extract_real x ^ nat (extract_int n))\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>w.\n       \\<lbrakk>oper = pdf_operator.Pow; t = PRODUCT REAL INTEG; t' = REAL;\n        w \\<in> space\n                 (stock_measure REAL \\<Otimes>\\<^sub>M\n                  stock_measure INTEG)\\<rbrakk>\n       \\<Longrightarrow> (case w of\n                          (IntVal x, IntVal n) \\<Rightarrow>\n                            if n < 0 then IntVal 0 else IntVal (x ^ nat n)\n                          | (RealVal x, IntVal n) \\<Rightarrow>\n                              if n < 0 then RealVal 0\n                              else RealVal (x ^ nat n)) =\n                         (case w of\n                          (x, n) \\<Rightarrow>\n                            if extract_int n < 0 then RealVal 0\n                            else RealVal\n                                  (extract_real x ^ nat (extract_int n)))\n 2. \\<lbrakk>oper = pdf_operator.Pow; t = PRODUCT REAL INTEG;\n     t' = REAL\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>(x, n).\n                          if extract_int n < 0 then RealVal 0\n                          else RealVal\n                                (extract_real x ^ nat (extract_int n)))\n                      \\<in> stock_measure REAL \\<Otimes>\\<^sub>M\n                            stock_measure INTEG \\<rightarrow>\\<^sub>M\n                            stock_measure REAL", "apply (auto simp: space_pair_measure elim!: REAL_E INTEG_E)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n\ngoal (14 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = Sqrt \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Exp \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = pdf_operator.Ln \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = Sqrt \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Exp \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = pdf_operator.Ln \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 14 subgoals...", "case Less"], ["proof (state)\nthis:\n  oper = Less\n\ngoal (14 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = Less \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = Sqrt \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = Exp \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = pdf_operator.Ln \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 14 subgoals...", "with assms"], ["proof (chain)\npicking this:\n  op_type oper t = Some t'\n  oper = Less", "show ?thesis"], ["proof (prove)\nusing this:\n  op_type oper t = Some t'\n  oper = Less\n\ngoal (1 subgoal):\n 1. op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'", "by (auto split: pdf_type.splits)"], ["proof (state)\nthis:\n  op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n\ngoal (13 subgoals):\n 1. oper = Add \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 2. oper = Mult \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 3. oper = Minus \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 4. oper = And \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 5. oper = pdf_operator.Not \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 6. oper = Or \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 7. oper = Sqrt \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 8. oper = Exp \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 9. oper = pdf_operator.Ln \\<Longrightarrow>\n    op_sem oper \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\n 10. oper = Fact \\<Longrightarrow>\n     op_sem oper\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M stock_measure t'\nA total of 13 subgoals...", "qed (insert assms, auto split: pdf_type.split_asm intro!: val_case_stock_measurable)"], ["", "definition shift_var_set :: \"vname set \\<Rightarrow> vname set\" where\n  \"shift_var_set V = insert 0 (Suc ` V)\""], ["", "lemma shift_var_set_0[simp]: \"0 \\<in> shift_var_set V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> shift_var_set V", "by (simp add: shift_var_set_def)"], ["", "lemma shift_var_set_Suc[simp]: \"Suc x \\<in> shift_var_set V \\<longleftrightarrow> x \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc x \\<in> shift_var_set V) = (x \\<in> V)", "by (auto simp add: shift_var_set_def)"], ["", "lemma case_nat_update_0[simp]: \"(case_nat x \\<sigma>)(0 := y) = case_nat y \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case_nat x \\<sigma>)(0 := y) = case_nat y \\<sigma>", "by (intro ext) (simp split: nat.split)"], ["", "lemma case_nat_delete_var_1[simp]:\n    \"case_nat x (case_nat y \\<sigma>) \\<circ> case_nat 0 (\\<lambda>x. Suc (Suc x)) = case_nat x \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat x (case_nat y \\<sigma>) \\<circ>\n    case_nat 0 (\\<lambda>x. Suc (Suc x)) =\n    case_nat x \\<sigma>", "by (intro ext) (simp split: nat.split)"], ["", "lemma delete_var_1_vimage[simp]:\n    \"case_nat 0 (\\<lambda>x. Suc (Suc x)) -` (shift_var_set (shift_var_set V)) = shift_var_set V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat 0 (\\<lambda>x. Suc (Suc x)) -`\n    shift_var_set (shift_var_set V) =\n    shift_var_set V", "by (auto simp: shift_var_set_def split: nat.split_asm)"], ["", "lemma measurable_case_nat[measurable]:\n  assumes \"g \\<in> measurable R N\" \"h \\<in> measurable R (Pi\\<^sub>M V M)\"\n  shows \"(\\<lambda>x. case_nat (g x) (h x)) \\<in> measurable R (Pi\\<^sub>M (shift_var_set V) (case_nat N M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. case_nat (g x) (h x))\n    \\<in> R \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "proof (rule measurable_Pair_compose_split[OF _ assms])"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(b, a) aa.\n        case aa of 0 \\<Rightarrow> b | Suc b \\<Rightarrow> a b)\n    \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "have \"(\\<lambda>(t,f). \\<lambda>x\\<in>shift_var_set V. case_nat t f x)\n          \\<in> measurable (N \\<Otimes>\\<^sub>M PiM V M) (PiM (shift_var_set V) (case_nat N M))\" (is ?P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(t, f).\n        \\<lambda>x\\<in>shift_var_set V.\n           case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> f x)\n    \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "unfolding shift_var_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(t, f).\n        \\<lambda>x\\<in>insert 0 (Suc ` V).\n           case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> f x)\n    \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (insert 0 (Suc ` V)) (case_nat N M)", "by (subst measurable_split_conv, rule measurable_restrict) (auto split: nat.split_asm)"], ["proof (state)\nthis:\n  (\\<lambda>(t, f).\n      \\<lambda>x\\<in>shift_var_set V.\n         case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> f x)\n  \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (shift_var_set V) (case_nat N M)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(b, a) aa.\n        case aa of 0 \\<Rightarrow> b | Suc b \\<Rightarrow> a b)\n    \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "also"], ["proof (state)\nthis:\n  (\\<lambda>(t, f).\n      \\<lambda>x\\<in>shift_var_set V.\n         case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> f x)\n  \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (shift_var_set V) (case_nat N M)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(b, a) aa.\n        case aa of 0 \\<Rightarrow> b | Suc b \\<Rightarrow> a b)\n    \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "have \"\\<And>x f. f \\<in> space (PiM V M) \\<Longrightarrow> x \\<notin> V \\<Longrightarrow> undefined = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> space (Pi\\<^sub>M V M); x \\<notin> V\\<rbrakk>\n       \\<Longrightarrow> undefined = f x", "by (rule sym, subst (asm) space_PiM, erule PiE_arb)"], ["proof (state)\nthis:\n  \\<lbrakk>?f \\<in> space (Pi\\<^sub>M V M); ?x \\<notin> V\\<rbrakk>\n  \\<Longrightarrow> undefined = ?f ?x\n\ngoal (1 subgoal):\n 1. (\\<lambda>(b, a) aa.\n        case aa of 0 \\<Rightarrow> b | Suc b \\<Rightarrow> a b)\n    \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "hence \"?P \\<longleftrightarrow> (\\<lambda>(t,f). case_nat t f)\n           \\<in> measurable (N \\<Otimes>\\<^sub>M PiM V M) (PiM (shift_var_set V) (case_nat N M))\" (is \"_ = ?P\")"], ["proof (prove)\nusing this:\n  \\<lbrakk>?f \\<in> space (Pi\\<^sub>M V M); ?x \\<notin> V\\<rbrakk>\n  \\<Longrightarrow> undefined = ?f ?x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>(t, f).\n         \\<lambda>x\\<in>shift_var_set V.\n            case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> f x)\n     \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (shift_var_set V) (case_nat N M)) =\n    ((\\<lambda>(t, f). case_nat t f)\n     \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (shift_var_set V) (case_nat N M))", "by (intro measurable_cong ext)\n       (auto split: nat.split simp: inj_image_mem_iff space_pair_measure shift_var_set_def)"], ["proof (state)\nthis:\n  ((\\<lambda>(t, f).\n       \\<lambda>x\\<in>shift_var_set V.\n          case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> f x)\n   \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n         Pi\\<^sub>M (shift_var_set V) (case_nat N M)) =\n  ((\\<lambda>(t, f). case_nat t f)\n   \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n         Pi\\<^sub>M (shift_var_set V) (case_nat N M))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(b, a) aa.\n        case aa of 0 \\<Rightarrow> b | Suc b \\<Rightarrow> a b)\n    \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>(t, f). case_nat t f)\n  \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "show ?P"], ["proof (prove)\nusing this:\n  (\\<lambda>(t, f). case_nat t f)\n  \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (shift_var_set V) (case_nat N M)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(t, f). case_nat t f)\n    \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V) (case_nat N M)", "."], ["proof (state)\nthis:\n  (\\<lambda>(t, f). case_nat t f)\n  \\<in> N \\<Otimes>\\<^sub>M Pi\\<^sub>M V M \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (shift_var_set V) (case_nat N M)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_case_nat'[measurable]:\n  assumes \"g \\<in> measurable R (stock_measure t)\" \"h \\<in> measurable R (state_measure V \\<Gamma>)\"\n  shows \"(\\<lambda>x. case_nat (g x) (h x)) \\<in>\n           measurable R (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. case_nat (g x) (h x))\n    \\<in> R \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set V) (case_nat t \\<Gamma>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. case_nat (g x) (h x))\n    \\<in> R \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set V) (case_nat t \\<Gamma>)", "have A: \"(\\<lambda>x. stock_measure (case_nat t \\<Gamma> x)) =\n                 case_nat (stock_measure t) (\\<lambda>x. stock_measure (\\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        stock_measure\n         (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)) =\n    case_nat (stock_measure t) (\\<lambda>x. stock_measure (\\<Gamma> x))", "by (intro ext) (simp split: nat.split)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      stock_measure\n       (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)) =\n  case_nat (stock_measure t) (\\<lambda>x. stock_measure (\\<Gamma> x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. case_nat (g x) (h x))\n    \\<in> R \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set V) (case_nat t \\<Gamma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. case_nat (g x) (h x))\n    \\<in> R \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set V) (case_nat t \\<Gamma>)", "using assms"], ["proof (prove)\nusing this:\n  g \\<in> R \\<rightarrow>\\<^sub>M stock_measure t\n  h \\<in> R \\<rightarrow>\\<^sub>M state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. case_nat (g x) (h x))\n    \\<in> R \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set V) (case_nat t \\<Gamma>)", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  g \\<in> R \\<rightarrow>\\<^sub>M stock_measure t\n  h \\<in> R \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. case_nat (g x) (h x))\n    \\<in> R \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set V)\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x))", "by (simp add: A)"], ["proof (state)\nthis:\n  (\\<lambda>x. case_nat (g x) (h x))\n  \\<in> R \\<rightarrow>\\<^sub>M\n        state_measure (shift_var_set V) (case_nat t \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma case_nat_in_state_measure[intro]:\n  assumes \"x \\<in> type_universe t1\" \"\\<sigma> \\<in> space (state_measure V \\<Gamma>)\"\n  shows \"case_nat x \\<sigma> \\<in> space (state_measure (shift_var_set V) (case_nat t1 \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat x \\<sigma>\n    \\<in> space (state_measure (shift_var_set V) (case_nat t1 \\<Gamma>))", "apply (rule measurable_space[OF measurable_case_nat'])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>a. a) \\<in> ?M \\<rightarrow>\\<^sub>M stock_measure t1\n 2. (\\<lambda>a. \\<sigma>)\n    \\<in> ?M \\<rightarrow>\\<^sub>M state_measure V \\<Gamma>\n 3. x \\<in> space ?M", "apply (rule measurable_ident_sets[OF refl], rule measurable_const[OF assms(2)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> space (stock_measure t1)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> type_universe t1\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. x \\<in> space (stock_measure t1)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_shift_var_set:\n    \"Suc -` A \\<subseteq> V \\<Longrightarrow> A \\<subseteq> shift_var_set V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc -` A \\<subseteq> V \\<Longrightarrow> A \\<subseteq> shift_var_set V", "by (rule subsetI, rename_tac x, case_tac x) (auto simp: shift_var_set_def)"], ["", "lemma measurable_expr_sem[measurable]:\n  assumes \"\\<Gamma> \\<turnstile> e : t\" and \"free_vars e \\<subseteq> V\"\n  shows \"(\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<in> measurable (state_measure V \\<Gamma>)\n                                         (subprob_algebra (stock_measure t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t)", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e : t\n  free_vars e \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t)", "proof (induction arbitrary: V rule: expr_typing.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x V.\n       free_vars (Var x) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (\\<Gamma> x))\n 2. \\<And>\\<Gamma> v V.\n       free_vars (Val v) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Val v))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (val_type v))\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 4. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 6. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 7. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 8. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "case (et_var \\<Gamma> x)"], ["proof (state)\nthis:\n  free_vars (Var x) \\<subseteq> V\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x V.\n       free_vars (Var x) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (\\<Gamma> x))\n 2. \\<And>\\<Gamma> v V.\n       free_vars (Val v) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Val v))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (val_type v))\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 4. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 6. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 7. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 8. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "have A: \"(\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x)) = return_val \\<circ> (\\<lambda>\\<sigma>. \\<sigma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x)) =\n    return_val \\<circ> (\\<lambda>\\<sigma>. \\<sigma> x)", "by (simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x)) =\n  return_val \\<circ> (\\<lambda>\\<sigma>. \\<sigma> x)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x V.\n       free_vars (Var x) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (\\<Gamma> x))\n 2. \\<And>\\<Gamma> v V.\n       free_vars (Val v) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Val v))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (val_type v))\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 4. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 6. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 7. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 8. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "with et_var"], ["proof (chain)\npicking this:\n  free_vars (Var x) \\<subseteq> V\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x)) =\n  return_val \\<circ> (\\<lambda>\\<sigma>. \\<sigma> x)", "show ?case"], ["proof (prove)\nusing this:\n  free_vars (Var x) \\<subseteq> V\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x)) =\n  return_val \\<circ> (\\<lambda>\\<sigma>. \\<sigma> x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure (\\<Gamma> x))", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  free_vars (Var x) \\<subseteq> V\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x)) =\n  return_val \\<circ> (\\<lambda>\\<sigma>. \\<sigma> x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x))\n    \\<in> Pi\\<^sub>M V\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure (\\<Gamma> x))", "by (subst A) (rule measurable_comp[OF measurable_component_singleton], simp_all)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Var x))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure (\\<Gamma> x))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> v V.\n       free_vars (Val v) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Val v))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (val_type v))\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 3. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 5. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 6. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 7. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> v V.\n       free_vars (Val v) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Val v))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (val_type v))\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 3. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 5. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 6. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 7. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "case (et_val \\<Gamma> v)"], ["proof (state)\nthis:\n  free_vars (Val v) \\<subseteq> V\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> v V.\n       free_vars (Val v) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Val v))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure (val_type v))\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 3. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 5. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 6. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 7. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "thus ?case"], ["proof (prove)\nusing this:\n  free_vars (Val v) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Val v))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure (val_type v))", "by (auto intro!: measurable_const subprob_space_return\n                      simp: space_subprob_algebra return_val_def)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Val v))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure (val_type v))\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 6. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 6. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "case (et_let \\<Gamma> e1 t1 e2 t2 V)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  free_vars e1 \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n  \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t1)\n  free_vars e2 \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n  \\<in> state_measure ?V\n         (\\<lambda>a.\n             case a of 0 \\<Rightarrow> t1\n             | Suc x \\<Rightarrow> \\<Gamma> x) \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 6. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "have A: \"(\\<lambda>v. stock_measure (case_nat t1 \\<Gamma> v)) =\n                 case_nat (stock_measure t1) (\\<lambda>v. stock_measure (\\<Gamma> v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v.\n        stock_measure\n         (case v of 0 \\<Rightarrow> t1 | Suc x \\<Rightarrow> \\<Gamma> x)) =\n    case_nat (stock_measure t1) (\\<lambda>v. stock_measure (\\<Gamma> v))", "by (rule ext) (simp split: nat.split)"], ["proof (state)\nthis:\n  (\\<lambda>v.\n      stock_measure\n       (case v of 0 \\<Rightarrow> t1 | Suc x \\<Rightarrow> \\<Gamma> x)) =\n  case_nat (stock_measure t1) (\\<lambda>v. stock_measure (\\<Gamma> v))\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V\n                  (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t2)\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 4. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 5. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 6. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "from et_let.prems and et_let.hyps"], ["proof (chain)\npicking this:\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2", "show ?case"], ["proof (prove)\nusing this:\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (LET e1 IN e2))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t2)", "apply (subst expr_sem.simps, intro measurable_bind)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>free_vars (LET e1 IN e2) \\<subseteq> V;\n     \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n     free_vars (LET e1 IN e2) \\<subseteq> V; \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. expr_sem x e1)\n                      \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                            subprob_algebra ?N6\n 2. \\<lbrakk>free_vars (LET e1 IN e2) \\<subseteq> V;\n     \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n     free_vars (LET e1 IN e2) \\<subseteq> V; \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          expr_sem (case_nat (snd \\<sigma>) (fst \\<sigma>))\n                           e2)\n                      \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n                            ?N6 \\<rightarrow>\\<^sub>M\n                            subprob_algebra (stock_measure t2)", "apply (rule et_let.IH(1), simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>free_vars (LET e1 IN e2) \\<subseteq> V;\n     \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n     free_vars (LET e1 IN e2) \\<subseteq> V; \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          expr_sem (case_nat (snd \\<sigma>) (fst \\<sigma>))\n                           e2)\n                      \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n                            stock_measure t1 \\<rightarrow>\\<^sub>M\n                            subprob_algebra (stock_measure t2)", "apply (rule measurable_compose[OF _ et_let.IH(2)[of \"shift_var_set V\"]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>free_vars (LET e1 IN e2) \\<subseteq> V;\n     \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n     free_vars (LET e1 IN e2) \\<subseteq> V; \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x a.\n                          case a of 0 \\<Rightarrow> snd x\n                          | Suc xa \\<Rightarrow> fst x xa)\n                      \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n                            stock_measure t1 \\<rightarrow>\\<^sub>M\n                            state_measure (shift_var_set V)\n                             (\\<lambda>a.\n                                 case a of 0 \\<Rightarrow> t1\n                                 | Suc x \\<Rightarrow> \\<Gamma> x)\n 2. \\<lbrakk>free_vars (LET e1 IN e2) \\<subseteq> V;\n     \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n     free_vars (LET e1 IN e2) \\<subseteq> V; \\<Gamma> \\<turnstile> e1 : t1;\n     case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\\<rbrakk>\n    \\<Longrightarrow> free_vars e2 \\<subseteq> shift_var_set V", "apply (simp_all add: subset_shift_var_set)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (LET e1 IN e2))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 5. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 5. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "case (et_op \\<Gamma> e t oper t')"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n  free_vars e \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n  free_vars (oper $$ e) \\<subseteq> V\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        op_type oper t = Some t';\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t')\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 3. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 4. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 5. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n  free_vars e \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n  free_vars (oper $$ e) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t')", "by (auto intro!: measurable_bind2 measurable_compose[OF _ measurable_return_val]\n                              measurable_op_sem cong: measurable_cong)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t')\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 4. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 4. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "case (et_pair t t1 t2 \\<Gamma> e1 e2)"], ["proof (state)\nthis:\n  t \\<turnstile> t1 : t2\n  t \\<turnstile> \\<Gamma> : e1\n  free_vars t1 \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> t1)\n  \\<in> state_measure ?V t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t2)\n  free_vars \\<Gamma> \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> \\<Gamma>)\n  \\<in> state_measure ?V t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure e1)\n  free_vars <t1 ,  \\<Gamma>> \\<subseteq> e2\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 4. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "have \"inj (\\<lambda>(a,b). <|a, b|>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>(a, b). <|a, b|>)", "by (auto intro: injI)"], ["proof (state)\nthis:\n  inj (\\<lambda>(a, b). <|a, b|>)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t1);\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t2);\n        free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (PRODUCT t1 t2))\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 4. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "with et_pair"], ["proof (chain)\npicking this:\n  t \\<turnstile> t1 : t2\n  t \\<turnstile> \\<Gamma> : e1\n  free_vars t1 \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> t1)\n  \\<in> state_measure ?V t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t2)\n  free_vars \\<Gamma> \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> \\<Gamma>)\n  \\<in> state_measure ?V t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure e1)\n  free_vars <t1 ,  \\<Gamma>> \\<subseteq> e2\n  inj (\\<lambda>(a, b). <|a, b|>)", "show ?case"], ["proof (prove)\nusing this:\n  t \\<turnstile> t1 : t2\n  t \\<turnstile> \\<Gamma> : e1\n  free_vars t1 \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> t1)\n  \\<in> state_measure ?V t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t2)\n  free_vars \\<Gamma> \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> \\<Gamma>)\n  \\<in> state_measure ?V t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure e1)\n  free_vars <t1 ,  \\<Gamma>> \\<subseteq> e2\n  inj (\\<lambda>(a, b). <|a, b|>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> <t1 ,  \\<Gamma>>)\n    \\<in> state_measure e2 t \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure (PRODUCT t2 e1))", "apply (subst expr_sem.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> t1 : t2; t \\<turnstile> \\<Gamma> : e1;\n     \\<And>V.\n        free_vars t1 \\<subseteq> V \\<Longrightarrow>\n        (\\<lambda>\\<sigma>. expr_sem \\<sigma> t1)\n        \\<in> state_measure V t \\<rightarrow>\\<^sub>M\n              subprob_algebra (stock_measure t2);\n     \\<And>V.\n        free_vars \\<Gamma> \\<subseteq> V \\<Longrightarrow>\n        (\\<lambda>\\<sigma>. expr_sem \\<sigma> \\<Gamma>)\n        \\<in> state_measure V t \\<rightarrow>\\<^sub>M\n              subprob_algebra (stock_measure e1);\n     free_vars <t1 ,  \\<Gamma>> \\<subseteq> e2;\n     inj (\\<lambda>(a, b). <|a, b|>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          expr_sem \\<sigma> t1 \\<bind>\n                          (\\<lambda>x.\n                              expr_sem \\<sigma> \\<Gamma> \\<bind>\n                              (\\<lambda>y. return_val <|x, y|>)))\n                      \\<in> state_measure e2 t \\<rightarrow>\\<^sub>M\n                            subprob_algebra (stock_measure (PRODUCT t2 e1))", "apply (rule measurable_bind, (auto) [])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> t1 : t2; t \\<turnstile> \\<Gamma> : e1;\n     \\<And>V.\n        free_vars t1 \\<subseteq> V \\<Longrightarrow>\n        (\\<lambda>\\<sigma>. expr_sem \\<sigma> t1)\n        \\<in> state_measure V t \\<rightarrow>\\<^sub>M\n              subprob_algebra (stock_measure t2);\n     \\<And>V.\n        free_vars \\<Gamma> \\<subseteq> V \\<Longrightarrow>\n        (\\<lambda>\\<sigma>. expr_sem \\<sigma> \\<Gamma>)\n        \\<in> state_measure V t \\<rightarrow>\\<^sub>M\n              subprob_algebra (stock_measure e1);\n     free_vars <t1 ,  \\<Gamma>> \\<subseteq> e2;\n     inj (\\<lambda>(a, b). <|a, b|>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          expr_sem (fst \\<sigma>) \\<Gamma> \\<bind>\n                          (\\<lambda>y. return_val <|snd \\<sigma>, y|>))\n                      \\<in> state_measure e2 t \\<Otimes>\\<^sub>M\n                            stock_measure t2 \\<rightarrow>\\<^sub>M\n                            subprob_algebra (stock_measure (PRODUCT t2 e1))", "apply (rule measurable_bind[OF measurable_compose[OF measurable_fst]], (auto) [])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> t1 : t2; t \\<turnstile> \\<Gamma> : e1;\n     \\<And>V.\n        free_vars t1 \\<subseteq> V \\<Longrightarrow>\n        (\\<lambda>\\<sigma>. expr_sem \\<sigma> t1)\n        \\<in> state_measure V t \\<rightarrow>\\<^sub>M\n              subprob_algebra (stock_measure t2);\n     \\<And>V.\n        free_vars \\<Gamma> \\<subseteq> V \\<Longrightarrow>\n        (\\<lambda>\\<sigma>. expr_sem \\<sigma> \\<Gamma>)\n        \\<in> state_measure V t \\<rightarrow>\\<^sub>M\n              subprob_algebra (stock_measure e1);\n     free_vars <t1 ,  \\<Gamma>> \\<subseteq> e2;\n     inj (\\<lambda>(a, b). <|a, b|>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          return_val <|snd (fst \\<sigma>), snd \\<sigma>|>)\n                      \\<in> (state_measure e2 t \\<Otimes>\\<^sub>M\n                             stock_measure t2) \\<Otimes>\\<^sub>M\n                            stock_measure e1 \\<rightarrow>\\<^sub>M\n                            subprob_algebra (stock_measure (PRODUCT t2 e1))", "apply (rule measurable_compose[OF _ measurable_return_val], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> <t1 ,  \\<Gamma>>)\n  \\<in> state_measure e2 t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure (PRODUCT t2 e1))\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 2. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 3. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 2. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 3. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "case (et_rand \\<Gamma> e dst V)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e : dist_param_type dst\n  free_vars e \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure (dist_param_type dst))\n  free_vars (Random dst e) \\<subseteq> V\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           free_vars e \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure (dist_param_type dst));\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (stock_measure (dist_result_type dst))\n 2. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 3. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "from et_rand.prems and et_rand.hyps"], ["proof (chain)\npicking this:\n  free_vars (Random dst e) \\<subseteq> V\n  \\<Gamma> \\<turnstile> e : dist_param_type dst", "show ?case"], ["proof (prove)\nusing this:\n  free_vars (Random dst e) \\<subseteq> V\n  \\<Gamma> \\<turnstile> e : dist_param_type dst\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Random dst e))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure (dist_result_type dst))", "by (auto intro!: et_rand.IH measurable_compose[OF measurable_snd]\n                     measurable_bind measurable_dist_measure)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Random dst e))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure (dist_result_type dst))\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 2. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 2. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "case (et_if \\<Gamma> b e1 t e2 V)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> b : BOOL\n  \\<Gamma> \\<turnstile> e1 : t\n  \\<Gamma> \\<turnstile> e2 : t\n  free_vars b \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n  \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure BOOL)\n  free_vars e1 \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n  \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n  free_vars e2 \\<subseteq> ?V \\<Longrightarrow>\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n  \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 2. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "let ?M = \"\\<lambda>e t. (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<in>\n                      measurable (state_measure V \\<Gamma>) (subprob_algebra (stock_measure t))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 2. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "from et_if.prems"], ["proof (chain)\npicking this:\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V", "have A[measurable]: \"?M b BOOL\" \"?M e1 t\" \"?M e2 t\""], ["proof (prove)\nusing this:\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure BOOL) &&&\n    (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t) &&&\n    (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t)", "by (intro et_if.IH, simp)+"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure BOOL)\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           free_vars b \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> b)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure BOOL);\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           free_vars e1 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e1)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           free_vars e2 \\<subseteq> V \\<Longrightarrow>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e2)\n           \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                 subprob_algebra (stock_measure t);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               subprob_algebra (stock_measure t)\n 2. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t)", "by (subst expr_sem.simps, rule measurable_bind[OF A(1)]) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (IF b THEN e1 ELSE e2))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "case (et_fail \\<Gamma> t V)"], ["proof (state)\nthis:\n  free_vars (Fail t) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> t V.\n       free_vars (Fail t) \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n       \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n             subprob_algebra (stock_measure t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t)", "by (auto intro!: measurable_subprob_algebra subprob_spaceI simp:)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> (Fail t))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Randomfree expressions\\<close>"], ["", "fun randomfree :: \"expr \\<Rightarrow> bool\" where\n  \"randomfree (Val _) = True\"\n| \"randomfree (Var _) = True\"\n| \"randomfree (Pair e1 e2) = (randomfree e1 \\<and> randomfree e2)\"\n| \"randomfree (Operator _ e) = randomfree e\"\n| \"randomfree (LetVar e1 e2) = (randomfree e1 \\<and> randomfree e2)\"\n| \"randomfree (IfThenElse b e1 e2) = (randomfree b \\<and> randomfree e1 \\<and> randomfree e2)\"\n| \"randomfree (Random _ _) = False\"\n| \"randomfree (Fail _) = False\""], ["", "primrec expr_sem_rf :: \"state \\<Rightarrow> expr \\<Rightarrow> val\" where\n  \"expr_sem_rf _ (Val v) = v\"\n| \"expr_sem_rf \\<sigma> (Var x) = \\<sigma> x\"\n| \"expr_sem_rf \\<sigma> (<e1, e2>) = <|expr_sem_rf \\<sigma> e1, expr_sem_rf \\<sigma> e2|>\"\n| \"expr_sem_rf \\<sigma> (Operator oper e) = op_sem oper (expr_sem_rf \\<sigma> e)\"\n| \"expr_sem_rf \\<sigma> (LetVar e1 e2) = expr_sem_rf (expr_sem_rf \\<sigma> e1 \\<cdot> \\<sigma>) e2\"\n| \"expr_sem_rf \\<sigma> (IfThenElse b e1 e2) =\n      (if expr_sem_rf \\<sigma> b = BoolVal True then expr_sem_rf \\<sigma> e1 else expr_sem_rf \\<sigma> e2)\"\n| \"expr_sem_rf _ (Random _ _) = undefined\"\n| \"expr_sem_rf _ (Fail _) = undefined\""], ["", "lemma measurable_expr_sem_rf[measurable]:\n  \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> randomfree e \\<Longrightarrow> free_vars e \\<subseteq> V \\<Longrightarrow>\n       (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e) \\<in> measurable (state_measure V \\<Gamma>) (stock_measure t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> e : t; randomfree e;\n     free_vars e \\<subseteq> V\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                      \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n                            stock_measure t", "proof (induction arbitrary: V rule: expr_typing.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x V.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Var x))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (\\<Gamma> x)\n 2. \\<And>\\<Gamma> v V.\n       \\<lbrakk>randomfree (Val v); free_vars (Val v) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Val v))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (val_type v)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 4. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 6. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 7. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 8. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "case (et_val \\<Gamma> v V)"], ["proof (state)\nthis:\n  randomfree (Val v)\n  free_vars (Val v) \\<subseteq> V\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x V.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Var x))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (\\<Gamma> x)\n 2. \\<And>\\<Gamma> v V.\n       \\<lbrakk>randomfree (Val v); free_vars (Val v) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Val v))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (val_type v)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 4. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 6. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 7. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 8. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "thus ?case"], ["proof (prove)\nusing this:\n  randomfree (Val v)\n  free_vars (Val v) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Val v))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure (val_type v)", "by (auto intro!: measurable_const simp:)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Val v))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (val_type v)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x V.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Var x))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (\\<Gamma> x)\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 3. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 5. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 6. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 7. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x V.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Var x))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (\\<Gamma> x)\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 3. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 5. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 6. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 7. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "case (et_var \\<Gamma> x V)"], ["proof (state)\nthis:\n  randomfree (Var x)\n  free_vars (Var x) \\<subseteq> V\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x V.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Var x))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (\\<Gamma> x)\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 3. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 5. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 6. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 7. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "thus ?case"], ["proof (prove)\nusing this:\n  randomfree (Var x)\n  free_vars (Var x) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Var x))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure (\\<Gamma> x)", "by (auto simp: state_measure_def intro!: measurable_component_singleton)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Var x))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (\\<Gamma> x)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 4. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 5. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 6. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 4. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 5. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 6. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "case (et_pair \\<Gamma> e1 t1 e2 t2 V)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t2\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 4. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 5. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 6. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "have \"inj (\\<lambda>(x,y). <|x, y|>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>(x, y). <|x, y|>)", "by (auto intro: injI)"], ["proof (state)\nthis:\n  inj (\\<lambda>(x, y). <|x, y|>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> <e1 ,  e2>)\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (PRODUCT t1 t2)\n 4. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 5. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 6. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "with et_pair"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t2\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  inj (\\<lambda>(x, y). <|x, y|>)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t2\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  inj (\\<lambda>(x, y). <|x, y|>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> <e1 ,  e2>)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure (PRODUCT t1 t2)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> <e1 ,  e2>)\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (PRODUCT t1 t2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 3. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 4. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 5. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 3. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 4. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 5. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "case (et_op \\<Gamma> e t oper t' V)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n  \\<lbrakk>randomfree e; free_vars e \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e t oper t' V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (oper $$ e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t'\n 3. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 4. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 5. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n  \\<lbrakk>randomfree e; free_vars e \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (oper $$ e))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t'", "by (auto intro!: measurable_compose[OF _ measurable_op_sem])"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (oper $$ e))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t'\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 4. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 4. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "case (et_let \\<Gamma> e1 t1 e2 t2 V)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                    \\<in> state_measure ?V\n                           (\\<lambda>a.\n                               case a of 0 \\<Rightarrow> t1\n                               | Suc x \\<Rightarrow>\n                                   \\<Gamma> x) \\<rightarrow>\\<^sub>M\n                          stock_measure t2\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 4. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "hence M1: \"(\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1) \\<in> measurable (state_measure V \\<Gamma>) (stock_measure t1)\"\n    and M2: \"(\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2) \\<in> measurable (state_measure (shift_var_set V) (case_nat t1 \\<Gamma>))\n                                           (stock_measure t2)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                    \\<in> state_measure ?V\n                           (\\<lambda>a.\n                               case a of 0 \\<Rightarrow> t1\n                               | Suc x \\<Rightarrow>\n                                   \\<Gamma> x) \\<rightarrow>\\<^sub>M\n                          stock_measure t2\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure t1 &&&\n    (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n          stock_measure t2", "using subset_shift_var_set"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                    \\<in> state_measure ?V \\<Gamma> \\<rightarrow>\\<^sub>M\n                          stock_measure t1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                    \\<in> state_measure ?V\n                           (\\<lambda>a.\n                               case a of 0 \\<Rightarrow> t1\n                               | Suc x \\<Rightarrow>\n                                   \\<Gamma> x) \\<rightarrow>\\<^sub>M\n                          stock_measure t2\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  Suc -` ?A \\<subseteq> ?V \\<Longrightarrow> ?A \\<subseteq> shift_var_set ?V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure t1 &&&\n    (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n          stock_measure t2", "by (auto intro!: et_let.IH(1)[of V] et_let.IH(2)[of \"shift_var_set V\"])"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t1\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n        stock_measure t2\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 4. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "have \"(\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (LetVar e1 e2)) =\n            (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2) \\<circ> (\\<lambda>(\\<sigma>,y). case_nat y \\<sigma>) \\<circ> (\\<lambda>\\<sigma>. (\\<sigma>, expr_sem_rf \\<sigma> e1))\" (is \"_ = ?f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n    (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2) \\<circ>\n    (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>) \\<circ>\n    (\\<lambda>\\<sigma>. (\\<sigma>, expr_sem_rf \\<sigma> e1))", "by (intro ext) simp"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2) \\<circ>\n  (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>) \\<circ>\n  (\\<lambda>\\<sigma>. (\\<sigma>, expr_sem_rf \\<sigma> e1))\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 4. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "also"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2) \\<circ>\n  (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>) \\<circ>\n  (\\<lambda>\\<sigma>. (\\<sigma>, expr_sem_rf \\<sigma> e1))\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 4. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "have \"?f \\<in> measurable (state_measure V \\<Gamma>) (stock_measure t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2) \\<circ>\n    (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>) \\<circ>\n    (\\<lambda>\\<sigma>. (\\<sigma>, expr_sem_rf \\<sigma> e1))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t2", "apply (intro measurable_comp, rule measurable_Pair, rule measurable_ident_sets[OF refl])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>x. expr_sem_rf x e1)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M ?M2.2\n 2. (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>)\n    \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n          ?M2.2 \\<rightarrow>\\<^sub>M\n          ?N1\n 3. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n    \\<in> ?N1 \\<rightarrow>\\<^sub>M stock_measure t2", "apply (rule M1, subst measurable_split_conv, rule measurable_case_nat')"], ["proof (prove)\ngoal (3 subgoals):\n 1. snd\n    \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t1 \\<rightarrow>\\<^sub>M\n          stock_measure ?t10\n 2. fst\n    \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t1 \\<rightarrow>\\<^sub>M\n          state_measure ?V10 ?\\<Gamma>10\n 3. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n    \\<in> state_measure (shift_var_set ?V10)\n           (case_nat ?t10 ?\\<Gamma>10) \\<rightarrow>\\<^sub>M\n          stock_measure t2", "apply (rule measurable_snd, rule measurable_fst, rule M2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2) \\<circ>\n  (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>) \\<circ>\n  (\\<lambda>\\<sigma>. (\\<sigma>, expr_sem_rf \\<sigma> e1))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t2\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    (case_nat t1\n\\<Gamma>) \\<rightarrow>\\<^sub>M\n                                   stock_measure t2;\n        randomfree (LET e1 IN e2);\n        free_vars (LET e1 IN e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (LET e1 IN e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t2\n 2. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 3. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 4. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (LET e1 IN e2))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t2", "show ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (LET e1 IN e2))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t2\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (LET e1 IN e2))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t2", "."], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (LET e1 IN e2))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M stock_measure t2\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e dst V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure (dist_param_type dst);\n        randomfree (Random dst e);\n        free_vars (Random dst e) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (Random dst e))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (dist_result_type dst)\n 2. \\<And>\\<Gamma> b e1 t e2 V.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> b)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure BOOL;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e1)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V\\<rbrakk>\n           \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n                             \\<in> state_measure V\n                                    \\<Gamma> \\<rightarrow>\\<^sub>M\n                                   stock_measure t;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                             expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 3. \\<And>\\<Gamma> t V.\n       \\<lbrakk>randomfree (Fail t);\n        free_vars (Fail t) \\<subseteq> V\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> (Fail t))\n                         \\<in> state_measure V\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure t", "qed (simp_all add: expr_sem_rf_def)"], ["", "lemma expr_sem_rf_sound:\n  \"\\<Gamma> \\<turnstile> e : t \\<Longrightarrow> randomfree e \\<Longrightarrow> free_vars e \\<subseteq> V \\<Longrightarrow> \\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> e : t; randomfree e;\n     free_vars e \\<subseteq> V;\n     \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                      expr_sem \\<sigma> e", "proof (induction arbitrary: V \\<sigma> rule: expr_typing.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x V \\<sigma>.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Var x)) =\n                         expr_sem \\<sigma> (Var x)\n 2. \\<And>\\<Gamma> v V \\<sigma>.\n       \\<lbrakk>randomfree (Val v); free_vars (Val v) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Val v)) =\n                         expr_sem \\<sigma> (Val v)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 4. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 6. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 7. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 8. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "case (et_val \\<Gamma> v)"], ["proof (state)\nthis:\n  randomfree (Val v)\n  free_vars (Val v) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x V \\<sigma>.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Var x)) =\n                         expr_sem \\<sigma> (Var x)\n 2. \\<And>\\<Gamma> v V \\<sigma>.\n       \\<lbrakk>randomfree (Val v); free_vars (Val v) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Val v)) =\n                         expr_sem \\<sigma> (Val v)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 4. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 5. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 6. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 7. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 8. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "thus ?case"], ["proof (prove)\nusing this:\n  randomfree (Val v)\n  free_vars (Val v) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> (Val v)) = expr_sem \\<sigma> (Val v)", "by simp"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> (Val v)) = expr_sem \\<sigma> (Val v)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x V \\<sigma>.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Var x)) =\n                         expr_sem \\<sigma> (Var x)\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 3. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 5. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 6. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 7. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x V \\<sigma>.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Var x)) =\n                         expr_sem \\<sigma> (Var x)\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 3. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 5. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 6. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 7. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "case (et_var \\<Gamma> x)"], ["proof (state)\nthis:\n  randomfree (Var x)\n  free_vars (Var x) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x V \\<sigma>.\n       \\<lbrakk>randomfree (Var x); free_vars (Var x) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Var x)) =\n                         expr_sem \\<sigma> (Var x)\n 2. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 3. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 4. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 5. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 6. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 7. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "thus ?case"], ["proof (prove)\nusing this:\n  randomfree (Var x)\n  free_vars (Var x) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> (Var x)) = expr_sem \\<sigma> (Var x)", "by simp"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> (Var x)) = expr_sem \\<sigma> (Var x)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "case (et_pair \\<Gamma> e1 t1 e2 t2 V \\<sigma>)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e1) =\n                    expr_sem ?\\<sigma> e1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e2) =\n                    expr_sem ?\\<sigma> e2\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "let ?M = \"state_measure V \\<Gamma>\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_pair.hyps and et_pair.prems"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have e1: \"return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1\" and\n         e2: \"return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  \\<Gamma> \\<turnstile> e2 : t2\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1 &&&\n    return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2", "by (auto intro!: et_pair.IH[of V])"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1\n  return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from e1 and et_pair.prems"], ["proof (chain)\npicking this:\n  return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have \"space (return_val (expr_sem_rf \\<sigma> e1)) = type_universe t1\""], ["proof (prove)\nusing this:\n  return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. space (return_val (expr_sem_rf \\<sigma> e1)) = type_universe t1", "by (subst e1, subst space_expr_sem[OF et_pair.hyps(1)])\n       (auto dest: state_measure_var_type)"], ["proof (state)\nthis:\n  space (return_val (expr_sem_rf \\<sigma> e1)) = type_universe t1\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "hence A: \"val_type (expr_sem_rf \\<sigma> e1) = t1\" \"expr_sem_rf \\<sigma> e1 \\<in> type_universe t1\""], ["proof (prove)\nusing this:\n  space (return_val (expr_sem_rf \\<sigma> e1)) = type_universe t1\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e1) = t1 &&&\n    expr_sem_rf \\<sigma> e1 \\<in> type_universe t1", "by (auto simp add: return_val_def)"], ["proof (state)\nthis:\n  val_type (expr_sem_rf \\<sigma> e1) = t1\n  expr_sem_rf \\<sigma> e1 \\<in> type_universe t1\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from e2 and et_pair.prems"], ["proof (chain)\npicking this:\n  return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have \"space (return_val (expr_sem_rf \\<sigma> e2)) = type_universe t2\""], ["proof (prove)\nusing this:\n  return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2\n  randomfree <e1 ,  e2>\n  free_vars <e1 ,  e2> \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. space (return_val (expr_sem_rf \\<sigma> e2)) = type_universe t2", "by (subst e2, subst space_expr_sem[OF et_pair.hyps(2)])\n       (auto dest: state_measure_var_type)"], ["proof (state)\nthis:\n  space (return_val (expr_sem_rf \\<sigma> e2)) = type_universe t2\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "hence B: \"val_type (expr_sem_rf \\<sigma> e2) = t2\" \"expr_sem_rf \\<sigma> e2 \\<in> type_universe t2\""], ["proof (prove)\nusing this:\n  space (return_val (expr_sem_rf \\<sigma> e2)) = type_universe t2\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e2) = t2 &&&\n    expr_sem_rf \\<sigma> e2 \\<in> type_universe t2", "by (auto simp add: return_val_def)"], ["proof (state)\nthis:\n  val_type (expr_sem_rf \\<sigma> e2) = t2\n  expr_sem_rf \\<sigma> e2 \\<in> type_universe t2\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "have \"expr_sem \\<sigma> (<e1, e2>) = expr_sem \\<sigma> e1 \\<bind>\n            (\\<lambda>v. expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val (<|v,w|>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> <e1 ,  e2> =\n    expr_sem \\<sigma> e1 \\<bind>\n    (\\<lambda>v.\n        expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>))", "by simp"], ["proof (state)\nthis:\n  expr_sem \\<sigma> <e1 ,  e2> =\n  expr_sem \\<sigma> e1 \\<bind>\n  (\\<lambda>v.\n      expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>))\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "also"], ["proof (state)\nthis:\n  expr_sem \\<sigma> <e1 ,  e2> =\n  expr_sem \\<sigma> e1 \\<bind>\n  (\\<lambda>v.\n      expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>))\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "have \"expr_sem \\<sigma> e1 = return (stock_measure t1) (expr_sem_rf \\<sigma> e1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> e1 =\n    return (stock_measure t1) (expr_sem_rf \\<sigma> e1)", "using e1"], ["proof (prove)\nusing this:\n  return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> e1 =\n    return (stock_measure t1) (expr_sem_rf \\<sigma> e1)", "by (simp add: et_pair.prems return_val_def A)"], ["proof (state)\nthis:\n  expr_sem \\<sigma> e1 = return (stock_measure t1) (expr_sem_rf \\<sigma> e1)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "also"], ["proof (state)\nthis:\n  expr_sem \\<sigma> e1 = return (stock_measure t1) (expr_sem_rf \\<sigma> e1)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "have \"... \\<bind> (\\<lambda>v. expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val (<|v,w|>))) =\n          ... \\<bind> (\\<lambda>v. return_val (<|v, expr_sem_rf \\<sigma> e2|>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind>\n    (\\<lambda>v.\n        expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>)) =\n    return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind>\n    (\\<lambda>v. return_val <|v, expr_sem_rf \\<sigma> e2|>)", "proof (intro bind_cong refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "assume \"v \\<in> space (return (stock_measure t1) (expr_sem_rf \\<sigma> e1))\""], ["proof (state)\nthis:\n  v \\<in> space (return (stock_measure t1) (expr_sem_rf \\<sigma> e1))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "hence v: \"val_type v = t1\" \"v \\<in> type_universe t1\""], ["proof (prove)\nusing this:\n  v \\<in> space (return (stock_measure t1) (expr_sem_rf \\<sigma> e1))\n\ngoal (1 subgoal):\n 1. val_type v = t1 &&& v \\<in> type_universe t1", "by (simp_all add:)"], ["proof (state)\nthis:\n  val_type v = t1\n  v \\<in> type_universe t1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "have \"expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val (<|v,w|>)) =\n              return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind> (\\<lambda>w. return_val (<|v,w|>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>) =\n    return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n    (\\<lambda>w. return_val <|v, w|>)", "using e2"], ["proof (prove)\nusing this:\n  return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>) =\n    return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n    (\\<lambda>w. return_val <|v, w|>)", "by (simp add: et_pair.prems return_val_def B)"], ["proof (state)\nthis:\n  expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>) =\n  return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n  (\\<lambda>w. return_val <|v, w|>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "also"], ["proof (state)\nthis:\n  expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>) =\n  return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n  (\\<lambda>w. return_val <|v, w|>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "have \"... = return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n                         (\\<lambda>w. return (stock_measure (PRODUCT t1 t2)) (<|v,w|>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n    (\\<lambda>w. return_val <|v, w|>) =\n    return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n    (\\<lambda>w. return (stock_measure (PRODUCT t1 t2)) <|v, w|>)", "proof (intro bind_cong refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t2)\n                  (expr_sem_rf \\<sigma> e2)) \\<Longrightarrow>\n       return_val <|v, x|> = return (stock_measure (PRODUCT t1 t2)) <|v, x|>", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t2)\n                  (expr_sem_rf \\<sigma> e2)) \\<Longrightarrow>\n       return_val <|v, x|> = return (stock_measure (PRODUCT t1 t2)) <|v, x|>", "assume \"w \\<in> space (return (stock_measure t2) (expr_sem_rf \\<sigma> e2))\""], ["proof (state)\nthis:\n  w \\<in> space (return (stock_measure t2) (expr_sem_rf \\<sigma> e2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t2)\n                  (expr_sem_rf \\<sigma> e2)) \\<Longrightarrow>\n       return_val <|v, x|> = return (stock_measure (PRODUCT t1 t2)) <|v, x|>", "hence w: \"val_type w = t2\""], ["proof (prove)\nusing this:\n  w \\<in> space (return (stock_measure t2) (expr_sem_rf \\<sigma> e2))\n\ngoal (1 subgoal):\n 1. val_type w = t2", "by (simp add:)"], ["proof (state)\nthis:\n  val_type w = t2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t2)\n                  (expr_sem_rf \\<sigma> e2)) \\<Longrightarrow>\n       return_val <|v, x|> = return (stock_measure (PRODUCT t1 t2)) <|v, x|>", "thus \"return_val (<|v,w|>) = return (stock_measure (PRODUCT t1 t2)) (<|v,w|>)\""], ["proof (prove)\nusing this:\n  val_type w = t2\n\ngoal (1 subgoal):\n 1. return_val <|v, w|> = return (stock_measure (PRODUCT t1 t2)) <|v, w|>", "by (auto simp: return_val_def v w)"], ["proof (state)\nthis:\n  return_val <|v, w|> = return (stock_measure (PRODUCT t1 t2)) <|v, w|>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n  (\\<lambda>w. return_val <|v, w|>) =\n  return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n  (\\<lambda>w. return (stock_measure (PRODUCT t1 t2)) <|v, w|>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "also"], ["proof (state)\nthis:\n  return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n  (\\<lambda>w. return_val <|v, w|>) =\n  return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n  (\\<lambda>w. return (stock_measure (PRODUCT t1 t2)) <|v, w|>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "have \"... = return_val (<|v, expr_sem_rf \\<sigma> e2|>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n    (\\<lambda>w. return (stock_measure (PRODUCT t1 t2)) <|v, w|>) =\n    return_val <|v, expr_sem_rf \\<sigma> e2|>", "using v B"], ["proof (prove)\nusing this:\n  val_type v = t1\n  v \\<in> type_universe t1\n  val_type (expr_sem_rf \\<sigma> e2) = t2\n  expr_sem_rf \\<sigma> e2 \\<in> type_universe t2\n\ngoal (1 subgoal):\n 1. return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n    (\\<lambda>w. return (stock_measure (PRODUCT t1 t2)) <|v, w|>) =\n    return_val <|v, expr_sem_rf \\<sigma> e2|>", "by (subst bind_return[where N=\"PRODUCT t1 t2\"]) (auto simp: return_val_def)"], ["proof (state)\nthis:\n  return (stock_measure t2) (expr_sem_rf \\<sigma> e2) \\<bind>\n  (\\<lambda>w. return (stock_measure (PRODUCT t1 t2)) <|v, w|>) =\n  return_val <|v, expr_sem_rf \\<sigma> e2|>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (return (stock_measure t1)\n                  (expr_sem_rf \\<sigma> e1)) \\<Longrightarrow>\n       expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|x, w|>) =\n       return_val <|x, expr_sem_rf \\<sigma> e2|>", "finally"], ["proof (chain)\npicking this:\n  expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>) =\n  return_val <|v, expr_sem_rf \\<sigma> e2|>", "show \"expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val (<|v,w|>)) = return_val (<|v, expr_sem_rf \\<sigma> e2|>)\""], ["proof (prove)\nusing this:\n  expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>) =\n  return_val <|v, expr_sem_rf \\<sigma> e2|>\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>) =\n    return_val <|v, expr_sem_rf \\<sigma> e2|>", "."], ["proof (state)\nthis:\n  expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>) =\n  return_val <|v, expr_sem_rf \\<sigma> e2|>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v.\n      expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>)) =\n  return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. return_val <|v, expr_sem_rf \\<sigma> e2|>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "also"], ["proof (state)\nthis:\n  return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v.\n      expr_sem \\<sigma> e2 \\<bind> (\\<lambda>w. return_val <|v, w|>)) =\n  return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. return_val <|v, expr_sem_rf \\<sigma> e2|>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "have \"(\\<lambda>v. <|v, expr_sem_rf \\<sigma> e2|>) \\<in> measurable (stock_measure t1) (stock_measure (PRODUCT t1 t2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v. <|v, expr_sem_rf \\<sigma> e2|>)\n    \\<in> stock_measure t1 \\<rightarrow>\\<^sub>M\n          stock_measure (PRODUCT t1 t2)", "using B"], ["proof (prove)\nusing this:\n  val_type (expr_sem_rf \\<sigma> e2) = t2\n  expr_sem_rf \\<sigma> e2 \\<in> type_universe t2\n\ngoal (1 subgoal):\n 1. (\\<lambda>v. <|v, expr_sem_rf \\<sigma> e2|>)\n    \\<in> stock_measure t1 \\<rightarrow>\\<^sub>M\n          stock_measure (PRODUCT t1 t2)", "by (auto intro!: injI)"], ["proof (state)\nthis:\n  (\\<lambda>v. <|v, expr_sem_rf \\<sigma> e2|>)\n  \\<in> stock_measure t1 \\<rightarrow>\\<^sub>M stock_measure (PRODUCT t1 t2)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "hence \"return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind> (\\<lambda>v. return_val (<|v, expr_sem_rf \\<sigma> e2|>)) =\n             return_val (<|expr_sem_rf \\<sigma> e1, expr_sem_rf \\<sigma> e2|>)\""], ["proof (prove)\nusing this:\n  (\\<lambda>v. <|v, expr_sem_rf \\<sigma> e2|>)\n  \\<in> stock_measure t1 \\<rightarrow>\\<^sub>M stock_measure (PRODUCT t1 t2)\n\ngoal (1 subgoal):\n 1. return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind>\n    (\\<lambda>v. return_val <|v, expr_sem_rf \\<sigma> e2|>) =\n    return_val <|expr_sem_rf \\<sigma> e1, expr_sem_rf \\<sigma> e2|>", "by (subst bind_return, rule measurable_compose[OF _ measurable_return_val])\n       (auto simp: A)"], ["proof (state)\nthis:\n  return (stock_measure t1) (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. return_val <|v, expr_sem_rf \\<sigma> e2|>) =\n  return_val <|expr_sem_rf \\<sigma> e1, expr_sem_rf \\<sigma> e2|>\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree <e1 ,  e2>; free_vars <e1 ,  e2> \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n                         expr_sem \\<sigma> <e1 ,  e2>\n 4. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 5. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 6. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "finally"], ["proof (chain)\npicking this:\n  expr_sem \\<sigma> <e1 ,  e2> =\n  return_val <|expr_sem_rf \\<sigma> e1, expr_sem_rf \\<sigma> e2|>", "show \"return_val (expr_sem_rf \\<sigma> (<e1,e2>)) = expr_sem \\<sigma> (<e1, e2>)\""], ["proof (prove)\nusing this:\n  expr_sem \\<sigma> <e1 ,  e2> =\n  return_val <|expr_sem_rf \\<sigma> e1, expr_sem_rf \\<sigma> e2|>\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n    expr_sem \\<sigma> <e1 ,  e2>", "by simp"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> <e1 ,  e2>) =\n  expr_sem \\<sigma> <e1 ,  e2>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 5. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 5. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "case (et_if \\<Gamma> b e1 t e2 V \\<sigma>)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> b : BOOL\n  \\<Gamma> \\<turnstile> e1 : t\n  \\<Gamma> \\<turnstile> e2 : t\n  \\<lbrakk>randomfree b; free_vars b \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> b) =\n                    expr_sem ?\\<sigma> b\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e1) =\n                    expr_sem ?\\<sigma> e1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e2) =\n                    expr_sem ?\\<sigma> e2\n  randomfree (IF b THEN e1 ELSE e2)\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 5. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "let ?P = \"\\<lambda>e. expr_sem \\<sigma> e = return_val (expr_sem_rf \\<sigma> e)\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 5. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_if.prems"], ["proof (chain)\npicking this:\n  randomfree (IF b THEN e1 ELSE e2)\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have A: \"?P b\" \"?P e1\" \"?P e2\""], ["proof (prove)\nusing this:\n  randomfree (IF b THEN e1 ELSE e2)\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> b = return_val (expr_sem_rf \\<sigma> b) &&&\n    expr_sem \\<sigma> e1 = return_val (expr_sem_rf \\<sigma> e1) &&&\n    expr_sem \\<sigma> e2 = return_val (expr_sem_rf \\<sigma> e2)", "by ((intro et_if.IH[symmetric], simp_all) [])+"], ["proof (state)\nthis:\n  expr_sem \\<sigma> b = return_val (expr_sem_rf \\<sigma> b)\n  expr_sem \\<sigma> e1 = return_val (expr_sem_rf \\<sigma> e1)\n  expr_sem \\<sigma> e2 = return_val (expr_sem_rf \\<sigma> e2)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 5. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_if.prems and et_if.hyps"], ["proof (chain)\npicking this:\n  randomfree (IF b THEN e1 ELSE e2)\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  \\<Gamma> \\<turnstile> b : BOOL\n  \\<Gamma> \\<turnstile> e1 : t\n  \\<Gamma> \\<turnstile> e2 : t", "have \"space (expr_sem \\<sigma> b) = type_universe BOOL\""], ["proof (prove)\nusing this:\n  randomfree (IF b THEN e1 ELSE e2)\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  \\<Gamma> \\<turnstile> b : BOOL\n  \\<Gamma> \\<turnstile> e1 : t\n  \\<Gamma> \\<turnstile> e2 : t\n\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> b) = type_universe BOOL", "by (intro space_expr_sem) (auto simp: state_measure_var_type)"], ["proof (state)\nthis:\n  space (expr_sem \\<sigma> b) = type_universe BOOL\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 5. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "hence [simp]: \"val_type (expr_sem_rf \\<sigma> b) = BOOL\""], ["proof (prove)\nusing this:\n  space (expr_sem \\<sigma> b) = type_universe BOOL\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> b) = BOOL", "by (simp add: A return_val_def)"], ["proof (state)\nthis:\n  val_type (expr_sem_rf \\<sigma> b) = BOOL\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 5. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "have B: \"return_val (expr_sem_rf \\<sigma> e1) \\<in> space (subprob_algebra (stock_measure t))\"\n          \"return_val (expr_sem_rf \\<sigma> e2) \\<in> space (subprob_algebra (stock_measure t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e1)\n    \\<in> space (subprob_algebra (stock_measure t)) &&&\n    return_val (expr_sem_rf \\<sigma> e2)\n    \\<in> space (subprob_algebra (stock_measure t))", "using et_if.hyps and et_if.prems"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> b : BOOL\n  \\<Gamma> \\<turnstile> e1 : t\n  \\<Gamma> \\<turnstile> e2 : t\n  randomfree (IF b THEN e1 ELSE e2)\n  free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e1)\n    \\<in> space (subprob_algebra (stock_measure t)) &&&\n    return_val (expr_sem_rf \\<sigma> e2)\n    \\<in> space (subprob_algebra (stock_measure t))", "by ((subst A[symmetric], intro measurable_space[OF measurable_expr_sem], auto) [])+"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e1)\n  \\<in> space (subprob_algebra (stock_measure t))\n  return_val (expr_sem_rf \\<sigma> e2)\n  \\<in> space (subprob_algebra (stock_measure t))\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> b e1 t e2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> b : BOOL;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree b; free_vars b \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> b) =\n                             expr_sem \\<sigma> b;\n        \\<Gamma> \\<turnstile> e1 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        \\<Gamma> \\<turnstile> e2 : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (IF b THEN e1 ELSE e2);\n        free_vars (IF b THEN e1 ELSE e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val\n                          (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n                         expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n 5. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "thus ?case"], ["proof (prove)\nusing this:\n  return_val (expr_sem_rf \\<sigma> e1)\n  \\<in> space (subprob_algebra (stock_measure t))\n  return_val (expr_sem_rf \\<sigma> e2)\n  \\<in> space (subprob_algebra (stock_measure t))\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n    expr_sem \\<sigma> (IF b THEN e1 ELSE e2)", "by (auto simp: A bind_return_val''[where M=t])"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> (IF b THEN e1 ELSE e2)) =\n  expr_sem \\<sigma> (IF b THEN e1 ELSE e2)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "case (et_op \\<Gamma> e t oper t' V)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n  \\<lbrakk>randomfree e; free_vars e \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e) =\n                    expr_sem ?\\<sigma> e\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "let ?M = \"PiM V (\\<lambda>x. stock_measure (\\<Gamma> x))\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_op.prems"], ["proof (chain)\npicking this:\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have e: \"return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\""], ["proof (prove)\nusing this:\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e", "by (intro et_op.IH[of V]) auto"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "with et_op.prems"], ["proof (chain)\npicking this:\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e", "have \"space (return_val (expr_sem_rf \\<sigma> e)) = type_universe t\""], ["proof (prove)\nusing this:\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\n\ngoal (1 subgoal):\n 1. space (return_val (expr_sem_rf \\<sigma> e)) = type_universe t", "by (subst e, subst space_expr_sem[OF et_op.hyps(1)])\n       (auto dest: state_measure_var_type)"], ["proof (state)\nthis:\n  space (return_val (expr_sem_rf \\<sigma> e)) = type_universe t\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "hence A: \"val_type (expr_sem_rf \\<sigma> e) = t\" \"expr_sem_rf \\<sigma> e \\<in> type_universe t\""], ["proof (prove)\nusing this:\n  space (return_val (expr_sem_rf \\<sigma> e)) = type_universe t\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t &&&\n    expr_sem_rf \\<sigma> e \\<in> type_universe t", "by (auto simp add: return_val_def)"], ["proof (state)\nthis:\n  val_type (expr_sem_rf \\<sigma> e) = t\n  expr_sem_rf \\<sigma> e \\<in> type_universe t\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_op.prems e"], ["proof (chain)\npicking this:\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e", "have \"expr_sem \\<sigma> (Operator oper e) =\n                 return_val (expr_sem_rf \\<sigma> e) \\<bind> (\\<lambda>v. return_val (op_sem oper v))\""], ["proof (prove)\nusing this:\n  randomfree (oper $$ e)\n  free_vars (oper $$ e) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> (oper $$ e) =\n    return_val (expr_sem_rf \\<sigma> e) \\<bind>\n    (\\<lambda>v. return_val (op_sem oper v))", "by simp"], ["proof (state)\nthis:\n  expr_sem \\<sigma> (oper $$ e) =\n  return_val (expr_sem_rf \\<sigma> e) \\<bind>\n  (\\<lambda>v. return_val (op_sem oper v))\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "also"], ["proof (state)\nthis:\n  expr_sem \\<sigma> (oper $$ e) =\n  return_val (expr_sem_rf \\<sigma> e) \\<bind>\n  (\\<lambda>v. return_val (op_sem oper v))\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "have \"... = return_val (op_sem oper (expr_sem_rf \\<sigma> e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e) \\<bind>\n    (\\<lambda>v. return_val (op_sem oper v)) =\n    return_val (op_sem oper (expr_sem_rf \\<sigma> e))", "by (subst return_val_def, rule bind_return,\n        rule measurable_compose[OF measurable_op_sem measurable_return_val])\n       (auto simp: A et_op.hyps)"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e) \\<bind>\n  (\\<lambda>v. return_val (op_sem oper v)) =\n  return_val (op_sem oper (expr_sem_rf \\<sigma> e))\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e t oper t' V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        op_type oper t = Some t'; randomfree (oper $$ e);\n        free_vars (oper $$ e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n                         expr_sem \\<sigma> (oper $$ e)\n 3. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 4. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "finally"], ["proof (chain)\npicking this:\n  expr_sem \\<sigma> (oper $$ e) =\n  return_val (op_sem oper (expr_sem_rf \\<sigma> e))", "show \"return_val (expr_sem_rf \\<sigma> (Operator oper e)) = expr_sem \\<sigma> (Operator oper e)\""], ["proof (prove)\nusing this:\n  expr_sem \\<sigma> (oper $$ e) =\n  return_val (op_sem oper (expr_sem_rf \\<sigma> e))\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n    expr_sem \\<sigma> (oper $$ e)", "by simp"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> (oper $$ e)) =\n  expr_sem \\<sigma> (oper $$ e)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "case (et_let \\<Gamma> e1 t1 e2 t2 V)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e1) =\n                    expr_sem ?\\<sigma> e1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V;\n   ?\\<sigma>\n   \\<in> space\n          (state_measure ?V\n            (\\<lambda>a.\n                case a of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e2) =\n                    expr_sem ?\\<sigma> e2\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "let ?M = \"state_measure V \\<Gamma>\" and ?N = \"state_measure (shift_var_set V) (case_nat t1 \\<Gamma>)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "let ?\\<sigma>' = \"case_nat (expr_sem_rf \\<sigma> e1) \\<sigma>\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_let.prems"], ["proof (chain)\npicking this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have e1: \"return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1\""], ["proof (prove)\nusing this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1", "by (auto intro!: et_let.IH(1)[of V])"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e1) = expr_sem \\<sigma> e1\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_let.prems"], ["proof (chain)\npicking this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have S: \"space (return_val (expr_sem_rf \\<sigma> e1)) = type_universe t1\""], ["proof (prove)\nusing this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. space (return_val (expr_sem_rf \\<sigma> e1)) = type_universe t1", "by (subst e1, subst space_expr_sem[OF et_let.hyps(1)])\n       (auto dest: state_measure_var_type)"], ["proof (state)\nthis:\n  space (return_val (expr_sem_rf \\<sigma> e1)) = type_universe t1\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "hence A: \"val_type (expr_sem_rf \\<sigma> e1) = t1\" \"expr_sem_rf \\<sigma> e1 \\<in> type_universe t1\""], ["proof (prove)\nusing this:\n  space (return_val (expr_sem_rf \\<sigma> e1)) = type_universe t1\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e1) = t1 &&&\n    expr_sem_rf \\<sigma> e1 \\<in> type_universe t1", "by (auto simp add: return_val_def)"], ["proof (state)\nthis:\n  val_type (expr_sem_rf \\<sigma> e1) = t1\n  expr_sem_rf \\<sigma> e1 \\<in> type_universe t1\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "with et_let.prems"], ["proof (chain)\npicking this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  val_type (expr_sem_rf \\<sigma> e1) = t1\n  expr_sem_rf \\<sigma> e1 \\<in> type_universe t1", "have e2: \"\\<And>\\<sigma>. \\<sigma> \\<in> space ?N \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2\""], ["proof (prove)\nusing this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  val_type (expr_sem_rf \\<sigma> e1) = t1\n  expr_sem_rf \\<sigma> e1 \\<in> type_universe t1\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<sigma>\n       \\<in> space\n              (state_measure (shift_var_set V)\n                (case_nat t1 \\<Gamma>)) \\<Longrightarrow>\n       return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2", "using subset_shift_var_set"], ["proof (prove)\nusing this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  val_type (expr_sem_rf \\<sigma> e1) = t1\n  expr_sem_rf \\<sigma> e1 \\<in> type_universe t1\n  Suc -` ?A \\<subseteq> ?V \\<Longrightarrow> ?A \\<subseteq> shift_var_set ?V\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<sigma>\n       \\<in> space\n              (state_measure (shift_var_set V)\n                (case_nat t1 \\<Gamma>)) \\<Longrightarrow>\n       return_val (expr_sem_rf \\<sigma> e2) = expr_sem \\<sigma> e2", "by (intro et_let.IH(2)[of \"shift_var_set V\"]) (auto simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  ?\\<sigma>\n  \\<in> space\n         (state_measure (shift_var_set V)\n           (case_nat t1 \\<Gamma>)) \\<Longrightarrow>\n  return_val (expr_sem_rf ?\\<sigma> e2) = expr_sem ?\\<sigma> e2\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_let.prems"], ["proof (chain)\npicking this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have \"expr_sem \\<sigma> (LetVar e1 e2) =\n                              return_val (expr_sem_rf \\<sigma> e1) \\<bind> (\\<lambda>v. expr_sem (case_nat v \\<sigma>) e2)\""], ["proof (prove)\nusing this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. expr_sem \\<sigma> (LET e1 IN e2) =\n    return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n    (\\<lambda>v. expr_sem (case_nat v \\<sigma>) e2)", "by (simp add: e1)"], ["proof (state)\nthis:\n  expr_sem \\<sigma> (LET e1 IN e2) =\n  return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. expr_sem (case_nat v \\<sigma>) e2)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "also"], ["proof (state)\nthis:\n  expr_sem \\<sigma> (LET e1 IN e2) =\n  return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. expr_sem (case_nat v \\<sigma>) e2)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_let.prems"], ["proof (chain)\npicking this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have \"... = return_val (expr_sem_rf \\<sigma> e1) \\<bind> (\\<lambda>v. return_val (expr_sem_rf (case_nat v \\<sigma>) e2))\""], ["proof (prove)\nusing this:\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n    (\\<lambda>v. expr_sem (case_nat v \\<sigma>) e2) =\n    return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n    (\\<lambda>v. return_val (expr_sem_rf (case_nat v \\<sigma>) e2))", "by (intro bind_cong refl, subst e2) (auto simp: S)"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. expr_sem (case_nat v \\<sigma>) e2) =\n  return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. return_val (expr_sem_rf (case_nat v \\<sigma>) e2))\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "also"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. expr_sem (case_nat v \\<sigma>) e2) =\n  return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. return_val (expr_sem_rf (case_nat v \\<sigma>) e2))\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "from et_let"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e1) =\n                    expr_sem ?\\<sigma> e1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V;\n   ?\\<sigma>\n   \\<in> space\n          (state_measure ?V\n            (\\<lambda>a.\n                case a of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e2) =\n                    expr_sem ?\\<sigma> e2\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have Me2[measurable]: \"(\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2) \\<in> measurable ?N (stock_measure t2)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e1) =\n                    expr_sem ?\\<sigma> e1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V;\n   ?\\<sigma>\n   \\<in> space\n          (state_measure ?V\n            (\\<lambda>a.\n                case a of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e2) =\n                    expr_sem ?\\<sigma> e2\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n          stock_measure t2", "using subset_shift_var_set"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e1 : t1\n  case_nat t1 \\<Gamma> \\<turnstile> e2 : t2\n  \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> ?V;\n   ?\\<sigma> \\<in> space (state_measure ?V \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e1) =\n                    expr_sem ?\\<sigma> e1\n  \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> ?V;\n   ?\\<sigma>\n   \\<in> space\n          (state_measure ?V\n            (\\<lambda>a.\n                case a of 0 \\<Rightarrow> t1\n                | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n  \\<Longrightarrow> return_val (expr_sem_rf ?\\<sigma> e2) =\n                    expr_sem ?\\<sigma> e2\n  randomfree (LET e1 IN e2)\n  free_vars (LET e1 IN e2) \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n  Suc -` ?A \\<subseteq> ?V \\<Longrightarrow> ?A \\<subseteq> shift_var_set ?V\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n          stock_measure t2", "by (intro measurable_expr_sem_rf) auto"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e2)\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t1 \\<Gamma>) \\<rightarrow>\\<^sub>M\n        stock_measure t2\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "have \"(\\<lambda>(\\<sigma>,y). case_nat y \\<sigma>) \\<circ> (\\<lambda>y. (\\<sigma>, y)) \\<in> measurable (stock_measure t1) ?N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>) \\<circ>\n    Product_Type.Pair \\<sigma>\n    \\<in> stock_measure t1 \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set V) (case_nat t1 \\<Gamma>)", "using \\<open>\\<sigma> \\<in> space ?M\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>) \\<circ>\n    Product_Type.Pair \\<sigma>\n    \\<in> stock_measure t1 \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set V) (case_nat t1 \\<Gamma>)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>(\\<sigma>, y). case_nat y \\<sigma>) \\<circ>\n  Product_Type.Pair \\<sigma>\n  \\<in> stock_measure t1 \\<rightarrow>\\<^sub>M\n        state_measure (shift_var_set V) (case_nat t1 \\<Gamma>)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "have  \"return_val (expr_sem_rf \\<sigma> e1) \\<bind> (\\<lambda>v. return_val (expr_sem_rf (case_nat v \\<sigma>) e2)) =\n              return_val (expr_sem_rf ?\\<sigma>' e2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n    (\\<lambda>v. return_val (expr_sem_rf (case_nat v \\<sigma>) e2)) =\n    return_val\n     (expr_sem_rf (case_nat (expr_sem_rf \\<sigma> e1) \\<sigma>) e2)", "using \\<open>\\<sigma> \\<in> space ?M\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n    (\\<lambda>v. return_val (expr_sem_rf (case_nat v \\<sigma>) e2)) =\n    return_val\n     (expr_sem_rf (case_nat (expr_sem_rf \\<sigma> e1) \\<sigma>) e2)", "by (subst return_val_def, intro bind_return, subst A)\n     (rule measurable_compose[OF _ measurable_return_val[of t2]], simp_all)"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e1) \\<bind>\n  (\\<lambda>v. return_val (expr_sem_rf (case_nat v \\<sigma>) e2)) =\n  return_val (expr_sem_rf (case_nat (expr_sem_rf \\<sigma> e1) \\<sigma>) e2)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e1 t1 e2 t2 V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e1 : t1;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e1; free_vars e1 \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e1) =\n                             expr_sem \\<sigma> e1;\n        case_nat t1 \\<Gamma> \\<turnstile> e2 : t2;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e2; free_vars e2 \\<subseteq> V;\n            \\<sigma>\n            \\<in> space (state_measure V (case_nat t1 \\<Gamma>))\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e2) =\n                             expr_sem \\<sigma> e2;\n        randomfree (LET e1 IN e2); free_vars (LET e1 IN e2) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n                         expr_sem \\<sigma> (LET e1 IN e2)\n 2. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 3. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "finally"], ["proof (chain)\npicking this:\n  expr_sem \\<sigma> (LET e1 IN e2) =\n  return_val (expr_sem_rf (case_nat (expr_sem_rf \\<sigma> e1) \\<sigma>) e2)", "show ?case"], ["proof (prove)\nusing this:\n  expr_sem \\<sigma> (LET e1 IN e2) =\n  return_val (expr_sem_rf (case_nat (expr_sem_rf \\<sigma> e1) \\<sigma>) e2)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n    expr_sem \\<sigma> (LET e1 IN e2)", "by simp"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> (LET e1 IN e2)) =\n  expr_sem \\<sigma> (LET e1 IN e2)\n\ngoal (2 subgoals):\n 1. \\<And>\\<Gamma> e dst V \\<sigma>.\n       \\<lbrakk>\\<Gamma> \\<turnstile> e : dist_param_type dst;\n        \\<And>V \\<sigma>.\n           \\<lbrakk>randomfree e; free_vars e \\<subseteq> V;\n            \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n           \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> e) =\n                             expr_sem \\<sigma> e;\n        randomfree (Random dst e); free_vars (Random dst e) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Random dst e)) =\n                         expr_sem \\<sigma> (Random dst e)\n 2. \\<And>\\<Gamma> t V \\<sigma>.\n       \\<lbrakk>randomfree (Fail t); free_vars (Fail t) \\<subseteq> V;\n        \\<sigma> \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> return_val (expr_sem_rf \\<sigma> (Fail t)) =\n                         expr_sem \\<sigma> (Fail t)", "qed simp_all"], ["", "lemma val_type_expr_sem_rf:\n  assumes \"\\<Gamma> \\<turnstile> e : t\" \"randomfree e\" \"free_vars e \\<subseteq> V\" \"\\<sigma> \\<in> space (state_measure V \\<Gamma>)\"\n  shows \"val_type (expr_sem_rf \\<sigma> e) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t", "have \"type_universe (val_type (expr_sem_rf \\<sigma> e)) = space (return_val (expr_sem_rf \\<sigma> e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. type_universe (val_type (expr_sem_rf \\<sigma> e)) =\n    space (return_val (expr_sem_rf \\<sigma> e))", "by (simp add: return_val_def)"], ["proof (state)\nthis:\n  type_universe (val_type (expr_sem_rf \\<sigma> e)) =\n  space (return_val (expr_sem_rf \\<sigma> e))\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t", "also"], ["proof (state)\nthis:\n  type_universe (val_type (expr_sem_rf \\<sigma> e)) =\n  space (return_val (expr_sem_rf \\<sigma> e))\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e : t\n  randomfree e\n  free_vars e \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have \"return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e : t\n  randomfree e\n  free_vars e \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e", "by (intro expr_sem_rf_sound) auto"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t", "also"], ["proof (state)\nthis:\n  return_val (expr_sem_rf \\<sigma> e) = expr_sem \\<sigma> e\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e : t\n  randomfree e\n  free_vars e \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have \"space ... = type_universe t\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e : t\n  randomfree e\n  free_vars e \\<subseteq> V\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. space (expr_sem \\<sigma> e) = type_universe t", "by (intro space_expr_sem[of \\<Gamma>])\n       (auto simp: state_measure_def space_PiM  dest: PiE_mem)"], ["proof (state)\nthis:\n  space (expr_sem \\<sigma> e) = type_universe t\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t", "finally"], ["proof (chain)\npicking this:\n  type_universe (val_type (expr_sem_rf \\<sigma> e)) = type_universe t", "show ?thesis"], ["proof (prove)\nusing this:\n  type_universe (val_type (expr_sem_rf \\<sigma> e)) = type_universe t\n\ngoal (1 subgoal):\n 1. val_type (expr_sem_rf \\<sigma> e) = t", "by simp"], ["proof (state)\nthis:\n  val_type (expr_sem_rf \\<sigma> e) = t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma expr_sem_rf_eq_on_vars:\n  \"(\\<And>x. x\\<in>free_vars e \\<Longrightarrow> \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow> expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> free_vars e \\<Longrightarrow>\n        \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n    expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e", "proof (induction e arbitrary: \\<sigma>1 \\<sigma>2)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (x1a $$ e) =\n                         expr_sem_rf \\<sigma>2 (x1a $$ e)\n 5. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 6. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 7. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 8. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "case (Operator oper e \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars e \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e = expr_sem_rf ?\\<sigma>2.0 e\n  ?x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (x1a $$ e) =\n                         expr_sem_rf \\<sigma>2 (x1a $$ e)\n 5. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 6. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 7. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 8. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "hence \"expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      x \\<in> free_vars e \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e = expr_sem_rf ?\\<sigma>2.0 e\n  ?x \\<in> free_vars (oper $$ e) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e", "by (intro Operator.IH) auto"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e\n\ngoal (8 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (x1a $$ e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (x1a $$ e) =\n                         expr_sem_rf \\<sigma>2 (x1a $$ e)\n 5. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 6. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 7. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 8. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "thus ?case"], ["proof (prove)\nusing this:\n  expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e\n\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 (oper $$ e) = expr_sem_rf \\<sigma>2 (oper $$ e)", "by simp"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 (oper $$ e) = expr_sem_rf \\<sigma>2 (oper $$ e)\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "case (LetVar e1 e2 \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars e1 \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e1 = expr_sem_rf ?\\<sigma>2.0 e1\n  (\\<And>x.\n      x \\<in> free_vars e2 \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e2 = expr_sem_rf ?\\<sigma>2.0 e2\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "hence A: \"expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      x \\<in> free_vars e1 \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e1 = expr_sem_rf ?\\<sigma>2.0 e1\n  (\\<And>x.\n      x \\<in> free_vars e2 \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e2 = expr_sem_rf ?\\<sigma>2.0 e2\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1", "by (intro LetVar.IH) auto"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "{"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "fix y"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "assume \"y \\<in> free_vars e2\""], ["proof (state)\nthis:\n  y \\<in> free_vars e2\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "hence \"case_nat (expr_sem_rf \\<sigma>1 e1) \\<sigma>1 y = case_nat (expr_sem_rf \\<sigma>2 e1) \\<sigma>2 y\""], ["proof (prove)\nusing this:\n  y \\<in> free_vars e2\n\ngoal (1 subgoal):\n 1. (case y of 0 \\<Rightarrow> expr_sem_rf \\<sigma>1 e1\n     | Suc x \\<Rightarrow> \\<sigma>1 x) =\n    (case y of 0 \\<Rightarrow> expr_sem_rf \\<sigma>2 e1\n     | Suc x \\<Rightarrow> \\<sigma>2 x)", "using LetVar(3)"], ["proof (prove)\nusing this:\n  y \\<in> free_vars e2\n  ?x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (1 subgoal):\n 1. (case y of 0 \\<Rightarrow> expr_sem_rf \\<sigma>1 e1\n     | Suc x \\<Rightarrow> \\<sigma>1 x) =\n    (case y of 0 \\<Rightarrow> expr_sem_rf \\<sigma>2 e1\n     | Suc x \\<Rightarrow> \\<sigma>2 x)", "by (auto simp add: A split: nat.split)"], ["proof (state)\nthis:\n  (case y of 0 \\<Rightarrow> expr_sem_rf \\<sigma>1 e1\n   | Suc x \\<Rightarrow> \\<sigma>1 x) =\n  (case y of 0 \\<Rightarrow> expr_sem_rf \\<sigma>2 e1\n   | Suc x \\<Rightarrow> \\<sigma>2 x)\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "}"], ["proof (state)\nthis:\n  ?y2 \\<in> free_vars e2 \\<Longrightarrow>\n  (case ?y2 of 0 \\<Rightarrow> expr_sem_rf \\<sigma>1 e1\n   | Suc x \\<Rightarrow> \\<sigma>1 x) =\n  (case ?y2 of 0 \\<Rightarrow> expr_sem_rf \\<sigma>2 e1\n   | Suc x \\<Rightarrow> \\<sigma>2 x)\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "hence \"expr_sem_rf (case_nat (expr_sem_rf \\<sigma>1 e1) \\<sigma>1) e2 =\n           expr_sem_rf (case_nat (expr_sem_rf \\<sigma>2 e1) \\<sigma>2) e2\""], ["proof (prove)\nusing this:\n  ?y2 \\<in> free_vars e2 \\<Longrightarrow>\n  (case ?y2 of 0 \\<Rightarrow> expr_sem_rf \\<sigma>1 e1\n   | Suc x \\<Rightarrow> \\<sigma>1 x) =\n  (case ?y2 of 0 \\<Rightarrow> expr_sem_rf \\<sigma>2 e1\n   | Suc x \\<Rightarrow> \\<sigma>2 x)\n\ngoal (1 subgoal):\n 1. expr_sem_rf (case_nat (expr_sem_rf \\<sigma>1 e1) \\<sigma>1) e2 =\n    expr_sem_rf (case_nat (expr_sem_rf \\<sigma>2 e1) \\<sigma>2) e2", "by (intro LetVar.IH) simp"], ["proof (state)\nthis:\n  expr_sem_rf (case_nat (expr_sem_rf \\<sigma>1 e1) \\<sigma>1) e2 =\n  expr_sem_rf (case_nat (expr_sem_rf \\<sigma>2 e1) \\<sigma>2) e2\n\ngoal (7 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars (LET e1 IN e2) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n                         expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n 4. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 5. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 6. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 7. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "thus ?case"], ["proof (prove)\nusing this:\n  expr_sem_rf (case_nat (expr_sem_rf \\<sigma>1 e1) \\<sigma>1) e2 =\n  expr_sem_rf (case_nat (expr_sem_rf \\<sigma>2 e1) \\<sigma>2) e2\n\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n    expr_sem_rf \\<sigma>2 (LET e1 IN e2)", "by simp"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 (LET e1 IN e2) =\n  expr_sem_rf \\<sigma>2 (LET e1 IN e2)\n\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "case (Pair e1 e2 \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars e1 \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e1 = expr_sem_rf ?\\<sigma>2.0 e1\n  (\\<And>x.\n      x \\<in> free_vars e2 \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e2 = expr_sem_rf ?\\<sigma>2.0 e2\n  ?x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "have \"expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\" \"expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1 &&&\n    expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2", "by (intro Pair.IH, simp add: Pair)+"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\n  expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2\n\ngoal (6 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>e1 e2 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>x.\n           x \\<in> free_vars <e1 ,  e2> \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 <e1 ,  e2> =\n                         expr_sem_rf \\<sigma>2 <e1 ,  e2>\n 4. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 5. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 6. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "thus ?case"], ["proof (prove)\nusing this:\n  expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\n  expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2\n\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 <e1 ,  e2> = expr_sem_rf \\<sigma>2 <e1 ,  e2>", "by simp"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 <e1 ,  e2> = expr_sem_rf \\<sigma>2 <e1 ,  e2>\n\ngoal (5 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 4. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 5. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 4. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 5. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "case (IfThenElse b e1 e2 \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars b \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 b = expr_sem_rf ?\\<sigma>2.0 b\n  (\\<And>x.\n      x \\<in> free_vars e1 \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e1 = expr_sem_rf ?\\<sigma>2.0 e1\n  (\\<And>x.\n      x \\<in> free_vars e2 \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e2 = expr_sem_rf ?\\<sigma>2.0 e2\n  ?x \\<in> free_vars (IF b THEN e1 ELSE e2) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (5 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 4. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 5. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "have \"expr_sem_rf \\<sigma>1 b = expr_sem_rf \\<sigma>2 b\" \"expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\"\n       \"expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 b = expr_sem_rf \\<sigma>2 b &&&\n    expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1 &&&\n    expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2", "by (intro IfThenElse.IH, simp add: IfThenElse)+"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 b = expr_sem_rf \\<sigma>2 b\n  expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\n  expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2\n\ngoal (5 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 4. \\<And>e1 e2 e3 \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e1 \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e2 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2;\n        \\<And>\\<sigma>1 \\<sigma>2.\n           (\\<And>x.\n               x \\<in> free_vars e3 \\<Longrightarrow>\n               \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n           expr_sem_rf \\<sigma>1 e3 = expr_sem_rf \\<sigma>2 e3;\n        \\<And>x.\n           x \\<in> free_vars (IF e1 THEN e2 ELSE e3) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (IF e1 THEN e2 ELSE e3) =\n                         expr_sem_rf \\<sigma>2 (IF e1 THEN e2 ELSE e3)\n 5. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "thus ?case"], ["proof (prove)\nusing this:\n  expr_sem_rf \\<sigma>1 b = expr_sem_rf \\<sigma>2 b\n  expr_sem_rf \\<sigma>1 e1 = expr_sem_rf \\<sigma>2 e1\n  expr_sem_rf \\<sigma>1 e2 = expr_sem_rf \\<sigma>2 e2\n\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 (IF b THEN e1 ELSE e2) =\n    expr_sem_rf \\<sigma>2 (IF b THEN e1 ELSE e2)", "by simp"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 (IF b THEN e1 ELSE e2) =\n  expr_sem_rf \\<sigma>2 (IF b THEN e1 ELSE e2)\n\ngoal (4 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 4. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 4. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "case (Random dst e \\<sigma>1 \\<sigma>2)"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> free_vars e \\<Longrightarrow>\n      ?\\<sigma>1.0 x = ?\\<sigma>2.0 x) \\<Longrightarrow>\n  expr_sem_rf ?\\<sigma>1.0 e = expr_sem_rf ?\\<sigma>2.0 e\n  ?x \\<in> free_vars (Random dst e) \\<Longrightarrow>\n  \\<sigma>1 ?x = \\<sigma>2 ?x\n\ngoal (4 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 4. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "have \"expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e", "by (intro Random.IH) (simp add: Random)"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e\n\ngoal (4 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x1a e \\<sigma>1 \\<sigma>2.\n       \\<lbrakk>\\<And>\\<sigma>1 \\<sigma>2.\n                   (\\<And>x.\n                       x \\<in> free_vars e \\<Longrightarrow>\n                       \\<sigma>1 x = \\<sigma>2 x) \\<Longrightarrow>\n                   expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e;\n        \\<And>x.\n           x \\<in> free_vars (Random x1a e) \\<Longrightarrow>\n           \\<sigma>1 x = \\<sigma>2 x\\<rbrakk>\n       \\<Longrightarrow> expr_sem_rf \\<sigma>1 (Random x1a e) =\n                         expr_sem_rf \\<sigma>2 (Random x1a e)\n 4. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "thus ?case"], ["proof (prove)\nusing this:\n  expr_sem_rf \\<sigma>1 e = expr_sem_rf \\<sigma>2 e\n\ngoal (1 subgoal):\n 1. expr_sem_rf \\<sigma>1 (Random dst e) =\n    expr_sem_rf \\<sigma>2 (Random dst e)", "by simp"], ["proof (state)\nthis:\n  expr_sem_rf \\<sigma>1 (Random dst e) =\n  expr_sem_rf \\<sigma>2 (Random dst e)\n\ngoal (3 subgoals):\n 1. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Var x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Var x) = expr_sem_rf \\<sigma>2 (Var x)\n 2. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Val x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Val x) = expr_sem_rf \\<sigma>2 (Val x)\n 3. \\<And>x \\<sigma>1 \\<sigma>2.\n       (\\<And>xa.\n           xa \\<in> free_vars (Fail x) \\<Longrightarrow>\n           \\<sigma>1 xa = \\<sigma>2 xa) \\<Longrightarrow>\n       expr_sem_rf \\<sigma>1 (Fail x) = expr_sem_rf \\<sigma>2 (Fail x)", "qed auto"], ["", "(*\nsubsection {* Substitution of free variables *}\n\nprimrec expr_subst :: \"expr \\<Rightarrow> expr \\<Rightarrow> vname \\<Rightarrow> expr\" (\"_\\<langle>_'/_\\<rangle>\" [1000,0,0] 999) where\n  \"(Val v)\\<langle>_/_\\<rangle> = Val v\"\n| \"(Var y)\\<langle>f/x\\<rangle> = (if y = x then f else Var y)\"\n| \"<e1,e2>\\<langle>f/x\\<rangle> = <e1\\<langle>f/x\\<rangle>, e2\\<langle>f/x\\<rangle>>\"\n| \"(<oper> e)\\<langle>f/x\\<rangle> = <oper> (e\\<langle>f/x\\<rangle>)\"\n| \"(LET e1 IN e2)\\<langle>f/x\\<rangle> = LET y = e1\\<langle>f/x\\<rangle> IN if y = x then e2 else e2\\<langle>f/x\\<rangle>\"\n| \"(IF b THEN e1 ELSE e2)\\<langle>f/x\\<rangle> = IF b\\<langle>f/x\\<rangle> THEN e1\\<langle>f/x\\<rangle> ELSE e2\\<langle>f/x\\<rangle>\"\n| \"(Random dst e)\\<langle>f/x\\<rangle> = Random dst (e\\<langle>f/x\\<rangle>)\"\n| \"(Fail t)\\<langle>f/x\\<rangle> = Fail t\"\n\nprimrec bound_vars :: \"expr \\<Rightarrow> vname set\" where\n  \"bound_vars (Val _) = {}\"\n| \"bound_vars (Var _) = {}\"\n| \"bound_vars <e1,e2> = bound_vars e1 \\<union> bound_vars e2\"\n| \"bound_vars (<_> e) = bound_vars e\"\n| \"bound_vars (LET x = e1 IN e2) = {x} \\<union> bound_vars e1 \\<union> bound_vars e2\"\n| \"bound_vars (IF b THEN e1 ELSE e2) = bound_vars b \\<union> bound_vars e1 \\<union> bound_vars e2\"\n| \"bound_vars (Random _ e) = bound_vars e\"\n| \"bound_vars (Fail _) = {}\"\n\nlemma expr_typing_eq_on_free_vars:\n  \"\\<Gamma>1 \\<turnstile> e : t \\<Longrightarrow> (\\<And>x. x \\<in> free_vars e \\<Longrightarrow> \\<Gamma>1 x = \\<Gamma>2 x) \\<Longrightarrow> \\<Gamma>2 \\<turnstile> e : t\"\nproof (induction arbitrary: \\<Gamma>2 rule: expr_typing.induct)\n  case et_let\n  thus ?case by (intro expr_typing.intros) auto\nqed (auto intro!: expr_typing.intros simp del: fun_upd_apply)\n\nlemma expr_typing_subst:\n  assumes \"\\<Gamma> \\<turnstile> e : t1\" \"\\<Gamma> \\<turnstile> f : t'\" \"\\<Gamma> x = t'\" \"free_vars f \\<inter> bound_vars e = {}\"\n  shows \"\\<Gamma> \\<turnstile> e\\<langle>f/x\\<rangle> : t1\"\nusing assms\nproof (induction rule: expr_typing.induct)\n  case (et_let \\<Gamma> e1 t1 y e2 t2)\n  from et_let.prems have A: \"\\<Gamma> \\<turnstile> e1\\<langle>f/x\\<rangle> : t1\" by (intro et_let.IH) auto\n  show ?case\n  proof (cases \"y = x\")\n    assume \"y \\<noteq> x\"\n    from et_let.prems have \"\\<Gamma>(y := t1) \\<turnstile> f : t'\"\n      by (intro expr_typing_eq_on_free_vars[OF `\\<Gamma> \\<turnstile> f : t'`]) auto\n    moreover from `y \\<noteq> x` have \"(\\<Gamma>(y := t1)) x = \\<Gamma> x\" by simp\n    ultimately have \"\\<Gamma>(y := t1) \\<turnstile> e2\\<langle>f/x\\<rangle> : t2\" using et_let.prems\n      by (intro et_let.IH) (auto simp del: fun_upd_apply)\n    with A and `y \\<noteq> x` show ?thesis by (auto intro: expr_typing.intros)\n  qed (insert et_let, auto intro!: expr_typing.intros simp del: fun_upd_apply)\nqed (insert assms(2), auto intro: expr_typing.intros)\n\nlemma expr_subst_randomfree:\n  assumes \"\\<Gamma> \\<turnstile> f : t\" \"randomfree f\" \"free_vars f \\<subseteq> V\" \"free_vars f \\<inter> bound_vars e = {}\"\n          \"\\<sigma> \\<in> space (state_measure V \\<Gamma>)\"\n  shows   \"expr_sem \\<sigma> (e\\<langle>f/x\\<rangle>) = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) e\"\nusing assms(1,3,4,5)\nproof (induction e arbitrary: \\<sigma> V \\<Gamma>)\n  case (Pair e1 e2 \\<sigma> V \\<Gamma>)\n    from Pair.prems have \"expr_sem \\<sigma> (e1\\<langle>f/x\\<rangle>) = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) e1\"\n                     and \"expr_sem \\<sigma> (e2\\<langle>f/x\\<rangle>) = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) e2\"\n      by (auto intro!: Pair.IH[of \\<Gamma> V \\<sigma>])\n    thus ?case by (simp del: fun_upd_apply)\nnext\n  case (IfThenElse b e1 e2 \\<sigma> V \\<Gamma>)\n    from IfThenElse.prems\n      have \"expr_sem \\<sigma> (b\\<langle>f/x\\<rangle>) = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) b\"\n           \"expr_sem \\<sigma> (e1\\<langle>f/x\\<rangle>) = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) e1\"\n           \"expr_sem \\<sigma> (e2\\<langle>f/x\\<rangle>) = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) e2\"\n      by (auto intro!: IfThenElse.IH[of \\<Gamma> V \\<sigma>])\n    thus ?case by (simp only: expr_sem.simps expr_subst.simps)\nnext\n  case (LetVar y e1 e2)\n  from LetVar.prems have A: \"expr_sem \\<sigma> (e1\\<langle>f/x\\<rangle>) = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) e1\"\n    by (intro LetVar.IH) auto\n  show ?case\n  proof (cases \"y = x\")\n    assume \"y = x\"\n    with LetVar.prems show ?case by (auto simp add: A simp del: fun_upd_apply)\n  next\n    assume \"y \\<noteq> x\"\n    {\n      fix v assume \"v \\<in> space (expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) e1)\"\n      let ?\\<sigma>' = \"\\<sigma>(y := v)\" and ?\\<Gamma>' = \"\\<Gamma>(y := val_type v)\"\n      from LetVar.prems have \"\\<Gamma>(y := val_type v) \\<turnstile> f : t\" by (auto intro: expr_typing_eq_on_free_vars)\n      moreover from LetVar.prems have \"?\\<sigma>' \\<in> space (state_measure (insert y V) ?\\<Gamma>')\"\n        by (auto simp: state_measure_def space_PiM split: if_split_asm)\n      ultimately have \"expr_sem ?\\<sigma>' (e2\\<langle>f/x\\<rangle>) = expr_sem (?\\<sigma>'(x := expr_sem_rf f ?\\<sigma>')) e2\"\n        using LetVar.prems and `y \\<noteq> x`\n        by (intro LetVar.IH(2)[of \"\\<Gamma>(y := val_type v)\" \"insert y V\"]) (auto simp del: fun_upd_apply)\n      also from LetVar.prems have \"expr_sem_rf f ?\\<sigma>' = expr_sem_rf f \\<sigma>\"\n        by (intro expr_sem_rf_eq_on_vars) auto\n      finally have \"expr_sem (\\<sigma>(y := v)) (e2\\<langle>f/x\\<rangle>) = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>, y := v)) e2\"\n        using `y \\<noteq> x` by (subst fun_upd_twist) (simp_all del: fun_upd_apply)\n    }\n    with A and `y \\<noteq> x` show ?thesis by (auto simp del: fun_upd_apply intro!: bind_cong)\n  qed\nqed (simp_all add: expr_sem_rf_sound assms)\n\nlemma stock_measure_context_upd:\n  \"(\\<lambda>y. stock_measure ((\\<Gamma>(x := t)) y)) = (\\<lambda>y. stock_measure (\\<Gamma> y))(x := stock_measure t)\"\n  by (intro ext) simp\n\nlemma Let_det_eq_subst:\n  assumes \"\\<Gamma> \\<turnstile> LET x = f IN e : t\" \"randomfree f\" \"free_vars (LET x = f IN e) \\<subseteq> V\"\n          \"free_vars f \\<inter> bound_vars e = {}\" \"\\<sigma> \\<in> space (state_measure V \\<Gamma>)\"\n  shows   \"expr_sem \\<sigma> (LET x = f IN e) = expr_sem \\<sigma> (e\\<langle>f/x\\<rangle>)\"\nproof-\n  from assms(1) obtain t' where t1: \"\\<Gamma> \\<turnstile> f : t'\" and t2: \"\\<Gamma>(x := t') \\<turnstile> e : t\" by auto\n  with assms have \"expr_sem \\<sigma> (LET x = f IN e) =\n                       return_val (expr_sem_rf f \\<sigma>) \\<bind> (\\<lambda>v. expr_sem (\\<sigma>(x := v)) e)\" (is \"_ = ?M\")\n    by (auto simp: expr_sem_rf_sound)\n  also have \"(\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<circ> (\\<lambda>(\\<sigma>,v). \\<sigma>(x := v)) \\<circ> (\\<lambda>v. (\\<sigma>,v)) \\<in>\n                 measurable (stock_measure ((\\<Gamma>(x := t')) x)) (subprob_algebra (stock_measure t))\"\n    apply (intro measurable_comp, rule measurable_Pair1', rule assms)\n    apply (subst fun_upd_same, unfold state_measure_def)\n    apply (rule measurable_add_dim', subst stock_measure_context_upd[symmetric])\n    apply (insert assms, auto intro!: measurable_expr_sem[unfolded state_measure_def] t1 t2\n                              simp del: fun_upd_apply)\n    done\n  hence \"(\\<lambda>v. expr_sem (\\<sigma>(x := v)) e) \\<in>\n                 measurable (stock_measure ((\\<Gamma>(x := t')) x)) (subprob_algebra (stock_measure t))\"\n    by (simp add: o_def)\n  with assms have \"?M = expr_sem (\\<sigma>(x := expr_sem_rf f \\<sigma>)) e\"\n    unfolding return_val_def\n    by (intro bind_return) (auto simp: val_type_expr_sem_rf[OF t1]\n                                       type_universe_def simp del: type_universe_type)\n  also from assms t1 t2 have \"... = expr_sem \\<sigma> (e\\<langle>f/x\\<rangle>)\"\n    by (intro expr_subst_randomfree[symmetric]) auto\n  finally show ?thesis .\nqed *)"], ["", "end"]]}