{"file_name": "/home/qj213/afp-2021-10-22/thys/Density_Compiler/PDF_Density_Contexts.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Density_Compiler", "problem_names": ["lemma measurable_proj_state_measure[measurable (raw)]:\n    \"i \\<in> V \\<Longrightarrow> (\\<lambda>x. x i) \\<in> measurable (state_measure V \\<Gamma>) (\\<Gamma> i)\"", "lemma measurable_dens_ctxt_fun_upd[measurable (raw)]:\n  \"f \\<in> N \\<rightarrow>\\<^sub>M state_measure V' \\<Gamma> \\<Longrightarrow> V = V' \\<union> {x} \\<Longrightarrow>\n    g \\<in> N \\<rightarrow>\\<^sub>M stock_measure (\\<Gamma> x) \\<Longrightarrow>\n    (\\<lambda>\\<omega>. (f \\<omega>)(x := g \\<omega>)) \\<in> N \\<rightarrow>\\<^sub>M state_measure V \\<Gamma>\"", "lemma measurable_case_nat_Suc_PiM:\n  \"(\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) \\<in> measurable (PiM (Suc ` A) (case_nat M N)) (PiM A N)\"", "lemma measurable_case_nat_Suc:\n  \"(\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) \\<in> measurable (state_measure (Suc ` A) (case_nat t \\<Gamma>)) (state_measure A \\<Gamma>)\"", "lemma dens_ctxt_measure_nonempty[simp]:\n    \"space (dens_ctxt_measure \\<Y> \\<rho>) \\<noteq> {}\"", "lemma sets_dens_ctxt_measure_eq[measurable_cong]:\n    \"sets (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) = sets (state_measure (V\\<union>V') \\<Gamma>)\"", "lemma measurable_dens_ctxt_measure_eq:\n    \"measurable (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) = measurable (state_measure (V\\<union>V') \\<Gamma>)\"", "lemma space_dens_ctxt_measure:\n    \"space (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) = space (state_measure (V\\<union>V') \\<Gamma>)\"", "lemma measurable_remove_var[measurable]:\n  \"remove_var \\<in> measurable (state_measure (shift_var_set V) (case_nat t \\<Gamma>)) (state_measure V \\<Gamma>)\"", "lemma measurable_case_nat_undefined[measurable]:\n  \"case_nat undefined \\<in> measurable (state_measure A \\<Gamma>) (state_measure (Suc`A) (case_nat t \\<Gamma>))\" (is \"_ \\<in> ?M\")", "lemma measurable_if_dens:\n  assumes [measurable]: \"\\<delta> \\<in> borel_measurable M\"\n  assumes [measurable]: \"case_prod f \\<in> borel_measurable (M \\<Otimes>\\<^sub>M count_space (range BoolVal))\"\n  shows \"if_dens \\<delta> f b \\<in> borel_measurable M\"", "lemma measurable_if_dens_det:\n  assumes e: \"\\<Gamma> \\<turnstile> e : BOOL\" \"randomfree e\" \"free_vars e \\<subseteq> V\"\n  assumes [measurable]: \"\\<delta> \\<in> borel_measurable (state_measure V \\<Gamma>)\"\n  shows \"if_dens_det \\<delta> e b \\<in> borel_measurable (state_measure V \\<Gamma>)\"", "lemma branch_prob_altdef:\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  shows \"branch_prob \\<Y> \\<rho> = \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\"", "lemma measurable_branch_prob[measurable]:\n  \"branch_prob \\<Y> \\<in> borel_measurable (state_measure V' \\<Gamma>)\"", "lemma measurable_marg_dens':\n  assumes [simp]: \"x \\<in> V\"\n  shows \"case_prod (marg_dens \\<Y> x) \\<in> borel_measurable (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> x))\"", "lemma insert_Diff: \"insert x (A - B) = insert x A - (B - {x})\"", "lemma measurable_marg_dens2':\n  assumes \"x \\<in> V\" \"y \\<in> V\"\n  shows \"case_prod (marg_dens2 \\<Y> x y) \\<in>\n             borel_measurable (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\"", "lemma measurable_marg_dens:\n  assumes \"x \\<in> V\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  shows \"marg_dens \\<Y> x \\<rho> \\<in> borel_measurable (stock_measure (\\<Gamma> x))\"", "lemma measurable_marg_dens2:\n  assumes \"x \\<in> V\" \"y \\<in> V\" \"x \\<noteq> y\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  shows \"marg_dens2 \\<Y> x y \\<rho> \\<in> borel_measurable (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\"", "lemma measurable_state_measure_component:\n    \"x \\<in> V \\<Longrightarrow> (\\<lambda>\\<sigma>. \\<sigma> x) \\<in> measurable (state_measure V \\<Gamma>) (stock_measure (\\<Gamma> x))\"", "lemma measurable_dens_ctxt_measure_component:\n    \"x \\<in> V \\<Longrightarrow> (\\<lambda>\\<sigma>. \\<sigma> x) \\<in> measurable (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) (stock_measure (\\<Gamma> x))\"", "lemma space_dens_ctxt_measure_dens_ctxt_measure':\n  assumes \"x \\<in> V\"\n  shows \"space (state_measure V \\<Gamma>) =\n             {\\<sigma>(x := y) |\\<sigma> y. \\<sigma> \\<in> space (state_measure (V-{x}) \\<Gamma>) \\<and> y \\<in> type_universe (\\<Gamma> x)}\"", "lemma state_measure_integral_split:\n  assumes \"x \\<in> A\" \"finite A\"\n  assumes \"f \\<in> borel_measurable (state_measure A \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+\\<sigma>. f \\<sigma> \\<partial>state_measure A \\<Gamma>) =\n             (\\<integral>\\<^sup>+y. \\<integral>\\<^sup>+\\<sigma>. f (\\<sigma>(x := y)) \\<partial>state_measure (A-{x}) \\<Gamma> \\<partial>stock_measure (\\<Gamma> x))\"", "lemma fun_upd_in_state_measure:\n  \"\\<lbrakk>\\<sigma> \\<in> space (state_measure A \\<Gamma>); y \\<in> space (stock_measure (\\<Gamma> x))\\<rbrakk>\n     \\<Longrightarrow> \\<sigma>(x := y) \\<in> space (state_measure (insert x A) \\<Gamma>)\"", "lemma marg_dens_integral:\n  fixes X :: \"val set\" assumes \"x \\<in> V\" and [measurable]: \"X \\<in> sets (stock_measure (\\<Gamma> x))\"\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  defines \"X' \\<equiv> (\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter> space (state_measure V \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+ y. marg_dens \\<Y> x \\<rho> y * indicator X y \\<partial>stock_measure (\\<Gamma> x)) =\n              (\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>,\\<rho>)) * indicator X' \\<sigma> \\<partial>state_measure V \\<Gamma>)\"", "lemma marg_dens2_integral:\n  fixes X :: \"val set\"\n  assumes \"x \\<in> V\" \"y \\<in> V\" \"x \\<noteq> y\" and [measurable]: \"X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\"\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  defines \"X' \\<equiv> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter> space (state_measure V \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+z. marg_dens2 \\<Y> x y \\<rho> z * indicator X z \\<partial>stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) =\n              (\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>,\\<rho>)) * indicator X' \\<sigma> \\<partial>state_measure V \\<Gamma>)\"", "lemma density_marg_dens_eq:\n  assumes \"x \\<in> V\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  shows \"density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>) =\n              distr (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) (stock_measure (\\<Gamma> x)) (\\<lambda>\\<sigma>. \\<sigma> x)\" (is \"?M1 = ?M2\")", "lemma density_marg_dens2_eq:\n  assumes \"x \\<in> V\" \"y \\<in> V\" \"x \\<noteq> y\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  defines \"M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\"\n  shows \"density M (marg_dens2 \\<Y> x y \\<rho>) =\n              distr (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) M (\\<lambda>\\<sigma>. <|\\<sigma> x,\\<sigma> y|>)\" (is \"?M1 = ?M2\")", "lemma measurable_insert_dens[measurable]:\n  assumes Mf[measurable]: \"case_prod f \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\"\n  shows \"insert_dens V V' f \\<delta>\n             \\<in> borel_measurable (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\"", "lemma nn_integral_dens_ctxt_measure:\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n          \"f \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+x. f x \\<partial>dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) =\n           \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\"", "lemma shift_var_set_Un[simp]: \"shift_var_set V \\<union> Suc ` V' = shift_var_set (V \\<union> V')\"", "lemma emeasure_dens_ctxt_measure_insert:\n  fixes t f \\<rho>\n  defines \"M \\<equiv> dens_ctxt_measure (shift_var_set V, Suc`V', case_nat t \\<Gamma>, insert_dens V V' f \\<delta>) \\<rho>\"\n  assumes dens: \"has_parametrized_subprob_density (state_measure (V\\<union>V') \\<Gamma>) F (stock_measure t) f\"\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure (Suc`V') (case_nat t \\<Gamma>))\"\n  assumes X: \"X \\<in> sets M\"\n  shows \"emeasure M X =\n           \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta> (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                 indicator X (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n             \\<partial>state_measure (shift_var_set V) (case_nat t \\<Gamma>)\" (is \"_ = ?I\")", "lemma merge_Suc_aux':\n  \"\\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>)) \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) \\<in> measurable (state_measure V \\<Gamma>) (state_measure (V \\<union> V') \\<Gamma>)\"", "lemma merge_Suc_aux:\n  \"\\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>)) \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))) \\<in> borel_measurable (state_measure V \\<Gamma>)\"", "lemma nn_integral_PiM_Suc:\n  assumes fin: \"\\<And>i. sigma_finite_measure (N i)\"\n  assumes Mf: \"f \\<in> borel_measurable (Pi\\<^sub>M V N)\"\n  shows \"(\\<integral>\\<^sup>+x. f x \\<partial>distr (Pi\\<^sub>M (Suc`V) (case_nat M N)) (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)) =\n             (\\<integral>\\<^sup>+x. f x \\<partial>Pi\\<^sub>M V N)\"\n         (is \"nn_integral (?M1 V) _ = _\")", "lemma PiM_Suc:\n  assumes \"\\<And>i. sigma_finite_measure (N i)\"\n  shows \"distr (Pi\\<^sub>M (Suc`V) (case_nat M N)) (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) = Pi\\<^sub>M V N\" (is \"?M1 = ?M2\")", "lemma distr_state_measure_Suc:\n  \"distr (state_measure (Suc ` V) (case_nat t \\<Gamma>)) (state_measure V \\<Gamma>) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n     state_measure V \\<Gamma>\" (is \"?M1 = ?M2\")", "lemma emeasure_dens_ctxt_measure_insert':\n  fixes t f \\<rho>\n  defines \"M \\<equiv> dens_ctxt_measure (shift_var_set V, Suc`V', case_nat t \\<Gamma>, insert_dens V V' f \\<delta>) \\<rho>\"\n  assumes dens: \"has_parametrized_subprob_density (state_measure (V\\<union>V') \\<Gamma>) F (stock_measure t) f\"\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure (Suc`V') (case_nat t \\<Gamma>))\"\n  assumes X: \"X \\<in> sets M\"\n  shows \"emeasure M X = \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) * \\<integral>\\<^sup>+y. f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n                       indicator X (merge (shift_var_set V) (Suc`V') (case_nat y \\<sigma>, \\<rho>))\n                  \\<partial>stock_measure t \\<partial>state_measure V \\<Gamma>\" (is \"_ = ?I\")", "lemma density_context_insert:\n  assumes dens: \"has_parametrized_subprob_density (state_measure (V\\<union>V') \\<Gamma>) F (stock_measure t) f\"\n  shows \"density_context (shift_var_set V) (Suc ` V') (case_nat t \\<Gamma>) (insert_dens V V' f \\<delta>)\"\n             (is \"density_context ?V ?V' ?\\<Gamma>' ?\\<delta>'\")", "lemma dens_ctxt_measure_insert:\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  assumes meas_M: \"M \\<in> measurable (state_measure (V\\<union>V') \\<Gamma>) (subprob_algebra (stock_measure t))\"\n  assumes meas_f[measurable]: \"case_prod f \\<in> borel_measurable (state_measure (V\\<union>V') \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\"\n  assumes has_dens: \"\\<And>\\<rho>. \\<rho> \\<in> space (state_measure (V\\<union>V') \\<Gamma>) \\<Longrightarrow>\n                         has_subprob_density (M \\<rho>) (stock_measure t) (f \\<rho>)\"\n  shows \"do {\\<sigma> \\<leftarrow> dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>;\n             y \\<leftarrow> M \\<sigma>;\n             return (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)) (case_nat y \\<sigma>)} =\n         dens_ctxt_measure (shift_var_set V, Suc`V', case_nat t \\<Gamma>, insert_dens V V' f \\<delta>)\n                           (case_nat undefined \\<rho>)\"\n         (is \"bind ?N (\\<lambda>_. bind _ (\\<lambda>_. return ?R _)) = dens_ctxt_measure (?V,?V',?\\<Gamma>',?\\<delta>') _\")", "lemma density_context_if_dens:\n  assumes \"has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>) M\n               (count_space (range BoolVal)) f\"\n  shows \"density_context V V' \\<Gamma> (if_dens \\<delta> f b)\"", "lemma density_context_if_dens_det:\n  assumes e: \"\\<Gamma> \\<turnstile> e : BOOL\" \"randomfree e\" \"free_vars e \\<subseteq> V \\<union> V'\"\n  shows \"density_context V V' \\<Gamma> (if_dens_det \\<delta> e b)\"", "lemma density_context_empty[simp]: \"density_context {} (V\\<union>V') \\<Gamma> (\\<lambda>_. 1)\"", "lemma dens_ctxt_measure_bind_const:\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\" \"subprob_space N\"\n  shows \"dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N) = density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)\" (is \"?M1 = ?M2\")", "lemma nn_integral_dens_ctxt_measure_restrict:\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\" \"f \\<rho> \\<ge> 0\"\n  assumes \"f \\<in> borel_measurable (state_measure V' \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+x. f (restrict x V') \\<partial>dens_ctxt_measure \\<Y> \\<rho>) = branch_prob \\<Y> \\<rho> * f \\<rho>\"", "lemma expr_sem_op_eq_distr:\n  assumes \"\\<Gamma> \\<turnstile> oper $$ e : t'\" \"free_vars e \\<subseteq> V \\<union> V'\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  defines \"M \\<equiv> dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>\"\n  shows \"M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n             distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) (stock_measure t') (op_sem oper)\"", "lemma density_context_equiv:\n  assumes \"\\<And>\\<sigma>. \\<sigma> \\<in> space (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow> \\<delta> \\<sigma> = \\<delta>' \\<sigma>\"\n  assumes [simp, measurable]: \"\\<delta>' \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\"\n  assumes \"density_context V V' \\<Gamma> \\<delta>\"\n  shows \"density_context V V' \\<Gamma> \\<delta>'\""], "translations": [["", "lemma measurable_proj_state_measure[measurable (raw)]:\n    \"i \\<in> V \\<Longrightarrow> (\\<lambda>x. x i) \\<in> measurable (state_measure V \\<Gamma>) (\\<Gamma> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> V \\<Longrightarrow>\n    (\\<lambda>x. x i)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure (\\<Gamma> i)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> V \\<Longrightarrow>\n    (\\<lambda>x. x i)\n    \\<in> Pi\\<^sub>M V\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          stock_measure (\\<Gamma> i)", "by measurable"], ["", "lemma measurable_dens_ctxt_fun_upd[measurable (raw)]:\n  \"f \\<in> N \\<rightarrow>\\<^sub>M state_measure V' \\<Gamma> \\<Longrightarrow> V = V' \\<union> {x} \\<Longrightarrow>\n    g \\<in> N \\<rightarrow>\\<^sub>M stock_measure (\\<Gamma> x) \\<Longrightarrow>\n    (\\<lambda>\\<omega>. (f \\<omega>)(x := g \\<omega>)) \\<in> N \\<rightarrow>\\<^sub>M state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> N \\<rightarrow>\\<^sub>M state_measure V' \\<Gamma>;\n     V = V' \\<union> {x};\n     g \\<in> N \\<rightarrow>\\<^sub>M stock_measure (\\<Gamma> x)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<omega>. (f \\<omega>)(x := g \\<omega>))\n                      \\<in> N \\<rightarrow>\\<^sub>M state_measure V \\<Gamma>", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> N \\<rightarrow>\\<^sub>M\n                     Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x));\n     V = V' \\<union> {x};\n     g \\<in> N \\<rightarrow>\\<^sub>M stock_measure (\\<Gamma> x)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<omega>. (f \\<omega>)(x := g \\<omega>))\n                      \\<in> N \\<rightarrow>\\<^sub>M\n                            Pi\\<^sub>M V\n                             (\\<lambda>x. stock_measure (\\<Gamma> x))", "by (rule measurable_fun_upd[where J=V']) auto"], ["", "lemma measurable_case_nat_Suc_PiM:\n  \"(\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) \\<in> measurable (PiM (Suc ` A) (case_nat M N)) (PiM A N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M A N", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M A N", "have \"(\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x)) \\<in> measurable\n      (PiM (Suc ` A) (case_nat M N)) (PiM A (\\<lambda>x. case_nat M N (Suc x)))\" (is \"?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n    \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M A\n           (\\<lambda>x.\n               case Suc x of 0 \\<Rightarrow> M | Suc x \\<Rightarrow> N x)", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n  \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M A\n         (\\<lambda>x.\n             case Suc x of 0 \\<Rightarrow> M | Suc x \\<Rightarrow> N x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M A N", "also"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n  \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M A\n         (\\<lambda>x.\n             case Suc x of 0 \\<Rightarrow> M | Suc x \\<Rightarrow> N x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M A N", "have \"?A \\<longleftrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n     \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M A\n            (\\<lambda>x.\n                case Suc x of 0 \\<Rightarrow> M\n                | Suc x \\<Rightarrow> N x)) =\n    ((\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n     \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M A N)", "by (force intro!: measurable_cong ext simp: state_measure_def space_PiM dest: PiE_mem)"], ["proof (state)\nthis:\n  ((\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n   \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n         Pi\\<^sub>M A\n          (\\<lambda>x.\n              case Suc x of 0 \\<Rightarrow> M | Suc x \\<Rightarrow> N x)) =\n  ((\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n   \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n         Pi\\<^sub>M A N)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M A N", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n  \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M A N", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n  \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M A N\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M A N", "."], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n  \\<in> Pi\\<^sub>M (Suc ` A) (case_nat M N) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M A N\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_case_nat_Suc:\n  \"(\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) \\<in> measurable (state_measure (Suc ` A) (case_nat t \\<Gamma>)) (state_measure A \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> state_measure (Suc ` A)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure A \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> state_measure (Suc ` A)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure A \\<Gamma>", "have \"(\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x)) \\<in> measurable\n      (state_measure (Suc ` A) (case_nat t \\<Gamma>)) (state_measure A (\\<lambda>i. case_nat t \\<Gamma> (Suc i)))\" (is \"?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n    \\<in> state_measure (Suc ` A)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure A\n           (\\<lambda>i.\n               case Suc i of 0 \\<Rightarrow> t\n               | Suc x \\<Rightarrow> \\<Gamma> x)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n    \\<in> Pi\\<^sub>M (Suc ` A)\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M A\n           (\\<lambda>x.\n               stock_measure\n                (case Suc x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x))", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n  \\<in> state_measure (Suc ` A) (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure A\n         (\\<lambda>i.\n             case Suc i of 0 \\<Rightarrow> t\n             | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> state_measure (Suc ` A)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure A \\<Gamma>", "also"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n  \\<in> state_measure (Suc ` A) (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure A\n         (\\<lambda>i.\n             case Suc i of 0 \\<Rightarrow> t\n             | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> state_measure (Suc ` A)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure A \\<Gamma>", "have \"?A \\<longleftrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n     \\<in> state_measure (Suc ` A)\n            (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n           state_measure A\n            (\\<lambda>i.\n                case Suc i of 0 \\<Rightarrow> t\n                | Suc x \\<Rightarrow> \\<Gamma> x)) =\n    ((\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n     \\<in> state_measure (Suc ` A)\n            (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n           state_measure A \\<Gamma>)", "by (force intro!: measurable_cong ext simp: state_measure_def space_PiM dest: PiE_mem)"], ["proof (state)\nthis:\n  ((\\<lambda>\\<sigma>. \\<lambda>x\\<in>A. \\<sigma> (Suc x))\n   \\<in> state_measure (Suc ` A) (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n         state_measure A\n          (\\<lambda>i.\n              case Suc i of 0 \\<Rightarrow> t\n              | Suc x \\<Rightarrow> \\<Gamma> x)) =\n  ((\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n   \\<in> state_measure (Suc ` A) (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n         state_measure A \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> state_measure (Suc ` A)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure A \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n  \\<in> state_measure (Suc ` A) (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure A \\<Gamma>", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n  \\<in> state_measure (Suc ` A) (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure A \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n    \\<in> state_measure (Suc ` A)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure A \\<Gamma>", "."], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n  \\<in> state_measure (Suc ` A) (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure A \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>A density context holds a set of variables @{term V}, their types (using @{term \\<Gamma>}), and a\ncommon density function @{term \\<delta>} of the finite product space of all the variables in @{term V}.\n@{term \\<delta>} takes a state @{term \"\\<sigma> \\<in> (\\<Pi>\\<^sub>E x\\<in>V. type_universe (\\<Gamma> x))\"} and returns the common density\nof these variables.\\<close>"], ["", "type_synonym dens_ctxt = \"vname set \\<times> vname set \\<times> (vname \\<Rightarrow> pdf_type) \\<times> (state \\<Rightarrow> ennreal)\""], ["", "type_synonym expr_density = \"state \\<Rightarrow> val \\<Rightarrow> ennreal\""], ["", "definition empty_dens_ctxt :: dens_ctxt where\n  \"empty_dens_ctxt = ({}, {}, \\<lambda>_. undefined, \\<lambda>_. 1)\""], ["", "definition state_measure'\n    :: \"vname set \\<Rightarrow> vname set \\<Rightarrow> (vname \\<Rightarrow> pdf_type) \\<Rightarrow> state \\<Rightarrow> state measure\" where\n  \"state_measure' V V' \\<Gamma> \\<rho> =\n       distr (state_measure V \\<Gamma>) (state_measure (V\\<union>V') \\<Gamma>) (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\""], ["", "text \\<open>The marginal density of a variable @{term x} is obtained by integrating the common density\n@{term \\<delta>} over all the remaining variables.\\<close>"], ["", "definition marg_dens :: \"dens_ctxt \\<Rightarrow> vname \\<Rightarrow> expr_density\" where\n  \"marg_dens = (\\<lambda>(V,V',\\<Gamma>,\\<delta>) x \\<rho> v. \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>(x := v), \\<rho>)) \\<partial>state_measure (V-{x}) \\<Gamma>)\""], ["", "definition marg_dens2 :: \"dens_ctxt \\<Rightarrow> vname \\<Rightarrow> vname \\<Rightarrow> expr_density\" where\n  \"marg_dens2 \\<equiv> (\\<lambda>(V,V',\\<Gamma>,\\<delta>) x y \\<rho> v.\n       \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>(x := fst (extract_pair v), y := snd (extract_pair v)), \\<rho>))\n           \\<partial>state_measure (V-{x,y}) \\<Gamma>)\""], ["", "definition dens_ctxt_measure :: \"dens_ctxt \\<Rightarrow> state \\<Rightarrow> state measure\" where\n  \"dens_ctxt_measure \\<equiv> \\<lambda>(V,V',\\<Gamma>,\\<delta>) \\<rho>. density (state_measure' V V' \\<Gamma> \\<rho>) \\<delta>\""], ["", "definition branch_prob :: \"dens_ctxt \\<Rightarrow> state \\<Rightarrow> ennreal\" where\n  \"branch_prob \\<Y> \\<rho> = emeasure (dens_ctxt_measure \\<Y> \\<rho>) (space (dens_ctxt_measure \\<Y> \\<rho>))\""], ["", "lemma dens_ctxt_measure_nonempty[simp]:\n    \"space (dens_ctxt_measure \\<Y> \\<rho>) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (dens_ctxt_measure \\<Y> \\<rho>) \\<noteq> {}", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. space\n     ((case \\<Y> of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "by (cases \\<Y>) simp"], ["", "lemma sets_dens_ctxt_measure_eq[measurable_cong]:\n    \"sets (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) = sets (state_measure (V\\<union>V') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>) \\<rho>) =\n    sets (state_measure (V \\<union> V') \\<Gamma>)", "by (simp_all add: dens_ctxt_measure_def state_measure'_def)"], ["", "lemma measurable_dens_ctxt_measure_eq:\n    \"measurable (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) = measurable (state_measure (V\\<union>V') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<rightarrow>\\<^sub>M)\n     (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>) \\<rho>) =\n    (\\<rightarrow>\\<^sub>M) (state_measure (V \\<union> V') \\<Gamma>)", "by (intro ext measurable_cong_sets)\n     (simp_all add: dens_ctxt_measure_def state_measure'_def)"], ["", "lemma space_dens_ctxt_measure:\n    \"space (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) = space (state_measure (V\\<union>V') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>) \\<rho>) =\n    space (state_measure (V \\<union> V') \\<Gamma>)", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. space\n     ((case (V, V', \\<Gamma>, \\<delta>) of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>) =\n    space (state_measure (V \\<union> V') \\<Gamma>)", "by simp"], ["", "definition apply_dist_to_dens :: \"pdf_dist \\<Rightarrow> (state \\<Rightarrow> val \\<Rightarrow> ennreal) \\<Rightarrow> (state \\<Rightarrow> val \\<Rightarrow> ennreal)\" where\n  \"apply_dist_to_dens dst f = (\\<lambda>\\<rho> y. \\<integral>\\<^sup>+x. f \\<rho> x * dist_dens dst x y \\<partial>stock_measure (dist_param_type dst))\""], ["", "definition remove_var :: \"state \\<Rightarrow> state\" where\n  \"remove_var \\<sigma> = (\\<lambda>x. \\<sigma> (Suc x))\""], ["", "lemma measurable_remove_var[measurable]:\n  \"remove_var \\<in> measurable (state_measure (shift_var_set V) (case_nat t \\<Gamma>)) (state_measure V \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_var\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure V \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. remove_var\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure V \\<Gamma>", "have \"(\\<lambda>\\<sigma>. \\<lambda>x\\<in>V. \\<sigma> (Suc x)) \\<in> measurable\n      (state_measure (shift_var_set V) (case_nat t \\<Gamma>)) (state_measure V (\\<lambda>x. case_nat t \\<Gamma> (Suc x)))\"\n    (is \"?f \\<in> ?M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<lambda>x\\<in>V. \\<sigma> (Suc x))\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure V\n           (\\<lambda>x.\n               case Suc x of 0 \\<Rightarrow> t\n               | Suc x \\<Rightarrow> \\<Gamma> x)", "unfolding state_measure_def shift_var_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<lambda>x\\<in>V. \\<sigma> (Suc x))\n    \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M V\n           (\\<lambda>x.\n               stock_measure\n                (case Suc x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x))", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<lambda>x\\<in>V. \\<sigma> (Suc x))\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure V\n         (\\<lambda>x.\n             case Suc x of 0 \\<Rightarrow> t\n             | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (1 subgoal):\n 1. remove_var\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<lambda>x\\<in>V. \\<sigma> (Suc x))\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure V\n         (\\<lambda>x.\n             case Suc x of 0 \\<Rightarrow> t\n             | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (1 subgoal):\n 1. remove_var\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure V \\<Gamma>", "have \"\\<And>x f. x \\<notin> V \\<Longrightarrow> f \\<in> space (state_measure (shift_var_set V) (case_nat t \\<Gamma>)) \\<Longrightarrow>\n                       f (Suc x) = undefined\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>x \\<notin> V;\n        f \\<in> space\n                 (state_measure (shift_var_set V)\n                   (case_nat t \\<Gamma>))\\<rbrakk>\n       \\<Longrightarrow> f (Suc x) = undefined", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>x \\<notin> V;\n        f \\<in> space\n                 (Pi\\<^sub>M (shift_var_set V)\n                   (\\<lambda>x.\n                       stock_measure\n                        (case x of 0 \\<Rightarrow> t\n                         | Suc x \\<Rightarrow> \\<Gamma> x)))\\<rbrakk>\n       \\<Longrightarrow> f (Suc x) = undefined", "by (subst (asm) space_PiM, drule PiE_arb[of _ _ _ \"Suc x\" for x])\n       (simp_all add: space_PiM shift_var_set_def inj_image_mem_iff)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<notin> V;\n   ?f \\<in> space\n             (state_measure (shift_var_set V)\n               (case_nat t \\<Gamma>))\\<rbrakk>\n  \\<Longrightarrow> ?f (Suc ?x) = undefined\n\ngoal (1 subgoal):\n 1. remove_var\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure V \\<Gamma>", "hence \"?f \\<in> ?M \\<longleftrightarrow> remove_var \\<in> ?M\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<notin> V;\n   ?f \\<in> space\n             (state_measure (shift_var_set V)\n               (case_nat t \\<Gamma>))\\<rbrakk>\n  \\<Longrightarrow> ?f (Suc ?x) = undefined\n\ngoal (1 subgoal):\n 1. ((\\<lambda>\\<sigma>. \\<lambda>x\\<in>V. \\<sigma> (Suc x))\n     \\<in> state_measure (shift_var_set V)\n            (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n           state_measure V\n            (\\<lambda>x.\n                case Suc x of 0 \\<Rightarrow> t\n                | Suc x \\<Rightarrow> \\<Gamma> x)) =\n    (remove_var\n     \\<in> state_measure (shift_var_set V)\n            (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n           state_measure V\n            (\\<lambda>x.\n                case Suc x of 0 \\<Rightarrow> t\n                | Suc x \\<Rightarrow> \\<Gamma> x))", "unfolding remove_var_def[abs_def] state_measure_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<notin> V;\n   ?f \\<in> space\n             (Pi\\<^sub>M (shift_var_set V)\n               (\\<lambda>x.\n                   stock_measure\n                    (case x of 0 \\<Rightarrow> t\n                     | Suc x \\<Rightarrow> \\<Gamma> x)))\\<rbrakk>\n  \\<Longrightarrow> ?f (Suc ?x) = undefined\n\ngoal (1 subgoal):\n 1. ((\\<lambda>\\<sigma>. \\<lambda>x\\<in>V. \\<sigma> (Suc x))\n     \\<in> Pi\\<^sub>M (shift_var_set V)\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M V\n            (\\<lambda>x.\n                stock_measure\n                 (case Suc x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))) =\n    ((\\<lambda>\\<sigma> x. \\<sigma> (Suc x))\n     \\<in> Pi\\<^sub>M (shift_var_set V)\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M V\n            (\\<lambda>x.\n                stock_measure\n                 (case Suc x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)))", "by (intro measurable_cong ext) (auto simp: space_PiM intro!: sym[of _ undefined])"], ["proof (state)\nthis:\n  ((\\<lambda>\\<sigma>. \\<lambda>x\\<in>V. \\<sigma> (Suc x))\n   \\<in> state_measure (shift_var_set V)\n          (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n         state_measure V\n          (\\<lambda>x.\n              case Suc x of 0 \\<Rightarrow> t\n              | Suc x \\<Rightarrow> \\<Gamma> x)) =\n  (remove_var\n   \\<in> state_measure (shift_var_set V)\n          (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n         state_measure V\n          (\\<lambda>x.\n              case Suc x of 0 \\<Rightarrow> t\n              | Suc x \\<Rightarrow> \\<Gamma> x))\n\ngoal (1 subgoal):\n 1. remove_var\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure V \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  remove_var\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure V\n         (\\<lambda>x.\n             case Suc x of 0 \\<Rightarrow> t\n             | Suc x \\<Rightarrow> \\<Gamma> x)", "show ?thesis"], ["proof (prove)\nusing this:\n  remove_var\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure V\n         (\\<lambda>x.\n             case Suc x of 0 \\<Rightarrow> t\n             | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (1 subgoal):\n 1. remove_var\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure V \\<Gamma>", "by simp"], ["proof (state)\nthis:\n  remove_var\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure V \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_case_nat_undefined[measurable]:\n  \"case_nat undefined \\<in> measurable (state_measure A \\<Gamma>) (state_measure (Suc`A) (case_nat t \\<Gamma>))\" (is \"_ \\<in> ?M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat undefined\n    \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (Suc ` A) (case_nat t \\<Gamma>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. case_nat undefined\n    \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (Suc ` A) (case_nat t \\<Gamma>)", "have \"(\\<lambda>\\<sigma>. \\<lambda>x\\<in>Suc`A. case_nat undefined \\<sigma> x) \\<in> ?M\" (is \"?f \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        \\<lambda>x\\<in>Suc ` A. case x of Suc x \\<Rightarrow> \\<sigma> x)\n    \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (Suc ` A) (case_nat t \\<Gamma>)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        \\<lambda>x\\<in>Suc ` A. case x of Suc x \\<Rightarrow> \\<sigma> x)\n    \\<in> Pi\\<^sub>M A\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (Suc ` A)\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x))", "by (rule measurable_restrict) auto"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>.\n      \\<lambda>x\\<in>Suc ` A. case x of Suc x \\<Rightarrow> \\<sigma> x)\n  \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (Suc ` A) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. case_nat undefined\n    \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (Suc ` A) (case_nat t \\<Gamma>)", "also"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>.\n      \\<lambda>x\\<in>Suc ` A. case x of Suc x \\<Rightarrow> \\<sigma> x)\n  \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (Suc ` A) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. case_nat undefined\n    \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (Suc ` A) (case_nat t \\<Gamma>)", "have \"?f \\<in> ?M \\<longleftrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>\\<sigma>.\n         \\<lambda>x\\<in>Suc ` A. case x of Suc x \\<Rightarrow> \\<sigma> x)\n     \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n           state_measure (Suc ` A) (case_nat t \\<Gamma>)) =\n    (case_nat undefined\n     \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n           state_measure (Suc ` A) (case_nat t \\<Gamma>))", "by (intro measurable_cong ext)\n       (auto simp: state_measure_def space_PiM dest: PiE_mem split: nat.split)"], ["proof (state)\nthis:\n  ((\\<lambda>\\<sigma>.\n       \\<lambda>x\\<in>Suc ` A. case x of Suc x \\<Rightarrow> \\<sigma> x)\n   \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n         state_measure (Suc ` A) (case_nat t \\<Gamma>)) =\n  (case_nat undefined\n   \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n         state_measure (Suc ` A) (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. case_nat undefined\n    \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (Suc ` A) (case_nat t \\<Gamma>)", "finally"], ["proof (chain)\npicking this:\n  case_nat undefined\n  \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (Suc ` A) (case_nat t \\<Gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  case_nat undefined\n  \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (Suc ` A) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. case_nat undefined\n    \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (Suc ` A) (case_nat t \\<Gamma>)", "."], ["proof (state)\nthis:\n  case_nat undefined\n  \\<in> state_measure A \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (Suc ` A) (case_nat t \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition insert_dens\n     :: \"vname set \\<Rightarrow> vname set \\<Rightarrow> expr_density \\<Rightarrow> (state \\<Rightarrow> ennreal) \\<Rightarrow> state \\<Rightarrow> ennreal\" where\n  \"insert_dens V V' f \\<delta> \\<equiv> \\<lambda>\\<sigma>. \\<delta> (remove_var \\<sigma>) * f (remove_var \\<sigma>) (\\<sigma> 0)\""], ["", "definition if_dens :: \"(state \\<Rightarrow> ennreal) \\<Rightarrow> (state \\<Rightarrow> val \\<Rightarrow> ennreal) \\<Rightarrow> bool \\<Rightarrow> (state \\<Rightarrow> ennreal)\" where\n  \"if_dens \\<delta> f b \\<equiv> \\<lambda>\\<sigma>. \\<delta> \\<sigma> * f \\<sigma> (BoolVal b)\""], ["", "definition if_dens_det :: \"(state \\<Rightarrow> ennreal) \\<Rightarrow> expr \\<Rightarrow> bool \\<Rightarrow> (state \\<Rightarrow> ennreal)\" where\n  \"if_dens_det \\<delta> e b \\<equiv> \\<lambda>\\<sigma>. \\<delta> \\<sigma> * (if expr_sem_rf \\<sigma> e = BoolVal b then 1 else 0)\""], ["", "lemma measurable_if_dens:\n  assumes [measurable]: \"\\<delta> \\<in> borel_measurable M\"\n  assumes [measurable]: \"case_prod f \\<in> borel_measurable (M \\<Otimes>\\<^sub>M count_space (range BoolVal))\"\n  shows \"if_dens \\<delta> f b \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if_dens \\<delta> f b \\<in> borel_measurable M", "unfolding if_dens_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<delta> \\<sigma> * f \\<sigma> (BoolVal b))\n    \\<in> borel_measurable M", "by measurable"], ["", "lemma measurable_if_dens_det:\n  assumes e: \"\\<Gamma> \\<turnstile> e : BOOL\" \"randomfree e\" \"free_vars e \\<subseteq> V\"\n  assumes [measurable]: \"\\<delta> \\<in> borel_measurable (state_measure V \\<Gamma>)\"\n  shows \"if_dens_det \\<delta> e b \\<in> borel_measurable (state_measure V \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if_dens_det \\<delta> e b\n    \\<in> borel_measurable (state_measure V \\<Gamma>)", "unfolding if_dens_det_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        \\<delta> \\<sigma> *\n        (if expr_sem_rf \\<sigma> e = BoolVal b then 1 else 0))\n    \\<in> borel_measurable (state_measure V \\<Gamma>)", "proof (intro borel_measurable_times_ennreal assms measurable_If)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>x. 1) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 2. (\\<lambda>x. 0) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 3. {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n    \\<in> sets (state_measure V \\<Gamma>)", "have \"{x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b} =\n            (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e) -` {BoolVal b} \\<inter> space (state_measure V \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> space (state_measure V \\<Gamma>).\n     expr_sem_rf x e = BoolVal b} =\n    (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e) -` {BoolVal b} \\<inter>\n    space (state_measure V \\<Gamma>)", "by auto"], ["proof (state)\nthis:\n  {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b} =\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e) -` {BoolVal b} \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (3 subgoals):\n 1. (\\<lambda>x. 1) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 2. (\\<lambda>x. 0) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 3. {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n    \\<in> sets (state_measure V \\<Gamma>)", "also"], ["proof (state)\nthis:\n  {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b} =\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e) -` {BoolVal b} \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (3 subgoals):\n 1. (\\<lambda>x. 1) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 2. (\\<lambda>x. 0) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 3. {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n    \\<in> sets (state_measure V \\<Gamma>)", "have \"... \\<in> sets (state_measure V \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e) -` {BoolVal b} \\<inter>\n    space (state_measure V \\<Gamma>)\n    \\<in> sets (state_measure V \\<Gamma>)", "by (rule measurable_sets, rule measurable_expr_sem_rf[OF e]) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem_rf \\<sigma> e) -` {BoolVal b} \\<inter>\n  space (state_measure V \\<Gamma>)\n  \\<in> sets (state_measure V \\<Gamma>)\n\ngoal (3 subgoals):\n 1. (\\<lambda>x. 1) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 2. (\\<lambda>x. 0) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 3. {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n    \\<in> sets (state_measure V \\<Gamma>)", "finally"], ["proof (chain)\npicking this:\n  {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n  \\<in> sets (state_measure V \\<Gamma>)", "show \"{x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n                    \\<in> sets (state_measure V \\<Gamma>)\""], ["proof (prove)\nusing this:\n  {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n  \\<in> sets (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n    \\<in> sets (state_measure V \\<Gamma>)", "."], ["proof (state)\nthis:\n  {x \\<in> space (state_measure V \\<Gamma>). expr_sem_rf x e = BoolVal b}\n  \\<in> sets (state_measure V \\<Gamma>)\n\ngoal (2 subgoals):\n 1. (\\<lambda>x. 1) \\<in> borel_measurable (state_measure V \\<Gamma>)\n 2. (\\<lambda>x. 0) \\<in> borel_measurable (state_measure V \\<Gamma>)", "qed simp_all"], ["", "locale density_context =\n  fixes V V' \\<Gamma> \\<delta>\n  assumes subprob_space_dens:\n            \"\\<And>\\<rho>. \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow> subprob_space (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>)\"\n      and finite_vars[simp]:     \"finite V\" \"finite V'\"\n      and measurable_dens[measurable]:\n                                 \"\\<delta> \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\"\n      and disjoint:              \"V \\<inter> V' = {}\"\nbegin"], ["", "abbreviation \"\\<Y> \\<equiv> (V,V',\\<Gamma>,\\<delta>)\""], ["", "lemma branch_prob_altdef:\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  shows \"branch_prob \\<Y> \\<rho> = \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "have \"branch_prob \\<Y> \\<rho> =\n          \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * indicator (space (state_measure (V \\<union> V') \\<Gamma>))\n                  (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           indicator\n                            (space (state_measure (V \\<union> V') \\<Gamma>))\n                            (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "using \\<rho>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           indicator\n                            (space (state_measure (V \\<union> V') \\<Gamma>))\n                            (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "unfolding branch_prob_def[abs_def] dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     ((case \\<Y> of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     (space\n       ((case \\<Y> of\n         (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n           \\<lambda>\\<rho>.\n              density\n               (distr (state_measure V \\<Gamma>)\n                 (state_measure (V \\<union> V') \\<Gamma>)\n                 (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n               \\<delta>)\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           indicator\n                            (space (state_measure (V \\<union> V') \\<Gamma>))\n                            (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "by (simp add: emeasure_density ennreal_mult'' ennreal_indicator nn_integral_distr)"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         indicator\n                          (space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         indicator\n                          (space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... = \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           indicator\n                            (space (state_measure (V \\<union> V') \\<Gamma>))\n                            (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_cong) (simp split: split_indicator add: merge_in_state_measure)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         indicator\n                          (space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  branch_prob \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>", "show ?thesis"], ["proof (prove)\nusing this:\n  branch_prob \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "."], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_branch_prob[measurable]:\n  \"branch_prob \\<Y> \\<in> borel_measurable (state_measure V' \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<in> borel_measurable (state_measure V' \\<Gamma>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<in> borel_measurable (state_measure V' \\<Gamma>)", "interpret sigma_finite_measure \"state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure (state_measure V \\<Gamma>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<in> borel_measurable (state_measure V' \\<Gamma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<in> borel_measurable (state_measure V' \\<Gamma>)", "by (simp add: branch_prob_altdef cong: measurable_cong)"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<in> borel_measurable (state_measure V' \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_marg_dens':\n  assumes [simp]: \"x \\<in> V\"\n  shows \"case_prod (marg_dens \\<Y> x) \\<in> borel_measurable (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, y). marg_dens \\<Y> x xa y)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> x))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, y). marg_dens \\<Y> x xa y)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> x))", "interpret sigma_finite_measure \"state_measure (V - {x}) \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure (state_measure (V - {x}) \\<Gamma>)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure\n     (Pi\\<^sub>M (V - {x}) (\\<lambda>x. stock_measure (\\<Gamma> x)))", "by (rule product_sigma_finite.sigma_finite, simp_all add: product_sigma_finite_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, y). marg_dens \\<Y> x xa y)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> x))", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V", "have \"V = insert x (V - {x})\""], ["proof (prove)\nusing this:\n  x \\<in> V\n\ngoal (1 subgoal):\n 1. V = insert x (V - {x})", "by blast"], ["proof (state)\nthis:\n  V = insert x (V - {x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, y). marg_dens \\<Y> x xa y)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> x))", "hence A: \"PiM V = PiM ...\""], ["proof (prove)\nusing this:\n  V = insert x (V - {x})\n\ngoal (1 subgoal):\n 1. Pi\\<^sub>M V = Pi\\<^sub>M (insert x (V - {x}))", "by simp"], ["proof (state)\nthis:\n  Pi\\<^sub>M V = Pi\\<^sub>M (insert x (V - {x}))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, y). marg_dens \\<Y> x xa y)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> x))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, y). marg_dens \\<Y> x xa y)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> x))", "unfolding marg_dens_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, y).\n        (case \\<Y> of\n         (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n           \\<lambda>x \\<rho> v.\n              \\<integral>\\<^sup>+ \\<sigma>.\n                                   \\<delta>\n                                    (merge V V' (\\<sigma>(x := v), \\<rho>))\n                                 \\<partial>state_measure (V - {x}) \\<Gamma>)\n         x xa y)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (\\<Gamma> x))", "by (simp add: insert_absorb)"], ["proof (state)\nthis:\n  (\\<lambda>(xa, y). marg_dens \\<Y> x xa y)\n  \\<in> borel_measurable\n         (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure (\\<Gamma> x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insert_Diff: \"insert x (A - B) = insert x A - (B - {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert x (A - B) = insert x A - (B - {x})", "by auto"], ["", "lemma measurable_marg_dens2':\n  assumes \"x \\<in> V\" \"y \\<in> V\"\n  shows \"case_prod (marg_dens2 \\<Y> x y) \\<in>\n             borel_measurable (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, ya). marg_dens2 \\<Y> x y xa ya)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, ya). marg_dens2 \\<Y> x y xa ya)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "interpret sigma_finite_measure \"state_measure (V - {x, y}) \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure (state_measure (V - {x, y}) \\<Gamma>)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure\n     (Pi\\<^sub>M (V - {x, y}) (\\<lambda>x. stock_measure (\\<Gamma> x)))", "by (rule product_sigma_finite.sigma_finite, simp_all add: product_sigma_finite_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, ya). marg_dens2 \\<Y> x y xa ya)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "have [measurable]: \"V = insert x (V - {x, y}) \\<union> {y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V = insert x (V - {x, y}) \\<union> {y}", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n\ngoal (1 subgoal):\n 1. V = insert x (V - {x, y}) \\<union> {y}", "by blast"], ["proof (state)\nthis:\n  V = insert x (V - {x, y}) \\<union> {y}\n\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, ya). marg_dens2 \\<Y> x y xa ya)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, ya). marg_dens2 \\<Y> x y xa ya)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "unfolding marg_dens2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(xa, ya).\n        (case \\<Y> of\n         (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n           \\<lambda>x y \\<rho> v.\n              \\<integral>\\<^sup>+ \\<sigma>.\n                                   \\<delta>\n                                    (merge V V'\n(\\<sigma>(x := fst (extract_pair v), y := snd (extract_pair v)), \\<rho>))\n                                 \\<partial>state_measure (V - {x, y})\n      \\<Gamma>)\n         x y xa ya)\n    \\<in> borel_measurable\n           (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>(xa, ya). marg_dens2 \\<Y> x y xa ya)\n  \\<in> borel_measurable\n         (state_measure V' \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_marg_dens:\n  assumes \"x \\<in> V\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  shows \"marg_dens \\<Y> x \\<rho> \\<in> borel_measurable (stock_measure (\\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. marg_dens \\<Y> x \\<rho>\n    \\<in> borel_measurable (stock_measure (\\<Gamma> x))", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> V\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. marg_dens \\<Y> x \\<rho>\n    \\<in> borel_measurable (stock_measure (\\<Gamma> x))", "by (intro measurable_Pair_compose_split[OF measurable_marg_dens']) simp_all"], ["", "lemma measurable_marg_dens2:\n  assumes \"x \\<in> V\" \"y \\<in> V\" \"x \\<noteq> y\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  shows \"marg_dens2 \\<Y> x y \\<rho> \\<in> borel_measurable (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. marg_dens2 \\<Y> x y \\<rho>\n    \\<in> borel_measurable\n           (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. marg_dens2 \\<Y> x y \\<rho>\n    \\<in> borel_measurable\n           (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "by (intro measurable_Pair_compose_split[OF measurable_marg_dens2']) simp_all"], ["", "lemma measurable_state_measure_component:\n    \"x \\<in> V \\<Longrightarrow> (\\<lambda>\\<sigma>. \\<sigma> x) \\<in> measurable (state_measure V \\<Gamma>) (stock_measure (\\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. \\<sigma> x)\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure (\\<Gamma> x)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. \\<sigma> x)\n    \\<in> Pi\\<^sub>M V\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          stock_measure (\\<Gamma> x)", "by (auto intro!: measurable_component_singleton)"], ["", "lemma measurable_dens_ctxt_measure_component:\n    \"x \\<in> V \\<Longrightarrow> (\\<lambda>\\<sigma>. \\<sigma> x) \\<in> measurable (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) (stock_measure (\\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. \\<sigma> x)\n    \\<in> dens_ctxt_measure \\<Y> \\<rho> \\<rightarrow>\\<^sub>M\n          stock_measure (\\<Gamma> x)", "unfolding dens_ctxt_measure_def state_measure'_def state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. \\<sigma> x)\n    \\<in> (case \\<Y> of\n           (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n             \\<lambda>\\<rho>.\n                density\n                 (distr\n                   (Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                   (Pi\\<^sub>M (V \\<union> V')\n                     (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                   (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                 \\<delta>)\n           \\<rho> \\<rightarrow>\\<^sub>M\n          stock_measure (\\<Gamma> x)", "by (auto intro!: measurable_component_singleton)"], ["", "lemma space_dens_ctxt_measure_dens_ctxt_measure':\n  assumes \"x \\<in> V\"\n  shows \"space (state_measure V \\<Gamma>) =\n             {\\<sigma>(x := y) |\\<sigma> y. \\<sigma> \\<in> space (state_measure (V-{x}) \\<Gamma>) \\<and> y \\<in> type_universe (\\<Gamma> x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (state_measure V \\<Gamma>) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. space (state_measure V \\<Gamma>) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V", "have \"insert x (V-{x}) = V\""], ["proof (prove)\nusing this:\n  x \\<in> V\n\ngoal (1 subgoal):\n 1. insert x (V - {x}) = V", "by auto"], ["proof (state)\nthis:\n  insert x (V - {x}) = V\n\ngoal (1 subgoal):\n 1. space (state_measure V \\<Gamma>) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "hence \"state_measure V \\<Gamma> = Pi\\<^sub>M (insert x (V-{x})) (\\<lambda>y. stock_measure (\\<Gamma> y))\""], ["proof (prove)\nusing this:\n  insert x (V - {x}) = V\n\ngoal (1 subgoal):\n 1. state_measure V \\<Gamma> =\n    Pi\\<^sub>M (insert x (V - {x})) (\\<lambda>y. stock_measure (\\<Gamma> y))", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  insert x (V - {x}) = V\n\ngoal (1 subgoal):\n 1. Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x)) =\n    Pi\\<^sub>M (insert x (V - {x})) (\\<lambda>y. stock_measure (\\<Gamma> y))", "by simp"], ["proof (state)\nthis:\n  state_measure V \\<Gamma> =\n  Pi\\<^sub>M (insert x (V - {x})) (\\<lambda>y. stock_measure (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. space (state_measure V \\<Gamma>) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "also"], ["proof (state)\nthis:\n  state_measure V \\<Gamma> =\n  Pi\\<^sub>M (insert x (V - {x})) (\\<lambda>y. stock_measure (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. space (state_measure V \\<Gamma>) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "have \"space ... = {\\<sigma>(x := y) |\\<sigma> y. \\<sigma> \\<in> space (state_measure (V-{x}) \\<Gamma>) \\<and> y \\<in> type_universe (\\<Gamma> x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space\n     (Pi\\<^sub>M (insert x (V - {x}))\n       (\\<lambda>y. stock_measure (\\<Gamma> y))) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "unfolding state_measure_def space_PiM PiE_insert_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(y, g). g(x := y)) `\n    (space (stock_measure (\\<Gamma> x)) \\<times>\n     (\\<Pi>\\<^sub>E i\\<in>V - {x}. space (stock_measure (\\<Gamma> i)))) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma>\n     \\<in> (\\<Pi>\\<^sub>E i\\<in>V - {x}.\n               space (stock_measure (\\<Gamma> i))) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "by (simp add: image_def Bex_def) blast"], ["proof (state)\nthis:\n  space\n   (Pi\\<^sub>M (insert x (V - {x}))\n     (\\<lambda>y. stock_measure (\\<Gamma> y))) =\n  {\\<sigma>(x := y) |\\<sigma> y.\n   \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n   y \\<in> type_universe (\\<Gamma> x)}\n\ngoal (1 subgoal):\n 1. space (state_measure V \\<Gamma>) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "finally"], ["proof (chain)\npicking this:\n  space (state_measure V \\<Gamma>) =\n  {uu_.\n   \\<exists>\\<sigma> y.\n      uu_ = \\<sigma>(x := y) \\<and>\n      \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n      y \\<in> type_universe (\\<Gamma> x)}", "show ?thesis"], ["proof (prove)\nusing this:\n  space (state_measure V \\<Gamma>) =\n  {uu_.\n   \\<exists>\\<sigma> y.\n      uu_ = \\<sigma>(x := y) \\<and>\n      \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n      y \\<in> type_universe (\\<Gamma> x)}\n\ngoal (1 subgoal):\n 1. space (state_measure V \\<Gamma>) =\n    {\\<sigma>(x := y) |\\<sigma> y.\n     \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n     y \\<in> type_universe (\\<Gamma> x)}", "."], ["proof (state)\nthis:\n  space (state_measure V \\<Gamma>) =\n  {\\<sigma>(x := y) |\\<sigma> y.\n   \\<sigma> \\<in> space (state_measure (V - {x}) \\<Gamma>) \\<and>\n   y \\<in> type_universe (\\<Gamma> x)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma state_measure_integral_split:\n  assumes \"x \\<in> A\" \"finite A\"\n  assumes \"f \\<in> borel_measurable (state_measure A \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+\\<sigma>. f \\<sigma> \\<partial>state_measure A \\<Gamma>) =\n             (\\<integral>\\<^sup>+y. \\<integral>\\<^sup>+\\<sigma>. f (\\<sigma>(x := y)) \\<partial>state_measure (A-{x}) \\<Gamma> \\<partial>stock_measure (\\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "interpret product_sigma_finite \"\\<lambda>y. stock_measure (\\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. product_sigma_finite (\\<lambda>y. stock_measure (\\<Gamma> y))", "unfolding product_sigma_finite_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. sigma_finite_measure (stock_measure (\\<Gamma> i))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> A\n  finite A\n  f \\<in> borel_measurable (state_measure A \\<Gamma>)", "have [simp]: \"insert x A = A\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  finite A\n  f \\<in> borel_measurable (state_measure A \\<Gamma>)\n\ngoal (1 subgoal):\n 1. insert x A = A", "by auto"], ["proof (state)\nthis:\n  insert x A = A\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "have \"(\\<integral>\\<^sup>+\\<sigma>. f \\<sigma> \\<partial>state_measure A \\<Gamma>) = (\\<integral>\\<^sup>+\\<sigma>. f \\<sigma> \\<partial>\\<Pi>\\<^sub>M v\\<in>insert x (A-{x}). stock_measure (\\<Gamma> v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    integral\\<^sup>N\n     (Pi\\<^sub>M (insert x (A - {x}))\n       (\\<lambda>v. stock_measure (\\<Gamma> v)))\n     f", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (Pi\\<^sub>M A (\\<lambda>x. stock_measure (\\<Gamma> x)))\n     f =\n    integral\\<^sup>N\n     (Pi\\<^sub>M (insert x (A - {x}))\n       (\\<lambda>v. stock_measure (\\<Gamma> v)))\n     f", "by simp"], ["proof (state)\nthis:\n  integral\\<^sup>N (state_measure A \\<Gamma>) f =\n  integral\\<^sup>N\n   (Pi\\<^sub>M (insert x (A - {x}))\n     (\\<lambda>v. stock_measure (\\<Gamma> v)))\n   f\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (state_measure A \\<Gamma>) f =\n  integral\\<^sup>N\n   (Pi\\<^sub>M (insert x (A - {x}))\n     (\\<lambda>v. stock_measure (\\<Gamma> v)))\n   f\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "have \"... = \\<integral>\\<^sup>+y. \\<integral>\\<^sup>+\\<sigma>. f (\\<sigma>(x := y)) \\<partial>state_measure (A-{x}) \\<Gamma> \\<partial>stock_measure (\\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (Pi\\<^sub>M (insert x (A - {x}))\n       (\\<lambda>v. stock_measure (\\<Gamma> v)))\n     f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> A\n  finite A\n  f \\<in> borel_measurable (state_measure A \\<Gamma>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (Pi\\<^sub>M (insert x (A - {x}))\n       (\\<lambda>v. stock_measure (\\<Gamma> v)))\n     f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  x \\<in> A\n  finite A\n  f \\<in> borel_measurable\n           (Pi\\<^sub>M A (\\<lambda>x. stock_measure (\\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (Pi\\<^sub>M (insert x (A - {x}))\n       (\\<lambda>v. stock_measure (\\<Gamma> v)))\n     f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>Pi\\<^sub>M (A - {x})\n                   (\\<lambda>x. stock_measure (\\<Gamma> x))\n                       \\<partial>stock_measure (\\<Gamma> x)", "by (subst product_nn_integral_insert_rev) simp_all"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (Pi\\<^sub>M (insert x (A - {x}))\n     (\\<lambda>v. stock_measure (\\<Gamma> v)))\n   f =\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>. f (\\<sigma>(x := y))\n      \\<partial>state_measure (A - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (state_measure A \\<Gamma>) f =\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>. f (\\<sigma>(x := y))\n      \\<partial>state_measure (A - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x)", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (state_measure A \\<Gamma>) f =\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>. f (\\<sigma>(x := y))\n      \\<partial>state_measure (A - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (state_measure A \\<Gamma>) f =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          f (\\<sigma>(x := y))\n        \\<partial>state_measure (A - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "."], ["proof (state)\nthis:\n  integral\\<^sup>N (state_measure A \\<Gamma>) f =\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>. f (\\<sigma>(x := y))\n      \\<partial>state_measure (A - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fun_upd_in_state_measure:\n  \"\\<lbrakk>\\<sigma> \\<in> space (state_measure A \\<Gamma>); y \\<in> space (stock_measure (\\<Gamma> x))\\<rbrakk>\n     \\<Longrightarrow> \\<sigma>(x := y) \\<in> space (state_measure (insert x A) \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<in> space (state_measure A \\<Gamma>);\n     y \\<in> space (stock_measure (\\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>(x := y)\n                      \\<in> space (state_measure (insert x A) \\<Gamma>)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma>\n             \\<in> space\n                    (Pi\\<^sub>M A (\\<lambda>x. stock_measure (\\<Gamma> x)));\n     y \\<in> space (stock_measure (\\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>(x := y)\n                      \\<in> space\n                             (Pi\\<^sub>M (insert x A)\n                               (\\<lambda>x. stock_measure (\\<Gamma> x)))", "by (auto simp: space_PiM split: if_split_asm)"], ["", "lemma marg_dens_integral:\n  fixes X :: \"val set\" assumes \"x \\<in> V\" and [measurable]: \"X \\<in> sets (stock_measure (\\<Gamma> x))\"\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  defines \"X' \\<equiv> (\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter> space (state_measure V \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+ y. marg_dens \\<Y> x \\<rho> y * indicator X y \\<partial>stock_measure (\\<Gamma> x)) =\n              (\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>,\\<rho>)) * indicator X' \\<sigma> \\<partial>state_measure V \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V\n  X \\<in> sets (stock_measure (\\<Gamma> x))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter>\n  space (state_measure V \\<Gamma>)", "have [simp]: \"insert x V = V\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  X \\<in> sets (stock_measure (\\<Gamma> x))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. insert x V = V", "by auto"], ["proof (state)\nthis:\n  insert x V = V\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "interpret product_sigma_finite \"\\<lambda>y. stock_measure (\\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. product_sigma_finite (\\<lambda>y. stock_measure (\\<Gamma> y))", "unfolding product_sigma_finite_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. sigma_finite_measure (stock_measure (\\<Gamma> i))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have \"(\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>,\\<rho>)) * indicator X' \\<sigma> \\<partial>state_measure V \\<Gamma>) =\n           \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>. \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X' (\\<sigma>(x := y))\n               \\<partial>state_measure (V-{x}) \\<Gamma> \\<partial>stock_measure (\\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) *\n          indicator X' (\\<sigma>(x := y))\n        \\<partial>state_measure (V - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "using assms(1-3)"], ["proof (prove)\nusing this:\n  x \\<in> V\n  X \\<in> sets (stock_measure (\\<Gamma> x))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) *\n          indicator X' (\\<sigma>(x := y))\n        \\<partial>state_measure (V - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "by (subst state_measure_integral_split[of x]) (auto simp: X'_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n        \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) *\n        indicator X' (\\<sigma>(x := y))\n      \\<partial>state_measure (V - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n        \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) *\n        indicator X' (\\<sigma>(x := y))\n      \\<partial>state_measure (V - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have \"... = \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>. \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n                      \\<partial>state_measure (V-{x}) \\<Gamma> \\<partial>stock_measure (\\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) *\n          indicator X' (\\<sigma>(x := y))\n        \\<partial>state_measure (V - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x) =\n    \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n        \\<partial>state_measure (V - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x)", "by (intro nn_integral_cong)\n       (auto simp: X'_def split: split_indicator dest: fun_upd_in_state_measure)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n        \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) *\n        indicator X' (\\<sigma>(x := y))\n      \\<partial>state_measure (V - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) =\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n        \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n      \\<partial>state_measure (V - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n        \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) *\n        indicator X' (\\<sigma>(x := y))\n      \\<partial>state_measure (V - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) =\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n        \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n      \\<partial>state_measure (V - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have \"... = (\\<integral>\\<^sup>+ y. marg_dens \\<Y> x \\<rho> y * indicator X y \\<partial>stock_measure (\\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n        \\<partial>state_measure (V - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x) =\n    set_nn_integral (stock_measure (\\<Gamma> x)) X (marg_dens \\<Y> x \\<rho>)", "using measurable_dens_ctxt_fun_upd"], ["proof (prove)\nusing this:\n  \\<lbrakk>?f \\<in> ?N \\<rightarrow>\\<^sub>M state_measure ?V' ?\\<Gamma>;\n   ?V = ?V' \\<union> {?x};\n   ?g \\<in> ?N \\<rightarrow>\\<^sub>M stock_measure (?\\<Gamma> ?x)\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<omega>. (?f \\<omega>)(?x := ?g \\<omega>))\n                    \\<in> ?N \\<rightarrow>\\<^sub>M\n                          state_measure ?V ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n        \\<partial>state_measure (V - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x) =\n    set_nn_integral (stock_measure (\\<Gamma> x)) X (marg_dens \\<Y> x \\<rho>)", "unfolding marg_dens_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?f \\<in> ?N \\<rightarrow>\\<^sub>M state_measure ?V' ?\\<Gamma>;\n   ?V = ?V' \\<union> {?x};\n   ?g \\<in> ?N \\<rightarrow>\\<^sub>M stock_measure (?\\<Gamma> ?x)\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<omega>. (?f \\<omega>)(?x := ?g \\<omega>))\n                    \\<in> ?N \\<rightarrow>\\<^sub>M\n                          state_measure ?V ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n        \\<partial>state_measure (V - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x) =\n    set_nn_integral (stock_measure (\\<Gamma> x)) X\n     ((case \\<Y> of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>x \\<rho> v.\n            \\<integral>\\<^sup>+ \\<sigma>.\n                                 \\<delta>\n                                  (merge V V' (\\<sigma>(x := v), \\<rho>))\n                               \\<partial>state_measure (V - {x}) \\<Gamma>)\n       x \\<rho>)", "using assms(1-3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?f \\<in> ?N \\<rightarrow>\\<^sub>M state_measure ?V' ?\\<Gamma>;\n   ?V = ?V' \\<union> {?x};\n   ?g \\<in> ?N \\<rightarrow>\\<^sub>M stock_measure (?\\<Gamma> ?x)\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>\\<omega>. (?f \\<omega>)(?x := ?g \\<omega>))\n                    \\<in> ?N \\<rightarrow>\\<^sub>M\n                          state_measure ?V ?\\<Gamma>\n  x \\<in> V\n  X \\<in> sets (stock_measure (\\<Gamma> x))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n          \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n        \\<partial>state_measure (V - {x}) \\<Gamma>\n                       \\<partial>stock_measure (\\<Gamma> x) =\n    set_nn_integral (stock_measure (\\<Gamma> x)) X\n     ((case \\<Y> of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>x \\<rho> v.\n            \\<integral>\\<^sup>+ \\<sigma>.\n                                 \\<delta>\n                                  (merge V V' (\\<sigma>(x := v), \\<rho>))\n                               \\<partial>state_measure (V - {x}) \\<Gamma>)\n       x \\<rho>)", "by (intro nn_integral_cong) (simp split: split_indicator)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ y. \\<integral>\\<^sup>+ \\<sigma>.\n        \\<delta> (merge V V' (\\<sigma>(x := y), \\<rho>)) * indicator X y\n      \\<partial>state_measure (V - {x}) \\<Gamma>\n                     \\<partial>stock_measure (\\<Gamma> x) =\n  set_nn_integral (stock_measure (\\<Gamma> x)) X (marg_dens \\<Y> x \\<rho>)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  set_nn_integral (stock_measure (\\<Gamma> x)) X (marg_dens \\<Y> x \\<rho>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  set_nn_integral (stock_measure (\\<Gamma> x)) X (marg_dens \\<Y> x \\<rho>)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (\\<Gamma> x)) X\n     (marg_dens \\<Y> x \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", ".."], ["proof (state)\nthis:\n  set_nn_integral (stock_measure (\\<Gamma> x)) X (marg_dens \\<Y> x \\<rho>) =\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma marg_dens2_integral:\n  fixes X :: \"val set\"\n  assumes \"x \\<in> V\" \"y \\<in> V\" \"x \\<noteq> y\" and [measurable]: \"X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\"\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  defines \"X' \\<equiv> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter> space (state_measure V \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+z. marg_dens2 \\<Y> x y \\<rho> z * indicator X z \\<partial>stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) =\n              (\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>,\\<rho>)) * indicator X' \\<sigma> \\<partial>state_measure V \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "let ?M = \"stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\""], ["proof (state)\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "let ?M' = \"stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "interpret product_sigma_finite \"\\<lambda>x. stock_measure (\\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. product_sigma_finite (\\<lambda>x. stock_measure (\\<Gamma> x))", "unfolding product_sigma_finite_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. sigma_finite_measure (stock_measure (\\<Gamma> i))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)", "have \"(\\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho> z * indicator X z \\<partial>?M) =\n      \\<integral>\\<^sup>+z. marg_dens2 \\<Y> x y \\<rho> (case_prod PairVal z) * indicator X (case_prod PairVal z) \\<partial>?M'\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                           indicator X\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y)", "by (subst nn_integral_PairVal)\n       (auto simp add: split_beta' intro!: borel_measurable_times_ennreal measurable_marg_dens2)"], ["proof (state)\nthis:\n  set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n   (marg_dens2 \\<Y> x y \\<rho>) =\n  \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                         indicator X\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have V'': \"V - {x, y} = V - {y} - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V - {x, y} = V - {y} - {x}", "by auto"], ["proof (state)\nthis:\n  V - {x, y} = V - {y} - {x}\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)", "have A: \"V = insert y (V-{y})\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. V = insert y (V - {y})", "by blast"], ["proof (state)\nthis:\n  V = insert y (V - {y})\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)", "have B: \"insert x (V-{x,y}) = V - {y}\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. insert x (V - {x, y}) = V - {y}", "by blast"], ["proof (state)\nthis:\n  insert x (V - {x, y}) = V - {y}\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)", "have X'[measurable]: \"X' \\<in> sets (state_measure V \\<Gamma>)\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. X' \\<in> sets (state_measure V \\<Gamma>)", "unfolding X'_def"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>) \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n    space (state_measure V \\<Gamma>)\n    \\<in> sets (state_measure V \\<Gamma>)", "by (intro measurable_sets[OF _ assms(4)], unfold state_measure_def, subst stock_measure.simps)\n       (rule measurable_Pair_compose_split[OF measurable_embed_measure2], rule inj_PairVal,\n        erule measurable_component_singleton, erule measurable_component_singleton)"], ["proof (state)\nthis:\n  X' \\<in> sets (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have V[simp]: \"insert y (V - {y}) = V\" \"insert x (V - {x, y}) = V - {y}\" \"insert y V = V\"\n    and [measurable]: \"x \\<in> V - {y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (insert y (V - {y}) = V &&&\n     insert x (V - {x, y}) = V - {y} &&& insert y V = V) &&&\n    x \\<in> V - {y}", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (insert y (V - {y}) = V &&&\n     insert x (V - {x, y}) = V - {y} &&& insert y V = V) &&&\n    x \\<in> V - {y}", "by auto"], ["proof (state)\nthis:\n  insert y (V - {y}) = V\n  insert x (V - {x, y}) = V - {y}\n  insert y V = V\n  x \\<in> V - {y}\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have \"(\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>,\\<rho>)) * indicator X' \\<sigma> \\<partial>state_measure V \\<Gamma>) =\n      (\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>,\\<rho>)) * indicator X' \\<sigma> \\<partial>state_measure (insert y (insert x (V-{x, y}))) \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure (insert y (insert x (V - {x, y}))) \\<Gamma>", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure (insert y (insert x (V - {x, y}))) \\<Gamma>", "by (intro arg_cong2[where f=nn_integral] arg_cong2[where f=state_measure]) auto"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure (insert y (insert x (V - {x, y}))) \\<Gamma>\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure (insert y (insert x (V - {x, y}))) \\<Gamma>\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have \"... = \\<integral>\\<^sup>+w. \\<integral>\\<^sup>+v. \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>(x := v, y := w), \\<rho>)) * indicator X' (\\<sigma>(x := v, y := w))\n      \\<partial>state_measure (V - {x, y}) \\<Gamma> \\<partial>stock_measure (\\<Gamma> x) \\<partial>stock_measure (\\<Gamma> y)\" (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure (insert y (insert x (V - {x, y}))) \\<Gamma> =\n    \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>)) *\n                               indicator X' (\\<sigma>(x := v, y := w))\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>Pi\\<^sub>M (insert y (insert x (V - {x, y})))\n               (\\<lambda>x. stock_measure (\\<Gamma> x)) =\n    \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>)) *\n                               indicator X' (\\<sigma>(x := v, y := w))\n                             \\<partial>Pi\\<^sub>M (V - {x, y})\n  (\\<lambda>x. stock_measure (\\<Gamma> x))\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>Pi\\<^sub>M (insert y (insert x (V - {x, y})))\n               (\\<lambda>x. stock_measure (\\<Gamma> x)) =\n    \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>)) *\n                               indicator X' (\\<sigma>(x := v, y := w))\n                             \\<partial>Pi\\<^sub>M (V - {x, y})\n  (\\<lambda>x. stock_measure (\\<Gamma> x))\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y)", "apply (subst product_nn_integral_insert_rev)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> finite (insert x (V - {x, y}))\n 2. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> y \\<notin> insert x (V - {x, y})\n 3. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                          indicator X' \\<sigma>)\n                      \\<in> borel_measurable\n                             (Pi\\<^sub>M (insert y (insert x (V - {x, y})))\n                               (\\<lambda>x. stock_measure (\\<Gamma> x)))\n 4. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ ya.\n     \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x(y := ya), \\<rho>)) *\n                            indicator X' (x(y := ya))\n                        \\<partial>Pi\\<^sub>M (insert x (V - {x, y}))\n                                   (\\<lambda>x. stock_measure (\\<Gamma> x))\n   \\<partial>stock_measure (\\<Gamma> y) =\n                      \\<integral>\\<^sup>+ w.\n     \\<integral>\\<^sup>+ v. \\<integral>\\<^sup>+ \\<sigma>.\n           \\<delta> (merge V V' (\\<sigma>(x := v, y := w), \\<rho>)) *\n           indicator X' (\\<sigma>(x := v, y := w))\n         \\<partial>Pi\\<^sub>M (V - {x, y})\n                    (\\<lambda>x. stock_measure (\\<Gamma> x))\n                        \\<partial>stock_measure (\\<Gamma> x)\n   \\<partial>stock_measure (\\<Gamma> y)", "apply (auto simp: state_measure_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ ya.\n     \\<integral>\\<^sup>+ xa. \\<delta> (merge V V' (xa(y := ya), \\<rho>)) *\n                             indicator\n                              ((\\<lambda>\\<sigma>.\n                                   <|\\<sigma> x, \\<sigma> y|>) -`\n                               X \\<inter>\n                               space (state_measure V \\<Gamma>))\n                              (xa(y := ya))\n                        \\<partial>state_measure (V - {y}) \\<Gamma>\n   \\<partial>stock_measure (\\<Gamma> y) =\n                      \\<integral>\\<^sup>+ w.\n     \\<integral>\\<^sup>+ v. \\<integral>\\<^sup>+ \\<sigma>.\n           \\<delta> (merge V V' (\\<sigma>(x := v, y := w), \\<rho>)) *\n           indicator\n            ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n             space (state_measure V \\<Gamma>))\n            (\\<sigma>(x := v, y := w))\n         \\<partial>state_measure (V - {x, y}) \\<Gamma>\n                        \\<partial>stock_measure (\\<Gamma> x)\n   \\<partial>stock_measure (\\<Gamma> y)", "apply (rule nn_integral_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        xa \\<in> space (stock_measure (\\<Gamma> y))\\<rbrakk>\n       \\<Longrightarrow> \\<integral>\\<^sup>+ xb.\n        \\<delta> (merge V V' (xb(y := xa), \\<rho>)) *\n        indicator\n         ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n          space (state_measure V \\<Gamma>))\n         (xb(y := xa))\n      \\<partial>state_measure (V - {y}) \\<Gamma> =\n                         \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := xa), \\<rho>)) *\n                             indicator\n                              ((\\<lambda>\\<sigma>.\n                                   <|\\<sigma> x, \\<sigma> y|>) -`\n                               X \\<inter>\n                               space (state_measure V \\<Gamma>))\n                              (\\<sigma>(x := v, y := xa))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)", "apply (subst state_measure_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        xa \\<in> space (stock_measure (\\<Gamma> y))\\<rbrakk>\n       \\<Longrightarrow> \\<integral>\\<^sup>+ xb.\n        \\<delta> (merge V V' (xb(y := xa), \\<rho>)) *\n        indicator\n         ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n          space (state_measure V \\<Gamma>))\n         (xb(y := xa))\n      \\<partial>Pi\\<^sub>M (V - {y})\n                 (\\<lambda>x. stock_measure (\\<Gamma> x)) =\n                         \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := xa), \\<rho>)) *\n                             indicator\n                              ((\\<lambda>\\<sigma>.\n                                   <|\\<sigma> x, \\<sigma> y|>) -`\n                               X \\<inter>\n                               space (state_measure V \\<Gamma>))\n                              (\\<sigma>(x := v, y := xa))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)", "apply (subst V(2)[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        xa \\<in> space (stock_measure (\\<Gamma> y))\\<rbrakk>\n       \\<Longrightarrow> \\<integral>\\<^sup>+ xb.\n        \\<delta> (merge V V' (xb(y := xa), \\<rho>)) *\n        indicator\n         ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n          space (state_measure V \\<Gamma>))\n         (xb(y := xa))\n      \\<partial>Pi\\<^sub>M (insert x (V - {x, y}))\n                 (\\<lambda>x. stock_measure (\\<Gamma> x)) =\n                         \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := xa), \\<rho>)) *\n                             indicator\n                              ((\\<lambda>\\<sigma>.\n                                   <|\\<sigma> x, \\<sigma> y|>) -`\n                               X \\<inter>\n                               space (state_measure V \\<Gamma>))\n                              (\\<sigma>(x := v, y := xa))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)", "apply (subst product_nn_integral_insert_rev)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        xa \\<in> space (stock_measure (\\<Gamma> y))\\<rbrakk>\n       \\<Longrightarrow> finite (V - {x, y})\n 2. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        xa \\<in> space (stock_measure (\\<Gamma> y))\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> V - {x, y}\n 3. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        xa \\<in> space (stock_measure (\\<Gamma> y))\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>xb.\n                             \\<delta> (merge V V' (xb(y := xa), \\<rho>)) *\n                             indicator\n                              ((\\<lambda>\\<sigma>.\n                                   <|\\<sigma> x, \\<sigma> y|>) -`\n                               X \\<inter>\n                               space (state_measure V \\<Gamma>))\n                              (xb(y := xa)))\n                         \\<in> borel_measurable\n                                (Pi\\<^sub>M (insert x (V - {x, y}))\n                                  (\\<lambda>x. stock_measure (\\<Gamma> x)))\n 4. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        xa \\<in> space (stock_measure (\\<Gamma> y))\\<rbrakk>\n       \\<Longrightarrow> \\<integral>\\<^sup>+ ya.\n        \\<integral>\\<^sup>+ xb. \\<delta>\n                                 (merge V V'\n                                   (xb(x := ya, y := xa), \\<rho>)) *\n                                indicator\n                                 ((\\<lambda>\\<sigma>.\n<|\\<sigma> x, \\<sigma> y|>) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>))\n                                 (xb(x := ya, y := xa))\n                           \\<partial>Pi\\<^sub>M (V - {x, y})\n(\\<lambda>x. stock_measure (\\<Gamma> x))\n      \\<partial>stock_measure (\\<Gamma> x) =\n                         \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := xa), \\<rho>)) *\n                             indicator\n                              ((\\<lambda>\\<sigma>.\n                                   <|\\<sigma> x, \\<sigma> y|>) -`\n                               X \\<inter>\n                               space (state_measure V \\<Gamma>))\n                              (\\<sigma>(x := v, y := xa))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)", "apply (auto simp: state_measure_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        val_type xa = \\<Gamma> y\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>xb.\n                             \\<delta> (merge V V' (xb(y := xa), \\<rho>)) *\n                             indicator\n                              ((\\<lambda>\\<sigma>.\n                                   <|\\<sigma> x, \\<sigma> y|>) -`\n                               X \\<inter>\n                               space (state_measure V \\<Gamma>))\n                              (xb(y := xa)))\n                         \\<in> borel_measurable\n                                (state_measure (V - {y}) \\<Gamma>)", "apply measurable"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        val_type xa = \\<Gamma> y\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>xb. (xb(y := xa)) x)\n                         \\<in> state_measure (V - {y})\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (\\<Gamma> x)\n 2. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        val_type xa = \\<Gamma> y\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. (x(y := xa)) y)\n                         \\<in> state_measure (V - {y})\n                                \\<Gamma> \\<rightarrow>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n 3. \\<And>xa.\n       \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n        \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n        X' \\<equiv>\n        (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n        space (state_measure V \\<Gamma>);\n        val_type xa = \\<Gamma> y\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred (state_measure (V - {y}) \\<Gamma>)\n                          (\\<lambda>x.\n                              x(y := xa)\n                              \\<in> space (state_measure V \\<Gamma>))", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure (insert y (insert x (V - {x, y}))) \\<Gamma> =\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>)) *\n                             indicator X' (\\<sigma>(x := v, y := w))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure (insert y (insert x (V - {x, y}))) \\<Gamma> =\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>)) *\n                             indicator X' (\\<sigma>(x := v, y := w))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "from assms(1-5)"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"\\<And>v w \\<sigma>. v \\<in> space (stock_measure (\\<Gamma> x)) \\<Longrightarrow> w \\<in> space (stock_measure (\\<Gamma> y))\n               \\<Longrightarrow> \\<sigma> \\<in> space (state_measure (V-{x,y}) \\<Gamma>)\n               \\<Longrightarrow> \\<sigma>(x := v, y := w) \\<in> X' \\<longleftrightarrow> <|v,w|> \\<in> X\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> space (stock_measure (\\<Gamma> x));\n        w \\<in> space (stock_measure (\\<Gamma> y));\n        \\<sigma> \\<in> space (state_measure (V - {x, y}) \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>(x := v, y := w) \\<in> X') =\n                         (<|v, w|> \\<in> X)", "by (simp add: X'_def space_state_measure PiE_iff extensional_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?v \\<in> space (stock_measure (\\<Gamma> x));\n   ?w \\<in> space (stock_measure (\\<Gamma> y));\n   ?\\<sigma> \\<in> space (state_measure (V - {x, y}) \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> (?\\<sigma>(x := ?v, y := ?w) \\<in> X') =\n                    (<|?v, ?w|> \\<in> X)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "hence \"?I = \\<integral>\\<^sup>+w. \\<integral>\\<^sup>+v. \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>(x := v, y := w), \\<rho>)) * indicator X <|v,w|>\n               \\<partial>state_measure (V - {x,y}) \\<Gamma> \\<partial>stock_measure (\\<Gamma> x) \\<partial>stock_measure (\\<Gamma> y)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> space (stock_measure (\\<Gamma> x));\n   ?w \\<in> space (stock_measure (\\<Gamma> y));\n   ?\\<sigma> \\<in> space (state_measure (V - {x, y}) \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> (?\\<sigma>(x := ?v, y := ?w) \\<in> X') =\n                    (<|?v, ?w|> \\<in> X)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>)) *\n                               indicator X' (\\<sigma>(x := v, y := w))\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y) =\n    \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>)) *\n                               indicator X <|v, w|>\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y)", "by (intro nn_integral_cong) (simp split: split_indicator)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>)) *\n                             indicator X' (\\<sigma>(x := v, y := w))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y) =\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>)) *\n                             indicator X <|v, w|>\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>)) *\n                             indicator X' (\\<sigma>(x := v, y := w))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y) =\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>)) *\n                             indicator X <|v, w|>\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "from assms(5)"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... = \\<integral>\\<^sup>+w. \\<integral>\\<^sup>+v. (\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>(x := v,y := w), \\<rho>)) \\<partial>state_measure (V - {x,y}) \\<Gamma>)\n                    * indicator X <|v,w|> \\<partial>stock_measure (\\<Gamma> x) \\<partial>stock_measure (\\<Gamma> y)\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>)) *\n                               indicator X <|v, w|>\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y) =\n    \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>))\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma> *\n          indicator X <|v, w|>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y)", "using assms"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>)) *\n                               indicator X <|v, w|>\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y) =\n    \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>))\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma> *\n          indicator X <|v, w|>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y)", "apply (simp add: ennreal_mult'' ennreal_indicator)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ w.\n     \\<integral>\\<^sup>+ v. \\<integral>\\<^sup>+ \\<sigma>.\n           \\<delta> (merge V V' (\\<sigma>(x := v, y := w), \\<rho>)) *\n           indicator X <|v, w|>\n         \\<partial>state_measure (V - {x, y}) \\<Gamma>\n                        \\<partial>stock_measure (\\<Gamma> x)\n   \\<partial>stock_measure (\\<Gamma> y) =\n                      \\<integral>\\<^sup>+ w.\n     \\<integral>\\<^sup>+ v. \\<integral>\\<^sup>+ \\<sigma>.\n           \\<delta> (merge V V' (\\<sigma>(x := v, y := w), \\<rho>))\n         \\<partial>state_measure (V - {x, y}) \\<Gamma> *\n                            indicator X <|v, w|>\n                        \\<partial>stock_measure (\\<Gamma> x)\n   \\<partial>stock_measure (\\<Gamma> y)", "by (intro nn_integral_cong nn_integral_multc) (simp_all add: )"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>)) *\n                             indicator X <|v, w|>\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y) =\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma> *\n        indicator X <|v, w|>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>)) *\n                             indicator X <|v, w|>\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y) =\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma> *\n        indicator X <|v, w|>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have \"... = \\<integral>\\<^sup>+w. \\<integral>\\<^sup>+v. marg_dens2 \\<Y> x y \\<rho> <|v,w|> * indicator X <|v,w|>\n                       \\<partial>stock_measure (\\<Gamma> x) \\<partial>stock_measure (\\<Gamma> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma>(x := v, y := w), \\<rho>))\n                             \\<partial>state_measure (V - {x, y}) \\<Gamma> *\n          indicator X <|v, w|>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y) =\n    \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          marg_dens2 \\<Y> x y \\<rho> <|v, w|> * indicator X <|v, w|>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y)", "by (intro nn_integral_cong) (simp add: marg_dens2_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma> *\n        indicator X <|v, w|>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y) =\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        marg_dens2 \\<Y> x y \\<rho> <|v, w|> * indicator X <|v, w|>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma>(x := v, y := w), \\<rho>))\n                           \\<partial>state_measure (V - {x, y}) \\<Gamma> *\n        indicator X <|v, w|>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y) =\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        marg_dens2 \\<Y> x y \\<rho> <|v, w|> * indicator X <|v, w|>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "from assms(4)"], ["proof (chain)\npicking this:\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))", "have \"... = \\<integral>\\<^sup>+z. marg_dens2 \\<Y> x y \\<rho> (case_prod PairVal z) * indicator X (case_prod PairVal z)\n                    \\<partial>(stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M stock_measure (\\<Gamma> y))\""], ["proof (prove)\nusing this:\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          marg_dens2 \\<Y> x y \\<rho> <|v, w|> * indicator X <|v, w|>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y) =\n    \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                           indicator X\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y)", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X' \\<equiv>\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n  space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n          marg_dens2 \\<Y> x y \\<rho> <|v, w|> * indicator X <|v, w|>\n        \\<partial>stock_measure (\\<Gamma> x)\n                       \\<partial>stock_measure (\\<Gamma> y) =\n    \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                           indicator X\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y)", "by (subst pair_sigma_finite.nn_integral_snd[symmetric])\n         (auto simp add: pair_sigma_finite_def intro!: borel_measurable_times_ennreal measurable_compose[OF _ measurable_marg_dens2])"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        marg_dens2 \\<Y> x y \\<rho> <|v, w|> * indicator X <|v, w|>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y) =\n  \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                         indicator X\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ w. \\<integral>\\<^sup>+ v.\n        marg_dens2 \\<Y> x y \\<rho> <|v, w|> * indicator X <|v, w|>\n      \\<partial>stock_measure (\\<Gamma> x)\n                     \\<partial>stock_measure (\\<Gamma> y) =\n  \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                         indicator X\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "have \"... = \\<integral>\\<^sup>+z. marg_dens2 \\<Y> x y \\<rho> z * indicator X z \\<partial>stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                           indicator X\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y) =\n    set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>)", "apply (subst stock_measure.simps, subst embed_measure_eq_distr, rule inj_PairVal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                           indicator X\n                            (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                       \\<partial>stock_measure\n                                  (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                 stock_measure (\\<Gamma> y) =\n    set_nn_integral\n     (distr\n       (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n        stock_measure (\\<Gamma> y))\n       (embed_measure\n         (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n          stock_measure (\\<Gamma> y))\n         (\\<lambda>(x, y). <|x, y|>))\n       (\\<lambda>(x, y). <|x, y|>))\n     X (marg_dens2 \\<Y> x y \\<rho>)", "apply (rule nn_integral_distr[symmetric], intro measurable_embed_measure2 inj_PairVal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>z. marg_dens2 \\<Y> x y \\<rho> z * indicator X z)\n    \\<in> borel_measurable\n           (distr\n             (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n              stock_measure (\\<Gamma> y))\n             (embed_measure\n               (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                stock_measure (\\<Gamma> y))\n               (\\<lambda>(x, y). <|x, y|>))\n             (\\<lambda>a. case a of (x, xa) \\<Rightarrow> <|x, xa|>))", "apply (subst stock_measure.simps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>z. marg_dens2 \\<Y> x y \\<rho> z * indicator X z)\n    \\<in> borel_measurable\n           (distr\n             (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n              stock_measure (\\<Gamma> y))\n             (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n             (\\<lambda>(x, y). <|x, y|>))", "apply (intro borel_measurable_times_ennreal)"], ["proof (prove)\ngoal (2 subgoals):\n 1. marg_dens2 \\<Y> x y \\<rho>\n    \\<in> borel_measurable\n           (distr\n             (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n              stock_measure (\\<Gamma> y))\n             (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n             (\\<lambda>(x, y). <|x, y|>))\n 2. indicator X\n    \\<in> borel_measurable\n           (distr\n             (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n              stock_measure (\\<Gamma> y))\n             (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n             (\\<lambda>(x, y). <|x, y|>))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. marg_dens2 \\<Y> x y \\<rho>\n    \\<in> borel_measurable\n           (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n 2. indicator X\n    \\<in> borel_measurable\n           (distr\n             (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n              stock_measure (\\<Gamma> y))\n             (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n             (\\<lambda>(x, y). <|x, y|>))", "apply (intro measurable_marg_dens2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. x \\<in> V\n 2. y \\<in> V\n 3. x \\<noteq> y\n 4. \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n 5. indicator X\n    \\<in> borel_measurable\n           (distr\n             (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n              stock_measure (\\<Gamma> y))\n             (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n             (\\<lambda>(x, y). <|x, y|>))", "apply (insert assms)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> V\n 2. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> V\n 3. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> y\n 4. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n 5. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     X \\<in> sets (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)));\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X' \\<equiv>\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n     space (state_measure V \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> indicator X\n                      \\<in> borel_measurable\n                             (distr\n                               (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                                stock_measure (\\<Gamma> y))\n                               (stock_measure\n                                 (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n                               (\\<lambda>(x, y). <|x, y|>))", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ z. marg_dens2 \\<Y> x y \\<rho>\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>) *\n                         indicator X\n                          (case z of (x, xa) \\<Rightarrow> <|x, xa|>)\n                     \\<partial>stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                               stock_measure (\\<Gamma> y) =\n  set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n   (marg_dens2 \\<Y> x y \\<rho>)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n   (marg_dens2 \\<Y> x y \\<rho>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n   (marg_dens2 \\<Y> x y \\<rho>)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", ".."], ["proof (state)\nthis:\n  set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n   (marg_dens2 \\<Y> x y \\<rho>) =\n  \\<integral>\\<^sup>+\\<sigma>\\<in>X'.\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The space described by the marginal density is the same as the space obtained by projecting\n@{term x} (resp. @{term x} and @{term y}) out of the common distribution of all variables.\\<close>"], ["", "lemma density_marg_dens_eq:\n  assumes \"x \\<in> V\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  shows \"density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>) =\n              distr (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) (stock_measure (\\<Gamma> x)) (\\<lambda>\\<sigma>. \\<sigma> x)\" (is \"?M1 = ?M2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>) =\n    distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n     (\\<lambda>\\<sigma>. \\<sigma> x)", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "assume X: \"X \\<in> sets ?M1\""], ["proof (state)\nthis:\n  X \\<in> sets\n           (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "let ?X' = \"(\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter> space (state_measure V \\<Gamma>)\""], ["proof (state)\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "let ?X'' = \"(\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter> space (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (state)\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "from X"], ["proof (chain)\npicking this:\n  X \\<in> sets\n           (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))", "have \"emeasure ?M1 X = \\<integral>\\<^sup>+ \\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho>)) * indicator ?X' \\<sigma> \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n\ngoal (1 subgoal):\n 1. emeasure\n     (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) X =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>. \\<sigma> x) -`\n                                    X \\<inter>\n                                    space (state_measure V \\<Gamma>).\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "using assms measurable_marg_dens measurable_dens"], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n  x \\<in> V\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  \\<lbrakk>?x \\<in> V;\n   ?\\<rho> \\<in> space (state_measure V' \\<Gamma>)\\<rbrakk>\n  \\<Longrightarrow> marg_dens \\<Y> ?x ?\\<rho>\n                    \\<in> borel_measurable (stock_measure (\\<Gamma> ?x))\n  \\<delta> \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) X =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>. \\<sigma> x) -`\n                                    X \\<inter>\n                                    space (state_measure V \\<Gamma>).\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "by (subst emeasure_density)\n       (auto simp: emeasure_distr nn_integral_distr\n        dens_ctxt_measure_def state_measure'_def emeasure_density marg_dens_integral)"], ["proof (state)\nthis:\n  emeasure (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n   X =\n  \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>. \\<sigma> x) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>).\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "also"], ["proof (state)\nthis:\n  emeasure (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n   X =\n  \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>. \\<sigma> x) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>).\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... = \\<integral>\\<^sup>+ \\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                                        indicator ?X'' (merge V V' (\\<sigma>,\\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>. \\<sigma> x) -`\n                                    X \\<inter>\n                                    space (state_measure V \\<Gamma>).\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                         indicator\n                          ((\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter>\n                           space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_cong)\n       (auto split: split_indicator simp: space_state_measure merge_def PiE_iff extensional_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>. \\<sigma> x) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>).\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                       indicator\n                        ((\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter>\n                         space (state_measure (V \\<union> V') \\<Gamma>))\n                        (merge V V' (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>. \\<sigma> x) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>).\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                       indicator\n                        ((\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter>\n                         space (state_measure (V \\<union> V') \\<Gamma>))\n                        (merge V V' (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "from X and assms"], ["proof (chain)\npicking this:\n  X \\<in> sets\n           (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n  x \\<in> V\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... = emeasure ?M2 X\""], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n  x \\<in> V\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                         indicator\n                          ((\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter>\n                           space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma> =\n    emeasure\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n     X", "using measurable_dens"], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n  x \\<in> V\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  \\<delta> \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                         indicator\n                          ((\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter>\n                           space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma> =\n    emeasure\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n     X", "by (auto simp: emeasure_distr emeasure_density nn_integral_distr ennreal_indicator ennreal_mult''\n                   dens_ctxt_measure_def state_measure'_def state_measure_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                       indicator\n                        ((\\<lambda>\\<sigma>. \\<sigma> x) -` X \\<inter>\n                         space (state_measure (V \\<union> V') \\<Gamma>))\n                        (merge V V' (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n     (\\<lambda>\\<sigma>. \\<sigma> x))\n   X\n\ngoal (2 subgoals):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n 2. \\<And>A.\n       A \\<in> sets\n                (density (stock_measure (\\<Gamma> x))\n                  (marg_dens \\<Y> x \\<rho>)) \\<Longrightarrow>\n       emeasure\n        (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n          (\\<lambda>\\<sigma>. \\<sigma> x))\n        A", "finally"], ["proof (chain)\npicking this:\n  emeasure (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n   X =\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n     (\\<lambda>\\<sigma>. \\<sigma> x))\n   X", "show \"emeasure ?M1 X = emeasure ?M2 X\""], ["proof (prove)\nusing this:\n  emeasure (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n   X =\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n     (\\<lambda>\\<sigma>. \\<sigma> x))\n   X\n\ngoal (1 subgoal):\n 1. emeasure\n     (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) X =\n    emeasure\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))\n     X", "."], ["proof (state)\nthis:\n  emeasure (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>))\n   X =\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n     (\\<lambda>\\<sigma>. \\<sigma> x))\n   X\n\ngoal (1 subgoal):\n 1. sets (density (stock_measure (\\<Gamma> x)) (marg_dens \\<Y> x \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) (stock_measure (\\<Gamma> x))\n       (\\<lambda>\\<sigma>. \\<sigma> x))", "qed simp"], ["", "lemma density_marg_dens2_eq:\n  assumes \"x \\<in> V\" \"y \\<in> V\" \"x \\<noteq> y\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  defines \"M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\"\n  shows \"density M (marg_dens2 \\<Y> x y \\<rho>) =\n              distr (dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) M (\\<lambda>\\<sigma>. <|\\<sigma> x,\\<sigma> y|>)\" (is \"?M1 = ?M2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. density M (marg_dens2 \\<Y> x y \\<rho>) =\n    distr (dens_ctxt_measure \\<Y> \\<rho>) M\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "assume X: \"X \\<in> sets ?M1\""], ["proof (state)\nthis:\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "let ?X' = \"(\\<lambda>\\<sigma>. <|\\<sigma> x , \\<sigma> y|>) -` X \\<inter> space (state_measure V \\<Gamma>)\""], ["proof (state)\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "let ?X'' = \"(\\<lambda>\\<sigma>. <|\\<sigma> x , \\<sigma> y|>) -` X \\<inter> space (state_measure (V\\<union>V') \\<Gamma>)\""], ["proof (state)\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))", "have meas[measurable]: \"(\\<lambda>\\<sigma>. <|\\<sigma> x,\\<sigma> y|>) \\<in> measurable (state_measure (V \\<union> V') \\<Gamma>)\n                                                        (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n    \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n          stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho>\n  \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)))\n  M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n    \\<in> Pi\\<^sub>M (V \\<union> V')\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))", "apply (subst stock_measure.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho>\n     \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)));\n     M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n                      \\<in> Pi\\<^sub>M (V \\<union> V')\n                             (\\<lambda>x.\n                                 stock_measure\n                                  (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n                            embed_measure\n                             (stock_measure (\\<Gamma> x) \\<Otimes>\\<^sub>M\n                              stock_measure (\\<Gamma> y))\n                             (\\<lambda>(x, y). <|x, y|>)", "apply (rule measurable_Pair_compose_split[OF measurable_embed_measure2[OF inj_PairVal]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho>\n     \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)));\n     M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>xa. xa x)\n                      \\<in> Pi\\<^sub>M (V \\<union> V')\n                             (\\<lambda>x.\n                                 stock_measure\n                                  (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n                            stock_measure (\\<Gamma> x)\n 2. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho>\n     \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)));\n     M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. x y)\n                      \\<in> Pi\\<^sub>M (V \\<union> V')\n                             (\\<lambda>x.\n                                 stock_measure\n                                  (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n                            stock_measure (\\<Gamma> y)", "apply (rule measurable_component_singleton, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n  \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "from assms(1-4) X meas"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n  \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))", "have \"emeasure ?M2 X = emeasure (dens_ctxt_measure \\<Y> \\<rho>) ?X''\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n  \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. emeasure\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n     X =\n    emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n      space (state_measure (V \\<union> V') \\<Gamma>))", "apply (subst emeasure_distr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>));\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n     \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n           stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n                      \\<in> dens_ctxt_measure \\<Y>\n                             \\<rho> \\<rightarrow>\\<^sub>M\n                            M\n 2. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>));\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n     \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n           stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> X \\<in> sets M\n 3. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>));\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n     \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n           stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n                       ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -`\n                        X \\<inter>\n                        space (dens_ctxt_measure \\<Y> \\<rho>)) =\n                      emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n                       ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -`\n                        X \\<inter>\n                        space (state_measure (V \\<union> V') \\<Gamma>))", "apply (subst measurable_dens_ctxt_measure_eq, unfold state_measure_def M_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho>\n     \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)));\n     X \\<in> sets\n              (density (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n                (marg_dens2 \\<Y> x y \\<rho>));\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n     \\<in> Pi\\<^sub>M (V \\<union> V')\n            (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n                      \\<in> Pi\\<^sub>M (V \\<union> V')\n                             (\\<lambda>x.\n                                 stock_measure\n                                  (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n                            stock_measure\n                             (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n 2. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho>\n     \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)));\n     X \\<in> sets\n              (density (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n                (marg_dens2 \\<Y> x y \\<rho>));\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n     \\<in> Pi\\<^sub>M (V \\<union> V')\n            (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> X \\<in> sets\n                               (stock_measure\n                                 (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n 3. \\<lbrakk>x \\<in> V; y \\<in> V; x \\<noteq> y;\n     \\<rho>\n     \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)));\n     X \\<in> sets\n              (density (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n                (marg_dens2 \\<Y> x y \\<rho>));\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n     \\<in> Pi\\<^sub>M (V \\<union> V')\n            (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\\<rbrakk>\n    \\<Longrightarrow> emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n                       ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -`\n                        X \\<inter>\n                        space (dens_ctxt_measure \\<Y> \\<rho>)) =\n                      emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n                       ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -`\n                        X \\<inter>\n                        space\n                         (Pi\\<^sub>M (V \\<union> V')\n                           (\\<lambda>x. stock_measure (\\<Gamma> x))))", "apply (simp_all add: space_dens_ctxt_measure state_measure_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n   X =\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n    space (state_measure (V \\<union> V') \\<Gamma>))\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "also"], ["proof (state)\nthis:\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n   X =\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n    space (state_measure (V \\<union> V') \\<Gamma>))\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "from assms(1-4) X meas"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n  \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))", "have \"... = \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho>)) * indicator ?X'' (merge V V' (\\<sigma>, \\<rho>)) \\<partial>state_measure V \\<Gamma>\"\n      (is \"_ = ?I\")"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n  \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n      space (state_measure (V \\<union> V') \\<Gamma>)) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                         indicator\n                          ((\\<lambda>\\<sigma>.\n                               <|\\<sigma> x, \\<sigma> y|>) -`\n                           X \\<inter>\n                           space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "unfolding dens_ctxt_measure_def state_measure'_def M_def"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X \\<in> sets\n           (density (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n             (marg_dens2 \\<Y> x y \\<rho>))\n  (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>)\n  \\<in> state_measure (V \\<union> V') \\<Gamma> \\<rightarrow>\\<^sub>M\n        stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n\ngoal (1 subgoal):\n 1. emeasure\n     ((case \\<Y> of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n      space (state_measure (V \\<union> V') \\<Gamma>)) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                         indicator\n                          ((\\<lambda>\\<sigma>.\n                               <|\\<sigma> x, \\<sigma> y|>) -`\n                           X \\<inter>\n                           space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "by (simp add: emeasure_density nn_integral_distr ennreal_indicator ennreal_mult'')"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n    space (state_measure (V \\<union> V') \\<Gamma>)) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                       indicator\n                        ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -`\n                         X \\<inter>\n                         space (state_measure (V \\<union> V') \\<Gamma>))\n                        (merge V V' (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "also"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n    space (state_measure (V \\<union> V') \\<Gamma>)) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                       indicator\n                        ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -`\n                         X \\<inter>\n                         space (state_measure (V \\<union> V') \\<Gamma>))\n                        (merge V V' (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "from assms(1-4) X"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))", "have \"\\<And>\\<sigma>. \\<sigma>\\<in>space (state_measure V \\<Gamma>) \\<Longrightarrow> merge V V' (\\<sigma>, \\<rho>) \\<in> ?X'' \\<longleftrightarrow> \\<sigma> \\<in> ?X'\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       (merge V V' (\\<sigma>, \\<rho>)\n        \\<in> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n              space (state_measure (V \\<union> V') \\<Gamma>)) =\n       (\\<sigma>\n        \\<in> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n              space (state_measure V \\<Gamma>))", "by (auto simp: space_state_measure merge_def PiE_iff extensional_def)"], ["proof (state)\nthis:\n  ?\\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  (merge V V' (?\\<sigma>, \\<rho>)\n   \\<in> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n         space (state_measure (V \\<union> V') \\<Gamma>)) =\n  (?\\<sigma>\n   \\<in> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n         space (state_measure V \\<Gamma>))\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "hence \"?I = \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho>)) * indicator ?X' \\<sigma> \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  ?\\<sigma> \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  (merge V V' (?\\<sigma>, \\<rho>)\n   \\<in> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n         space (state_measure (V \\<union> V') \\<Gamma>)) =\n  (?\\<sigma>\n   \\<in> (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -` X \\<inter>\n         space (state_measure V \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                         indicator\n                          ((\\<lambda>\\<sigma>.\n                               <|\\<sigma> x, \\<sigma> y|>) -`\n                           X \\<inter>\n                           space (state_measure (V \\<union> V') \\<Gamma>))\n                          (merge V V' (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>.\n  <|\\<sigma> x, \\<sigma> y|>) -`\n                                    X \\<inter>\n                                    space (state_measure V \\<Gamma>).\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_cong) (simp split: split_indicator)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                       indicator\n                        ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -`\n                         X \\<inter>\n                         space (state_measure (V \\<union> V') \\<Gamma>))\n                        (merge V V' (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>.\n<|\\<sigma> x, \\<sigma> y|>) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>).\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>)) *\n                       indicator\n                        ((\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>) -`\n                         X \\<inter>\n                         space (state_measure (V \\<union> V') \\<Gamma>))\n                        (merge V V' (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>.\n<|\\<sigma> x, \\<sigma> y|>) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>).\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "from assms X"], ["proof (chain)\npicking this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))", "have \"... = \\<integral>\\<^sup>+z. marg_dens2 \\<Y> x y \\<rho> z * indicator X z \\<partial>M\""], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>.\n  <|\\<sigma> x, \\<sigma> y|>) -`\n                                    X \\<inter>\n                                    space (state_measure V \\<Gamma>).\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma> =\n    set_nn_integral M X (marg_dens2 \\<Y> x y \\<rho>)", "unfolding M_def"], ["proof (prove)\nusing this:\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<equiv>\n  stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n  X \\<in> sets\n           (density (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n             (marg_dens2 \\<Y> x y \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>.\n  <|\\<sigma> x, \\<sigma> y|>) -`\n                                    X \\<inter>\n                                    space (state_measure V \\<Gamma>).\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n    \\<partial>state_measure V \\<Gamma> =\n    set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>)", "by (subst marg_dens2_integral) simp_all"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>.\n<|\\<sigma> x, \\<sigma> y|>) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>).\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  set_nn_integral M X (marg_dens2 \\<Y> x y \\<rho>)\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+\\<sigma>\\<in>(\\<lambda>\\<sigma>.\n<|\\<sigma> x, \\<sigma> y|>) -`\n                                  X \\<inter>\n                                  space (state_measure V \\<Gamma>).\n                     \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n  \\<partial>state_measure V \\<Gamma> =\n  set_nn_integral M X (marg_dens2 \\<Y> x y \\<rho>)\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "from X"], ["proof (chain)\npicking this:\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))", "have \"... = emeasure ?M1 X\""], ["proof (prove)\nusing this:\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n\ngoal (1 subgoal):\n 1. set_nn_integral M X (marg_dens2 \\<Y> x y \\<rho>) =\n    emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) X", "using assms measurable_dens"], ["proof (prove)\nusing this:\n  X \\<in> sets (density M (marg_dens2 \\<Y> x y \\<rho>))\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  M \\<equiv> stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n  \\<delta> \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. set_nn_integral M X (marg_dens2 \\<Y> x y \\<rho>) =\n    emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) X", "unfolding M_def"], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (density (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n             (marg_dens2 \\<Y> x y \\<rho>))\n  x \\<in> V\n  y \\<in> V\n  x \\<noteq> y\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)) \\<equiv>\n  stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))\n  \\<delta> \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. set_nn_integral (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y))) X\n     (marg_dens2 \\<Y> x y \\<rho>) =\n    emeasure\n     (density (stock_measure (PRODUCT (\\<Gamma> x) (\\<Gamma> y)))\n       (marg_dens2 \\<Y> x y \\<rho>))\n     X", "by (subst emeasure_density, intro measurable_marg_dens2) simp_all"], ["proof (state)\nthis:\n  set_nn_integral M X (marg_dens2 \\<Y> x y \\<rho>) =\n  emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) X\n\ngoal (2 subgoals):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n 2. \\<And>A.\n       A \\<in> sets\n                (density M (marg_dens2 \\<Y> x y \\<rho>)) \\<Longrightarrow>\n       emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) A =\n       emeasure\n        (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n          (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n        A", "finally"], ["proof (chain)\npicking this:\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n   X =\n  emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) X", "show \"emeasure ?M1 X = emeasure ?M2 X\""], ["proof (prove)\nusing this:\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n   X =\n  emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) X\n\ngoal (1 subgoal):\n 1. emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) X =\n    emeasure\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n     X", ".."], ["proof (state)\nthis:\n  emeasure (density M (marg_dens2 \\<Y> x y \\<rho>)) X =\n  emeasure\n   (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n     (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))\n   X\n\ngoal (1 subgoal):\n 1. sets (density M (marg_dens2 \\<Y> x y \\<rho>)) =\n    sets\n     (distr (dens_ctxt_measure \\<Y> \\<rho>) M\n       (\\<lambda>\\<sigma>. <|\\<sigma> x, \\<sigma> y|>))", "qed simp"], ["", "lemma measurable_insert_dens[measurable]:\n  assumes Mf[measurable]: \"case_prod f \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\"\n  shows \"insert_dens V V' f \\<delta>\n             \\<in> borel_measurable (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))", "have \"(\\<lambda>\\<sigma>. \\<sigma> 0) \\<in> measurable (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\n                               (stock_measure (case_nat t \\<Gamma> 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> 0)\n    \\<in> state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          stock_measure\n           (case 0 of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> 0)\n    \\<in> Pi\\<^sub>M (shift_var_set (V \\<union> V'))\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          stock_measure\n           (case 0 of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)", "unfolding shift_var_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. \\<sigma> 0)\n    \\<in> Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          stock_measure\n           (case 0 of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. \\<sigma> 0)\n  \\<in> state_measure (shift_var_set (V \\<union> V'))\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        stock_measure\n         (case 0 of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (1 subgoal):\n 1. insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. \\<sigma> 0)\n  \\<in> state_measure (shift_var_set (V \\<union> V'))\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        stock_measure\n         (case 0 of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (1 subgoal):\n 1. insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))", "unfolding insert_dens_def[abs_def]"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. \\<sigma> 0)\n  \\<in> state_measure (shift_var_set (V \\<union> V'))\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        stock_measure\n         (case 0 of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        \\<delta> (remove_var \\<sigma>) *\n        f (remove_var \\<sigma>) (\\<sigma> 0))\n    \\<in> borel_measurable\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))", "by simp"], ["proof (state)\nthis:\n  insert_dens V V' f \\<delta>\n  \\<in> borel_measurable\n         (state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nn_integral_dens_ctxt_measure:\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n          \"f \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+x. f x \\<partial>dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) =\n           \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (dens_ctxt_measure \\<Y> \\<rho>) f =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           f (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     ((case \\<Y> of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     f =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           f (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "using assms measurable_dens"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  f \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n  \\<delta> \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     ((case \\<Y> of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     f =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           f (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "by (simp only: prod.case, subst nn_integral_density)\n     (auto simp: nn_integral_distr state_measure_def )"], ["", "lemma shift_var_set_Un[simp]: \"shift_var_set V \\<union> Suc ` V' = shift_var_set (V \\<union> V')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shift_var_set V \\<union> Suc ` V' = shift_var_set (V \\<union> V')", "unfolding shift_var_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. insert 0 (Suc ` V) \\<union> Suc ` V' = insert 0 (Suc ` (V \\<union> V'))", "by (simp add: image_Un)"], ["", "lemma emeasure_dens_ctxt_measure_insert:\n  fixes t f \\<rho>\n  defines \"M \\<equiv> dens_ctxt_measure (shift_var_set V, Suc`V', case_nat t \\<Gamma>, insert_dens V V' f \\<delta>) \\<rho>\"\n  assumes dens: \"has_parametrized_subprob_density (state_measure (V\\<union>V') \\<Gamma>) F (stock_measure t) f\"\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure (Suc`V') (case_nat t \\<Gamma>))\"\n  assumes X: \"X \\<in> sets M\"\n  shows \"emeasure M X =\n           \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta> (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                 indicator X (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n             \\<partial>state_measure (shift_var_set V) (case_nat t \\<Gamma>)\" (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "note [measurable] = has_parametrized_subprob_densityD(3)[OF dens]"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "have [measurable]:\n    \"(\\<lambda>\\<sigma>. merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>))\n       \\<in> measurable (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n                    (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>))\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>)", "using \\<rho>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>))\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>)", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  \\<rho>\n  \\<in> space\n         (Pi\\<^sub>M (Suc ` V')\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>))\n    \\<in> Pi\\<^sub>M (shift_var_set V)\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (shift_var_set (V \\<union> V'))\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x))", "by (simp del: shift_var_set_Un add: shift_var_set_Un[symmetric])"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>))\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "from assms"], ["proof (chain)\npicking this:\n  M \\<equiv>\n  dens_ctxt_measure\n   (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n    insert_dens V V' f \\<delta>)\n   \\<rho>\n  has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>)\n   F (stock_measure t) f\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n  X \\<in> sets M", "have \"emeasure M X = (\\<integral>\\<^sup>+x. indicator X x \\<partial>M)\""], ["proof (prove)\nusing this:\n  M \\<equiv>\n  dens_ctxt_measure\n   (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n    insert_dens V V' f \\<delta>)\n   \\<rho>\n  has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>)\n   F (stock_measure t) f\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n  X \\<in> sets M\n\ngoal (1 subgoal):\n 1. emeasure M X = integral\\<^sup>N M (indicator X)", "by (subst nn_integral_indicator)\n       (simp_all add: dens_ctxt_measure_def state_measure'_def)"], ["proof (state)\nthis:\n  emeasure M X = integral\\<^sup>N M (indicator X)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "also"], ["proof (state)\nthis:\n  emeasure M X = integral\\<^sup>N M (indicator X)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "have MI: \"indicator X \\<in> borel_measurable\n                     (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indicator X\n    \\<in> borel_measurable\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))", "using X"], ["proof (prove)\nusing this:\n  X \\<in> sets M\n\ngoal (1 subgoal):\n 1. indicator X\n    \\<in> borel_measurable\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))", "unfolding M_def dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  X \\<in> sets\n           ((case (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                   insert_dens V V' f \\<delta>) of\n             (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n               \\<lambda>\\<rho>.\n                  density\n                   (distr (state_measure V \\<Gamma>)\n                     (state_measure (V \\<union> V') \\<Gamma>)\n                     (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                   \\<delta>)\n             \\<rho>)\n\ngoal (1 subgoal):\n 1. indicator X\n    \\<in> borel_measurable\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))", "by simp"], ["proof (state)\nthis:\n  indicator X\n  \\<in> borel_measurable\n         (state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "have \"(\\<integral>\\<^sup>+x. indicator X x \\<partial>M) = ?I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N M (indicator X) =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "using X"], ["proof (prove)\nusing this:\n  X \\<in> sets M\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N M (indicator X) =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "unfolding M_def dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  X \\<in> sets\n           ((case (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                   insert_dens V V' f \\<delta>) of\n             (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n               \\<lambda>\\<rho>.\n                  density\n                   (distr (state_measure V \\<Gamma>)\n                     (state_measure (V \\<union> V') \\<Gamma>)\n                     (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                   \\<delta>)\n             \\<rho>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     ((case (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n             insert_dens V V' f \\<delta>) of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     (indicator X) =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "apply (simp only: prod.case)"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> sets\n             (density\n               (distr\n                 (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n                 (state_measure (shift_var_set V \\<union> Suc ` V')\n                   (case_nat t \\<Gamma>))\n                 (\\<lambda>\\<sigma>.\n                     merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)))\n               (insert_dens V V' f \\<delta>)) \\<Longrightarrow>\n    integral\\<^sup>N\n     (density\n       (distr (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n         (state_measure (shift_var_set V \\<union> Suc ` V')\n           (case_nat t \\<Gamma>))\n         (\\<lambda>\\<sigma>.\n             merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)))\n       (insert_dens V V' f \\<delta>))\n     (indicator X) =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "apply (subst nn_integral_density)"], ["proof (prove)\ngoal (3 subgoals):\n 1. X \\<in> sets\n             (density\n               (distr\n                 (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n                 (state_measure (shift_var_set V \\<union> Suc ` V')\n                   (case_nat t \\<Gamma>))\n                 (\\<lambda>\\<sigma>.\n                     merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)))\n               (insert_dens V V' f \\<delta>)) \\<Longrightarrow>\n    insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (distr (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n             (state_measure (shift_var_set V \\<union> Suc ` V')\n               (case_nat t \\<Gamma>))\n             (\\<lambda>\\<sigma>.\n                 merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)))\n 2. X \\<in> sets\n             (density\n               (distr\n                 (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n                 (state_measure (shift_var_set V \\<union> Suc ` V')\n                   (case_nat t \\<Gamma>))\n                 (\\<lambda>\\<sigma>.\n                     merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)))\n               (insert_dens V V' f \\<delta>)) \\<Longrightarrow>\n    indicator X\n    \\<in> borel_measurable\n           (distr (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n             (state_measure (shift_var_set V \\<union> Suc ` V')\n               (case_nat t \\<Gamma>))\n             (\\<lambda>\\<sigma>.\n                 merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)))\n 3. X \\<in> sets\n             (density\n               (distr\n                 (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n                 (state_measure (shift_var_set V \\<union> Suc ` V')\n                   (case_nat t \\<Gamma>))\n                 (\\<lambda>\\<sigma>.\n                     merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)))\n               (insert_dens V V' f \\<delta>)) \\<Longrightarrow>\n    set_nn_integral\n     (distr (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n       (state_measure (shift_var_set V \\<union> Suc ` V')\n         (case_nat t \\<Gamma>))\n       (\\<lambda>\\<sigma>.\n           merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)))\n     X (insert_dens V V' f \\<delta>) =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "apply (simp_all add: nn_integral_density nn_integral_distr MI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  integral\\<^sup>N M (indicator X) =\n  \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "finally"], ["proof (chain)\npicking this:\n  emeasure M X =\n  \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  emeasure M X =\n  \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "."], ["proof (state)\nthis:\n  emeasure M X =\n  \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma merge_Suc_aux':\n  \"\\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>)) \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) \\<in> measurable (state_measure V \\<Gamma>) (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho>\n    \\<in> space\n           (state_measure (Suc ` V')\n             (case_nat t \\<Gamma>)) \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (V \\<union> V') \\<Gamma>", "by (unfold state_measure_def,\n    rule measurable_compose[OF measurable_Pair measurable_merge], simp,\n    rule measurable_const, auto simp: space_PiM dest: PiE_mem)"], ["", "lemma merge_Suc_aux:\n  \"\\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>)) \\<Longrightarrow>\n    (\\<lambda>\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))) \\<in> borel_measurable (state_measure V \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho>\n    \\<in> space\n           (state_measure (Suc ` V')\n             (case_nat t \\<Gamma>)) \\<Longrightarrow>\n    (\\<lambda>\\<sigma>.\n        \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)))\n    \\<in> borel_measurable (state_measure V \\<Gamma>)", "by (rule measurable_compose[OF _ measurable_dens], unfold state_measure_def,\n    rule measurable_compose[OF measurable_Pair measurable_merge], simp,\n    rule measurable_const, auto simp: space_PiM dest: PiE_mem)"], ["", "lemma nn_integral_PiM_Suc:\n  assumes fin: \"\\<And>i. sigma_finite_measure (N i)\"\n  assumes Mf: \"f \\<in> borel_measurable (Pi\\<^sub>M V N)\"\n  shows \"(\\<integral>\\<^sup>+x. f x \\<partial>distr (Pi\\<^sub>M (Suc`V) (case_nat M N)) (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)) =\n             (\\<integral>\\<^sup>+x. f x \\<partial>Pi\\<^sub>M V N)\"\n         (is \"nn_integral (?M1 V) _ = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (distr (Pi\\<^sub>M (Suc ` V) (case_nat M N)) (Pi\\<^sub>M V N)\n       (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n     f =\n    integral\\<^sup>N (Pi\\<^sub>M V N) f", "using Mf"], ["proof (prove)\nusing this:\n  f \\<in> borel_measurable (Pi\\<^sub>M V N)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (distr (Pi\\<^sub>M (Suc ` V) (case_nat M N)) (Pi\\<^sub>M V N)\n       (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n     f =\n    integral\\<^sup>N (Pi\\<^sub>M V N) f", "proof (induction arbitrary: f\n                 rule: finite_induct[OF finite_vars(1), case_names empty insert])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       f \\<in> borel_measurable (Pi\\<^sub>M {} N) \\<Longrightarrow>\n       integral\\<^sup>N\n        (distr (Pi\\<^sub>M (Suc ` {}) (case_nat M N)) (Pi\\<^sub>M {} N)\n          (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n        f =\n       integral\\<^sup>N (Pi\\<^sub>M {} N) f\n 2. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "case empty"], ["proof (state)\nthis:\n  f \\<in> borel_measurable (Pi\\<^sub>M {} N)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       f \\<in> borel_measurable (Pi\\<^sub>M {} N) \\<Longrightarrow>\n       integral\\<^sup>N\n        (distr (Pi\\<^sub>M (Suc ` {}) (case_nat M N)) (Pi\\<^sub>M {} N)\n          (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n        f =\n       integral\\<^sup>N (Pi\\<^sub>M {} N) f\n 2. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (distr\n       (Pi\\<^sub>M (Suc ` {})\n         (\\<lambda>a.\n             case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n       (Pi\\<^sub>M {} N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n     f =\n    integral\\<^sup>N (Pi\\<^sub>M {} N) f", "by (auto simp add: PiM_empty nn_integral_distr intro!: nn_integral_cong)"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` {})\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M {} N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   f =\n  integral\\<^sup>N (Pi\\<^sub>M {} N) f\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "case (insert v V)"], ["proof (state)\nthis:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "let ?V = \"insert v V\" and ?M3 = \"Pi\\<^sub>M (insert (Suc v) (Suc ` V)) (case_nat M N)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "let ?M4 = \"Pi\\<^sub>M (insert (Suc v) (Suc ` V)) (case_nat (count_space {}) N)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "let ?M4' = \"Pi\\<^sub>M (Suc ` V) (case_nat (count_space {}) N)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "have A: \"?M3 = ?M4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi\\<^sub>M (insert (Suc v) (Suc ` V)) (case_nat M N) =\n    Pi\\<^sub>M (insert (Suc v) (Suc ` V)) (case_nat (count_space {}) N)", "by (intro PiM_cong) auto"], ["proof (state)\nthis:\n  Pi\\<^sub>M (insert (Suc v) (Suc ` V)) (case_nat M N) =\n  Pi\\<^sub>M (insert (Suc v) (Suc ` V)) (case_nat (count_space {}) N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "interpret product_sigma_finite \"case_nat (count_space {}) N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. product_sigma_finite (case_nat (count_space {}) N)", "unfolding product_sigma_finite_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       sigma_finite_measure\n        (case i of 0 \\<Rightarrow> count_space {} | Suc x \\<Rightarrow> N x)", "by (auto intro: fin sigma_finite_measure_count_space_countable split: nat.split)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "interpret sigma_finite_measure \"N v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure (N v)", "by (rule assms)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "note Mf[measurable] = insert(4)"], ["proof (state)\nthis:\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "from insert"], ["proof (chain)\npicking this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)", "have \"(\\<integral>\\<^sup>+x. f x \\<partial>?M1 ?V) = \\<integral>\\<^sup>+x. f (x \\<circ> Suc) \\<partial>?M4\""], ["proof (prove)\nusing this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (distr\n       (Pi\\<^sub>M (Suc ` insert v V)\n         (\\<lambda>a.\n             case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n       (Pi\\<^sub>M (insert v V) N)\n       (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n     f =\n    \\<integral>\\<^sup>+ x. f (x \\<circ> Suc)\n                       \\<partial>Pi\\<^sub>M (insert (Suc v) (Suc ` V))\n                                  (case_nat (count_space {}) N)", "by (subst A[symmetric], subst nn_integral_distr)\n       (simp_all add: measurable_case_nat_Suc_PiM image_insert[symmetric] del: image_insert)"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` insert v V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M (insert v V) N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   f =\n  \\<integral>\\<^sup>+ x. f (x \\<circ> Suc)\n                     \\<partial>Pi\\<^sub>M (insert (Suc v) (Suc ` V))\n                                (case_nat (count_space {}) N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` insert v V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M (insert v V) N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   f =\n  \\<integral>\\<^sup>+ x. f (x \\<circ> Suc)\n                     \\<partial>Pi\\<^sub>M (insert (Suc v) (Suc ` V))\n                                (case_nat (count_space {}) N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "from insert"], ["proof (chain)\npicking this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)", "have \"... = \\<integral>\\<^sup>+x. \\<integral>\\<^sup>+y. f (x(Suc v := y) \\<circ> Suc) \\<partial>N v \\<partial>?M4'\""], ["proof (prove)\nusing this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (x \\<circ> Suc)\n                       \\<partial>Pi\\<^sub>M (insert (Suc v) (Suc ` V))\n                                  (case_nat (count_space {}) N) =\n    \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n          f (x(Suc v := y) \\<circ> Suc)\n        \\<partial>N v\n                       \\<partial>Pi\\<^sub>M (Suc ` V)\n                                  (case_nat (count_space {}) N)", "apply (subst product_nn_integral_insert, simp, blast, subst image_insert[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite V; v \\<notin> V;\n     \\<And>f.\n        f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n        integral\\<^sup>N\n         (distr\n           (Pi\\<^sub>M (Suc ` V)\n             (\\<lambda>a.\n                 case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n           (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n         f =\n        integral\\<^sup>N (Pi\\<^sub>M V N) f;\n     f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N); finite V;\n     v \\<notin> V;\n     \\<And>f.\n        f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n        integral\\<^sup>N\n         (distr\n           (Pi\\<^sub>M (Suc ` V)\n             (\\<lambda>a.\n                 case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n           (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n         f =\n        integral\\<^sup>N (Pi\\<^sub>M V N) f;\n     f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. f (x \\<circ> Suc))\n                      \\<in> borel_measurable\n                             (Pi\\<^sub>M (Suc ` insert v V)\n                               (case_nat (count_space {}) N))\n 2. \\<lbrakk>finite V; v \\<notin> V;\n     \\<And>f.\n        f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n        integral\\<^sup>N\n         (distr\n           (Pi\\<^sub>M (Suc ` V)\n             (\\<lambda>a.\n                 case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n           (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n         f =\n        integral\\<^sup>N (Pi\\<^sub>M V N) f;\n     f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. f (x(Suc v := y) \\<circ> Suc)\n                        \\<partial>case Suc v of\n                                  0 \\<Rightarrow> count_space {}\n                                  | Suc x \\<Rightarrow> N x\n   \\<partial>Pi\\<^sub>M (Suc ` V) (case_nat (count_space {}) N) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. f (x(Suc v := y) \\<circ> Suc) \\<partial>N v\n   \\<partial>Pi\\<^sub>M (Suc ` V) (case_nat (count_space {}) N)", "apply (erule measurable_compose[OF measurable_case_nat_Suc_PiM], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. f (x \\<circ> Suc)\n                     \\<partial>Pi\\<^sub>M (insert (Suc v) (Suc ` V))\n                                (case_nat (count_space {}) N) =\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n        f (x(Suc v := y) \\<circ> Suc)\n      \\<partial>N v\n                     \\<partial>Pi\\<^sub>M (Suc ` V)\n                                (case_nat (count_space {}) N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. f (x \\<circ> Suc)\n                     \\<partial>Pi\\<^sub>M (insert (Suc v) (Suc ` V))\n                                (case_nat (count_space {}) N) =\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n        f (x(Suc v := y) \\<circ> Suc)\n      \\<partial>N v\n                     \\<partial>Pi\\<^sub>M (Suc ` V)\n                                (case_nat (count_space {}) N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "have \"(\\<lambda>x y. x(Suc v := y) \\<circ> Suc) = (\\<lambda>x y. (x \\<circ> Suc)(v := y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y. x(Suc v := y) \\<circ> Suc) =\n    (\\<lambda>x. fun_upd (x \\<circ> Suc) v)", "by (intro ext) (simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x y. x(Suc v := y) \\<circ> Suc) =\n  (\\<lambda>x. fun_upd (x \\<circ> Suc) v)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "also"], ["proof (state)\nthis:\n  (\\<lambda>x y. x(Suc v := y) \\<circ> Suc) =\n  (\\<lambda>x. fun_upd (x \\<circ> Suc) v)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "have \"?M4' = Pi\\<^sub>M (Suc ` V) (case_nat M N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi\\<^sub>M (Suc ` V) (case_nat (count_space {}) N) =\n    Pi\\<^sub>M (Suc ` V) (case_nat M N)", "by (intro PiM_cong) auto"], ["proof (state)\nthis:\n  Pi\\<^sub>M (Suc ` V) (case_nat (count_space {}) N) =\n  Pi\\<^sub>M (Suc ` V) (case_nat M N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "also"], ["proof (state)\nthis:\n  Pi\\<^sub>M (Suc ` V) (case_nat (count_space {}) N) =\n  Pi\\<^sub>M (Suc ` V) (case_nat M N)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "from insert"], ["proof (chain)\npicking this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)", "have \"(\\<integral>\\<^sup>+x. \\<integral>\\<^sup>+y. f ((x \\<circ> Suc)(v := y)) \\<partial>N v \\<partial>...) =\n                             (\\<integral>\\<^sup>+x. \\<integral>\\<^sup>+y. f (x(v := y)) \\<partial>N v \\<partial>?M1 V)\""], ["proof (prove)\nusing this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n          f ((x \\<circ> Suc)(v := y))\n        \\<partial>N v\n                       \\<partial>Pi\\<^sub>M (Suc ` V) (case_nat M N) =\n    \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y))\n        \\<partial>N v\n                       \\<partial>distr\n                                  (Pi\\<^sub>M (Suc ` V)\n                                    (\\<lambda>a.\n  case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n                                  (Pi\\<^sub>M V N)\n                                  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)", "by (subst nn_integral_distr)\n       (simp_all add: borel_measurable_nn_integral measurable_case_nat_Suc_PiM)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f ((x \\<circ> Suc)(v := y))\n      \\<partial>N v\n                     \\<partial>Pi\\<^sub>M (Suc ` V) (case_nat M N) =\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y)) \\<partial>N v\n                     \\<partial>distr\n                                (Pi\\<^sub>M (Suc ` V)\n                                  (\\<lambda>a.\ncase a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n                                (Pi\\<^sub>M V N)\n                                (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f ((x \\<circ> Suc)(v := y))\n      \\<partial>N v\n                     \\<partial>Pi\\<^sub>M (Suc ` V) (case_nat M N) =\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y)) \\<partial>N v\n                     \\<partial>distr\n                                (Pi\\<^sub>M (Suc ` V)\n                                  (\\<lambda>a.\ncase a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n                                (Pi\\<^sub>M V N)\n                                (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "from insert"], ["proof (chain)\npicking this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)", "have \"... = (\\<integral>\\<^sup>+x. \\<integral>\\<^sup>+y. f (x(v := y)) \\<partial>N v \\<partial>Pi\\<^sub>M V N)\""], ["proof (prove)\nusing this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y))\n        \\<partial>N v\n                       \\<partial>distr\n                                  (Pi\\<^sub>M (Suc ` V)\n                                    (\\<lambda>a.\n  case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n                                  (Pi\\<^sub>M V N)\n                                  (\\<lambda>\\<sigma>.\n\\<sigma> \\<circ> Suc) =\n    \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y))\n        \\<partial>N v\n                       \\<partial>Pi\\<^sub>M V N", "by (intro insert(3)) measurable"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y)) \\<partial>N v\n                     \\<partial>distr\n                                (Pi\\<^sub>M (Suc ` V)\n                                  (\\<lambda>a.\ncase a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n                                (Pi\\<^sub>M V N)\n                                (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y)) \\<partial>N v\n                     \\<partial>Pi\\<^sub>M V N\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y)) \\<partial>N v\n                     \\<partial>distr\n                                (Pi\\<^sub>M (Suc ` V)\n                                  (\\<lambda>a.\ncase a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n                                (Pi\\<^sub>M V N)\n                                (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y)) \\<partial>N v\n                     \\<partial>Pi\\<^sub>M V N\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "from insert"], ["proof (chain)\npicking this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)", "have \"... = (\\<integral>\\<^sup>+x. f x \\<partial>Pi\\<^sub>M ?V N)\""], ["proof (prove)\nusing this:\n  finite V\n  v \\<notin> V\n  ?f \\<in> borel_measurable (Pi\\<^sub>M V N) \\<Longrightarrow>\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   ?f =\n  integral\\<^sup>N (Pi\\<^sub>M V N) ?f\n  f \\<in> borel_measurable (Pi\\<^sub>M (insert v V) N)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y))\n        \\<partial>N v\n                       \\<partial>Pi\\<^sub>M V N =\n    integral\\<^sup>N (Pi\\<^sub>M (insert v V) N) f", "by (subst product_sigma_finite.product_nn_integral_insert)\n       (simp_all add: assms product_sigma_finite_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y. f (x(v := y)) \\<partial>N v\n                     \\<partial>Pi\\<^sub>M V N =\n  integral\\<^sup>N (Pi\\<^sub>M (insert v V) N) f\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f.\n           f \\<in> borel_measurable (Pi\\<^sub>M F N) \\<Longrightarrow>\n           integral\\<^sup>N\n            (distr (Pi\\<^sub>M (Suc ` F) (case_nat M N)) (Pi\\<^sub>M F N)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n            f =\n           integral\\<^sup>N (Pi\\<^sub>M F N) f;\n        f \\<in> borel_measurable (Pi\\<^sub>M (insert x F) N)\\<rbrakk>\n       \\<Longrightarrow> integral\\<^sup>N\n                          (distr\n                            (Pi\\<^sub>M (Suc ` insert x F) (case_nat M N))\n                            (Pi\\<^sub>M (insert x F) N)\n                            (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n                          f =\n                         integral\\<^sup>N (Pi\\<^sub>M (insert x F) N) f", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` insert v V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M (insert v V) N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   f =\n  integral\\<^sup>N (Pi\\<^sub>M (insert v V) N) f", "show ?case"], ["proof (prove)\nusing this:\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` insert v V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M (insert v V) N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   f =\n  integral\\<^sup>N (Pi\\<^sub>M (insert v V) N) f\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (distr\n       (Pi\\<^sub>M (Suc ` insert v V)\n         (\\<lambda>a.\n             case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n       (Pi\\<^sub>M (insert v V) N)\n       (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n     f =\n    integral\\<^sup>N (Pi\\<^sub>M (insert v V) N) f", "."], ["proof (state)\nthis:\n  integral\\<^sup>N\n   (distr\n     (Pi\\<^sub>M (Suc ` insert v V)\n       (\\<lambda>a. case a of 0 \\<Rightarrow> M | Suc a \\<Rightarrow> N a))\n     (Pi\\<^sub>M (insert v V) N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n   f =\n  integral\\<^sup>N (Pi\\<^sub>M (insert v V) N) f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PiM_Suc:\n  assumes \"\\<And>i. sigma_finite_measure (N i)\"\n  shows \"distr (Pi\\<^sub>M (Suc`V) (case_nat M N)) (Pi\\<^sub>M V N) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) = Pi\\<^sub>M V N\" (is \"?M1 = ?M2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (Suc ` V) (case_nat M N)) (Pi\\<^sub>M V N)\n     (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n    Pi\\<^sub>M V N", "by (intro measure_eqI)\n     (simp_all add: nn_integral_indicator[symmetric] nn_integral_PiM_Suc assms\n               del: nn_integral_indicator)"], ["", "lemma distr_state_measure_Suc:\n  \"distr (state_measure (Suc ` V) (case_nat t \\<Gamma>)) (state_measure V \\<Gamma>) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n     state_measure V \\<Gamma>\" (is \"?M1 = ?M2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (state_measure (Suc ` V) (case_nat t \\<Gamma>))\n     (state_measure V \\<Gamma>) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n    state_measure V \\<Gamma>", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>x.\n           stock_measure\n            (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)))\n     (Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x)))\n     (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n    Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x))", "apply (subst (2) PiM_Suc[of \"\\<lambda>x. stock_measure (\\<Gamma> x)\" \"stock_measure t\", symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (Pi\\<^sub>M (Suc ` V)\n       (\\<lambda>x.\n           stock_measure\n            (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)))\n     (Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x)))\n     (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n    distr\n     (Pi\\<^sub>M (Suc ` V)\n       (case_nat (stock_measure t)\n         (\\<lambda>x. stock_measure (\\<Gamma> x))))\n     (Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x)))\n     (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)", "apply (intro distr_cong PiM_cong)"], ["proof (prove)\ngoal (4 subgoals):\n 1. Suc ` V = Suc ` V\n 2. \\<And>x.\n       x \\<in> Suc ` V \\<Longrightarrow>\n       stock_measure\n        (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x) =\n       (case x of 0 \\<Rightarrow> stock_measure t\n        | Suc x \\<Rightarrow> stock_measure (\\<Gamma> x))\n 3. sets (Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x))) =\n    sets (Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x)))\n 4. \\<And>x.\n       x \\<in> space\n                (Pi\\<^sub>M (Suc ` V)\n                  (\\<lambda>x.\n                      stock_measure\n                       (case x of 0 \\<Rightarrow> t\n                        | Suc x \\<Rightarrow>\n                            \\<Gamma> x))) \\<Longrightarrow>\n       x \\<circ> Suc = x \\<circ> Suc", "apply (simp_all split: nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma emeasure_dens_ctxt_measure_insert':\n  fixes t f \\<rho>\n  defines \"M \\<equiv> dens_ctxt_measure (shift_var_set V, Suc`V', case_nat t \\<Gamma>, insert_dens V V' f \\<delta>) \\<rho>\"\n  assumes dens: \"has_parametrized_subprob_density (state_measure (V\\<union>V') \\<Gamma>) F (stock_measure t) f\"\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure (Suc`V') (case_nat t \\<Gamma>))\"\n  assumes X: \"X \\<in> sets M\"\n  shows \"emeasure M X = \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) * \\<integral>\\<^sup>+y. f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n                       indicator X (merge (shift_var_set V) (Suc`V') (case_nat y \\<sigma>, \\<rho>))\n                  \\<partial>stock_measure t \\<partial>state_measure V \\<Gamma>\" (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "let ?m = \"\\<lambda>x y. merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "from dens"], ["proof (chain)\npicking this:\n  has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>)\n   F (stock_measure t) f", "have Mf:\n      \"case_prod f \\<in> borel_measurable (state_measure (V\\<union>V') \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\""], ["proof (prove)\nusing this:\n  has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>)\n   F (stock_measure t) f\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). f x y)\n    \\<in> borel_measurable\n           (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n            stock_measure t)", "by (rule has_parametrized_subprob_densityD)"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "note [measurable] = Mf[unfolded state_measure_def]"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (Pi\\<^sub>M (V \\<union> V')\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<Otimes>\\<^sub>M\n          stock_measure t)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have meas_merge: \"(\\<lambda>x. merge (shift_var_set V) (Suc`V') (x, \\<rho>))\n       \\<in> measurable (state_measure (shift_var_set V) (case_nat t \\<Gamma>))\n                    (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>)", "using \\<rho>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n    \\<in> state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>)", "unfolding state_measure_def shift_var_set_def"], ["proof (prove)\nusing this:\n  \\<rho>\n  \\<in> space\n         (Pi\\<^sub>M (Suc ` V')\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n    \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x))", "by (simp add: image_Un image_insert[symmetric] Un_insert_left[symmetric]\n             del: image_insert Un_insert_left)"], ["proof (state)\nthis:\n  (\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "note measurable_insert_dens' =\n           measurable_insert_dens[unfolded shift_var_set_def state_measure_def]"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). ?f x y)\n  \\<in> borel_measurable\n         (Pi\\<^sub>M (V \\<union> V')\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<Otimes>\\<^sub>M\n          stock_measure ?t) \\<Longrightarrow>\n  insert_dens V V' ?f \\<delta>\n  \\<in> borel_measurable\n         (Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> ?t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have meas_merge': \"(\\<lambda>x. merge (shift_var_set V) (Suc ` V') (case_nat (snd x) (fst x), \\<rho>))\n       \\<in> measurable (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\n                    (state_measure (shift_var_set (V\\<union>V')) (case_nat t \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        merge (shift_var_set V) (Suc ` V')\n         (case_nat (snd x) (fst x), \\<rho>))\n    \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>)", "by (rule measurable_compose[OF _ meas_merge]) simp"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      merge (shift_var_set V) (Suc ` V') (case_nat (snd x) (fst x), \\<rho>))\n  \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n        stock_measure t \\<rightarrow>\\<^sub>M\n        state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have meas_integral: \"(\\<lambda>\\<sigma>. \\<integral>\\<^sup>+ y. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) * f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n                            indicator X (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n                           \\<partial>stock_measure t) \\<in> borel_measurable (state_measure V \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>.\n        \\<integral>\\<^sup>+ y. \\<delta>\n                                (merge V V'\n                                  (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                               f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                                y *\n                               indicator X\n                                (merge (shift_var_set V) (Suc ` V')\n                                  (case_nat y \\<sigma>, \\<rho>))\n                           \\<partial>stock_measure t)\n    \\<in> borel_measurable (state_measure V \\<Gamma>)", "apply (rule sigma_finite_measure.borel_measurable_nn_integral, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y).\n        \\<delta> (merge V V' (x, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y x, \\<rho>)))\n    \\<in> borel_measurable\n           (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)", "apply (subst measurable_split_conv, intro borel_measurable_times_ennreal)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>x. \\<delta> (merge V V' (fst x, \\<rho> \\<circ> Suc)))\n    \\<in> borel_measurable\n           (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\n 2. (\\<lambda>x. f (merge V V' (fst x, \\<rho> \\<circ> Suc)) (snd x))\n    \\<in> borel_measurable\n           (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\n 3. (\\<lambda>x.\n        indicator X\n         (merge (shift_var_set V) (Suc ` V')\n           (case_nat (snd x) (fst x), \\<rho>)))\n    \\<in> borel_measurable\n           (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)", "apply (rule measurable_compose[OF measurable_fst merge_Suc_aux[OF \\<rho>]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>x. f (merge V V' (fst x, \\<rho> \\<circ> Suc)) (snd x))\n    \\<in> borel_measurable\n           (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\n 2. (\\<lambda>x.\n        indicator X\n         (merge (shift_var_set V) (Suc ` V')\n           (case_nat (snd x) (fst x), \\<rho>)))\n    \\<in> borel_measurable\n           (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)", "apply (rule measurable_Pair_compose_split[OF Mf])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>x. merge V V' (fst x, \\<rho> \\<circ> Suc))\n    \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t \\<rightarrow>\\<^sub>M\n          state_measure (V \\<union> V') \\<Gamma>\n 2. snd\n    \\<in> state_measure V \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t \\<rightarrow>\\<^sub>M\n          stock_measure t\n 3. (\\<lambda>x.\n        indicator X\n         (merge (shift_var_set V) (Suc ` V')\n           (case_nat (snd x) (fst x), \\<rho>)))\n    \\<in> borel_measurable\n           (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)", "apply (rule measurable_compose[OF measurable_fst merge_Suc_aux'[OF \\<rho>]], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        indicator X\n         (merge (shift_var_set V) (Suc ` V')\n           (case_nat (snd x) (fst x), \\<rho>)))\n    \\<in> borel_measurable\n           (state_measure V \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)", "apply (rule measurable_compose[OF meas_merge' borel_measurable_indicator])"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> sets\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))", "apply (insert X, simp add: M_def dens_ctxt_measure_def state_measure'_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>.\n      \\<integral>\\<^sup>+ y. \\<delta>\n                              (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                             f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                              y *\n                             indicator X\n                              (merge (shift_var_set V) (Suc ` V')\n                                (case_nat y \\<sigma>, \\<rho>))\n                         \\<partial>stock_measure t)\n  \\<in> borel_measurable (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have meas': \"\\<And>x. x \\<in> space (state_measure V \\<Gamma>)\n                  \\<Longrightarrow> (\\<lambda>y. f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n                      indicator X (merge (shift_var_set V) (Suc ` V') (case_nat y x, \\<rho>)))\n                  \\<in> borel_measurable (stock_measure t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       (\\<lambda>y.\n           f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n           indicator X\n            (merge (shift_var_set V) (Suc ` V') (case_nat y x, \\<rho>)))\n       \\<in> borel_measurable (stock_measure t)", "using X"], ["proof (prove)\nusing this:\n  X \\<in> sets M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       (\\<lambda>y.\n           f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n           indicator X\n            (merge (shift_var_set V) (Suc ` V') (case_nat y x, \\<rho>)))\n       \\<in> borel_measurable (stock_measure t)", "apply (intro borel_measurable_times_ennreal)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> f (merge V V' (x, \\<rho> \\<circ> Suc))\n                         \\<in> borel_measurable (stock_measure t)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>xa.\n                             indicator X\n                              (merge (shift_var_set V) (Suc ` V')\n                                (case_nat xa x, \\<rho>)))\n                         \\<in> borel_measurable (stock_measure t)", "apply (rule measurable_Pair_compose_split[OF Mf])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>xa. merge V V' (x, \\<rho> \\<circ> Suc))\n                         \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n                               state_measure (V \\<union> V') \\<Gamma>\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. x)\n                         \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>xa.\n                             indicator X\n                              (merge (shift_var_set V) (Suc ` V')\n                                (case_nat xa x, \\<rho>)))\n                         \\<in> borel_measurable (stock_measure t)", "apply (rule measurable_const, erule measurable_space[OF merge_Suc_aux'[OF \\<rho>]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. x)\n                         \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n                               stock_measure t\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>xa.\n                             indicator X\n                              (merge (shift_var_set V) (Suc ` V')\n                                (case_nat xa x, \\<rho>)))\n                         \\<in> borel_measurable (stock_measure t)", "apply (simp, rule measurable_compose[OF _ borel_measurable_indicator])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>xa.\n                             merge (shift_var_set V) (Suc ` V')\n                              (case_nat xa x, \\<rho>))\n                         \\<in> stock_measure t \\<rightarrow>\\<^sub>M ?N9 x\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> X \\<in> sets (?N9 x)", "apply (rule measurable_compose[OF measurable_case_nat'])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a. a)\n                         \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n                               stock_measure (?t15 x)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a. x)\n                         \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n                               state_measure (?V15 x) (?\\<Gamma>15 x)\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             merge (shift_var_set V) (Suc ` V') (a, \\<rho>))\n                         \\<in> state_measure (shift_var_set (?V15 x))\n                                (case_nat (?t15 x)\n                                  (?\\<Gamma>15 x)) \\<rightarrow>\\<^sub>M\n                               ?N9 x\n 4. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> X \\<in> sets (?N9 x)", "apply (rule measurable_ident_sets[OF refl], erule measurable_const)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             merge (shift_var_set V) (Suc ` V') (a, \\<rho>))\n                         \\<in> state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n                               ?N9 x\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        X \\<in> sets M\\<rbrakk>\n       \\<Longrightarrow> X \\<in> sets (?N9 x)", "apply (rule meas_merge, simp add: M_def dens_ctxt_measure_def state_measure'_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  (\\<lambda>y.\n      f (merge V V' (?x, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (shift_var_set V) (Suc ` V') (case_nat y ?x, \\<rho>)))\n  \\<in> borel_measurable (stock_measure t)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have \"emeasure M X =\n           \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta> (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                 indicator X (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n             \\<partial>state_measure (shift_var_set V) (case_nat t \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "using assms"], ["proof (prove)\nusing this:\n  M \\<equiv>\n  dens_ctxt_measure\n   (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n    insert_dens V V' f \\<delta>)\n   \\<rho>\n  has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>)\n   F (stock_measure t) f\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n  X \\<in> sets M\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "unfolding M_def"], ["proof (prove)\nusing this:\n  dens_ctxt_measure\n   (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n    insert_dens V V' f \\<delta>)\n   \\<rho> \\<equiv>\n  dens_ctxt_measure\n   (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n    insert_dens V V' f \\<delta>)\n   \\<rho>\n  has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>)\n   F (stock_measure t) f\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             \\<rho>)\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     X =\n    \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "by (intro emeasure_dens_ctxt_measure_insert)"], ["proof (state)\nthis:\n  emeasure M X =\n  \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  emeasure M X =\n  \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have \"... = \\<integral>\\<^sup>+x. \\<integral>\\<^sup>+y. insert_dens V V' f \\<delta> (?m x y) *\n                  indicator X (?m x y) \\<partial>stock_measure t \\<partial>state_measure (Suc`V) (case_nat t \\<Gamma>)\"\n    (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n          insert_dens V V' f \\<delta>\n           (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)) *\n          indicator X\n           (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>))\n        \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)", "using \\<rho> X meas_merge"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n  X \\<in> sets M\n  (\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n  \\<in> state_measure (shift_var_set V)\n         (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n        state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (shift_var_set V) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n          insert_dens V V' f \\<delta>\n           (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)) *\n          indicator X\n           (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>))\n        \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)", "unfolding shift_var_set_def M_def dens_ctxt_measure_def state_measure'_def state_measure_def"], ["proof (prove)\nusing this:\n  \\<rho>\n  \\<in> space\n         (Pi\\<^sub>M (Suc ` V')\n           (\\<lambda>x.\n               stock_measure\n                (case x of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)))\n  X \\<in> sets\n           ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                   insert_dens V V' f \\<delta>) of\n             (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n               \\<lambda>\\<rho>.\n                  density\n                   (distr\n                     (Pi\\<^sub>M V (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                     (Pi\\<^sub>M (V \\<union> V')\n                       (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                     (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                   \\<delta>)\n             \\<rho>)\n  (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n  \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n         (\\<lambda>x.\n             stock_measure\n              (case x of 0 \\<Rightarrow> t\n               | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n        Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n         (\\<lambda>x.\n             stock_measure\n              (case x of 0 \\<Rightarrow> t\n               | Suc x \\<Rightarrow> \\<Gamma> x))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                            (merge (insert 0 (Suc ` V)) (Suc ` V')\n                              (x, \\<rho>)) *\n                           indicator X\n                            (merge (insert 0 (Suc ` V)) (Suc ` V')\n                              (x, \\<rho>))\n                       \\<partial>Pi\\<^sub>M (insert 0 (Suc ` V))\n                                  (\\<lambda>x.\nstock_measure\n (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)) =\n    \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n          insert_dens V V' f \\<delta>\n           (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)) *\n          indicator X\n           (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>))\n        \\<partial>stock_measure t\n                       \\<partial>Pi\\<^sub>M (Suc ` V)\n                                  (\\<lambda>x.\nstock_measure\n (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x))", "apply (subst product_sigma_finite.product_nn_integral_insert)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> product_sigma_finite\n                       (\\<lambda>x.\n                           stock_measure\n                            (case x of 0 \\<Rightarrow> t\n                             | Suc x \\<Rightarrow> \\<Gamma> x))\n 2. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> finite (Suc ` V)\n 3. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> 0 \\<notin> Suc ` V\n 4. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          insert_dens V V' f \\<delta>\n                           (merge (insert 0 (Suc ` V)) (Suc ` V')\n                             (x, \\<rho>)) *\n                          indicator X\n                           (merge (insert 0 (Suc ` V)) (Suc ` V')\n                             (x, \\<rho>)))\n                      \\<in> borel_measurable\n                             (Pi\\<^sub>M (insert 0 (Suc ` V))\n                               (\\<lambda>x.\n                                   stock_measure\n                                    (case x of 0 \\<Rightarrow> t\n                                     | Suc x \\<Rightarrow> \\<Gamma> x)))\n 5. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. insert_dens V V' f \\<delta>\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>)) *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>))\n                        \\<partial>stock_measure\n                                   (case 0 of 0 \\<Rightarrow> t\n                                    | Suc x \\<Rightarrow> \\<Gamma> x)\n   \\<partial>Pi\\<^sub>M (Suc ` V)\n              (\\<lambda>x.\n                  stock_measure\n                   (case x of 0 \\<Rightarrow> t\n                    | Suc x \\<Rightarrow> \\<Gamma> x)) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. insert_dens V V' f \\<delta>\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>)) *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>Pi\\<^sub>M (Suc ` V)\n              (\\<lambda>x.\n                  stock_measure\n                   (case x of 0 \\<Rightarrow> t\n                    | Suc x \\<Rightarrow> \\<Gamma> x))", "apply (auto simp: product_sigma_finite_def) [3]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          insert_dens V V' f \\<delta>\n                           (merge (insert 0 (Suc ` V)) (Suc ` V')\n                             (x, \\<rho>)) *\n                          indicator X\n                           (merge (insert 0 (Suc ` V)) (Suc ` V')\n                             (x, \\<rho>)))\n                      \\<in> borel_measurable\n                             (Pi\\<^sub>M (insert 0 (Suc ` V))\n                               (\\<lambda>x.\n                                   stock_measure\n                                    (case x of 0 \\<Rightarrow> t\n                                     | Suc x \\<Rightarrow> \\<Gamma> x)))\n 2. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. insert_dens V V' f \\<delta>\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>)) *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>))\n                        \\<partial>stock_measure\n                                   (case 0 of 0 \\<Rightarrow> t\n                                    | Suc x \\<Rightarrow> \\<Gamma> x)\n   \\<partial>Pi\\<^sub>M (Suc ` V)\n              (\\<lambda>x.\n                  stock_measure\n                   (case x of 0 \\<Rightarrow> t\n                    | Suc x \\<Rightarrow> \\<Gamma> x)) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. insert_dens V V' f \\<delta>\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>)) *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>Pi\\<^sub>M (Suc ` V)\n              (\\<lambda>x.\n                  stock_measure\n                   (case x of 0 \\<Rightarrow> t\n                    | Suc x \\<Rightarrow> \\<Gamma> x))", "apply (intro borel_measurable_times_ennreal)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          insert_dens V V' f \\<delta>\n                           (merge (insert 0 (Suc ` V)) (Suc ` V')\n                             (x, \\<rho>)))\n                      \\<in> borel_measurable\n                             (Pi\\<^sub>M (insert 0 (Suc ` V))\n                               (\\<lambda>x.\n                                   stock_measure\n                                    (case x of 0 \\<Rightarrow> t\n                                     | Suc x \\<Rightarrow> \\<Gamma> x)))\n 2. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          indicator X\n                           (merge (insert 0 (Suc ` V)) (Suc ` V')\n                             (x, \\<rho>)))\n                      \\<in> borel_measurable\n                             (Pi\\<^sub>M (insert 0 (Suc ` V))\n                               (\\<lambda>x.\n                                   stock_measure\n                                    (case x of 0 \\<Rightarrow> t\n                                     | Suc x \\<Rightarrow> \\<Gamma> x)))\n 3. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. insert_dens V V' f \\<delta>\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>)) *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>))\n                        \\<partial>stock_measure\n                                   (case 0 of 0 \\<Rightarrow> t\n                                    | Suc x \\<Rightarrow> \\<Gamma> x)\n   \\<partial>Pi\\<^sub>M (Suc ` V)\n              (\\<lambda>x.\n                  stock_measure\n                   (case x of 0 \\<Rightarrow> t\n                    | Suc x \\<Rightarrow> \\<Gamma> x)) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. insert_dens V V' f \\<delta>\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>)) *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>Pi\\<^sub>M (Suc ` V)\n              (\\<lambda>x.\n                  stock_measure\n                   (case x of 0 \\<Rightarrow> t\n                    | Suc x \\<Rightarrow> \\<Gamma> x))", "apply (rule measurable_compose[OF _ measurable_insert_dens'], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>(x, y). f x y)\n                      \\<in> borel_measurable\n                             (Pi\\<^sub>M (V \\<union> V')\n                               (\\<lambda>x.\n                                   stock_measure\n                                    (\\<Gamma> x)) \\<Otimes>\\<^sub>M\n                              stock_measure t)\n 2. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          indicator X\n                           (merge (insert 0 (Suc ` V)) (Suc ` V')\n                             (x, \\<rho>)))\n                      \\<in> borel_measurable\n                             (Pi\\<^sub>M (insert 0 (Suc ` V))\n                               (\\<lambda>x.\n                                   stock_measure\n                                    (case x of 0 \\<Rightarrow> t\n                                     | Suc x \\<Rightarrow> \\<Gamma> x)))\n 3. \\<lbrakk>\\<rho>\n             \\<in> space\n                    (Pi\\<^sub>M (Suc ` V')\n                      (\\<lambda>x.\n                          stock_measure\n                           (case x of 0 \\<Rightarrow> t\n                            | Suc x \\<Rightarrow> \\<Gamma> x)));\n     X \\<in> sets\n              ((case (insert 0 (Suc ` V), Suc ` V', case_nat t \\<Gamma>,\n                      insert_dens V V' f \\<delta>) of\n                (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n                  \\<lambda>\\<rho>.\n                     density\n                      (distr\n                        (Pi\\<^sub>M V\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (Pi\\<^sub>M (V \\<union> V')\n                          (\\<lambda>x. stock_measure (\\<Gamma> x)))\n                        (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n                      \\<delta>)\n                \\<rho>);\n     (\\<lambda>x. merge (insert 0 (Suc ` V)) (Suc ` V') (x, \\<rho>))\n     \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n           Pi\\<^sub>M (insert 0 (Suc ` (V \\<union> V')))\n            (\\<lambda>x.\n                stock_measure\n                 (case x of 0 \\<Rightarrow> t\n                  | Suc x \\<Rightarrow> \\<Gamma> x))\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. insert_dens V V' f \\<delta>\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>)) *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>))\n                        \\<partial>stock_measure\n                                   (case 0 of 0 \\<Rightarrow> t\n                                    | Suc x \\<Rightarrow> \\<Gamma> x)\n   \\<partial>Pi\\<^sub>M (Suc ` V)\n              (\\<lambda>x.\n                  stock_measure\n                   (case x of 0 \\<Rightarrow> t\n                    | Suc x \\<Rightarrow> \\<Gamma> x)) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. insert_dens V V' f \\<delta>\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>)) *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (x(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>Pi\\<^sub>M (Suc ` V)\n              (\\<lambda>x.\n                  stock_measure\n                   (case x of 0 \\<Rightarrow> t\n                    | Suc x \\<Rightarrow> \\<Gamma> x))", "apply (simp_all add: measurable_compose[OF _ borel_measurable_indicator] image_Un)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n        insert_dens V V' f \\<delta>\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)) *\n        indicator X\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>))\n      \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>)) *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n        insert_dens V V' f \\<delta>\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)) *\n        indicator X\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>))\n      \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have \"\\<And>\\<sigma> y. \\<sigma> \\<in> space (state_measure (Suc`V) (case_nat t \\<Gamma>)) \\<Longrightarrow>\n                   y \\<in> space (stock_measure t) \\<Longrightarrow>\n                   (remove_var (merge (insert 0 (Suc ` V)) (Suc ` V') (\\<sigma>(0:=y), \\<rho>))) =\n                       merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> y.\n       \\<lbrakk>\\<sigma>\n                \\<in> space (state_measure (Suc ` V) (case_nat t \\<Gamma>));\n        y \\<in> space (stock_measure t)\\<rbrakk>\n       \\<Longrightarrow> remove_var\n                          (merge (insert 0 (Suc ` V)) (Suc ` V')\n                            (\\<sigma>(0 := y), \\<rho>)) =\n                         merge V V'\n                          (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)", "by (auto simp: merge_def remove_var_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<sigma>\n           \\<in> space (state_measure (Suc ` V) (case_nat t \\<Gamma>));\n   ?y \\<in> space (stock_measure t)\\<rbrakk>\n  \\<Longrightarrow> remove_var\n                     (merge (insert 0 (Suc ` V)) (Suc ` V')\n                       (?\\<sigma>(0 := ?y), \\<rho>)) =\n                    merge V V' (?\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "hence \"?I = \\<integral>\\<^sup>+\\<sigma>. \\<integral>\\<^sup>+y. \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) * f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) y *\n                       indicator X (?m \\<sigma> y)\n                  \\<partial>stock_measure t \\<partial>state_measure (Suc`V) (case_nat t \\<Gamma>)\" (is \"_ = ?I\")"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<sigma>\n           \\<in> space (state_measure (Suc ` V) (case_nat t \\<Gamma>));\n   ?y \\<in> space (stock_measure t)\\<rbrakk>\n  \\<Longrightarrow> remove_var\n                     (merge (insert 0 (Suc ` V)) (Suc ` V')\n                       (?\\<sigma>(0 := ?y), \\<rho>)) =\n                    merge V V' (?\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n          insert_dens V V' f \\<delta>\n           (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)) *\n          indicator X\n           (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>))\n        \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (\\<sigma>(0 := y), \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)", "by (intro nn_integral_cong)\n       (auto simp: insert_dens_def inj_image_mem_iff merge_def split: split_indicator nat.split)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n        insert_dens V V' f \\<delta>\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)) *\n        indicator X\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>))\n      \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ y.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (insert 0 (Suc ` V)) (Suc ` V') (\\<sigma>(0 := y), \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<integral>\\<^sup>+ y.\n        insert_dens V V' f \\<delta>\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>)) *\n        indicator X\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>))\n      \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ y.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (insert 0 (Suc ` V)) (Suc ` V') (\\<sigma>(0 := y), \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have m_eq: \"\\<And>x y. ?m x y = merge (shift_var_set V) (Suc`V') (case_nat y (x \\<circ> Suc), \\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       merge (insert 0 (Suc ` V)) (Suc ` V') (x(0 := y), \\<rho>) =\n       merge (shift_var_set V) (Suc ` V')\n        (case_nat y (x \\<circ> Suc), \\<rho>)", "by (intro ext) (auto simp add: merge_def shift_var_set_def split: nat.split)"], ["proof (state)\nthis:\n  merge (insert 0 (Suc ` V)) (Suc ` V') (?x(0 := ?y), \\<rho>) =\n  merge (shift_var_set V) (Suc ` V') (case_nat ?y (?x \\<circ> Suc), \\<rho>)\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have \"?I = \\<integral>\\<^sup>+\\<sigma>. \\<integral>\\<^sup>+y. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) * f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n                       indicator X (merge (shift_var_set V) (Suc`V') (case_nat y \\<sigma>, \\<rho>))\n                  \\<partial>stock_measure t \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (\\<sigma>(0 := y), \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "using \\<rho> X"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n  X \\<in> sets M\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (insert 0 (Suc ` V)) (Suc ` V') (\\<sigma>(0 := y), \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "apply (subst distr_state_measure_Suc[symmetric, of t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ \\<sigma>.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (\\<sigma>(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>) =\n                      \\<integral>\\<^sup>+ \\<sigma>.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                            f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (shift_var_set V) (Suc ` V')\n                               (case_nat y \\<sigma>, \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>distr (state_measure (Suc ` V) (case_nat t \\<Gamma>))\n              (state_measure V \\<Gamma>)\n              (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)", "apply (subst nn_integral_distr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n                      \\<in> state_measure (Suc ` V)\n                             (case_nat t \\<Gamma>) \\<rightarrow>\\<^sub>M\n                            state_measure V \\<Gamma>\n 2. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          \\<integral>\\<^sup>+ y.\n         \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n         f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n         indicator X\n          (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n       \\<partial>stock_measure t)\n                      \\<in> borel_measurable\n                             (distr\n                               (state_measure (Suc ` V)\n                                 (case_nat t \\<Gamma>))\n                               (state_measure V \\<Gamma>)\n                               (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n 3. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ \\<sigma>.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (\\<sigma>(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (x \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (x \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (shift_var_set V) (Suc ` V')\n                               (case_nat y (x \\<circ> Suc), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)", "apply (rule measurable_case_nat_Suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          \\<integral>\\<^sup>+ y.\n         \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n         f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n         indicator X\n          (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n       \\<partial>stock_measure t)\n                      \\<in> borel_measurable\n                             (distr\n                               (state_measure (Suc ` V)\n                                 (case_nat t \\<Gamma>))\n                               (state_measure V \\<Gamma>)\n                               (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc))\n 2. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ \\<sigma>.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (\\<sigma>(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (x \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (x \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (shift_var_set V) (Suc ` V')\n                               (case_nat y (x \\<circ> Suc), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>\\<sigma>.\n                          \\<integral>\\<^sup>+ y.\n         \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n         f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n         indicator X\n          (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n       \\<partial>stock_measure t)\n                      \\<in> borel_measurable (state_measure V \\<Gamma>)\n 2. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ \\<sigma>.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (\\<sigma>(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (x \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (x \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (shift_var_set V) (Suc ` V')\n                               (case_nat y (x \\<circ> Suc), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)", "apply (rule meas_integral)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<rho>\n             \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n     X \\<in> sets M\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ \\<sigma>.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (insert 0 (Suc ` V)) (Suc ` V')\n                               (\\<sigma>(0 := y), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>) =\n                      \\<integral>\\<^sup>+ x.\n     \\<integral>\\<^sup>+ y. \\<delta>\n                             (merge V V'\n                               (x \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            f (merge V V'\n                                (x \\<circ> Suc, \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (shift_var_set V) (Suc ` V')\n                               (case_nat y (x \\<circ> Suc), \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)", "apply (intro nn_integral_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<rho>\n                \\<in> space\n                       (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n        X \\<in> sets M;\n        x \\<in> space (state_measure (Suc ` V) (case_nat t \\<Gamma>));\n        xa \\<in> space (stock_measure t)\\<rbrakk>\n       \\<Longrightarrow> \\<delta>\n                          (merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                         f (merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc))\n                          xa *\n                         indicator X\n                          (merge (insert 0 (Suc ` V)) (Suc ` V')\n                            (x(0 := xa), \\<rho>)) =\n                         \\<delta>\n                          (merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                         f (merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc))\n                          xa *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V')\n                            (case_nat xa (x \\<circ> Suc), \\<rho>))", "apply (simp add: m_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ y.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (insert 0 (Suc ` V)) (Suc ` V') (\\<sigma>(0 := y), \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ y.\n      \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ y.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (insert 0 (Suc ` V)) (Suc ` V') (\\<sigma>(0 := y), \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ y.\n      \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "have \"... = \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) * \\<integral>\\<^sup>+y. f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n                       indicator X (merge (shift_var_set V) (Suc`V') (case_nat y \\<sigma>, \\<rho>))\n                  \\<partial>stock_measure t \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "using \\<rho> X"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n  X \\<in> sets M\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "apply (intro nn_integral_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<rho>\n                \\<in> space\n                       (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n        X \\<in> sets M; x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (x, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y x, \\<rho>))\n      \\<partial>stock_measure t =\n                         \\<delta> (merge V V' (x, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y x, \\<rho>))\n      \\<partial>stock_measure t", "apply (subst nn_integral_cmult[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<rho>\n                \\<in> space\n                       (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n        X \\<in> sets M; x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>y.\n                             f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n                             indicator X\n                              (merge (shift_var_set V) (Suc ` V')\n                                (case_nat y x, \\<rho>)))\n                         \\<in> borel_measurable (stock_measure t)\n 2. \\<And>x.\n       \\<lbrakk>\\<rho>\n                \\<in> space\n                       (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n        X \\<in> sets M; x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (x, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y x, \\<rho>))\n      \\<partial>stock_measure t =\n                         \\<integral>\\<^sup>+ xa.\n        \\<delta> (merge V V' (x, \\<rho> \\<circ> Suc)) *\n        (f (merge V V' (x, \\<rho> \\<circ> Suc)) xa *\n         indicator X\n          (merge (shift_var_set V) (Suc ` V') (case_nat xa x, \\<rho>)))\n      \\<partial>stock_measure t", "apply (erule meas')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<rho>\n                \\<in> space\n                       (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n        X \\<in> sets M; x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> \\<integral>\\<^sup>+ y.\n        \\<delta> (merge V V' (x, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (x, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y x, \\<rho>))\n      \\<partial>stock_measure t =\n                         \\<integral>\\<^sup>+ xa.\n        \\<delta> (merge V V' (x, \\<rho> \\<circ> Suc)) *\n        (f (merge V V' (x, \\<rho> \\<circ> Suc)) xa *\n         indicator X\n          (merge (shift_var_set V) (Suc ` V') (case_nat xa x, \\<rho>)))\n      \\<partial>stock_measure t", "apply (simp add: mult.assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ y.\n      \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                       \\<integral>\\<^sup>+ y.\n      f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "finally"], ["proof (chain)\npicking this:\n  emeasure M X =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                       \\<integral>\\<^sup>+ y.\n      f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma>", "show ?thesis"], ["proof (prove)\nusing this:\n  emeasure M X =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                       \\<integral>\\<^sup>+ y.\n      f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. emeasure M X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "."], ["proof (state)\nthis:\n  emeasure M X =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) *\n                       \\<integral>\\<^sup>+ y.\n      f (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) y *\n      indicator X\n       (merge (shift_var_set V) (Suc ` V') (case_nat y \\<sigma>, \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma density_context_insert:\n  assumes dens: \"has_parametrized_subprob_density (state_measure (V\\<union>V') \\<Gamma>) F (stock_measure t) f\"\n  shows \"density_context (shift_var_set V) (Suc ` V') (case_nat t \\<Gamma>) (insert_dens V V' f \\<delta>)\"\n             (is \"density_context ?V ?V' ?\\<Gamma>' ?\\<delta>'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context (shift_var_set V) (Suc ` V') (case_nat t \\<Gamma>)\n     (insert_dens V V' f \\<delta>)", "unfolding density_context_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>\\<rho>.\n         \\<rho>\n         \\<in> space\n                (state_measure (Suc ` V')\n                  (case_nat t \\<Gamma>)) \\<longrightarrow>\n         subprob_space\n          (dens_ctxt_measure\n            (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n             insert_dens V V' f \\<delta>)\n            \\<rho>)) \\<and>\n     finite (shift_var_set V)) \\<and>\n    finite (Suc ` V') \\<and>\n    insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (shift_var_set V \\<union> Suc ` V')\n             (case_nat t \\<Gamma>)) \\<and>\n    shift_var_set V \\<inter> Suc ` V' = {}", "proof (intro allI conjI impI)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (shift_var_set V \\<union> Suc ` V')\n             (case_nat t \\<Gamma>))\n 5. shift_var_set V \\<inter> Suc ` V' = {}", "note measurable_insert_dens[OF has_parametrized_subprob_densityD(3)[OF dens]]"], ["proof (state)\nthis:\n  insert_dens V V' f \\<delta>\n  \\<in> borel_measurable\n         (state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (shift_var_set V \\<union> Suc ` V')\n             (case_nat t \\<Gamma>))\n 5. shift_var_set V \\<inter> Suc ` V' = {}", "thus \"insert_dens V V' f \\<delta>\n          \\<in> borel_measurable (state_measure (shift_var_set V \\<union> Suc ` V') (case_nat t \\<Gamma>))\""], ["proof (prove)\nusing this:\n  insert_dens V V' f \\<delta>\n  \\<in> borel_measurable\n         (state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (shift_var_set V \\<union> Suc ` V')\n             (case_nat t \\<Gamma>))", "unfolding shift_var_set_def"], ["proof (prove)\nusing this:\n  insert_dens V V' f \\<delta>\n  \\<in> borel_measurable\n         (state_measure (insert 0 (Suc ` (V \\<union> V')))\n           (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. insert_dens V V' f \\<delta>\n    \\<in> borel_measurable\n           (state_measure (insert 0 (Suc ` V) \\<union> Suc ` V')\n             (case_nat t \\<Gamma>))", "by (simp only: image_Un Un_insert_left)"], ["proof (state)\nthis:\n  insert_dens V V' f \\<delta>\n  \\<in> borel_measurable\n         (state_measure (shift_var_set V \\<union> Suc ` V')\n           (case_nat t \\<Gamma>))\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. shift_var_set V \\<inter> Suc ` V' = {}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. shift_var_set V \\<inter> Suc ` V' = {}", "fix \\<rho>"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. shift_var_set V \\<inter> Suc ` V' = {}", "assume \\<rho>: \"\\<rho> \\<in> space (state_measure ?V' ?\\<Gamma>')\""], ["proof (state)\nthis:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. shift_var_set V \\<inter> Suc ` V' = {}", "hence \\<rho>': \"\\<rho> \\<circ> Suc \\<in> space (state_measure V' \\<Gamma>)\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<rho> \\<circ> Suc \\<in> space (state_measure V' \\<Gamma>)", "by (auto simp: state_measure_def space_PiM dest: PiE_mem)"], ["proof (state)\nthis:\n  \\<rho> \\<circ> Suc \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. shift_var_set V \\<inter> Suc ` V' = {}", "note dens' = has_parametrized_subprob_densityD[OF dens]"], ["proof (state)\nthis:\n  ?x \\<in> space (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n  F ?x = density (stock_measure t) (f ?x)\n  ?x \\<in> space (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n  subprob_space (F ?x)\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t)\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. shift_var_set V \\<inter> Suc ` V' = {}", "note Mf[measurable] = dens'(3)"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t)\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. shift_var_set V \\<inter> Suc ` V' = {}", "have M_merge: \"(\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n                   \\<in> measurable (Pi\\<^sub>M (insert 0 (Suc ` V)) (\\<lambda>y. stock_measure (case_nat t \\<Gamma> y)))\n                                (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n    \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n           (\\<lambda>y.\n               stock_measure\n                (case y of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>)", "using \\<rho>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n    \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n           (\\<lambda>y.\n               stock_measure\n                (case y of 0 \\<Rightarrow> t\n                 | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>)", "by (subst shift_var_set_Un[symmetric], unfold state_measure_def)\n               (simp add: shift_var_set_def del: shift_var_set_Un Un_insert_left)"], ["proof (state)\nthis:\n  (\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n  \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n         (\\<lambda>y.\n             stock_measure\n              (case y of 0 \\<Rightarrow> t\n               | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n        state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (Suc ` V')\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       subprob_space\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          \\<rho>)\n 2. finite (shift_var_set V)\n 3. finite (Suc ` V')\n 4. shift_var_set V \\<inter> Suc ` V' = {}", "show \"subprob_space (dens_ctxt_measure (?V,?V',?\\<Gamma>',?\\<delta>') \\<rho>)\" (is \"subprob_space ?M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. subprob_space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)", "proof (rule subprob_spaceI)"], ["proof (state)\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "interpret product_sigma_finite \"(\\<lambda>y. stock_measure (case y of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. product_sigma_finite\n     (\\<lambda>y.\n         stock_measure\n          (case y of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x))", "by (simp add: product_sigma_finite_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have Suc_state_measure:\n      \"\\<And>x. x \\<in> space (state_measure (Suc ` V) (case_nat t \\<Gamma>)) \\<Longrightarrow>\n              merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc) \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (state_measure (Suc ` V)\n                  (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc)\n       \\<in> space (state_measure (V \\<union> V') \\<Gamma>)", "using \\<rho>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space\n                (state_measure (Suc ` V)\n                  (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc)\n       \\<in> space (state_measure (V \\<union> V') \\<Gamma>)", "by (intro merge_in_state_measure) (auto simp: state_measure_def space_PiM dest: PiE_mem)"], ["proof (state)\nthis:\n  ?x \\<in> space\n            (state_measure (Suc ` V)\n              (case_nat t \\<Gamma>)) \\<Longrightarrow>\n  merge V V' (?x \\<circ> Suc, \\<rho> \\<circ> Suc)\n  \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have S[simp]: \"\\<And>x X. Suc x \\<in> Suc ` X \\<longleftrightarrow> x \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x X. (Suc x \\<in> Suc ` X) = (x \\<in> X)", "by (rule inj_image_mem_iff) simp"], ["proof (state)\nthis:\n  (Suc ?x \\<in> Suc ` ?X) = (?x \\<in> ?X)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "let ?M = \"dens_ctxt_measure (?V,?V',?\\<Gamma>',?\\<delta>') \\<rho>\""], ["proof (state)\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))", "have \"\\<And>\\<sigma>. \\<sigma> \\<in> space (state_measure ?V ?\\<Gamma>') \\<Longrightarrow> merge ?V ?V' (\\<sigma>, \\<rho>) \\<in> space ?M\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<sigma>\n       \\<in> space\n              (state_measure (shift_var_set V)\n                (case_nat t \\<Gamma>)) \\<Longrightarrow>\n       merge (shift_var_set V) (Suc ` V') (\\<sigma>, \\<rho>)\n       \\<in> space\n              (dens_ctxt_measure\n                (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                 insert_dens V V' f \\<delta>)\n                \\<rho>)", "by (auto simp: dens_ctxt_measure_def state_measure'_def simp del: shift_var_set_Un\n               intro!: merge_in_state_measure)"], ["proof (state)\nthis:\n  ?\\<sigma>\n  \\<in> space\n         (state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>)) \\<Longrightarrow>\n  merge (shift_var_set V) (Suc ` V') (?\\<sigma>, \\<rho>)\n  \\<in> space\n         (dens_ctxt_measure\n           (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n            insert_dens V V' f \\<delta>)\n           \\<rho>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "hence \"emeasure ?M (space ?M) =\n            \\<integral>\\<^sup>+\\<sigma>. insert_dens V V' f \\<delta> (merge ?V ?V' (\\<sigma>, \\<rho>)) \\<partial>state_measure ?V ?\\<Gamma>'\""], ["proof (prove)\nusing this:\n  ?\\<sigma>\n  \\<in> space\n         (state_measure (shift_var_set V)\n           (case_nat t \\<Gamma>)) \\<Longrightarrow>\n  merge (shift_var_set V) (Suc ` V') (?\\<sigma>, \\<rho>)\n  \\<in> space\n         (dens_ctxt_measure\n           (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n            insert_dens V V' f \\<delta>)\n           \\<rho>)\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V')\n                            (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>)", "by (subst emeasure_dens_ctxt_measure_insert[OF dens \\<rho>], simp, intro nn_integral_cong)\n        (simp split: split_indicator)"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       insert_dens V V' f \\<delta>\n                        (merge (shift_var_set V) (Suc ` V')\n                          (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       insert_dens V V' f \\<delta>\n                        (merge (shift_var_set V) (Suc ` V')\n                          (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"... = \\<integral>\\<^sup>+\\<sigma>. insert_dens V V' f \\<delta> (merge ?V ?V' (\\<sigma>, \\<rho>))\n                              \\<partial>state_measure (insert 0 (Suc ` V)) ?\\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V')\n                            (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure (shift_var_set V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V')\n                            (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure (insert 0 (Suc ` V))\n                                  (case_nat t \\<Gamma>)", "by (simp add: shift_var_set_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       insert_dens V V' f \\<delta>\n                        (merge (shift_var_set V) (Suc ` V')\n                          (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       insert_dens V V' f \\<delta>\n                        (merge (shift_var_set V) (Suc ` V')\n                          (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure (insert 0 (Suc ` V))\n                                (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       insert_dens V V' f \\<delta>\n                        (merge (shift_var_set V) (Suc ` V')\n                          (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure (shift_var_set V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       insert_dens V V' f \\<delta>\n                        (merge (shift_var_set V) (Suc ` V')\n                          (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure (insert 0 (Suc ` V))\n                                (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"... = \\<integral>\\<^sup>+\\<sigma>. \\<integral>\\<^sup>+x. insert_dens V V' f \\<delta> (merge ?V ?V' (\\<sigma>(0 := x), \\<rho>))\n                       \\<partial>stock_measure t \\<partial>state_measure (Suc ` V) ?\\<Gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V')\n                            (\\<sigma>, \\<rho>))\n                       \\<partial>state_measure (insert 0 (Suc ` V))\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        insert_dens V V' f \\<delta>\n         (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)", "unfolding state_measure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V')\n                            (\\<sigma>, \\<rho>))\n                       \\<partial>Pi\\<^sub>M (insert 0 (Suc ` V))\n                                  (\\<lambda>x.\nstock_measure\n (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        insert_dens V V' f \\<delta>\n         (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>Pi\\<^sub>M (Suc ` V)\n                                  (\\<lambda>x.\nstock_measure\n (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x))", "using M_merge"], ["proof (prove)\nusing this:\n  (\\<lambda>x. merge (shift_var_set V) (Suc ` V') (x, \\<rho>))\n  \\<in> Pi\\<^sub>M (insert 0 (Suc ` V))\n         (\\<lambda>y.\n             stock_measure\n              (case y of 0 \\<Rightarrow> t\n               | Suc x \\<Rightarrow> \\<Gamma> x)) \\<rightarrow>\\<^sub>M\n        state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         insert_dens V V' f \\<delta>\n                          (merge (shift_var_set V) (Suc ` V')\n                            (\\<sigma>, \\<rho>))\n                       \\<partial>Pi\\<^sub>M (insert 0 (Suc ` V))\n                                  (\\<lambda>x.\nstock_measure\n (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        insert_dens V V' f \\<delta>\n         (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>Pi\\<^sub>M (Suc ` V)\n                                  (\\<lambda>x.\nstock_measure\n (case x of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x))", "by (subst product_nn_integral_insert) auto"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       insert_dens V V' f \\<delta>\n                        (merge (shift_var_set V) (Suc ` V')\n                          (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure (insert 0 (Suc ` V))\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      insert_dens V V' f \\<delta>\n       (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       insert_dens V V' f \\<delta>\n                        (merge (shift_var_set V) (Suc ` V')\n                          (\\<sigma>, \\<rho>))\n                     \\<partial>state_measure (insert 0 (Suc ` V))\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      insert_dens V V' f \\<delta>\n       (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"... = \\<integral>\\<^sup>+\\<sigma>. \\<integral>\\<^sup>+x. \\<delta> (remove_var (merge ?V ?V' (\\<sigma>(0:=x), \\<rho>))) *\n                               f (remove_var (merge ?V ?V' (\\<sigma>(0:=x), \\<rho>))) x\n                        \\<partial>stock_measure t \\<partial>state_measure (Suc ` V) ?\\<Gamma>'\" (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        insert_dens V V' f \\<delta>\n         (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        \\<delta>\n         (remove_var\n           (merge (shift_var_set V) (Suc ` V')\n             (\\<sigma>(0 := x), \\<rho>))) *\n        f (remove_var\n            (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>)))\n         x\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)", "by (intro nn_integral_cong) (auto simp: insert_dens_def merge_def shift_var_set_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      insert_dens V V' f \\<delta>\n       (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta>\n       (remove_var\n         (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))) *\n      f (remove_var\n          (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>)))\n       x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      insert_dens V V' f \\<delta>\n       (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta>\n       (remove_var\n         (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))) *\n      f (remove_var\n          (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>)))\n       x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"\\<And>\\<sigma> x. remove_var (merge ?V ?V' (\\<sigma>(0:=x), \\<rho>)) = merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> x.\n       remove_var\n        (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>)) =\n       merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)", "by (intro ext) (auto simp: remove_var_def merge_def shift_var_set_def o_def)"], ["proof (state)\nthis:\n  remove_var\n   (merge (shift_var_set V) (Suc ` V') (?\\<sigma>(0 := ?x), \\<rho>)) =\n  merge V V' (?\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "hence \"?I = \\<integral>\\<^sup>+\\<sigma>. \\<integral>\\<^sup>+x. \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) * f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n                  \\<partial>stock_measure t \\<partial>state_measure (Suc ` V) ?\\<Gamma>'\""], ["proof (prove)\nusing this:\n  remove_var\n   (merge (shift_var_set V) (Suc ` V') (?\\<sigma>(0 := ?x), \\<rho>)) =\n  merge V V' (?\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        \\<delta>\n         (remove_var\n           (merge (shift_var_set V) (Suc ` V')\n             (\\<sigma>(0 := x), \\<rho>))) *\n        f (remove_var\n            (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>)))\n         x\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta>\n       (remove_var\n         (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))) *\n      f (remove_var\n          (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>)))\n       x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta>\n       (remove_var\n         (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>))) *\n      f (remove_var\n          (merge (shift_var_set V) (Suc ` V') (\\<sigma>(0 := x), \\<rho>)))\n       x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"... = \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                            (\\<integral>\\<^sup>+x. f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x \\<partial>stock_measure t)\n                       \\<partial>state_measure (Suc ` V) ?\\<Gamma>'\" (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V'\n                            (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                         integral\\<^sup>N (stock_measure t)\n                          (f (merge V V'\n                               (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)", "using \\<rho> disjoint"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n  V \\<inter> V' = {}\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<integral>\\<^sup>+ x.\n        \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n        f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n      \\<partial>stock_measure t\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V'\n                            (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                         integral\\<^sup>N (stock_measure t)\n                          (f (merge V V'\n                               (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)", "apply (intro nn_integral_cong nn_integral_cmult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<rho>\n                \\<in> space\n                       (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n        V \\<inter> V' = {};\n        x \\<in> space\n                 (state_measure (Suc ` V) (case_nat t \\<Gamma>))\\<rbrakk>\n       \\<Longrightarrow> f (merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc))\n                         \\<in> borel_measurable (stock_measure t)", "apply (rule measurable_Pair_compose_split[OF Mf], rule measurable_const)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<rho>\n                \\<in> space\n                       (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n        V \\<inter> V' = {};\n        x \\<in> space\n                 (state_measure (Suc ` V) (case_nat t \\<Gamma>))\\<rbrakk>\n       \\<Longrightarrow> merge V V' (x \\<circ> Suc, \\<rho> \\<circ> Suc)\n                         \\<in> space\n                                (state_measure (V \\<union> V') \\<Gamma>)\n 2. \\<And>x.\n       \\<lbrakk>\\<rho>\n                \\<in> space\n                       (state_measure (Suc ` V') (case_nat t \\<Gamma>));\n        V \\<inter> V' = {};\n        x \\<in> space\n                 (state_measure (Suc ` V) (case_nat t \\<Gamma>))\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. x)\n                         \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n                               stock_measure t", "apply (auto intro!: Suc_state_measure)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V'\n                          (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                       integral\\<^sup>N (stock_measure t)\n                        (f (merge V V'\n                             (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V'\n                          (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                       integral\\<^sup>N (stock_measure t)\n                        (f (merge V V'\n                             (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "{"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<integral>\\<^sup>+ x.\n      \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n      f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x\n    \\<partial>stock_measure t\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V'\n                          (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                       integral\\<^sup>N (stock_measure t)\n                        (f (merge V V'\n                             (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "fix \\<sigma>"], ["proof (state)\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "assume \\<sigma>: \"\\<sigma> \\<in> space (state_measure (Suc ` V) ?\\<Gamma>')\""], ["proof (state)\nthis:\n  \\<sigma> \\<in> space (state_measure (Suc ` V) (case_nat t \\<Gamma>))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "let ?\\<sigma>' = \"merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)\""], ["proof (state)\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "let ?N = \"density (stock_measure t) (f ?\\<sigma>')\""], ["proof (state)\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"(\\<integral>\\<^sup>+x. f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x \\<partial>stock_measure t) = emeasure ?N (space ?N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure t)\n     (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))) =\n    emeasure\n     (density (stock_measure t)\n       (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))))\n     (space\n       (density (stock_measure t)\n         (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))))", "using dens'(3) Suc_state_measure[OF \\<sigma>]"], ["proof (prove)\nusing this:\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t)\n  merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)\n  \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure t)\n     (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))) =\n    emeasure\n     (density (stock_measure t)\n       (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))))\n     (space\n       (density (stock_measure t)\n         (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))))", "by (simp_all cong: nn_integral_cong' add: emeasure_density)"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure t)\n   (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))) =\n  emeasure\n   (density (stock_measure t)\n     (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))))\n   (space\n     (density (stock_measure t)\n       (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure t)\n   (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))) =\n  emeasure\n   (density (stock_measure t)\n     (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))))\n   (space\n     (density (stock_measure t)\n       (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"?N = F ?\\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density (stock_measure t)\n     (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))) =\n    F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))", "by (subst dens') (simp_all add: Suc_state_measure \\<sigma>)"], ["proof (state)\nthis:\n  density (stock_measure t)\n   (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))) =\n  F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  density (stock_measure t)\n   (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))) =\n  F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"subprob_space (F ?\\<sigma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subprob_space\n     (F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))", "by (rule dens') (simp_all add: Suc_state_measure \\<sigma>)"], ["proof (state)\nthis:\n  subprob_space (F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "hence \"emeasure (F ?\\<sigma>') (space (F ?\\<sigma>')) \\<le> 1\""], ["proof (prove)\nusing this:\n  subprob_space (F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n\ngoal (1 subgoal):\n 1. emeasure (F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n     (space (F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))))\n    \\<le> 1", "by (rule subprob_space.emeasure_space_le_1)"], ["proof (state)\nthis:\n  emeasure (F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n   (space (F (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc))))\n  \\<le> 1\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (stock_measure t)\n   (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n  \\<le> 1", "have \"(\\<integral>\\<^sup>+x. f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) x \\<partial>stock_measure t) \\<le> 1\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N (stock_measure t)\n   (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (stock_measure t)\n     (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n    \\<le> 1", "."], ["proof (state)\nthis:\n  integral\\<^sup>N (stock_measure t)\n   (f (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n  \\<le> 1\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "}"], ["proof (state)\nthis:\n  ?\\<sigma>2\n  \\<in> space\n         (state_measure (Suc ` V) (case_nat t \\<Gamma>)) \\<Longrightarrow>\n  integral\\<^sup>N (stock_measure t)\n   (f (merge V V' (?\\<sigma>2 \\<circ> Suc, \\<rho> \\<circ> Suc)))\n  \\<le> 1\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "hence \"?I \\<le> \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) * 1 \\<partial>state_measure (Suc ` V) ?\\<Gamma>'\""], ["proof (prove)\nusing this:\n  ?\\<sigma>2\n  \\<in> space\n         (state_measure (Suc ` V) (case_nat t \\<Gamma>)) \\<Longrightarrow>\n  integral\\<^sup>N (stock_measure t)\n   (f (merge V V' (?\\<sigma>2 \\<circ> Suc, \\<rho> \\<circ> Suc)))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V'\n                            (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                         integral\\<^sup>N (stock_measure t)\n                          (f (merge V V'\n                               (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>)\n    \\<le> \\<integral>\\<^sup>+ \\<sigma>.\n                               \\<delta>\n                                (merge V V'\n                                  (\\<sigma> \\<circ> Suc,\n                                   \\<rho> \\<circ> Suc)) *\n                               1\n                             \\<partial>state_measure (Suc ` V)\n  (case_nat t \\<Gamma>)", "by (intro nn_integral_mono mult_left_mono) (simp_all add: Suc_state_measure)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V'\n                          (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                       integral\\<^sup>N (stock_measure t)\n                        (f (merge V V'\n                             (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n  \\<le> \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma> \\<circ> Suc,\n                                 \\<rho> \\<circ> Suc)) *\n                             1\n                           \\<partial>state_measure (Suc ` V)\n(case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V'\n                          (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                       integral\\<^sup>N (stock_measure t)\n                        (f (merge V V'\n                             (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)))\n                     \\<partial>state_measure (Suc ` V) (case_nat t \\<Gamma>)\n  \\<le> \\<integral>\\<^sup>+ \\<sigma>.\n                             \\<delta>\n                              (merge V V'\n                                (\\<sigma> \\<circ> Suc,\n                                 \\<rho> \\<circ> Suc)) *\n                             1\n                           \\<partial>state_measure (Suc ` V)\n(case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"... = \\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                       \\<partial>distr (state_measure (Suc ` V) ?\\<Gamma>') (state_measure V \\<Gamma>) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\"\n      (is \"_ = nn_integral ?N _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V'\n                            (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                         1\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                       \\<partial>distr\n                                  (state_measure (Suc ` V)\n                                    (case_nat t \\<Gamma>))\n                                  (state_measure V \\<Gamma>)\n                                  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)", "using \\<rho>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V'\n                            (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                         1\n                       \\<partial>state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>) =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                       \\<partial>distr\n                                  (state_measure (Suc ` V)\n                                    (case_nat t \\<Gamma>))\n                                  (state_measure V \\<Gamma>)\n                                  (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)", "by (subst nn_integral_distr) (simp_all add: measurable_case_nat_Suc merge_Suc_aux)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V'\n                          (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                       1\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                     \\<partial>distr\n                                (state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>))\n                                (state_measure V \\<Gamma>)\n                                (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta>\n                        (merge V V'\n                          (\\<sigma> \\<circ> Suc, \\<rho> \\<circ> Suc)) *\n                       1\n                     \\<partial>state_measure (Suc ` V)\n                                (case_nat t \\<Gamma>) =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                     \\<partial>distr\n                                (state_measure (Suc ` V)\n                                  (case_nat t \\<Gamma>))\n                                (state_measure V \\<Gamma>)\n                                (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"?N = state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (state_measure (Suc ` V) (case_nat t \\<Gamma>))\n     (state_measure V \\<Gamma>) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n    state_measure V \\<Gamma>", "by (rule distr_state_measure_Suc)"], ["proof (state)\nthis:\n  distr (state_measure (Suc ` V) (case_nat t \\<Gamma>))\n   (state_measure V \\<Gamma>) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n  state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  distr (state_measure (Suc ` V) (case_nat t \\<Gamma>))\n   (state_measure V \\<Gamma>) (\\<lambda>\\<sigma>. \\<sigma> \\<circ> Suc) =\n  state_measure V \\<Gamma>\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"(\\<integral>\\<^sup>+\\<sigma>. \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc)) \\<partial>state_measure V \\<Gamma>) =\n                   (\\<integral>\\<^sup>+\\<sigma>. 1 \\<partial>dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\" (is \"_ = nn_integral ?N _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>. 1\n                       \\<partial>dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)", "by (subst nn_integral_dens_ctxt_measure) (simp_all add: \\<rho>')"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>. 1\n                     \\<partial>dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       \\<delta> (merge V V' (\\<sigma>, \\<rho> \\<circ> Suc))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ \\<sigma>. 1\n                     \\<partial>dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"... = (\\<integral>\\<^sup>+\\<sigma>. indicator (space ?N) \\<sigma> \\<partial>?N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>. 1\n                       \\<partial>dens_ctxt_measure \\<Y>\n                                  (\\<rho> \\<circ> Suc) =\n    integral\\<^sup>N (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n     (indicator (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))))", "by (intro nn_integral_cong) (simp split: split_indicator)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>. 1\n                     \\<partial>dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc) =\n  integral\\<^sup>N (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n   (indicator (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>. 1\n                     \\<partial>dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc) =\n  integral\\<^sup>N (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n   (indicator (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"... = emeasure ?N (space ?N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n     (indicator (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)))) =\n    emeasure (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n     (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)))", "by simp"], ["proof (state)\nthis:\n  integral\\<^sup>N (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n   (indicator (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)))) =\n  emeasure (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n   (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n   (indicator (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)))) =\n  emeasure (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n   (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)))\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "have \"... \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n     (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)))\n    \\<le> 1", "by (simp_all add: subprob_space.emeasure_space_le_1 subprob_space_dens \\<rho>')"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc))\n   (space (dens_ctxt_measure \\<Y> (\\<rho> \\<circ> Suc)))\n  \\<le> 1\n\ngoal (2 subgoals):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1\n 2. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "finally"], ["proof (chain)\npicking this:\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V',\n      \\<lambda>a.\n         case a of 0 \\<Rightarrow> t | Suc a \\<Rightarrow> \\<Gamma> a,\n      insert_dens V V' f \\<delta>)\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V',\n        \\<lambda>a.\n           case a of 0 \\<Rightarrow> t | Suc a \\<Rightarrow> \\<Gamma> a,\n        insert_dens V V' f \\<delta>)\n       \\<rho>))\n  \\<le> 1", "show \"emeasure ?M (space ?M) \\<le> 1\""], ["proof (prove)\nusing this:\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V',\n      \\<lambda>a.\n         case a of 0 \\<Rightarrow> t | Suc a \\<Rightarrow> \\<Gamma> a,\n      insert_dens V V' f \\<delta>)\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V',\n        \\<lambda>a.\n           case a of 0 \\<Rightarrow> t | Suc a \\<Rightarrow> \\<Gamma> a,\n        insert_dens V V' f \\<delta>)\n       \\<rho>))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>)\n     (space\n       (dens_ctxt_measure\n         (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n          insert_dens V V' f \\<delta>)\n         \\<rho>))\n    \\<le> 1", "."], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     \\<rho>)\n   (space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. space\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       \\<rho>) \\<noteq>\n    {}", "qed (simp_all add: space_dens_ctxt_measure state_measure_def space_PiM PiE_eq_empty_iff)"], ["proof (state)\nthis:\n  subprob_space\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     \\<rho>)\n\ngoal (3 subgoals):\n 1. finite (shift_var_set V)\n 2. finite (Suc ` V')\n 3. shift_var_set V \\<inter> Suc ` V' = {}", "qed (insert disjoint, auto simp: shift_var_set_def)"], ["", "lemma dens_ctxt_measure_insert:\n  assumes \\<rho>: \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  assumes meas_M: \"M \\<in> measurable (state_measure (V\\<union>V') \\<Gamma>) (subprob_algebra (stock_measure t))\"\n  assumes meas_f[measurable]: \"case_prod f \\<in> borel_measurable (state_measure (V\\<union>V') \\<Gamma> \\<Otimes>\\<^sub>M stock_measure t)\"\n  assumes has_dens: \"\\<And>\\<rho>. \\<rho> \\<in> space (state_measure (V\\<union>V') \\<Gamma>) \\<Longrightarrow>\n                         has_subprob_density (M \\<rho>) (stock_measure t) (f \\<rho>)\"\n  shows \"do {\\<sigma> \\<leftarrow> dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>;\n             y \\<leftarrow> M \\<sigma>;\n             return (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)) (case_nat y \\<sigma>)} =\n         dens_ctxt_measure (shift_var_set V, Suc`V', case_nat t \\<Gamma>, insert_dens V V' f \\<delta>)\n                           (case_nat undefined \\<rho>)\"\n         (is \"bind ?N (\\<lambda>_. bind _ (\\<lambda>_. return ?R _)) = dens_ctxt_measure (?V,?V',?\\<Gamma>',?\\<delta>') _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>))) =\n    dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     (case_nat undefined \\<rho>)", "proof (intro measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "let ?lhs = \"?N \\<bind> (\\<lambda>\\<sigma> . M \\<sigma> \\<bind> (\\<lambda>y. return ?R (case_nat y \\<sigma>)))\""], ["proof (state)\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "let ?rhs = \"dens_ctxt_measure (?V,?V',?\\<Gamma>',?\\<delta>') (case_nat undefined \\<rho>)\""], ["proof (state)\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have meas_f': \"\\<And>M g h. g \\<in> measurable M (state_measure (V\\<union>V') \\<Gamma>) \\<Longrightarrow>\n                         h \\<in> measurable M (stock_measure t) \\<Longrightarrow>\n                         (\\<lambda>x. f (g x) (h x)) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M g h.\n       \\<lbrakk>g \\<in> M \\<rightarrow>\\<^sub>M\n                        state_measure (V \\<union> V') \\<Gamma>;\n        h \\<in> M \\<rightarrow>\\<^sub>M stock_measure t\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. f (g x) (h x))\n                         \\<in> borel_measurable M", "by measurable"], ["proof (state)\nthis:\n  \\<lbrakk>?g \\<in> ?M \\<rightarrow>\\<^sub>M\n                    state_measure (V \\<union> V') \\<Gamma>;\n   ?h \\<in> ?M \\<rightarrow>\\<^sub>M stock_measure t\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x. f (?g x) (?h x)) \\<in> borel_measurable ?M\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have t: \"t = ?\\<Gamma>' 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = (case 0 of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)", "by simp"], ["proof (state)\nthis:\n  t = (case 0 of 0 \\<Rightarrow> t | Suc x \\<Rightarrow> \\<Gamma> x)\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have nonempty: \"space ?N \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (dens_ctxt_measure \\<Y> \\<rho>) \\<noteq> {}", "by (auto simp: dens_ctxt_measure_def state_measure'_def state_measure_def\n                     space_PiM PiE_eq_empty_iff)"], ["proof (state)\nthis:\n  space (dens_ctxt_measure \\<Y> \\<rho>) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have meas_N_eq: \"measurable ?N = measurable (state_measure (V\\<union>V') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<rightarrow>\\<^sub>M) (dens_ctxt_measure \\<Y> \\<rho>) =\n    (\\<rightarrow>\\<^sub>M) (state_measure (V \\<union> V') \\<Gamma>)", "by (intro ext measurable_cong_sets) (auto simp: dens_ctxt_measure_def state_measure'_def)"], ["proof (state)\nthis:\n  (\\<rightarrow>\\<^sub>M) (dens_ctxt_measure \\<Y> \\<rho>) =\n  (\\<rightarrow>\\<^sub>M) (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have meas_M': \"M \\<in> measurable ?N (subprob_algebra (stock_measure t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<in> dens_ctxt_measure \\<Y> \\<rho> \\<rightarrow>\\<^sub>M\n            subprob_algebra (stock_measure t)", "by (subst meas_N_eq) (rule meas_M)"], ["proof (state)\nthis:\n  M \\<in> dens_ctxt_measure \\<Y> \\<rho> \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t)\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have meas_N': \"\\<And>R. measurable (?N \\<Otimes>\\<^sub>M R) = measurable (state_measure (V\\<union>V') \\<Gamma> \\<Otimes>\\<^sub>M R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>R.\n       (\\<rightarrow>\\<^sub>M)\n        (dens_ctxt_measure \\<Y> \\<rho> \\<Otimes>\\<^sub>M R) =\n       (\\<rightarrow>\\<^sub>M)\n        (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M R)", "by (intro ext measurable_cong_sets[OF _ refl] sets_pair_measure_cong)\n       (simp_all add: dens_ctxt_measure_def state_measure'_def)"], ["proof (state)\nthis:\n  (\\<rightarrow>\\<^sub>M)\n   (dens_ctxt_measure \\<Y> \\<rho> \\<Otimes>\\<^sub>M ?R2) =\n  (\\<rightarrow>\\<^sub>M)\n   (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M ?R2)\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have meas_M_eq: \"\\<And>\\<rho>. \\<rho> \\<in> space ?N \\<Longrightarrow> measurable (M \\<rho>) = measurable (stock_measure t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<rho>'.\n       \\<rho>' \\<in> space (dens_ctxt_measure \\<Y> \\<rho>) \\<Longrightarrow>\n       (\\<rightarrow>\\<^sub>M) (M \\<rho>') =\n       (\\<rightarrow>\\<^sub>M) (stock_measure t)", "by (intro ext measurable_cong_sets sets_kernel[OF meas_M']) simp_all"], ["proof (state)\nthis:\n  ?\\<rho>3 \\<in> space (dens_ctxt_measure \\<Y> \\<rho>) \\<Longrightarrow>\n  (\\<rightarrow>\\<^sub>M) (M ?\\<rho>3) =\n  (\\<rightarrow>\\<^sub>M) (stock_measure t)\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have meas_rhs: \"\\<And>M. measurable M ?rhs = measurable M ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       M \\<rightarrow>\\<^sub>M\n       dens_ctxt_measure\n        (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n         insert_dens V V' f \\<delta>)\n        (case_nat undefined \\<rho>) =\n       M \\<rightarrow>\\<^sub>M\n       state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)", "by (intro ext measurable_cong_sets) (simp_all add: dens_ctxt_measure_def state_measure'_def)"], ["proof (state)\nthis:\n  ?M4 \\<rightarrow>\\<^sub>M\n  dens_ctxt_measure\n   (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n    insert_dens V V' f \\<delta>)\n   (case_nat undefined \\<rho>) =\n  ?M4 \\<rightarrow>\\<^sub>M\n  state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>)\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have subprob_algebra_rhs: \"subprob_algebra ?rhs = subprob_algebra (state_measure (shift_var_set (V\\<union>V')) ?\\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subprob_algebra\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>)) =\n    subprob_algebra\n     (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. subprob_algebra\n     ((case (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n             insert_dens V V' f \\<delta>) of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       (case_nat undefined \\<rho>)) =\n    subprob_algebra\n     (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))", "by (intro subprob_algebra_cong) auto"], ["proof (state)\nthis:\n  subprob_algebra\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     (case_nat undefined \\<rho>)) =\n  subprob_algebra\n   (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have nonempty': \"\\<And>\\<rho>. \\<rho> \\<in> space ?N \\<Longrightarrow> space (M \\<rho>) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<rho>'.\n       \\<rho>' \\<in> space (dens_ctxt_measure \\<Y> \\<rho>) \\<Longrightarrow>\n       space (M \\<rho>') \\<noteq> {}", "by (rule subprob_space.subprob_not_empty)\n       (auto dest: has_subprob_densityD has_dens simp: space_dens_ctxt_measure)"], ["proof (state)\nthis:\n  ?\\<rho>5 \\<in> space (dens_ctxt_measure \\<Y> \\<rho>) \\<Longrightarrow>\n  space (M ?\\<rho>5) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have merge_in_space: \"\\<And>x. x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n                              merge V V' (x, \\<rho>) \\<in> space (dens_ctxt_measure \\<Y> \\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       merge V V' (x, \\<rho>) \\<in> space (dens_ctxt_measure \\<Y> \\<rho>)", "by (simp add: space_dens_ctxt_measure merge_in_state_measure \\<rho>)"], ["proof (state)\nthis:\n  ?x5 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  merge V V' (?x5, \\<rho>) \\<in> space (dens_ctxt_measure \\<Y> \\<rho>)\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have \"sets ?lhs = sets (state_measure (shift_var_set (V \\<union> V')) ?\\<Gamma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))", "using nonempty'"], ["proof (prove)\nusing this:\n  ?\\<rho>5 \\<in> space (dens_ctxt_measure \\<Y> \\<rho>) \\<Longrightarrow>\n  space (M ?\\<rho>5) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))", "by (subst sets_bind, subst sets_bind) auto"], ["proof (state)\nthis:\n  sets\n   (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>)))) =\n  sets (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\n\ngoal (2 subgoals):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "thus sets_eq: \"sets ?lhs = sets ?rhs\""], ["proof (prove)\nusing this:\n  sets\n   (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>)))) =\n  sets (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. sets\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  sets\n   ((case \\<Y> of\n     (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n       \\<lambda>\\<rho>.\n          density\n           (distr (state_measure V \\<Gamma>)\n             (state_measure (V \\<union> V') \\<Gamma>)\n             (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n           \\<delta>)\n     \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>)))) =\n  sets (state_measure (shift_var_set (V \\<union> V')) (case_nat t \\<Gamma>))\n\ngoal (1 subgoal):\n 1. sets\n     ((case \\<Y> of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))) =\n    sets\n     ((case (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n             insert_dens V V' f \\<delta>) of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       (case_nat undefined \\<rho>))", "by simp"], ["proof (state)\nthis:\n  sets\n   (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>)))) =\n  sets\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     (case_nat undefined \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have meas_merge[measurable]:\n    \"(\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)) \\<in> measurable (state_measure V \\<Gamma>) (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (V \\<union> V') \\<Gamma>", "using \\<rho>"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (V \\<union> V') \\<Gamma>", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  \\<rho>\n  \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n    \\<in> Pi\\<^sub>M V\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (V \\<union> V')\n           (\\<lambda>x. stock_measure (\\<Gamma> x))", "by - measurable"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (V \\<union> V') \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "assume \"X \\<in> sets ?lhs\""], ["proof (state)\nthis:\n  X \\<in> sets\n           (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n            (\\<lambda>\\<sigma>.\n                M \\<sigma> \\<bind>\n                (\\<lambda>y.\n                    return\n                     (state_measure (shift_var_set (V \\<union> V'))\n                       (case_nat t \\<Gamma>))\n                     (case_nat y \\<sigma>))))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "hence X: \"X \\<in> sets ?rhs\""], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n            (\\<lambda>\\<sigma>.\n                M \\<sigma> \\<bind>\n                (\\<lambda>y.\n                    return\n                     (state_measure (shift_var_set (V \\<union> V'))\n                       (case_nat t \\<Gamma>))\n                     (case_nat y \\<sigma>))))\n\ngoal (1 subgoal):\n 1. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>))", "by (simp add: sets_eq)"], ["proof (state)\nthis:\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             (case_nat undefined \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "hence \"emeasure ?lhs X = \\<integral>\\<^sup>+\\<sigma>. emeasure (M \\<sigma> \\<bind> (\\<lambda>y. return ?R (case_nat y \\<sigma>))) X \\<partial>?N\""], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             (case_nat undefined \\<rho>))\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>))))\n     X =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         emeasure\n                          (M \\<sigma> \\<bind>\n                           (\\<lambda>y.\n                               return\n                                (state_measure\n                                  (shift_var_set (V \\<union> V'))\n                                  (case_nat t \\<Gamma>))\n                                (case_nat y \\<sigma>)))\n                          X\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho>", "by (intro emeasure_bind measurable_bind[OF meas_M'])\n       (simp, rule measurable_compose[OF _ return_measurable],\n        simp_all add: dens_ctxt_measure_def state_measure'_def)"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>))))\n   X =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       emeasure\n                        (M \\<sigma> \\<bind>\n                         (\\<lambda>y.\n                             return\n                              (state_measure (shift_var_set (V \\<union> V'))\n                                (case_nat t \\<Gamma>))\n                              (case_nat y \\<sigma>)))\n                        X\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "also"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>))))\n   X =\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       emeasure\n                        (M \\<sigma> \\<bind>\n                         (\\<lambda>y.\n                             return\n                              (state_measure (shift_var_set (V \\<union> V'))\n                                (case_nat t \\<Gamma>))\n                              (case_nat y \\<sigma>)))\n                        X\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "from X"], ["proof (chain)\npicking this:\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             (case_nat undefined \\<rho>))", "have \"... =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * emeasure (M (merge V V' (x, \\<rho>)) \\<bind>\n             (\\<lambda>y. return ?R (case_nat y (merge V V' (x, \\<rho>))))) X \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             (case_nat undefined \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<sigma>.\n                         emeasure\n                          (M \\<sigma> \\<bind>\n                           (\\<lambda>y.\n                               return\n                                (state_measure\n                                  (shift_var_set (V \\<union> V'))\n                                  (case_nat t \\<Gamma>))\n                                (case_nat y \\<sigma>)))\n                          X\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           emeasure\n                            (M (merge V V' (x, \\<rho>)) \\<bind>\n                             (\\<lambda>y.\n                                 return\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n                                  (case_nat y (merge V V' (x, \\<rho>)))))\n                            X\n                       \\<partial>state_measure V \\<Gamma>", "apply (subst nn_integral_dens_ctxt_measure[OF \\<rho>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    (\\<lambda>\\<sigma>.\n        emeasure\n         (M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>)))\n         X)\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 2. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           emeasure\n                            (M (merge V V' (x, \\<rho>)) \\<bind>\n                             (\\<lambda>y.\n                                 return\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n                                  (case_nat y (merge V V' (x, \\<rho>)))))\n                            X\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           emeasure\n                            (M (merge V V' (x, \\<rho>)) \\<bind>\n                             (\\<lambda>y.\n                                 return\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n                                  (case_nat y (merge V V' (x, \\<rho>)))))\n                            X\n                       \\<partial>state_measure V \\<Gamma>", "apply (rule measurable_emeasure_kernel[OF measurable_bind[OF meas_M]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    (\\<lambda>x.\n        return\n         (state_measure (shift_var_set (V \\<union> V'))\n           (case_nat t \\<Gamma>))\n         (case_nat (snd x) (fst x)))\n    \\<in> state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          stock_measure t \\<rightarrow>\\<^sub>M\n          subprob_algebra ?N1\n 2. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    X \\<in> sets ?N1\n 3. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           emeasure\n                            (M (merge V V' (x, \\<rho>)) \\<bind>\n                             (\\<lambda>y.\n                                 return\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n                                  (case_nat y (merge V V' (x, \\<rho>)))))\n                            X\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           emeasure\n                            (M (merge V V' (x, \\<rho>)) \\<bind>\n                             (\\<lambda>y.\n                                 return\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n                                  (case_nat y (merge V V' (x, \\<rho>)))))\n                            X\n                       \\<partial>state_measure V \\<Gamma>", "apply (rule measurable_compose[OF _ return_measurable], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    X \\<in> sets\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n 2. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           emeasure\n                            (M (merge V V' (x, \\<rho>)) \\<bind>\n                             (\\<lambda>y.\n                                 return\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n                                  (case_nat y (merge V V' (x, \\<rho>)))))\n                            X\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           emeasure\n                            (M (merge V V' (x, \\<rho>)) \\<bind>\n                             (\\<lambda>y.\n                                 return\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n                                  (case_nat y (merge V V' (x, \\<rho>)))))\n                            X\n                       \\<partial>state_measure V \\<Gamma>", "apply (simp_all add: dens_ctxt_measure_def state_measure'_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       emeasure\n                        (M \\<sigma> \\<bind>\n                         (\\<lambda>y.\n                             return\n                              (state_measure (shift_var_set (V \\<union> V'))\n                                (case_nat t \\<Gamma>))\n                              (case_nat y \\<sigma>)))\n                        X\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         emeasure\n                          (M (merge V V' (x, \\<rho>)) \\<bind>\n                           (\\<lambda>y.\n                               return\n                                (state_measure\n                                  (shift_var_set (V \\<union> V'))\n                                  (case_nat t \\<Gamma>))\n                                (case_nat y (merge V V' (x, \\<rho>)))))\n                          X\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<sigma>.\n                       emeasure\n                        (M \\<sigma> \\<bind>\n                         (\\<lambda>y.\n                             return\n                              (state_measure (shift_var_set (V \\<union> V'))\n                                (case_nat t \\<Gamma>))\n                              (case_nat y \\<sigma>)))\n                        X\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         emeasure\n                          (M (merge V V' (x, \\<rho>)) \\<bind>\n                           (\\<lambda>y.\n                               return\n                                (state_measure\n                                  (shift_var_set (V \\<union> V'))\n                                  (case_nat t \\<Gamma>))\n                                (case_nat y (merge V V' (x, \\<rho>)))))\n                          X\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "from X"], ["proof (chain)\npicking this:\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             (case_nat undefined \\<rho>))", "have \"... = \\<integral>\\<^sup>+x. \\<delta> (merge V V' (x, \\<rho>)) *\n                              \\<integral>\\<^sup>+y. indicator X (case_nat y (merge V V' (x, \\<rho>)))\n                                   \\<partial>M (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\" (is \"_ = ?I\")"], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             (case_nat undefined \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           emeasure\n                            (M (merge V V' (x, \\<rho>)) \\<bind>\n                             (\\<lambda>y.\n                                 return\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n                                  (case_nat y (merge V V' (x, \\<rho>)))))\n                            X\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>M (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "apply (intro nn_integral_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<in> sets\n                         (dens_ctxt_measure\n                           (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                            insert_dens V V' f \\<delta>)\n                           (case_nat undefined \\<rho>));\n        x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> \\<delta> (merge V V' (x, \\<rho>)) *\n                         emeasure\n                          (M (merge V V' (x, \\<rho>)) \\<bind>\n                           (\\<lambda>y.\n                               return\n                                (state_measure\n                                  (shift_var_set (V \\<union> V'))\n                                  (case_nat t \\<Gamma>))\n                                (case_nat y (merge V V' (x, \\<rho>)))))\n                          X =\n                         \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>M (merge V V' (x, \\<rho>))", "apply (subst emeasure_bind, rule nonempty', simp add: merge_in_space)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<in> sets\n                         (dens_ctxt_measure\n                           (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                            insert_dens V V' f \\<delta>)\n                           (case_nat undefined \\<rho>));\n        x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>y.\n                             return\n                              (state_measure (shift_var_set (V \\<union> V'))\n                                (case_nat t \\<Gamma>))\n                              (case_nat y (merge V V' (x, \\<rho>))))\n                         \\<in> M (merge V V'\n                                   (x, \\<rho>)) \\<rightarrow>\\<^sub>M\n                               subprob_algebra (?N2 x)\n 2. \\<And>x.\n       \\<lbrakk>X \\<in> sets\n                         (dens_ctxt_measure\n                           (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                            insert_dens V V' f \\<delta>)\n                           (case_nat undefined \\<rho>));\n        x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> sets (?N2 x)\n 3. \\<And>x.\n       \\<lbrakk>X \\<in> sets\n                         (dens_ctxt_measure\n                           (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                            insert_dens V V' f \\<delta>)\n                           (case_nat undefined \\<rho>));\n        x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ xa.\n        emeasure\n         (return\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))\n           (case_nat xa (merge V V' (x, \\<rho>))))\n         X\n      \\<partial>M (merge V V' (x, \\<rho>)) =\n                         \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>M (merge V V' (x, \\<rho>))", "apply (rule measurable_compose[OF _ return_measurable], simp add: merge_in_space meas_M_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<in> sets\n                         (dens_ctxt_measure\n                           (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                            insert_dens V V' f \\<delta>)\n                           (case_nat undefined \\<rho>));\n        x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> sets\n                                  (state_measure\n                                    (shift_var_set (V \\<union> V'))\n                                    (case_nat t \\<Gamma>))\n 2. \\<And>x.\n       \\<lbrakk>X \\<in> sets\n                         (dens_ctxt_measure\n                           (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                            insert_dens V V' f \\<delta>)\n                           (case_nat undefined \\<rho>));\n        x \\<in> space (state_measure V \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ xa.\n        emeasure\n         (return\n           (state_measure (shift_var_set (V \\<union> V'))\n             (case_nat t \\<Gamma>))\n           (case_nat xa (merge V V' (x, \\<rho>))))\n         X\n      \\<partial>M (merge V V' (x, \\<rho>)) =\n                         \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>M (merge V V' (x, \\<rho>))", "apply (simp_all add: dens_ctxt_measure_def state_measure'_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         emeasure\n                          (M (merge V V' (x, \\<rho>)) \\<bind>\n                           (\\<lambda>y.\n                               return\n                                (state_measure\n                                  (shift_var_set (V \\<union> V'))\n                                  (case_nat t \\<Gamma>))\n                                (case_nat y (merge V V' (x, \\<rho>)))))\n                          X\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>M (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         emeasure\n                          (M (merge V V' (x, \\<rho>)) \\<bind>\n                           (\\<lambda>y.\n                               return\n                                (state_measure\n                                  (shift_var_set (V \\<union> V'))\n                                  (case_nat t \\<Gamma>))\n                                (case_nat y (merge V V' (x, \\<rho>)))))\n                          X\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>M (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have \"\\<And>x. x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n                  M (merge V V' (x, \\<rho>)) = density (stock_measure t) (f (merge V V' (x, \\<rho>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       M (merge V V' (x, \\<rho>)) =\n       density (stock_measure t) (f (merge V V' (x, \\<rho>)))", "by (intro has_subprob_densityD[OF has_dens]) (simp add: merge_in_state_measure \\<rho>)"], ["proof (state)\nthis:\n  ?x5 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  M (merge V V' (?x5, \\<rho>)) =\n  density (stock_measure t) (f (merge V V' (?x5, \\<rho>)))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "hence \"?I = \\<integral>\\<^sup>+x. \\<delta> (merge V V' (x, \\<rho>)) *\n                \\<integral>\\<^sup>+y. indicator X (case_nat y (merge V V' (x, \\<rho>)))\n                \\<partial>density (stock_measure t) (f (merge V V' (x, \\<rho>))) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  ?x5 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  M (merge V V' (?x5, \\<rho>)) =\n  density (stock_measure t) (f (merge V V' (?x5, \\<rho>)))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>M (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>density (stock_measure t) (f (merge V V' (x, \\<rho>)))\n                       \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_cong) simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>M (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>density (stock_measure t) (f (merge V V' (x, \\<rho>)))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>M (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>density (stock_measure t) (f (merge V V' (x, \\<rho>)))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have \"... = \\<integral>\\<^sup>+x. \\<delta> (merge V V' (x, \\<rho>)) *\n                     \\<integral>\\<^sup>+y. f (merge V V' (x, \\<rho>)) y * indicator X (case_nat y (merge V V' (x, \\<rho>)))\n                   \\<partial>stock_measure t \\<partial>state_measure V \\<Gamma>\" (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>density (stock_measure t) (f (merge V V' (x, \\<rho>)))\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          f (merge V V' (x, \\<rho>)) y *\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "using X"], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             (case_nat undefined \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>density (stock_measure t) (f (merge V V' (x, \\<rho>)))\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          f (merge V V' (x, \\<rho>)) y *\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_cong, subst nn_integral_density, simp)\n       (auto simp: mult.assoc dens_ctxt_measure_def state_measure'_def\n             intro!: merge_in_state_measure \\<rho> AE_I'[of \"{}\"]\n                     has_subprob_densityD[OF has_dens])"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>density (stock_measure t) (f (merge V V' (x, \\<rho>)))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (x, \\<rho>)) y *\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>density (stock_measure t) (f (merge V V' (x, \\<rho>)))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (x, \\<rho>)) y *\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have A: \"case_nat undefined \\<rho> \\<circ> Suc = \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case_nat undefined \\<rho> \\<circ> Suc = \\<rho>", "by (intro ext) simp"], ["proof (state)\nthis:\n  case_nat undefined \\<rho> \\<circ> Suc = \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have B: \"\\<And>x y. x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow> y \\<in> space (stock_measure t) \\<Longrightarrow>\n           (case_nat y (merge V V' (x, \\<rho>))) =\n           (merge (shift_var_set V) (Suc ` V') (case_nat y x, case_nat undefined \\<rho>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> space (state_measure V \\<Gamma>);\n        y \\<in> space (stock_measure t)\\<rbrakk>\n       \\<Longrightarrow> case_nat y (merge V V' (x, \\<rho>)) =\n                         merge (shift_var_set V) (Suc ` V')\n                          (case_nat y x, case_nat undefined \\<rho>)", "by (intro ext) (auto simp add: merge_def shift_var_set_def split: nat.split)"], ["proof (state)\nthis:\n  \\<lbrakk>?x5 \\<in> space (state_measure V \\<Gamma>);\n   ?y5 \\<in> space (stock_measure t)\\<rbrakk>\n  \\<Longrightarrow> case_nat ?y5 (merge V V' (?x5, \\<rho>)) =\n                    merge (shift_var_set V) (Suc ` V')\n                     (case_nat ?y5 ?x5, case_nat undefined \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have C: \"\\<And>x. x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n     (\\<integral>\\<^sup>+y. f (merge V V' (x, \\<rho>)) y * indicator X (case_nat y (merge V V' (x,\\<rho>))) \\<partial>stock_measure t) =\n      \\<integral>\\<^sup>+y. f (merge V V' (x, \\<rho>)) y * indicator X (merge (shift_var_set V) (Suc`V')\n                 (case_nat y x,case_nat undefined \\<rho>)) \\<partial>stock_measure t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       \\<integral>\\<^sup>+ y. f (merge V V' (x, \\<rho>)) y *\n                              indicator X\n                               (case_nat y (merge V V' (x, \\<rho>)))\n                          \\<partial>stock_measure t =\n       \\<integral>\\<^sup>+ y. f (merge V V' (x, \\<rho>)) y *\n                              indicator X\n                               (merge (shift_var_set V) (Suc ` V')\n                                 (case_nat y x, case_nat undefined \\<rho>))\n                          \\<partial>stock_measure t", "by (intro nn_integral_cong) (simp add: B)"], ["proof (state)\nthis:\n  ?x5 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  \\<integral>\\<^sup>+ y. f (merge V V' (?x5, \\<rho>)) y *\n                         indicator X (case_nat y (merge V V' (?x5, \\<rho>)))\n                     \\<partial>stock_measure t =\n  \\<integral>\\<^sup>+ y. f (merge V V' (?x5, \\<rho>)) y *\n                         indicator X\n                          (merge (shift_var_set V) (Suc ` V')\n                            (case_nat y ?x5, case_nat undefined \\<rho>))\n                     \\<partial>stock_measure t\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "have \"?I = emeasure ?rhs X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          f (merge V V' (x, \\<rho>)) y *\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma> =\n    emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n     X", "using X"], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (dens_ctxt_measure\n             (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n              insert_dens V V' f \\<delta>)\n             (case_nat undefined \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          f (merge V V' (x, \\<rho>)) y *\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma> =\n    emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n     X", "apply (subst emeasure_dens_ctxt_measure_insert'[where F = M])"], ["proof (prove)\ngoal (4 subgoals):\n 1. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    has_parametrized_subprob_density\n     (state_measure (V \\<union> V') \\<Gamma>) M (stock_measure t) f\n 2. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    case_nat undefined \\<rho>\n    \\<in> space (state_measure (Suc ` V') (case_nat t \\<Gamma>))\n 3. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>))\n 4. X \\<in> sets\n             (dens_ctxt_measure\n               (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                insert_dens V V' f \\<delta>)\n               (case_nat undefined \\<rho>)) \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           \\<integral>\\<^sup>+ y.\n          f (merge V V' (x, \\<rho>)) y *\n          indicator X (case_nat y (merge V V' (x, \\<rho>)))\n        \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ \\<sigma>.\n                         \\<delta>\n                          (merge V V'\n                            (\\<sigma>,\n                             case_nat undefined \\<rho> \\<circ> Suc)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (\\<sigma>, case_nat undefined \\<rho> \\<circ> Suc)) y *\n        indicator X\n         (merge (shift_var_set V) (Suc ` V')\n           (case_nat y \\<sigma>, case_nat undefined \\<rho>))\n      \\<partial>stock_measure t\n                       \\<partial>state_measure V \\<Gamma>", "apply (insert has_dens, simp add: has_parametrized_subprob_density_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>X \\<in> sets\n                      (dens_ctxt_measure\n                        (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                         insert_dens V V' f \\<delta>)\n                        (case_nat undefined \\<rho>));\n     \\<And>\\<rho>.\n        \\<rho>\n        \\<in> space\n               (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n        has_subprob_density (M \\<rho>) (stock_measure t) (f \\<rho>)\\<rbrakk>\n    \\<Longrightarrow> case_nat undefined \\<rho>\n                      \\<in> space\n                             (state_measure (Suc ` V')\n                               (case_nat t \\<Gamma>))\n 2. \\<lbrakk>X \\<in> sets\n                      (dens_ctxt_measure\n                        (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                         insert_dens V V' f \\<delta>)\n                        (case_nat undefined \\<rho>));\n     \\<And>\\<rho>.\n        \\<rho>\n        \\<in> space\n               (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n        has_subprob_density (M \\<rho>) (stock_measure t) (f \\<rho>)\\<rbrakk>\n    \\<Longrightarrow> X \\<in> sets\n                               (dens_ctxt_measure\n                                 (shift_var_set V, Suc ` V',\n                                  case_nat t \\<Gamma>,\n                                  insert_dens V V' f \\<delta>)\n                                 (case_nat undefined \\<rho>))\n 3. \\<lbrakk>X \\<in> sets\n                      (dens_ctxt_measure\n                        (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                         insert_dens V V' f \\<delta>)\n                        (case_nat undefined \\<rho>));\n     \\<And>\\<rho>.\n        \\<rho>\n        \\<in> space\n               (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n        has_subprob_density (M \\<rho>) (stock_measure t) (f \\<rho>)\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ x.\n     \\<delta> (merge V V' (x, \\<rho>)) *\n     \\<integral>\\<^sup>+ y. f (merge V V' (x, \\<rho>)) y *\n                            indicator X\n                             (case_nat y (merge V V' (x, \\<rho>)))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure V \\<Gamma> =\n                      \\<integral>\\<^sup>+ \\<sigma>.\n     \\<delta>\n      (merge V V' (\\<sigma>, case_nat undefined \\<rho> \\<circ> Suc)) *\n     \\<integral>\\<^sup>+ y. f (merge V V'\n                                (\\<sigma>,\n                                 case_nat undefined \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (shift_var_set V) (Suc ` V')\n                               (case_nat y \\<sigma>,\n                                case_nat undefined \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure V \\<Gamma>", "apply (rule measurable_space[OF measurable_case_nat_undefined \\<rho>], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> sets\n                      (dens_ctxt_measure\n                        (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n                         insert_dens V V' f \\<delta>)\n                        (case_nat undefined \\<rho>));\n     \\<And>\\<rho>.\n        \\<rho>\n        \\<in> space\n               (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n        has_subprob_density (M \\<rho>) (stock_measure t) (f \\<rho>)\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ x.\n     \\<delta> (merge V V' (x, \\<rho>)) *\n     \\<integral>\\<^sup>+ y. f (merge V V' (x, \\<rho>)) y *\n                            indicator X\n                             (case_nat y (merge V V' (x, \\<rho>)))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure V \\<Gamma> =\n                      \\<integral>\\<^sup>+ \\<sigma>.\n     \\<delta>\n      (merge V V' (\\<sigma>, case_nat undefined \\<rho> \\<circ> Suc)) *\n     \\<integral>\\<^sup>+ y. f (merge V V'\n                                (\\<sigma>,\n                                 case_nat undefined \\<rho> \\<circ> Suc))\n                             y *\n                            indicator X\n                             (merge (shift_var_set V) (Suc ` V')\n                               (case_nat y \\<sigma>,\n                                case_nat undefined \\<rho>))\n                        \\<partial>stock_measure t\n   \\<partial>state_measure V \\<Gamma>", "apply (intro nn_integral_cong, simp add: A C)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         \\<integral>\\<^sup>+ y.\n        f (merge V V' (x, \\<rho>)) y *\n        indicator X (case_nat y (merge V V' (x, \\<rho>)))\n      \\<partial>stock_measure t\n                     \\<partial>state_measure V \\<Gamma> =\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     (case_nat undefined \\<rho>))\n   X\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>\\<sigma>.\n                     M \\<sigma> \\<bind>\n                     (\\<lambda>y.\n                         return\n                          (state_measure (shift_var_set (V \\<union> V'))\n                            (case_nat t \\<Gamma>))\n                          (case_nat y \\<sigma>)))) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n         (\\<lambda>\\<sigma>.\n             M \\<sigma> \\<bind>\n             (\\<lambda>y.\n                 return\n                  (state_measure (shift_var_set (V \\<union> V'))\n                    (case_nat t \\<Gamma>))\n                  (case_nat y \\<sigma>))))\n        A =\n       emeasure\n        (dens_ctxt_measure\n          (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n           insert_dens V V' f \\<delta>)\n          (case_nat undefined \\<rho>))\n        A", "finally"], ["proof (chain)\npicking this:\n  emeasure\n   (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>))))\n   X =\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     (case_nat undefined \\<rho>))\n   X", "show \"emeasure ?lhs X = emeasure ?rhs X\""], ["proof (prove)\nusing this:\n  emeasure\n   (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>))))\n   X =\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     (case_nat undefined \\<rho>))\n   X\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n      (\\<lambda>\\<sigma>.\n          M \\<sigma> \\<bind>\n          (\\<lambda>y.\n              return\n               (state_measure (shift_var_set (V \\<union> V'))\n                 (case_nat t \\<Gamma>))\n               (case_nat y \\<sigma>))))\n     X =\n    emeasure\n     (dens_ctxt_measure\n       (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n        insert_dens V V' f \\<delta>)\n       (case_nat undefined \\<rho>))\n     X", "."], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>.\n        M \\<sigma> \\<bind>\n        (\\<lambda>y.\n            return\n             (state_measure (shift_var_set (V \\<union> V'))\n               (case_nat t \\<Gamma>))\n             (case_nat y \\<sigma>))))\n   X =\n  emeasure\n   (dens_ctxt_measure\n     (shift_var_set V, Suc ` V', case_nat t \\<Gamma>,\n      insert_dens V V' f \\<delta>)\n     (case_nat undefined \\<rho>))\n   X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma density_context_if_dens:\n  assumes \"has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>) M\n               (count_space (range BoolVal)) f\"\n  shows \"density_context V V' \\<Gamma> (if_dens \\<delta> f b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context V V' \\<Gamma> (if_dens \\<delta> f b)", "unfolding density_context_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>\\<rho>.\n         \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<longrightarrow>\n         subprob_space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>)) \\<and>\n     finite V) \\<and>\n    finite V' \\<and>\n    if_dens \\<delta> f b\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>) \\<and>\n    V \\<inter> V' = {}", "proof (intro allI conjI impI subprob_spaceI)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. if_dens \\<delta> f b\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "note D = has_parametrized_subprob_densityD[OF assms]"], ["proof (state)\nthis:\n  ?x \\<in> space (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n  M ?x = density (count_space (range BoolVal)) (f ?x)\n  ?x \\<in> space (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n  subprob_space (M ?x)\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          count_space (range BoolVal))\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. if_dens \\<delta> f b\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "from D(3)"], ["proof (chain)\npicking this:\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          count_space (range BoolVal))", "show M: \"if_dens \\<delta> f b \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (prove)\nusing this:\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          count_space (range BoolVal))\n\ngoal (1 subgoal):\n 1. if_dens \\<delta> f b\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)", "by (intro measurable_if_dens) simp_all"], ["proof (state)\nthis:\n  if_dens \\<delta> f b\n  \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "fix \\<rho>"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "assume \\<rho>: \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\""], ["proof (state)\nthis:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "hence [measurable]: \"(\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)) \\<in>\n                            measurable (state_measure V \\<Gamma>) (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (V \\<union> V') \\<Gamma>", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  \\<rho>\n  \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n    \\<in> Pi\\<^sub>M V\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (V \\<union> V')\n           (\\<lambda>x. stock_measure (\\<Gamma> x))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (V \\<union> V') \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "{"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (V \\<union> V') \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "fix \\<sigma>"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "assume \"\\<sigma> \\<in> space (state_measure V \\<Gamma>)\""], ["proof (state)\nthis:\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "with \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)", "have \\<sigma>\\<rho>: \"merge V V' (\\<sigma>, \\<rho>) \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  \\<sigma> \\<in> space (state_measure V \\<Gamma>)\n\ngoal (1 subgoal):\n 1. merge V V' (\\<sigma>, \\<rho>)\n    \\<in> space (state_measure (V \\<union> V') \\<Gamma>)", "by (intro merge_in_state_measure)"], ["proof (state)\nthis:\n  merge V V' (\\<sigma>, \\<rho>)\n  \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "with assms"], ["proof (chain)\npicking this:\n  has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>)\n   M (count_space (range BoolVal)) f\n  merge V V' (\\<sigma>, \\<rho>)\n  \\<in> space (state_measure (V \\<union> V') \\<Gamma>)", "have \"has_subprob_density (M (merge V V' (\\<sigma>, \\<rho>))) (count_space (range BoolVal))\n                         (f (merge V V' (\\<sigma>, \\<rho>)))\""], ["proof (prove)\nusing this:\n  has_parametrized_subprob_density (state_measure (V \\<union> V') \\<Gamma>)\n   M (count_space (range BoolVal)) f\n  merge V V' (\\<sigma>, \\<rho>)\n  \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. has_subprob_density (M (merge V V' (\\<sigma>, \\<rho>)))\n     (count_space (range BoolVal)) (f (merge V V' (\\<sigma>, \\<rho>)))", "unfolding has_parametrized_subprob_density_def"], ["proof (prove)\nusing this:\n  (\\<forall>x\\<in>space (state_measure (V \\<union> V') \\<Gamma>).\n      has_subprob_density (M x) (count_space (range BoolVal)) (f x)) \\<and>\n  (\\<lambda>(x, y). f x y)\n  \\<in> borel_measurable\n         (state_measure (V \\<union> V') \\<Gamma> \\<Otimes>\\<^sub>M\n          count_space (range BoolVal))\n  merge V V' (\\<sigma>, \\<rho>)\n  \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. has_subprob_density (M (merge V V' (\\<sigma>, \\<rho>)))\n     (count_space (range BoolVal)) (f (merge V V' (\\<sigma>, \\<rho>)))", "by auto"], ["proof (state)\nthis:\n  has_subprob_density (M (merge V V' (\\<sigma>, \\<rho>)))\n   (count_space (range BoolVal)) (f (merge V V' (\\<sigma>, \\<rho>)))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "with \\<sigma>\\<rho>"], ["proof (chain)\npicking this:\n  merge V V' (\\<sigma>, \\<rho>)\n  \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n  has_subprob_density (M (merge V V' (\\<sigma>, \\<rho>)))\n   (count_space (range BoolVal)) (f (merge V V' (\\<sigma>, \\<rho>)))", "have \"f (merge V V' (\\<sigma>, \\<rho>)) (BoolVal b) \\<le> 1\" \"\\<delta> (merge V V' (\\<sigma>, \\<rho>)) \\<ge> 0\""], ["proof (prove)\nusing this:\n  merge V V' (\\<sigma>, \\<rho>)\n  \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n  has_subprob_density (M (merge V V' (\\<sigma>, \\<rho>)))\n   (count_space (range BoolVal)) (f (merge V V' (\\<sigma>, \\<rho>)))\n\ngoal (1 subgoal):\n 1. f (merge V V' (\\<sigma>, \\<rho>)) (BoolVal b) \\<le> 1 &&&\n    0 \\<le> \\<delta> (merge V V' (\\<sigma>, \\<rho>))", "by (auto intro: subprob_count_space_density_le_1)"], ["proof (state)\nthis:\n  f (merge V V' (\\<sigma>, \\<rho>)) (BoolVal b) \\<le> 1\n  0 \\<le> \\<delta> (merge V V' (\\<sigma>, \\<rho>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "}"], ["proof (state)\nthis:\n  ?\\<sigma>2 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  f (merge V V' (?\\<sigma>2, \\<rho>)) (BoolVal b) \\<le> 1\n  ?\\<sigma>2 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  0 \\<le> \\<delta> (merge V V' (?\\<sigma>2, \\<rho>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "note dens_props = this"], ["proof (state)\nthis:\n  ?\\<sigma>2 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  f (merge V V' (?\\<sigma>2, \\<rho>)) (BoolVal b) \\<le> 1\n  ?\\<sigma>2 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  0 \\<le> \\<delta> (merge V V' (?\\<sigma>2, \\<rho>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "interpret subprob_space \"dens_ctxt_measure \\<Y> \\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. subprob_space (dens_ctxt_measure \\<Y> \\<rho>)", "by (rule subprob_space_dens)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "let ?M = \"dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "have \"emeasure ?M (space ?M) =\n          \\<integral>\\<^sup>+x. if_dens \\<delta> f b (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n     (space\n       (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)) =\n    \\<integral>\\<^sup>+ x. if_dens \\<delta> f b (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "using M \\<rho>"], ["proof (prove)\nusing this:\n  if_dens \\<delta> f b\n  \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n     (space\n       (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)) =\n    \\<integral>\\<^sup>+ x. if_dens \\<delta> f b (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  if_dens \\<delta> f b\n  \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     ((case (V, V', \\<Gamma>, if_dens \\<delta> f b) of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     (space\n       ((case (V, V', \\<Gamma>, if_dens \\<delta> f b) of\n         (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n           \\<lambda>\\<rho>.\n              density\n               (distr (state_measure V \\<Gamma>)\n                 (state_measure (V \\<union> V') \\<Gamma>)\n                 (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n               \\<delta>)\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. if_dens \\<delta> f b (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "by (simp only: prod.case space_density)\n       (auto simp: nn_integral_distr emeasure_density cong: nn_integral_cong')"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)) =\n  \\<integral>\\<^sup>+ x. if_dens \\<delta> f b (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)) =\n  \\<integral>\\<^sup>+ x. if_dens \\<delta> f b (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... \\<le> \\<integral>\\<^sup>+x. \\<delta> (merge V V' (x, \\<rho>)) * 1 \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. if_dens \\<delta> f b (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>\n    \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                             \\<partial>state_measure V \\<Gamma>", "unfolding if_dens_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           f (merge V V' (x, \\<rho>)) (BoolVal b)\n                       \\<partial>state_measure V \\<Gamma>\n    \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                             \\<partial>state_measure V \\<Gamma>", "using dens_props"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  ?\\<sigma>2 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  f (merge V V' (?\\<sigma>2, \\<rho>)) (BoolVal b) \\<le> 1\n  ?\\<sigma>2 \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  0 \\<le> \\<delta> (merge V V' (?\\<sigma>2, \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           f (merge V V' (x, \\<rho>)) (BoolVal b)\n                       \\<partial>state_measure V \\<Gamma>\n    \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                             \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_mono mult_left_mono) simp_all"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. if_dens \\<delta> f b (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n  \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                           \\<partial>state_measure V \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. if_dens \\<delta> f b (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n  \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                           \\<partial>state_measure V \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... = branch_prob \\<Y> \\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                       \\<partial>state_measure V \\<Gamma> =\n    branch_prob \\<Y> \\<rho>", "by (simp add: branch_prob_altdef)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                     \\<partial>state_measure V \\<Gamma> =\n  branch_prob \\<Y> \\<rho>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                     \\<partial>state_measure V \\<Gamma> =\n  branch_prob \\<Y> \\<rho>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "have \"... = emeasure (dens_ctxt_measure \\<Y> \\<rho>) (space (dens_ctxt_measure \\<Y> \\<rho>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     (space (dens_ctxt_measure \\<Y> \\<rho>))", "by (simp add: branch_prob_def)"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "have \"... \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     (space (dens_ctxt_measure \\<Y> \\<rho>))\n    \\<le> 1", "by (rule emeasure_space_le_1)"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n  \\<le> 1\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "finally"], ["proof (chain)\npicking this:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>))\n  \\<le> 1", "show \"emeasure ?M (space ?M) \\<le> 1\""], ["proof (prove)\nusing this:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n     (space\n       (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>))\n    \\<le> 1", "."], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b) \\<rho>))\n  \\<le> 1\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens \\<delta> f b)\n          \\<rho>) \\<noteq>\n       {}\n 2. finite V\n 3. finite V'\n 4. V \\<inter> V' = {}", "qed (insert disjoint, auto)"], ["", "lemma density_context_if_dens_det:\n  assumes e: \"\\<Gamma> \\<turnstile> e : BOOL\" \"randomfree e\" \"free_vars e \\<subseteq> V \\<union> V'\"\n  shows \"density_context V V' \\<Gamma> (if_dens_det \\<delta> e b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context V V' \\<Gamma> (if_dens_det \\<delta> e b)", "unfolding density_context_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>\\<rho>.\n         \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<longrightarrow>\n         subprob_space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>)) \\<and>\n     finite V) \\<and>\n    finite V' \\<and>\n    if_dens_det \\<delta> e b\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>) \\<and>\n    V \\<inter> V' = {}", "proof (intro allI conjI impI subprob_spaceI)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. if_dens_det \\<delta> e b\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e : BOOL\n  randomfree e\n  free_vars e \\<subseteq> V \\<union> V'", "show M: \"if_dens_det \\<delta> e b \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e : BOOL\n  randomfree e\n  free_vars e \\<subseteq> V \\<union> V'\n\ngoal (1 subgoal):\n 1. if_dens_det \\<delta> e b\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)", "by (intro measurable_if_dens_det) simp_all"], ["proof (state)\nthis:\n  if_dens_det \\<delta> e b\n  \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "fix \\<rho>"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "assume \\<rho>: \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\""], ["proof (state)\nthis:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "hence [measurable]: \"(\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)) \\<in>\n                            measurable (state_measure V \\<Gamma>) (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n    \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n          state_measure (V \\<union> V') \\<Gamma>", "unfolding state_measure_def"], ["proof (prove)\nusing this:\n  \\<rho>\n  \\<in> space (Pi\\<^sub>M V' (\\<lambda>x. stock_measure (\\<Gamma> x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n    \\<in> Pi\\<^sub>M V\n           (\\<lambda>x. stock_measure (\\<Gamma> x)) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M (V \\<union> V')\n           (\\<lambda>x. stock_measure (\\<Gamma> x))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>))\n  \\<in> state_measure V \\<Gamma> \\<rightarrow>\\<^sub>M\n        state_measure (V \\<union> V') \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "interpret subprob_space \"dens_ctxt_measure \\<Y> \\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. subprob_space (dens_ctxt_measure \\<Y> \\<rho>)", "by (rule subprob_space_dens)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "let ?M = \"dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "have \"emeasure ?M (space ?M) =\n          \\<integral>\\<^sup>+x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>)\n     (space\n       (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "using M \\<rho>"], ["proof (prove)\nusing this:\n  if_dens_det \\<delta> e b\n  \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>)\n     (space\n       (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  if_dens_det \\<delta> e b\n  \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     ((case (V, V', \\<Gamma>, if_dens_det \\<delta> e b) of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     (space\n       ((case (V, V', \\<Gamma>, if_dens_det \\<delta> e b) of\n         (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n           \\<lambda>\\<rho>.\n              density\n               (distr (state_measure V \\<Gamma>)\n                 (state_measure (V \\<union> V') \\<Gamma>)\n                 (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n               \\<delta>)\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "by (simp only: prod.case space_density)\n       (auto simp: nn_integral_distr emeasure_density cong: nn_integral_cong')"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n       \\<rho>)) =\n  \\<integral>\\<^sup>+ x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n       \\<rho>)) =\n  \\<integral>\\<^sup>+ x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... \\<le> \\<integral>\\<^sup>+x. \\<delta> (merge V V' (x, \\<rho>)) * 1 \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>\n    \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                             \\<partial>state_measure V \\<Gamma>", "unfolding if_dens_det_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           (if expr_sem_rf (merge V V' (x, \\<rho>)) e =\n                               BoolVal b\n                            then 1 else 0)\n                       \\<partial>state_measure V \\<Gamma>\n    \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                             \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_mono mult_left_mono) (simp_all add: merge_in_state_measure)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n  \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                           \\<partial>state_measure V \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. if_dens_det \\<delta> e b (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n  \\<le> \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                           \\<partial>state_measure V \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... = branch_prob \\<Y> \\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                       \\<partial>state_measure V \\<Gamma> =\n    branch_prob \\<Y> \\<rho>", "by (simp add: branch_prob_altdef)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                     \\<partial>state_measure V \\<Gamma> =\n  branch_prob \\<Y> \\<rho>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * 1\n                     \\<partial>state_measure V \\<Gamma> =\n  branch_prob \\<Y> \\<rho>\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "have \"... = emeasure (dens_ctxt_measure \\<Y> \\<rho>) (space (dens_ctxt_measure \\<Y> \\<rho>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     (space (dens_ctxt_measure \\<Y> \\<rho>))", "by (simp add: branch_prob_def)"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "have \"... \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     (space (dens_ctxt_measure \\<Y> \\<rho>))\n    \\<le> 1", "by (rule emeasure_space_le_1)"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n  \\<le> 1\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. V \\<inter> V' = {}", "finally"], ["proof (chain)\npicking this:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>))\n  \\<le> 1", "show \"emeasure ?M (space ?M) \\<le> 1\""], ["proof (prove)\nusing this:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>)\n     (space\n       (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n         \\<rho>))\n    \\<le> 1", "."], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>)\n   (space\n     (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b) \\<rho>))\n  \\<le> 1\n\ngoal (4 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, if_dens_det \\<delta> e b)\n          \\<rho>) \\<noteq>\n       {}\n 2. finite V\n 3. finite V'\n 4. V \\<inter> V' = {}", "qed (insert disjoint assms, auto intro: measurable_if_dens_det)"], ["", "lemma density_context_empty[simp]: \"density_context {} (V\\<union>V') \\<Gamma> (\\<lambda>_. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context {} (V \\<union> V') \\<Gamma> (\\<lambda>_. 1)", "unfolding density_context_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>\\<rho>.\n         \\<rho>\n         \\<in> space\n                (state_measure (V \\<union> V') \\<Gamma>) \\<longrightarrow>\n         subprob_space\n          (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n            \\<rho>)) \\<and>\n     finite {}) \\<and>\n    finite (V \\<union> V') \\<and>\n    (\\<lambda>_. 1)\n    \\<in> borel_measurable\n           (state_measure ({} \\<union> (V \\<union> V')) \\<Gamma>) \\<and>\n    {} \\<inter> (V \\<union> V') = {}", "proof (intro allI conjI impI subprob_spaceI)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite {}\n 4. finite (V \\<union> V')\n 5. (\\<lambda>_. 1)\n    \\<in> borel_measurable\n           (state_measure ({} \\<union> (V \\<union> V')) \\<Gamma>)\n 6. {} \\<inter> (V \\<union> V') = {}", "fix \\<rho>"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite {}\n 4. finite (V \\<union> V')\n 5. (\\<lambda>_. 1)\n    \\<in> borel_measurable\n           (state_measure ({} \\<union> (V \\<union> V')) \\<Gamma>)\n 6. {} \\<inter> (V \\<union> V') = {}", "assume \\<rho>: \"\\<rho> \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\""], ["proof (state)\nthis:\n  \\<rho> \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite {}\n 4. finite (V \\<union> V')\n 5. (\\<lambda>_. 1)\n    \\<in> borel_measurable\n           (state_measure ({} \\<union> (V \\<union> V')) \\<Gamma>)\n 6. {} \\<inter> (V \\<union> V') = {}", "let ?M = \"dens_ctxt_measure ({},V\\<union>V',\\<Gamma>,\\<lambda>_. 1) \\<rho>\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite {}\n 4. finite (V \\<union> V')\n 5. (\\<lambda>_. 1)\n    \\<in> borel_measurable\n           (state_measure ({} \\<union> (V \\<union> V')) \\<Gamma>)\n 6. {} \\<inter> (V \\<union> V') = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure (V \\<union> V') \\<Gamma>)", "have \"\\<And>\\<sigma>. merge {} (V\\<union>V') (\\<sigma>,\\<rho>) = \\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. merge {} (V \\<union> V') (\\<sigma>, \\<rho>) = \\<rho>", "by (intro ext) (auto simp: merge_def state_measure_def space_PiM)"], ["proof (state)\nthis:\n  merge {} (V \\<union> V') (?\\<sigma>, \\<rho>) = \\<rho>\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       emeasure\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>)\n        (space\n          (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n            \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>) \\<noteq>\n       {}\n 3. finite {}\n 4. finite (V \\<union> V')\n 5. (\\<lambda>_. 1)\n    \\<in> borel_measurable\n           (state_measure ({} \\<union> (V \\<union> V')) \\<Gamma>)\n 6. {} \\<inter> (V \\<union> V') = {}", "with \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n  merge {} (V \\<union> V') (?\\<sigma>, \\<rho>) = \\<rho>", "show \"emeasure ?M (space ?M) \\<le> 1\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n  merge {} (V \\<union> V') (?\\<sigma>, \\<rho>) = \\<rho>\n\ngoal (1 subgoal):\n 1. emeasure\n     (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1) \\<rho>)\n     (space\n       (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n         \\<rho>))\n    \\<le> 1", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure (V \\<union> V') \\<Gamma>)\n  merge {} (V \\<union> V') (?\\<sigma>, \\<rho>) = \\<rho>\n\ngoal (1 subgoal):\n 1. emeasure\n     ((case ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1) of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     (space\n       ((case ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1) of\n         (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n           \\<lambda>\\<rho>.\n              density\n               (distr (state_measure V \\<Gamma>)\n                 (state_measure (V \\<union> V') \\<Gamma>)\n                 (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n               \\<delta>)\n         \\<rho>))\n    \\<le> 1", "by (auto simp: emeasure_density emeasure_distr state_measure_def PiM_empty)"], ["proof (state)\nthis:\n  emeasure\n   (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1) \\<rho>)\n   (space\n     (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n       \\<rho>))\n  \\<le> 1\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho>\n       \\<in> space\n              (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure ({}, V \\<union> V', \\<Gamma>, \\<lambda>_. 1)\n          \\<rho>) \\<noteq>\n       {}\n 2. finite {}\n 3. finite (V \\<union> V')\n 4. (\\<lambda>_. 1)\n    \\<in> borel_measurable\n           (state_measure ({} \\<union> (V \\<union> V')) \\<Gamma>)\n 5. {} \\<inter> (V \\<union> V') = {}", "qed auto"], ["", "lemma dens_ctxt_measure_bind_const:\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\" \"subprob_space N\"\n  shows \"dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N) = density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)\" (is \"?M1 = ?M2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N) =\n    density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) =\n    sets (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "have [simp]: \"sets ?M1 = sets N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) = sets N", "by (auto simp: space_subprob_algebra assms)"], ["proof (state)\nthis:\n  sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) = sets N\n\ngoal (2 subgoals):\n 1. sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) =\n    sets (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>))\n 2. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "thus \"sets ?M1 = sets ?M2\""], ["proof (prove)\nusing this:\n  sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) = sets N\n\ngoal (1 subgoal):\n 1. sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) =\n    sets (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>))", "by simp"], ["proof (state)\nthis:\n  sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) =\n  sets (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "assume X: \"X \\<in> sets ?M1\""], ["proof (state)\nthis:\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "with assms"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  subprob_space N\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))", "have \"emeasure ?M1 X = emeasure N X * branch_prob \\<Y> \\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  subprob_space N\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))\n\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) X =\n    emeasure N X * branch_prob \\<Y> \\<rho>", "unfolding branch_prob_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  subprob_space N\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))\n\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) X =\n    emeasure N X *\n    emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     (space (dens_ctxt_measure \\<Y> \\<rho>))", "by (subst emeasure_bind_const') (auto simp: subprob_space_dens)"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) X =\n  emeasure N X * branch_prob \\<Y> \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "also"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) X =\n  emeasure N X * branch_prob \\<Y> \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "from X"], ["proof (chain)\npicking this:\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))", "have \"emeasure N X = \\<integral>\\<^sup>+x. indicator X x \\<partial>N\""], ["proof (prove)\nusing this:\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))\n\ngoal (1 subgoal):\n 1. emeasure N X = integral\\<^sup>N N (indicator X)", "by simp"], ["proof (state)\nthis:\n  emeasure N X = integral\\<^sup>N N (indicator X)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "also"], ["proof (state)\nthis:\n  emeasure N X = integral\\<^sup>N N (indicator X)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "from X"], ["proof (chain)\npicking this:\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))", "have \"... * branch_prob \\<Y> \\<rho> = \\<integral>\\<^sup>+x. branch_prob \\<Y> \\<rho> * indicator X x \\<partial>N\""], ["proof (prove)\nusing this:\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N N (indicator X) * branch_prob \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+x\\<in>X. branch_prob \\<Y> \\<rho>\\<partial>N", "by (subst nn_integral_cmult) (auto simp: branch_prob_def field_simps)"], ["proof (state)\nthis:\n  integral\\<^sup>N N (indicator X) * branch_prob \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+x\\<in>X. branch_prob \\<Y> \\<rho>\\<partial>N\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N N (indicator X) * branch_prob \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+x\\<in>X. branch_prob \\<Y> \\<rho>\\<partial>N\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "from X"], ["proof (chain)\npicking this:\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))", "have \"... = emeasure ?M2 X\""], ["proof (prove)\nusing this:\n  X \\<in> sets (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+x\\<in>X. branch_prob \\<Y> \\<rho>\\<partial>N =\n    emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) X", "by (simp add: emeasure_density)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+x\\<in>X. branch_prob \\<Y> \\<rho>\\<partial>N =\n  emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) X\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets\n                (dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n                 (\\<lambda>_. N)) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) A =\n       emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) A", "finally"], ["proof (chain)\npicking this:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) X =\n  emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) X", "show \"emeasure ?M1 X = emeasure ?M2 X\""], ["proof (prove)\nusing this:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) X =\n  emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) X\n\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) X =\n    emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) X", "."], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho> \\<bind> (\\<lambda>_. N)) X =\n  emeasure (density N (\\<lambda>_. branch_prob \\<Y> \\<rho>)) X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nn_integral_dens_ctxt_measure_restrict:\n  assumes \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\" \"f \\<rho> \\<ge> 0\"\n  assumes \"f \\<in> borel_measurable (state_measure V' \\<Gamma>)\"\n  shows \"(\\<integral>\\<^sup>+x. f (restrict x V') \\<partial>dens_ctxt_measure \\<Y> \\<rho>) = branch_prob \\<Y> \\<rho> * f \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "have \"(\\<integral>\\<^sup>+x. f (restrict x V') \\<partial>dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>) =\n          \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f (restrict (merge V V' (x, \\<rho>)) V') \\<partial>state_measure V \\<Gamma>\"\n          (is \"_ = ?I\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           f (restrict (merge V V' (x, \\<rho>)) V')\n                       \\<partial>state_measure V \\<Gamma>", "by (subst nn_integral_dens_ctxt_measure, simp add: assms,\n        rule measurable_compose[OF measurable_restrict], unfold state_measure_def,\n        rule measurable_component_singleton, insert assms, simp_all add: state_measure_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. f (restrict x V')\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         f (restrict (merge V V' (x, \\<rho>)) V')\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. f (restrict x V')\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         f (restrict (merge V V' (x, \\<rho>)) V')\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "from assms(1) and disjoint"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  V \\<inter> V' = {}", "have \"\\<And>x. x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow> restrict (merge V V' (x, \\<rho>)) V' = \\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  V \\<inter> V' = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n       restrict (merge V V' (x, \\<rho>)) V' = \\<rho>", "by (intro ext) (auto simp: restrict_def merge_def state_measure_def space_PiM dest: PiE_mem)"], ["proof (state)\nthis:\n  ?x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  restrict (merge V V' (?x, \\<rho>)) V' = \\<rho>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "hence \"?I = \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f \\<rho> \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  ?x \\<in> space (state_measure V \\<Gamma>) \\<Longrightarrow>\n  restrict (merge V V' (?x, \\<rho>)) V' = \\<rho>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                           f (restrict (merge V V' (x, \\<rho>)) V')\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f \\<rho>\n                       \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_cong) simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         f (restrict (merge V V' (x, \\<rho>)) V')\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f \\<rho>\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) *\n                         f (restrict (merge V V' (x, \\<rho>)) V')\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f \\<rho>\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "have \"... = (\\<integral>\\<^sup>+x. f \\<rho> \\<partial>dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f \\<rho>\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. f \\<rho> \\<partial>dens_ctxt_measure \\<Y> \\<rho>", "by (subst nn_integral_dens_ctxt_measure) (simp_all add: assms)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f \\<rho>\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. f \\<rho> \\<partial>dens_ctxt_measure \\<Y> \\<rho>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>)) * f \\<rho>\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. f \\<rho> \\<partial>dens_ctxt_measure \\<Y> \\<rho>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "have \"... = f \\<rho> * branch_prob \\<Y> \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f \\<rho>\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    f \\<rho> * branch_prob \\<Y> \\<rho>", "by (subst nn_integral_const)\n       (simp_all add: assms branch_prob_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. f \\<rho> \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n  f \\<rho> * branch_prob \\<Y> \\<rho>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "finally"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+ x. f (restrict x V')\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n  f \\<rho> * branch_prob \\<Y> \\<rho>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ x. f (restrict x V')\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n  f \\<rho> * branch_prob \\<Y> \\<rho>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. f (restrict x V')\n                       \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n    branch_prob \\<Y> \\<rho> * f \\<rho>", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. f (restrict x V')\n                     \\<partial>dens_ctxt_measure \\<Y> \\<rho> =\n  branch_prob \\<Y> \\<rho> * f \\<rho>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma expr_sem_op_eq_distr:\n  assumes \"\\<Gamma> \\<turnstile> oper $$ e : t'\" \"free_vars e \\<subseteq> V \\<union> V'\" \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\"\n  defines \"M \\<equiv> dens_ctxt_measure (V,V',\\<Gamma>,\\<delta>) \\<rho>\"\n  shows \"M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n             distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) (stock_measure t') (op_sem oper)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> oper $$ e : t'", "obtain t where t1: \"\\<Gamma> \\<turnstile> e : t\" and t2: \"op_type oper t = Some t'\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> oper $$ e : t'\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>\\<Gamma> \\<turnstile> e : t;\n         op_type oper t = Some t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> e : t\n  op_type oper t = Some t'\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "let ?N = \"stock_measure t\" and ?R = \"subprob_algebra (stock_measure t')\""], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "assume \"x \\<in> space (stock_measure t)\""], ["proof (state)\nthis:\n  x \\<in> space (stock_measure t)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "with t1 assms(2,3)"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> e : t\n  free_vars e \\<subseteq> V \\<union> V'\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  x \\<in> space (stock_measure t)", "have \"val_type x = t\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> e : t\n  free_vars e \\<subseteq> V \\<union> V'\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  x \\<in> space (stock_measure t)\n\ngoal (1 subgoal):\n 1. val_type x = t", "by (auto simp: state_measure_def space_PiM dest: PiE_mem)"], ["proof (state)\nthis:\n  val_type x = t\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "hence \"return_val (op_sem oper x) = return (stock_measure t') (op_sem oper x)\""], ["proof (prove)\nusing this:\n  val_type x = t\n\ngoal (1 subgoal):\n 1. return_val (op_sem oper x) = return (stock_measure t') (op_sem oper x)", "unfolding return_val_def"], ["proof (prove)\nusing this:\n  val_type x = t\n\ngoal (1 subgoal):\n 1. return (stock_measure (val_type (op_sem oper x))) (op_sem oper x) =\n    return (stock_measure t') (op_sem oper x)", "by (subst op_sem_val_type) (simp_all add: t2)"], ["proof (state)\nthis:\n  return_val (op_sem oper x) = return (stock_measure t') (op_sem oper x)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> space (stock_measure t) \\<Longrightarrow>\n  return_val (op_sem oper ?x2) = return (stock_measure t') (op_sem oper ?x2)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "note return_op_sem = this"], ["proof (state)\nthis:\n  ?x2 \\<in> space (stock_measure t) \\<Longrightarrow>\n  return_val (op_sem oper ?x2) = return (stock_measure t') (op_sem oper ?x2)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "from assms and t1"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> oper $$ e : t'\n  free_vars e \\<subseteq> V \\<union> V'\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  M \\<equiv> dens_ctxt_measure \\<Y> \\<rho>\n  \\<Gamma> \\<turnstile> e : t", "have M_e: \"(\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<in> measurable M (subprob_algebra (stock_measure t))\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> oper $$ e : t'\n  free_vars e \\<subseteq> V \\<union> V'\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n  M \\<equiv> dens_ctxt_measure \\<Y> \\<rho>\n  \\<Gamma> \\<turnstile> e : t\n\ngoal (1 subgoal):\n 1. (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n    \\<in> M \\<rightarrow>\\<^sub>M subprob_algebra (stock_measure t)", "by (simp add: M_def measurable_dens_ctxt_measure_eq measurable_expr_sem)"], ["proof (state)\nthis:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> M \\<rightarrow>\\<^sub>M subprob_algebra (stock_measure t)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "from return_op_sem"], ["proof (chain)\npicking this:\n  ?x2 \\<in> space (stock_measure t) \\<Longrightarrow>\n  return_val (op_sem oper ?x2) = return (stock_measure t') (op_sem oper ?x2)", "have M_cong: \"(\\<lambda>x. return_val (op_sem oper x)) \\<in> measurable ?N ?R \\<longleftrightarrow>\n                     (\\<lambda>x. return (stock_measure t') (op_sem oper x)) \\<in> measurable ?N ?R\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> space (stock_measure t) \\<Longrightarrow>\n  return_val (op_sem oper ?x2) = return (stock_measure t') (op_sem oper ?x2)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. return_val (op_sem oper x))\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n           subprob_algebra (stock_measure t')) =\n    ((\\<lambda>x. return (stock_measure t') (op_sem oper x))\n     \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n           subprob_algebra (stock_measure t'))", "by (intro measurable_cong) simp"], ["proof (state)\nthis:\n  ((\\<lambda>x. return_val (op_sem oper x))\n   \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n         subprob_algebra (stock_measure t')) =\n  ((\\<lambda>x. return (stock_measure t') (op_sem oper x))\n   \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n         subprob_algebra (stock_measure t'))\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "have M_ret: \"(\\<lambda>x. return_val (op_sem oper x)) \\<in> measurable (stock_measure t) ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. return_val (op_sem oper x))\n    \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n          subprob_algebra (stock_measure t')", "by (subst M_cong, intro measurable_compose[OF measurable_op_sem[OF t2]] return_measurable)"], ["proof (state)\nthis:\n  (\\<lambda>x. return_val (op_sem oper x))\n  \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t')\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "from M_e"], ["proof (chain)\npicking this:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> M \\<rightarrow>\\<^sub>M subprob_algebra (stock_measure t)", "have [simp]: \"sets (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) = sets (stock_measure t)\""], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> M \\<rightarrow>\\<^sub>M subprob_algebra (stock_measure t)\n\ngoal (1 subgoal):\n 1. sets (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) =\n    sets (stock_measure t)", "by (intro sets_bind) (auto simp: M_def space_subprob_algebra dest!: measurable_space)"], ["proof (state)\nthis:\n  sets (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) =\n  sets (stock_measure t)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "from measurable_cong_sets[OF this refl]"], ["proof (chain)\npicking this:\n  (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) \\<rightarrow>\\<^sub>M\n  ?N =\n  stock_measure t \\<rightarrow>\\<^sub>M ?N", "have M_op: \"op_sem oper \\<in> measurable (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) (stock_measure t')\""], ["proof (prove)\nusing this:\n  (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) \\<rightarrow>\\<^sub>M\n  ?N =\n  stock_measure t \\<rightarrow>\\<^sub>M ?N\n\ngoal (1 subgoal):\n 1. op_sem oper\n    \\<in> (M \\<bind>\n           (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) \\<rightarrow>\\<^sub>M\n          stock_measure t'", "by (auto intro!: measurable_op_sem t2)"], ["proof (state)\nthis:\n  op_sem oper\n  \\<in> (M \\<bind>\n         (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) \\<rightarrow>\\<^sub>M\n        stock_measure t'\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "have [simp]: \"space (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) = space (stock_measure t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) =\n    space (stock_measure t)", "by (rule sets_eq_imp_space_eq) simp"], ["proof (state)\nthis:\n  space (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) =\n  space (stock_measure t)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "from M_e and M_ret"], ["proof (chain)\npicking this:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> M \\<rightarrow>\\<^sub>M subprob_algebra (stock_measure t)\n  (\\<lambda>x. return_val (op_sem oper x))\n  \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t')", "have \"M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n                              (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) \\<bind> (\\<lambda>x. return_val (op_sem oper x))\""], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> M \\<rightarrow>\\<^sub>M subprob_algebra (stock_measure t)\n  (\\<lambda>x. return_val (op_sem oper x))\n  \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t')\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n    (\\<lambda>x. return_val (op_sem oper x))", "unfolding M_def"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)\n  \\<in> dens_ctxt_measure \\<Y> \\<rho> \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t)\n  (\\<lambda>x. return_val (op_sem oper x))\n  \\<in> stock_measure t \\<rightarrow>\\<^sub>M\n        subprob_algebra (stock_measure t')\n\ngoal (1 subgoal):\n 1. dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    dens_ctxt_measure \\<Y> \\<rho> \\<bind>\n    (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n    (\\<lambda>x. return_val (op_sem oper x))", "by (subst expr_sem.simps, intro bind_assoc[symmetric]) simp_all"], ["proof (state)\nthis:\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n  (\\<lambda>x. return_val (op_sem oper x))\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "also"], ["proof (state)\nthis:\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n  (\\<lambda>x. return_val (op_sem oper x))\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "have \"... = (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) \\<bind> (\\<lambda>x. return (stock_measure t') (op_sem oper x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n    (\\<lambda>x. return_val (op_sem oper x)) =\n    M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n    (\\<lambda>x. return (stock_measure t') (op_sem oper x))", "by (intro bind_cong refl) (simp add: return_op_sem)"], ["proof (state)\nthis:\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n  (\\<lambda>x. return_val (op_sem oper x)) =\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n  (\\<lambda>x. return (stock_measure t') (op_sem oper x))\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "also"], ["proof (state)\nthis:\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n  (\\<lambda>x. return_val (op_sem oper x)) =\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n  (\\<lambda>x. return (stock_measure t') (op_sem oper x))\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "have \"... = distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e)) (stock_measure t') (op_sem oper)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n    (\\<lambda>x. return (stock_measure t') (op_sem oper x)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "by (subst bind_return_distr[symmetric]) (simp_all add: o_def M_op)"], ["proof (state)\nthis:\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e) \\<bind>\n  (\\<lambda>x. return (stock_measure t') (op_sem oper x)) =\n  distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n   (stock_measure t') (op_sem oper)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "finally"], ["proof (chain)\npicking this:\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n  distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n   (stock_measure t') (op_sem oper)", "show ?thesis"], ["proof (prove)\nusing this:\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n  distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n   (stock_measure t') (op_sem oper)\n\ngoal (1 subgoal):\n 1. M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n    distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n     (stock_measure t') (op_sem oper)", "."], ["proof (state)\nthis:\n  M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> (oper $$ e)) =\n  distr (M \\<bind> (\\<lambda>\\<sigma>. expr_sem \\<sigma> e))\n   (stock_measure t') (op_sem oper)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma density_context_equiv:\n  assumes \"\\<And>\\<sigma>. \\<sigma> \\<in> space (state_measure (V \\<union> V') \\<Gamma>) \\<Longrightarrow> \\<delta> \\<sigma> = \\<delta>' \\<sigma>\"\n  assumes [simp, measurable]: \"\\<delta>' \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\"\n  assumes \"density_context V V' \\<Gamma> \\<delta>\"\n  shows \"density_context V V' \\<Gamma> \\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context V V' \\<Gamma> \\<delta>'", "proof (unfold density_context_def, intro conjI allI impI subprob_spaceI)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "interpret density_context V V' \\<Gamma> \\<delta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. density_context V V' \\<Gamma> \\<delta>", "by fact"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "fix \\<rho>"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "assume \\<rho>: \"\\<rho> \\<in> space (state_measure V' \\<Gamma>)\""], ["proof (state)\nthis:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "let ?M = \"dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "let ?N = \"dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>) \\<rho>\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"emeasure ?M (space ?M) = \\<integral>\\<^sup>+x. \\<delta>' (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n     (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)) =\n    \\<integral>\\<^sup>+ x. \\<delta>' (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "unfolding dens_ctxt_measure_def state_measure'_def"], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure\n     ((case (V, V', \\<Gamma>, \\<delta>') of\n       (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n         \\<lambda>\\<rho>.\n            density\n             (distr (state_measure V \\<Gamma>)\n               (state_measure (V \\<union> V') \\<Gamma>)\n               (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n             \\<delta>)\n       \\<rho>)\n     (space\n       ((case (V, V', \\<Gamma>, \\<delta>') of\n         (V, V', \\<Gamma>, \\<delta>) \\<Rightarrow>\n           \\<lambda>\\<rho>.\n              density\n               (distr (state_measure V \\<Gamma>)\n                 (state_measure (V \\<union> V') \\<Gamma>)\n                 (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n               \\<delta>)\n         \\<rho>)) =\n    \\<integral>\\<^sup>+ x. \\<delta>' (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "apply (simp only: prod.case, subst space_density)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<rho> \\<in> space (state_measure V' \\<Gamma>);\n     \\<rho> \\<in> space (state_measure V' \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> emeasure\n                       (density\n                         (distr (state_measure V \\<Gamma>)\n                           (state_measure (V \\<union> V') \\<Gamma>)\n                           (\\<lambda>\\<sigma>.\n                               merge V V' (\\<sigma>, \\<rho>)))\n                         \\<delta>')\n                       (space\n                         (distr (state_measure V \\<Gamma>)\n                           (state_measure (V \\<union> V') \\<Gamma>)\n                           (\\<lambda>\\<sigma>.\n                               merge V V' (\\<sigma>, \\<rho>)))) =\n                      \\<integral>\\<^sup>+ x.\n     \\<delta>' (merge V V' (x, \\<rho>))\n   \\<partial>state_measure V \\<Gamma>", "apply (simp add: emeasure_density cong: nn_integral_cong')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n    integral\\<^sup>N\n     (distr (state_measure V \\<Gamma>)\n       (state_measure (V \\<union> V') \\<Gamma>)\n       (\\<lambda>\\<sigma>. merge V V' (\\<sigma>, \\<rho>)))\n     \\<delta>' =\n    \\<integral>\\<^sup>+ x. \\<delta>' (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "apply (subst nn_integral_distr, simp add: state_measure_def, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n   (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)) =\n  \\<integral>\\<^sup>+ x. \\<delta>' (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n   (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)) =\n  \\<integral>\\<^sup>+ x. \\<delta>' (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... = \\<integral>\\<^sup>+x. \\<delta> (merge V V' (x, \\<rho>)) \\<partial>state_measure V \\<Gamma>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta>' (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma> =\n    \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma>", "by (intro nn_integral_cong, subst assms(1)) (simp_all add: merge_in_state_measure)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta>' (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta>' (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma>\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... = branch_prob (V,V',\\<Gamma>,\\<delta>) \\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                       \\<partial>state_measure V \\<Gamma> =\n    branch_prob \\<Y> \\<rho>", "by (simp add: branch_prob_altdef)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  branch_prob \\<Y> \\<rho>\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. \\<delta> (merge V V' (x, \\<rho>))\n                     \\<partial>state_measure V \\<Gamma> =\n  branch_prob \\<Y> \\<rho>\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "have \"... = emeasure ?N (space ?N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. branch_prob \\<Y> \\<rho> =\n    emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     (space (dens_ctxt_measure \\<Y> \\<rho>))", "by (simp add: branch_prob_def)"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "also"], ["proof (state)\nthis:\n  branch_prob \\<Y> \\<rho> =\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "from \\<rho>"], ["proof (chain)\npicking this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)", "have \"... \\<le> 1\""], ["proof (prove)\nusing this:\n  \\<rho> \\<in> space (state_measure V' \\<Gamma>)\n\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n     (space (dens_ctxt_measure \\<Y> \\<rho>))\n    \\<le> 1", "by (intro subprob_space.emeasure_space_le_1 subprob_space_dens)"], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure \\<Y> \\<rho>)\n   (space (dens_ctxt_measure \\<Y> \\<rho>))\n  \\<le> 1\n\ngoal (6 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n        (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n       \\<le> 1\n 2. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 3. finite V\n 4. finite V'\n 5. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 6. V \\<inter> V' = {}", "finally"], ["proof (chain)\npicking this:\n  emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n   (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n  \\<le> 1", "show \"emeasure ?M (space ?M) \\<le> 1\""], ["proof (prove)\nusing this:\n  emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n   (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n     (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n    \\<le> 1", "."], ["proof (state)\nthis:\n  emeasure (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>)\n   (space (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>))\n  \\<le> 1\n\ngoal (5 subgoals):\n 1. \\<And>\\<rho>.\n       \\<rho> \\<in> space (state_measure V' \\<Gamma>) \\<Longrightarrow>\n       space\n        (dens_ctxt_measure (V, V', \\<Gamma>, \\<delta>') \\<rho>) \\<noteq>\n       {}\n 2. finite V\n 3. finite V'\n 4. \\<delta>'\n    \\<in> borel_measurable (state_measure (V \\<union> V') \\<Gamma>)\n 5. V \\<inter> V' = {}", "qed (insert assms, auto simp: density_context_def)"], ["", "end"]]}