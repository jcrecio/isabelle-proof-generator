{"file_name": "/home/qj213/afp-2021-10-22/thys/SequentInvertibility/SRCTransforms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SequentInvertibility", "problem_names": ["lemma deriv_to_deriv[simp]:\nassumes \"(C,n) \\<in> derivable R\"\nshows \"C \\<in> derivable' R\"", "lemma deriv_to_deriv2:\nassumes \"C \\<in> derivable' R\"\nshows \"\\<exists> n. (C,n) \\<in> derivable R\"", "lemma characteriseSeq:\nshows \"\\<exists> A B. (C :: 'a sequent) = (A \\<Rightarrow>* B)\"", "lemma nonEmptySet:\nshows \"A \\<noteq> [] \\<longrightarrow> (\\<exists> a. a \\<in> set A)\"", "lemma midMultiset:\n  assumes \"\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\" and \"A \\<noteq> B\"\n  shows \"\\<exists> \\<Gamma>''. \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and> \\<Gamma>' = \\<Gamma>'' \\<oplus> A\"", "lemma extendID:\nassumes \"extend S (\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\"", "lemma extendFalsum:\nassumes \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"ff \\<in># \\<Gamma>\"", "lemma containID:\nassumes a:\"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\"\n    and b:\"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\"", "lemma containFalsum:\nassumes a: \"ff \\<in># \\<Gamma>\"\n   and  b: \"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\"", "lemma characteriseAx:\nshows \"r \\<in> Ax \\<Longrightarrow> r = ([],\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) \\<or> (\\<exists> i. r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>))\"", "lemma characteriseLast:\nassumes \"(C,m+1) \\<in> derivable R\"\nshows \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n             (Ps,C) \\<in> R \\<and> \n             (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\"", "lemma succ_upRule:\nassumes \"(Ps,\\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\"\nshows \"\\<Psi> = \\<Empt> \\<or> (\\<exists> A. \\<Psi> = \\<LM>A\\<RM>)\"", "lemma antec_upRule:\nassumes \"(Ps,\\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\"\nshows \"\\<Phi> = \\<Empt> \\<or> (\\<exists> A. \\<Phi> = \\<LM>A\\<RM>)\"", "lemma upRule_Size:\nassumes \"r \\<in> upRules\"\nshows \"seq_size (snd r) = 1\"", "lemma upRuleCharacterise:\nassumes \"(Ps,C) \\<in> upRules\"\nshows \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<or> C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\"", "lemma extendEmpty:\nshows \"extend (\\<Empt> \\<Rightarrow>* \\<Empt>) C = C\"", "lemma extendContain:\nassumes \"r = (ps,c)\"\n    and \"(Ps,C) = extendRule S r\"\n    and \"p \\<in> set ps\"\nshows \"extend S p \\<in> set Ps\"", "lemma nonPrincipalID:\nfixes A :: \"'a form\"\nassumes \"r \\<in> Ax\"\nshows \"\\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\"", "lemma extendCommute:\nshows \"(extend S) (extend R c) = (extend R) (extend S c)\"", "lemma mapCommute:\nshows \"map (extend S) (map (extend R) c) = map (extend R) (map (extend S) c)\"", "lemma extendAssoc:\nshows \"(extend S) (extend R c) = extend (extend S R) c\"", "lemma mapAssoc:\nshows \"map (extend S) (map (extend R) c) = map (extend (extend S R)) c\"", "lemma extended_Ax_prems_empty:\nassumes \"r \\<in> Ax\"\nshows \"fst (extendRule S r) = []\"", "lemma obv:\nfixes a :: \"('a * 'b)\"\nshows \"a = (fst a, snd a)\"", "lemma getLast:\nassumes \"lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,n+1) r R\"\nshows \"\\<exists> S Ps. extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and> (\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*) \\<and> r \\<in> R \\<and> r \\<notin> Ax\"", "lemma getAx:\nassumes \"lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,0) r R\"\nshows \"r \\<in> Ax \\<and> (\\<exists> S. extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta>))\"", "lemma ruleSet:\nassumes \"R' \\<subseteq> upRules\"\n    and \"R = Ax \\<union> R'\"\n    and \"(Ps,C) \\<in> R*\"\nshows \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\"", "lemma dpWeak:\nassumes a:\"(\\<Gamma> \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\"\n   and  b: \"R' \\<subseteq> upRules\"\n   and  c: \"R = Ax \\<union> R'\" \nshows \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',n) \\<in> derivable R*\"", "lemma removeRedundant:\nassumes (*<*)a:(*>*) \"r1 = (p#ps,c) \\<and> r1 \\<in> upRules\"\nand     (*<*)b:(*>*) \"r2 = (ps,c) \\<and> r2 \\<in> upRules\"\nand     (*<*)c:(*>*) \"R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\"\nand     (*<*)d:(*>*) \"(T,n) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\"\nshows   \"\\<exists> m\\<le>n. (T,m) \\<in> derivable (R \\<union> {r2})*\"", "lemma removeSuperfluous:\nassumes (*<*)a:(*>*) \"r1 = ((\\<Empt> \\<Rightarrow>* \\<LM>A\\<RM>) # ((\\<LM>A\\<RM> \\<Rightarrow>* \\<Empt>) # ps),c) \\<and> r1 \\<in> upRules\"\nand     (*<*)b:(*>*) \"R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\"\nand     \"(T,n) \\<in> derivable (R \\<union> {r1})*\"\nand     CA: \"\\<forall> \\<Gamma> \\<Delta> A. ((\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A) \\<in> derivable' R* \\<longrightarrow> \n             (\\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*) \\<longrightarrow>\n             (\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\"\nshows   \"T \\<in> derivable' R*\"", "lemma removeCombinable:\nassumes a: \"r1 = (p # ps,c) \\<and> r1 \\<in> upRules\"\nand     b: \"r2 = (q # ps,c) \\<and> r2 \\<in> upRules\"\nand     c: \"r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\"\nand     d: \"R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\"\nand     \"(T,n) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\"\nshows   \"(T,n) \\<in> derivable (R \\<union> {r3})*\""], "translations": [["", "lemma deriv_to_deriv[simp]:\nassumes \"(C,n) \\<in> derivable R\"\nshows \"C \\<in> derivable' R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> derivable' R", "using assms"], ["proof (prove)\nusing this:\n  (C, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. C \\<in> derivable' R", "by (induct) auto"], ["", "lemma deriv_to_deriv2:\nassumes \"C \\<in> derivable' R\"\nshows \"\\<exists> n. (C,n) \\<in> derivable R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "using assms"], ["proof (prove)\nusing this:\n  C \\<in> derivable' R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "case (base C)"], ["proof (state)\nthis:\n  ([], C) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  ([], C) \\<in> R", "have \"(C,0) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  ([], C) \\<in> R\n\ngoal (1 subgoal):\n 1. (C, 0) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  (C, 0) \\<in> derivable R\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       ([], C) \\<in> R \\<Longrightarrow>\n       \\<exists>n. (C, n) \\<in> derivable R\n 2. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  (C, 0) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  (C, 0) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (C, n) \\<in> derivable R", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. (C, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "case (step r)"], ["proof (state)\nthis:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)", "obtain ps c where \"r = (ps,c)\" and \"ps \\<noteq> []\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  fst r \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. (\\<And>ps c.\n        \\<lbrakk>r = (ps, c); ps \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (ps, c)\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  ps \\<noteq> []", "have aa: \"\\<forall> p \\<in> set ps. \\<exists> n. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R", "using step(3)"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  ps \\<noteq> []\n  \\<forall>p\\<in>set (fst r).\n     p \\<in> derivable' R \\<and> (\\<exists>n. (p, n) \\<in> derivable R)\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R", "have \"\\<exists> m. \\<forall> p \\<in> set ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ps. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "proof (induct ps)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>set [].\n       \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n    \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n 2. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "case Nil"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>set [].\n       \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n    \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n 2. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set []. \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set []. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R", "have \"\\<exists> m. \\<forall> p \\<in> set as. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set as.\n     \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "obtain m where \"\\<forall> p \\<in> set as. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<forall>p\\<in>set as.\n           \\<exists>n\\<le>m. (p, n) \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "from \\<open>\\<forall> p \\<in> set (a # as). \\<exists> n. (p,n) \\<in> derivable R\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R", "have\n      \"\\<exists> n. (a,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (a # as). \\<exists>n. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (a, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. (a, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. (a, n) \\<in> derivable R", "obtain m' where \"(a,m') \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>n. (a, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        (a, m') \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, m') \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  (a, m') \\<in> derivable R", "have \"\\<forall> p \\<in> set (a # as). \\<exists> n\\<le>(max m m'). (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set as. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  (a, m') \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set (a # as).\n       \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                x \\<in> set as \\<longrightarrow>\n                (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n     (a, m') \\<in> derivable R\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<le>max m m'. (a, n) \\<in> derivable R\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply (rule_tac x=m' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                x \\<in> set as \\<longrightarrow>\n                (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n     (a, m') \\<in> derivable R\\<rbrakk>\n    \\<Longrightarrow> m' \\<le> max m m' \\<and> (a, m') \\<in> derivable R\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set as \\<longrightarrow>\n                   (\\<exists>n\\<le>m. (x, n) \\<in> derivable R);\n        (a, m') \\<in> derivable R; x \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(a, m') \\<in> derivable R; x \\<in> set as;\n        x \\<in> set as \\<longrightarrow>\n        (\\<exists>n\\<le>m. (x, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>(a, m') \\<in> derivable R; x \\<in> set as; n \\<le> m;\n        (x, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<le>max m m'. (x, n) \\<in> derivable R", "apply (rule_tac x=n in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>(a, m') \\<in> derivable R; x \\<in> set as; n \\<le> m;\n        (x, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> n \\<le> max m m' \\<and> (x, n) \\<in> derivable R", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>\\<forall>p\\<in>set ps.\n                   \\<exists>n. (p, n) \\<in> derivable R \\<Longrightarrow>\n                \\<exists>m.\n                   \\<forall>p\\<in>set ps.\n                      \\<exists>n\\<le>m. (p, n) \\<in> derivable R;\n        \\<forall>p\\<in>set (a # ps).\n           \\<exists>n. (p, n) \\<in> derivable R\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            \\<forall>p\\<in>set (a # ps).\n                               \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set (a # as).\n     \\<exists>n\\<le>max m m'. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       \\<forall>p\\<in>set (a # as).\n          \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "by blast"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set (a # as). \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "obtain m where \"\\<forall> p \\<in> set ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<forall>p\\<in>set ps.\n           \\<exists>n\\<le>m. (p, n) \\<in> derivable R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "with \\<open>r = (ps,c)\\<close> and \\<open>r \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R", "have \"(c,m+1) \\<in> derivable R\""], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (c, m + 1) \\<in> derivable R", "using \\<open>ps \\<noteq> []\\<close> and\n    derivable.step[where r=\"(ps,c)\" and R=R and m=m]"], ["proof (prove)\nusing this:\n  r = (ps, c)\n  r \\<in> R\n  \\<forall>p\\<in>set ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R\n  ps \\<noteq> []\n  \\<lbrakk>(ps, c) \\<in> R; fst (ps, c) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (ps, c)).\n      \\<exists>n\\<le>m. (p, n) \\<in> derivable R\\<rbrakk>\n  \\<Longrightarrow> (snd (ps, c), m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. (c, m + 1) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  (c, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>r \\<in> R; fst r \\<noteq> [];\n        \\<forall>p\\<in>set (fst r).\n           p \\<in> derivable' R \\<and>\n           (\\<exists>n. (p, n) \\<in> derivable R)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. (snd r, n) \\<in> derivable R", "then"], ["proof (chain)\npicking this:\n  (c, m + 1) \\<in> derivable R", "show ?case"], ["proof (prove)\nusing this:\n  (c, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>n. (snd r, n) \\<in> derivable R", "using \\<open>r = (ps,c)\\<close>"], ["proof (prove)\nusing this:\n  (c, m + 1) \\<in> derivable R\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. \\<exists>n. (snd r, n) \\<in> derivable R", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. (snd r, n) \\<in> derivable R\n\ngoal:\nNo subgoals!", "qed"], ["", "(* definition of invertible rule and invertible set of rules.  It's a bit nasty, but all it really says is\n   If a rule is in the given set, and if any extension of that rule is derivable at n, then the\n   premisses of the extended rule are derivable at height at most n.  *)"], ["", "overloading\n  invertible \\<equiv> invertible\n  invertible_set \\<equiv> invertible_set\nbegin"], ["", "definition invertible\n  where \"invertible r R \\<equiv>\n    \\<forall> n S. (r \\<in> R \\<and> (snd (extendRule S r),n) \\<in> derivable R*) \\<longrightarrow>\n    (\\<forall> p \\<in> set (fst (extendRule S r)). \\<exists> m \\<le> n. (p,m) \\<in> derivable R*)\""], ["", "definition invertible_set\n  where \"invertible_set R \\<equiv> \\<forall> (ps,c) \\<in> R. invertible (ps,c) R\""], ["", "end"], ["", "(* Characterisation of a sequent *)"], ["", "lemma characteriseSeq:\nshows \"\\<exists> A B. (C :: 'a sequent) = (A \\<Rightarrow>* B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A B. C = ( A \\<Rightarrow>* B)", "apply (rule_tac x=\"antec C\" in exI, rule_tac x=\"succ C\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. C = ( antec C \\<Rightarrow>* succ C)", "by (cases C) (auto)"], ["", "(* Helper function for later *)"], ["", "lemma nonEmptySet:\nshows \"A \\<noteq> [] \\<longrightarrow> (\\<exists> a. a \\<in> set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> [] \\<longrightarrow> (\\<exists>a. a \\<in> set A)", "by (auto simp add:neq_Nil_conv)"], ["", "(* Lemma which comes in helpful ALL THE TIME *)"], ["", "lemma midMultiset:\n  assumes \"\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\" and \"A \\<noteq> B\"\n  shows \"\\<exists> \\<Gamma>''. \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and> \\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B", "have \"A \\<in># \\<Gamma>'\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "from assms"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B", "have \"set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)", "by auto"], ["proof (state)\nthis:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)", "have \"set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\""], ["proof (prove)\nusing this:\n  set_mset (\\<Gamma> \\<oplus> A) = set_mset (\\<Gamma>' \\<oplus> B)\n\ngoal (1 subgoal):\n 1. set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}", "by auto"], ["proof (state)\nthis:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}", "have \"set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\""], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} = set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. set_mset \\<Gamma> \\<union> {A}\n    \\<subseteq> set_mset \\<Gamma>' \\<union> {B}", "by simp"], ["proof (state)\nthis:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "then"], ["proof (chain)\npicking this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}", "have \"A \\<in> set_mset \\<Gamma>'\""], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "using assms"], ["proof (prove)\nusing this:\n  set_mset \\<Gamma> \\<union> {A} \\<subseteq> set_mset \\<Gamma>' \\<union> {B}\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B;\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> A \\<in># \\<Gamma>'", "thus \"A \\<in># \\<Gamma>'\""], ["proof (prove)\nusing this:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. A \\<in># \\<Gamma>'", "by simp"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  A \\<in># \\<Gamma>'", "have \"\\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\""], ["proof (prove)\nusing this:\n  A \\<in># \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'", "by (auto simp add:multiset_eq_iff)"], ["proof (state)\nthis:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'", "have \"\\<exists> \\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\nusing this:\n  \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "apply (rule_tac x=\"\\<Gamma>' \\<ominus> A\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>' \\<ominus> A \\<oplus> A = \\<Gamma>' \\<Longrightarrow>\n    \\<Gamma>' = \\<Gamma>' \\<ominus> A \\<oplus> A", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "obtain \\<Gamma>'' where eq1:\"\\<Gamma>' = \\<Gamma>'' \\<oplus> A\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>''. \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma>''.\n        \\<Gamma>' = \\<Gamma>'' \\<oplus> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "from \\<open>\\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\\<close> eq1"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "have \"\\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B", "have \"\\<Gamma> = \\<Gamma>'' \\<oplus> B\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<oplus> A = \\<Gamma>'' \\<oplus> A \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma>'' \\<oplus> B", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "using eq1"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>'' \\<oplus> B\n  \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>''.\n       \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n       \\<Gamma>' = \\<Gamma>'' \\<oplus> A", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>''.\n     \\<Gamma> = \\<Gamma>'' \\<oplus> B \\<and>\n     \\<Gamma>' = \\<Gamma>'' \\<oplus> A\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma which says that if we have extended an identity rule, then the propositional variable is\n   contained in the extended multisets *)"], ["", "lemma extendID:\nassumes \"extend S (\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "using assms"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n    At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "from assms"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> \\<Gamma>' \\<Delta>'. \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and> \\<Delta> = \\<Delta>' \\<oplus> At i\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>' \\<Delta>'.\n       \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n       \\<Delta> = \\<Delta>' \\<oplus> At i", "using extend_def[where forms=S and seq=\"\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<equiv>\n   antec S +\n   antec\n    ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At\n        i  \\<RM>) \\<Rightarrow>* succ S +\n                                 succ\n                                  ( \\<LM> At\n     i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>' \\<Delta>'.\n       \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n       \\<Delta> = \\<Delta>' \\<oplus> At i", "by (rule_tac x=\"antec S\" in exI,rule_tac x=\"succ S\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n    At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>' \\<Delta>'.\n     \\<Gamma> = \\<Gamma>' \\<oplus> At i \\<and>\n     \\<Delta> = \\<Delta>' \\<oplus> At i\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendFalsum:\nassumes \"extend S (\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\"\nshows \"ff \\<in># \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "from assms"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"\\<exists> \\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "using extend_def[where forms=S and seq=\"\\<LM>ff \\<RM> \\<Rightarrow>* \\<Empt>\"]"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n   antec S +\n   antec\n    ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Rightarrow>* succ S +\n                       succ ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "by (rule_tac x=\"antec S\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<Gamma>'. \\<Gamma> = \\<Gamma>' \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma that says if a propositional variable is in both the antecedent and succedent of a sequent,\n   then it is derivable from idupRules *)"], ["", "lemma containID:\nassumes a:\"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\"\n    and b:\"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "from a"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "have \"\\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and> \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n    \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i", "have \"extend ((\\<Gamma> \\<ominus> At i) \\<Rightarrow>* (\\<Delta> \\<ominus> At i)) (\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n     ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using extend_def[where forms=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i\" and seq=\"\\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>\"]"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> At i \\<oplus> At i \\<and>\n  \\<Delta> = \\<Delta> \\<ominus> At i \\<oplus> At i\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<equiv>\n   antec ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i) +\n   antec\n    ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At\n        i  \\<RM>) \\<Rightarrow>* succ\n                                  ( \\<Gamma> \\<ominus>\n                                    At i \\<Rightarrow>* \\<Delta> \\<ominus>\n                  At i) +\n                                 succ\n                                  ( \\<LM> At\n     i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n     ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "have \"([],\\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R", "using b"], ["proof (prove)\nusing this:\n  Ax \\<subseteq> R\n\ngoal (1 subgoal):\n 1. ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R", "have \"([],\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "using extRules.I[where R=R and r=\"([],  \\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>)\" and seq=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i\"] \n      and extendRule_def[where forms=\"\\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i\" and R=\"([],  \\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>)\"]"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<in> R\n  ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  \\<in> R \\<Longrightarrow>\n  extendRule\n   ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  \\<in> R*\n  extendRule\n   ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n   ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<equiv>\n  (map (extend\n         ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i))\n    (fst ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)),\n   extend ( \\<Gamma> \\<ominus> At i \\<Rightarrow>* \\<Delta> \\<ominus> At i)\n    (snd ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)))\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "by auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "using derivable.base[where R=\"R*\" and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta>\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R* \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma containFalsum:\nassumes a: \"ff \\<in># \\<Gamma>\"\n   and  b: \"Ax \\<subseteq> R\"\nshows \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "from a"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"\\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff", "have \"extend (\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) (\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n     ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using extend_def[where forms=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\" and seq=\"\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>\"]"], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma> \\<ominus> ff \\<oplus> ff\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n   antec ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) +\n   antec\n    ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Rightarrow>* succ\n                        ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>) +\n                       succ ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n     ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "have \"([],\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "using b"], ["proof (prove)\nusing this:\n  Ax \\<subseteq> R\n\ngoal (1 subgoal):\n 1. ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "by auto"], ["proof (state)\nthis:\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R", "have \"([],\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "using extRules.I[where R=R and r=\"([],  \\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\" and seq=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\"] \n      and extendRule_def[where forms=\"\\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>\" and R=\"([],  \\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\"]"], ["proof (prove)\nusing this:\n  extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R\n  ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> R \\<Longrightarrow>\n  extendRule ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  \\<in> R*\n  extendRule ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n   ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<equiv>\n  (map (extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>))\n    (fst ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)),\n   extend ( \\<Gamma> \\<ominus> ff \\<Rightarrow>* \\<Delta>)\n    (snd ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)))\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "by auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "using derivable.base[where R=\"R*\" and C=\"\\<Gamma> \\<Rightarrow>* \\<Delta>\"]"], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R* \\<Longrightarrow>\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lemma which says that if r is an identity rule, then r is of the form\n   ([], P \\<Rightarrow>* P) *)"], ["", "lemma characteriseAx:\nshows \"r \\<in> Ax \\<Longrightarrow> r = ([],\\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) \\<or> (\\<exists> i. r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i \\<RM>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<Longrightarrow>\n    r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n    (\\<exists>i.\n        r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> r =\n                         ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n                         (\\<exists>i.\n                             r =\n                             ([],\n                               \\<LM> At\ni  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))", "by (rule Ax.cases) auto"], ["", "(* A lemma about the last rule used in a derivation, i.e. that one exists *)"], ["", "lemma characteriseLast:\nassumes \"(C,m+1) \\<in> derivable R\"\nshows \"\\<exists> Ps. Ps \\<noteq> [] \\<and>\n             (Ps,C) \\<in> R \\<and> \n             (\\<forall> p \\<in> set Ps. \\<exists> n\\<le>m. (p,n) \\<in> derivable R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "using assms"], ["proof (prove)\nusing this:\n  (C, m + 1) \\<in> derivable R\n\ngoal (1 subgoal):\n 1. \\<exists>Ps.\n       Ps \\<noteq> [] \\<and>\n       (Ps, C) \\<in> R \\<and>\n       (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>m. (p, n) \\<in> derivable R)", "by (cases) auto"], ["", "(* Lemma which says that if rule is an upRule, then the succedent is either empty, or a single formula *)"], ["", "lemma succ_upRule:\nassumes \"(Ps,\\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\"\nshows \"\\<Psi> = \\<Empt> \\<or> (\\<exists> A. \\<Psi> = \\<LM>A\\<RM>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "using assms"], ["proof (prove)\nusing this:\n  (Ps,  \\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n                \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> = \\<Empt> \\<or>\n                         (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "case (I R Rs)"], ["proof (state)\nthis:\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n                \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> = \\<Empt> \\<or>\n                         (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "then"], ["proof (chain)\npicking this:\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []", "show \"\\<Psi> = \\<Empt> \\<or> (\\<exists> A. \\<Psi> = \\<LM>A\\<RM>)\""], ["proof (prove)\nusing this:\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "using mset.simps[where ant=\\<Phi> and suc=\\<Psi>] \n         and union_is_single[where M=\\<Phi> and N=\\<Psi> and a=\"Compound R Rs\"]"], ["proof (prove)\nusing this:\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) = \\<Phi> + \\<Psi>\n  (\\<Phi> + \\<Psi> = \\<LM> Compound R Rs  \\<RM>) =\n  (\\<Phi> = \\<LM> Compound R Rs  \\<RM> \\<and> \\<Psi> = \\<Empt> \\<or>\n   \\<Phi> = \\<Empt> \\<and> \\<Psi> = \\<LM> Compound R Rs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)", "by (simp,elim disjE) (auto)"], ["proof (state)\nthis:\n  \\<Psi> = \\<Empt> \\<or> (\\<exists>A. \\<Psi> = \\<LM> A  \\<RM>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Equivalent, but the antecedent *)"], ["", "lemma antec_upRule:\nassumes \"(Ps,\\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\"\nshows \"\\<Phi> = \\<Empt> \\<or> (\\<exists> A. \\<Phi> = \\<LM>A\\<RM>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "using assms"], ["proof (prove)\nusing this:\n  (Ps,  \\<Phi> \\<Rightarrow>* \\<Psi>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n                \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> = \\<Empt> \\<or>\n                         (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "case (I R Rs)"], ["proof (state)\nthis:\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n                \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> = \\<Empt> \\<or>\n                         (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "then"], ["proof (chain)\npicking this:\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []", "show \"\\<Phi> = \\<Empt> \\<or> (\\<exists> A. \\<Phi> = \\<LM>A\\<RM>)\""], ["proof (prove)\nusing this:\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "using mset.simps[where ant=\\<Phi> and suc=\\<Psi>] \n         and union_is_single[where M=\\<Phi> and N=\\<Psi> and a=\"Compound R Rs\"]"], ["proof (prove)\nusing this:\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<equiv>\n  \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n  SRCTransforms.mset ( \\<Phi> \\<Rightarrow>* \\<Psi>) = \\<Phi> + \\<Psi>\n  (\\<Phi> + \\<Psi> = \\<LM> Compound R Rs  \\<RM>) =\n  (\\<Phi> = \\<LM> Compound R Rs  \\<RM> \\<and> \\<Psi> = \\<Empt> \\<or>\n   \\<Phi> = \\<Empt> \\<and> \\<Psi> = \\<LM> Compound R Rs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)", "by (simp,elim disjE) (auto)"], ["proof (state)\nthis:\n  \\<Phi> = \\<Empt> \\<or> (\\<exists>A. \\<Phi> = \\<LM> A  \\<RM>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma upRule_Size:\nassumes \"r \\<in> upRules\"\nshows \"seq_size (snd r) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq_size (snd r) = 1", "using assms"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. seq_size (snd r) = 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow> seq_size (snd r) = 1", "obtain Ps C where \"r = (Ps,C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ps C. r = (Ps, C) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r)"], ["proof (state)\nthis:\n  r = (Ps, C)\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  r = (Ps, C)", "have \"(Ps,C) \\<in> upRules\""], ["proof (prove)\nusing this:\n  r = (Ps, C)\n\ngoal (1 subgoal):\n 1. (Ps, C) \\<in> upRules", "using assms"], ["proof (prove)\nusing this:\n  r = (Ps, C)\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. (Ps, C) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> upRules \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  (Ps, C) \\<in> upRules", "show ?thesis"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. seq_size (snd r) = 1", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "case (I R Rs)"], ["proof (state)\nthis:\n  SRCTransforms.mset C \\<equiv> \\<LM> Compound R Rs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "obtain G H where \"C = (G \\<Rightarrow>* H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>G H.\n        C = ( G \\<Rightarrow>* H) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases C) (auto)"], ["proof (state)\nthis:\n  C = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  C = ( G \\<Rightarrow>* H)", "have \"G + H = \\<LM>Compound R Rs\\<RM>\""], ["proof (prove)\nusing this:\n  C = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. G + H = \\<LM> Compound R Rs  \\<RM>", "using mset.simps and \\<open>mset C \\<equiv> \\<LM>Compound R Rs\\<RM>\\<close>"], ["proof (prove)\nusing this:\n  C = ( G \\<Rightarrow>* H)\n  SRCTransforms.mset ( ?ant \\<Rightarrow>* ?suc) = ?ant + ?suc\n  SRCTransforms.mset C \\<equiv> \\<LM> Compound R Rs  \\<RM>\n\ngoal (1 subgoal):\n 1. G + H = \\<LM> Compound R Rs  \\<RM>", "by auto"], ["proof (state)\nthis:\n  G + H = \\<LM> Compound R Rs  \\<RM>\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  G + H = \\<LM> Compound R Rs  \\<RM>", "have \"size (G+H) = 1\""], ["proof (prove)\nusing this:\n  G + H = \\<LM> Compound R Rs  \\<RM>\n\ngoal (1 subgoal):\n 1. size (G + H) = 1", "by auto"], ["proof (state)\nthis:\n  size (G + H) = 1\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  size (G + H) = 1", "have \"size G + size H = 1\""], ["proof (prove)\nusing this:\n  size (G + H) = 1\n\ngoal (1 subgoal):\n 1. size G + size H = 1", "by auto"], ["proof (state)\nthis:\n  size G + size H = 1\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "then"], ["proof (chain)\npicking this:\n  size G + size H = 1", "have \"seq_size C = 1\""], ["proof (prove)\nusing this:\n  size G + size H = 1\n\ngoal (1 subgoal):\n 1. seq_size C = 1", "using seq_size.simps[where ant=G and suc=H] and \\<open>C = (G \\<Rightarrow>* H)\\<close>"], ["proof (prove)\nusing this:\n  size G + size H = 1\n  seq_size ( G \\<Rightarrow>* H) = size G + size H\n  C = ( G \\<Rightarrow>* H)\n\ngoal (1 subgoal):\n 1. seq_size C = 1", "by auto"], ["proof (state)\nthis:\n  seq_size C = 1\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "moreover"], ["proof (state)\nthis:\n  seq_size C = 1\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "have \"snd r = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd r = C", "using \\<open>r = (Ps,C)\\<close>"], ["proof (prove)\nusing this:\n  r = (Ps, C)\n\ngoal (1 subgoal):\n 1. snd r = C", "by simp"], ["proof (state)\nthis:\n  snd r = C\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> seq_size (snd r) = 1", "ultimately"], ["proof (chain)\npicking this:\n  seq_size C = 1\n  snd r = C", "show \"seq_size (snd r) = 1\""], ["proof (prove)\nusing this:\n  seq_size C = 1\n  snd r = C\n\ngoal (1 subgoal):\n 1. seq_size (snd r) = 1", "by simp"], ["proof (state)\nthis:\n  seq_size (snd r) = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  seq_size (snd r) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma upRuleCharacterise:\nassumes \"(Ps,C) \\<in> upRules\"\nshows \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<or> C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "using assms"], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "proof (cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Compound F\n                                     Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "case (I F Fs)"], ["proof (state)\nthis:\n  SRCTransforms.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Compound F\n                                     Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  SRCTransforms.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  Ps \\<noteq> []", "obtain \\<Gamma> \\<Delta> where \"C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  SRCTransforms.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseSeq[where C=C]"], ["proof (prove)\nusing this:\n  SRCTransforms.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  Ps \\<noteq> []\n  \\<exists>A B. C = ( A \\<Rightarrow>* B)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Gamma> \\<Delta>.\n        C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Compound F\n                                     Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"(Ps,\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\""], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "using assms"], ["proof (prove)\nusing this:\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  (Ps, C) \\<in> upRules\n\ngoal (1 subgoal):\n 1. (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "by simp"], ["proof (state)\nthis:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>R Fs.\n       \\<lbrakk>SRCTransforms.mset C \\<equiv> \\<LM> Compound R Fs  \\<RM>;\n        Ps \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F Fs.\n                            C =\n                            ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F\n                      Fs  \\<RM>) \\<or>\n                            C =\n                            ( \\<LM> Compound F\n                                     Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "then"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules", "show \"\\<exists> F Fs. C = (\\<Empt> \\<Rightarrow>* \\<LM>Compound F Fs\\<RM>) \\<or> C = (\\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "using \\<open>mset C \\<equiv> \\<LM>Compound F Fs\\<RM>\\<close> and \\<open>C = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<close>\n      and mset.simps[where ant=\\<Gamma> and suc=\\<Delta>] and union_is_single[where M=\\<Gamma> and N=\\<Delta> and a=\"Compound F Fs\"]"], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> upRules\n  SRCTransforms.mset C \\<equiv> \\<LM> Compound F Fs  \\<RM>\n  C = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  SRCTransforms.mset ( \\<Gamma> \\<Rightarrow>* \\<Delta>) =\n  \\<Gamma> + \\<Delta>\n  (\\<Gamma> + \\<Delta> = \\<LM> Compound F Fs  \\<RM>) =\n  (\\<Gamma> = \\<LM> Compound F Fs  \\<RM> \\<and> \\<Delta> = \\<Empt> \\<or>\n   \\<Gamma> = \\<Empt> \\<and> \\<Delta> = \\<LM> Compound F Fs  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<exists>F Fs.\n       C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n       C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>F Fs.\n     C = ( \\<Empt> \\<Rightarrow>* \\<LM> Compound F Fs  \\<RM>) \\<or>\n     C = ( \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendEmpty:\nshows \"extend (\\<Empt> \\<Rightarrow>* \\<Empt>) C = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend ( \\<Empt> \\<Rightarrow>* \\<Empt>) C = C", "apply (auto simp add:extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ( antec C \\<Rightarrow>* succ C) = C", "by (cases C) auto"], ["", "lemma extendContain:\nassumes \"r = (ps,c)\"\n    and \"(Ps,C) = extendRule S r\"\n    and \"p \\<in> set ps\"\nshows \"extend S p \\<in> set Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "from \\<open>p \\<in> set ps\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> set ps", "have \"extend S p \\<in> set (map (extend S) ps)\""], ["proof (prove)\nusing this:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set (map (extend S) ps)", "by auto"], ["proof (state)\nthis:\n  extend S p \\<in> set (map (extend S) ps)\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "moreover"], ["proof (state)\nthis:\n  extend S p \\<in> set (map (extend S) ps)\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "from \\<open>(Ps,C) = extendRule S r\\<close> and \\<open>r = (ps,c)\\<close>"], ["proof (chain)\npicking this:\n  (Ps, C) = extendRule S r\n  r = (ps, c)", "have \"map (extend S) ps = Ps\""], ["proof (prove)\nusing this:\n  (Ps, C) = extendRule S r\n  r = (ps, c)\n\ngoal (1 subgoal):\n 1. map (extend S) ps = Ps", "by (simp add:extendRule_def)"], ["proof (state)\nthis:\n  map (extend S) ps = Ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "ultimately"], ["proof (chain)\npicking this:\n  extend S p \\<in> set (map (extend S) ps)\n  map (extend S) ps = Ps", "show ?thesis"], ["proof (prove)\nusing this:\n  extend S p \\<in> set (map (extend S) ps)\n  map (extend S) ps = Ps\n\ngoal (1 subgoal):\n 1. extend S p \\<in> set Ps", "by auto"], ["proof (state)\nthis:\n  extend S p \\<in> set Ps\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonPrincipalID:\nfixes A :: \"'a form\"\nassumes \"r \\<in> Ax\"\nshows \"\\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "from assms"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "obtain i where r1:\"r = ([], \\<LM> ff \\<RM> \\<Rightarrow>* \\<Empt>) \\<or> r = ([], \\<LM> At i \\<RM> \\<Rightarrow>* \\<LM> At i\\<RM>)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n        r =\n        ([],\n          \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At\n            i  \\<RM>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i.\n      r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n        r =\n        ([],\n          \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At\n            i  \\<RM>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "{"], ["proof (state)\nthis:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "assume \"rightPrincipal r A\""], ["proof (state)\nthis:\n  rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r A", "obtain Ps where r2:\"r = (Ps, \\<Empt> \\<Rightarrow>* \\<LM> A \\<RM>)\""], ["proof (prove)\nusing this:\n  rightPrincipal r A\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "with r1"], ["proof (chain)\npicking this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>)", "have \"False\""], ["proof (prove)\nusing this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  r = (Ps,  \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "}"], ["proof (state)\nthis:\n  rightPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  rightPrincipal r A \\<Longrightarrow> False", "have \"\\<not> rightPrincipal r A\""], ["proof (prove)\nusing this:\n  rightPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A", "by auto"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "moreover"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "{"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "assume \"leftPrincipal r A\""], ["proof (state)\nthis:\n  leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r A", "obtain Ps' F Fs where r3:\"r = (Ps', \\<LM>Compound F Fs\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  leftPrincipal r A\n\ngoal (1 subgoal):\n 1. (\\<And>Ps' F Fs.\n        r =\n        (Ps',\n          \\<LM> Compound F\n                 Fs  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases r) auto"], ["proof (state)\nthis:\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "with r1"], ["proof (chain)\npicking this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"False\""], ["proof (prove)\nusing this:\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  r = (Ps',  \\<LM> Compound F Fs  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "}"], ["proof (state)\nthis:\n  leftPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "then"], ["proof (chain)\npicking this:\n  leftPrincipal r A \\<Longrightarrow> False", "have \"\\<not> leftPrincipal r A\""], ["proof (prove)\nusing this:\n  leftPrincipal r A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> leftPrincipal r A", "by auto"], ["proof (state)\nthis:\n  \\<not> leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> rightPrincipal r A\n  \\<not> leftPrincipal r A", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> rightPrincipal r A\n  \\<not> leftPrincipal r A\n\ngoal (1 subgoal):\n 1. \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A", "by simp"], ["proof (state)\nthis:\n  \\<not> rightPrincipal r A \\<and> \\<not> leftPrincipal r A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extendCommute:\nshows \"(extend S) (extend R c) = (extend R) (extend S c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend S (extend R c) = extend R (extend S c)", "by (auto simp add:extend_def union_ac)"], ["", "lemma mapCommute:\nshows \"map (extend S) (map (extend R) c) = map (extend R) (map (extend S) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (extend S) (map (extend R) c) = map (extend R) (map (extend S) c)", "by (induct_tac c) (auto simp add:extendCommute)"], ["", "lemma extendAssoc:\nshows \"(extend S) (extend R c) = extend (extend S R) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend S (extend R c) = extend (extend S R) c", "by (auto simp add:extend_def union_ac)"], ["", "lemma mapAssoc:\nshows \"map (extend S) (map (extend R) c) = map (extend (extend S R)) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (extend S) (map (extend R) c) = map (extend (extend S R)) c", "by (induct_tac c) (auto simp add:extendAssoc)"], ["", "lemma extended_Ax_prems_empty:\nassumes \"r \\<in> Ax\"\nshows \"fst (extendRule S r) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (extendRule S r) = []", "using assms"], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst (extendRule S r) = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> fst (extendRule S r) = []", "by (rule Ax.cases) (auto simp add:extendRule_def)"], ["", "inductive lastRule :: \"'a deriv \\<Rightarrow> 'a rule \\<Rightarrow> 'a rule set \\<Rightarrow> bool\"\n  where\n  base[intro]: \"\\<lbrakk> r \\<in> Ax; Ax \\<subseteq> R ; snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<rbrakk>\n                 \\<Longrightarrow> lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,0) r R\"\n|    I[intro]:  \"\\<lbrakk> r\\<in>R ; r \\<notin> Ax ; snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>) ; \n                \\<forall> p \\<in> set (fst (extendRule S r)). \\<exists> m\\<le>n. (p,m) \\<in> derivable R* \\<rbrakk> \n                 \\<Longrightarrow> lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,n+1) r R\""], ["", "lemma obv:\nfixes a :: \"('a * 'b)\"\nshows \"a = (fst a, snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = (fst a, snd a)", "by auto"], ["", "lemma getLast:\nassumes \"lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,n+1) r R\"\nshows \"\\<exists> S Ps. extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and> (\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n. (p,m) \\<in> derivable R*) \\<and> r \\<in> R \\<and> r \\<notin> Ax\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S Ps.\n       extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n       (\\<forall>p\\<in>set Ps.\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*) \\<and>\n       r \\<in> R \\<and> r \\<notin> Ax", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S Ps.\n       extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n       (\\<forall>p\\<in>set Ps.\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*) \\<and>\n       r \\<in> R \\<and> r \\<notin> Ax", "from assms"], ["proof (chain)\npicking this:\n  lastRule ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) r R", "show ?thesis"], ["proof (prove)\nusing this:\n  lastRule ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) r R\n\ngoal (1 subgoal):\n 1. \\<exists>S Ps.\n       extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n       (\\<forall>p\\<in>set Ps.\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*) \\<and>\n       r \\<in> R \\<and> r \\<notin> Ax", "apply (rule lastRule.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ra Ra S \\<Gamma>' \\<Delta>'.\n       \\<lbrakk>( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) =\n                ( \\<Gamma>' \\<Rightarrow>* \\<Delta>', 0);\n        r = ra; R = Ra; ra \\<in> Ax; Ax \\<subseteq> Ra;\n        snd (extendRule S ra) =\n        ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S Ps.\n                            extendRule S r =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*) \\<and>\n                            r \\<in> R \\<and> r \\<notin> Ax\n 2. \\<And>ra Ra S \\<Gamma>' \\<Delta>' na.\n       \\<lbrakk>( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) =\n                ( \\<Gamma>' \\<Rightarrow>* \\<Delta>', na + 1);\n        r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>');\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>na. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S Ps.\n                            extendRule S r =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*) \\<and>\n                            r \\<in> R \\<and> r \\<notin> Ax", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S \\<Gamma>' \\<Delta>' na.\n       \\<lbrakk>( \\<Gamma> \\<Rightarrow>* \\<Delta>, n + 1) =\n                ( \\<Gamma>' \\<Rightarrow>* \\<Delta>', na + 1);\n        r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma>' \\<Rightarrow>* \\<Delta>');\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>na. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S Ps.\n                            extendRule S r =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable R*) \\<and>\n                            r \\<in> R \\<and> r \\<notin> Ax", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S.\n       \\<lbrakk>r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S Ps.\n                            extendRule S ra =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable Ra*)", "apply (rule_tac x=S in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S.\n       \\<lbrakk>r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ps.\n                            extendRule S ra =\n                            (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                            (\\<forall>p\\<in>set Ps.\n                                \\<exists>m\\<le>n.\n                                   (p, m) \\<in> derivable Ra*)", "apply (rule_tac x=\"fst (extendRule S r)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S.\n       \\<lbrakk>r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> extendRule S ra =\n                         (fst (extendRule S r),\n                           \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n                         (\\<forall>p\\<in>set (fst (extendRule S r)).\n                             \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra Ra S.\n       \\<lbrakk>r = ra; R = Ra; ra \\<in> Ra; ra \\<notin> Ax;\n        snd (extendRule S ra) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S ra)).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable Ra*\\<rbrakk>\n       \\<Longrightarrow> extendRule S ra =\n                         (fst (extendRule S ra),\n                           \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b S.\n       \\<lbrakk>r = (a, b); (a, b) \\<in> R; (a, b) \\<notin> Ax;\n        snd (extendRule S (a, b)) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> extendRule S (a, b) =\n                         (fst (extendRule S (a, b)),\n                           \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (subgoal_tac \"extendRule S (a,b) = (fst (extendRule S (a,b)),snd (extendRule S (a,b)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b S.\n       \\<lbrakk>r = (a, b); (a, b) \\<in> R; (a, b) \\<notin> Ax;\n        snd (extendRule S (a, b)) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*;\n        extendRule S (a, b) =\n        (fst (extendRule S (a, b)), snd (extendRule S (a, b)))\\<rbrakk>\n       \\<Longrightarrow> extendRule S (a, b) =\n                         (fst (extendRule S (a, b)),\n                           \\<Gamma> \\<Rightarrow>* \\<Delta>)\n 2. \\<And>a b S.\n       \\<lbrakk>r = (a, b); (a, b) \\<in> R; (a, b) \\<notin> Ax;\n        snd (extendRule S (a, b)) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> extendRule S (a, b) =\n                         (fst (extendRule S (a, b)),\n                          snd (extendRule S (a, b)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b S.\n       \\<lbrakk>r = (a, b); (a, b) \\<in> R; (a, b) \\<notin> Ax;\n        snd (extendRule S (a, b)) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        \\<forall>p\\<in>set (fst (extendRule S (a, b))).\n           \\<exists>m\\<le>n. (p, m) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> extendRule S (a, b) =\n                         (fst (extendRule S (a, b)),\n                          snd (extendRule S (a, b)))", "by (rule obv)"], ["proof (state)\nthis:\n  \\<exists>S Ps.\n     extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<and>\n     (\\<forall>p\\<in>set Ps.\n         \\<exists>m\\<le>n. (p, m) \\<in> derivable R*) \\<and>\n     r \\<in> R \\<and> r \\<notin> Ax\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma getAx:\nassumes \"lastRule (\\<Gamma> \\<Rightarrow>* \\<Delta>,0) r R\"\nshows \"r \\<in> Ax \\<and> (\\<exists> S. extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "from assms"], ["proof (chain)\npicking this:\n  lastRule ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) r R", "have \"r \\<in> Ax \\<and> (\\<exists> S. snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>))\""], ["proof (prove)\nusing this:\n  lastRule ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) r R\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>))", "by (rule lastRule.cases) auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<and>\n  (\\<exists>S. snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>))\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "then"], ["proof (chain)\npicking this:\n  r \\<in> Ax \\<and>\n  (\\<exists>S. snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>))", "obtain S where \"r \\<in> Ax\" and \"snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  r \\<in> Ax \\<and>\n  (\\<exists>S. snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>))\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>r \\<in> Ax;\n         snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax\n  snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "from \\<open>r \\<in> Ax\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> Ax", "have \"fst r = []\""], ["proof (prove)\nusing this:\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. fst r = []", "apply (cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>r \\<in> Ax; r = (a, b)\\<rbrakk> \\<Longrightarrow> fst r = []", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  fst r = []\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "then"], ["proof (chain)\npicking this:\n  fst r = []", "have \"fst (extendRule S r) = []\""], ["proof (prove)\nusing this:\n  fst r = []\n\ngoal (1 subgoal):\n 1. fst (extendRule S r) = []", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  fst (extendRule S r) = []\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "with \\<open>snd (extendRule S r) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\\<close> and \\<open>r \\<in> Ax\\<close>"], ["proof (chain)\npicking this:\n  snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax\n  fst (extendRule S r) = []", "show ?thesis"], ["proof (prove)\nusing this:\n  snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  r \\<in> Ax\n  fst (extendRule S r) = []\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<and>\n    (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         extendRule S r =\n                         ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (rule_tac x=S in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = []\\<rbrakk>\n    \\<Longrightarrow> extendRule S r =\n                      ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "apply (subgoal_tac \"extendRule S r = (fst (extendRule S r),snd (extendRule S r))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = [];\n     extendRule S r = (fst (extendRule S r), snd (extendRule S r))\\<rbrakk>\n    \\<Longrightarrow> extendRule S r =\n                      ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n 2. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = []\\<rbrakk>\n    \\<Longrightarrow> extendRule S r =\n                      (fst (extendRule S r), snd (extendRule S r))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>snd (extendRule S r) = ( \\<Gamma> \\<Rightarrow>* \\<Delta>);\n     r \\<in> Ax; fst (extendRule S r) = []\\<rbrakk>\n    \\<Longrightarrow> extendRule S r =\n                      (fst (extendRule S r), snd (extendRule S r))", "by (rule obv)"], ["proof (state)\nthis:\n  r \\<in> Ax \\<and>\n  (\\<exists>S. extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Has the usual set-up: takes a subset of the upRules, combines with all the axioms, blah blah *)\n\n\n(* Constructing the rule set we will use.  It contains all axioms, but only a subset\n   of the possible logical rules. *)"], ["", "lemma ruleSet:\nassumes \"R' \\<subseteq> upRules\"\n    and \"R = Ax \\<union> R'\"\n    and \"(Ps,C) \\<in> R*\"\nshows \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "from \\<open>(Ps,C) \\<in> R*\\<close>"], ["proof (chain)\npicking this:\n  (Ps, C) \\<in> R*", "have \"\\<exists> S r. extendRule S r = (Ps,C) \\<and> r \\<in> R\""], ["proof (prove)\nusing this:\n  (Ps, C) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R", "by (cases) auto"], ["proof (state)\nthis:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "then"], ["proof (chain)\npicking this:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R", "obtain S r where \"(Ps,C) = extendRule S r\" and \"r \\<in> R\""], ["proof (prove)\nusing this:\n  \\<exists>S r. extendRule S r = (Ps, C) \\<and> r \\<in> R\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>(Ps, C) = extendRule S r; r \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a b.\n       \\<lbrakk>\\<And>S a b.\n                   \\<lbrakk>(Ps, C) = extendRule S (a, b);\n                    (a, b) \\<in> R\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        extendRule S (a, b) = (Ps, C); (a, b) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> thesis", "by (drule_tac x=S in meta_spec,drule_tac x=a in meta_spec, drule_tac x=b in meta_spec) auto"], ["proof (state)\nthis:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "moreover"], ["proof (state)\nthis:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "from \\<open>r \\<in> R\\<close> and \\<open>R = Ax \\<union> R'\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  R = Ax \\<union> R'", "have \"r \\<in> Ax \\<or> r \\<in> R'\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> R'", "by blast"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "ultimately"], ["proof (chain)\npicking this:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n  r \\<in> Ax \\<or> r \\<in> R'", "show ?thesis"], ["proof (prove)\nusing this:\n  (Ps, C) = extendRule S r\n  r \\<in> R\n  r \\<in> Ax \\<or> r \\<in> R'\n\ngoal (1 subgoal):\n 1. \\<exists>S r.\n       extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)", "by (rule_tac x=S in exI,rule_tac x=r in exI) (auto)"], ["proof (state)\nthis:\n  \\<exists>S r.\n     extendRule S r = (Ps, C) \\<and> (r \\<in> R' \\<or> r \\<in> Ax)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dpWeak:\nassumes a:\"(\\<Gamma> \\<Rightarrow>* \\<Delta>,n) \\<in> derivable R*\"\n   and  b: \"R' \\<subseteq> upRules\"\n   and  c: \"R = Ax \\<union> R'\" \nshows \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',n) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*", "using a"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*", "proof (induct n arbitrary: \\<Gamma> \\<Delta> rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x xa.\n                      ( x \\<Rightarrow>* xa, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', m)\n                      \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> +\n                           \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                          n)\n                         \\<in> derivable R*", "case (1 n \\<Gamma> \\<Delta>)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>x xa.\n        ( x \\<Rightarrow>* xa, m) \\<in> derivable R* \\<longrightarrow>\n        ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x xa.\n                      ( x \\<Rightarrow>* xa, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', m)\n                      \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> +\n                           \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                          n)\n                         \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>x xa.\n        ( x \\<Rightarrow>* xa, m) \\<in> derivable R* \\<longrightarrow>\n        ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*", "have IH: \"\\<forall>m<n. \\<forall> \\<Gamma> \\<Delta>. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, m) \\<in> derivable R* \\<longrightarrow> ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m) \\<in> derivable R*\" \n      and a': \"( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>x xa.\n        ( x \\<Rightarrow>* xa, m) \\<in> derivable R* \\<longrightarrow>\n        ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', m) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>\\<Gamma> \\<Delta>.\n          ( \\<Gamma> \\<Rightarrow>* \\<Delta>, m)\n          \\<in> derivable R* \\<longrightarrow>\n          ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n          \\<in> derivable R* &&&\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n        \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>n \\<Gamma> \\<Delta>.\n       \\<lbrakk>\\<forall>m<n.\n                   \\<forall>x xa.\n                      ( x \\<Rightarrow>* xa, m)\n                      \\<in> derivable R* \\<longrightarrow>\n                      ( x + \\<Gamma>' \\<Rightarrow>* xa + \\<Delta>', m)\n                      \\<in> derivable R*;\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\\<rbrakk>\n       \\<Longrightarrow> ( \\<Gamma> +\n                           \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                          n)\n                         \\<in> derivable R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = 0", "have \"(\\<Gamma> \\<Rightarrow>* \\<Delta>,0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = 0\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*", "have \"([], \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, 0) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "by (cases) auto"], ["proof (state)\nthis:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*", "obtain  r S where \"r \\<in> R\" and split:\"extendRule S r = ([],\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> R;\n         extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "obtain c where \"r = ([],c)\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>c. r = ([], c) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases r) (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  r = ([], c)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "with \\<open>r \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> R\n  r = ([], c)", "have \"r \\<in> Ax \\<or> r \\<in> upRules\""], ["proof (prove)\nusing this:\n  r \\<in> R\n  r = ([], c)\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> upRules", "using b c"], ["proof (prove)\nusing this:\n  r \\<in> R\n  r = ([], c)\n  R' \\<subseteq> upRules\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. r \\<in> Ax \\<or> r \\<in> upRules", "by auto"], ["proof (state)\nthis:\n  r \\<in> Ax \\<or> r \\<in> upRules\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "with \\<open>r = ([],c)\\<close>"], ["proof (chain)\npicking this:\n  r = ([], c)\n  r \\<in> Ax \\<or> r \\<in> upRules", "have \"r \\<in> Ax\""], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax \\<or> r \\<in> upRules\n\ngoal (1 subgoal):\n 1. r \\<in> Ax", "by (auto) (rule upRules.cases,auto)"], ["proof (state)\nthis:\n  r \\<in> Ax\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "with \\<open>r = ([],c)\\<close>"], ["proof (chain)\npicking this:\n  r = ([], c)\n  r \\<in> Ax", "obtain i where \"c = (\\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>) \\<or> c = (\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n        c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using characteriseAx[where r=r]"], ["proof (prove)\nusing this:\n  r = ([], c)\n  r \\<in> Ax\n  r \\<in> Ax \\<Longrightarrow>\n  r = ([],  \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<or>\n  (\\<exists>i.\n      r = ([],  \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n        c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "assume \"c = (\\<LM>At i\\<RM> \\<Rightarrow>* \\<LM>At i\\<RM>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)", "have \"extend S (\\<LM>At i\\<RM> \\<Rightarrow>*\\<LM>At i\\<RM>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using split and \\<open>r = ([],c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>)\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  r = ([], c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "using extendID"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend ?S ( \\<LM> At ?i  \\<RM> \\<Rightarrow>* \\<LM> At ?i  \\<RM>) =\n  ( ?\\<Gamma> \\<Rightarrow>* ?\\<Delta>) \\<Longrightarrow>\n  At ?i \\<in># ?\\<Gamma> \\<and> At ?i \\<in># ?\\<Delta>\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>", "have \"At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> \\<and> At i \\<in># \\<Delta>\n\ngoal (1 subgoal):\n 1. At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "using c and containID[where \\<Gamma>=\"\\<Gamma>+\\<Gamma>'\" and \\<Delta>=\"\\<Delta>+\\<Delta>'\" and R=R and i=i]"], ["proof (prove)\nusing this:\n  At i \\<in># \\<Gamma> + \\<Gamma>' \\<and> At i \\<in># \\<Delta> + \\<Delta>'\n  R = Ax \\<union> R'\n  \\<lbrakk>At i \\<in># \\<Gamma> + \\<Gamma>' \\<and>\n           At i \\<in># \\<Delta> + \\<Delta>';\n   Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c =\n  ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  c =\n  ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "{"], ["proof (state)\nthis:\n  c =\n  ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "assume \"c = (\\<LM>ff\\<RM> \\<Rightarrow>* \\<Empt>)\""], ["proof (state)\nthis:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)", "have \"extend S (\\<LM>ff\\<RM> \\<Rightarrow>*\\<Empt>) = (\\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "using split and \\<open>r = ([],c)\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  extendRule S r = ([],  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  r = ([], c)\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n    ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have \"ff \\<in># \\<Gamma>\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "using extendFalsum"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  extend ?S ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) =\n  ( ?\\<Gamma> \\<Rightarrow>* ?\\<Delta>) \\<Longrightarrow>\n  ff \\<in># ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma>", "have \"ff \\<in># \\<Gamma> + \\<Gamma>'\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma>\n\ngoal (1 subgoal):\n 1. ff \\<in># \\<Gamma> + \\<Gamma>'", "by auto"], ["proof (state)\nthis:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',0) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "using c and containFalsum[where \\<Gamma>=\"\\<Gamma>+\\<Gamma>'\" and \\<Delta>=\"\\<Delta>+\\<Delta>'\" and R=R]"], ["proof (prove)\nusing this:\n  ff \\<in># \\<Gamma> + \\<Gamma>'\n  R = Ax \\<union> R'\n  \\<lbrakk>ff \\<in># \\<Gamma> + \\<Gamma>'; Ax \\<subseteq> R\\<rbrakk>\n  \\<Longrightarrow> ( \\<Gamma> +\n                      \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',\n                     0)\n                    \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c =\n  ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*", "show \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c =\n  ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  c = ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<or>\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>)\n  c =\n  ( \\<LM> At i  \\<RM> \\<Rightarrow>* \\<LM> At i  \\<RM>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  c = ( \\<LM> ff  \\<RM> \\<Rightarrow>* \\<Empt>) \\<Longrightarrow>\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', 0)\n  \\<in> derivable R*\n  n = 0\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  n = Suc n'", "have \"(\\<Gamma> \\<Rightarrow>* \\<Delta>, n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n' + 1) \\<in> derivable R*", "using a'"], ["proof (prove)\nusing this:\n  n = Suc n'\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n' + 1) \\<in> derivable R*", "by simp"], ["proof (state)\nthis:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n' + 1) \\<in> derivable R*", "obtain Ps where f:\"Ps \\<noteq> []\"\n                  and g:\"(Ps, \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\" \n                  and h:\"\\<forall> p \\<in> set Ps. \\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n' + 1) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> [];\n         (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*;\n         \\<forall>p\\<in>set Ps.\n            \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=\"\\<Gamma> \\<Rightarrow>* \\<Delta>\" and m=n' and R=\"R*\"]"], ["proof (prove)\nusing this:\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n' + 1) \\<in> derivable R*\n  ( \\<Gamma> \\<Rightarrow>* \\<Delta>, n' + 1)\n  \\<in> derivable R* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R* \\<and>\n     (\\<forall>p\\<in>set Ps. \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> [];\n         (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*;\n         \\<forall>p\\<in>set Ps.\n            \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "from g c"], ["proof (chain)\npicking this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n  R = Ax \\<union> R'", "obtain S r where \"r \\<in> R\" and \"(r \\<in> Ax \\<or> r \\<in> R') \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> R*\n  R = Ax \\<union> R'\n\ngoal (1 subgoal):\n 1. (\\<And>r S.\n        \\<lbrakk>r \\<in> R;\n         (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n         extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases) auto"], ["proof (state)\nthis:\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "with b"], ["proof (chain)\npicking this:\n  R' \\<subseteq> upRules\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have as: \"(r \\<in> Ax \\<or> r \\<in> upRules) \\<and> extendRule S r = (Ps, \\<Gamma> \\<Rightarrow>* \\<Delta>)\""], ["proof (prove)\nusing this:\n  R' \\<subseteq> upRules\n  r \\<in> R\n  (r \\<in> Ax \\<or> r \\<in> R') \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n    extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have eq:\"map (extend (\\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps = fst (extendRule (extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)\""], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps =\n    fst (extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)", "using mapCommute[where S=\"\\<Gamma>'\\<Rightarrow>*\\<Delta>'\" and R=S and c=\"fst r\"]"], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n   (map (extend S) (fst r)) =\n  map (extend S)\n   (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) (fst r))\n\ngoal (1 subgoal):\n 1. map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps =\n    fst (extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)", "by (auto simp add:extendRule_def extend_def mapAssoc simp del: map_map)"], ["proof (state)\nthis:\n  map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps =\n  fst (extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "from as"], ["proof (chain)\npicking this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)", "have eq2: \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') = snd (extendRule (extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)\""], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') =\n    snd (extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)", "by (auto simp add:extendRule_def extend_def union_ac)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') =\n  snd (extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "from as f"], ["proof (chain)\npicking this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  Ps \\<noteq> []", "have \"fst r \\<noteq> []\""], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  Ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. fst r \\<noteq> []", "by (auto simp add:extendRule_def map_is_Nil_conv)"], ["proof (state)\nthis:\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "with as"], ["proof (chain)\npicking this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  fst r \\<noteq> []", "have \"r \\<in> upRules\""], ["proof (prove)\nusing this:\n  (r \\<in> Ax \\<or> r \\<in> upRules) \\<and>\n  extendRule S r = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>)\n  fst r \\<noteq> []\n\ngoal (1 subgoal):\n 1. r \\<in> upRules", "apply (cases r,auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> []; r = (a, b);\n        extendRule S (a, b) = (Ps,  \\<Gamma> \\<Rightarrow>* \\<Delta>);\n        (a, b) \\<in> Ax\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> upRules", "by (rule Ax.cases) auto"], ["proof (state)\nthis:\n  r \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "have \"\\<forall> p' \\<in> set (map (extend (\\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps). \\<exists> m\\<le>n'. (p',m) \\<in> derivable R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "assume \"p \\<in> set (map (extend (\\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps)\""], ["proof (state)\nthis:\n  p \\<in> set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps)\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  p \\<in> set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps)", "obtain p' where t:\"p' \\<in> set Ps \\<and> p = extend (\\<Gamma>' \\<Rightarrow>* \\<Delta>') p'\""], ["proof (prove)\nusing this:\n  p \\<in> set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps)\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        p' \\<in> set Ps \\<and>\n        p =\n        extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') p' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p' \\<in> set Ps \\<and> p = extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "with h"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  p' \\<in> set Ps \\<and> p = extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') p'", "obtain m where \"m\\<le>n'\" and \"(p',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set Ps. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n  p' \\<in> set Ps \\<and> p = extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<le> n'; (p', m) \\<in> derivable R*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m \\<le> n'\n  (p', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  m \\<le> n'\n  (p', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "obtain \\<Phi> \\<Psi> where eq:\"p' = (\\<Phi> \\<Rightarrow>* \\<Psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi> \\<Psi>.\n        p' = ( \\<Phi> \\<Rightarrow>* \\<Psi>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases p') auto"], ["proof (state)\nthis:\n  p' = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  p' = ( \\<Phi> \\<Rightarrow>* \\<Psi>)", "have \"p = (\\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\""], ["proof (prove)\nusing this:\n  p' = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. p = ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')", "using t"], ["proof (prove)\nusing this:\n  p' = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n  p' \\<in> set Ps \\<and> p = extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>') p'\n\ngoal (1 subgoal):\n 1. p = ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  p = ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  m \\<le> n'\n  (p', m) \\<in> derivable R*\n  p = ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')", "have \"(p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  m \\<le> n'\n  (p', m) \\<in> derivable R*\n  p = ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n\ngoal (1 subgoal):\n 1. (p, m) \\<in> derivable R*", "using IH and \\<open>n = Suc n'\\<close> and eq"], ["proof (prove)\nusing this:\n  m \\<le> n'\n  (p', m) \\<in> derivable R*\n  p = ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>')\n  \\<forall>m<n.\n     \\<forall>\\<Gamma> \\<Delta>.\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta>, m)\n        \\<in> derivable R* \\<longrightarrow>\n        ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n        \\<in> derivable R*\n  n = Suc n'\n  p' = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\n\ngoal (1 subgoal):\n 1. (p, m) \\<in> derivable R*", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n'; (p', m) \\<in> derivable R*;\n     p = ( \\<Phi> + \\<Gamma>' \\<Rightarrow>* \\<Psi> + \\<Delta>');\n     \\<forall>m<n.\n        \\<forall>\\<Gamma> \\<Delta>.\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>, m)\n           \\<in> derivable R* \\<longrightarrow>\n           ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', m)\n           \\<in> derivable R*;\n     n = Suc n'; p' = ( \\<Phi> \\<Rightarrow>* \\<Psi>)\\<rbrakk>\n    \\<Longrightarrow> (p, m) \\<in> derivable R*", "by (drule_tac x=m in spec) simp"], ["proof (state)\nthis:\n  (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  (p, m) \\<in> derivable R*", "have \"\\<exists> m\\<le>n'. (p,m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "using \\<open>m\\<le>n'\\<close>"], ["proof (prove)\nusing this:\n  (p, m) \\<in> derivable R*\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'. (p, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "}"], ["proof (state)\nthis:\n  ?p2\n  \\<in> set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n              Ps) \\<Longrightarrow>\n  \\<exists>m\\<le>n'. (?p2, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ?p2\n  \\<in> set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n              Ps) \\<Longrightarrow>\n  \\<exists>m\\<le>n'. (?p2, m) \\<in> derivable R*", "show ?thesis"], ["proof (prove)\nusing this:\n  ?p2\n  \\<in> set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n              Ps) \\<Longrightarrow>\n  \\<exists>m\\<le>n'. (?p2, m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                          Ps).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                        Ps).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                        Ps).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                        Ps).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "have \"\\<forall> p' \\<in> set (fst (extendRule (extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)).\n            \\<exists> m\\<le>n'. (p',m) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                        Ps).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (fst (extendRule\n                               (extend S\n                                 ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                               r)).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "using eq"], ["proof (prove)\nusing this:\n  \\<forall>p'\\<in>set (map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                        Ps).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n  map (extend ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) Ps =\n  fst (extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)\n\ngoal (1 subgoal):\n 1. \\<forall>p'\\<in>set (fst (extendRule\n                               (extend S\n                                 ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                               r)).\n       \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  \\<forall>p'\\<in>set (fst (extendRule\n                             (extend S\n                               ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                             r)).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "moreover"], ["proof (state)\nthis:\n  \\<forall>p'\\<in>set (fst (extendRule\n                             (extend S\n                               ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                             r)).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "have \"extendRule (extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>')) r \\<in> R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r \\<in> R*", "using \\<open>r \\<in> upRules\\<close> and \\<open>r \\<in> R\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> upRules\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r \\<in> R*", "by auto"], ["proof (state)\nthis:\n  extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p'\\<in>set (fst (extendRule\n                             (extend S\n                               ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                             r)).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n  extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r \\<in> R*", "have \"(\\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>',n'+1) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  \\<forall>p'\\<in>set (fst (extendRule\n                             (extend S\n                               ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                             r)).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n  extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r \\<in> R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n' + 1)\n    \\<in> derivable R*", "using derivable.step[where r=\"extendRule (extend S (\\<Gamma>' \\<Rightarrow>* \\<Delta>')) r\" and R=\"R*\" and m=\"n'\"]\n          and \\<open>fst r \\<noteq> []\\<close> and eq2"], ["proof (prove)\nusing this:\n  \\<forall>p'\\<in>set (fst (extendRule\n                             (extend S\n                               ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                             r)).\n     \\<exists>m\\<le>n'. (p', m) \\<in> derivable R*\n  extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r \\<in> R*\n  \\<lbrakk>extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r\n           \\<in> R*;\n   fst (extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n         r) \\<noteq>\n   [];\n   \\<forall>p\\<in>set (fst (extendRule\n                             (extend S\n                               ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                             r)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R*\\<rbrakk>\n  \\<Longrightarrow> (snd (extendRule\n                           (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>'))\n                           r),\n                     n' + 1)\n                    \\<in> derivable R*\n  fst r \\<noteq> []\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>') =\n  snd (extendRule (extend S ( \\<Gamma>' \\<Rightarrow>* \\<Delta>')) r)\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n' + 1)\n    \\<in> derivable R*", "by (cases r) (auto simp add:map_is_Nil_conv extendRule_def)"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n       \\<in> derivable R*", "then"], ["proof (chain)\npicking this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n' + 1)\n  \\<in> derivable R*", "show \"( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n' + 1)\n  \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n' + 1)\n  \\<in> derivable R*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n    \\<in> derivable R*", "by auto"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n  \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ( \\<Gamma> + \\<Gamma>' \\<Rightarrow>* \\<Delta> + \\<Delta>', n)\n  \\<in> derivable R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\section{Manipulating Rule Sets \\label{isaSRC}}\nThe removal of superfluous and redundant rules \\cite{AL01} will not be harmful to invertibility: removing rules means that the conditions of earlier sections are more likely to be fulfilled.  Here, we formalise the results that the removal of such rules from a calculus $\\mathcal{L}$ will create a new calculus $\\mathcal{L}'$ which is equivalent.  In other words, if a sequent is derivable in $\\mathcal{L}$, then it is derivable in $\\mathcal{L}'$.\nThe results formalised in this section are for \\SC multisuccedent calculi.\n\nWhen dealing with lists of premisses, a rule $R$ with premisses $P$ will be redundant given a rule $R'$ with premisses $P'$ if there exists some $p$ such that $P = p \\# P'$.  There are other ways in which a rule could be redundant; say if $P = Q @ P'$, or if $P = P' @ Q$, and so on.  The order of the premisses is not really important, since the formalisation operates on the finite set based upon the list.  The more general ``append'' lemma could be proved from the lemma we give; we prove the inductive step case in the proof of such an append lemma.  This is a height preserving transformation.  Some of the proof is shown:\n\\<close>"], ["", "lemma removeRedundant:\nassumes (*<*)a:(*>*) \"r1 = (p#ps,c) \\<and> r1 \\<in> upRules\"\nand     (*<*)b:(*>*) \"r2 = (ps,c) \\<and> r2 \\<in> upRules\"\nand     (*<*)c:(*>*) \"R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\"\nand     (*<*)d:(*>*) \"(T,n) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\"\nshows   \"\\<exists> m\\<le>n. (T,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "using assms"], ["proof (prove)\nusing this:\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (ps, c) \\<and> r2 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*>*)"], ["proof (prove)\nusing this:\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (ps, c) \\<and> r2 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "proof (induct n (*<*)arbitrary: T (*>*)rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 = (p # ps, c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable\n                              R \\<union> {r1} \\<union>\n                              {r2}* \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           (x, ma) \\<in> derivable R \\<union> {r2}*));\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules;\n        r2 = (ps, c) \\<and> r2 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 = (p # ps, c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable\n                              R \\<union> {r1} \\<union>\n                              {r2}* \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           (x, ma) \\<in> derivable R \\<union> {r2}*));\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules;\n        r2 = (ps, c) \\<and> r2 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (T, m) \\<in> derivable R \\<union> {r2}*", "case (1 n T)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n     r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m)\n         \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n         (\\<exists>ma\\<le>m. (x, ma) \\<in> derivable R \\<union> {r2}*))\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (ps, c) \\<and> r2 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 = (p # ps, c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable\n                              R \\<union> {r1} \\<union>\n                              {r2}* \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           (x, ma) \\<in> derivable R \\<union> {r2}*));\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules;\n        r2 = (ps, c) \\<and> r2 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n     r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m)\n         \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n         (\\<exists>ma\\<le>m. (x, ma) \\<in> derivable R \\<union> {r2}*))\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (ps, c) \\<and> r2 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "have IH: \" \\<forall>m<n. \\<forall> x. (r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n                         r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n                         R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow> \n                         (x, m) \\<in> derivable (R \\<union> {r1} \\<union> {r2})* \\<longrightarrow> \n                         (\\<exists> m'\\<le>m. (x, m') \\<in> derivable (R \\<union> {r2})*))\" and\n             prm: \"(T,n) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n     r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m)\n         \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n         (\\<exists>ma\\<le>m. (x, ma) \\<in> derivable R \\<union> {r2}*))\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (ps, c) \\<and> r2 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>x.\n          r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n          r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n          R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n          (x, m)\n          \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n          (\\<exists>m'\\<le>m. (x, m') \\<in> derivable R \\<union> {r2}*) &&&\n    (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>x.\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n        r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n        (x, m)\n        \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n        (\\<exists>m'\\<le>m. (x, m') \\<in> derivable R \\<union> {r2}*)\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 = (p # ps, c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable\n                              R \\<union> {r1} \\<union>\n                              {r2}* \\<longrightarrow>\n                       (\\<exists>ma\\<le>m.\n                           (x, ma) \\<in> derivable R \\<union> {r2}*));\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules;\n        r2 = (ps, c) \\<and> r2 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n.\n                            (T, m) \\<in> derivable R \\<union> {r2}*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*>*)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "with prm"], ["proof (chain)\npicking this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = 0", "(*>*)"], ["proof (chain)\npicking this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = 0", "have \"(T,0) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = 0\n\ngoal (1 subgoal):\n 1. (T, 0) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "by simp"], ["proof (state)\nthis:\n  (T, 0) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  (T, 0) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "have \"([],T) \\<in> (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, 0) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R \\<union> {r1} \\<union> {r2}*", "by (cases) auto"], ["proof (state)\nthis:\n  ([], T) \\<in> R \\<union> {r1} \\<union> {r2}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  ([], T) \\<in> R \\<union> {r1} \\<union> {r2}*", "obtain S r where ext: \"extendRule S r = ([],T)\" and \n        \"r \\<in> (R \\<union> {r1} \\<union> {r2})\""], ["proof (prove)\nusing this:\n  ([], T) \\<in> R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r = ([], T);\n         r \\<in> R \\<union> {r1} \\<union> {r2}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}", "have \"r \\<in> R \\<or> r = r1 \\<or> r = r2\""], ["proof (prove)\nusing this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<or> r = r1 \\<or> r = r2", "using c"], ["proof (prove)\nusing this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<or> r = r1 \\<or> r = r2", "by auto"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "txt\\<open>\\noindent It cannot be the case that $r=r_{1}$ or $r=r_{2}$, since those are \\SC rules, whereas anything with an empty set of premisses\nmust be an axiom.  Since $\\mathcal{R}$ contains the set of axioms, so will $\\mathcal{R} \\cup r_{2}$:\\<close>"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "from ext"], ["proof (chain)\npicking this:\n  extendRule S r = ([], T)", "obtain d where \"r = ([],d)\""], ["proof (prove)\nusing this:\n  extendRule S r = ([], T)\n\ngoal (1 subgoal):\n 1. (\\<And>d. r = ([], d) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases r) (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  r = ([], d)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n  r = ([], d)", "have \"r \\<in> R \\<or> r = r2\""], ["proof (prove)\nusing this:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n  r = ([], d)\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<or> r = r2", "using c a ext"], ["proof (prove)\nusing this:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n  r = ([], d)\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  extendRule S r = ([], T)\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<or> r = r2", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r2\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*>*)"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r2\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R \\<or> r = r2", "have \"r \\<in> (R \\<union> {r2})\""], ["proof (prove)\nusing this:\n  r \\<in> R \\<or> r = r2\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<union> {r2}", "using c"], ["proof (prove)\nusing this:\n  r \\<in> R \\<or> r = r2\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<union> {r2}", "by auto"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R \\<union> {r2}", "have \"([],T) \\<in> (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  r \\<in> R \\<union> {r2}\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R \\<union> {r2}*", "using \\<open>extendRule S r = ([],T)\\<close> \n          and extRules.I[where r=r and R=\"R \\<union> {r2}\" and seq=S]"], ["proof (prove)\nusing this:\n  r \\<in> R \\<union> {r2}\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  extendRule S r \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  ([], T) \\<in> R \\<union> {r2}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*>*)"], ["proof (state)\nthis:\n  ([], T) \\<in> R \\<union> {r2}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  ([], T) \\<in> R \\<union> {r2}*", "have \"(T,0) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  ([], T) \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (T, 0) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  (T, 0) \\<in> derivable R \\<union> {r2}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  (T, 0) \\<in> derivable R \\<union> {r2}*", "show \"\\<exists> m\\<le>n. (T,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, 0) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  (T, 0) \\<in> derivable R \\<union> {r2}*\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "with prm"], ["proof (chain)\npicking this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = Suc n'", "(*>*)"], ["proof (chain)\npicking this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = Suc n'", "have \"(T,n'+1) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "by simp"], ["proof (state)\nthis:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "obtain Ps where e: \"Ps \\<noteq> []\"\n         and   f: \"(Ps,T) \\<in> (R \\<union> {r1} \\<union> {r2})*\"\n         and   g: \"\\<forall> P \\<in> set Ps. \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> [];\n         (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*;\n         \\<forall>P\\<in>set Ps.\n            \\<exists>m\\<le>n'.\n               (P, m)\n               \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(*<*)"], ["proof (prove)\nusing this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> [];\n         (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*;\n         \\<forall>P\\<in>set Ps.\n            \\<exists>m\\<le>n'.\n               (P, m)\n               \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=T and m=n' and R=\"(R \\<union> {r1} \\<union> {r2})*\"]"], ["proof (prove)\nusing this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  (T, n' + 1)\n  \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}* \\<and>\n     (\\<forall>p\\<in>set Ps.\n         \\<exists>n\\<le>n'.\n            (p, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> [];\n         (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*;\n         \\<forall>P\\<in>set Ps.\n            \\<exists>m\\<le>n'.\n               (P, m)\n               \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(*>*)"], ["proof (prove)\nusing this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  (T, n' + 1)\n  \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}* \\<and>\n     (\\<forall>p\\<in>set Ps.\n         \\<exists>n\\<le>n'.\n            (p, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> [];\n         (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*;\n         \\<forall>P\\<in>set Ps.\n            \\<exists>m\\<le>n'.\n               (P, m)\n               \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'.\n        (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "have g': \"\\<forall> P \\<in> set Ps. \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "assume \"P \\<in> set Ps\""], ["proof (state)\nthis:\n  P \\<in> set Ps\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "with g"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'.\n        (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  P \\<in> set Ps", "obtain m where \"(P,m) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\" and \"m\\<le>n'\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'.\n        (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  P \\<in> set Ps\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>(P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*;\n         m \\<le> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "with IH"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>x.\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n        r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n        (x, m)\n        \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n        (\\<exists>m'\\<le>m. (x, m') \\<in> derivable R \\<union> {r2}*)\n  (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  m \\<le> n'", "have \"\\<exists> m'\\<le>m. (P,m') \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>x.\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n        r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n        (x, m)\n        \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n        (\\<exists>m'\\<le>m. (x, m') \\<in> derivable R \\<union> {r2}*)\n  (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<le>m. (P, m') \\<in> derivable R \\<union> {r2}*", "using a b c and \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>x.\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n        r2 = (ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n        (x, m)\n        \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n        (\\<exists>m'\\<le>m. (x, m') \\<in> derivable R \\<union> {r2}*)\n  (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  m \\<le> n'\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (ps, c) \\<and> r2 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>m'\\<le>m. (P, m') \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m'\\<le>m. (P, m') \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m'\\<le>m. (P, m') \\<in> derivable R \\<union> {r2}*", "have \"\\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m. (P, m') \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "using \\<open>m\\<le>n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m'\\<le>m. (P, m') \\<in> derivable R \\<union> {r2}*\n  m \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>m \\<le> n'; m' \\<le> m;\n        (P, m') \\<in> derivable insert r2 R*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            (P, m) \\<in> derivable insert r2 R*", "by (rule_tac x=m' in exI) auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "}"], ["proof (state)\nthis:\n  ?P2 \\<in> set Ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'. (?P2, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  ?P2 \\<in> set Ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'. (?P2, m) \\<in> derivable R \\<union> {r2}*", "show ?thesis"], ["proof (prove)\nusing this:\n  ?P2 \\<in> set Ps \\<Longrightarrow>\n  \\<exists>m\\<le>n'. (?P2, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*>*)"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "from f"], ["proof (chain)\npicking this:\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*", "obtain S r where ext: \"extendRule S r = (Ps,T)\"\n        and \"r \\<in> (R \\<union> {r1} \\<union> {r2})\""], ["proof (prove)\nusing this:\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r = (Ps, T);\n         r \\<in> R \\<union> {r1} \\<union> {r2}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}", "have \"r \\<in> (R \\<union> {r2}) \\<or> r = r1\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<union> {r2} \\<or> r = r1", "by auto"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "txt\\<open>\\noindent Either $r$ is in the new rule set or $r$ is the redundant rule.  In the former case, there is nothing to do:\\<close>"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "{"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*>*)"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "assume \"r \\<in> (R \\<union> {r2})\""], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2}\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R \\<union> {r2}", "have \"(Ps,T) \\<in> (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  r \\<in> R \\<union> {r2}\n\ngoal (1 subgoal):\n 1. (Ps, T) \\<in> R \\<union> {r2}*", "(*<*)"], ["proof (prove)\nusing this:\n  r \\<in> R \\<union> {r2}\n\ngoal (1 subgoal):\n 1. (Ps, T) \\<in> R \\<union> {r2}*", "using ext and extRules.I[where r=r and R=\"R \\<union> {r2}\" and seq=S]"], ["proof (prove)\nusing this:\n  r \\<in> R \\<union> {r2}\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  extendRule S r \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (Ps, T) \\<in> R \\<union> {r2}*", "(*>*)"], ["proof (prove)\nusing this:\n  r \\<in> R \\<union> {r2}\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  extendRule S r \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (Ps, T) \\<in> R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  (Ps, T) \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "with g'"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n  (Ps, T) \\<in> R \\<union> {r2}*", "have \"(T,n) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n  (Ps, T) \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r2}*", "using \\<open>n = Suc n'\\<close> (*<*)and e and\n       derivable.step[where r=\"(Ps,T)\" and R=\"(R \\<union> {r2})*\" and m=n']"], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n  (Ps, T) \\<in> R \\<union> {r2}*\n  n = Suc n'\n  Ps \\<noteq> []\n  \\<lbrakk>(Ps, T) \\<in> R \\<union> {r2}*; fst (Ps, T) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (Ps, T)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R \\<union> {r2}*\\<rbrakk>\n  \\<Longrightarrow> (snd (Ps, T), n' + 1) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r2}*", "(*>*)"], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n  (Ps, T) \\<in> R \\<union> {r2}*\n  n = Suc n'\n  Ps \\<noteq> []\n  \\<lbrakk>(Ps, T) \\<in> R \\<union> {r2}*; fst (Ps, T) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (Ps, T)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R \\<union> {r2}*\\<rbrakk>\n  \\<Longrightarrow> (snd (Ps, T), n' + 1) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  (T, n) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (state)\nthis:\n  (T, n) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "}"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  (T, n) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  (T, n) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "{"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  (T, n) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*>*)"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  (T, n) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "txt\\<open>\\noindent In the latter case, the last inference was redundant.  Therefore the premisses, which are derivable at a lower height than the conclusion, \ncontain the premisses of $r_{2}$ (these premisses are \\texttt{extend S ps}).  This completes the proof:\\<close>"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  (T, n) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "assume \"r = r1\""], ["proof (state)\nthis:\n  r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  r = r1", "have \"map (extend S) (p # ps) = Ps\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r = r1\n\ngoal (1 subgoal):\n 1. map (extend S) (p # ps) = Ps", "using a"], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r = r1\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n\ngoal (1 subgoal):\n 1. map (extend S) (p # ps) = Ps", "by (auto(*<*) simp add:extendRule_def(*>*))"], ["proof (state)\nthis:\n  map (extend S) (p # ps) = Ps\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  map (extend S) (p # ps) = Ps", "have \"\\<forall> P \\<in> set (map (extend S) (p#ps)). \n                   \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  map (extend S) (p # ps) = Ps\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (map (extend S) (p # ps)).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "using g'"], ["proof (prove)\nusing this:\n  map (extend S) (p # ps) = Ps\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (map (extend S) (p # ps)).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "by simp"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (map (extend S) (p # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set (map (extend S) (p # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "have h: \"\\<forall> P \\<in> set (map (extend S) ps). \n                      \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (map (extend S) (p # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (map (extend S) ps).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "(*<*)"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "have \"extendRule S r2 = (map (extend S) ps, T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extendRule S r2 = (map (extend S) ps, T)", "using b and a and ext and \\<open>r = r1\\<close>"], ["proof (prove)\nusing this:\n  r2 = (ps, c) \\<and> r2 \\<in> upRules\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  extendRule S r = (Ps, T)\n  r = r1\n\ngoal (1 subgoal):\n 1. extendRule S r2 = (map (extend S) ps, T)", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  extendRule S r2 = (map (extend S) ps, T)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  extendRule S r2 = (map (extend S) ps, T)", "have i: \"(map (extend S) ps,T) \\<in> (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  extendRule S r2 = (map (extend S) ps, T)\n\ngoal (1 subgoal):\n 1. (map (extend S) ps, T) \\<in> R \\<union> {r2}*", "using extRules.I(*<*)[where r=r2 and R=\"(R \\<union> {r2})\" and seq=S]"], ["proof (prove)\nusing this:\n  extendRule S r2 = (map (extend S) ps, T)\n  r2 \\<in> R \\<union> {r2} \\<Longrightarrow>\n  extendRule S r2 \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (map (extend S) ps, T) \\<in> R \\<union> {r2}*", "(*>*)"], ["proof (prove)\nusing this:\n  extendRule S r2 = (map (extend S) ps, T)\n  r2 \\<in> R \\<union> {r2} \\<Longrightarrow>\n  extendRule S r2 \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (map (extend S) ps, T) \\<in> R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  (map (extend S) ps, T) \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "have \"ps = [] \\<or> ps \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps = [] \\<or> ps \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  ps = [] \\<or> ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "moreover"], ["proof (state)\nthis:\n  ps = [] \\<or> ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "{"], ["proof (state)\nthis:\n  ps = [] \\<or> ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "assume \"ps = []\""], ["proof (state)\nthis:\n  ps = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "with i"], ["proof (chain)\npicking this:\n  (map (extend S) ps, T) \\<in> R \\<union> {r2}*\n  ps = []", "have \"([],T) \\<in> (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (map (extend S) ps, T) \\<in> R \\<union> {r2}*\n  ps = []\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  ([], T) \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  ([], T) \\<in> R \\<union> {r2}*", "have \"(T,0) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  ([], T) \\<in> R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (T, 0) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  (T, 0) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  (T, 0) \\<in> derivable R \\<union> {r2}*", "have \"\\<exists> m\\<le>n. (T,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, 0) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "}"], ["proof (state)\nthis:\n  ps = [] \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "moreover"], ["proof (state)\nthis:\n  ps = [] \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "{"], ["proof (state)\nthis:\n  ps = [] \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "assume \"ps \\<noteq> []\""], ["proof (state)\nthis:\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "then"], ["proof (chain)\npicking this:\n  ps \\<noteq> []", "have \"map (extend S) ps \\<noteq> []\""], ["proof (prove)\nusing this:\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. map (extend S) ps \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  map (extend S) ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "with i and h"], ["proof (chain)\npicking this:\n  (map (extend S) ps, T) \\<in> R \\<union> {r2}*\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n  map (extend S) ps \\<noteq> []", "have \"(T,n'+1) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (map (extend S) ps, T) \\<in> R \\<union> {r2}*\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n  map (extend S) ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r2}*", "using derivable.step[where r=\"(map (extend S) ps,T)\" and R=\"(R \\<union> {r2})*\" and m=n']"], ["proof (prove)\nusing this:\n  (map (extend S) ps, T) \\<in> R \\<union> {r2}*\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r2}*\n  map (extend S) ps \\<noteq> []\n  \\<lbrakk>(map (extend S) ps, T) \\<in> R \\<union> {r2}*;\n   fst (map (extend S) ps, T) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (map (extend S) ps, T)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R \\<union> {r2}*\\<rbrakk>\n  \\<Longrightarrow> (snd (map (extend S) ps, T), n' + 1)\n                    \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  (T, n' + 1) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "with \\<open>n = Suc n'\\<close>"], ["proof (chain)\npicking this:\n  n = Suc n'\n  (T, n' + 1) \\<in> derivable R \\<union> {r2}*", "have \"\\<exists> m\\<le>n. (T,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  n = Suc n'\n  (T, n' + 1) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "}"], ["proof (state)\nthis:\n  ps \\<noteq> [] \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "ultimately"], ["proof (chain)\npicking this:\n  ps = [] \\<or> ps \\<noteq> []\n  ps = [] \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n  ps \\<noteq> [] \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "have \"\\<exists> m\\<le>n. (T,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  ps = [] \\<or> ps \\<noteq> []\n  ps = [] \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n  ps \\<noteq> [] \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "}"], ["proof (state)\nthis:\n  r = r1 \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> R \\<union> {r2} \\<or> r = r1\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  (T, n) \\<in> derivable R \\<union> {r2}*\n  r = r1 \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "show \"\\<exists> m\\<le>n. (T,m) \\<in> derivable (R \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  r \\<in> R \\<union> {r2} \\<or> r = r1\n  r \\<in> R \\<union> {r2} \\<Longrightarrow>\n  (T, n) \\<in> derivable R \\<union> {r2}*\n  r = r1 \\<Longrightarrow>\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*", "by blast"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n. (T, m) \\<in> derivable R \\<union> {r2}*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\noindent Recall that to remove superfluous rules, we must know that Cut is admissible in the original calculus \\cite{AL01}.  Again, we add the two distinguished premisses at the head of the premiss list; general results about permutation of lists will achieve a more general result.  Since one uses Cut in the proof, this will in general not be height-preserving:\n\\<close>"], ["", "lemma removeSuperfluous:\nassumes (*<*)a:(*>*) \"r1 = ((\\<Empt> \\<Rightarrow>* \\<LM>A\\<RM>) # ((\\<LM>A\\<RM> \\<Rightarrow>* \\<Empt>) # ps),c) \\<and> r1 \\<in> upRules\"\nand     (*<*)b:(*>*) \"R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\"\nand     \"(T,n) \\<in> derivable (R \\<union> {r1})*\"\nand     CA: \"\\<forall> \\<Gamma> \\<Delta> A. ((\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A) \\<in> derivable' R* \\<longrightarrow> \n             (\\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*) \\<longrightarrow>\n             (\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\"\nshows   \"T \\<in> derivable' R*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "using assms"], ["proof (prove)\nusing this:\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  \\<forall>\\<Gamma> \\<Delta> A.\n     (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n      \\<in> derivable' R* \\<longrightarrow>\n      ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n      \\<in> derivable' R*) \\<longrightarrow>\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "proof (induct n arbitrary: T rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 =\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n                       (\\<forall>\\<Gamma> \\<Delta> A.\n                           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n                            \\<in> derivable' R* \\<longrightarrow>\n                            ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n                            \\<in> derivable' R*) \\<longrightarrow>\n                           ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                           \\<in> derivable' R*) \\<longrightarrow>\n                       x \\<in> derivable' R*);\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c) \\<and>\n        r1 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1}*;\n        \\<forall>\\<Gamma> \\<Delta> A.\n           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n            \\<in> derivable' R* \\<longrightarrow>\n            ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n       \\<Longrightarrow> T \\<in> derivable' R*", "case (1 n T)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> A.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         x \\<in> derivable' R*)\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  \\<forall>\\<Gamma> \\<Delta> A.\n     (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n      \\<in> derivable' R* \\<longrightarrow>\n      ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n      \\<in> derivable' R*) \\<longrightarrow>\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 =\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n                       (\\<forall>\\<Gamma> \\<Delta> A.\n                           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n                            \\<in> derivable' R* \\<longrightarrow>\n                            ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n                            \\<in> derivable' R*) \\<longrightarrow>\n                           ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                           \\<in> derivable' R*) \\<longrightarrow>\n                       x \\<in> derivable' R*);\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c) \\<and>\n        r1 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1}*;\n        \\<forall>\\<Gamma> \\<Delta> A.\n           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n            \\<in> derivable' R* \\<longrightarrow>\n            ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n       \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> A.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         x \\<in> derivable' R*)\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  \\<forall>\\<Gamma> \\<Delta> A.\n     (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n      \\<in> derivable' R* \\<longrightarrow>\n      ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n      \\<in> derivable' R*) \\<longrightarrow>\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*", "have IH: \"\\<forall>m<n. r1 = (( \\<Empt> \\<Rightarrow>* \\<LM>A\\<RM>) # ( \\<LM>A\\<RM> \\<Rightarrow>* \\<Empt>) # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n    R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n    (\\<forall> T. (T, m) \\<in> derivable (R \\<union> {r1})* \\<longrightarrow>\n    (\\<forall> \\<Gamma> \\<Delta> B.\n    ((\\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> B) \\<in> derivable' R* \\<longrightarrow> (\\<Gamma> \\<oplus> B \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*) \\<longrightarrow> \n    (\\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*) \\<longrightarrow>\n    T \\<in> derivable' R*)\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> A.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         x \\<in> derivable' R*)\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  \\<forall>\\<Gamma> \\<Delta> A.\n     (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n      \\<in> derivable' R* \\<longrightarrow>\n      ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n      \\<in> derivable' R*) \\<longrightarrow>\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       r1 =\n       (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n        ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n        c) \\<and>\n       r1 \\<in> upRules \\<longrightarrow>\n       R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n       (\\<forall>T.\n           (T, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n           (\\<forall>\\<Gamma> \\<Delta> B.\n               (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> B)\n                \\<in> derivable' R* \\<longrightarrow>\n                ( \\<Gamma> \\<oplus> B \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' R*) \\<longrightarrow>\n               ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n               \\<in> derivable' R*) \\<longrightarrow>\n           T \\<in> derivable' R*)", "by blast"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>T.\n         (T, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> B.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> B)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> B \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         T \\<in> derivable' R*)\n\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 =\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n                       (\\<forall>\\<Gamma> \\<Delta> A.\n                           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n                            \\<in> derivable' R* \\<longrightarrow>\n                            ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n                            \\<in> derivable' R*) \\<longrightarrow>\n                           ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                           \\<in> derivable' R*) \\<longrightarrow>\n                       x \\<in> derivable' R*);\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c) \\<and>\n        r1 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1}*;\n        \\<forall>\\<Gamma> \\<Delta> A.\n           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n            \\<in> derivable' R* \\<longrightarrow>\n            ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n       \\<Longrightarrow> T \\<in> derivable' R*", "from 1"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> A.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         x \\<in> derivable' R*)\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  \\<forall>\\<Gamma> \\<Delta> A.\n     (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n      \\<in> derivable' R* \\<longrightarrow>\n      ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n      \\<in> derivable' R*) \\<longrightarrow>\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*", "have prm: \"(T,n) \\<in> derivable (R \\<union> {r1})*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> A.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         x \\<in> derivable' R*)\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  \\<forall>\\<Gamma> \\<Delta> A.\n     (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n      \\<in> derivable' R* \\<longrightarrow>\n      ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n      \\<in> derivable' R*) \\<longrightarrow>\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r1}*", "by blast"], ["proof (state)\nthis:\n  (T, n) \\<in> derivable R \\<union> {r1}*\n\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 =\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n                       (\\<forall>\\<Gamma> \\<Delta> A.\n                           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n                            \\<in> derivable' R* \\<longrightarrow>\n                            ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n                            \\<in> derivable' R*) \\<longrightarrow>\n                           ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                           \\<in> derivable' R*) \\<longrightarrow>\n                       x \\<in> derivable' R*);\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c) \\<and>\n        r1 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1}*;\n        \\<forall>\\<Gamma> \\<Delta> A.\n           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n            \\<in> derivable' R* \\<longrightarrow>\n            ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n       \\<Longrightarrow> T \\<in> derivable' R*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> T \\<in> derivable' R*\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> T \\<in> derivable' R*\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "with prm"], ["proof (chain)\npicking this:\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  n = 0", "have \"(T,0) \\<in> derivable (R \\<union> {r1})*\""], ["proof (prove)\nusing this:\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  n = 0\n\ngoal (1 subgoal):\n 1. (T, 0) \\<in> derivable R \\<union> {r1}*", "by simp"], ["proof (state)\nthis:\n  (T, 0) \\<in> derivable R \\<union> {r1}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> T \\<in> derivable' R*\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  (T, 0) \\<in> derivable R \\<union> {r1}*", "have \"([],T) \\<in> (R \\<union> {r1})*\""], ["proof (prove)\nusing this:\n  (T, 0) \\<in> derivable R \\<union> {r1}*\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R \\<union> {r1}*", "by (rule derivable.cases) auto"], ["proof (state)\nthis:\n  ([], T) \\<in> R \\<union> {r1}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> T \\<in> derivable' R*\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  ([], T) \\<in> R \\<union> {r1}*", "obtain S r where ext: \"extendRule S r = ([],T)\" and \"r \\<in> (R \\<union> {r1})\""], ["proof (prove)\nusing this:\n  ([], T) \\<in> R \\<union> {r1}*\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r = ([], T); r \\<in> R \\<union> {r1}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> T \\<in> derivable' R*\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1}", "have \"r \\<in> R \\<or> r = r1\""], ["proof (prove)\nusing this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1}\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<or> r = r1", "by auto"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> T \\<in> derivable' R*\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "with a"], ["proof (chain)\npicking this:\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  r \\<in> R \\<or> r = r1", "have \"r \\<in> R\""], ["proof (prove)\nusing this:\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  r \\<in> R \\<or> r = r1\n\ngoal (1 subgoal):\n 1. r \\<in> R", "using ext"], ["proof (prove)\nusing this:\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  r \\<in> R \\<or> r = r1\n  extendRule S r = ([], T)\n\ngoal (1 subgoal):\n 1. r \\<in> R", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  r \\<in> R\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> T \\<in> derivable' R*\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R", "have \"([],T) \\<in> R*\""], ["proof (prove)\nusing this:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R*", "using ext and extRules.I[where r=r and R=R and seq=S]"], ["proof (prove)\nusing this:\n  r \\<in> R\n  extendRule S r = ([], T)\n  r \\<in> R \\<Longrightarrow> extendRule S r \\<in> R*\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R*", "by auto"], ["proof (state)\nthis:\n  ([], T) \\<in> R*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> T \\<in> derivable' R*\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  ([], T) \\<in> R*", "show \"T \\<in> derivable' R*\""], ["proof (prove)\nusing this:\n  ([], T) \\<in> R*\n\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "by auto"], ["proof (state)\nthis:\n  T \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "with prm"], ["proof (chain)\npicking this:\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  n = Suc n'", "have prm': \"(T,n'+1) \\<in> derivable (R \\<union> {r1})*\""], ["proof (prove)\nusing this:\n  (T, n) \\<in> derivable R \\<union> {r1}*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r1}*", "by auto"], ["proof (state)\nthis:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1}*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1}*", "obtain Ps where ne: \"Ps \\<noteq> []\"\n      and   ex: \"(Ps,T) \\<in> (R \\<union> {r1})*\"\n      and   \"\\<forall> P \\<in> set Ps. \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r1})*\""], ["proof (prove)\nusing this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1}*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; (Ps, T) \\<in> R \\<union> {r1}*;\n         \\<forall>P\\<in>set Ps.\n            \\<exists>m\\<le>n'.\n               (P, m) \\<in> derivable R \\<union> {r1}*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=T and m=n' and R=\"(R \\<union> {r1})*\"]"], ["proof (prove)\nusing this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1}*\n  (T, n' + 1) \\<in> derivable R \\<union> {r1}* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps, T) \\<in> R \\<union> {r1}* \\<and>\n     (\\<forall>p\\<in>set Ps.\n         \\<exists>n\\<le>n'. (p, n) \\<in> derivable R \\<union> {r1}*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> []; (Ps, T) \\<in> R \\<union> {r1}*;\n         \\<forall>P\\<in>set Ps.\n            \\<exists>m\\<le>n'.\n               (P, m) \\<in> derivable R \\<union> {r1}*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r1}*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "with IH"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>T.\n         (T, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> B.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> B)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> B \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         T \\<in> derivable' R*)\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r1}*", "have e: \"\\<forall> P \\<in> set Ps. P \\<in> derivable' R*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>T.\n         (T, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> B.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> B)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> B \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         T \\<in> derivable' R*)\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r1}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps. P \\<in> derivable' R*", "using a b and prm' and \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     r1 =\n     (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n      ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n      c) \\<and>\n     r1 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>T.\n         (T, m) \\<in> derivable R \\<union> {r1}* \\<longrightarrow>\n         (\\<forall>\\<Gamma> \\<Delta> B.\n             (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> B)\n              \\<in> derivable' R* \\<longrightarrow>\n              ( \\<Gamma> \\<oplus> B \\<Rightarrow>* \\<Delta>)\n              \\<in> derivable' R*) \\<longrightarrow>\n             ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n             \\<in> derivable' R*) \\<longrightarrow>\n         T \\<in> derivable' R*)\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r1}*\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n' + 1) \\<in> derivable R \\<union> {r1}*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps. P \\<in> derivable' R*", "apply (auto simp only:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>m<Suc n'.\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c) =\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c) \\<and>\n                   True \\<longrightarrow>\n                   True \\<and>\n                   Ax \\<union> R1 = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>T.\n                       (T, m)\n                       \\<in> derivable\n                              Ax \\<union> R1 \\<union>\n                              {(( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) #\n                                ps,\n                                c)}* \\<longrightarrow>\n                       (\\<forall>\\<Gamma> \\<Delta> B.\n                           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> B)\n                            \\<in> derivable'\n                                   Ax \\<union> R1* \\<longrightarrow>\n                            ( \\<Gamma> \\<oplus> B \\<Rightarrow>* \\<Delta>)\n                            \\<in> derivable'\n                                   Ax \\<union> R1*) \\<longrightarrow>\n                           ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                           \\<in> derivable'\n                                  Ax \\<union> R1*) \\<longrightarrow>\n                       T \\<in> derivable' Ax \\<union> R1*);\n        Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> Ax \\<union> R1 \\<union>\n              {(( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)}*;\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>m\\<le>n'.\n               (x, m)\n               \\<in> derivable\n                      Ax \\<union> R1 \\<union>\n                      {(( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                        ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                        c)}*);\n        (T, n' + 1)\n        \\<in> derivable\n               Ax \\<union> R1 \\<union>\n               {(( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)}*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>m<Suc n'.\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c) =\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c) \\<and>\n                   True \\<longrightarrow>\n                   True \\<and>\n                   Ax \\<union> R1 = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>T.\n                       (T, m)\n                       \\<in> derivable\n                              Ax \\<union> R1 \\<union>\n                              {(( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) #\n                                ps,\n                                c)}* \\<longrightarrow>\n                       (\\<forall>\\<Gamma> \\<Delta> B.\n                           (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> B)\n                            \\<in> derivable'\n                                   Ax \\<union> R1* \\<longrightarrow>\n                            ( \\<Gamma> \\<oplus> B \\<Rightarrow>* \\<Delta>)\n                            \\<in> derivable'\n                                   Ax \\<union> R1*) \\<longrightarrow>\n                           ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                           \\<in> derivable'\n                                  Ax \\<union> R1*) \\<longrightarrow>\n                       T \\<in> derivable' Ax \\<union> R1*);\n        Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> Ax \\<union> R1 \\<union>\n              {(( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)}*;\n        (T, n' + 1)\n        \\<in> derivable\n               Ax \\<union> R1 \\<union>\n               {(( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)}*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        x \\<in> set Ps \\<longrightarrow>\n        (\\<exists>m\\<le>n'.\n            (x, m)\n            \\<in> derivable\n                   Ax \\<union> R1 \\<union>\n                   {(( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                     ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                     c)}*)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>\\<forall>m<Suc n'.\n                   \\<forall>T.\n                      (T, m)\n                      \\<in> derivable\n                             insert\n                              (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                               ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) #\n                               ps,\n                               c)\n                              (Ax \\<union> R1)* \\<longrightarrow>\n                      (\\<forall>\\<Gamma> \\<Delta>.\n                          (\\<exists>B.\n                              ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                              \\<in> derivable'\n                                     Ax \\<union> R1* \\<longrightarrow>\n                              ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                              \\<in> derivable'\n                                     Ax \\<union> R1*) \\<longrightarrow>\n                          ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                          \\<in> derivable'\n                                 Ax \\<union> R1*) \\<longrightarrow>\n                      T \\<in> derivable' Ax \\<union> R1*;\n        Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*", "apply (drule_tac x=m in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        m < Suc n' \\<longrightarrow>\n        (\\<forall>T.\n            (T, m)\n            \\<in> derivable\n                   insert\n                    (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                     ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                     c)\n                    (Ax \\<union> R1)* \\<longrightarrow>\n            (\\<forall>\\<Gamma> \\<Delta>.\n                (\\<exists>B.\n                    ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                    \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                    ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                    \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n                ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n            T \\<in> derivable' Ax \\<union> R1*)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        \\<forall>T.\n           (T, m)\n           \\<in> derivable\n                  insert\n                   (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                    ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                    c)\n                   (Ax \\<union> R1)* \\<longrightarrow>\n           (\\<forall>\\<Gamma> \\<Delta>.\n               (\\<exists>B.\n                   ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                   \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                   ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                   \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n               ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n               \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n           T \\<in> derivable' Ax \\<union> R1*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)* \\<longrightarrow>\n        (\\<forall>\\<Gamma> \\<Delta>.\n            (\\<exists>B.\n                ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n            ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n        x \\<in> derivable' Ax \\<union> R1*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        (\\<forall>\\<Gamma> \\<Delta>.\n            (\\<exists>B.\n                ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n            ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n        x \\<in> derivable' Ax \\<union> R1*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*", "apply (insert CA[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        (\\<forall>\\<Gamma> \\<Delta>.\n            (\\<exists>B.\n                ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n            ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n        x \\<in> derivable' Ax \\<union> R1*;\n        \\<forall>\\<Gamma> \\<Delta>.\n           (\\<exists>A.\n               ( \\<Gamma> \\<Rightarrow>* add_mset A \\<Delta>)\n               \\<in> derivable' R* \\<longrightarrow>\n               ( add_mset A \\<Gamma> \\<Rightarrow>* \\<Delta>)\n               \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*", "apply (subgoal_tac \"R = Ax \\<union> R1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        (\\<forall>\\<Gamma> \\<Delta>.\n            (\\<exists>B.\n                ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n            ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n        x \\<in> derivable' Ax \\<union> R1*;\n        \\<forall>\\<Gamma> \\<Delta>.\n           (\\<exists>A.\n               ( \\<Gamma> \\<Rightarrow>* add_mset A \\<Delta>)\n               \\<in> derivable' R* \\<longrightarrow>\n               ( add_mset A \\<Gamma> \\<Rightarrow>* \\<Delta>)\n               \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*;\n        R = Ax \\<union> R1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> derivable' Ax \\<union> R1*\n 2. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        (\\<forall>\\<Gamma> \\<Delta>.\n            (\\<exists>B.\n                ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n            ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n        x \\<in> derivable' Ax \\<union> R1*;\n        \\<forall>\\<Gamma> \\<Delta>.\n           (\\<exists>A.\n               ( \\<Gamma> \\<Rightarrow>* add_mset A \\<Delta>)\n               \\<in> derivable' R* \\<longrightarrow>\n               ( add_mset A \\<Gamma> \\<Rightarrow>* \\<Delta>)\n               \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n       \\<Longrightarrow> R = Ax \\<union> R1", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        (\\<forall>\\<Gamma> \\<Delta>.\n            (\\<exists>B.\n                ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n            ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n        x \\<in> derivable' Ax \\<union> R1*;\n        \\<forall>\\<Gamma> \\<Delta>.\n           (\\<exists>A.\n               ( \\<Gamma> \\<Rightarrow>* add_mset A \\<Delta>)\n               \\<in> derivable' R* \\<longrightarrow>\n               ( add_mset A \\<Gamma> \\<Rightarrow>* \\<Delta>)\n               \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n       \\<Longrightarrow> R = Ax \\<union> R1", "apply (insert b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert\n               (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                c)\n               (Ax \\<union> R1)*;\n        (T, Suc n')\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        n = Suc n';\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c)\n        \\<in> upRules;\n        r1 =\n        (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n         ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n         c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps;\n        m \\<le> n';\n        (x, m)\n        \\<in> derivable\n               insert\n                (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n                 ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n                 c)\n                (Ax \\<union> R1)*;\n        (\\<forall>\\<Gamma> \\<Delta>.\n            (\\<exists>B.\n                ( \\<Gamma> \\<Rightarrow>* add_mset B \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1* \\<longrightarrow>\n                ( add_mset B \\<Gamma> \\<Rightarrow>* \\<Delta>)\n                \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n            ( \\<Gamma> \\<Rightarrow>* \\<Delta>)\n            \\<in> derivable' Ax \\<union> R1*) \\<longrightarrow>\n        x \\<in> derivable' Ax \\<union> R1*;\n        \\<forall>\\<Gamma> \\<Delta>.\n           (\\<exists>A.\n               ( \\<Gamma> \\<Rightarrow>* add_mset A \\<Delta>)\n               \\<in> derivable' R* \\<longrightarrow>\n               ( add_mset A \\<Gamma> \\<Rightarrow>* \\<Delta>)\n               \\<in> derivable' R*) \\<longrightarrow>\n           ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\\<rbrakk>\n       \\<Longrightarrow> R = Ax \\<union> R1", "by blast"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set Ps. P \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "from ex"], ["proof (chain)\npicking this:\n  (Ps, T) \\<in> R \\<union> {r1}*", "obtain S r where ext: \"extendRule S r = (Ps,T)\" and \"r \\<in> (R \\<union> {r1})\""], ["proof (prove)\nusing this:\n  (Ps, T) \\<in> R \\<union> {r1}*\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r = (Ps, T); r \\<in> R \\<union> {r1}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1}\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1}", "have \"r \\<in> R \\<or> r = r1\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1}\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<or> r = r1", "by blast"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "{"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "assume \"r \\<in> R\""], ["proof (state)\nthis:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  r \\<in> R", "have \"(Ps,T) \\<in> R*\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. (Ps, T) \\<in> R*", "using extRules.I[where r=r and R=R and seq=S]"], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r \\<in> R\n  r \\<in> R \\<Longrightarrow> extendRule S r \\<in> R*\n\ngoal (1 subgoal):\n 1. (Ps, T) \\<in> R*", "by auto"], ["proof (state)\nthis:\n  (Ps, T) \\<in> R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "with e"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps. P \\<in> derivable' R*\n  (Ps, T) \\<in> R*", "have \"T \\<in> derivable' R*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps. P \\<in> derivable' R*\n  (Ps, T) \\<in> R*\n\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "using ne and\n        derivable'.step[where r=\"(Ps,T)\" and R=\"R*\"]"], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps. P \\<in> derivable' R*\n  (Ps, T) \\<in> R*\n  Ps \\<noteq> []\n  \\<lbrakk>(Ps, T) \\<in> R*; fst (Ps, T) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (Ps, T)). p \\<in> derivable' R*\\<rbrakk>\n  \\<Longrightarrow> snd (Ps, T) \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "by auto"], ["proof (state)\nthis:\n  T \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "}"], ["proof (state)\nthis:\n  r \\<in> R \\<Longrightarrow> T \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R \\<Longrightarrow> T \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "{"], ["proof (state)\nthis:\n  r \\<in> R \\<Longrightarrow> T \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "assume \"r = r1\""], ["proof (state)\nthis:\n  r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "with e and a and ext"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps. P \\<in> derivable' R*\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  extendRule S r = (Ps, T)\n  r = r1", "have \"(extend S (\\<LM>A\\<RM> \\<Rightarrow>* \\<Empt>)) \\<in> derivable' R*\"\n        and  \"(extend S (\\<Empt> \\<Rightarrow>* \\<LM>A\\<RM>)) \\<in> derivable' R*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps. P \\<in> derivable' R*\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n  extendRule S r = (Ps, T)\n  r = r1\n\ngoal (1 subgoal):\n 1. extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n    \\<in> derivable' R* &&&\n    extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> derivable' R*\n  extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> derivable' R*\n  extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*", "have \"S \\<in> derivable' R*\""], ["proof (prove)\nusing this:\n  extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> derivable' R*\n  extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. S \\<in> derivable' R*", "using CA"], ["proof (prove)\nusing this:\n  extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) \\<in> derivable' R*\n  extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*\n  \\<forall>\\<Gamma> \\<Delta> A.\n     (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n      \\<in> derivable' R* \\<longrightarrow>\n      ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n      \\<in> derivable' R*) \\<longrightarrow>\n     ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. S \\<in> derivable' R*", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n             \\<in> derivable' R*;\n     extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*;\n     \\<forall>\\<Gamma> \\<Delta> A.\n        (( \\<Gamma> \\<Rightarrow>* \\<Delta> \\<oplus> A)\n         \\<in> derivable' R* \\<longrightarrow>\n         ( \\<Gamma> \\<oplus> A \\<Rightarrow>* \\<Delta>)\n         \\<in> derivable' R*) \\<longrightarrow>\n        ( \\<Gamma> \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n    \\<Longrightarrow> S \\<in> derivable' R*", "apply (drule_tac x=\"antec S\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n             \\<in> derivable' R*;\n     extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*;\n     \\<forall>\\<Delta> A.\n        (( antec S \\<Rightarrow>* \\<Delta> \\<oplus> A)\n         \\<in> derivable' R* \\<longrightarrow>\n         ( antec S \\<oplus> A \\<Rightarrow>* \\<Delta>)\n         \\<in> derivable' R*) \\<longrightarrow>\n        ( antec S \\<Rightarrow>* \\<Delta>) \\<in> derivable' R*\\<rbrakk>\n    \\<Longrightarrow> S \\<in> derivable' R*", "apply (drule_tac x=\"succ S\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n             \\<in> derivable' R*;\n     extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*;\n     \\<forall>A.\n        (( antec S \\<Rightarrow>* succ S \\<oplus> A)\n         \\<in> derivable' R* \\<longrightarrow>\n         ( antec S \\<oplus> A \\<Rightarrow>* succ S)\n         \\<in> derivable' R*) \\<longrightarrow>\n        ( antec S \\<Rightarrow>* succ S) \\<in> derivable' R*\\<rbrakk>\n    \\<Longrightarrow> S \\<in> derivable' R*", "apply (drule_tac x=A in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extend S ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>)\n             \\<in> derivable' R*;\n     extend S ( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) \\<in> derivable' R*;\n     (( antec S \\<Rightarrow>* succ S \\<oplus> A)\n      \\<in> derivable' R* \\<longrightarrow>\n      ( antec S \\<oplus> A \\<Rightarrow>* succ S)\n      \\<in> derivable' R*) \\<longrightarrow>\n     ( antec S \\<Rightarrow>* succ S) \\<in> derivable' R*\\<rbrakk>\n    \\<Longrightarrow> S \\<in> derivable' R*", "apply (simp add:extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>( add_mset A (antec S) \\<Rightarrow>* succ S)\n             \\<in> derivable' R*;\n     ( antec S \\<Rightarrow>* add_mset A (succ S)) \\<in> derivable' R*;\n     ( antec S \\<Rightarrow>* succ S) \\<in> derivable' R*\\<rbrakk>\n    \\<Longrightarrow> S \\<in> derivable' R*", "by (cases S) auto"], ["proof (state)\nthis:\n  S \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  S \\<in> derivable' R*", "obtain s where \"(S,s) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  S \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        (S, s) \\<in> derivable R* \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using deriv_to_deriv2"], ["proof (prove)\nusing this:\n  S \\<in> derivable' R*\n  ?C \\<in> derivable' ?R \\<Longrightarrow>\n  \\<exists>n. (?C, n) \\<in> derivable ?R\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        (S, s) \\<in> derivable R* \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (S, s) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  (S, s) \\<in> derivable R*", "have \"(extend S c,s) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  (S, s) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (extend S c, s) \\<in> derivable R*", "using dpWeak[where R=R and R'=R1 and \\<Gamma>=\"antec S\" and \\<Delta>=\"succ S\"\n          and \\<Gamma>'=\"antec c\" and \\<Delta>'=\"succ c\" and n=s] and b"], ["proof (prove)\nusing this:\n  (S, s) \\<in> derivable R*\n  \\<lbrakk>( antec S \\<Rightarrow>* succ S, s) \\<in> derivable R*;\n   R1 \\<subseteq> upRules; R = Ax \\<union> R1\\<rbrakk>\n  \\<Longrightarrow> ( antec S + antec c \\<Rightarrow>* succ S + succ c, s)\n                    \\<in> derivable R*\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n\ngoal (1 subgoal):\n 1. (extend S c, s) \\<in> derivable R*", "apply (auto simp add:extend_def union_ac)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(S, s) \\<in> derivable Ax \\<union> R1*;\n     ( antec S \\<Rightarrow>* succ S, s)\n     \\<in> derivable Ax \\<union> R1* \\<Longrightarrow>\n     ( antec S + antec c \\<Rightarrow>* succ S + succ c, s)\n     \\<in> derivable Ax \\<union> R1*;\n     R1 \\<subseteq> upRules; R = Ax \\<union> R1\\<rbrakk>\n    \\<Longrightarrow> ( antec S + antec c \\<Rightarrow>* succ S + succ c, s)\n                      \\<in> derivable Ax \\<union> R1*", "by (cases S) auto"], ["proof (state)\nthis:\n  (extend S c, s) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  (extend S c, s) \\<in> derivable R*", "have \"(T,s) \\<in> derivable R*\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  (extend S c, s) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. (T, s) \\<in> derivable R*", "using \\<open>r = r1\\<close> and a"], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  (extend S c, s) \\<in> derivable R*\n  r = r1\n  r1 =\n  (( \\<Empt> \\<Rightarrow>* \\<LM> A  \\<RM>) #\n   ( \\<LM> A  \\<RM> \\<Rightarrow>* \\<Empt>) # ps,\n   c) \\<and>\n  r1 \\<in> upRules\n\ngoal (1 subgoal):\n 1. (T, s) \\<in> derivable R*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  (T, s) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "then"], ["proof (chain)\npicking this:\n  (T, s) \\<in> derivable R*", "have \"T \\<in> derivable' R*\""], ["proof (prove)\nusing this:\n  (T, s) \\<in> derivable R*\n\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "by auto"], ["proof (state)\nthis:\n  T \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "}"], ["proof (state)\nthis:\n  r = r1 \\<Longrightarrow> T \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> T \\<in> derivable' R*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> R \\<or> r = r1\n  r \\<in> R \\<Longrightarrow> T \\<in> derivable' R*\n  r = r1 \\<Longrightarrow> T \\<in> derivable' R*", "show \"T \\<in> derivable' R*\""], ["proof (prove)\nusing this:\n  r \\<in> R \\<or> r = r1\n  r \\<in> R \\<Longrightarrow> T \\<in> derivable' R*\n  r = r1 \\<Longrightarrow> T \\<in> derivable' R*\n\ngoal (1 subgoal):\n 1. T \\<in> derivable' R*", "by blast"], ["proof (state)\nthis:\n  T \\<in> derivable' R*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  T \\<in> derivable' R*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\noindent \\textit{Combinable rules} can also be removed.  We encapsulate the combinable criterion by saying that if $(p \\# P,T)$ and $(q \\# P, T)$ are rules in a calculus, then we get an equivalent calculus by replacing these two rules by $((\\textrm{extend } p \\ q) \\# P, T)$.  Since the \\texttt{extend} function is commutative, the order of $p$ and $q$ in the new rule is not important.  This transformation is height preserving:\n\\<close>"], ["", "lemma removeCombinable:\nassumes a: \"r1 = (p # ps,c) \\<and> r1 \\<in> upRules\"\nand     b: \"r2 = (q # ps,c) \\<and> r2 \\<in> upRules\"\nand     c: \"r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\"\nand     d: \"R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\"\nand     \"(T,n) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\"\nshows   \"(T,n) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r3}*", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r3}*", "using assms"], ["proof (prove)\nusing this:\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r3}*", "proof (induct n arbitrary:T rule:nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 = (p # ps, c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   r2 = (q # ps, c) \\<and>\n                   r2 \\<in> upRules \\<longrightarrow>\n                   r3 = (extend p q # ps, c) \\<and>\n                   r3 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable\n                              R \\<union> {r1} \\<union>\n                              {r2}* \\<longrightarrow>\n                       (x, m) \\<in> derivable R \\<union> {r3}*);\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules;\n        r2 = (q # ps, c) \\<and> r2 \\<in> upRules;\n        r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n       \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "case (1 n T)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n     r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n     r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m)\n         \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n         (x, m) \\<in> derivable R \\<union> {r3}*)\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 = (p # ps, c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   r2 = (q # ps, c) \\<and>\n                   r2 \\<in> upRules \\<longrightarrow>\n                   r3 = (extend p q # ps, c) \\<and>\n                   r3 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable\n                              R \\<union> {r1} \\<union>\n                              {r2}* \\<longrightarrow>\n                       (x, m) \\<in> derivable R \\<union> {r3}*);\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules;\n        r2 = (q # ps, c) \\<and> r2 \\<in> upRules;\n        r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n       \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n     r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n     r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m)\n         \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n         (x, m) \\<in> derivable R \\<union> {r3}*)\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "have IH: \"\\<forall>m<n. \\<forall> T. (r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n                               r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n                               r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules \\<longrightarrow>\n                               R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow> \n                              (T, m) \\<in> derivable (R \\<union> {r1} \\<union> {r2})* \\<longrightarrow> \n                              (T, m) \\<in> derivable (R \\<union> {r3})*)\" and\n             prm: \"(T, n) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n     r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n     r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules \\<longrightarrow>\n     R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n     (\\<forall>x.\n         (x, m)\n         \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n         (x, m) \\<in> derivable R \\<union> {r3}*)\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       \\<forall>T.\n          r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n          r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n          r3 = (extend p q # ps, c) \\<and>\n          r3 \\<in> upRules \\<longrightarrow>\n          R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n          (T, m)\n          \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n          (T, m) \\<in> derivable R \\<union> {r3}* &&&\n    (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "by auto"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     \\<forall>T.\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n        r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n        r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules \\<longrightarrow>\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n        (T, m)\n        \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n        (T, m) \\<in> derivable R \\<union> {r3}*\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>n T.\n       \\<lbrakk>\\<forall>m<n.\n                   r1 = (p # ps, c) \\<and>\n                   r1 \\<in> upRules \\<longrightarrow>\n                   r2 = (q # ps, c) \\<and>\n                   r2 \\<in> upRules \\<longrightarrow>\n                   r3 = (extend p q # ps, c) \\<and>\n                   r3 \\<in> upRules \\<longrightarrow>\n                   R1 \\<subseteq> upRules \\<and>\n                   R = Ax \\<union> R1 \\<longrightarrow>\n                   (\\<forall>x.\n                       (x, m)\n                       \\<in> derivable\n                              R \\<union> {r1} \\<union>\n                              {r2}* \\<longrightarrow>\n                       (x, m) \\<in> derivable R \\<union> {r3}*);\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules;\n        r2 = (q # ps, c) \\<and> r2 \\<in> upRules;\n        r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules;\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1;\n        (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n       \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r3}*", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with prm"], ["proof (chain)\npicking this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = 0", "have \"(T,0) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = 0\n\ngoal (1 subgoal):\n 1. (T, 0) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "by simp"], ["proof (state)\nthis:\n  (T, 0) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  (T, 0) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "have \"([],T) \\<in> (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, 0) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R \\<union> {r1} \\<union> {r2}*", "by (rule derivable.cases) auto"], ["proof (state)\nthis:\n  ([], T) \\<in> R \\<union> {r1} \\<union> {r2}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  ([], T) \\<in> R \\<union> {r1} \\<union> {r2}*", "obtain S r where ext: \"extendRule S r = ([],T)\" and \"r \\<in> (R \\<union> {r1} \\<union> {r2})\""], ["proof (prove)\nusing this:\n  ([], T) \\<in> R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r = ([], T);\n         r \\<in> R \\<union> {r1} \\<union> {r2}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}", "have \"r \\<in> R \\<or> r = r1 \\<or> r = r2\""], ["proof (prove)\nusing this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<or> r = r1 \\<or> r = r2", "by blast"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with ext and a and b"], ["proof (chain)\npicking this:\n  extendRule S r = ([], T)\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r \\<in> R \\<or> r = r1 \\<or> r = r2", "have \"r \\<in> R\""], ["proof (prove)\nusing this:\n  extendRule S r = ([], T)\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (1 subgoal):\n 1. r \\<in> R", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  r \\<in> R\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R", "have \"r \\<in> (R \\<union> {r3})\""], ["proof (prove)\nusing this:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<union> {r3}", "by simp"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r3}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r3}", "have \"([],T) \\<in> (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r3}\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R \\<union> {r3}*", "using extRules.I[where r=r and R=\"R \\<union> {r3}\" and seq=S]"], ["proof (prove)\nusing this:\n  extendRule S r = ([], T)\n  r \\<in> R \\<union> {r3}\n  r \\<in> R \\<union> {r3} \\<Longrightarrow>\n  extendRule S r \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. ([], T) \\<in> R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  ([], T) \\<in> R \\<union> {r3}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  ([], T) \\<in> R \\<union> {r3}*", "have \"(T,0) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  ([], T) \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, 0) \\<in> derivable R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  (T, 0) \\<in> derivable R \\<union> {r3}*\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  (T, 0) \\<in> derivable R \\<union> {r3}*", "show \"(T,n) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  (T, 0) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r3}*", "using \\<open>n=0\\<close>"], ["proof (prove)\nusing this:\n  (T, 0) \\<in> derivable R \\<union> {r3}*\n  n = 0\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  (T, n) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "case (Suc n')"], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with prm"], ["proof (chain)\npicking this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = Suc n'", "have prm': \"(T,n'+1) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "by simp"], ["proof (state)\nthis:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "obtain Ps where ne: \"Ps \\<noteq> []\"\n                       and   ex: \"(Ps,T) \\<in> (R \\<union> {r1} \\<union> {r2})*\"\n                       and   \"\\<forall> P \\<in> set Ps. \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r1} \\<union> {r2})*\""], ["proof (prove)\nusing this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> [];\n         (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*;\n         \\<forall>P\\<in>set Ps.\n            \\<exists>m\\<le>n'.\n               (P, m)\n               \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using characteriseLast[where C=T and m=n' and R=\"(R \\<union> {r1} \\<union> {r2})*\"]"], ["proof (prove)\nusing this:\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  (T, n' + 1)\n  \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<Longrightarrow>\n  \\<exists>Ps.\n     Ps \\<noteq> [] \\<and>\n     (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}* \\<and>\n     (\\<forall>p\\<in>set Ps.\n         \\<exists>n\\<le>n'.\n            (p, n) \\<in> derivable R \\<union> {r1} \\<union> {r2}*)\n\ngoal (1 subgoal):\n 1. (\\<And>Ps.\n        \\<lbrakk>Ps \\<noteq> [];\n         (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*;\n         \\<forall>P\\<in>set Ps.\n            \\<exists>m\\<le>n'.\n               (P, m)\n               \\<in> derivable R \\<union> {r1} \\<union> {r2}*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'.\n        (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with IH"], ["proof (chain)\npicking this:\n  \\<forall>m<n.\n     \\<forall>T.\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n        r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n        r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules \\<longrightarrow>\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n        (T, m)\n        \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n        (T, m) \\<in> derivable R \\<union> {r3}*\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'.\n        (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*", "have e: \"\\<forall> P \\<in> set Ps. \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>T.\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n        r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n        r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules \\<longrightarrow>\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n        (T, m)\n        \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n        (T, m) \\<in> derivable R \\<union> {r3}*\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'.\n        (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "using a b c d and prm' and \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     \\<forall>T.\n        r1 = (p # ps, c) \\<and> r1 \\<in> upRules \\<longrightarrow>\n        r2 = (q # ps, c) \\<and> r2 \\<in> upRules \\<longrightarrow>\n        r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules \\<longrightarrow>\n        R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1 \\<longrightarrow>\n        (T, m)\n        \\<in> derivable R \\<union> {r1} \\<union> {r2}* \\<longrightarrow>\n        (T, m) \\<in> derivable R \\<union> {r3}*\n  Ps \\<noteq> []\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'.\n        (P, m) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  (T, n' + 1) \\<in> derivable R \\<union> {r1} \\<union> {r2}*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set Ps.\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "apply (auto simp add:Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>m<Suc n'.\n                   \\<forall>T.\n                      (T, m)\n                      \\<in> derivable\n                             insert (q # ps, c)\n                              (insert (p # ps, c)\n                                (Ax \\<union> R1))* \\<longrightarrow>\n                      (T, m)\n                      \\<in> derivable\n                             insert (extend p q # ps, c) (Ax \\<union> R1)*;\n        Ps \\<noteq> [];\n        (Ps, T)\n        \\<in> insert (q # ps, c) (insert (p # ps, c) (Ax \\<union> R1))*;\n        \\<forall>x.\n           x \\<in> set Ps \\<longrightarrow>\n           (\\<exists>m\\<le>n'.\n               (x, m)\n               \\<in> derivable\n                      insert (q # ps, c)\n                       (insert (p # ps, c) (Ax \\<union> R1))*);\n        (T, Suc n')\n        \\<in> derivable\n               insert (q # ps, c) (insert (p # ps, c) (Ax \\<union> R1))*;\n        n = Suc n'; (p # ps, c) \\<in> upRules; r1 = (p # ps, c);\n        (q # ps, c) \\<in> upRules; r2 = (q # ps, c);\n        (extend p q # ps, c) \\<in> upRules; r3 = (extend p q # ps, c);\n        R1 \\<subseteq> upRules; R = Ax \\<union> R1; x \\<in> set Ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<le>n'.\n                            (x, m)\n                            \\<in> derivable\n                                   insert (extend p q # ps, c)\n                                    (Ax \\<union> R1)*", "by (drule_tac x=x in spec) auto"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "from ex"], ["proof (chain)\npicking this:\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*", "obtain S r where ext: \"extendRule S r = (Ps,T)\" and \"r \\<in> (R \\<union> {r1} \\<union> {r2})\""], ["proof (prove)\nusing this:\n  (Ps, T) \\<in> R \\<union> {r1} \\<union> {r2}*\n\ngoal (1 subgoal):\n 1. (\\<And>S r.\n        \\<lbrakk>extendRule S r = (Ps, T);\n         r \\<in> R \\<union> {r1} \\<union> {r2}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extRules.cases) auto"], ["proof (state)\nthis:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}", "have \"r \\<in> R \\<or> r = r1 \\<or> r = r2\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r1} \\<union> {r2}\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<or> r = r1 \\<or> r = r2", "by blast"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "{"], ["proof (state)\nthis:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "assume \"r \\<in> R\""], ["proof (state)\nthis:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  r \\<in> R", "have \"r \\<in> (R \\<union> {r3})\""], ["proof (prove)\nusing this:\n  r \\<in> R\n\ngoal (1 subgoal):\n 1. r \\<in> R \\<union> {r3}", "by simp"], ["proof (state)\nthis:\n  r \\<in> R \\<union> {r3}\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with ext"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r3}", "have \"(Ps,T) \\<in> (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r3}\n\ngoal (1 subgoal):\n 1. (Ps, T) \\<in> R \\<union> {r3}*", "using extRules.I[where r=r and R=\"R \\<union> {r3}\" and seq=S]"], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r \\<in> R \\<union> {r3}\n  r \\<in> R \\<union> {r3} \\<Longrightarrow>\n  extendRule S r \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (Ps, T) \\<in> R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  (Ps, T) \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with e"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  (Ps, T) \\<in> R \\<union> {r3}*", "have \"(T,n'+1) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  (Ps, T) \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r3}*", "using ne and\n                 derivable.step[where r=\"(Ps,T)\" and R=\"(R \\<union> {r3})*\" and m=n']"], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  (Ps, T) \\<in> R \\<union> {r3}*\n  Ps \\<noteq> []\n  \\<lbrakk>(Ps, T) \\<in> R \\<union> {r3}*; fst (Ps, T) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (Ps, T)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R \\<union> {r3}*\\<rbrakk>\n  \\<Longrightarrow> (snd (Ps, T), n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "}"], ["proof (state)\nthis:\n  r \\<in> R \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "moreover"], ["proof (state)\nthis:\n  r \\<in> R \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "{"], ["proof (state)\nthis:\n  r \\<in> R \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "assume \"r = r1\""], ["proof (state)\nthis:\n  r = r1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with e and a and ext"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  extendRule S r = (Ps, T)\n  r = r1", "have \"\\<exists> m\\<le>n'. (extend S p,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  extendRule S r = (Ps, T)\n  r = r1\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'. (extend S p, m) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'. (extend S p, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'. (extend S p, m) \\<in> derivable R \\<union> {r3}*", "have \"\\<exists> m\\<le>n'. (extend S (extend q p),m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'. (extend S p, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend S (extend q p), m) \\<in> derivable R \\<union> {r3}*", "using dpWeak[where R=\"R \\<union> {r3}\" and R'=\"R1 \\<union> {r3}\" and \\<Gamma>=\"antec S + antec p\" and \\<Delta>=\"succ S + succ p\"\n                              and \\<Gamma>'=\"antec q\" and \\<Delta>'=\"succ q\"] and d c"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'. (extend S p, m) \\<in> derivable R \\<union> {r3}*\n  \\<lbrakk>( antec S + antec p \\<Rightarrow>* succ S + succ p, ?n)\n           \\<in> derivable R \\<union> {r3}*;\n   R1 \\<union> {r3} \\<subseteq> upRules;\n   R \\<union> {r3} = Ax \\<union> (R1 \\<union> {r3})\\<rbrakk>\n  \\<Longrightarrow> ( antec S + antec p +\n                      antec q \\<Rightarrow>* succ S + succ p + succ q,\n                     ?n)\n                    \\<in> derivable R \\<union> {r3}*\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend S (extend q p), m) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend S (extend q p), m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "moreover"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend S (extend q p), m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "from e and ext and \\<open>r = r1\\<close> and a"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  extendRule S r = (Ps, T)\n  r = r1\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules", "have \"\\<forall> P \\<in> set (map (extend S) ps). \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  extendRule S r = (Ps, T)\n  r = r1\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (map (extend S) ps).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     (extend S (extend q p), m) \\<in> derivable R \\<union> {r3}*\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "have \"\\<forall> P \\<in> set (map (extend S) (extend q p # ps)). \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     (extend S (extend q p), m) \\<in> derivable R \\<union> {r3}*\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (map (extend S) (extend q p # ps)).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (map (extend S) (extend q p # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "moreover"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (map (extend S) (extend q p # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "have \"extend q p = extend p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend q p = extend p q", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  extend q p = extend p q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set (map (extend S) (extend q p # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  extend q p = extend p q", "have pm: \"\\<forall> P \\<in> set (fst (extendRule S r3)). \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (map (extend S) (extend q p # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  extend q p = extend p q\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (fst (extendRule S r3)).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "using c"], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (map (extend S) (extend q p # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  extend q p = extend p q\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (fst (extendRule S r3)).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (fst (extendRule S r3)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "from ext and a and c and \\<open>r = r1\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  r = r1", "have con: \"snd (extendRule S r3) = T\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r1 = (p # ps, c) \\<and> r1 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  r = r1\n\ngoal (1 subgoal):\n 1. snd (extendRule S r3) = T", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  snd (extendRule S r3) = T\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "have \"r3 \\<in> (R \\<union> {r3})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r3 \\<in> R \\<union> {r3}", "by simp"], ["proof (state)\nthis:\n  r3 \\<in> R \\<union> {r3}\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  r3 \\<in> R \\<union> {r3}", "have \"extendRule S r3 \\<in> (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  r3 \\<in> R \\<union> {r3}\n\ngoal (1 subgoal):\n 1. extendRule S r3 \\<in> R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  extendRule S r3 \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with pm and con and c"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set (fst (extendRule S r3)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  snd (extendRule S r3) = T\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  extendRule S r3 \\<in> R \\<union> {r3}*", "have \"(T,n'+1) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (fst (extendRule S r3)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  snd (extendRule S r3) = T\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  extendRule S r3 \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r3}*", "using derivable.step[where r=\"extendRule S r3\" and R=\"(R \\<union> {r3})*\" and m=n']"], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (fst (extendRule S r3)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  snd (extendRule S r3) = T\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  extendRule S r3 \\<in> R \\<union> {r3}*\n  \\<lbrakk>extendRule S r3 \\<in> R \\<union> {r3}*;\n   fst (extendRule S r3) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (extendRule S r3)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R \\<union> {r3}*\\<rbrakk>\n  \\<Longrightarrow> (snd (extendRule S r3), n' + 1)\n                    \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "}"], ["proof (state)\nthis:\n  r = r1 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "moreover"], ["proof (state)\nthis:\n  r = r1 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "{"], ["proof (state)\nthis:\n  r = r1 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "assume \"r = r2\""], ["proof (state)\nthis:\n  r = r2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with e and b and ext"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  extendRule S r = (Ps, T)\n  r = r2", "have \"\\<exists> m\\<le>n'. (extend S q,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  extendRule S r = (Ps, T)\n  r = r2\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'. (extend S q, m) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'. (extend S q, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'. (extend S q, m) \\<in> derivable R \\<union> {r3}*", "have \"\\<exists> m\\<le>n'. (extend S (extend p q),m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'. (extend S q, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend S (extend p q), m) \\<in> derivable R \\<union> {r3}*", "using dpWeak[where R=\"R \\<union> {r3}\" and R'=\"R1 \\<union> {r3}\" and \\<Gamma>=\"antec S + antec q\" and \\<Delta>=\"succ S + succ q\"\n                              and \\<Gamma>'=\"antec p\" and \\<Delta>'=\"succ p\"] and d c"], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'. (extend S q, m) \\<in> derivable R \\<union> {r3}*\n  \\<lbrakk>( antec S + antec q \\<Rightarrow>* succ S + succ q, ?n)\n           \\<in> derivable R \\<union> {r3}*;\n   R1 \\<union> {r3} \\<subseteq> upRules;\n   R \\<union> {r3} = Ax \\<union> (R1 \\<union> {r3})\\<rbrakk>\n  \\<Longrightarrow> ( antec S + antec q +\n                      antec p \\<Rightarrow>* succ S + succ q + succ p,\n                     ?n)\n                    \\<in> derivable R \\<union> {r3}*\n  R1 \\<subseteq> upRules \\<and> R = Ax \\<union> R1\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<le>n'.\n       (extend S (extend p q), m) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extend_def union_ac)"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend S (extend p q), m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "moreover"], ["proof (state)\nthis:\n  \\<exists>m\\<le>n'.\n     (extend S (extend p q), m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "from e and ext and \\<open>r = r2\\<close> and b"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  extendRule S r = (Ps, T)\n  r = r2\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules", "have \"\\<forall> P \\<in> set (map (extend S) ps). \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set Ps.\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  extendRule S r = (Ps, T)\n  r = r2\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (map (extend S) ps).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>m\\<le>n'.\n     (extend S (extend p q), m) \\<in> derivable R \\<union> {r3}*\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "have \"\\<forall> P \\<in> set (map (extend S) (extend p q # ps)). \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<le>n'.\n     (extend S (extend p q), m) \\<in> derivable R \\<union> {r3}*\n  \\<forall>P\\<in>set (map (extend S) ps).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (map (extend S) (extend p q # ps)).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (map (extend S) (extend p q # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set (map (extend S) (extend p q # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "have pm: \"\\<forall> P \\<in> set (fst (extendRule S r3)). \\<exists> m\\<le>n'. (P,m) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (map (extend S) (extend p q # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (fst (extendRule S r3)).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "using c"], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (map (extend S) (extend p q # ps)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<in>set (fst (extendRule S r3)).\n       \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  \\<forall>P\\<in>set (fst (extendRule S r3)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "from ext and b and c and \\<open>r = r2\\<close>"], ["proof (chain)\npicking this:\n  extendRule S r = (Ps, T)\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  r = r2", "have con: \"snd (extendRule S r3) = T\""], ["proof (prove)\nusing this:\n  extendRule S r = (Ps, T)\n  r2 = (q # ps, c) \\<and> r2 \\<in> upRules\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  r = r2\n\ngoal (1 subgoal):\n 1. snd (extendRule S r3) = T", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  snd (extendRule S r3) = T\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "have \"r3 \\<in> (R \\<union> {r3})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r3 \\<in> R \\<union> {r3}", "by simp"], ["proof (state)\nthis:\n  r3 \\<in> R \\<union> {r3}\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "then"], ["proof (chain)\npicking this:\n  r3 \\<in> R \\<union> {r3}", "have \"extendRule S r3 \\<in> (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  r3 \\<in> R \\<union> {r3}\n\ngoal (1 subgoal):\n 1. extendRule S r3 \\<in> R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  extendRule S r3 \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "with pm and con and c"], ["proof (chain)\npicking this:\n  \\<forall>P\\<in>set (fst (extendRule S r3)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  snd (extendRule S r3) = T\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  extendRule S r3 \\<in> R \\<union> {r3}*", "have \"(T,n'+1) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (fst (extendRule S r3)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  snd (extendRule S r3) = T\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  extendRule S r3 \\<in> R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r3}*", "using derivable.step[where r=\"extendRule S r3\" and R=\"(R \\<union> {r3})*\" and m=n']"], ["proof (prove)\nusing this:\n  \\<forall>P\\<in>set (fst (extendRule S r3)).\n     \\<exists>m\\<le>n'. (P, m) \\<in> derivable R \\<union> {r3}*\n  snd (extendRule S r3) = T\n  r3 = (extend p q # ps, c) \\<and> r3 \\<in> upRules\n  extendRule S r3 \\<in> R \\<union> {r3}*\n  \\<lbrakk>extendRule S r3 \\<in> R \\<union> {r3}*;\n   fst (extendRule S r3) \\<noteq> [];\n   \\<forall>p\\<in>set (fst (extendRule S r3)).\n      \\<exists>n\\<le>n'. (p, n) \\<in> derivable R \\<union> {r3}*\\<rbrakk>\n  \\<Longrightarrow> (snd (extendRule S r3), n' + 1)\n                    \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, n' + 1) \\<in> derivable R \\<union> {r3}*", "by (auto simp add:extendRule_def)"], ["proof (state)\nthis:\n  (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "}"], ["proof (state)\nthis:\n  r = r2 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> (T, n) \\<in> derivable R \\<union> {r3}*", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n  r \\<in> R \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n  r = r1 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n  r = r2 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*", "show \"(T,n) \\<in> derivable (R \\<union> {r3})*\""], ["proof (prove)\nusing this:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n  r \\<in> R \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n  r = r1 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n  r = r2 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r3}*", "using \\<open>n = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> R \\<or> r = r1 \\<or> r = r2\n  r \\<in> R \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n  r = r1 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n  r = r2 \\<Longrightarrow> (T, n' + 1) \\<in> derivable R \\<union> {r3}*\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. (T, n) \\<in> derivable R \\<union> {r3}*", "by auto"], ["proof (state)\nthis:\n  (T, n) \\<in> derivable R \\<union> {r3}*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (T, n) \\<in> derivable R \\<union> {r3}*\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text\\<open>\n\\section{Conclusions}\n\nOnly a portion of the formalisation was shown; a variety of intermediate lemmata were not made explicit.  This was necessary, for the \\textit{Isabelle} theory files run to almost 8000 lines.  However, these files do not have to be replicated for each new calculus.  It takes very little effort to define a new calculus.  Furthermore, proving invertibility is now a quick process; less than 25 lines of proof in most cases.  \n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}